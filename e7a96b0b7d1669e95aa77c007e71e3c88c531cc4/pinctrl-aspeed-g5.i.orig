# 1 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 359 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./../include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "./../include/linux/kconfig.h" 2
# 2 "<built-in>" 2
# 1 "./../include/linux/compiler_types.h" 1
# 59 "./../include/linux/compiler_types.h"
# 1 "../include/linux/compiler_attributes.h" 1
# 60 "./../include/linux/compiler_types.h" 2



# 1 "../include/linux/compiler-clang.h" 1
# 64 "./../include/linux/compiler_types.h" 2
# 85 "./../include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 3 "<built-in>" 2
# 1 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2




# 1 "../include/linux/bitops.h" 1



# 1 "../arch/arm/include/uapi/asm/types.h" 1




# 1 "../include/asm-generic/int-ll64.h" 1
# 11 "../include/asm-generic/int-ll64.h"
# 1 "../include/uapi/asm-generic/int-ll64.h" 1
# 12 "../include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/arm/include/generated/uapi/asm/bitsperlong.h" 1
# 1 "../include/asm-generic/bitsperlong.h" 1




# 1 "../include/uapi/asm-generic/bitsperlong.h" 1
# 6 "../include/asm-generic/bitsperlong.h" 2
# 2 "./arch/arm/include/generated/uapi/asm/bitsperlong.h" 2
# 13 "../include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "../include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 6 "../arch/arm/include/uapi/asm/types.h" 2
# 5 "../include/linux/bitops.h" 2
# 1 "../include/linux/bits.h" 1




# 1 "../include/linux/const.h" 1



# 1 "../include/uapi/linux/const.h" 1
# 5 "../include/linux/const.h" 2
# 6 "../include/linux/bits.h" 2
# 1 "./arch/arm/include/generated/uapi/asm/bitsperlong.h" 1
# 7 "../include/linux/bits.h" 2
# 6 "../include/linux/bitops.h" 2




extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);






# 1 "../arch/arm/include/asm/bitops.h" 1
# 27 "../arch/arm/include/asm/bitops.h"
# 1 "../include/linux/compiler.h" 1
# 180 "../include/linux/compiler.h"
# 1 "../include/uapi/linux/types.h" 1
# 14 "../include/uapi/linux/types.h"
# 1 "../include/uapi/linux/posix_types.h" 1




# 1 "../include/linux/stddef.h" 1




# 1 "../include/uapi/linux/stddef.h" 1
# 6 "../include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "../include/uapi/linux/posix_types.h" 2
# 25 "../include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;


# 1 "../arch/arm/include/uapi/asm/posix_types.h" 1
# 23 "../arch/arm/include/uapi/asm/posix_types.h"
typedef unsigned short __kernel_mode_t;


typedef unsigned short __kernel_ipc_pid_t;


typedef unsigned short __kernel_uid_t;
typedef unsigned short __kernel_gid_t;


typedef unsigned short __kernel_old_dev_t;



# 1 "../include/uapi/asm-generic/posix_types.h" 1




# 1 "./arch/arm/include/generated/uapi/asm/bitsperlong.h" 1
# 6 "../include/uapi/asm-generic/posix_types.h" 2
# 15 "../include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;







typedef int __kernel_pid_t;
# 41 "../include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;



typedef __kernel_uid_t __kernel_old_uid_t;
typedef __kernel_gid_t __kernel_old_gid_t;
# 68 "../include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_size_t;
typedef int __kernel_ssize_t;
typedef int __kernel_ptrdiff_t;
# 79 "../include/uapi/asm-generic/posix_types.h"
typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 37 "../arch/arm/include/uapi/asm/posix_types.h" 2
# 37 "../include/uapi/linux/posix_types.h" 2
# 15 "../include/uapi/linux/types.h" 2
# 29 "../include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "../include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 181 "../include/linux/compiler.h" 2
# 196 "../include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void __read_once_size(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("" : : : "memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("" : : : "memory"); } });
}
# 214 "../include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void __read_once_size_nocheck(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("" : : : "memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("" : : : "memory"); } });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
 case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
 case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
 case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
 default:
  __asm__ __volatile__("" : : : "memory");
  __builtin_memcpy((void *)p, (const void *)res, size);
  __asm__ __volatile__("" : : : "memory");
 }
}
# 256 "../include/linux/compiler.h"
# 1 "../arch/arm/include/asm/barrier.h" 1
# 56 "../arch/arm/include/asm/barrier.h"
extern void (*soc_mb)(void);
extern void arm_heavy_mb(void);
# 82 "../arch/arm/include/asm/barrier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long array_index_mask_nospec(unsigned long idx,
          unsigned long sz)
{
 unsigned long mask;

 asm volatile(
  "cmp	%1, %2\n"
 "	sbc	%0, %1, %1\n"

 : "=r" (mask)
 : "r" (idx), "Ir" (sz)
 : "cc");

 return mask;
}




# 1 "../include/asm-generic/barrier.h" 1
# 16 "../include/asm-generic/barrier.h"
# 1 "../include/linux/compiler.h" 1
# 17 "../include/asm-generic/barrier.h" 2
# 101 "../arch/arm/include/asm/barrier.h" 2
# 257 "../include/linux/compiler.h" 2
# 1 "../include/linux/kasan-checks.h" 1




# 1 "../include/linux/types.h" 1
# 13 "../include/linux/types.h"
typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
# 55 "../include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 130 "../include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 150 "../include/linux/types.h"
typedef u32 dma_addr_t;


typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;




typedef u32 phys_addr_t;


typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;







struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 219 "../include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);
# 6 "../include/linux/kasan-checks.h" 2
# 16 "../include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 34 "../include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 258 "../include/linux/compiler.h" 2
# 277 "../include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 308 "../include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 28 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/linux/irqflags.h" 1
# 15 "../include/linux/irqflags.h"
# 1 "../include/linux/typecheck.h" 1
# 16 "../include/linux/irqflags.h" 2
# 1 "../arch/arm/include/asm/irqflags.h" 1






# 1 "../arch/arm/include/asm/ptrace.h" 1
# 10 "../arch/arm/include/asm/ptrace.h"
# 1 "../arch/arm/include/uapi/asm/ptrace.h" 1
# 14 "../arch/arm/include/uapi/asm/ptrace.h"
# 1 "../arch/arm/include/asm/hwcap.h" 1




# 1 "../arch/arm/include/uapi/asm/hwcap.h" 1
# 6 "../arch/arm/include/asm/hwcap.h" 2








extern unsigned int elf_hwcap, elf_hwcap2;
# 15 "../arch/arm/include/uapi/asm/ptrace.h" 2
# 11 "../arch/arm/include/asm/ptrace.h" 2




struct pt_regs {
 unsigned long uregs[18];
};

struct svc_pt_regs {
 struct pt_regs regs;
 u32 dacr;
 u32 addr_limit;
};
# 57 "../arch/arm/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_user_regs(struct pt_regs *regs)
{

 unsigned long mode = regs->uregs[16] & 0x0000001f;




 regs->uregs[16] &= ~(0x00000040 | 0x00000100);

 if ((regs->uregs[16] & 0x00000080) == 0) {
  if (mode == 0x00000010)
   return 1;
  if (elf_hwcap & (1 << 3) && mode == 0x00000000)
   return 1;
 }




 regs->uregs[16] &= 0xff000000 | 0x00ff0000 | 0x0000ff00 | 0x00000020 | 0x00000010;
 if (!(elf_hwcap & (1 << 3)))
  regs->uregs[16] |= 0x00000010;

 return 0;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long regs_return_value(struct pt_regs *regs)
{
 return regs->uregs[0];
}
# 100 "../arch/arm/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void instruction_pointer_set(struct pt_regs *regs,
        unsigned long val)
{
 (regs)->uregs[15] = val;
}


extern unsigned long profile_pc(struct pt_regs *regs);
# 129 "../arch/arm/include/asm/ptrace.h"
extern int regs_query_register_offset(const char *name);
extern const char *regs_query_register_name(unsigned int offset);
extern bool regs_within_kernel_stack(struct pt_regs *regs, unsigned long addr);
extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n);
# 144 "../arch/arm/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_register(struct pt_regs *regs,
           unsigned int offset)
{
 if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, uregs[17]))), 0))
  return 0;
 return *(unsigned long *)((unsigned long)regs + offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->uregs[13];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return regs->uregs[13];
}
# 8 "../arch/arm/include/asm/irqflags.h" 2
# 25 "../arch/arm/include/asm/irqflags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_irq_save(void)
{
 unsigned long flags;

 asm volatile(
  "	mrs	%0, " "cpsr" "	@ arch_local_irq_save\n"
  "	cpsid	i"
  : "=r" (flags) : : "memory", "cc");
 return flags;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_enable(void)
{
 asm volatile(
  "	cpsie i			@ arch_local_irq_enable"
  :
  :
  : "memory", "cc");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_disable(void)
{
 asm volatile(
  "	cpsid i			@ arch_local_irq_disable"
  :
  :
  : "memory", "cc");
}
# 156 "../arch/arm/include/asm/irqflags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_save_flags(void)
{
 unsigned long flags;
 asm volatile(
  "	mrs	%0, " "cpsr" "	@ local_save_flags"
  : "=r" (flags) : : "memory", "cc");
 return flags;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_restore(unsigned long flags)
{
 asm volatile(
  "	msr	" "cpsr_c" ", %0	@ local_irq_restore"
  :
  : "r" (flags)
  : "memory", "cc");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return flags & 0x00000080;
}


# 1 "../include/asm-generic/irqflags.h" 1
# 61 "../include/asm-generic/irqflags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled(void)
{
 return arch_irqs_disabled_flags(arch_local_save_flags());
}
# 185 "../arch/arm/include/asm/irqflags.h" 2
# 17 "../include/linux/irqflags.h" 2



  extern void trace_softirqs_on(unsigned long ip);
  extern void trace_softirqs_off(unsigned long ip);
  extern void lockdep_hardirqs_on(unsigned long ip);
  extern void lockdep_hardirqs_off(unsigned long ip);
# 32 "../include/linux/irqflags.h"
  extern void trace_hardirqs_on(void);
  extern void trace_hardirqs_off(void);
# 69 "../include/linux/irqflags.h"
 extern void stop_critical_timings(void);
 extern void start_critical_timings(void);
# 29 "../arch/arm/include/asm/bitops.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ____atomic_set_bit(unsigned int bit, volatile unsigned long *p)
{
 unsigned long flags;
 unsigned long mask = ((((1UL))) << ((bit) % 32));

 p += ((bit) / 32);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 *p |= mask;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ____atomic_clear_bit(unsigned int bit, volatile unsigned long *p)
{
 unsigned long flags;
 unsigned long mask = ((((1UL))) << ((bit) % 32));

 p += ((bit) / 32);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 *p &= ~mask;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ____atomic_change_bit(unsigned int bit, volatile unsigned long *p)
{
 unsigned long flags;
 unsigned long mask = ((((1UL))) << ((bit) % 32));

 p += ((bit) / 32);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 *p ^= mask;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
____atomic_test_and_set_bit(unsigned int bit, volatile unsigned long *p)
{
 unsigned long flags;
 unsigned int res;
 unsigned long mask = ((((1UL))) << ((bit) % 32));

 p += ((bit) / 32);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 res = *p;
 *p = res | mask;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);

 return (res & mask) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
____atomic_test_and_clear_bit(unsigned int bit, volatile unsigned long *p)
{
 unsigned long flags;
 unsigned int res;
 unsigned long mask = ((((1UL))) << ((bit) % 32));

 p += ((bit) / 32);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 res = *p;
 *p = res & ~mask;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);

 return (res & mask) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
____atomic_test_and_change_bit(unsigned int bit, volatile unsigned long *p)
{
 unsigned long flags;
 unsigned int res;
 unsigned long mask = ((((1UL))) << ((bit) % 32));

 p += ((bit) / 32);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 res = *p;
 *p = res ^ mask;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);

 return (res & mask) != 0;
}


# 1 "../include/asm-generic/bitops/non-atomic.h" 1
# 16 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 32));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 32);

 *p |= mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 32));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 32);

 *p &= ~mask;
}
# 41 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __change_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 32));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 32);

 *p ^= mask;
}
# 58 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 32));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 32);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 77 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 32));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 32);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_change_bit(int nr,
         volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 32));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 32);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit(int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 32)] >> (nr & (32 -1)));
}
# 124 "../arch/arm/include/asm/bitops.h" 2
# 153 "../arch/arm/include/asm/bitops.h"
extern void _set_bit(int nr, volatile unsigned long * p);
extern void _clear_bit(int nr, volatile unsigned long * p);
extern void _change_bit(int nr, volatile unsigned long * p);
extern int _test_and_set_bit(int nr, volatile unsigned long * p);
extern int _test_and_clear_bit(int nr, volatile unsigned long * p);
extern int _test_and_change_bit(int nr, volatile unsigned long * p);




extern int _find_first_zero_bit_le(const unsigned long *p, unsigned size);
extern int _find_next_zero_bit_le(const unsigned long *p, int size, int offset);
extern int _find_first_bit_le(const unsigned long *p, unsigned size);
extern int _find_next_bit_le(const unsigned long *p, int size, int offset);




extern int _find_first_zero_bit_be(const unsigned long *p, unsigned size);
extern int _find_next_zero_bit_be(const unsigned long *p, int size, int offset);
extern int _find_first_bit_be(const unsigned long *p, unsigned size);
extern int _find_next_bit_be(const unsigned long *p, int size, int offset);
# 230 "../arch/arm/include/asm/bitops.h"
# 1 "../include/asm-generic/bitops/builtin-__fls.h" 1
# 11 "../include/asm-generic/bitops/builtin-__fls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 return (sizeof(word) * 8) - 1 - __builtin_clzl(word);
}
# 231 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-__ffs.h" 1
# 11 "../include/asm-generic/bitops/builtin-__ffs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 return __builtin_ctzl(word);
}
# 232 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-fls.h" 1
# 12 "../include/asm-generic/bitops/builtin-fls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls(unsigned int x)
{
 return x ? sizeof(x) * 8 - __builtin_clz(x) : 0;
}
# 233 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-ffs.h" 1
# 13 "../include/asm-generic/bitops/builtin-ffs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int ffs(int x)
{
 return __builtin_ffs(x);
}
# 234 "../arch/arm/include/asm/bitops.h" 2



# 1 "../include/asm-generic/bitops/ffz.h" 1
# 238 "../arch/arm/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/fls64.h" 1
# 19 "../include/asm-generic/bitops/fls64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls64(__u64 x)
{
 __u32 h = x >> 32;
 if (h)
  return fls(h) + 32;
 return fls(x);
}
# 240 "../arch/arm/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/sched.h" 1
# 13 "../include/asm-generic/bitops/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_find_first_bit(const unsigned long *b)
{





 if (b[0])
  return __ffs(b[0]);
 if (b[1])
  return __ffs(b[1]) + 32;
 if (b[2])
  return __ffs(b[2]) + 64;
 return __ffs(b[3]) + 96;



}
# 242 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/hweight.h" 1




# 1 "../include/asm-generic/bitops/arch_hweight.h" 1






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "../include/asm-generic/bitops/hweight.h" 2
# 1 "../include/asm-generic/bitops/const_hweight.h" 1
# 7 "../include/asm-generic/bitops/hweight.h" 2
# 243 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/lock.h" 1




# 1 "../include/linux/atomic.h" 1






# 1 "../arch/arm/include/asm/atomic.h" 1
# 12 "../arch/arm/include/asm/atomic.h"
# 1 "../include/linux/prefetch.h" 1
# 15 "../include/linux/prefetch.h"
# 1 "../arch/arm/include/asm/processor.h" 1
# 13 "../arch/arm/include/asm/processor.h"
# 1 "../arch/arm/include/asm/hw_breakpoint.h" 1






struct task_struct;



struct arch_hw_breakpoint_ctrl {
  u32 __reserved : 9,
  mismatch : 1,
    : 9,
  len : 8,
  type : 2,
  privilege : 2,
  enabled : 1;
};

struct arch_hw_breakpoint {
 u32 address;
 u32 trigger;
 struct arch_hw_breakpoint_ctrl step_ctrl;
 struct arch_hw_breakpoint_ctrl ctrl;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 encode_ctrl_reg(struct arch_hw_breakpoint_ctrl ctrl)
{
 return (ctrl.mismatch << 22) | (ctrl.len << 5) | (ctrl.type << 3) |
  (ctrl.privilege << 1) | ctrl.enabled;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void decode_ctrl_reg(u32 reg,
       struct arch_hw_breakpoint_ctrl *ctrl)
{
 ctrl->enabled = reg & 0x1;
 reg >>= 1;
 ctrl->privilege = reg & 0x3;
 reg >>= 2;
 ctrl->type = reg & 0x3;
 reg >>= 2;
 ctrl->len = reg & 0xff;
 reg >>= 17;
 ctrl->mismatch = reg & 0x1;
}
# 114 "../arch/arm/include/asm/hw_breakpoint.h"
struct perf_event_attr;
struct notifier_block;
struct perf_event;
struct pmu;

extern int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl ctrl,
      int *gen_len, int *gen_type);
extern int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_arch_parse(struct perf_event *bp,
        const struct perf_event_attr *attr,
        struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);

extern u8 arch_get_debug_arch(void);
extern u8 arch_get_max_wp_len(void);
extern void clear_ptrace_hw_breakpoint(struct task_struct *tsk);

int arch_install_hw_breakpoint(struct perf_event *bp);
void arch_uninstall_hw_breakpoint(struct perf_event *bp);
void hw_breakpoint_pmu_read(struct perf_event *bp);
int hw_breakpoint_slots(int type);
# 14 "../arch/arm/include/asm/processor.h" 2


# 1 "../arch/arm/include/asm/unified.h" 1
# 14 "../arch/arm/include/asm/unified.h"
__asm__(".syntax unified");
# 17 "../arch/arm/include/asm/processor.h" 2







struct debug_info {

 struct perf_event *hbp[(16 + 16)];

};

struct thread_struct {

 unsigned long address;
 unsigned long trap_no;
 unsigned long error_code;

 struct debug_info debug;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{
 *offset = *size = 0;
}
# 81 "../arch/arm/include/asm/processor.h"
struct task_struct;


extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);
# 121 "../arch/arm/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetch(const void *ptr)
{
 __asm__ __volatile__(
  "pld\t%a0"
  :: "p" (ptr));
}
# 16 "../include/linux/prefetch.h" 2
# 1 "../arch/arm/include/asm/cache.h" 1
# 17 "../include/linux/prefetch.h" 2
# 54 "../include/linux/prefetch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetch_range(void *addr, size_t len)
{

 char *cp;
 char *end = addr + len;

 for (cp = addr; cp < end; cp += (4*(1 << 7)))
  prefetch(cp);

}
# 13 "../arch/arm/include/asm/atomic.h" 2



# 1 "../arch/arm/include/asm/cmpxchg.h" 1
# 28 "../arch/arm/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __xchg(unsigned long x, volatile void *ptr, int size)
{
 extern void __bad_xchg(volatile void *, int);
 unsigned long ret;




 unsigned int tmp;


 __builtin_prefetch((const void *)ptr,1);

 switch (size) {
# 65 "../arch/arm/include/asm/cmpxchg.h"
 case 4:
  asm volatile("@	__xchg4\n"
  "1:	ldrex	%0, [%3]\n"
  "	strex	%1, %2, [%3]\n"
  "	teq	%1, #0\n"
  "	bne	1b"
   : "=&r" (ret), "=&r" (tmp)
   : "r" (x), "r" (ptr)
   : "memory", "cc");
  break;
# 108 "../arch/arm/include/asm/cmpxchg.h"
 default:

  __bad_xchg(ptr, size), ret = 0;
  break;
 }

 return ret;
}







# 1 "../include/asm-generic/cmpxchg-local.h" 1







extern unsigned long wrong_size_cmpxchg(volatile void *ptr)
 __attribute__((__noreturn__));





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __cmpxchg_local_generic(volatile void *ptr,
  unsigned long old, unsigned long new, int size)
{
 unsigned long flags, prev;




 if (size == 8 && sizeof(unsigned long) != 8)
  wrong_size_cmpxchg(ptr);

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 switch (size) {
 case 1: prev = *(u8 *)ptr;
  if (prev == old)
   *(u8 *)ptr = (u8)new;
  break;
 case 2: prev = *(u16 *)ptr;
  if (prev == old)
   *(u16 *)ptr = (u16)new;
  break;
 case 4: prev = *(u32 *)ptr;
  if (prev == old)
   *(u32 *)ptr = (u32)new;
  break;
 case 8: prev = *(u64 *)ptr;
  if (prev == old)
   *(u64 *)ptr = (u64)new;
  break;
 default:
  wrong_size_cmpxchg(ptr);
 }
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);
 return prev;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg64_local_generic(volatile void *ptr,
  u64 old, u64 new)
{
 u64 prev;
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0);
 prev = *(u64 *)ptr;
 if (prev == old)
  *(u64 *)ptr = new;
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0);
 return prev;
}
# 123 "../arch/arm/include/asm/cmpxchg.h" 2
# 150 "../arch/arm/include/asm/cmpxchg.h"
extern void __bad_cmpxchg(volatile void *ptr, int size);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __cmpxchg(volatile void *ptr, unsigned long old,
          unsigned long new, int size)
{
 unsigned long oldval, res;

 __builtin_prefetch((const void *)ptr,1);

 switch (size) {
# 190 "../arch/arm/include/asm/cmpxchg.h"
 case 4:
  do {
   asm volatile("@ __cmpxchg4\n"
   "	ldrex	%1, [%2]\n"
   "	mov	%0, #0\n"
   "	teq	%1, %3\n"
   "	strexeq %0, %4, [%2]\n"
    : "=&r" (res), "=&r" (oldval)
    : "r" (ptr), "Ir" (old), "r" (new)
    : "memory", "cc");
  } while (res);
  break;
 default:
  __bad_cmpxchg(ptr, size);
  oldval = 0;
 }

 return oldval;
}
# 217 "../arch/arm/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __cmpxchg_local(volatile void *ptr,
         unsigned long old,
         unsigned long new, int size)
{
 unsigned long ret;

 switch (size) {

 case 1:
 case 2:
  ret = __cmpxchg_local_generic(ptr, old, new, size);
  break;

 default:
  ret = __cmpxchg(ptr, old, new, size);
 }

 return ret;
}
# 244 "../arch/arm/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long long __cmpxchg64(unsigned long long *ptr,
          unsigned long long old,
          unsigned long long new)
{
 unsigned long long oldval;
 unsigned long res;

 __builtin_prefetch(ptr,1);

 __asm__ __volatile__(
"1:	ldrexd		%1, %H1, [%3]\n"
"	teq		%1, %4\n"
"	teqeq		%H1, %H4\n"
"	bne		2f\n"
"	strexd		%0, %5, %H5, [%3]\n"
"	teq		%0, #0\n"
"	bne		1b\n"
"2:"
 : "=&r" (res), "=&r" (oldval), "+Qo" (*ptr)
 : "r" (ptr), "r" (old), "r" (new)
 : "cc");

 return oldval;
}
# 17 "../arch/arm/include/asm/atomic.h" 2
# 108 "../arch/arm/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_cmpxchg_relaxed(atomic_t *ptr, int old, int new)
{
 int oldval;
 unsigned long res;

 __builtin_prefetch(&ptr->counter,1);

 do {
  __asm__ __volatile__("@ atomic_cmpxchg\n"
  "ldrex	%1, [%3]\n"
  "mov	%0, #0\n"
  "teq	%1, %4\n"
  "strexeq %0, %5, [%3]\n"
      : "=&r" (res), "=&r" (oldval), "+Qo" (ptr->counter)
      : "r" (&ptr->counter), "Ir" (old), "r" (new)
      : "cc");
 } while (res);

 return oldval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int oldval, newval;
 unsigned long tmp;

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 __builtin_prefetch(&v->counter,1);

 __asm__ __volatile__ ("@ atomic_add_unless\n"
"1:	ldrex	%0, [%4]\n"
"	teq	%0, %5\n"
"	beq	2f\n"
"	add	%1, %0, %6\n"
"	strex	%2, %1, [%4]\n"
"	teq	%2, #0\n"
"	bne	1b\n"
"2:"
 : "=&r" (oldval), "=&r" (newval), "=&r" (tmp), "+Qo" (v->counter)
 : "r" (&v->counter), "r" (u), "r" (a)
 : "cc");

 if (oldval != u)
  __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");

 return oldval;
}
# 225 "../arch/arm/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void atomic_add(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "add" "\n" "1:	ldrex	%0, [%3]\n" "	" "add" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_add_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "add" "_return\n" "1:	ldrex	%0, [%3]\n" "	" "add" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_add_relaxed(int i, atomic_t *v) { unsigned long tmp; int result, val; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_fetch_" "add" "\n" "1:	ldrex	%0, [%4]\n" "	" "add" "	%1, %0, %5\n" "	strex	%2, %1, [%4]\n" "	teq	%2, #0\n" "	bne	1b" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void atomic_sub(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "sub" "\n" "1:	ldrex	%0, [%3]\n" "	" "sub" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_sub_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "sub" "_return\n" "1:	ldrex	%0, [%3]\n" "	" "sub" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_sub_relaxed(int i, atomic_t *v) { unsigned long tmp; int result, val; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_fetch_" "sub" "\n" "1:	ldrex	%0, [%4]\n" "	" "sub" "	%1, %0, %5\n" "	strex	%2, %1, [%4]\n" "	teq	%2, #0\n" "	bne	1b" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; }
# 235 "../arch/arm/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void atomic_and(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "and" "\n" "1:	ldrex	%0, [%3]\n" "	" "and" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_and_relaxed(int i, atomic_t *v) { unsigned long tmp; int result, val; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_fetch_" "and" "\n" "1:	ldrex	%0, [%4]\n" "	" "and" "	%1, %0, %5\n" "	strex	%2, %1, [%4]\n" "	teq	%2, #0\n" "	bne	1b" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void atomic_andnot(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "andnot" "\n" "1:	ldrex	%0, [%3]\n" "	" "bic" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_andnot_relaxed(int i, atomic_t *v) { unsigned long tmp; int result, val; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_fetch_" "andnot" "\n" "1:	ldrex	%0, [%4]\n" "	" "bic" "	%1, %0, %5\n" "	strex	%2, %1, [%4]\n" "	teq	%2, #0\n" "	bne	1b" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void atomic_or(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "or" "\n" "1:	ldrex	%0, [%3]\n" "	" "orr" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_or_relaxed(int i, atomic_t *v) { unsigned long tmp; int result, val; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_fetch_" "or" "\n" "1:	ldrex	%0, [%4]\n" "	" "orr" "	%1, %0, %5\n" "	strex	%2, %1, [%4]\n" "	teq	%2, #0\n" "	bne	1b" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void atomic_xor(int i, atomic_t *v) { unsigned long tmp; int result; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_" "xor" "\n" "1:	ldrex	%0, [%3]\n" "	" "eor" "	%0, %0, %4\n" "	strex	%1, %0, [%3]\n" "	teq	%1, #0\n" "	bne	1b" : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int atomic_fetch_xor_relaxed(int i, atomic_t *v) { unsigned long tmp; int result, val; __builtin_prefetch(&v->counter,1); __asm__ __volatile__("@ atomic_fetch_" "xor" "\n" "1:	ldrex	%0, [%4]\n" "	" "eor" "	%1, %0, %5\n" "	strex	%2, %1, [%4]\n" "	teq	%2, #0\n" "	bne	1b" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) : "r" (&v->counter), "Ir" (i) : "cc"); return result; }
# 8 "../include/linux/atomic.h" 2
# 74 "../include/linux/atomic.h"
# 1 "../include/linux/atomic-fallback.h" 1
# 79 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_read_acquire(const atomic_t *v)
{
 return ({ typeof(*&(v)->counter) ___p1 = ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); else __read_once_size_nocheck(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); do { } while (0); __u.__val; }); do { extern void __compiletime_assert_82(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_82(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_set_release(atomic_t *v, int i)
{
 do { do { extern void __compiletime_assert_91(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_91(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u = { .__val = ( typeof(*&(v)->counter)) (i) }; __write_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); __u.__val; }); } while (0);
}
# 103 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 int ret = atomic_add_return_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_add_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_add_return_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 145 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 int ret = atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_fetch_add_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 187 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 int ret = atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_sub_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 229 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 int ret = atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_inc(atomic_t *v)
{
 atomic_add(1, v);
}
# 281 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return(atomic_t *v)
{
 return atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 return atomic_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return_release(atomic_t *v)
{
 return atomic_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 return atomic_add_return_relaxed(1, v);
}
# 362 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc(atomic_t *v)
{
 return atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 return atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 return atomic_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 return atomic_fetch_add_relaxed(1, v);
}
# 436 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_dec(atomic_t *v)
{
 atomic_sub(1, v);
}
# 452 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return(atomic_t *v)
{
 return atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 return atomic_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return_release(atomic_t *v)
{
 return atomic_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 return atomic_sub_return_relaxed(1, v);
}
# 533 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec(atomic_t *v)
{
 return atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 return atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 return atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 return atomic_fetch_sub_relaxed(1, v);
}
# 613 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 int ret = atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_fetch_and_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 703 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 int ret = atomic_fetch_andnot_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_fetch_andnot_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_fetch_andnot_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 745 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 int ret = atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_fetch_or_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 787 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 int ret = atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 871 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 int ret = atomic_cmpxchg_relaxed(v, old, new);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return atomic_cmpxchg_relaxed(v, old, new);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 int ret;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 ret = atomic_cmpxchg_relaxed(v, old, new);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 914 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg_acquire(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg_release(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg_relaxed(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 1013 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 return atomic_sub_return(i, v) == 0;
}
# 1030 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_dec_and_test(atomic_t *v)
{
 return atomic_dec_return(v) == 0;
}
# 1047 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_inc_and_test(atomic_t *v)
{
 return atomic_inc_return(v) == 0;
}
# 1065 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 return atomic_add_return(i, v) < 0;
}
# 1108 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 return atomic_fetch_add_unless(v, a, u) != u;
}
# 1124 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 return atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 int c = ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 int c = ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_if_positive(atomic_t *v)
{
 int dec, c = ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });

 do {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
 } while (!atomic_try_cmpxchg(v, &c, dec));

 return dec;
}








# 1 "../include/asm-generic/atomic64.h" 1
# 12 "../include/asm-generic/atomic64.h"
typedef struct {
 s64 counter;
} atomic64_t;



extern s64 atomic64_read(const atomic64_t *v);
extern void atomic64_set(atomic64_t *v, s64 i);
# 34 "../include/asm-generic/atomic64.h"
extern void atomic64_add(s64 a, atomic64_t *v); extern s64 atomic64_add_return(s64 a, atomic64_t *v); extern s64 atomic64_fetch_add(s64 a, atomic64_t *v);
extern void atomic64_sub(s64 a, atomic64_t *v); extern s64 atomic64_sub_return(s64 a, atomic64_t *v); extern s64 atomic64_fetch_sub(s64 a, atomic64_t *v);




extern void atomic64_and(s64 a, atomic64_t *v); extern s64 atomic64_fetch_and(s64 a, atomic64_t *v);
extern void atomic64_or(s64 a, atomic64_t *v); extern s64 atomic64_fetch_or(s64 a, atomic64_t *v);
extern void atomic64_xor(s64 a, atomic64_t *v); extern s64 atomic64_fetch_xor(s64 a, atomic64_t *v);






extern s64 atomic64_dec_if_positive(atomic64_t *v);

extern s64 atomic64_cmpxchg(atomic64_t *v, s64 o, s64 n);
extern s64 atomic64_xchg(atomic64_t *v, s64 new);
extern s64 atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u);
# 1186 "../include/linux/atomic-fallback.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 return ({ typeof(*&(v)->counter) ___p1 = ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); else __read_once_size_nocheck(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); do { } while (0); __u.__val; }); do { extern void __compiletime_assert_1192(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_1192(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ___p1; });
}
# 1375 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_inc(atomic64_t *v)
{
 atomic64_add(1, v);
}
# 1391 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return(atomic64_t *v)
{
 return atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 return atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 return atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 return atomic64_add_return(1, v);
}
# 1472 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 return atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 return atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return atomic64_fetch_add(1, v);
}
# 1546 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_dec(atomic64_t *v)
{
 atomic64_sub(1, v);
}
# 1562 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return(atomic64_t *v)
{
 return atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 return atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 return atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 return atomic64_sub_return(1, v);
}
# 1643 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 return atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 return atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return atomic64_fetch_sub(1, v);
}
# 1759 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 atomic64_and(~i, v);
}
# 1775 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}
# 2024 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 2123 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return atomic64_sub_return(i, v) == 0;
}
# 2140 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 return atomic64_dec_return(v) == 0;
}
# 2157 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 return atomic64_inc_return(v) == 0;
}
# 2175 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 return atomic64_add_return(i, v) < 0;
}
# 2218 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return atomic64_fetch_add_unless(v, a, u) != u;
}
# 2234 "../include/linux/atomic-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 return atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = atomic64_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = atomic64_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 75 "../include/linux/atomic.h" 2

# 1 "../include/asm-generic/atomic-long.h" 1
# 17 "../include/asm-generic/atomic-long.h"
typedef atomic_t atomic_long_t;
# 519 "../include/asm-generic/atomic-long.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_read(const atomic_long_t *v)
{
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 return atomic_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 ({ union { typeof(((v)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((v)->counter))) ((i)) }; __write_once_size(&(((v)->counter)), __u.__c, sizeof(((v)->counter))); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 atomic_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 atomic_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 return atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return atomic_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return atomic_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return atomic_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return atomic_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 atomic_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 return atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return atomic_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return atomic_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return atomic_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return atomic_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_inc(atomic_long_t *v)
{
 atomic_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 return atomic_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return atomic_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 return atomic_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return atomic_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 return atomic_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return atomic_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_dec(atomic_long_t *v)
{
 atomic_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 return atomic_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return atomic_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 return atomic_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return atomic_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 return atomic_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return atomic_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 atomic_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return atomic_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 atomic_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 atomic_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return atomic_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 atomic_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return atomic_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 return (({ typeof(({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret = ({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return (({ typeof(({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret = ({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return (({ typeof(({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret = ({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return (({ typeof(({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret = ({ (__typeof__(*(&((v)->counter))))__xchg((unsigned long)(i), (&((v)->counter)), sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg(v, (int *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg_acquire(v, (int *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg_release(v, (int *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg_relaxed(v, (int *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return atomic_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 return atomic_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 return atomic_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 return atomic_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return atomic_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 return atomic_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return atomic_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return atomic_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 return atomic_dec_if_positive(v);
}
# 77 "../include/linux/atomic.h" 2
# 6 "../include/asm-generic/bitops/lock.h" 2
# 18 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_lock(unsigned int nr,
     volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 32));

 p += ((nr) / 32);
 if (({ union { typeof(*p) __val; char __c[1]; } __u; if (1) __read_once_size(&(*p), __u.__c, sizeof(*p)); else __read_once_size_nocheck(&(*p), __u.__c, sizeof(*p)); do { } while (0); __u.__val; }) & mask)
  return 1;

 old = atomic_long_fetch_or_acquire(mask, (atomic_long_t *)p);
 return !!(old & mask);
}
# 40 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_unlock(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 32);
 atomic_long_fetch_andnot_release(((((1UL))) << ((nr) % 32)), (atomic_long_t *)p);
}
# 57 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_unlock(unsigned int nr,
          volatile unsigned long *p)
{
 unsigned long old;

 p += ((nr) / 32);
 old = ({ union { typeof(*p) __val; char __c[1]; } __u; if (1) __read_once_size(&(*p), __u.__c, sizeof(*p)); else __read_once_size_nocheck(&(*p), __u.__c, sizeof(*p)); do { } while (0); __u.__val; });
 old &= ~((((1UL))) << ((nr) % 32));
 atomic_long_set_release((atomic_long_t *)p, old);
}
# 78 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool clear_bit_unlock_is_negative_byte(unsigned int nr,
           volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 32));

 p += ((nr) / 32);
 old = atomic_long_fetch_andnot_release(mask, (atomic_long_t *)p);
 return !!(old & ((((1UL))) << (7)));
}
# 244 "../arch/arm/include/asm/bitops.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_first_zero_bit_le(const void *p, unsigned size)
{
 return _find_first_zero_bit_le(p, size);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_next_zero_bit_le(const void *p, int size, int offset)
{
 return _find_next_zero_bit_le(p, size, offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_next_bit_le(const void *p, int size, int offset)
{
 return _find_next_bit_le(p, size, offset);
}





# 1 "../include/asm-generic/bitops/find.h" 1
# 30 "../include/asm-generic/bitops/find.h"
extern unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset);
# 268 "../arch/arm/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/le.h" 1





# 1 "../arch/arm/include/uapi/asm/byteorder.h" 1
# 20 "../arch/arm/include/uapi/asm/byteorder.h"
# 1 "../include/linux/byteorder/big_endian.h" 1




# 1 "../include/uapi/linux/byteorder/big_endian.h" 1
# 13 "../include/uapi/linux/byteorder/big_endian.h"
# 1 "../include/linux/swab.h" 1




# 1 "../include/uapi/linux/swab.h" 1






# 1 "../arch/arm/include/asm/swab.h" 1
# 19 "../arch/arm/include/asm/swab.h"
# 1 "../arch/arm/include/uapi/asm/swab.h" 1
# 20 "../arch/arm/include/asm/swab.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __arch_swahb32(__u32 x)
{
 __asm__ ("rev16 %0, %1" : "=r" (x) : "r" (x));
 return x;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __arch_swab32(__u32 x)
{
 __asm__ ("rev %0, %1" : "=r" (x) : "r" (x));
 return x;
}
# 8 "../include/uapi/linux/swab.h" 2
# 47 "../include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{

 return ((__u16)__arch_swahb32(val));



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return __arch_swab32(val);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{



 __u32 h = val >> 32;
 __u32 l = val & ((1ULL << 32) - 1);
 return (((__u64)__fswab32(l)) << 32) | ((__u64)(__fswab32(h)));



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{

 return __arch_swahb32(val);



}
# 161 "../include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "../include/linux/swab.h" 2
# 14 "../include/uapi/linux/byteorder/big_endian.h" 2
# 44 "../include/uapi/linux/byteorder/big_endian.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)__swab64p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)__swab32p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)__swab16p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return __swab16p((__u16 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return ( __u16)*p;
}
# 6 "../include/linux/byteorder/big_endian.h" 2





# 1 "../include/linux/byteorder/generic.h" 1
# 144 "../include/linux/byteorder/generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__le16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__le16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__le16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__le16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__le16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__le16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__le16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__le16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__le16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__le16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__le16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__le16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__le16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__le16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__le16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__le16)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__le32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__le32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__le32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__le32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__le32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__le32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__le64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__le64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__le64)(*var))) + val))));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  __swab32s((buf));
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  __swab32s((buf));
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__u16)((( __u16)(__be16)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__u32)((( __u32)(__be32)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__u64)((( __u64)(__be64)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__u32)(src[i]));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __u32)(__be32)(src[i]));
}
# 12 "../include/linux/byteorder/big_endian.h" 2
# 21 "../arch/arm/include/uapi/asm/byteorder.h" 2
# 7 "../include/asm-generic/bitops/le.h" 2
# 53 "../include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit_le(int nr, const void *addr)
{
 return test_bit(nr ^ ((32 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit_le(int nr, void *addr)
{
 _set_bit(nr ^ ((32 -1) & ~0x7),addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_le(int nr, void *addr)
{
 _clear_bit(nr ^ ((32 -1) & ~0x7),addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ ((32 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ ((32 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_le(int nr, void *addr)
{
 return _test_and_set_bit(nr ^ ((32 -1) & ~0x7),addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit_le(int nr, void *addr)
{
 return _test_and_clear_bit(nr ^ ((32 -1) & ~0x7),addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ ((32 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ ((32 -1) & ~0x7), addr);
}
# 269 "../arch/arm/include/asm/bitops.h" 2




# 1 "../include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 274 "../arch/arm/include/asm/bitops.h" 2
# 20 "../include/linux/bitops.h" 2
# 43 "../include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64(w));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 143 "../include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 else if (l & (l - 1UL))
  return (int)fls_long(l);
 else
  return (int)fls_long(l) - 1;
}
# 201 "../include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __ffs64(u64 word)
{

 if (((u32)word) == 0UL)
  return __ffs((u32)(word >> 32)) + 32;



 return __ffs((unsigned long)word);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  _set_bit(nr,addr);
 else
  _clear_bit(nr,addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  __set_bit(nr, addr);
 else
  __clear_bit(nr, addr);
}
# 277 "../include/linux/bitops.h"
extern unsigned long find_last_bit(const unsigned long *addr,
       unsigned long size);
# 6 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/init.h" 1
# 116 "../include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);
# 127 "../include/linux/init.h"
typedef initcall_t initcall_entry_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return *entry;
}


extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 241 "../include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 290 "../include/linux/init.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) parse_early_param(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) parse_early_options(char *cmdline);
# 7 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/io.h" 1
# 11 "../include/linux/io.h"
# 1 "../include/linux/bug.h" 1




# 1 "../arch/arm/include/asm/bug.h" 1




# 1 "../include/linux/linkage.h" 1





# 1 "../include/linux/stringify.h" 1
# 7 "../include/linux/linkage.h" 2
# 1 "../include/linux/export.h" 1
# 71 "../include/linux/export.h"
struct kernel_symbol {
 unsigned long value;
 const char *name;
};
# 8 "../include/linux/linkage.h" 2
# 1 "../arch/arm/include/asm/linkage.h" 1
# 9 "../include/linux/linkage.h" 2
# 6 "../arch/arm/include/asm/bug.h" 2

# 1 "../arch/arm/include/asm/opcodes.h" 1
# 11 "../arch/arm/include/asm/opcodes.h"
extern unsigned int arm_check_condition(u32 opcode, u32 psr);
# 8 "../arch/arm/include/asm/bug.h" 2
# 60 "../arch/arm/include/asm/bug.h"
# 1 "../include/asm-generic/bug.h" 1
# 18 "../include/asm-generic/bug.h"
# 1 "../include/linux/kernel.h" 1





# 1 "/home/nathan/cbl/usr/lib/clang/10.0.0/include/stdarg.h" 1 3
# 14 "/home/nathan/cbl/usr/lib/clang/10.0.0/include/stdarg.h" 3
typedef __builtin_va_list va_list;
# 32 "/home/nathan/cbl/usr/lib/clang/10.0.0/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 7 "../include/linux/kernel.h" 2
# 1 "../include/linux/limits.h" 1




# 1 "../include/uapi/linux/limits.h" 1
# 6 "../include/linux/limits.h" 2
# 8 "../include/linux/kernel.h" 2





# 1 "../include/linux/log2.h" 1
# 21 "../include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "../include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 197 "../include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ( __builtin_constant_p(n - 1) ? ( (n - 1) < 2 ? 0 : (n - 1) & (1ULL << 63) ? 63 : (n - 1) & (1ULL << 62) ? 62 : (n - 1) & (1ULL << 61) ? 61 : (n - 1) & (1ULL << 60) ? 60 : (n - 1) & (1ULL << 59) ? 59 : (n - 1) & (1ULL << 58) ? 58 : (n - 1) & (1ULL << 57) ? 57 : (n - 1) & (1ULL << 56) ? 56 : (n - 1) & (1ULL << 55) ? 55 : (n - 1) & (1ULL << 54) ? 54 : (n - 1) & (1ULL << 53) ? 53 : (n - 1) & (1ULL << 52) ? 52 : (n - 1) & (1ULL << 51) ? 51 : (n - 1) & (1ULL << 50) ? 50 : (n - 1) & (1ULL << 49) ? 49 : (n - 1) & (1ULL << 48) ? 48 : (n - 1) & (1ULL << 47) ? 47 : (n - 1) & (1ULL << 46) ? 46 : (n - 1) & (1ULL << 45) ? 45 : (n - 1) & (1ULL << 44) ? 44 : (n - 1) & (1ULL << 43) ? 43 : (n - 1) & (1ULL << 42) ? 42 : (n - 1) & (1ULL << 41) ? 41 : (n - 1) & (1ULL << 40) ? 40 : (n - 1) & (1ULL << 39) ? 39 : (n - 1) & (1ULL << 38) ? 38 : (n - 1) & (1ULL << 37) ? 37 : (n - 1) & (1ULL << 36) ? 36 : (n - 1) & (1ULL << 35) ? 35 : (n - 1) & (1ULL << 34) ? 34 : (n - 1) & (1ULL << 33) ? 33 : (n - 1) & (1ULL << 32) ? 32 : (n - 1) & (1ULL << 31) ? 31 : (n - 1) & (1ULL << 30) ? 30 : (n - 1) & (1ULL << 29) ? 29 : (n - 1) & (1ULL << 28) ? 28 : (n - 1) & (1ULL << 27) ? 27 : (n - 1) & (1ULL << 26) ? 26 : (n - 1) & (1ULL << 25) ? 25 : (n - 1) & (1ULL << 24) ? 24 : (n - 1) & (1ULL << 23) ? 23 : (n - 1) & (1ULL << 22) ? 22 : (n - 1) & (1ULL << 21) ? 21 : (n - 1) & (1ULL << 20) ? 20 : (n - 1) & (1ULL << 19) ? 19 : (n - 1) & (1ULL << 18) ? 18 : (n - 1) & (1ULL << 17) ? 17 : (n - 1) & (1ULL << 16) ? 16 : (n - 1) & (1ULL << 15) ? 15 : (n - 1) & (1ULL << 14) ? 14 : (n - 1) & (1ULL << 13) ? 13 : (n - 1) & (1ULL << 12) ? 12 : (n - 1) & (1ULL << 11) ? 11 : (n - 1) & (1ULL << 10) ? 10 : (n - 1) & (1ULL << 9) ? 9 : (n - 1) & (1ULL << 8) ? 8 : (n - 1) & (1ULL << 7) ? 7 : (n - 1) & (1ULL << 6) ? 6 : (n - 1) & (1ULL << 5) ? 5 : (n - 1) & (1ULL << 4) ? 4 : (n - 1) & (1ULL << 3) ? 3 : (n - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 224 "../include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? ( __builtin_constant_p((n) - 1) ? ( ((n) - 1) < 2 ? 0 : ((n) - 1) & (1ULL << 63) ? 63 : ((n) - 1) & (1ULL << 62) ? 62 : ((n) - 1) & (1ULL << 61) ? 61 : ((n) - 1) & (1ULL << 60) ? 60 : ((n) - 1) & (1ULL << 59) ? 59 : ((n) - 1) & (1ULL << 58) ? 58 : ((n) - 1) & (1ULL << 57) ? 57 : ((n) - 1) & (1ULL << 56) ? 56 : ((n) - 1) & (1ULL << 55) ? 55 : ((n) - 1) & (1ULL << 54) ? 54 : ((n) - 1) & (1ULL << 53) ? 53 : ((n) - 1) & (1ULL << 52) ? 52 : ((n) - 1) & (1ULL << 51) ? 51 : ((n) - 1) & (1ULL << 50) ? 50 : ((n) - 1) & (1ULL << 49) ? 49 : ((n) - 1) & (1ULL << 48) ? 48 : ((n) - 1) & (1ULL << 47) ? 47 : ((n) - 1) & (1ULL << 46) ? 46 : ((n) - 1) & (1ULL << 45) ? 45 : ((n) - 1) & (1ULL << 44) ? 44 : ((n) - 1) & (1ULL << 43) ? 43 : ((n) - 1) & (1ULL << 42) ? 42 : ((n) - 1) & (1ULL << 41) ? 41 : ((n) - 1) & (1ULL << 40) ? 40 : ((n) - 1) & (1ULL << 39) ? 39 : ((n) - 1) & (1ULL << 38) ? 38 : ((n) - 1) & (1ULL << 37) ? 37 : ((n) - 1) & (1ULL << 36) ? 36 : ((n) - 1) & (1ULL << 35) ? 35 : ((n) - 1) & (1ULL << 34) ? 34 : ((n) - 1) & (1ULL << 33) ? 33 : ((n) - 1) & (1ULL << 32) ? 32 : ((n) - 1) & (1ULL << 31) ? 31 : ((n) - 1) & (1ULL << 30) ? 30 : ((n) - 1) & (1ULL << 29) ? 29 : ((n) - 1) & (1ULL << 28) ? 28 : ((n) - 1) & (1ULL << 27) ? 27 : ((n) - 1) & (1ULL << 26) ? 26 : ((n) - 1) & (1ULL << 25) ? 25 : ((n) - 1) & (1ULL << 24) ? 24 : ((n) - 1) & (1ULL << 23) ? 23 : ((n) - 1) & (1ULL << 22) ? 22 : ((n) - 1) & (1ULL << 21) ? 21 : ((n) - 1) & (1ULL << 20) ? 20 : ((n) - 1) & (1ULL << 19) ? 19 : ((n) - 1) & (1ULL << 18) ? 18 : ((n) - 1) & (1ULL << 17) ? 17 : ((n) - 1) & (1ULL << 16) ? 16 : ((n) - 1) & (1ULL << 15) ? 15 : ((n) - 1) & (1ULL << 14) ? 14 : ((n) - 1) & (1ULL << 13) ? 13 : ((n) - 1) & (1ULL << 12) ? 12 : ((n) - 1) & (1ULL << 11) ? 11 : ((n) - 1) & (1ULL << 10) ? 10 : ((n) - 1) & (1ULL << 9) ? 9 : ((n) - 1) & (1ULL << 8) ? 8 : ((n) - 1) & (1ULL << 7) ? 7 : ((n) - 1) & (1ULL << 6) ? 6 : ((n) - 1) & (1ULL << 5) ? 5 : ((n) - 1) & (1ULL << 4) ? 4 : ((n) - 1) & (1ULL << 3) ? 3 : ((n) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? ( __builtin_constant_p((n) - 1) ? ( ((n) - 1) < 2 ? 0 : ((n) - 1) & (1ULL << 63) ? 63 : ((n) - 1) & (1ULL << 62) ? 62 : ((n) - 1) & (1ULL << 61) ? 61 : ((n) - 1) & (1ULL << 60) ? 60 : ((n) - 1) & (1ULL << 59) ? 59 : ((n) - 1) & (1ULL << 58) ? 58 : ((n) - 1) & (1ULL << 57) ? 57 : ((n) - 1) & (1ULL << 56) ? 56 : ((n) - 1) & (1ULL << 55) ? 55 : ((n) - 1) & (1ULL << 54) ? 54 : ((n) - 1) & (1ULL << 53) ? 53 : ((n) - 1) & (1ULL << 52) ? 52 : ((n) - 1) & (1ULL << 51) ? 51 : ((n) - 1) & (1ULL << 50) ? 50 : ((n) - 1) & (1ULL << 49) ? 49 : ((n) - 1) & (1ULL << 48) ? 48 : ((n) - 1) & (1ULL << 47) ? 47 : ((n) - 1) & (1ULL << 46) ? 46 : ((n) - 1) & (1ULL << 45) ? 45 : ((n) - 1) & (1ULL << 44) ? 44 : ((n) - 1) & (1ULL << 43) ? 43 : ((n) - 1) & (1ULL << 42) ? 42 : ((n) - 1) & (1ULL << 41) ? 41 : ((n) - 1) & (1ULL << 40) ? 40 : ((n) - 1) & (1ULL << 39) ? 39 : ((n) - 1) & (1ULL << 38) ? 38 : ((n) - 1) & (1ULL << 37) ? 37 : ((n) - 1) & (1ULL << 36) ? 36 : ((n) - 1) & (1ULL << 35) ? 35 : ((n) - 1) & (1ULL << 34) ? 34 : ((n) - 1) & (1ULL << 33) ? 33 : ((n) - 1) & (1ULL << 32) ? 32 : ((n) - 1) & (1ULL << 31) ? 31 : ((n) - 1) & (1ULL << 30) ? 30 : ((n) - 1) & (1ULL << 29) ? 29 : ((n) - 1) & (1ULL << 28) ? 28 : ((n) - 1) & (1ULL << 27) ? 27 : ((n) - 1) & (1ULL << 26) ? 26 : ((n) - 1) & (1ULL << 25) ? 25 : ((n) - 1) & (1ULL << 24) ? 24 : ((n) - 1) & (1ULL << 23) ? 23 : ((n) - 1) & (1ULL << 22) ? 22 : ((n) - 1) & (1ULL << 21) ? 21 : ((n) - 1) & (1ULL << 20) ? 20 : ((n) - 1) & (1ULL << 19) ? 19 : ((n) - 1) & (1ULL << 18) ? 18 : ((n) - 1) & (1ULL << 17) ? 17 : ((n) - 1) & (1ULL << 16) ? 16 : ((n) - 1) & (1ULL << 15) ? 15 : ((n) - 1) & (1ULL << 14) ? 14 : ((n) - 1) & (1ULL << 13) ? 13 : ((n) - 1) & (1ULL << 12) ? 12 : ((n) - 1) & (1ULL << 11) ? 11 : ((n) - 1) & (1ULL << 10) ? 10 : ((n) - 1) & (1ULL << 9) ? 9 : ((n) - 1) & (1ULL << 8) ? 8 : ((n) - 1) & (1ULL << 7) ? 7 : ((n) - 1) & (1ULL << 6) ? 6 : ((n) - 1) & (1ULL << 5) ? 5 : ((n) - 1) & (1ULL << 4) ? 4 : ((n) - 1) & (1ULL << 3) ? 3 : ((n) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 14 "../include/linux/kernel.h" 2

# 1 "../include/linux/printk.h" 1






# 1 "../include/linux/kern_levels.h" 1
# 8 "../include/linux/printk.h" 2

# 1 "../include/linux/cache.h" 1




# 1 "../include/uapi/linux/kernel.h" 1




# 1 "../include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "../include/uapi/linux/kernel.h" 2
# 6 "../include/linux/cache.h" 2
# 10 "../include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 62 "../include/linux/printk.h"
extern int console_printk[];






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 142 "../include/linux/printk.h"
extern __attribute__((__format__(printf, 1, 2)))
void early_printk(const char *fmt, ...);






extern void printk_nmi_enter(void);
extern void printk_nmi_exit(void);
extern void printk_nmi_direct_enter(void);
extern void printk_nmi_direct_exit(void);
# 162 "../include/linux/printk.h"
           __attribute__((__format__(printf, 5, 0)))
int vprintk_emit(int facility, int level,
   const char *dict, size_t dictlen,
   const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int printk(const char *fmt, ...);




__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int printk_deferred(const char *fmt, ...);






extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_log_buf(int early);
__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void dump_stack(void) __attribute__((__cold__));
extern void printk_safe_init(void);
extern void printk_safe_flush(void);
extern void printk_safe_flush_on_panic(void);
# 285 "../include/linux/printk.h"
extern int kptr_restrict;
# 332 "../include/linux/printk.h"
# 1 "../include/linux/dynamic_debug.h" 1





# 1 "../include/linux/jump_label.h" 1
# 79 "../include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 102 "../include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 117 "../include/linux/jump_label.h"
# 1 "../arch/arm/include/asm/jump_label.h" 1
# 12 "../arch/arm/include/asm/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch(struct static_key *key, bool branch)
{
 asm goto("1:\n\t" "nop" "\n\t" ".pushsection __jump_table,  \"aw\"\n\t" ".word 1b, %l[l_yes], %c0\n\t" ".popsection\n\t" : : "i" (&((char *)key)[branch]) : : l_yes);






 return false;
l_yes:
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch_jump(struct static_key *key, bool branch)
{
 asm goto("1:\n\t" "b" " %l[l_yes]\n\t" ".pushsection __jump_table,  \"aw\"\n\t" ".word 1b, %l[l_yes], %c0\n\t" ".popsection\n\t" : : "i" (&((char *)key)[branch]) : : l_yes);






 return false;
l_yes:
 return true;
}

typedef u32 jump_label_t;

struct jump_entry {
 jump_label_t code;
 jump_label_t target;
 jump_label_t key;
};
# 118 "../include/linux/jump_label.h" 2
# 147 "../include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_code(const struct jump_entry *entry)
{
 return entry->code;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_target(const struct jump_entry *entry)
{
 return entry->target;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct static_key *jump_entry_key(const struct jump_entry *entry)
{
 return (struct static_key *)((unsigned long)entry->key & ~3UL);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_branch(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 1UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_init(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 2UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_entry_set_init(struct jump_entry *entry)
{
 entry->key |= 2;
}






enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 198 "../include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern bool arch_jump_label_transform_queue(struct jump_entry *entry,
         enum jump_label_type type);
extern void arch_jump_label_transform_apply(void);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 346 "../include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 385 "../include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 7 "../include/linux/dynamic_debug.h" 2







struct _ddebug {




 const char *modname;
 const char *function;
 const char *filename;
 const char *format;
 unsigned int lineno:18;
# 40 "../include/linux/dynamic_debug.h"
 unsigned int flags:8;

 union {
  struct static_key_true dd_key_true;
  struct static_key_false dd_key_false;
 } key;

} __attribute__((aligned(8)));




int ddebug_add_module(struct _ddebug *tab, unsigned int n,
    const char *modname);
extern int ddebug_remove_module(const char *mod_name);
extern __attribute__((__format__(printf, 2, 3)))
void __dynamic_pr_debug(struct _ddebug *descriptor, const char *fmt, ...);

extern int ddebug_dyndbg_module_param_cb(char *param, char *val,
     const char *modname);

struct device;

extern __attribute__((__format__(printf, 3, 4)))
void __dynamic_dev_dbg(struct _ddebug *descriptor, const struct device *dev,
         const char *fmt, ...);

struct net_device;

extern __attribute__((__format__(printf, 3, 4)))
void __dynamic_netdev_dbg(struct _ddebug *descriptor,
     const struct net_device *dev,
     const char *fmt, ...);

struct ib_device;

extern __attribute__((__format__(printf, 3, 4)))
void __dynamic_ibdev_dbg(struct _ddebug *descriptor,
    const struct ib_device *ibdev,
    const char *fmt, ...);
# 333 "../include/linux/printk.h" 2
# 477 "../include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);
# 16 "../include/linux/kernel.h" 2
# 1 "../include/linux/build_bug.h" 1
# 17 "../include/linux/kernel.h" 2

# 1 "../arch/arm/include/asm/div64.h" 1





# 1 "../arch/arm/include/asm/compiler.h" 1
# 7 "../arch/arm/include/asm/div64.h" 2
# 33 "../arch/arm/include/asm/div64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t __div64_32(uint64_t *n, uint32_t base)
{
 register unsigned int __base asm("r4") = base;
 register unsigned long long __n asm("r0") = *n;
 register unsigned long long __res asm("r2");
 register unsigned int __rem asm("r0");
 asm( ".ifnc " "%0" "," "r0" "; " ".ifnc " "%0" "r0" ",fpr11; " ".ifnc " "%0" "r0" ",r11fp; " ".ifnc " "%0" "r0" ",ipr12; " ".ifnc " "%0" "r0" ",r12ip; " ".err; " ".endif; " ".endif; " ".endif; " ".endif; " ".endif\n\t"
  ".ifnc " "%1" "," "r2" "; " ".ifnc " "%1" "r2" ",fpr11; " ".ifnc " "%1" "r2" ",r11fp; " ".ifnc " "%1" "r2" ",ipr12; " ".ifnc " "%1" "r2" ",r12ip; " ".err; " ".endif; " ".endif; " ".endif; " ".endif; " ".endif\n\t"
  ".ifnc " "%2" "," "r0" "; " ".ifnc " "%2" "r0" ",fpr11; " ".ifnc " "%2" "r0" ",r11fp; " ".ifnc " "%2" "r0" ",ipr12; " ".ifnc " "%2" "r0" ",r12ip; " ".err; " ".endif; " ".endif; " ".endif; " ".endif; " ".endif\n\t"
  ".ifnc " "%3" "," "r4" "; " ".ifnc " "%3" "r4" ",fpr11; " ".ifnc " "%3" "r4" ",r11fp; " ".ifnc " "%3" "r4" ",ipr12; " ".ifnc " "%3" "r4" ",r12ip; " ".err; " ".endif; " ".endif; " ".endif; " ".endif; " ".endif\n\t"
  "bl	__do_div64"
  : "=r" (__rem), "=r" (__res)
  : "r" (__n), "r" (__base)
  : "ip", "lr", "cc");
 *n = __res;
 return __rem;
}
# 75 "../arch/arm/include/asm/div64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t __arch_xprod_64(uint64_t m, uint64_t n, bool bias)
{
 unsigned long long res;
 register unsigned int tmp asm("ip") = 0;

 if (!bias) {
  asm ( "umull	%Q0, %R0, %Q1, %Q2\n\t"
   "mov	%Q0, #0"
   : "=&r" (res)
   : "r" (m), "r" (n)
   : "cc");
 } else if (!(m & ((1ULL << 63) | (1ULL << 31)))) {
  res = m;
  asm ( "umlal	%Q0, %R0, %Q1, %Q2\n\t"
   "mov	%Q0, #0"
   : "+&r" (res)
   : "r" (m), "r" (n)
   : "cc");
 } else {
  asm ( "umull	%Q0, %R0, %Q2, %Q3\n\t"
   "cmn	%Q0, %Q2\n\t"
   "adcs	%R0, %R0, %R2\n\t"
   "adc	%Q0, %1, #0"
   : "=&r" (res), "+&r" (tmp)
   : "r" (m), "r" (n)
   : "cc");
 }

 if (!(m & ((1ULL << 63) | (1ULL << 31)))) {
  asm ( "umlal	%R0, %Q0, %R1, %Q2\n\t"
   "umlal	%R0, %Q0, %Q1, %R2\n\t"
   "mov	%R0, #0\n\t"
   "umlal	%Q0, %R0, %R1, %R2"
   : "+&r" (res)
   : "r" (m), "r" (n)
   : "cc");
 } else {
  asm ( "umlal	%R0, %Q0, %R2, %Q3\n\t"
   "umlal	%R0, %1, %Q2, %R3\n\t"
   "mov	%R0, #0\n\t"
   "adds	%Q0, %1, %Q0\n\t"
   "adc	%R0, %R0, #0\n\t"
   "umlal	%Q0, %R0, %R2, %R3"
   : "+&r" (res), "+&r" (tmp)
   : "r" (m), "r" (n)
   : "cc");
 }

 return res;
}



# 1 "../include/asm-generic/div64.h" 1
# 128 "../arch/arm/include/asm/div64.h" 2
# 19 "../include/linux/kernel.h" 2
# 200 "../include/linux/kernel.h"
struct completion;
struct pt_regs;
struct user;
# 212 "../include/linux/kernel.h"
extern void ___might_sleep(const char *file, int line, int preempt_offset);
extern void __might_sleep(const char *file, int line, int preempt_offset);
extern void __cant_sleep(const char *file, int line, int preempt_offset);
# 285 "../include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}




void __might_fault(const char *file, int line);




extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
void print_oops_end_marker(void);
extern int oops_may_print(void);
void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_error_report(struct pt_regs *regs, const char *err)
{ }



int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 340 "../include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 369 "../include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}



extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int init_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);


u32 int_sqrt64(u64 x);







extern void bust_spinlocks(int yes);
extern int oops_in_progress;
extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;
extern int sysctl_panic_on_rcu_stall;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
extern const char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;
# 579 "../include/linux/kernel.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

extern const char hex_asc[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 635 "../include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 714 "../include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((__format__(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 755 "../include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 777 "../include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 19 "../include/asm-generic/bug.h" 2




struct bug_entry {

 unsigned long bug_addr;





 const char *file;



 unsigned short line;

 unsigned short flags;
};
# 93 "../include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 3, 4)))
void warn_slowpath_fmt(const char *file, const int line,
         const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5)))
void warn_slowpath_fmt_taint(const char *file, const int line, unsigned taint,
        const char *fmt, ...);
extern void warn_slowpath_null(const char *file, const int line);
# 116 "../include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 61 "../arch/arm/include/asm/bug.h" 2

struct pt_regs;
void die(const char *msg, struct pt_regs *regs, int err);

void arm_notify_die(const char *str, struct pt_regs *regs,
  int signo, int si_code, void *addr,
  unsigned long err, unsigned long trap);
# 77 "../arch/arm/include/asm/bug.h"
void hook_fault_code(int nr, int (*fn)(unsigned long, unsigned int,
           struct pt_regs *),
       int sig, int code, const char *name);

void hook_ifault_code(int nr, int (*fn)(unsigned long, unsigned int,
           struct pt_regs *),
       int sig, int code, const char *name);

extern void c_backtrace(unsigned long fp, int pmode);

struct mm_struct;
void show_pte(const char *lvl, struct mm_struct *mm, unsigned long addr);
extern void __show_regs(struct pt_regs *);
# 6 "../include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "../include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

void generic_bug_clear_once(void);
# 65 "../include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 12 "../include/linux/io.h" 2
# 1 "../include/linux/err.h" 1







# 1 "./arch/arm/include/generated/uapi/asm/errno.h" 1
# 1 "../include/uapi/asm-generic/errno.h" 1




# 1 "../include/uapi/asm-generic/errno-base.h" 1
# 6 "../include/uapi/asm-generic/errno.h" 2
# 2 "./arch/arm/include/generated/uapi/asm/errno.h" 2
# 9 "../include/linux/err.h" 2
# 24 "../include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "../include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 13 "../include/linux/io.h" 2
# 1 "../arch/arm/include/asm/io.h" 1
# 23 "../arch/arm/include/asm/io.h"
# 1 "../include/linux/string.h" 1
# 10 "../include/linux/string.h"
# 1 "../include/uapi/linux/string.h" 1
# 11 "../include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);





# 1 "../arch/arm/include/asm/string.h" 1
# 11 "../arch/arm/include/asm/string.h"
extern char * strrchr(const char * s, int c);


extern char * strchr(const char * s, int c);


extern void * memcpy(void *, const void *, __kernel_size_t);


extern void * memmove(void *, const void *, __kernel_size_t);


extern void * memchr(const void *, int, __kernel_size_t);


extern void * memset(void *, int, __kernel_size_t);


extern void *__memset32(uint32_t *, uint32_t v, __kernel_size_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset32(uint32_t *p, uint32_t v, __kernel_size_t n)
{
 return __memset32(p, v, n * 4);
}


extern void *__memset64(uint64_t *, uint32_t low, __kernel_size_t, uint32_t hi);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset64(uint64_t *p, uint64_t v, __kernel_size_t n)
{
 return __memset64(p, v, n * 8, v >> 32);
}
# 21 "../include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);


extern int strncmp(const char *,const char *,__kernel_size_t);


extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);





extern char * strchrnul(const char *,int);


extern char * strnchr(const char *, size_t, int);




extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);
# 121 "../include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (32 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (32 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 152 "../include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp(const void *,const void *,__kernel_size_t);


extern int bcmp(const void *,const void *,__kernel_size_t);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long memcpy_mcsafe(void *dst,
  const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
}

void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
extern int kstrtobool(const char *s, bool *res);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}

int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 211 "../include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((__format__(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
void memzero_explicit(void *s, size_t count);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}




void fortify_panic(const char *name) __attribute__((__noreturn__)) __attribute__((__cold__));
void __read_overflow(void) ;
void __read_overflow2(void) ;
void __read_overflow3(void) ;
void __write_overflow(void) ;


extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strncpy(char *p, const char *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __write_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_strncpy(p, q, size);
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strcat(char *p, const char *q)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (p_size == (size_t)-1)
  return __builtin_strcat(p, q);
 if (strlcat(p, q, p_size) >= p_size)
  fortify_panic(__func__);
 return p;
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) __kernel_size_t strlen(const char *p)
{
 __kernel_size_t ret;
 size_t p_size = __builtin_object_size(p, 0);


 if (p_size == (size_t)-1 ||
     (__builtin_constant_p(p[p_size - 1]) && p[p_size - 1] == '\0'))
  return __builtin_strlen(p);
 ret = strnlen(p, p_size);
 if (p_size <= ret)
  fortify_panic(__func__);
 return ret;
}

extern __kernel_size_t __real_strnlen(const char *, __kernel_size_t) __asm__("strnlen");
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) __kernel_size_t strnlen(const char *p, __kernel_size_t maxlen)
{
 size_t p_size = __builtin_object_size(p, 0);
 __kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
 if (p_size <= ret && maxlen != ret)
  fortify_panic(__func__);
 return ret;
}


extern size_t __real_strlcpy(char *, const char *, size_t) __asm__("strlcpy");
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) size_t strlcpy(char *p, const char *q, size_t size)
{
 size_t ret;
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __real_strlcpy(p, q, size);
 ret = strlen(q);
 if (size) {
  size_t len = (ret >= size) ? size - 1 : ret;
  if (__builtin_constant_p(len) && len >= p_size)
   __write_overflow();
  if (len >= p_size)
   fortify_panic(__func__);
  __builtin_memcpy(p, q, len);
  p[len] = '\0';
 }
 return ret;
}


extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strncat(char *p, const char *q, __kernel_size_t count)
{
 size_t p_len, copy_len;
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __builtin_strncat(p, q, count);
 p_len = strlen(p);
 copy_len = strnlen(q, count);
 if (p_size < p_len + copy_len + 1)
  fortify_panic(__func__);
 __builtin_memcpy(p + p_len, q, copy_len);
 p[p_len + copy_len] = '\0';
 return p;
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memset(void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __write_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_memset(p, c, size);
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memcpy(void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __write_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memcpy(p, q, size);
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memmove(void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __write_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memmove(p, q, size);
}

extern void *__real_memscan(void *, int, __kernel_size_t) __asm__("memscan");
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memscan(void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_memscan(p, c, size);
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) int memcmp(const void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __read_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memcmp(p, q, size);
}

extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memchr(const void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_memchr(p, c, size);
}

void *__real_memchr_inv(const void *s, int c, size_t n) __asm__("memchr_inv");
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memchr_inv(const void *p, int c, size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_memchr_inv(p, c, size);
}

extern void *__real_kmemdup(const void *src, size_t len, gfp_t gfp) __asm__("kmemdup");
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *kmemdup(const void *p, size_t size, gfp_t gfp)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_kmemdup(p, size, gfp);
}


extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strcpy(char *p, const char *q)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __builtin_strcpy(p, q);
 memcpy(p, q, strlen(q) + 1);
 return p;
}
# 456 "../include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  memcpy(dest, src, count);
  memset(dest + count, pad, dest_len - count);
 } else
  memcpy(dest, src, dest_len);
}
# 480 "../include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 24 "../arch/arm/include/asm/io.h" 2


# 1 "../arch/arm/include/asm/memory.h" 1
# 16 "../arch/arm/include/asm/memory.h"
# 1 "../include/linux/sizes.h" 1
# 17 "../arch/arm/include/asm/memory.h" 2
# 178 "../arch/arm/include/asm/memory.h"
extern unsigned long __pv_phys_pfn_offset;
extern u64 __pv_offset;
extern void fixup_pv_table(const void *, unsigned long);
extern const void *__pv_table_begin, *__pv_table_end;
# 215 "../arch/arm/include/asm/memory.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t __virt_to_phys_nodebug(unsigned long x)
{
 phys_addr_t t;

 if (sizeof(phys_addr_t) == 4) {
  __asm__("@ __pv_stub\n" "1:	" "add" "	%0, %1, %2\n" "	.pushsection .pv_table,\"a\"\n" "	.long	1b\n" "	.popsection\n" : "=r" (t) : "r" (x), "I" (0x81000000));
 } else {
  __asm__ volatile("@ __pv_stub_mov\n" "1:	mov	%R0, %1\n" "	.pushsection .pv_table,\"a\"\n" "	.long	1b\n" "	.popsection\n" : "=r" (t) : "I" (0x81));
  __asm__ volatile("@ __pv_add_carry_stub\n" "1:	adds	%Q0, %1, %2\n" "	adc	%R0, %R0, #0\n" "	.pushsection .pv_table,\"a\"\n" "	.long	1b\n" "	.popsection\n" : "+r" (t) : "r" (x), "I" (0x81000000) : "cc");
 }
 return t;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __phys_to_virt(phys_addr_t x)
{
 unsigned long t;







 __asm__("@ __pv_stub\n" "1:	" "sub" "	%0, %1, %2\n" "	.pushsection .pv_table,\"a\"\n" "	.long	1b\n" "	.popsection\n" : "=r" (t) : "r" ((unsigned long) x), "I" (0x81000000));
 return t;
}
# 266 "../arch/arm/include/asm/memory.h"
extern phys_addr_t __virt_to_phys(unsigned long x);
extern phys_addr_t __phys_addr_symbol(unsigned long x);
# 280 "../arch/arm/include/asm/memory.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t virt_to_phys(const volatile void *x)
{
 return __virt_to_phys((unsigned long)(x));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *phys_to_virt(phys_addr_t x)
{
 return (void *)__phys_to_virt(x);
}
# 299 "../arch/arm/include/asm/memory.h"
extern long long arch_phys_to_idmap_offset;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arm_has_idmap_alias(void)
{
 return 1 && arch_phys_to_idmap_offset != 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long phys_to_idmap(phys_addr_t addr)
{
 if (1 && arch_phys_to_idmap_offset) {
  addr += arch_phys_to_idmap_offset;
  if (addr > (u32)~0)
   addr = ((u32)~0);
 }
 return addr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t idmap_to_phys(unsigned long idmap)
{
 phys_addr_t addr = idmap;

 if (1 && arch_phys_to_idmap_offset)
  addr -= arch_phys_to_idmap_offset;

 return addr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __virt_to_idmap(unsigned long x)
{
 return phys_to_idmap(__virt_to_phys(x));
}
# 370 "../arch/arm/include/asm/memory.h"
# 1 "../include/asm-generic/memory_model.h" 1




# 1 "../include/linux/pfn.h" 1
# 13 "../include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "../include/asm-generic/memory_model.h" 2
# 371 "../arch/arm/include/asm/memory.h" 2
# 27 "../arch/arm/include/asm/io.h" 2
# 1 "../include/asm-generic/pci_iomap.h" 1
# 10 "../include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 28 "../arch/arm/include/asm/io.h" 2
# 38 "../arch/arm/include/asm/io.h"
extern void atomic_io_modify(void *reg, u32 mask, u32 set);
extern void atomic_io_modify_relaxed(void *reg, u32 mask, u32 set);





void __raw_writesb(volatile void *addr, const void *data, int bytelen);
void __raw_writesw(volatile void *addr, const void *data, int wordlen);
void __raw_writesl(volatile void *addr, const void *data, int longlen);

void __raw_readsb(const volatile void *addr, void *data, int bytelen);
void __raw_readsw(const volatile void *addr, void *data, int wordlen);
void __raw_readsl(const volatile void *addr, void *data, int longlen);
# 68 "../arch/arm/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writew(u16 val, volatile void *addr)
{
 asm volatile("strh %1, %0"
       : : "Q" (*(volatile u16 *)addr), "r" (val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __raw_readw(const volatile void *addr)
{
 u16 val;
 asm volatile("ldrh %0, %1"
       : "=r" (val)
       : "Q" (*(volatile u16 *)addr));
 return val;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeb(u8 val, volatile void *addr)
{
 asm volatile("strb %1, %0"
       : : "Qo" (*(volatile u8 *)addr), "r" (val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writel(u32 val, volatile void *addr)
{
 asm volatile("str %1, %0"
       : : "Qo" (*(volatile u32 *)addr), "r" (val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __raw_readb(const volatile void *addr)
{
 u8 val;
 asm volatile("ldrb %0, %1"
       : "=r" (val)
       : "Qo" (*(volatile u8 *)addr));
 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __raw_readl(const volatile void *addr)
{
 u32 val;
 asm volatile("ldr %0, %1"
       : "=r" (val)
       : "Qo" (*(volatile u32 *)addr));
 return val;
}
# 137 "../arch/arm/include/asm/io.h"
extern void *__arm_ioremap_caller(phys_addr_t, size_t, unsigned int,
 void *);
extern void *__arm_ioremap_pfn(unsigned long, unsigned long, size_t, unsigned int);
extern void *__arm_ioremap_exec(phys_addr_t, size_t, bool cached);
extern void __iounmap(volatile void *addr);

extern void * (*arch_ioremap_caller)(phys_addr_t, size_t,
 unsigned int, void *);
extern void (*arch_iounmap)(volatile void *);




extern void __readwrite_bug(const char *fn);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__typesafe_io(unsigned long addr)
{
 return (void *)addr;
}
# 177 "../arch/arm/include/asm/io.h"
void pci_ioremap_set_mem_type(int mem_type);




extern int pci_ioremap_io(unsigned int offset, phys_addr_t phys_addr);
# 193 "../arch/arm/include/asm/io.h"
void *pci_remap_cfgspace(resource_size_t res_cookie, size_t size);
# 276 "../arch/arm/include/asm/io.h"
extern void _memcpy_fromio(void *, const volatile void *, size_t);
extern void _memcpy_toio(volatile void *, const void *, size_t);
extern void _memset_io(volatile void *, int, size_t);
# 318 "../arch/arm/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_io(volatile void *dst, unsigned c,
 size_t count)
{
 extern void mmioset(void *, unsigned int, size_t);
 mmioset((void *)dst, c, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_fromio(void *to, const volatile void *from,
 size_t count)
{
 extern void mmiocpy(void *, const void *, size_t);
 mmiocpy(to, (const void *)from, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_toio(volatile void *to, const void *from,
 size_t count)
{
 extern void mmiocpy(void *, const void *, size_t);
 mmiocpy((void *)to, from, count);
}
# 393 "../arch/arm/include/asm/io.h"
void *ioremap(resource_size_t res_cookie, size_t size);






void *ioremap_cache(resource_size_t res_cookie, size_t size);






void *ioremap_cached(resource_size_t res_cookie, size_t size);

void *ioremap_wc(resource_size_t res_cookie, size_t size);



void iounmap(volatile void *iomem_cookie);


void *arch_memremap_wb(phys_addr_t phys_addr, size_t size);
# 430 "../arch/arm/include/asm/io.h"
extern void *ioport_map(unsigned long port, unsigned int nr);



extern void ioport_unmap(void *addr);


struct pci_dev;


extern void pci_iounmap(struct pci_dev *dev, void *addr);
# 453 "../arch/arm/include/asm/io.h"
# 1 "../include/asm-generic/io.h" 1
# 10 "../include/asm-generic/io.h"
# 1 "../arch/arm/include/asm/page.h" 1
# 23 "../arch/arm/include/asm/page.h"
# 1 "../arch/arm/include/asm/glue.h" 1
# 24 "../arch/arm/include/asm/page.h" 2
# 107 "../arch/arm/include/asm/page.h"
struct page;
struct vm_area_struct;

struct cpu_user_fns {
 void (*cpu_clear_user_highpage)(struct page *page, unsigned long vaddr);
 void (*cpu_copy_user_highpage)(struct page *to, struct page *from,
   unsigned long vaddr, struct vm_area_struct *vma);
};


extern struct cpu_user_fns cpu_user;
# 140 "../arch/arm/include/asm/page.h"
extern void copy_page(void *to, const void *from);
# 149 "../arch/arm/include/asm/page.h"
# 1 "../arch/arm/include/asm/pgtable-2level-types.h" 1
# 12 "../arch/arm/include/asm/pgtable-2level-types.h"
typedef u32 pteval_t;
typedef u32 pmdval_t;
# 39 "../arch/arm/include/asm/pgtable-2level-types.h"
typedef pteval_t pte_t;
typedef pmdval_t pmd_t;
typedef pmdval_t pgd_t[2];
typedef pteval_t pgprot_t;
# 150 "../arch/arm/include/asm/page.h" 2




typedef struct page *pgtable_t;


extern int pfn_valid(unsigned long);
# 168 "../arch/arm/include/asm/page.h"
# 1 "../include/asm-generic/getorder.h" 1
# 13 "../include/asm-generic/getorder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __get_order(unsigned long size)
{
 int order;

 size--;
 size >>= 12;

 order = fls(size);



 return order;
}
# 169 "../arch/arm/include/asm/page.h" 2
# 11 "../include/asm-generic/io.h" 2







# 1 "./arch/arm/include/generated/asm/mmiowb.h" 1
# 1 "../include/asm-generic/mmiowb.h" 1
# 2 "./arch/arm/include/generated/asm/mmiowb.h" 2
# 19 "../include/asm-generic/io.h" 2
# 451 "../include/asm-generic/io.h"
# 1 "../include/linux/logic_pio.h" 1
# 11 "../include/linux/logic_pio.h"
# 1 "../include/linux/fwnode.h" 1
# 14 "../include/linux/fwnode.h"
struct fwnode_operations;
struct device;

struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 42 "../include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 u64 args[8];
};
# 69 "../include/linux/fwnode.h"
struct fwnode_operations {
 struct fwnode_handle *(*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 const void *(*device_get_match_data)(const struct fwnode_handle *fwnode,
          const struct device *dev);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
};
# 12 "../include/linux/logic_pio.h" 2

enum {
 LOGIC_PIO_INDIRECT,
 LOGIC_PIO_CPU_MMIO,
};

struct logic_pio_hwaddr {
 struct list_head list;
 struct fwnode_handle *fwnode;
 resource_size_t hw_start;
 resource_size_t io_start;
 resource_size_t size;
 unsigned long flags;

 void *hostdata;
 const struct logic_pio_host_ops *ops;
};

struct logic_pio_host_ops {
 u32 (*in)(void *hostdata, unsigned long addr, size_t dwidth);
 void (*out)(void *hostdata, unsigned long addr, u32 val,
      size_t dwidth);
 u32 (*ins)(void *hostdata, unsigned long addr, void *buffer,
     size_t dwidth, unsigned int count);
 void (*outs)(void *hostdata, unsigned long addr, const void *buffer,
       size_t dwidth, unsigned int count);
};
# 116 "../include/linux/logic_pio.h"
struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *fwnode);
unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *fwnode,
   resource_size_t hw_addr, resource_size_t size);
int logic_pio_register_range(struct logic_pio_hwaddr *newrange);
resource_size_t logic_pio_to_hwaddr(unsigned long pio);
unsigned long logic_pio_trans_cpuaddr(resource_size_t hw_addr);
# 452 "../include/asm-generic/io.h" 2
# 530 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 inb_p(unsigned long addr)
{
 return ({ __u8 __v = __raw_readb(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 inw_p(unsigned long addr)
{
 return ({ __u16 __v = (__builtin_constant_p((__u16)(( __u16)(__le16)(( __le16) __raw_readw(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))))))) ? ((__u16)( (((__u16)(( __u16)(__le16)(( __le16) __raw_readw(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))))) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__le16)(( __le16) __raw_readw(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))))) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__le16)(( __le16) __raw_readw(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))))))); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 inl_p(unsigned long addr)
{
 return ({ __u32 __v = (__builtin_constant_p((__u32)(( __u32)(__le32)(( __le32) __raw_readl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))))))) ? ((__u32)( (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))))) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))))) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))))) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(( __le32) __raw_readl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))))))); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outb_p(u8 value, unsigned long addr)
{
 ({ do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); arm_heavy_mb(); } while (0); __raw_writeb(value,__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outw_p(u16 value, unsigned long addr)
{
 ({ do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); arm_heavy_mb(); } while (0); __raw_writew(( __u16) (( __le16)(__builtin_constant_p((__u16)((value))) ? ((__u16)( (((__u16)((value)) & (__u16)0x00ffU) << 8) | (((__u16)((value)) & (__u16)0xff00U) >> 8))) : __fswab16((value)))),__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outl_p(u32 value, unsigned long addr)
{
 ({ do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); arm_heavy_mb(); } while (0); __raw_writel(( __u32) (( __le32)(__builtin_constant_p((__u32)((value))) ? ((__u32)( (((__u32)((value)) & (__u32)0x000000ffUL) << 24) | (((__u32)((value)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((value)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((value)) & (__u32)0xff000000UL) >> 24))) : __fswab32((value)))),__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff)))); });
}
# 634 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 __raw_readsb(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))),buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 __raw_readsw(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))),buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 __raw_readsl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))),buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 __raw_writesb(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))),buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 __raw_writesw(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))),buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 __raw_writesl(__typesafe_io(0xfee00000 + ((addr) & ((resource_size_t)0xfffff))),buffer,count);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 ioread8(const volatile void *addr)
{
 return ({ u8 __v = ({ u8 __r = __raw_readb(addr); __r; }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ioread16(const volatile void *addr)
{
 return ({ u16 __v = ({ u16 __r = (__builtin_constant_p((__u16)(( __u16)(__le16)(( __le16) __raw_readw(addr)))) ? ((__u16)( (((__u16)(( __u16)(__le16)(( __le16) __raw_readw(addr))) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__le16)(( __le16) __raw_readw(addr))) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__le16)(( __le16) __raw_readw(addr)))); __r; }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ioread32(const volatile void *addr)
{
 return ({ u32 __v = ({ u32 __r = (__builtin_constant_p((__u32)(( __u32)(__le32)(( __le32) __raw_readl(addr)))) ? ((__u32)( (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(addr))) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(addr))) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(addr))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(( __le32) __raw_readl(addr))) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(( __le32) __raw_readl(addr)))); __r; }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); __v; });
}
# 720 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite8(u8 value, volatile void *addr)
{
 ({ do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); arm_heavy_mb(); } while (0); __raw_writeb(value,addr); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16(u16 value, volatile void *addr)
{
 ({ do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); arm_heavy_mb(); } while (0); __raw_writew(( u16) (( __le16)(__builtin_constant_p((__u16)((value))) ? ((__u16)( (((__u16)((value)) & (__u16)0x00ffU) << 8) | (((__u16)((value)) & (__u16)0xff00U) >> 8))) : __fswab16((value)))),addr); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32(u32 value, volatile void *addr)
{
 ({ do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory"); arm_heavy_mb(); } while (0); __raw_writel(( u32) (( __le32)(__builtin_constant_p((__u32)((value))) ? ((__u32)( (((__u32)((value)) & (__u32)0x000000ffUL) << 24) | (((__u32)((value)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((value)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((value)) & (__u32)0xff000000UL) >> 24))) : __fswab32((value)))),addr); });
}
# 806 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread8_rep(const volatile void *addr, void *buffer,
          unsigned int count)
{
 __raw_readsb(addr,buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread16_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 __raw_readsw(addr,buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread32_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 __raw_readsl(addr,buffer,count);
}
# 844 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite8_rep(volatile void *addr,
    const void *buffer,
    unsigned int count)
{
 __raw_writesb(addr,buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 __raw_writesw(addr,buffer,count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 __raw_writesl(addr,buffer,count);
}
# 887 "../include/asm-generic/io.h"
# 1 "../include/linux/vmalloc.h" 1




# 1 "../include/linux/spinlock.h" 1
# 51 "../include/linux/spinlock.h"
# 1 "../include/linux/preempt.h" 1
# 11 "../include/linux/preempt.h"
# 1 "../include/linux/list.h" 1






# 1 "../include/linux/poison.h" 1
# 8 "../include/linux/list.h" 2
# 26 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 list->prev = list;
}


extern bool __list_add_valid(struct list_head *new,
         struct list_head *prev,
         struct list_head *next);
extern bool __list_del_entry_valid(struct list_head *entry);
# 56 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (new) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 77 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 91 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 103 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 117 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + 0);
 entry->prev = ((void *) 0x122 + 0);
}
# 151 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_init(struct list_head *old,
     struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 226 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty(const struct list_head *head)
{
 return ({ union { typeof(head->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->next), __u.__c, sizeof(head->next)); else __read_once_size_nocheck(&(head->next), __u.__c, sizeof(head->next)); do { } while (0); __u.__val; }) == head;
}
# 284 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = head->next;
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 311 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 357 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 385 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 446 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 463 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 741 "../include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_empty(const struct hlist_head *h)
{
 return !({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 n->next = first;
 if (first)
  first->pprev = &n->next;
 ({ union { typeof(h->first) __val; char __c[1]; } __u = { .__val = ( typeof(h->first)) (n) }; __write_once_size(&(h->first), __u.__c, sizeof(h->first)); __u.__val; });
 n->pprev = &h->first;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 next->pprev = &n->next;
 ({ union { typeof(*(n->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof(*(n->pprev))) (n) }; __write_once_size(&(*(n->pprev)), __u.__c, sizeof(*(n->pprev))); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 n->next = prev->next;
 prev->next = n;
 n->pprev = &prev->next;

 if (n->next)
  n->next->pprev = &n->next;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 12 "../include/linux/preempt.h" 2
# 78 "../include/linux/preempt.h"
# 1 "./arch/arm/include/generated/asm/preempt.h" 1
# 1 "../include/asm-generic/preempt.h" 1




# 1 "../include/linux/thread_info.h" 1
# 13 "../include/linux/thread_info.h"
# 1 "../include/linux/restart_block.h" 1
# 10 "../include/linux/restart_block.h"
# 1 "../include/linux/time64.h" 1




# 1 "../include/linux/math64.h" 1
# 88 "../include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = ({ uint32_t __base = (divisor); uint32_t __rem; (void)(((typeof((dividend)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (dividend) & (__base - 1); (dividend) >>= ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((4 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (dividend); (dividend) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (dividend); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (dividend); __rem = __n_lo - __res_lo * __base; } else if (__builtin_expect(!!(((dividend) >> 32) == 0), 1)) { __rem = (uint32_t)(dividend) % __base; (dividend) = (uint32_t)(dividend) / __base; } else __rem = __div64_32(&(dividend), __base); __rem; });
 return dividend;
}



extern s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder);



extern u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder);



extern u64 div64_u64(u64 dividend, u64 divisor);



extern s64 div64_s64(s64 dividend, s64 divisor);
# 123 "../include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 136 "../include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}
# 193 "../include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 u32 ah, al;
 u64 ret;

 al = a;
 ah = a >> 32;

 ret = mul_u32_u32(al, mul) >> shift;
 if (ah)
  ret += mul_u32_u32(ah, mul) << (32 - shift);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u64_shr(u64 a, u64 b, unsigned int shift)
{
 union {
  u64 ll;
  struct {

   u32 high, low;



  } l;
 } rl, rm, rn, rh, a0, b0;
 u64 c;

 a0.ll = a;
 b0.ll = b;

 rl.ll = mul_u32_u32(a0.l.low, b0.l.low);
 rm.ll = mul_u32_u32(a0.l.low, b0.l.high);
 rn.ll = mul_u32_u32(a0.l.high, b0.l.low);
 rh.ll = mul_u32_u32(a0.l.high, b0.l.high);






 rl.l.high = c = (u64)rl.l.high + rm.l.low + rn.l.low;
 rh.l.low = c = (c >> 32) + rm.l.high + rn.l.high + rh.l.low;
 rh.l.high = (c >> 32) + rh.l.high;





 if (shift == 0)
  return rl.ll;
 if (shift < 64)
  return (rl.ll >> shift) | (rh.ll << (64 - shift));
 return rh.ll >> (shift & 63);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {

   u32 high, low;



  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; (void)(((typeof((rh.ll)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (rh.ll) & (__base - 1); (rh.ll) >>= ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((4 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (rh.ll); (rh.ll) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (rh.ll); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (rh.ll); __rem = __n_lo - __res_lo * __base; } else if (__builtin_expect(!!(((rh.ll) >> 32) == 0), 1)) { __rem = (uint32_t)(rh.ll) % __base; (rh.ll) = (uint32_t)(rh.ll) / __base; } else __rem = __div64_32(&(rh.ll), __base); __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; (void)(((typeof((rl.ll)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (rl.ll) & (__base - 1); (rl.ll) >>= ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((4 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (rl.ll); (rl.ll) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (rl.ll); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (rl.ll); __rem = __n_lo - __res_lo * __base; } else if (__builtin_expect(!!(((rl.ll) >> 32) == 0), 1)) { __rem = (uint32_t)(rl.ll) % __base; (rl.ll) = (uint32_t)(rl.ll) / __base; } else __rem = __div64_32(&(rl.ll), __base); __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}
# 6 "../include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;


# 1 "../include/uapi/linux/time.h" 1





# 1 "../include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "../include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "../include/uapi/linux/time.h" 2



struct timespec {
 __kernel_time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 __kernel_time_t tv_sec;
 __kernel_suseconds_t tv_usec;
};

struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 34 "../include/uapi/linux/time.h"
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 11 "../include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 47 "../include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 131 "../include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec64_to_ns(const struct timespec64 *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 152 "../include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 11 "../include/linux/restart_block.h" 2

struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 14 "../include/linux/thread_info.h" 2
# 31 "../include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};


# 1 "../arch/arm/include/asm/thread_info.h" 1
# 13 "../arch/arm/include/asm/thread_info.h"
# 1 "../arch/arm/include/asm/fpstate.h" 1
# 23 "../arch/arm/include/asm/fpstate.h"
struct vfp_hard_struct {

 __u64 fpregs[32];






 __u32 fpexc;
 __u32 fpscr;



 __u32 fpinst;
 __u32 fpinst2;


 __u32 cpu;

};

union vfp_state {
 struct vfp_hard_struct hard;
};

extern void vfp_flush_thread(union vfp_state *);
extern void vfp_release_thread(union vfp_state *);



struct fp_hard_struct {
 unsigned int save[35];
};



struct fp_soft_struct {
 unsigned int save[35];
};



struct iwmmxt_struct {
 unsigned int save[0x98 / sizeof(unsigned int)];
};

union fp_state {
 struct fp_hard_struct hard;
 struct fp_soft_struct soft;

 struct iwmmxt_struct iwmmxt;

};



struct crunch_state {
 unsigned int mvdx[16][2];
 unsigned int mvax[4][3];
 unsigned int dspsc[2];
};
# 14 "../arch/arm/include/asm/thread_info.h" 2








struct task_struct;



typedef unsigned long mm_segment_t;

struct cpu_context_save {
 __u32 r4;
 __u32 r5;
 __u32 r6;
 __u32 r7;
 __u32 r8;
 __u32 r9;
 __u32 sl;
 __u32 fp;
 __u32 sp;
 __u32 pc;
 __u32 extra[2];
};





struct thread_info {
 unsigned long flags;
 int preempt_count;
 mm_segment_t addr_limit;
 struct task_struct *task;
 __u32 cpu;
 __u32 cpu_domain;



 struct cpu_context_save cpu_context;
 __u32 syscall;
 __u8 used_cp[16];
 unsigned long tp_value[2];



 union fp_state fpstate __attribute__((aligned(8)));
 union vfp_state vfpstate;

 unsigned long thumbee_state;

};
# 81 "../arch/arm/include/asm/thread_info.h"
register unsigned long current_stack_pointer asm ("sp");




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct thread_info *current_thread_info(void) __attribute__((__const__));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct thread_info *current_thread_info(void)
{
 return (struct thread_info *)
  (current_stack_pointer & ~((((1UL) << 12) << 1) - 1));
}
# 107 "../arch/arm/include/asm/thread_info.h"
extern void crunch_task_disable(struct thread_info *);
extern void crunch_task_copy(struct thread_info *, void *);
extern void crunch_task_restore(struct thread_info *, void *);
extern void crunch_task_release(struct thread_info *);

extern void iwmmxt_task_disable(struct thread_info *);
extern void iwmmxt_task_copy(struct thread_info *, void *);
extern void iwmmxt_task_restore(struct thread_info *, void *);
extern void iwmmxt_task_release(struct thread_info *);
extern void iwmmxt_task_switch(struct thread_info *);

extern void vfp_sync_hwstate(struct thread_info *);
extern void vfp_flush_hwstate(struct thread_info *);

struct user_vfp;
struct user_vfp_exc;

extern int vfp_preserve_user_clear_hwstate(struct user_vfp *,
        struct user_vfp_exc *);
extern int vfp_restore_user_hwstate(struct user_vfp *,
        struct user_vfp_exc *);
# 39 "../include/linux/thread_info.h" 2
# 53 "../include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 _set_bit(flag,(unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 _clear_bit(flag,(unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return _test_and_set_bit(flag,(unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return _test_and_clear_bit(flag,(unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_bit(flag, (unsigned long *)&ti->flags);
}
# 103 "../include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}



extern void __check_object_size(const void *ptr, unsigned long n,
     bool to_user);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void check_object_size(const void *ptr, unsigned long n,
           bool to_user)
{
 if (!__builtin_constant_p(n))
  __check_object_size(ptr, n, to_user);
}






extern void
__bad_copy_from(void);
extern void
__bad_copy_to(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_fmt("../include/linux/thread_info.h", 134, "Buffer overflow detected (%d < %lu)!\n", size, count); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = -1;
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 check_object_size(addr, bytes, is_source);
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_setup_new_exec(void) { }
# 6 "../include/asm-generic/preempt.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int preempt_count(void)
{
 return ({ union { typeof(current_thread_info()->preempt_count) __val; char __c[1]; } __u; if (1) __read_once_size(&(current_thread_info()->preempt_count), __u.__c, sizeof(current_thread_info()->preempt_count)); else __read_once_size_nocheck(&(current_thread_info()->preempt_count), __u.__c, sizeof(current_thread_info()->preempt_count)); do { } while (0); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) volatile int *preempt_count_ptr(void)
{
 return &current_thread_info()->preempt_count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void preempt_count_set(int pc)
{
 *preempt_count_ptr() = pc;
}
# 35 "../include/asm-generic/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool test_preempt_need_resched(void)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_add(int val)
{
 *preempt_count_ptr() += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_sub(int val)
{
 *preempt_count_ptr() -= val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __preempt_count_dec_and_test(void)
{





 return !--*preempt_count_ptr() && test_ti_thread_flag(current_thread_info(), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(preempt_count() == preempt_offset && test_ti_thread_flag(current_thread_info(), 1)), 0);

}
# 2 "./arch/arm/include/generated/asm/preempt.h" 2
# 79 "../include/linux/preempt.h" 2
# 52 "../include/linux/spinlock.h" 2






# 1 "../include/linux/bottom_half.h" 1







extern void __local_bh_disable_ip(unsigned long ip, unsigned int cnt);
# 17 "../include/linux/bottom_half.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}
# 59 "../include/linux/spinlock.h" 2

# 1 "./arch/arm/include/generated/asm/mmiowb.h" 1
# 61 "../include/linux/spinlock.h" 2
# 83 "../include/linux/spinlock.h"
# 1 "../include/linux/spinlock_types.h" 1
# 13 "../include/linux/spinlock_types.h"
# 1 "../arch/arm/include/asm/spinlock_types.h" 1
# 11 "../arch/arm/include/asm/spinlock_types.h"
typedef struct {
 union {
  u32 slock;
  struct __raw_tickets {

   u16 next;
   u16 owner;




  } tickets;
 };
} arch_spinlock_t;



typedef struct {
 u32 lock;
} arch_rwlock_t;
# 14 "../include/linux/spinlock_types.h" 2




# 1 "../include/linux/lockdep.h" 1
# 13 "../include/linux/lockdep.h"
struct task_struct;
struct lockdep_map;


extern int prove_locking;
extern int lock_stat;
# 28 "../include/linux/lockdep.h"
# 1 "../include/linux/debug_locks.h" 1








struct task_struct;

extern int debug_locks __attribute__((__section__(".data..read_mostly")));
extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __debug_locks_off(void)
{
 return ({ typeof(({ (__typeof__(*(&debug_locks)))__xchg((unsigned long)(0), (&debug_locks), sizeof(*(&debug_locks))); })) __ret; __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret = ({ (__typeof__(*(&debug_locks)))__xchg((unsigned long)(0), (&debug_locks), sizeof(*(&debug_locks))); }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret; });
}




extern int debug_locks_off(void);
# 44 "../include/linux/debug_locks.h"
  extern void locking_selftest(void);




struct task_struct;


extern void debug_show_all_locks(void);
extern void debug_show_held_locks(struct task_struct *task);
extern void debug_check_no_locks_freed(const void *from, unsigned long len);
extern void debug_check_no_locks_held(void);
# 29 "../include/linux/lockdep.h" 2
# 1 "../include/linux/stacktrace.h" 1





# 1 "./arch/arm/include/generated/uapi/asm/errno.h" 1
# 7 "../include/linux/stacktrace.h" 2

struct task_struct;
struct pt_regs;


void stack_trace_print(unsigned long *trace, unsigned int nr_entries,
         int spaces);
int stack_trace_snprint(char *buf, size_t size, unsigned long *entries,
   unsigned int nr_entries, int spaces);
unsigned int stack_trace_save(unsigned long *store, unsigned int size,
         unsigned int skipnr);
unsigned int stack_trace_save_tsk(struct task_struct *task,
      unsigned long *store, unsigned int size,
      unsigned int skipnr);
unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
       unsigned int size, unsigned int skipnr);
unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
# 64 "../include/linux/stacktrace.h"
struct stack_trace {
 unsigned int nr_entries, max_entries;
 unsigned long *entries;
 int skip;
};

extern void save_stack_trace(struct stack_trace *trace);
extern void save_stack_trace_regs(struct pt_regs *regs,
      struct stack_trace *trace);
extern void save_stack_trace_tsk(struct task_struct *tsk,
    struct stack_trace *trace);
extern int save_stack_trace_tsk_reliable(struct task_struct *tsk,
      struct stack_trace *trace);
extern void save_stack_trace_user(struct stack_trace *trace);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_trace_save_tsk_reliable(struct task_struct *tsk,
      unsigned long *store,
      unsigned int size)
{
 return -38;
}
# 30 "../include/linux/lockdep.h" 2
# 55 "../include/linux/lockdep.h"
struct lockdep_subclass_key {
 char __one_byte;
} __attribute__ ((__packed__));


struct lock_class_key {
 union {
  struct hlist_node hash_entry;
  struct lockdep_subclass_key subkeys[8UL];
 };
};

extern struct lock_class_key __lockdep_no_validate__;

struct lock_trace {
 unsigned int nr_entries;
 unsigned int offset;
};







struct lock_class {



 struct hlist_node hash_entry;






 struct list_head lock_entry;






 struct list_head locks_after, locks_before;

 struct lockdep_subclass_key *key;
 unsigned int subclass;
 unsigned int dep_gen_id;




 unsigned long usage_mask;
 struct lock_trace usage_traces[(1+2*4)];





 int name_version;
 const char *name;


 unsigned long contention_point[4];
 unsigned long contending_point[4];

} ;


struct lock_time {
 s64 min;
 s64 max;
 s64 total;
 unsigned long nr;
};

enum bounce_type {
 bounce_acquired_write,
 bounce_acquired_read,
 bounce_contended_write,
 bounce_contended_read,
 nr_bounce_types,

 bounce_acquired = bounce_acquired_write,
 bounce_contended = bounce_contended_write,
};

struct lock_class_stats {
 unsigned long contention_point[4];
 unsigned long contending_point[4];
 struct lock_time read_waittime;
 struct lock_time write_waittime;
 struct lock_time read_holdtime;
 struct lock_time write_holdtime;
 unsigned long bounces[nr_bounce_types];
};

struct lock_class_stats lock_stats(struct lock_class *class);
void clear_lock_stats(struct lock_class *class);






struct lockdep_map {
 struct lock_class_key *key;
 struct lock_class *class_cache[2];
 const char *name;

 int cpu;
 unsigned long ip;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_copy_map(struct lockdep_map *to,
        struct lockdep_map *from)
{
 int i;

 *to = *from;
# 184 "../include/linux/lockdep.h"
 for (i = 0; i < 2; i++)
  to->class_cache[i] = ((void *)0);
}





struct lock_list {
 struct list_head entry;
 struct lock_class *class;
 struct lock_class *links_to;
 struct lock_trace trace;
 int distance;





 struct lock_list *parent;
};
# 215 "../include/linux/lockdep.h"
struct lock_chain {

 unsigned int irq_context : 2,
     depth : 6,
     base : 24;

 struct hlist_node entry;
 u64 chain_key;
};





struct held_lock {
# 244 "../include/linux/lockdep.h"
 u64 prev_chain_key;
 unsigned long acquire_ip;
 struct lockdep_map *instance;
 struct lockdep_map *nest_lock;

 u64 waittime_stamp;
 u64 holdtime_stamp;






 unsigned int class_idx:13;
# 271 "../include/linux/lockdep.h"
 unsigned int irq_context:2;
 unsigned int trylock:1;

 unsigned int read:2;
 unsigned int check:1;
 unsigned int hardirqs_off:1;
 unsigned int references:12;
 unsigned int pin_count;
};




extern void lockdep_init(void);
extern void lockdep_reset(void);
extern void lockdep_reset_lock(struct lockdep_map *lock);
extern void lockdep_free_key_range(void *start, unsigned long size);
extern void lockdep_sys_exit(void);
extern void lockdep_set_selftest_task(struct task_struct *task);

extern void lockdep_init_task(struct task_struct *task);

extern void lockdep_off(void);
extern void lockdep_on(void);

extern void lockdep_register_key(struct lock_class_key *key);
extern void lockdep_unregister_key(struct lock_class_key *key);







extern void lockdep_init_map(struct lockdep_map *lock, const char *name,
        struct lock_class_key *key, int subclass);
# 331 "../include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lockdep_match_key(struct lockdep_map *lock,
        struct lock_class_key *key)
{
 return lock->key == key;
}
# 351 "../include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map *lock, unsigned int subclass,
    int trylock, int read, int check,
    struct lockdep_map *nest_lock, unsigned long ip);

extern void lock_release(struct lockdep_map *lock, int nested,
    unsigned long ip);




extern int lock_is_held_type(const struct lockdep_map *lock, int read);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_is_held(const struct lockdep_map *lock)
{
 return lock_is_held_type(lock, -1);
}




extern void lock_set_class(struct lockdep_map *lock, const char *name,
      struct lock_class_key *key, unsigned int subclass,
      unsigned long ip);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_set_subclass(struct lockdep_map *lock,
  unsigned int subclass, unsigned long ip)
{
 lock_set_class(lock, lock->name, lock->key, subclass, ip);
}

extern void lock_downgrade(struct lockdep_map *lock, unsigned long ip);

struct pin_cookie { unsigned int val; };



extern struct pin_cookie lock_pin_lock(struct lockdep_map *lock);
extern void lock_repin_lock(struct lockdep_map *lock, struct pin_cookie);
extern void lock_unpin_lock(struct lockdep_map *lock, struct pin_cookie);
# 498 "../include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 512 "../include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_free_task(struct task_struct *task) {}



extern void lock_contended(struct lockdep_map *lock, unsigned long ip);
extern void lock_acquired(struct lockdep_map *lock, unsigned long ip);
# 572 "../include/linux/lockdep.h"
extern void print_irqtrace_events(struct task_struct *curr);
# 662 "../include/linux/lockdep.h"
void lockdep_rcu_suspicious(const char *file, const int line, const char *s);
# 19 "../include/linux/spinlock_types.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;

 unsigned int magic, owner_cpu;
 void *owner;


 struct lockdep_map dep_map;

} raw_spinlock_t;
# 61 "../include/linux/spinlock_types.h"
typedef struct spinlock {
 union {
  struct raw_spinlock rlock;



  struct {
   u8 __padding[(__builtin_offsetof(struct raw_spinlock, dep_map))];
   struct lockdep_map dep_map;
  };

 };
} spinlock_t;
# 83 "../include/linux/spinlock_types.h"
# 1 "../include/linux/rwlock_types.h" 1
# 11 "../include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;

 unsigned int magic, owner_cpu;
 void *owner;


 struct lockdep_map dep_map;

} rwlock_t;
# 84 "../include/linux/spinlock_types.h" 2
# 84 "../include/linux/spinlock.h" 2





# 1 "../arch/arm/include/asm/spinlock.h" 1
# 41 "../arch/arm/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dsb_sev(void)
{

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 4" : : "r" (0) : "memory");
 __asm__("9998:	" "sev" "\n" "	.pushsection \".alt.smp.init\", \"a\"\n" "	.long	9998b\n" "	" "nop" "\n" "	.popsection\n");
}
# 56 "../arch/arm/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_spin_lock(arch_spinlock_t *lock)
{
 unsigned long tmp;
 u32 newval;
 arch_spinlock_t lockval;

 __builtin_prefetch(&lock->slock,1);
 __asm__ __volatile__(
"1:	ldrex	%0, [%3]\n"
"	add	%1, %0, %4\n"
"	strex	%2, %1, [%3]\n"
"	teq	%2, #0\n"
"	bne	1b"
 : "=&r" (lockval), "=&r" (newval), "=&r" (tmp)
 : "r" (&lock->slock), "I" (1 << 16)
 : "cc");

 while (lockval.tickets.next != lockval.tickets.owner) {
  __asm__ __volatile__ ("wfe" : : : "memory");
  lockval.tickets.owner = ({ union { typeof(lock->tickets.owner) __val; char __c[1]; } __u; if (1) __read_once_size(&(lock->tickets.owner), __u.__c, sizeof(lock->tickets.owner)); else __read_once_size_nocheck(&(lock->tickets.owner), __u.__c, sizeof(lock->tickets.owner)); do { } while (0); __u.__val; });
 }

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_spin_trylock(arch_spinlock_t *lock)
{
 unsigned long contended, res;
 u32 slock;

 __builtin_prefetch(&lock->slock,1);
 do {
  __asm__ __volatile__(
  "	ldrex	%0, [%3]\n"
  "	mov	%2, #0\n"
  "	subs	%1, %0, %0, ror #16\n"
  "	addeq	%0, %0, %4\n"
  "	strexeq	%2, %0, [%3]"
  : "=&r" (slock), "=&r" (contended), "=&r" (res)
  : "r" (&lock->slock), "I" (1 << 16)
  : "cc");
 } while (res);

 if (!contended) {
  __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
  return 1;
 } else {
  return 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_spin_unlock(arch_spinlock_t *lock)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 lock->tickets.owner++;
 dsb_sev();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_spin_value_unlocked(arch_spinlock_t lock)
{
 return lock.tickets.owner == lock.tickets.next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_spin_is_locked(arch_spinlock_t *lock)
{
 return !arch_spin_value_unlocked(({ union { typeof(*lock) __val; char __c[1]; } __u; if (1) __read_once_size(&(*lock), __u.__c, sizeof(*lock)); else __read_once_size_nocheck(&(*lock), __u.__c, sizeof(*lock)); do { } while (0); __u.__val; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_spin_is_contended(arch_spinlock_t *lock)
{
 struct __raw_tickets tickets = ({ union { typeof(lock->tickets) __val; char __c[1]; } __u; if (1) __read_once_size(&(lock->tickets), __u.__c, sizeof(lock->tickets)); else __read_once_size_nocheck(&(lock->tickets), __u.__c, sizeof(lock->tickets)); do { } while (0); __u.__val; });
 return (tickets.next - tickets.owner) > 1;
}
# 139 "../arch/arm/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_write_lock(arch_rwlock_t *rw)
{
 unsigned long tmp;

 __builtin_prefetch(&rw->lock,1);
 __asm__ __volatile__(
"1:	ldrex	%0, [%1]\n"
"	teq	%0, #0\n"
 "9998:	" "wfe" "ne" "\n" "	.pushsection \".alt.smp.init\", \"a\"\n" "	.long	9998b\n" "	" "nop" "\n" "	.popsection\n"
"	strexeq	%0, %2, [%1]\n"
"	teq	%0, #0\n"
"	bne	1b"
 : "=&r" (tmp)
 : "r" (&rw->lock), "r" (0x80000000)
 : "cc");

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_write_trylock(arch_rwlock_t *rw)
{
 unsigned long contended, res;

 __builtin_prefetch(&rw->lock,1);
 do {
  __asm__ __volatile__(
  "	ldrex	%0, [%2]\n"
  "	mov	%1, #0\n"
  "	teq	%0, #0\n"
  "	strexeq	%1, %3, [%2]"
  : "=&r" (contended), "=&r" (res)
  : "r" (&rw->lock), "r" (0x80000000)
  : "cc");
 } while (res);

 if (!contended) {
  __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
  return 1;
 } else {
  return 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_write_unlock(arch_rwlock_t *rw)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");

 __asm__ __volatile__(
 "str	%1, [%0]\n"
 :
 : "r" (&rw->lock), "r" (0)
 : "cc");

 dsb_sev();
}
# 207 "../arch/arm/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_read_lock(arch_rwlock_t *rw)
{
 unsigned long tmp, tmp2;

 __builtin_prefetch(&rw->lock,1);
 __asm__ __volatile__(
"	.syntax unified\n"
"1:	ldrex	%0, [%2]\n"
"	adds	%0, %0, #1\n"
"	strexpl	%1, %0, [%2]\n"
 "9998:	" "wfe" "mi" "\n" "	.pushsection \".alt.smp.init\", \"a\"\n" "	.long	9998b\n" "	" "nop" "\n" "	.popsection\n"
"	rsbspl	%0, %1, #0\n"
"	bmi	1b"
 : "=&r" (tmp), "=&r" (tmp2)
 : "r" (&rw->lock)
 : "cc");

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_read_unlock(arch_rwlock_t *rw)
{
 unsigned long tmp, tmp2;

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");

 __builtin_prefetch(&rw->lock,1);
 __asm__ __volatile__(
"1:	ldrex	%0, [%2]\n"
"	sub	%0, %0, #1\n"
"	strex	%1, %0, [%2]\n"
"	teq	%1, #0\n"
"	bne	1b"
 : "=&r" (tmp), "=&r" (tmp2)
 : "r" (&rw->lock)
 : "cc");

 if (tmp == 0)
  dsb_sev();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_read_trylock(arch_rwlock_t *rw)
{
 unsigned long contended, res;

 __builtin_prefetch(&rw->lock,1);
 do {
  __asm__ __volatile__(
  "	ldrex	%0, [%2]\n"
  "	mov	%1, #0\n"
  "	adds	%0, %0, #1\n"
  "	strexpl	%1, %0, [%2]"
  : "=&r" (contended), "=&r" (res)
  : "r" (&rw->lock)
  : "cc");
 } while (res);


 if (contended < 0x80000000) {
  __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
  return 1;
 } else {
  return 0;
 }
}
# 90 "../include/linux/spinlock.h" 2





  extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,
       struct lock_class_key *key);
# 173 "../include/linux/spinlock.h"
 extern void do_raw_spin_lock(raw_spinlock_t *lock) ;

 extern int do_raw_spin_trylock(raw_spinlock_t *lock);
 extern void do_raw_spin_unlock(raw_spinlock_t *lock) ;
# 310 "../include/linux/spinlock.h"
# 1 "../include/linux/rwlock.h" 1
# 18 "../include/linux/rwlock.h"
  extern void __rwlock_init(rwlock_t *lock, const char *name,
       struct lock_class_key *key);
# 32 "../include/linux/rwlock.h"
 extern void do_raw_read_lock(rwlock_t *lock) ;

 extern int do_raw_read_trylock(rwlock_t *lock);
 extern void do_raw_read_unlock(rwlock_t *lock) ;
 extern void do_raw_write_lock(rwlock_t *lock) ;

 extern int do_raw_write_trylock(rwlock_t *lock);
 extern void do_raw_write_unlock(rwlock_t *lock) ;
# 311 "../include/linux/spinlock.h" 2





# 1 "../include/linux/spinlock_api_smp.h" 1
# 18 "../include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((section(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((section(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((section(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((section(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "../include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
 return 0;
}
# 104 "../include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));






 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);



 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); trace_hardirqs_off(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 do { if (({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); trace_hardirqs_off(); } else { trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } } while (0);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}


# 1 "../include/linux/rwlock_api_smp.h" 1
# 18 "../include/linux/rwlock_api_smp.h"
void __attribute__((section(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((section(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((section(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "../include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_read_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 if (do_raw_read_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_write_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 if (do_raw_write_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
 return 0;
}
# 146 "../include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!(do_raw_read_trylock)((lock))) { lock_contended(&((lock))->dep_map, (unsigned long)__builtin_return_address(0)); (do_raw_read_lock)((lock)); } lock_acquired(&((lock))->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); trace_hardirqs_off(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!(do_raw_write_trylock)((lock))) { lock_contended(&((lock))->dep_map, (unsigned long)__builtin_return_address(0)); (do_raw_write_lock)((lock)); } lock_acquired(&((lock))->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); trace_hardirqs_off(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock(rwlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock(rwlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 do { if (({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); trace_hardirqs_off(); } else { trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } } while (0);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 do { if (({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); trace_hardirqs_off(); } else { trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } } while (0);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 lock_release(&lock->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 191 "../include/linux/spinlock_api_smp.h" 2
# 317 "../include/linux/spinlock.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 361 "../include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 376 "../include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); trace_hardirqs_off(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0); 0; }); });
}
# 429 "../include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return arch_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return arch_spin_is_contended(&(&lock->rlock)->raw_lock);
}
# 454 "../include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 478 "../include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 6 "../include/linux/vmalloc.h" 2


# 1 "../include/linux/llist.h" 1
# 54 "../include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 69 "../include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 187 "../include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_empty(const struct llist_head *head)
{
 return ({ union { typeof(head->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->first), __u.__c, sizeof(head->first)); else __read_once_size_nocheck(&(head->first), __u.__c, sizeof(head->first)); do { } while (0); __u.__val; }) == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}
# 220 "../include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(({ (__typeof__(*(&head->first)))__xchg((unsigned long)(((void *)0)), (&head->first), sizeof(*(&head->first))); })) __ret; __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret = ({ (__typeof__(*(&head->first)))__xchg((unsigned long)(((void *)0)), (&head->first), sizeof(*(&head->first))); }); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __ret; });
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 9 "../include/linux/vmalloc.h" 2

# 1 "../include/linux/rbtree.h" 1
# 22 "../include/linux/rbtree.h"
# 1 "../include/linux/rcupdate.h" 1
# 31 "../include/linux/rcupdate.h"
# 1 "../include/linux/cpumask.h" 1
# 11 "../include/linux/cpumask.h"
# 1 "../include/linux/threads.h" 1
# 12 "../include/linux/cpumask.h" 2
# 1 "../include/linux/bitmap.h" 1
# 111 "../include/linux/bitmap.h"
extern unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
extern unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
extern void bitmap_free(const unsigned long *bitmap);





extern int __bitmap_empty(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_full(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits);
extern void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_subset(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
extern void __bitmap_set(unsigned long *map, unsigned int start, int len);
extern void __bitmap_clear(unsigned long *map, unsigned int start, int len);

extern unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 164 "../include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

extern int __bitmap_parse(const char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
extern int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
extern int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
extern void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);


extern void bitmap_copy_le(unsigned long *dst, const unsigned long *src, unsigned int nbits);



extern unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
extern int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);
# 215 "../include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 32)
  dst[nbits / 32] &= (~0UL >> (-(nbits) & (32 - 1)));
}
# 263 "../include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (32 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (32 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 313 "../include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (32 - 1))));
 if (__builtin_constant_p(nbits & ((8 * sizeof(unsigned long)) - 1)) &&
     (((nbits) & ((typeof(nbits))((8 * sizeof(unsigned long))) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (32 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (32 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (32 - 1))));

 return _find_first_bit_be(src,nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (32 - 1))));

 return _find_first_zero_bit_be(src,nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (32 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __set_bit(start, map);
 else if (__builtin_constant_p(start & ((8 * sizeof(unsigned long)) - 1)) &&
   (((start) & ((typeof(start))((8 * sizeof(unsigned long))) - 1)) == 0) &&
   __builtin_constant_p(nbits & ((8 * sizeof(unsigned long)) - 1)) &&
   (((nbits) & ((typeof(nbits))((8 * sizeof(unsigned long))) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __clear_bit(start, map);
 else if (__builtin_constant_p(start & ((8 * sizeof(unsigned long)) - 1)) &&
   (((start) & ((typeof(start))((8 * sizeof(unsigned long))) - 1)) == 0) &&
   __builtin_constant_p(nbits & ((8 * sizeof(unsigned long)) - 1)) &&
   (((nbits) & ((typeof(nbits))((8 * sizeof(unsigned long))) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (32 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 32 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (32 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}
# 460 "../include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 13 "../include/linux/cpumask.h" 2



typedef struct cpumask { unsigned long bits[(((4) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 38 "../include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 89 "../include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
# 118 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{

 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(cpu >= bits); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/cpumask.h", 121); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, nr_cpu_ids);
 return cpu;
}
# 196 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return _find_first_bit_be(((srcp)->bits),nr_cpu_ids);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), nr_cpu_ids);
}

unsigned int cpumask_next(int n, const struct cpumask *srcp);
# 221 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return _find_next_zero_bit_be(((srcp)->bits),nr_cpu_ids,n+1);
}

int cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
# 257 "../include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 309 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 _set_bit(cpumask_check(cpu),((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 __set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 _clear_bit(cpumask_check(cpu),((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 __clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 342 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 356 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return _test_and_set_bit(cpumask_check(cpu),((cpumask)->bits));
}
# 370 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return _test_and_clear_bit(cpumask_check(cpu),((cpumask)->bits));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), nr_cpu_ids);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), nr_cpu_ids);
}
# 401 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), nr_cpu_ids);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), nr_cpu_ids);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), nr_cpu_ids);
}
# 444 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), nr_cpu_ids);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           nr_cpu_ids);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       nr_cpu_ids);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            nr_cpu_ids);
}
# 495 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        nr_cpu_ids);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), nr_cpu_ids);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), nr_cpu_ids);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), nr_cpu_ids);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            nr_cpu_ids);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           nr_cpu_ids);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), nr_cpu_ids);
}
# 606 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), nr_cpu_ids);
}
# 620 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         nr_cpu_ids);
}
# 634 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 unsigned int len = strchrnul(buf, '\n') - buf;

 return bitmap_parse(buf, len, ((dstp)->bits), nr_cpu_ids);
}
# 648 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), nr_cpu_ids);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_size(void)
{
 return (((nr_cpu_ids) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 702 "../include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;




bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags, int node);
bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags);
bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags, int node);
bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags);
void alloc_bootmem_cpumask_var(cpumask_var_t *mask);
void free_cpumask_var(cpumask_var_t mask);
void free_bootmem_cpumask_var(cpumask_var_t mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_available(cpumask_var_t mask)
{
 return mask != ((void *)0);
}
# 770 "../include/linux/cpumask.h"
extern const unsigned long cpu_all_bits[(((4) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 781 "../include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_online(unsigned int cpu, bool online)
{
 if (online)
  cpumask_set_cpu(cpu, &__cpu_online_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_online_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}
# 841 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 853 "../include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[32 +1][(((4) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 32];
 p -= cpu / 32;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 890 "../include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 32 "../include/linux/rcupdate.h" 2






void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void synchronize_rcu(void);
# 57 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_lock(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_unlock(void)
{
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_preempt_depth(void)
{
 return 0;
}




void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 93 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_exit(void) { }



void rcu_init_nohz(void);
# 139 "../include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 171 "../include/linux/rcupdate.h"
# 1 "../include/linux/rcutree.h" 1
# 20 "../include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
unsigned long get_state_synchronize_rcu(void);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);

void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_is_watching(void);

void rcu_all_qs(void);



int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 172 "../include/linux/rcupdate.h" 2
# 187 "../include/linux/rcupdate.h"
void init_rcu_head(struct callback_head *head);
void destroy_rcu_head(struct callback_head *head);
void init_rcu_head_on_stack(struct callback_head *head);
void destroy_rcu_head_on_stack(struct callback_head *head);
# 199 "../include/linux/rcupdate.h"
bool rcu_lockdep_current_cpu_online(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_lock_acquire(struct lockdep_map *map)
{
 lock_acquire(map, 0, 0, 2, 0, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_lock_release(struct lockdep_map *map)
{
 lock_release(map, 1, ({ __label__ __here; __here: (unsigned long)&&__here; }));
}

extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;
int debug_lockdep_rcu_enabled(void);
int rcu_read_lock_held(void);
int rcu_read_lock_bh_held(void);
int rcu_read_lock_sched_held(void);
# 263 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_preempt_sleep_check(void)
{
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (lock_is_held(&rcu_lock_map))) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 266, "Illegal context switch in RCU read-side critical section"); } } while (0);

}
# 588 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 rcu_lock_acquire(&rcu_lock_map);
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 594, "rcu_read_lock() used illegally while idle"); } } while (0);

}
# 640 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock(void)
{
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 643, "rcu_read_unlock() used illegally while idle"); } } while (0);

 (void)0;
 __rcu_read_unlock();
 rcu_lock_release(&rcu_lock_map);
}
# 661 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 rcu_lock_acquire(&rcu_bh_lock_map);
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 667, "rcu_read_lock_bh() used illegally while idle"); } } while (0);

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_bh(void)
{
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 678, "rcu_read_unlock_bh() used illegally while idle"); } } while (0);

 rcu_lock_release(&rcu_bh_lock_map);
 (void)0;
 local_bh_enable();
}
# 696 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 (void)0;
 rcu_lock_acquire(&rcu_sched_lock_map);
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 702, "rcu_read_lock_sched() used illegally while idle"); } } while (0);

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched(void)
{
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcupdate.h", 720, "rcu_read_unlock_sched() used illegally while idle"); } } while (0);

 rcu_lock_release(&rcu_sched_lock_map);
 (void)0;
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}
# 861 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 879 "../include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ union { typeof(rhp->func) __val; char __c[1]; } __u; if (1) __read_once_size(&(rhp->func), __u.__c, sizeof(rhp->func)); else __read_once_size_nocheck(&(rhp->func), __u.__c, sizeof(rhp->func)); do { } while (0); __u.__val; });

 if (func == f)
  return true;
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/rcupdate.h", 886); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 return false;
}
# 23 "../include/linux/rbtree.h" 2

struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 49 "../include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*rb_link)) __val; char __c[1]; } __u = { .__val = ( typeof((*rb_link))) ((typeof(*rb_link))(_r_a_p__v)) }; __write_once_size(&((*rb_link)), __u.__c, sizeof((*rb_link))); __u.__val; }); else do { do { extern void __compiletime_assert_84(void) ; if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_84(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&*rb_link) __val; char __c[1]; } __u = { .__val = ( typeof(*&*rb_link)) ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)) }; __write_once_size(&(*&*rb_link), __u.__c, sizeof(*&*rb_link)); __u.__val; }); } while (0); } while (0);
}
# 125 "../include/linux/rbtree.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_erase_cached(struct rb_node *node,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == node)
  root->rb_leftmost = rb_next(node);
 rb_erase(node, &root->rb_root);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 11 "../include/linux/vmalloc.h" 2
# 1 "../include/linux/overflow.h" 1
# 253 "../include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);

 return bytes;
}
# 275 "../include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);
 if (({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);
 if (({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); }))
  return (~(size_t)0);

 return bytes;
}
# 12 "../include/linux/vmalloc.h" 2

struct vm_area_struct;
struct notifier_block;
# 39 "../include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;
 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;




 unsigned long subtree_max_size;
 unsigned long flags;
 struct rb_node rb_node;
 struct list_head list;
 struct llist_node purge_list;
 struct vm_struct *vm;
};




extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count,
    int node, pgprot_t prot);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size);
extern void *vzalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vzalloc_node(unsigned long size, int node);
extern void *vmalloc_exec(unsigned long size);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller);
# 104 "../include/linux/vmalloc.h"
extern void *__vmalloc_node_flags_caller(unsigned long size,
      int node, gfp_t flags, void *caller);


extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
void vmalloc_sync_all(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 12);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,
     unsigned long start, unsigned long end);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

extern int map_vm_area(struct vm_struct *area, pgprot_t prot,
   struct page **pages);

extern int map_kernel_range_noflush(unsigned long start, unsigned long size,
        pgprot_t prot, struct page **pages);
extern void unmap_kernel_range_noflush(unsigned long addr, unsigned long size);
extern void unmap_kernel_range(unsigned long addr, unsigned long size);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 184 "../include/linux/vmalloc.h"
extern struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes);
extern void free_vm_area(struct vm_struct *area);


extern long vread(char *buf, char *addr, unsigned long count);
extern long vwrite(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 227 "../include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);
# 888 "../include/asm-generic/io.h" 2



struct pci_dev;
extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
# 943 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap_uc(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}
# 1060 "../include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr)
{
}
# 454 "../arch/arm/include/asm/io.h" 2



extern int valid_phys_addr_range(phys_addr_t addr, size_t size);
extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);
extern int devmem_is_allowed(unsigned long pfn);






extern void register_isa_ports(unsigned int mmio, unsigned int io,
          unsigned int io_shift);
# 14 "../include/linux/io.h" 2


struct device;
struct resource;

          void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 40 "../include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioremap_huge_init(void) { }
# 51 "../include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_ioport_map(struct device *dev,
          unsigned long port,
          unsigned int nr)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void devm_ioport_unmap(struct device *dev, void *addr)
{
}




void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_nocache(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);

void *__devm_memremap_pages(struct device *dev, struct resource *res);
# 124 "../include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_phys_wc_del(int handle)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_phys_wc_index(int handle)
{
 return -1;
}




enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 166 "../include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_io_reserve_memtype_wc(resource_size_t base,
          resource_size_t size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_io_free_memtype_wc(resource_size_t base,
        resource_size_t size)
{
}
# 8 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2

# 1 "../include/linux/mfd/syscon.h" 1
# 15 "../include/linux/mfd/syscon.h"
# 1 "../include/linux/errno.h" 1




# 1 "../include/uapi/linux/errno.h" 1
# 1 "./arch/arm/include/generated/uapi/asm/errno.h" 1
# 2 "../include/uapi/linux/errno.h" 2
# 6 "../include/linux/errno.h" 2
# 16 "../include/linux/mfd/syscon.h" 2

struct device_node;


extern struct regmap *syscon_node_to_regmap(struct device_node *np);
extern struct regmap *syscon_regmap_lookup_by_compatible(const char *s);
extern struct regmap *syscon_regmap_lookup_by_phandle(
     struct device_node *np,
     const char *property);
# 10 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/mutex.h" 1
# 14 "../include/linux/mutex.h"
# 1 "./arch/arm/include/generated/asm/current.h" 1
# 1 "../include/asm-generic/current.h" 1
# 2 "./arch/arm/include/generated/asm/current.h" 2
# 15 "../include/linux/mutex.h" 2





# 1 "../include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 ({ union { typeof(((&lock->tail)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&lock->tail)->counter))) (((0))) }; __write_once_size(&(((&lock->tail)->counter)), __u.__c, sizeof(((&lock->tail)->counter))); __u.__val; });
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return ({ union { typeof((&lock->tail)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&lock->tail)->counter), __u.__c, sizeof((&lock->tail)->counter)); else __read_once_size_nocheck(&((&lock->tail)->counter), __u.__c, sizeof((&lock->tail)->counter)); do { } while (0); __u.__val; }) != (0);
}
# 21 "../include/linux/mutex.h" 2


struct ww_acquire_ctx;
# 53 "../include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;

 void *magic;


 struct lockdep_map dep_map;

};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *__mutex_owner(struct mutex *lock)
{
 return (struct task_struct *)(atomic_long_read(&lock->owner) & ~0x07);
}





struct mutex_waiter {
 struct list_head list;
 struct task_struct *task;
 struct ww_acquire_ctx *ww_ctx;

 void *magic;

};






extern void mutex_destroy(struct mutex *lock);
# 138 "../include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mutex_is_locked(struct mutex *lock)
{
 return __mutex_owner(lock) != ((void *)0);
}






extern void mutex_lock_nested(struct mutex *lock, unsigned int subclass);
extern void _mutex_lock_nest_lock(struct mutex *lock, struct lockdep_map *nest_lock);

extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible_nested(struct mutex *lock,
     unsigned int subclass);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable_nested(struct mutex *lock,
     unsigned int subclass);
extern void mutex_lock_io_nested(struct mutex *lock, unsigned int subclass);
# 196 "../include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);





enum mutex_trylock_recursive_enum {
 MUTEX_TRYLOCK_FAILED = 0,
 MUTEX_TRYLOCK_SUCCESS = 1,
 MUTEX_TRYLOCK_RECURSIVE,
};
# 223 "../include/linux/mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) enum mutex_trylock_recursive_enum
mutex_trylock_recursive(struct mutex *lock)
{
 if (__builtin_expect(!!(__mutex_owner(lock) == (current_thread_info()->task)), 0))
  return MUTEX_TRYLOCK_RECURSIVE;

 return mutex_trylock(lock);
}
# 11 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/of.h" 1
# 17 "../include/linux/of.h"
# 1 "../include/linux/kobject.h" 1
# 20 "../include/linux/kobject.h"
# 1 "../include/linux/sysfs.h" 1
# 16 "../include/linux/sysfs.h"
# 1 "../include/linux/kernfs.h" 1
# 13 "../include/linux/kernfs.h"
# 1 "../include/linux/idr.h" 1
# 15 "../include/linux/idr.h"
# 1 "../include/linux/radix-tree.h" 1
# 18 "../include/linux/radix-tree.h"
# 1 "../include/linux/xarray.h" 1
# 14 "../include/linux/xarray.h"
# 1 "../include/linux/gfp.h" 1




# 1 "../include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

extern void dump_page(struct page *page, const char *reason);
extern void __dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 6 "../include/linux/gfp.h" 2
# 1 "../include/linux/mmzone.h" 1
# 10 "../include/linux/mmzone.h"
# 1 "../include/linux/wait.h" 1
# 11 "../include/linux/wait.h"
# 1 "./arch/arm/include/generated/asm/current.h" 1
# 12 "../include/linux/wait.h" 2
# 1 "../include/uapi/linux/wait.h" 1
# 13 "../include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 27 "../include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 61 "../include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 79 "../include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 124 "../include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 137 "../include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add(&wq_entry->entry, &wq_head->head);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode, int nr);
# 232 "../include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 716 "../include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1110 "../include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 11 "../include/linux/mmzone.h" 2



# 1 "../include/linux/numa.h" 1
# 15 "../include/linux/mmzone.h" 2

# 1 "../include/linux/seqlock.h" 1
# 48 "../include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;

 struct lockdep_map dep_map;

} seqcount_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 lockdep_init_map(&s->dep_map, name, key, 0);
 s->sequence = 0;
}
# 75 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seqcount_lockdep_reader_access(const seqcount_t *s)
{
 seqcount_t *l = (seqcount_t *)s;
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 lock_acquire(&l->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 lock_release(&l->dep_map, 1, (unsigned long)__builtin_return_address(0));
 do { if (({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); trace_hardirqs_off(); } else { trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } } while (0);
}
# 108 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret;

repeat:
 ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 if (__builtin_expect(!!(ret & 1), 0)) {
  do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __asm__ __volatile__("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;"); } while (0);
  goto repeat;
 }
 return ret;
}
# 130 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 146 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = __read_seqcount_begin(s);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret;
}
# 162 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqcount_begin(const seqcount_t *s)
{
 seqcount_lockdep_reader_access(s);
 return raw_read_seqcount_begin(s);
}
# 182 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return ret & ~1;
}
# 203 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 return __builtin_expect(!!(s->sequence != start), 0);
}
# 218 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 return __read_seqcount_retry(s, start);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_begin(seqcount_t *s)
{
 s->sequence++;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_end(seqcount_t *s)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 s->sequence++;
}
# 272 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_barrier(seqcount_t *s)
{
 s->sequence++;
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 s->sequence++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int raw_read_seqcount_latch(seqcount_t *s)
{

 int seq = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 return seq;
}
# 363 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_latch(seqcount_t *s)
{
       __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
       s->sequence++;
       __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 raw_write_seqcount_begin(s);
 lock_acquire(&s->dep_map, subclass, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_begin(seqcount_t *s)
{
 write_seqcount_begin_nested(s, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_end(seqcount_t *s)
{
 lock_release(&s->dep_map, 1, (unsigned long)__builtin_return_address(0));
 raw_write_seqcount_end(s);
}
# 398 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_invalidate(seqcount_t *s)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 s->sequence+=2;
}

typedef struct {
 struct seqcount seqcount;
 spinlock_t lock;
} seqlock_t;
# 431 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqbegin(const seqlock_t *sl)
{
 return read_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{
 return read_seqcount_retry(&sl->seqcount, start);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_bh(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_irq(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 write_seqcount_begin(&sl->seqcount);
 return flags;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 526 "../include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 17 "../include/linux/mmzone.h" 2
# 1 "../include/linux/nodemask.h" 1
# 98 "../include/linux/nodemask.h"
typedef struct { unsigned long bits[((((1 << 0)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "../include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 0) : 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 128 "../include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 _set_bit(node,dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 _clear_bit(node,dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return _test_and_set_bit(node,addr->bits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(_find_first_bit_be(srcp->bits,(1 << 0)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(_find_first_bit_be(srcp->bits,(1 << 0)))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(_find_first_bit_be(srcp->bits,(1 << 0)))) ? ((int)((1 << 0))) : ((int)(_find_first_bit_be(srcp->bits,(1 << 0))))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x0 = ((int)((1 << 0))); typeof((int)(_find_first_bit_be(srcp->bits,(1 << 0)))) __UNIQUE_ID___y1 = ((int)(_find_first_bit_be(srcp->bits,(1 << 0)))); ((__UNIQUE_ID___x0) < (__UNIQUE_ID___y1) ? (__UNIQUE_ID___x0) : (__UNIQUE_ID___y1)); }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(_find_next_bit_be(srcp->bits,(1 << 0),n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(_find_next_bit_be(srcp->bits,(1 << 0),n+1))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(_find_next_bit_be(srcp->bits,(1 << 0),n+1))) ? ((int)((1 << 0))) : ((int)(_find_next_bit_be(srcp->bits,(1 << 0),n+1)))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x2 = ((int)((1 << 0))); typeof((int)(_find_next_bit_be(srcp->bits,(1 << 0),n+1))) __UNIQUE_ID___y3 = ((int)(_find_next_bit_be(srcp->bits,(1 << 0),n+1))); ((__UNIQUE_ID___x2) < (__UNIQUE_ID___y3) ? (__UNIQUE_ID___x2) : (__UNIQUE_ID___y3)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 0));
 __node_set((node), &(*mask));
}
# 299 "../include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(_find_first_zero_bit_be(maskp->bits,(1 << 0)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(_find_first_zero_bit_be(maskp->bits,(1 << 0)))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(_find_first_zero_bit_be(maskp->bits,(1 << 0)))) ? ((int)((1 << 0))) : ((int)(_find_first_zero_bit_be(maskp->bits,(1 << 0))))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x4 = ((int)((1 << 0))); typeof((int)(_find_first_zero_bit_be(maskp->bits,(1 << 0)))) __UNIQUE_ID___y5 = ((int)(_find_first_zero_bit_be(maskp->bits,(1 << 0)))); ((__UNIQUE_ID___x4) < (__UNIQUE_ID___y5) ? (__UNIQUE_ID___x4) : (__UNIQUE_ID___y5)); }));

}
# 333 "../include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "../include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,

 N_HIGH_MEMORY,



 N_MEMORY,
 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];
# 464 "../include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_state(int node, enum node_states state)
{
 return node == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_state(int node, enum node_states state)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_clear_state(int node, enum node_states state)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int num_node_state(enum node_states state)
{
 return 1;
}
# 499 "../include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_random(const nodemask_t *mask)
{
 return 0;
}
# 531 "../include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 18 "../include/linux/mmzone.h" 2
# 1 "../include/linux/pageblock-flags.h" 1
# 18 "../include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 55 "../include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(struct page *page,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);
# 19 "../include/linux/mmzone.h" 2
# 1 "../include/linux/page-flags-layout.h" 1





# 1 "./include/generated/bounds.h" 1
# 7 "../include/linux/page-flags-layout.h" 2
# 20 "../include/linux/mmzone.h" 2

# 1 "../include/linux/mm_types.h" 1




# 1 "../include/linux/mm_types_task.h" 1
# 34 "../include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};

enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;




 __u16 offset;
 __u16 size;

};


struct tlbflush_unmap_batch {
# 93 "../include/linux/mm_types_task.h"
};
# 6 "../include/linux/mm_types.h" 2

# 1 "../include/linux/auxvec.h" 1




# 1 "../include/uapi/linux/auxvec.h" 1




# 1 "../arch/arm/include/asm/auxvec.h" 1
# 1 "../arch/arm/include/uapi/asm/auxvec.h" 1
# 2 "../arch/arm/include/asm/auxvec.h" 2
# 6 "../include/uapi/linux/auxvec.h" 2
# 6 "../include/linux/auxvec.h" 2
# 8 "../include/linux/mm_types.h" 2



# 1 "../include/linux/rwsem.h" 1
# 35 "../include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;

 struct optimistic_spin_queue osq;

 raw_spinlock_t wait_lock;
 struct list_head wait_list;

 struct lockdep_map dep_map;

};
# 60 "../include/linux/rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 93 "../include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 109 "../include/linux/rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}




extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 165 "../include/linux/rwsem.h"
extern void down_read_nested(struct rw_semaphore *sem, int subclass);
extern void down_write_nested(struct rw_semaphore *sem, int subclass);
extern int down_write_killable_nested(struct rw_semaphore *sem, int subclass);
extern void _down_write_nest_lock(struct rw_semaphore *sem, struct lockdep_map *nest_lock);
# 182 "../include/linux/rwsem.h"
extern void down_read_non_owner(struct rw_semaphore *sem);
extern void up_read_non_owner(struct rw_semaphore *sem);
# 12 "../include/linux/mm_types.h" 2
# 1 "../include/linux/completion.h" 1
# 26 "../include/linux/completion.h"
struct completion {
 unsigned int done;
 wait_queue_head_t wait;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_release(struct completion *x) {}
# 85 "../include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_waitqueue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 98 "../include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "../include/linux/mm_types.h" 2

# 1 "../include/linux/uprobes.h" 1
# 19 "../include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};



# 1 "../arch/arm/include/asm/uprobes.h" 1








# 1 "../arch/arm/include/asm/probes.h" 1
# 16 "../arch/arm/include/asm/probes.h"
typedef u32 probes_opcode_t;

struct arch_probes_insn;
typedef void (probes_insn_handler_t)(probes_opcode_t,
         struct arch_probes_insn *,
         struct pt_regs *);
typedef unsigned long (probes_check_cc)(unsigned long);
typedef void (probes_insn_singlestep_t)(probes_opcode_t,
     struct arch_probes_insn *,
     struct pt_regs *);
typedef void (probes_insn_fn_t)(void);


struct arch_probes_insn {
 probes_opcode_t *insn;
 probes_insn_handler_t *insn_handler;
 probes_check_cc *insn_check_cc;
 probes_insn_singlestep_t *insn_singlestep;
 probes_insn_fn_t *insn_fn;
 int stack_space;
 unsigned long register_usage_flags;
 bool kprobe_direct_exec;
};
# 10 "../arch/arm/include/asm/uprobes.h" 2


typedef u32 uprobe_opcode_t;
# 22 "../arch/arm/include/asm/uprobes.h"
struct arch_uprobe_task {
 u32 backup;
 unsigned long saved_trap_no;
};

struct arch_uprobe {
 u8 insn[4];
 unsigned long ixol[2];
 uprobe_opcode_t bpinsn;
 bool simulate;
 u32 pcreg;
 void (*prehandler)(struct arch_uprobe *auprobe,
      struct arch_uprobe_task *autask,
      struct pt_regs *regs);
 void (*posthandler)(struct arch_uprobe *auprobe,
       struct arch_uprobe_task *autask,
       struct pt_regs *regs);
 struct arch_probes_insn asi;
};
# 50 "../include/linux/uprobes.h" 2

enum uprobe_task_state {
 UTASK_RUNNING,
 UTASK_SSTEP,
 UTASK_SSTEP_ACK,
 UTASK_SSTEP_TRAPPED,
};




struct uprobe_task {
 enum uprobe_task_state state;

 union {
  struct {
   struct arch_uprobe_task autask;
   unsigned long vaddr;
  };

  struct {
   struct callback_head dup_xol_work;
   unsigned long dup_xol_addr;
  };
 };

 struct uprobe *active_uprobe;
 unsigned long xol_vaddr;

 struct return_instance *return_instances;
 unsigned int depth;
};

struct return_instance {
 struct uprobe *uprobe;
 unsigned long func;
 unsigned long stack;
 unsigned long orig_ret_vaddr;
 bool chained;

 struct return_instance *next;
};

enum rp_check {
 RP_CHECK_CALL,
 RP_CHECK_CHAIN_CALL,
 RP_CHECK_RET,
};

struct xol_area;

struct uprobes_state {
 struct xol_area *xol_area;
};

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) uprobes_init(void);
extern int set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern int set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern bool is_swbp_insn(uprobe_opcode_t *insn);
extern bool is_trap_insn(uprobe_opcode_t *insn);
extern unsigned long uprobe_get_swbp_addr(struct pt_regs *regs);
extern unsigned long uprobe_get_trap_addr(struct pt_regs *regs);
extern int uprobe_write_opcode(struct arch_uprobe *auprobe, struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc);
extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_mmap(struct vm_area_struct *vma);
extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
extern void uprobe_start_dup_mmap(void);
extern void uprobe_end_dup_mmap(void);
extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void uprobe_free_utask(struct task_struct *t);
extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
extern void uprobe_notify_resume(struct pt_regs *regs);
extern bool uprobe_deny_signal(void);
extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
extern void uprobe_clear_state(struct mm_struct *mm);
extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
extern bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx, struct pt_regs *regs);
extern bool arch_uprobe_ignore(struct arch_uprobe *aup, struct pt_regs *regs);
extern void arch_uprobe_copy_ixol(struct page *page, unsigned long vaddr,
      void *src, unsigned long len);
# 15 "../include/linux/mm_types.h" 2

# 1 "../include/linux/workqueue.h" 1








# 1 "../include/linux/timer.h" 1





# 1 "../include/linux/ktime.h" 1
# 24 "../include/linux/ktime.h"
# 1 "../include/linux/time.h" 1
# 10 "../include/linux/time.h"
extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);
# 38 "../include/linux/time.h"
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern int do_getitimer(int which, struct itimerval *value);

extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);


# 1 "../include/linux/time32.h" 1
# 13 "../include/linux/time32.h"
# 1 "../include/linux/timex.h" 1
# 56 "../include/linux/timex.h"
# 1 "../include/uapi/linux/timex.h" 1
# 56 "../include/uapi/linux/timex.h"
# 1 "../include/linux/time.h" 1
# 57 "../include/uapi/linux/timex.h" 2







struct timex {
 unsigned int modes;
 __kernel_long_t offset;
 __kernel_long_t freq;
 __kernel_long_t maxerror;
 __kernel_long_t esterror;
 int status;
 __kernel_long_t constant;
 __kernel_long_t precision;
 __kernel_long_t tolerance;


 struct timeval time;
 __kernel_long_t tick;

 __kernel_long_t ppsfreq;
 __kernel_long_t jitter;
 int shift;
 __kernel_long_t stabil;
 __kernel_long_t jitcnt;
 __kernel_long_t calcnt;
 __kernel_long_t errcnt;
 __kernel_long_t stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};

struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "../include/linux/timex.h" 2






# 1 "../include/uapi/linux/param.h" 1




# 1 "./arch/arm/include/generated/uapi/asm/param.h" 1
# 1 "../include/asm-generic/param.h" 1




# 1 "../include/uapi/asm-generic/param.h" 1
# 6 "../include/asm-generic/param.h" 2
# 2 "./arch/arm/include/generated/uapi/asm/param.h" 2
# 6 "../include/uapi/linux/param.h" 2
# 64 "../include/linux/timex.h" 2

# 1 "../arch/arm/include/asm/timex.h" 1
# 12 "../arch/arm/include/asm/timex.h"
typedef unsigned long cycles_t;
# 66 "../include/linux/timex.h" 2
# 139 "../include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "../include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
void ntp_notify_cmos_timer(void);
# 14 "../include/linux/time32.h" 2



typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);
# 90 "../include/linux/time32.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec timespec64_to_timespec(const struct timespec64 ts64)
{
 struct timespec ret;

 ret.tv_sec = (time_t)ts64.tv_sec;
 ret.tv_nsec = ts64.tv_nsec;
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec_to_timespec64(const struct timespec ts)
{
 struct timespec64 ret;

 ret.tv_sec = ts.tv_sec;
 ret.tv_nsec = ts.tv_nsec;
 return ret;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec_equal(const struct timespec *a,
     const struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec_compare(const struct timespec *lhs, const struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec_valid(const struct timespec *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}
# 150 "../include/linux/time32.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec_to_ns(const struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec ns_to_timespec(const s64 nsec);
# 171 "../include/linux/time32.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mktime(const unsigned int year,
   const unsigned int mon, const unsigned int day,
   const unsigned int hour, const unsigned int min,
   const unsigned int sec)
{
 return mktime64(year, mon, day, hour, min, sec);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timeval_valid(const struct timeval *tv)
{

 if (tv->tv_sec < 0)
  return false;


 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;

 return true;
}
# 205 "../include/linux/time32.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timeval_to_ns(const struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timeval ns_to_timeval(const s64 nsec);
extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 74 "../include/linux/time.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 25 "../include/linux/ktime.h" 2
# 1 "../include/linux/jiffies.h" 1
# 11 "../include/linux/jiffies.h"
# 1 "./arch/arm/include/generated/uapi/asm/param.h" 1
# 12 "../include/linux/jiffies.h" 2
# 1 "./include/generated/timeconst.h" 1
# 13 "../include/linux/jiffies.h" 2
# 60 "../include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 80 "../include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << 7)), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << 7)), __section__(".data..cacheline_aligned"))) jiffies;


u64 get_jiffies_64(void);
# 190 "../include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 291 "../include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 100) - 1) / (1000L / 100);
}
# 364 "../include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 100) - 1) / (1000000L / 100);
}
# 411 "../include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long timespec_to_jiffies(const struct timespec *value)
{
 struct timespec64 ts = timespec_to_timespec64(*value);

 return timespec64_to_jiffies(&ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jiffies_to_timespec(const unsigned long jiffies,
           struct timespec *value)
{
 struct timespec64 ts;

 jiffies_to_timespec64(jiffies, &ts);
 *value = timespec64_to_timespec(ts);
}

extern unsigned long timeval_to_jiffies(const struct timeval *value);
extern void jiffies_to_timeval(const unsigned long jiffies,
          struct timeval *value);

extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x6 = (0L); typeof(delta) __UNIQUE_ID___y7 = (delta); ((__UNIQUE_ID___x6) > (__UNIQUE_ID___y7) ? (__UNIQUE_ID___x6) : (__UNIQUE_ID___y7)); })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x8 = (0L); typeof(delta) __UNIQUE_ID___y9 = (delta); ((__UNIQUE_ID___x8) > (__UNIQUE_ID___y9) ? (__UNIQUE_ID___x8) : (__UNIQUE_ID___y9)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "../include/linux/ktime.h" 2


typedef s64 ktime_t;
# 37 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 70 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
# 97 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 112 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 128 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 140 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}


extern s64 __ktime_divns(const ktime_t kt, s64 div);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 do { if (__builtin_expect(!!(div < 0), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/ktime.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "153" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (__builtin_constant_p(div) && !(div >> 32)) {
  s64 ns = kt;
  u64 tmp = ns < 0 ? -ns : ns;

  ({ uint32_t __base = (div); uint32_t __rem; (void)(((typeof((tmp)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (tmp) & (__base - 1); (tmp) >>= ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((4 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (tmp); (tmp) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (tmp); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ( __builtin_constant_p(__base) ? ( (__base) < 2 ? 0 : (__base) & (1ULL << 63) ? 63 : (__base) & (1ULL << 62) ? 62 : (__base) & (1ULL << 61) ? 61 : (__base) & (1ULL << 60) ? 60 : (__base) & (1ULL << 59) ? 59 : (__base) & (1ULL << 58) ? 58 : (__base) & (1ULL << 57) ? 57 : (__base) & (1ULL << 56) ? 56 : (__base) & (1ULL << 55) ? 55 : (__base) & (1ULL << 54) ? 54 : (__base) & (1ULL << 53) ? 53 : (__base) & (1ULL << 52) ? 52 : (__base) & (1ULL << 51) ? 51 : (__base) & (1ULL << 50) ? 50 : (__base) & (1ULL << 49) ? 49 : (__base) & (1ULL << 48) ? 48 : (__base) & (1ULL << 47) ? 47 : (__base) & (1ULL << 46) ? 46 : (__base) & (1ULL << 45) ? 45 : (__base) & (1ULL << 44) ? 44 : (__base) & (1ULL << 43) ? 43 : (__base) & (1ULL << 42) ? 42 : (__base) & (1ULL << 41) ? 41 : (__base) & (1ULL << 40) ? 40 : (__base) & (1ULL << 39) ? 39 : (__base) & (1ULL << 38) ? 38 : (__base) & (1ULL << 37) ? 37 : (__base) & (1ULL << 36) ? 36 : (__base) & (1ULL << 35) ? 35 : (__base) & (1ULL << 34) ? 34 : (__base) & (1ULL << 33) ? 33 : (__base) & (1ULL << 32) ? 32 : (__base) & (1ULL << 31) ? 31 : (__base) & (1ULL << 30) ? 30 : (__base) & (1ULL << 29) ? 29 : (__base) & (1ULL << 28) ? 28 : (__base) & (1ULL << 27) ? 27 : (__base) & (1ULL << 26) ? 26 : (__base) & (1ULL << 25) ? 25 : (__base) & (1ULL << 24) ? 24 : (__base) & (1ULL << 23) ? 23 : (__base) & (1ULL << 22) ? 22 : (__base) & (1ULL << 21) ? 21 : (__base) & (1ULL << 20) ? 20 : (__base) & (1ULL << 19) ? 19 : (__base) & (1ULL << 18) ? 18 : (__base) & (1ULL << 17) ? 17 : (__base) & (1ULL << 16) ? 16 : (__base) & (1ULL << 15) ? 15 : (__base) & (1ULL << 14) ? 14 : (__base) & (1ULL << 13) ? 13 : (__base) & (1ULL << 12) ? 12 : (__base) & (1ULL << 11) ? 11 : (__base) & (1ULL << 10) ? 10 : (__base) & (1ULL << 9) ? 9 : (__base) & (1ULL << 8) ? 8 : (__base) & (1ULL << 7) ? 7 : (__base) & (1ULL << 6) ? 6 : (__base) & (1ULL << 5) ? 5 : (__base) & (1ULL << 4) ? 4 : (__base) & (1ULL << 3) ? 3 : (__base) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ( __builtin_constant_p(___bits) ? ( (___bits) < 2 ? 0 : (___bits) & (1ULL << 63) ? 63 : (___bits) & (1ULL << 62) ? 62 : (___bits) & (1ULL << 61) ? 61 : (___bits) & (1ULL << 60) ? 60 : (___bits) & (1ULL << 59) ? 59 : (___bits) & (1ULL << 58) ? 58 : (___bits) & (1ULL << 57) ? 57 : (___bits) & (1ULL << 56) ? 56 : (___bits) & (1ULL << 55) ? 55 : (___bits) & (1ULL << 54) ? 54 : (___bits) & (1ULL << 53) ? 53 : (___bits) & (1ULL << 52) ? 52 : (___bits) & (1ULL << 51) ? 51 : (___bits) & (1ULL << 50) ? 50 : (___bits) & (1ULL << 49) ? 49 : (___bits) & (1ULL << 48) ? 48 : (___bits) & (1ULL << 47) ? 47 : (___bits) & (1ULL << 46) ? 46 : (___bits) & (1ULL << 45) ? 45 : (___bits) & (1ULL << 44) ? 44 : (___bits) & (1ULL << 43) ? 43 : (___bits) & (1ULL << 42) ? 42 : (___bits) & (1ULL << 41) ? 41 : (___bits) & (1ULL << 40) ? 40 : (___bits) & (1ULL << 39) ? 39 : (___bits) & (1ULL << 38) ? 38 : (___bits) & (1ULL << 37) ? 37 : (___bits) & (1ULL << 36) ? 36 : (___bits) & (1ULL << 35) ? 35 : (___bits) & (1ULL << 34) ? 34 : (___bits) & (1ULL << 33) ? 33 : (___bits) & (1ULL << 32) ? 32 : (___bits) & (1ULL << 31) ? 31 : (___bits) & (1ULL << 30) ? 30 : (___bits) & (1ULL << 29) ? 29 : (___bits) & (1ULL << 28) ? 28 : (___bits) & (1ULL << 27) ? 27 : (___bits) & (1ULL << 26) ? 26 : (___bits) & (1ULL << 25) ? 25 : (___bits) & (1ULL << 24) ? 24 : (___bits) & (1ULL << 23) ? 23 : (___bits) & (1ULL << 22) ? 22 : (___bits) & (1ULL << 21) ? 21 : (___bits) & (1ULL << 20) ? 20 : (___bits) & (1ULL << 19) ? 19 : (___bits) & (1ULL << 18) ? 18 : (___bits) & (1ULL << 17) ? 17 : (___bits) & (1ULL << 16) ? 16 : (___bits) & (1ULL << 15) ? 15 : (___bits) & (1ULL << 14) ? 14 : (___bits) & (1ULL << 13) ? 13 : (___bits) & (1ULL << 12) ? 12 : (___bits) & (1ULL << 11) ? 11 : (___bits) & (1ULL << 10) ? 10 : (___bits) & (1ULL << 9) ? 9 : (___bits) & (1ULL << 8) ? 8 : (___bits) & (1ULL << 7) ? 7 : (___bits) & (1ULL << 6) ? 6 : (___bits) & (1ULL << 5) ? 5 : (___bits) & (1ULL << 4) ? 4 : (___bits) & (1ULL << 3) ? 3 : (___bits) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (tmp); __rem = __n_lo - __res_lo * __base; } else if (__builtin_expect(!!(((tmp) >> 32) == 0), 1)) { __rem = (uint32_t)(tmp) % __base; (tmp) = (uint32_t)(tmp) / __base; } else __rem = __div64_32(&(tmp), __base); __rem; });
  return ns < 0 ? -tmp : tmp;
 } else {
  return __ktime_divns(kt, div);
 }
}
# 176 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 226 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt) {
  *ts = ns_to_timespec((kt));
  return true;
 } else {
  return false;
 }
}
# 245 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}
# 265 "../include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}


# 1 "../include/linux/timekeeping.h" 1








void timekeeping_init(void);
extern int timekeeping_suspended;


extern void update_process_times(int user);
extern void xtime_update(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "../include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);
# 234 "../include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 249 "../include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 262 "../include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);
extern int update_persistent_clock64(struct timespec64 now);
# 276 "../include/linux/ktime.h" 2
# 1 "../include/linux/timekeeping32.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_seconds(void)
{
 return ktime_get_real_seconds();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void getnstimeofday(struct timespec *ts)
{
 struct timespec64 ts64;

 ktime_get_real_ts64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_ts(struct timespec *ts)
{
 struct timespec64 ts64;

 ktime_get_ts64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void getrawmonotonic(struct timespec *ts)
{
 struct timespec64 ts64;

 ktime_get_raw_ts64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void getboottime(struct timespec *ts)
{
 struct timespec64 ts64;

 getboottime64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}
# 277 "../include/linux/ktime.h" 2
# 7 "../include/linux/timer.h" 2

# 1 "../include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "../include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 struct debug_obj_descr *descr;
};
# 55 "../include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};


extern void debug_object_init (void *addr, struct debug_obj_descr *descr);
extern void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr);
extern int debug_object_activate (void *addr, struct debug_obj_descr *descr);
extern void debug_object_deactivate(void *addr, struct debug_obj_descr *descr);
extern void debug_object_destroy (void *addr, struct debug_obj_descr *descr);
extern void debug_object_free (void *addr, struct debug_obj_descr *descr);
extern void debug_object_assert_init(void *addr, struct debug_obj_descr *descr);






extern void
debug_object_active_state(void *addr, struct debug_obj_descr *descr,
     unsigned int expect, unsigned int next);

extern void debug_objects_early_init(void);
extern void debug_objects_mem_init(void);
# 108 "../include/linux/debugobjects.h"
extern void debug_check_no_obj_freed(const void *address, unsigned long size);
# 9 "../include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;


 struct lockdep_map lockdep_map;

};
# 90 "../include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);


extern void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags, const char *name,
        struct lock_class_key *key);
# 147 "../include/linux/timer.h"
extern void destroy_timer_on_stack(struct timer_list *timer);
# 165 "../include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timer_pending(const struct timer_list * timer)
{
 return timer->entry.pprev != ((void *)0);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
extern void run_local_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "../include/linux/workqueue.h" 2








struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,

 WORK_STRUCT_STATIC_BIT = 4,
 WORK_STRUCT_COLOR_SHIFT = 5,




 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,

 WORK_STRUCT_STATIC = 1 << WORK_STRUCT_STATIC_BIT,
# 58 "../include/linux/workqueue.h"
 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 4,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 32 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;

 struct lockdep_map lockdep_map;

};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 155 "../include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_160(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_160(); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_165(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_165(); } while (0); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 207 "../include/linux/workqueue.h"
extern void __init_work(struct work_struct *work, int onstack);
extern void destroy_work_on_stack(struct work_struct *work);
extern void destroy_delayed_work_on_stack(struct delayed_work *work);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int work_static(struct work_struct *work)
{
 return *((unsigned long *)(&(work)->data)) & WORK_STRUCT_STATIC;
}
# 308 "../include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 341 "../include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 385 "../include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 407 "../include/linux/workqueue.h"
struct workqueue_struct *alloc_workqueue(const char *fmt,
      unsigned int flags,
      int max_active, ...);
# 436 "../include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 487 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 501 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 516 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 530 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 546 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 575 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 589 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 603 "../include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 619 "../include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);






void wq_watchdog_touch(int cpu);





int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init_early(void);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init(void);
# 17 "../include/linux/mm_types.h" 2

# 1 "../arch/arm/include/asm/mmu.h" 1






typedef struct {

 atomic64_t id;



 unsigned int vmalloc_seq;
 unsigned long sigpage;

 unsigned long vdso;


 unsigned long exec_fdpic_loadmap;
 unsigned long interp_fdpic_loadmap;

} mm_context_t;
# 19 "../include/linux/mm_types.h" 2







struct address_space;
struct mem_cgroup;
struct hmm;
# 69 "../include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   dma_addr_t dma_addr;
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;




     short int pages;
     short int pobjects;

    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
  };
  struct {
   unsigned long _compound_pad_1;
   unsigned long _compound_pad_2;
   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };

   spinlock_t *ptl;



  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
   unsigned long _zd_pad_1;
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 struct mem_cgroup *mem_cgroup;
# 213 "../include/linux/mm_types.h"
} ;
# 226 "../include/linux/mm_types.h"
struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};



struct vm_userfaultfd_ctx {
 struct userfaultfd_ctx *ctx;
};
# 278 "../include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;
 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;







 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 386 "../include/linux/mm_types.h"
  atomic_t mm_users;
# 395 "../include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;


  struct rw_semaphore mmap_sem;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;

  spinlock_t arg_lock;
  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(0 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;

  struct core_state *core_state;

  atomic_t membarrier_state;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 464 "../include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_mm *mmu_notifier_mm;
# 495 "../include/linux/mm_types.h"
  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;



  struct work_struct async_put_work;





 } ;





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
    unsigned long start, unsigned long end);
extern void tlb_finish_mmu(struct mmu_gather *tlb,
    unsigned long start, unsigned long end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 ({ union { typeof(((&mm->tlb_flush_pending)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&mm->tlb_flush_pending)->counter))) ((0)) }; __write_once_size(&(((&mm->tlb_flush_pending)->counter)), __u.__c, sizeof(((&mm->tlb_flush_pending)->counter))); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 586 "../include/linux/mm_types.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 598 "../include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 611 "../include/linux/mm_types.h"
 return ({ union { typeof((&mm->tlb_flush_pending)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); else __read_once_size_nocheck(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return ({ union { typeof((&mm->tlb_flush_pending)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); else __read_once_size_nocheck(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); do { } while (0); __u.__val; }) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 660 "../include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 700 "../include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "../include/linux/mmzone.h" 2
# 1 "../include/linux/page-flags.h" 1
# 99 "../include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,
# 134 "../include/linux/page-flags.h"
 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_private_2,


 PG_isolated = PG_reclaim,
};



struct page;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *compound_head(struct page *page)
{
 unsigned long head = ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); do { } while (0); __u.__val; });

 if (__builtin_expect(!!(head & 1), 0))
  return (struct page *) (head - 1);
 return page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); do { } while (0); __u.__val; }) & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PagePoisoned(const struct page *page)
{
 return page->flags == -1l;
}


void page_init_poison(struct page *page, size_t size);
# 310 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return test_bit(PG_locked, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "310" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "310" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "310" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "310" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "310" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "310" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return test_bit(PG_waiters, &({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { _set_bit(PG_waiters,&({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { _clear_bit(PG_waiters,&({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { __clear_bit(PG_waiters, &({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "311" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageError(struct page *page) { return test_bit(PG_error, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { _set_bit(PG_error,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { _clear_bit(PG_error,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return _test_and_clear_bit(PG_error,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "312" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return test_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "313" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { _set_bit(PG_referenced,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "313" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { _clear_bit(PG_referenced,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "313" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return _test_and_clear_bit(PG_referenced,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "314" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "315" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return test_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "316" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { _set_bit(PG_dirty,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "316" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { _clear_bit(PG_dirty,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "316" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return _test_and_set_bit(PG_dirty,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "316" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return _test_and_clear_bit(PG_dirty,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "316" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "317" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return test_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "318" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { _set_bit(PG_lru,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "318" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { _clear_bit(PG_lru,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "318" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "318" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return test_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "319" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { _set_bit(PG_active,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "319" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { _clear_bit(PG_active,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "319" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "319" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return _test_and_clear_bit(PG_active,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "320" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return test_bit(PG_workingset, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "321" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { _set_bit(PG_workingset,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "321" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { _clear_bit(PG_workingset,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "321" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return _test_and_clear_bit(PG_workingset,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "322" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return test_bit(PG_slab, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "323" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "323" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "323" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "323" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "323" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "323" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return test_bit(PG_slob_free, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "324" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "324" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "324" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "324" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "324" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "324" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return test_bit(PG_checked, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "325" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "325" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { _set_bit(PG_checked,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "325" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "325" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { _clear_bit(PG_checked,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "325" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "325" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return test_bit(PG_pinned, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "328" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "328" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { _set_bit(PG_pinned,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "328" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "328" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { _clear_bit(PG_pinned,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "328" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "328" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return _test_and_set_bit(PG_pinned,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "329" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "329" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return _test_and_clear_bit(PG_pinned,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "329" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "329" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return test_bit(PG_savepinned, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "330" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "330" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { _set_bit(PG_savepinned,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "330" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "330" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { _clear_bit(PG_savepinned,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "330" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "330" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return test_bit(PG_foreign, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "331" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "331" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { _set_bit(PG_foreign,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "331" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "331" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { _clear_bit(PG_foreign,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "331" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "331" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return test_bit(PG_reserved, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "333" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "333" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { _set_bit(PG_reserved,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "333" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "333" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { _clear_bit(PG_reserved,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "333" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "333" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "334" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "334" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { __set_bit(PG_reserved, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "335" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "335" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return test_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "336" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "336" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { _set_bit(PG_swapbacked,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "336" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "336" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { _clear_bit(PG_swapbacked,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "336" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "336" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "337" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "337" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "338" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "338" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return test_bit(PG_private, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "345" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { _set_bit(PG_private,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "345" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { _clear_bit(PG_private,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "345" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPagePrivate(struct page *page) { __set_bit(PG_private, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "345" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPagePrivate(struct page *page) { __clear_bit(PG_private, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "346" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return test_bit(PG_private_2, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "347" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { _set_bit(PG_private_2,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "347" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { _clear_bit(PG_private_2,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "347" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return _test_and_set_bit(PG_private_2,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "347" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return _test_and_clear_bit(PG_private_2,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "347" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return test_bit(PG_owner_priv_1, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "348" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { _set_bit(PG_owner_priv_1,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "348" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { _clear_bit(PG_owner_priv_1,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "348" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return _test_and_clear_bit(PG_owner_priv_1,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "349" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return test_bit(PG_writeback, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "355" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "355" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return _test_and_set_bit(PG_writeback,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "356" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "356" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return _test_and_clear_bit(PG_writeback,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "356" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "356" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return test_bit(PG_mappedtodisk, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "357" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "357" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { _set_bit(PG_mappedtodisk,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "357" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "357" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { _clear_bit(PG_mappedtodisk,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "357" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "357" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return test_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "360" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "360" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { _set_bit(PG_reclaim,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "360" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "360" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { _clear_bit(PG_reclaim,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "360" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "360" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return _test_and_clear_bit(PG_reclaim,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "361" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "361" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return test_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "362" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "362" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { _set_bit(PG_reclaim,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "362" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "362" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { _clear_bit(PG_reclaim,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "362" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "362" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return _test_and_clear_bit(PG_reclaim,&({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "363" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "363" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
# 376 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapCache(struct page *page)
{



 return PageSwapBacked(page) && test_bit(PG_swapcache, &page->flags);

}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapCache(struct page *page) { _set_bit(PG_swapcache,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "384" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "384" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapCache(struct page *page) { _clear_bit(PG_swapcache,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "385" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "385" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return test_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "390" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { _set_bit(PG_unevictable,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "390" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { _clear_bit(PG_unevictable,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "390" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "391" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return _test_and_clear_bit(PG_unevictable,&({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "392" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return test_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "395" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "395" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { _set_bit(PG_mlocked,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "395" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "395" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { _clear_bit(PG_mlocked,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "395" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "395" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "396" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "396" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return _test_and_set_bit(PG_mlocked,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "397" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "397" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return _test_and_clear_bit(PG_mlocked,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "397" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "397" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }
# 406 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageUncached(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageUncached(struct page *page) { }
# 415 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHWPoison(struct page *page) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool set_hwpoison_free_buddy_page(struct page *page)
{
 return 0;
}
# 452 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageAnon(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & 0x1) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 476 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageKsm(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}




u64 stable_page_flags(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUptodate(struct page *page)
{
 int ret;
 page = compound_head(page);
 ret = test_bit(PG_uptodate, &(page)->flags);
# 501 "../include/linux/page-flags.h"
 if (ret)
  __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "509" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 __set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "516" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);





 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 _set_bit(PG_uptodate,&page->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { _clear_bit(PG_uptodate,&({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "526" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(compound_head(page))), 0)) { dump_page(compound_head(page), "VM_BUG_ON_PAGE(" "PagePoisoned(compound_head(page))"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "526" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); compound_head(page); }); })->flags); }

int test_clear_page_writeback(struct page *page);
int __test_set_page_writeback(struct page *page, bool keep_write);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback(struct page *page)
{
 __test_set_page_writeback(page, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback_keepwrite(struct page *page)
{
 __test_set_page_writeback(page, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return test_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "546" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { __set_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "546" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "546" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { _clear_bit(PG_head,&({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "546" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) ((unsigned long)head + 1) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) (0) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}
# 573 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHeadHuge(const struct page *page) { return 0; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_huge_active(struct page *page)
{
 return 0;
}
# 681 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompound(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompoundMap(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransTail(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageDoubleMap(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageDoubleMap(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageDoubleMap(struct page *page) { }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestSetPageDoubleMap(struct page *page) { return 0; }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestClearPageDoubleMap(struct page *page) { return 0; }
# 711 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 736 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "736" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { do { if (__builtin_expect(!!(!PageBuddy(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageBuddy(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "736" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000080; }
# 745 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "745" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { do { if (__builtin_expect(!!(!PageOffline(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageOffline(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "745" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000100; }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageKmemcg(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageKmemcg(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "751" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageKmemcg(struct page *page) { do { if (__builtin_expect(!!(!PageKmemcg(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageKmemcg(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "751" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000200; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "756" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { do { if (__builtin_expect(!!(!PageTable(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageTable(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "756" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000400; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000800)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "761" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000800; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { do { if (__builtin_expect(!!(!PageGuard(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageGuard(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "761" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000800; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return test_bit(PG_isolated, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "765" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { __set_bit(PG_isolated, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "765" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { __clear_bit(PG_isolated, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "765" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); };





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "773" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return PageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "779" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 SetPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "785" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 __ClearPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/page-flags.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "791" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 ClearPageActive(page);
}
# 832 "../include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}
# 23 "../include/linux/mmzone.h" 2
# 41 "../include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 61 "../include/linux/mmzone.h"
 MIGRATE_CMA,


 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 80 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_migrate_movable(int mt)
{
 return __builtin_expect(!!((mt) == MIGRATE_CMA), 0) || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;
# 98 "../include/linux/mmzone.h"
struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_to_free_area(struct page *page, struct free_area *area,
        int migratetype)
{
 list_add(&page->lru, &area->free_list[migratetype]);
 area->nr_free++;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_to_free_area_tail(struct page *page, struct free_area *area,
      int migratetype)
{
 list_add_tail(&page->lru, &area->free_list[migratetype]);
 area->nr_free++;
}



void add_to_free_area_random(struct page *page, struct free_area *area,
  int migratetype);
# 132 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void move_to_free_area(struct page *page, struct free_area *area,
        int migratetype)
{
 list_move(&page->lru, &area->free_list[migratetype]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ union { typeof(head__->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head__->next), __u.__c, sizeof(head__->next)); else __read_once_size_nocheck(&(head__->next), __u.__c, sizeof(head__->next)); do { } while (0); __u.__val; }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); do { extern void __compiletime_assert_142(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) && !__builtin_types_compatible_p(typeof(*(pos__)), typeof(void))))) __compiletime_assert_142(); } while (0); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void del_page_from_free_area(struct page *page,
  struct free_area *area)
{
 list_del(&page->lru);
 __ClearPageBuddy(page);
 ((page)->private = (0));
 area->nr_free--;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;
# 168 "../include/linux/mmzone.h"
struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (7))));
# 190 "../include/linux/mmzone.h"
enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,
 NR_PAGETABLE,
 NR_KERNEL_STACK_KB,

 NR_BOUNCE,

 NR_ZSPAGES,

 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT,
 WORKINGSET_ACTIVATE,
 WORKINGSET_RESTORE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_ANON_THPS,
 NR_UNSTABLE_NFS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_VM_NODE_STAT_ITEMS
};
# 260 "../include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}

struct zone_reclaim_stat {
# 292 "../include/linux/mmzone.h"
 unsigned long recent_rotated[2];
 unsigned long recent_scanned[2];
};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];
 struct zone_reclaim_stat reclaim_stat;

 atomic_long_t inactive_age;

 unsigned long refaults;

 struct pglist_data *pgdat;

};
# 316 "../include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};






struct per_cpu_pages {
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];
};

struct per_cpu_pageset {
 struct per_cpu_pages pcp;





 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 378 "../include/linux/mmzone.h"
 ZONE_DMA,
# 393 "../include/linux/mmzone.h"
 ZONE_NORMAL,
# 403 "../include/linux/mmzone.h"
 ZONE_HIGHMEM,

 ZONE_MOVABLE,



 __MAX_NR_ZONES

};



struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 433 "../include/linux/mmzone.h"
 long lowmem_reserve[4];




 struct pglist_data *zone_pgdat;
 struct per_cpu_pageset *pageset;






 unsigned long *pageblock_flags;



 unsigned long zone_start_pfn;
# 487 "../include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

 const char *name;







 unsigned long nr_isolate_pageblock;







 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[12];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 546 "../include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_stat[0];
} __attribute__((__aligned__(1 << (7))));

enum pgdat_flags {
 PGDAT_CONGESTED,


 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 635 "../include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,







 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 670 "../include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 0) * 4) + 1];
};



extern struct page *mem_map;
# 687 "../include/linux/mmzone.h"
struct bootmem_data;
typedef struct pglist_data {
 struct zone node_zones[4];
 struct zonelist node_zonelists[MAX_ZONELISTS];
 int nr_zones;

 struct page *node_mem_map;

 struct page_ext *node_page_ext;
# 711 "../include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_classzone_idx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_classzone_idx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;





 unsigned long totalreserve_pages;
# 746 "../include/linux/mmzone.h"
 struct zone_padding _pad1_;
 spinlock_t lru_lock;
# 764 "../include/linux/mmzone.h"
 struct lruvec lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 787 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *node_lruvec(struct pglist_data *pgdat)
{
 return &pgdat->lruvec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}


# 1 "../include/linux/memory_hotplug.h" 1




# 1 "../include/linux/mmzone.h" 1
# 6 "../include/linux/memory_hotplug.h" 2

# 1 "../include/linux/notifier.h" 1
# 16 "../include/linux/notifier.h"
# 1 "../include/linux/srcu.h" 1
# 22 "../include/linux/srcu.h"
# 1 "../include/linux/rcu_segcblist.h" 1
# 18 "../include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
 long len_lazy;
};
# 64 "../include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];
 long len;
 long len_lazy;
};
# 23 "../include/linux/srcu.h" 2

struct srcu_struct;



int __init_srcu_struct(struct srcu_struct *ssp, const char *name,
         struct lock_class_key *key);
# 49 "../include/linux/srcu.h"
# 1 "../include/linux/srcutree.h" 1
# 14 "../include/linux/srcutree.h"
# 1 "../include/linux/rcu_node_tree.h" 1
# 15 "../include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock __attribute__((__aligned__(1 << (7))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[1];
 struct srcu_node *level[1 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;

 struct lockdep_map dep_map;

};
# 137 "../include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "../include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
# 82 "../include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 if (!debug_lockdep_rcu_enabled())
  return 1;
 return lock_is_held(&ssp->dep_map);
}
# 150 "../include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 rcu_lock_acquire(&(ssp)->dep_map);
 return retval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 176 "../include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/srcu.h", 179); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 rcu_lock_release(&(ssp)->dep_map);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 200 "../include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "../include/linux/notifier.h" 2
# 49 "../include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "../include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 144 "../include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
# 194 "../include/linux/notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 238 "../include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 8 "../include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct resource;
struct vmem_altmap;
# 244 "../include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mhp_notimplemented(const char *func)
{
 printk("\001" "4" "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", func);
 dump_stack();
 return -38;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_online_mems(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_online_mems(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_hotplug_begin(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_hotplug_done(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool movable_node_is_enabled(void)
{
 return false;
}
# 307 "../include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_init(struct pglist_data *pgdat) {}
# 321 "../include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_mem_section_removable(unsigned long pfn,
     unsigned long nr_pages)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void try_offline_node(int nid) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int remove_memory(int nid, u64 start, u64 size)
{
 return -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __remove_memory(int nid, u64 start, u64 size) {}


extern void __attribute__((__section__(".ref.text"))) __attribute__((__noinline__)) free_area_init_core_hotplug(int nid);
extern int __add_memory(int nid, u64 start, u64 size);
extern int add_memory(int nid, u64 start, u64 size);
extern int add_memory_resource(int nid, struct resource *resource);
extern void move_pfn_range_to_zone(struct zone *zone, unsigned long start_pfn,
  unsigned long nr_pages, struct vmem_altmap *altmap);
extern bool is_memblock_offlined(struct memory_block *mem);
extern int sparse_add_section(int nid, unsigned long pfn,
  unsigned long nr_pages, struct vmem_altmap *altmap);
extern void sparse_remove_section(struct mem_section *ms,
  unsigned long pfn, unsigned long nr_pages,
  unsigned long map_offset, struct vmem_altmap *altmap);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);
extern bool allow_online_pfn_range(int nid, unsigned long pfn, unsigned long nr_pages,
  int online_type);
extern struct zone *zone_for_pfn_range(int online_type, int nid, unsigned start_pfn,
  unsigned long nr_pages);
# 803 "../include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type classzone_idx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int classzone_idx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}

extern unsigned long lruvec_lru_size(struct lruvec *lruvec, enum lru_list lru, int zone_idx);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memory_present(int nid, unsigned long start, unsigned long end) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memblocks_present(void) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int local_memory_node(int node_id) { return node_id; };
# 864 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}
# 886 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_to_nid(struct zone *zone)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_set_nid(struct zone *zone, int nid) {}


extern int movable_zone;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_movable_is_highmem(void)
{



 return (ZONE_MOVABLE - 1) == ZONE_HIGHMEM;

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem_idx(enum zone_type idx)
{

 return (idx == ZONE_HIGHMEM ||
  (idx == ZONE_MOVABLE && zone_movable_is_highmem()));



}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem(struct zone *zone)
{

 return is_highmem_idx(((zone) - (zone)->zone_pgdat->node_zones));



}


struct ctl_table;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_boost_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[4];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
extern char numa_zonelist_order[];




extern struct pglist_data contig_page_data;
# 967 "../include/linux/mmzone.h"
extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 999 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1030 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1055 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1105 "../include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long early_pfn_to_nid(unsigned long pfn)
{
 do { extern void __compiletime_assert_1107(void) ; if (!(!(0))) __compiletime_assert_1107(); } while (0);
 return 0;
}
# 1390 "../include/linux/mmzone.h"
struct mminit_pfnnid_cache {
 unsigned long last_start;
 unsigned long last_end;
 int last_nid;
};





void memory_present(int nid, unsigned long start, unsigned long end);
# 1435 "../include/linux/mmzone.h"
bool memmap_valid_within(unsigned long pfn,
     struct page *page, struct zone *zone);
# 7 "../include/linux/gfp.h" 2


# 1 "../include/linux/topology.h" 1
# 33 "../include/linux/topology.h"
# 1 "../include/linux/smp.h" 1
# 17 "../include/linux/smp.h"
typedef void (*smp_call_func_t)(void *info);
struct __call_single_data {
 struct llist_node llist;
 smp_call_func_t func;
 void *info;
 unsigned int flags;
};


typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);




void on_each_cpu(smp_call_func_t func, void *info, int wait);





void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,
  void *info, bool wait);






void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags);

void on_each_cpu_cond_mask(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, call_single_data_t *csd);








# 1 "../arch/arm/include/asm/smp.h" 1
# 20 "../arch/arm/include/asm/smp.h"
struct seq_file;




extern void show_ipi_list(struct seq_file *, int);




           void do_IPI(int ipinr, struct pt_regs *regs);




void handle_IPI(int ipinr, struct pt_regs *regs);




extern void smp_init_cpus(void);





extern void set_smp_cross_call(void (*)(const struct cpumask *, unsigned int));





           void secondary_start_kernel(void);





struct secondary_data {
 union {
  struct mpu_rgn_info *mpu_rgn_info;
  u64 pgdir;
 };
 unsigned long swapper_pg_dir;
 void *stack;
};
extern struct secondary_data secondary_data;
extern void secondary_startup(void);
extern void secondary_startup_arm(void);

extern int __cpu_disable(void);

extern void __cpu_die(unsigned int cpu);

extern void arch_send_call_function_single_ipi(int cpu);
extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);
extern void arch_send_wakeup_ipi_mask(const struct cpumask *mask);

extern int register_ipi_completion(struct completion *completion, int cpu);

struct smp_operations {




 void (*smp_init_cpus)(void);



 void (*smp_prepare_cpus)(unsigned int max_cpus);




 void (*smp_secondary_init)(unsigned int cpu);




 int (*smp_boot_secondary)(unsigned int cpu, struct task_struct *idle);

 int (*cpu_kill)(unsigned int cpu);
 void (*cpu_die)(unsigned int cpu);
 bool (*cpu_can_disable)(unsigned int cpu);
 int (*cpu_disable)(unsigned int cpu);


};

struct of_cpu_method {
 const char *method;
 const struct smp_operations *ops;
};
# 121 "../arch/arm/include/asm/smp.h"
extern void smp_set_ops(const struct smp_operations *);
# 69 "../include/linux/smp.h" 2
# 78 "../include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_nr_cpu_ids(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 229 "../include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_enable_nonboot_cpus_begin(void);
extern void arch_enable_nonboot_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 34 "../include/linux/topology.h" 2
# 1 "../include/linux/percpu.h" 1
# 13 "../include/linux/percpu.h"
# 1 "../arch/arm/include/asm/percpu.h" 1
# 39 "../arch/arm/include/asm/percpu.h"
# 1 "../include/asm-generic/percpu.h" 1






# 1 "../include/linux/percpu-defs.h" 1
# 309 "../include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __this_cpu_preempt_check(const char *op) { }
# 8 "../include/asm-generic/percpu.h" 2
# 19 "../include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4];
# 40 "../arch/arm/include/asm/percpu.h" 2
# 14 "../include/linux/percpu.h" 2
# 65 "../include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);
# 126 "../include/linux/percpu.h"
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_per_cpu_areas(void);


extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 146 "../include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 35 "../include/linux/topology.h" 2
# 1 "../arch/arm/include/asm/topology.h" 1








struct cputopo_arm {
 int thread_id;
 int core_id;
 int socket_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
};

extern struct cputopo_arm cpu_topology[4];






void init_cpu_topology(void);
void store_cpu_topology(unsigned int cpuid);
const struct cpumask *cpu_coregroup_mask(int cpu);


# 1 "../include/linux/arch_topology.h" 1
# 11 "../include/linux/arch_topology.h"
void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".discard"), unused)) char __pcpu_scope_cpu_scale; extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

struct sched_domain;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_scale)))) *)((&(cpu_scale)))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".discard"), unused)) char __pcpu_scope_freq_scale; extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) freq_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(freq_scale)))) *)((&(freq_scale)))); (typeof((typeof(*((&(freq_scale)))) *)((&(freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}
# 29 "../arch/arm/include/asm/topology.h" 2
# 46 "../arch/arm/include/asm/topology.h"
# 1 "../include/asm-generic/topology.h" 1
# 47 "../arch/arm/include/asm/topology.h" 2
# 36 "../include/linux/topology.h" 2
# 45 "../include/linux/topology.h"
int topology_update_cpu_topology(void);
# 102 "../include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_node_id(void)
{
 return ((void)((current_thread_info()->cpu)),0);
}
# 162 "../include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_to_mem_node(int node)
{
 return node;
}
# 204 "../include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_smt_mask(int cpu)
{
 return (&cpu_topology[cpu].thread_sibling);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return ((void)((void)(cpu),0), ((const struct cpumask *)&__cpu_online_mask));
}
# 10 "../include/linux/gfp.h" 2

struct vm_area_struct;
# 308 "../include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfpflags_to_migratetype(const gfp_t gfp_flags)
{
 (void)({ int __ret_warn_on = !!((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/gfp.h", 310); __builtin_expect(!!(__ret_warn_on), 0); });
 do { extern void __compiletime_assert_311(void) ; if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_311(); } while (0);
 do { extern void __compiletime_assert_312(void) ; if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_312(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 418 "../include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_HIGHMEM << 0x02u * 2) | (ZONE_NORMAL << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_NORMAL << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 do { if (__builtin_expect(!!((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/gfp.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "425" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return z;
}
# 436 "../include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_zonelist(gfp_t flags)
{




 return ZONELIST_FALLBACK;
}
# 454 "../include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (&contig_page_data)->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,
       nodemask_t *nodemask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
 return __alloc_pages_nodemask(gfp_mask, order, preferred_nid, ((void *)0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 do { if (__builtin_expect(!!(nid < 0 || nid >= (1 << 0)), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/gfp.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "483" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 (void)({ int __ret_warn_on = !!((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/gfp.h", 484); __builtin_expect(!!(__ret_warn_on), 0); });

 return __alloc_pages(gfp_mask, order, nid);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}
# 530 "../include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_unref_page(struct page *page);
extern void free_unref_page_list(struct list_head *list);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask);
extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 571 "../include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);


extern bool pm_suspended_storage(void);
# 590 "../include/linux/gfp.h"
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype, gfp_t gfp_mask);

void free_contig_range(unsigned long pfn, unsigned int nr_pages);



extern void init_cma_reserved_pageblock(struct page *page);
# 15 "../include/linux/xarray.h" 2
# 52 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_value(unsigned long v)
{
 ({ int __ret_warn_on = !!((long)v < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/xarray.h", 54); __builtin_expect(!!(__ret_warn_on), 0); });
 return (void *)((v << 1) | 1);
}
# 65 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_zero(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
}
# 199 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_err(const void *entry)
{
 return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0);

}
# 217 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 236 "../include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};






typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 292 "../include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 347 "../include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 374 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { spinlock_check(&xa->xa_lock); do { static struct lock_class_key __key; __raw_spin_lock_init((&(&xa->xa_lock)->rlock), "&(&xa->xa_lock)->rlock", &__key); } while (0); } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 389 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 401 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 414 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (23 + 1)) << ( unsigned)(mark)));
}
# 519 "../include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 546 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 572 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 597 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 621 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 647 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 674 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 701 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 730 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 759 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 788 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 817 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 846 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 875 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 908 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 941 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 974 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1004 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1022 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1040 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1055 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
}
# 1087 "../include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (32) - 1) / (32))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (32) - 1) / (32))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1127 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ union { typeof((xa->xa_head)) __val; char __c[1]; } __u; if (1) __read_once_size(&((xa->xa_head)), __u.__c, sizeof((xa->xa_head))); else __read_once_size_nocheck(&((xa->xa_head)), __u.__c, sizeof((xa->xa_head))); do { } while (0); __u.__val; }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("../include/linux/xarray.h", 1130, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(xa->xa_head)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("../include/linux/xarray.h", 1137, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ union { typeof((node->slots[offset])) __val; char __c[1]; } __u; if (1) __read_once_size(&((node->slots[offset])), __u.__c, sizeof((node->slots[offset]))); else __read_once_size_nocheck(&((node->slots[offset])), __u.__c, sizeof((node->slots[offset]))); do { } while (0); __u.__val; }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("../include/linux/xarray.h", 1146, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(node->slots[offset])) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("../include/linux/xarray.h", 1155, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ union { typeof((node->parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((node->parent)), __u.__c, sizeof((node->parent))); else __read_once_size_nocheck(&((node->parent)), __u.__c, sizeof((node->parent))); do { } while (0); __u.__val; }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("../include/linux/xarray.h", 1163, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(node->parent)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("../include/linux/xarray.h", 1171, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(node->parent)) *)((node->parent))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_sibling(const void *entry)
{
 return 0 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1224 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_retry(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1252 "../include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);
# 1271 "../include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1350 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1364 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1430 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1447 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);
# 1487 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (node)
  return xa_entry(xas->xa, node, xas->xa_offset);
 return xa_head(xas->xa);
}
# 1505 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{






 do { if (__builtin_expect(!!(order > 0), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/xarray.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "1526" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 xas_set(xas, index);

}
# 1539 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1555 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))), 0))

  return xas_find(xas, max);

 do {
  if (__builtin_expect(!!(xas->xa_index >= max), 0))
   return xas_find(xas, max);
  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 32) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return _find_next_bit_be(addr,(1UL << (0 ? 4 : 6)),offset);
}
# 1612 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 unsigned int offset;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return ((void *)0);
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 return xa_entry(xas->xa, node, offset);
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1689 "../include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1708 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0))

  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1737 "../include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))

  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 19 "../include/linux/radix-tree.h" 2
# 43 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 74 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == ((void *)0);
}
# 94 "../include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 165 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ union { typeof((*slot)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*slot)), __u.__c, sizeof((*slot))); else __read_once_size_nocheck(&((*slot)), __u.__c, sizeof((*slot))); do { } while (0); __u.__val; }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((0) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("../include/linux/radix-tree.h", 167, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 179 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(treelock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("../include/linux/radix-tree.h", 182, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 192 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radix_tree_preload_end(void)
{
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 268 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 279 "../include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 297 "../include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 310 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 328 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_find(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, 0);
}
# 345 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 369 "../include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 403 "../include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 return slot;
}
# 16 "../include/linux/idr.h" 2



struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u; if (1) __read_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); else __read_once_size_nocheck(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); do { } while (0); __u.__val; });
}
# 79 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u = { .__val = ( typeof(idr->idr_next)) (val) }; __write_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); __u.__val; });
}
# 112 "../include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((23 + 1)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_preload_end(void)
{
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}
# 240 "../include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "../include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 270 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 287 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 304 "../include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (23 + 1)) << ( unsigned)((( xa_mark_t)0U)))))));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 14 "../include/linux/kernfs.h" 2



# 1 "../include/linux/uidgid.h" 1
# 16 "../include/linux/uidgid.h"
# 1 "../include/linux/highuid.h" 1
# 35 "../include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "../include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "../include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "../include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 18 "../include/linux/kernfs.h" 2


struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};




enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 74 "../include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};


union kernfs_node_id {
 struct {






  u32 ino;
  u32 generation;
 };
 u64 id;
};
# 131 "../include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;

 struct lockdep_map dep_map;







 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;

 union kernfs_node_id id;
 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 171 "../include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 next_generation;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 238 "../include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 254 "../include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);


 struct lock_class_key lockdep_key;

};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}
# 302 "../include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/kernfs.h", 304); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(!(({ union { typeof((&kn->dir.children)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); else __read_once_size_nocheck(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/kernfs.h", 305); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_get_node_by_id(struct kernfs_root *root,
 const union kernfs_node_id *id);
# 514 "../include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, kuid_t uid, kgid_t gid,
        loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);


 key = (struct lock_class_key *)&ops->lockdep_key;

 return __kernfs_create_file(parent, name, mode, uid, gid,
        size, ops, priv, ns, key);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode,
         (kuid_t){ 0 }, (kgid_t){ 0 },
         size, ops, priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}
# 17 "../include/linux/sysfs.h" 2




# 1 "../include/linux/kobject_ns.h" 1
# 19 "../include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "../include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "../include/linux/sysfs.h" 2
# 1 "../include/linux/stat.h" 1





# 1 "../arch/arm/include/uapi/asm/stat.h" 1




struct __old_kernel_stat {
 unsigned short st_dev;
 unsigned short st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;
 unsigned short st_rdev;
 unsigned long st_size;
 unsigned long st_atime;
 unsigned long st_mtime;
 unsigned long st_ctime;
};



struct stat {

 unsigned short st_dev;
 unsigned short __pad1;



 unsigned long st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;

 unsigned short st_rdev;
 unsigned short __pad2;



 unsigned long st_size;
 unsigned long st_blksize;
 unsigned long st_blocks;
 unsigned long st_atime;
 unsigned long st_atime_nsec;
 unsigned long st_mtime;
 unsigned long st_mtime_nsec;
 unsigned long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned long __unused4;
 unsigned long __unused5;
};






struct stat64 {
 unsigned long long st_dev;
 unsigned char __pad0[4];


 unsigned long __st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;

 unsigned long st_uid;
 unsigned long st_gid;

 unsigned long long st_rdev;
 unsigned char __pad3[4];

 long long st_size;
 unsigned long st_blksize;
 unsigned long long st_blocks;

 unsigned long st_atime;
 unsigned long st_atime_nsec;

 unsigned long st_mtime;
 unsigned long st_mtime_nsec;

 unsigned long st_ctime;
 unsigned long st_ctime_nsec;

 unsigned long long st_ino;
};
# 7 "../include/linux/stat.h" 2
# 1 "../include/uapi/linux/stat.h" 1
# 56 "../include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "../include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 8 "../include/linux/stat.h" 2
# 24 "../include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;







 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
};
# 23 "../include/linux/sysfs.h" 2


struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;

 bool ignore_lockdep:1;
 struct lock_class_key *key;
 struct lock_class_key skey;

};
# 84 "../include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 158 "../include/linux/sysfs.h"
struct file;
struct vm_area_struct;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 214 "../include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int __compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
          struct kobject *target_kobj,
          const char *target_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}
# 518 "../include/linux/sysfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "../include/linux/kobject.h" 2


# 1 "../include/linux/kref.h" 1
# 17 "../include/linux/kref.h"
# 1 "../include/linux/refcount.h" 1








struct mutex;
# 19 "../include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;
# 30 "../include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_set(refcount_t *r, unsigned int n)
{
 ({ union { typeof(((&r->refs)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&r->refs)->counter))) ((n)) }; __write_once_size(&(((&r->refs)->counter)), __u.__c, sizeof(((&r->refs)->counter))); __u.__val; });
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int refcount_read(const refcount_t *r)
{
 return ({ union { typeof((&r->refs)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&r->refs)->counter), __u.__c, sizeof((&r->refs)->counter)); else __read_once_size_nocheck(&((&r->refs)->counter), __u.__c, sizeof((&r->refs)->counter)); do { } while (0); __u.__val; });
}

extern __attribute__((__warn_unused_result__)) bool refcount_add_not_zero_checked(unsigned int i, refcount_t *r);
extern void refcount_add_checked(unsigned int i, refcount_t *r);

extern __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero_checked(refcount_t *r);
extern void refcount_inc_checked(refcount_t *r);

extern __attribute__((__warn_unused_result__)) bool refcount_sub_and_test_checked(unsigned int i, refcount_t *r);

extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_test_checked(refcount_t *r);
extern void refcount_dec_checked(refcount_t *r);
# 111 "../include/linux/refcount.h"
extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 18 "../include/linux/kref.h" 2

struct kref {
 refcount_t refcount;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_get(struct kref *kref)
{
 refcount_inc_checked(&kref->refcount);
}
# 62 "../include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test_checked(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "../include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero_checked(&kref->refcount);
}
# 24 "../include/linux/kobject.h" 2
# 37 "../include/linux/kobject.h"
extern char uevent_helper[];



extern u64 uevent_seqnum;
# 53 "../include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
 KOBJ_MAX
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;

 struct delayed_work release;

 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create(void);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 132 "../include/linux/kobject.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kobject_has_children(struct kobject *kobj)
{
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/kobject.h", 134); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[32];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 193 "../include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_209(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_209(); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 18 "../include/linux/of.h" 2
# 1 "../include/linux/mod_devicetable.h" 1
# 13 "../include/linux/mod_devicetable.h"
# 1 "../include/linux/uuid.h" 1
# 11 "../include/linux/uuid.h"
# 1 "../include/uapi/linux/uuid.h" 1
# 23 "../include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "../include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "../include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "../include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 14 "../include/linux/mod_devicetable.h" 2
typedef unsigned long kernel_ulong_t;
# 38 "../include/linux/mod_devicetable.h"
struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 121 "../include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 166 "../include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};





struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};

struct sdw_device_id {
 __u16 mfg_id;
 __u16 part_id;
 kernel_ulong_t driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 340 "../include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 32 + 1];
 kernel_ulong_t keybit[0x2ff / 32 + 1];
 kernel_ulong_t relbit[0x0f / 32 + 1];
 kernel_ulong_t absbit[0x3f / 32 + 1];
 kernel_ulong_t mscbit[0x07 / 32 + 1];
 kernel_ulong_t ledbit[0x0f / 32 + 1];
 kernel_ulong_t sndbit[0x07 / 32 + 1];
 kernel_ulong_t ffbit[0x7f / 32 + 1];
 kernel_ulong_t swbit[0x0f / 32 + 1];
 kernel_ulong_t propbit[0x1f / 32 + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 391 "../include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 413 "../include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 427 "../include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 uuid_le guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct pci_epf_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 477 "../include/linux/mod_devicetable.h"
struct i3c_device_id {
 __u8 match_flags;
 __u8 dcr;
 __u16 manuf_id;
 __u16 part_id;
 __u16 extra_info;

 const void *data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct slim_device_id {
 __u16 manf_id, prod_code;
 __u16 dev_index, instance;


 kernel_ulong_t driver_data;
};




struct apr_device_id {
 char name[32];
 __u32 domain_id;
 __u32 svc_id;
 __u32 svc_version;
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_PRODUCT_SKU,
 DMI_PRODUCT_FAMILY,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
 DMI_OEM_STRING,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 582 "../include/linux/mod_devicetable.h"
struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 609 "../include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 638 "../include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 662 "../include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 683 "../include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 708 "../include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 729 "../include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 753 "../include/linux/mod_devicetable.h"
struct fsl_mc_device_id {
 __u16 vendor;
 const char obj_type[16];
};
# 771 "../include/linux/mod_devicetable.h"
struct tb_service_id {
 __u32 match_flags;
 char protocol_key[8 + 1];
 __u32 protocol_id;
 __u32 protocol_version;
 __u32 protocol_revision;
 kernel_ulong_t driver_data;
};
# 795 "../include/linux/mod_devicetable.h"
struct typec_device_id {
 __u16 svid;
 __u8 mode;
 kernel_ulong_t driver_data;
};






struct tee_client_device_id {
 uuid_t uuid;
};
# 818 "../include/linux/mod_devicetable.h"
struct wmi_device_id {
 const char guid_string[36 +1];
 const void *context;
};
# 19 "../include/linux/of.h" 2



# 1 "../include/linux/property.h" 1
# 17 "../include/linux/property.h"
struct device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_MAX,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

struct fwnode_handle *dev_fwnode(struct device *dev);

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_device_is_available(const struct fwnode_handle *fwnode);
bool fwnode_property_present(const struct fwnode_handle *fwnode,
        const char *propname);
int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(const struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(const struct fwnode_handle *fwnode,
     const char *propname, const char *string);
int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
           const char *prop, const char *nargs_prop,
           unsigned int nargs, unsigned int index,
           struct fwnode_reference_args *args);

struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *fwnode,
         const char *name,
         unsigned int index);

struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_parent(
 struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
struct fwnode_handle *fwnode_get_next_available_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
# 99 "../include/linux/property.h"
struct fwnode_handle *device_get_next_child_node(
 struct device *dev, struct fwnode_handle *child);





struct fwnode_handle *fwnode_get_named_child_node(
 const struct fwnode_handle *fwnode, const char *childname);
struct fwnode_handle *device_get_named_child_node(struct device *dev,
        const char *childname);

struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *fwnode);
void fwnode_handle_put(struct fwnode_handle *fwnode);

int fwnode_irq_get(struct fwnode_handle *fwnode, unsigned int index);

unsigned int device_get_child_node_count(struct device *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u8(struct device *dev, const char *propname)
{
 return device_property_read_u8_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u16(struct device *dev, const char *propname)
{
 return device_property_read_u16_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u32(struct device *dev, const char *propname)
{
 return device_property_read_u32_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u64(struct device *dev, const char *propname)
{
 return device_property_read_u64_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fwnode_property_read_bool(const struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u8(const struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u16(const struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u32(const struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u64(const struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u8(const struct fwnode_handle *fwnode,
        const char *propname)
{
 return fwnode_property_read_u8_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u16(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u16_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u32(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u32_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u64(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u64_array(fwnode, propname, ((void *)0), 0);
}
# 231 "../include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_array;
 enum dev_prop_type type;
 union {
  union {
   const u8 *u8_data;
   const u16 *u16_data;
   const u32 *u32_data;
   const u64 *u64_data;
   const char * const *str;
  } pointer;
  union {
   u8 u8_data;
   u16 u16_data;
   u32 u32_data;
   u64 u64_data;
   const char *str;
  } value;
 };
};
# 317 "../include/linux/property.h"
struct property_entry *
property_entries_dup(const struct property_entry *properties);

void property_entries_free(const struct property_entry *properties);

int device_add_properties(struct device *dev,
     const struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

const void *device_get_match_data(struct device *dev);

int device_get_phy_mode(struct device *dev);

void *device_get_mac_address(struct device *dev, char *addr, int alen);

int fwnode_get_phy_mode(struct fwnode_handle *fwnode);
void *fwnode_get_mac_address(struct fwnode_handle *fwnode,
        char *addr, int alen);
struct fwnode_handle *fwnode_graph_get_next_endpoint(
 const struct fwnode_handle *fwnode, struct fwnode_handle *prev);
struct fwnode_handle *
fwnode_graph_get_port_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port_parent(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_endpoint(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *
fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port,
        u32 endpoint);
# 366 "../include/linux/property.h"
struct fwnode_handle *
fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *fwnode,
    u32 port, u32 endpoint, unsigned long flags);





int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
    struct fwnode_endpoint *endpoint);




struct software_node;







struct software_node_ref_args {
 const struct software_node *node;
 unsigned int nargs;
 u64 args[8];
};







struct software_node_reference {
 const char *name;
 unsigned int nrefs;
 const struct software_node_ref_args *refs;
};
# 413 "../include/linux/property.h"
struct software_node {
 const char *name;
 const struct software_node *parent;
 const struct property_entry *properties;
 const struct software_node_reference *references;
};

bool is_software_node(const struct fwnode_handle *fwnode);
const struct software_node *to_software_node(struct fwnode_handle *fwnode);
struct fwnode_handle *software_node_fwnode(const struct software_node *node);

int software_node_register_nodes(const struct software_node *nodes);
void software_node_unregister_nodes(const struct software_node *nodes);

int software_node_register(const struct software_node *node);

int software_node_notify(struct device *dev, unsigned long action);

struct fwnode_handle *
fwnode_create_software_node(const struct property_entry *properties,
       const struct fwnode_handle *parent);
void fwnode_remove_software_node(struct fwnode_handle *fwnode);
# 23 "../include/linux/of.h" 2



# 1 "./arch/arm/include/generated/uapi/asm/errno.h" 1
# 27 "../include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;

 unsigned long _flags;





 struct bin_attribute attr;

};





struct device_node {
 const char *name;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;

 struct kobject kobj;

 unsigned long _flags;
 void *data;




};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
extern const struct fwnode_operations of_fwnode_ops;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_init(struct device_node *node)
{

 kobject_init(&node->kobj, &of_node_ktype);

 node->fwnode.ops = &of_fwnode_ops;
}
# 121 "../include/linux/of.h"
extern struct device_node *of_node_get(struct device_node *node);
extern void of_node_put(struct device_node *node);
# 133 "../include/linux/of.h"
extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 153 "../include/linux/of.h"
void of_core_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_of_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
}
# 178 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_have_populated_dt(void)
{
 return of_root != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_node_is_root(const struct device_node *node)
{
 return node && (node->parent == ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_check_flag(struct device_node *n, unsigned long flag)
{
 return test_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return _test_and_set_bit(flag,&n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_set_flag(struct device_node *n, unsigned long flag)
{
 _set_bit(flag,&n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
 _clear_bit(flag,&n->_flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_check_flag(struct property *p, unsigned long flag)
{
 return test_bit(flag, &p->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_property_set_flag(struct property *p, unsigned long flag)
{
 _set_bit(flag,&p->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_property_clear_flag(struct property *p, unsigned long flag)
{
 _clear_bit(flag,&p->_flags);
}


extern struct device_node *__of_find_all_nodes(struct device_node *prev);
extern struct device_node *of_find_all_nodes(struct device_node *prev);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 of_read_number(const __be32 *cell, int size)
{
 u64 r = 0;
 for (; size--; cell++)
  r = (r << 32) | (( __u32)(__be32)(*cell));
 return r;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long of_read_ulong(const __be32 *cell, int size)
{

 return of_read_number(cell, size);
}
# 256 "../include/linux/of.h"
extern bool of_node_name_eq(const struct device_node *np, const char *name);
extern bool of_node_name_prefix(const struct device_node *np, const char *prefix);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *of_node_full_name(const struct device_node *np)
{
 return np ? np->full_name : "<no-node>";
}




extern struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name);
extern struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type);
extern struct device_node *of_find_compatible_node(struct device_node *from,
 const char *type, const char *compat);
extern struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match);

extern struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_find_node_by_path(const char *path)
{
 return of_find_node_opts_by_path(path, ((void *)0));
}

extern struct device_node *of_find_node_by_phandle(phandle handle);
extern struct device_node *of_get_parent(const struct device_node *node);
extern struct device_node *of_get_next_parent(struct device_node *node);
extern struct device_node *of_get_next_child(const struct device_node *node,
          struct device_node *prev);
extern struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev);

extern struct device_node *of_get_compatible_child(const struct device_node *parent,
     const char *compatible);
extern struct device_node *of_get_child_by_name(const struct device_node *node,
     const char *name);


extern struct device_node *of_find_next_cache_node(const struct device_node *);
extern int of_find_last_cache_level(unsigned int cpu);
extern struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name);

extern struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp);
extern int of_property_count_elems_of_size(const struct device_node *np,
    const char *propname, int elem_size);
extern int of_property_read_u32_index(const struct device_node *np,
           const char *propname,
           u32 index, u32 *out_value);
extern int of_property_read_u64_index(const struct device_node *np,
           const char *propname,
           u32 index, u64 *out_value);
extern int of_property_read_variable_u8_array(const struct device_node *np,
     const char *propname, u8 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u16_array(const struct device_node *np,
     const char *propname, u16 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u32_array(const struct device_node *np,
     const char *propname,
     u32 *out_values,
     size_t sz_min,
     size_t sz_max);
extern int of_property_read_u64(const struct device_node *np,
    const char *propname, u64 *out_value);
extern int of_property_read_variable_u64_array(const struct device_node *np,
     const char *propname,
     u64 *out_values,
     size_t sz_min,
     size_t sz_max);

extern int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string);
extern int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string);
extern int of_property_read_string_helper(const struct device_node *np,
           const char *propname,
           const char **out_strs, size_t sz, int index);
extern int of_device_is_compatible(const struct device_node *device,
       const char *);
extern int of_device_compatible_match(struct device_node *device,
          const char *const *compat);
extern bool of_device_is_available(const struct device_node *device);
extern bool of_device_is_big_endian(const struct device_node *device);
extern const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp);
extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
extern struct device_node *of_get_next_cpu_node(struct device_node *prev);




extern int of_n_addr_cells(struct device_node *np);
extern int of_n_size_cells(struct device_node *np);
extern const struct of_device_id *of_match_node(
 const struct of_device_id *matches, const struct device_node *node);
extern int of_modalias_node(struct device_node *node, char *modalias, int len);
extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
extern struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index);
extern int of_parse_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_args_map(const struct device_node *np,
 const char *list_name, const char *stem_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args);
extern int of_count_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name);


extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count);

extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size);

extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
extern int of_alias_get_id(struct device_node *np, const char *stem);
extern int of_alias_get_highest_id(const char *stem);
extern int of_alias_get_alias_list(const struct of_device_id *matches,
       const char *stem, unsigned long *bitmap,
       unsigned int nbits);

extern int of_machine_is_compatible(const char *compat);

extern int of_add_property(struct device_node *np, struct property *prop);
extern int of_remove_property(struct device_node *np, struct property *prop);
extern int of_update_property(struct device_node *np, struct property *newprop);
# 411 "../include/linux/of.h"
extern int of_attach_node(struct device_node *);
extern int of_detach_node(struct device_node *);
# 434 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u8_array(const struct device_node *np,
         const char *propname,
         u8 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u8_array(np, propname, out_values,
           sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 464 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u16_array(const struct device_node *np,
          const char *propname,
          u16 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u16_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 492 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u32_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 520 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u64_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 540 "../include/linux/of.h"
const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
          u32 *pu);







const char *of_prop_next_string(struct property *prop, const char *cur);

bool of_console_check(struct device_node *dn, char *name, int index);

extern int of_cpu_node_to_id(struct device_node *np);

int of_map_rid(struct device_node *np, u32 rid,
        const char *map_name, const char *map_mask_name,
        struct device_node **target, u32 *id_out);
# 991 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_prop_val_eq(struct property *p1, struct property *p2)
{
 return p1->length == p2->length &&
        !memcmp(p1->value, p2->value, (size_t)p1->length);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_to_nid(struct device_node *device)
{
 return (-1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_numa_init(void)
{
 return -38;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *of_node_get_device_type(const struct device_node *np)
{
 return of_get_property(np, "device_type", ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_node_is_type(const struct device_node *np, const char *type)
{
 const char *match = of_node_get_device_type(np);

 return np && match && type && !strcmp(match, type);
}
# 1045 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 1062 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 1079 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 1096 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 1115 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 1134 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, ((void *)0), 0, 0);
}
# 1158 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 1174 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, ((void *)0));

 return prop ? true : false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 1259 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1295 "../include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef int (*of_init_fn_1_ret)(struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1320 "../include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1338 "../include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};


extern int of_reconfig_notifier_register(struct notifier_block *);
extern int of_reconfig_notifier_unregister(struct notifier_block *);
extern int of_reconfig_notify(unsigned long, struct of_reconfig_data *rd);
extern int of_reconfig_get_state_change(unsigned long action,
     struct of_reconfig_data *arg);

extern void of_changeset_init(struct of_changeset *ocs);
extern void of_changeset_destroy(struct of_changeset *ocs);
extern int of_changeset_apply(struct of_changeset *ocs);
extern int of_changeset_revert(struct of_changeset *ocs);
extern int of_changeset_action(struct of_changeset *ocs,
  unsigned long action, struct device_node *np,
  struct property *prop);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_attach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0001, np, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_detach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0002, np, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_add_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0003, np, prop);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_remove_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0004, np, prop);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_update_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0005, np, prop);
}
# 1419 "../include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}





enum of_overlay_notify_action {
 OF_OVERLAY_PRE_APPLY = 0,
 OF_OVERLAY_POST_APPLY,
 OF_OVERLAY_PRE_REMOVE,
 OF_OVERLAY_POST_REMOVE,
};

struct of_overlay_notify_data {
 struct device_node *overlay;
 struct device_node *target;
};



int of_overlay_fdt_apply(const void *overlay_fdt, u32 overlay_fdt_size,
    int *ovcs_id);
int of_overlay_remove(int *ovcs_id);
int of_overlay_remove_all(void);

int of_overlay_notifier_register(struct notifier_block *nb);
int of_overlay_notifier_unregister(struct notifier_block *nb);
# 12 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/platform_device.h" 1
# 13 "../include/linux/platform_device.h"
# 1 "../include/linux/device.h" 1
# 15 "../include/linux/device.h"
# 1 "../include/linux/ioport.h" 1
# 20 "../include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 128 "../include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 178 "../include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}
# 237 "../include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);






struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return (r1->start <= r2->end && r1->end >= r2->start);
}

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
# 16 "../include/linux/device.h" 2

# 1 "../include/linux/klist.h" 1
# 17 "../include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "../include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 18 "../include/linux/device.h" 2





# 1 "../include/linux/pm.h" 1
# 16 "../include/linux/pm.h"
# 1 "../include/linux/hrtimer.h" 1
# 15 "../include/linux/hrtimer.h"
# 1 "../include/linux/hrtimer_defs.h" 1
# 16 "../include/linux/hrtimer.h" 2





# 1 "../include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root head;
 struct timerqueue_node *next;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 35 "../include/linux/timerqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 return head->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->head = (struct rb_root) { ((void *)0), };
 head->next = ((void *)0);
}
# 22 "../include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 36 "../include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 107 "../include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
};
# 124 "../include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 147 "../include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} ;

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 198 "../include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;

 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern void clock_was_set_delayed(void);

extern unsigned int hrtimer_resolution;
# 313 "../include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}

extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern __attribute__((section(".discard"), unused)) char __pcpu_scope_tick_cpu_device; extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);


extern void hrtimer_init_on_stack(struct hrtimer *timer, clockid_t which_clock,
      enum hrtimer_mode mode);

extern void destroy_hrtimer_on_stack(struct hrtimer *timer);
# 367 "../include/linux/hrtimer.h"
extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 378 "../include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_queued(struct hrtimer *timer)
{
 return timer->state & 0x01;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 453 "../include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(const struct timespec64 *rqtp,
         const enum hrtimer_mode mode,
         const clockid_t clockid);

extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,
     struct task_struct *tsk);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
      const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 17 "../include/linux/pm.h" 2





extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 42 "../include/linux/pm.h"
struct device;


extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 278 "../include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 496 "../include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 518 "../include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 struct list_head clock_list;


 struct pm_domain_data *domain_data;

};
# 573 "../include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;
 unsigned int must_resume:1;
 unsigned int may_skip_resume:1;




 struct hrtimer suspend_timer;
 unsigned long timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 u64 last_busy;
 u64 active_time;
 u64 suspended_time;
 u64 accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 649 "../include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 712 "../include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_noirq_resume_devices(pm_message_t state);
extern void dpm_noirq_end(void);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern void dpm_noirq_begin(void);
extern int dpm_noirq_suspend_devices(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);

extern bool dev_pm_may_skip_resume(struct device *dev);
extern bool dev_pm_smart_suspend_and_suspended(struct device *dev);
# 810 "../include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 24 "../include/linux/device.h" 2

# 1 "../include/linux/ratelimit.h" 1





# 1 "../include/linux/sched.h" 1
# 10 "../include/linux/sched.h"
# 1 "../include/uapi/linux/sched.h" 1
# 39 "../include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
};
# 11 "../include/linux/sched.h" 2

# 1 "./arch/arm/include/generated/asm/current.h" 1
# 13 "../include/linux/sched.h" 2

# 1 "../include/linux/pid.h" 1




# 1 "../include/linux/rculist.h" 1
# 31 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 ({ union { typeof(list->prev) __val; char __c[1]; } __u = { .__val = ( typeof(list->prev)) (list) }; __write_once_size(&(list->prev), __u.__c, sizeof(list->prev)); __u.__val; });
}
# 49 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { do { extern void __compiletime_assert_57(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_57(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct list_head **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(prev)->next))))); __u.__val; }); } while (0); } while (0);
 next->prev = new;
}
# 77 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 98 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 128 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + 0);
}
# 154 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = ((void *)0);
 }
}
# 170 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(new->prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(new->prev)->next)))))) ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(new->prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(new->prev)->next)))))); __u.__val; }); else do { do { extern void __compiletime_assert_175(void) ; if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_175(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct list_head **)(&(new->prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(new->prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct list_head **)(&(new->prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(new->prev)->next))))); __u.__val; }); } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + 0);
}
# 199 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 222 "../include/linux/rculist.h"
 sync();
# 232 "../include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { do { extern void __compiletime_assert_233(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_233(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct list_head **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(prev)->next))))); __u.__val; }); } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 245 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 260 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 453 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x122 + 0);
}
# 466 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 new->pprev = old->pprev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*(struct hlist_node **)new->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*(struct hlist_node **)new->pprev))) ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)) }; __write_once_size(&((*(struct hlist_node **)new->pprev)), __u.__c, sizeof((*(struct hlist_node **)new->pprev))); __u.__val; }); else do { do { extern void __compiletime_assert_473(void) ; if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_473(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&*(struct hlist_node **)new->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*(struct hlist_node **)new->pprev)) ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) }; __write_once_size(&(*&*(struct hlist_node **)new->pprev), __u.__c, sizeof(*&*(struct hlist_node **)new->pprev)); __u.__val; }); } while (0); } while (0);
 if (next)
  new->next->pprev = &new->next;
 old->pprev = ((void *) 0x122 + 0);
}
# 505 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 n->pprev = &h->first;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(h)->first))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(h)->first)))))) ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(h)->first))))), __u.__c, sizeof(((*((struct hlist_node **)(&(h)->first)))))); __u.__val; }); else do { do { extern void __compiletime_assert_512(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_512(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(h)->first)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(h)->first))))) ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(h)->first)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(h)->first))))); __u.__val; }); } while (0); } while (0);
 if (first)
  first->pprev = &n->next;
}
# 536 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  n->pprev = &last->next;
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(last)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(last)->next)))))) ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(last)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(last)->next)))))); __u.__val; }); else do { do { extern void __compiletime_assert_548(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_548(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(last)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(last)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(last)->next)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(last)->next))))); __u.__val; }); } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 572 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)((n)->pprev))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)((n)->pprev)))))) ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)((n)->pprev))))), __u.__c, sizeof(((*((struct hlist_node **)((n)->pprev)))))); __u.__val; }); else do { do { extern void __compiletime_assert_577(void) ; if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_577(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct hlist_node **)((n)->pprev)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)((n)->pprev))))) ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)((n)->pprev)))), __u.__c, sizeof(*&(*((struct hlist_node **)((n)->pprev))))); __u.__val; }); } while (0); } while (0);
 next->pprev = &n->next;
}
# 599 "../include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(prev)->next)))))) ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(prev)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(prev)->next)))))); __u.__val; }); else do { do { extern void __compiletime_assert_604(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_604(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(prev)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(prev)->next))))); __u.__val; }); } while (0); } while (0);
 if (n->next)
  n->next->pprev = &n->next;
}
# 6 "../include/linux/pid.h" 2



enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "../include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc_checked(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
# 110 "../include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 133 "../include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 163 "../include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "../include/linux/sched.h" 2
# 1 "../include/linux/sem.h" 1




# 1 "../include/uapi/linux/sem.h" 1




# 1 "../include/linux/ipc.h" 1






# 1 "../include/linux/rhashtable-types.h" 1
# 17 "../include/linux/rhashtable-types.h"
struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "../include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "../include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "../include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "../include/linux/ipc.h" 2
# 1 "../include/uapi/linux/ipc.h" 1
# 10 "../include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};



# 1 "./arch/arm/include/generated/uapi/asm/ipcbuf.h" 1
# 1 "../include/uapi/asm-generic/ipcbuf.h" 1
# 20 "../include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "./arch/arm/include/generated/uapi/asm/ipcbuf.h" 2
# 23 "../include/uapi/linux/ipc.h" 2
# 58 "../include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "../include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << 7)))) ;
# 6 "../include/uapi/linux/sem.h" 2
# 25 "../include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};



# 1 "./arch/arm/include/generated/uapi/asm/sembuf.h" 1
# 1 "../include/uapi/asm-generic/sembuf.h" 1




# 1 "./arch/arm/include/generated/uapi/asm/bitsperlong.h" 1
# 6 "../include/uapi/asm-generic/sembuf.h" 2
# 29 "../include/uapi/asm-generic/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;




 unsigned long sem_otime;
 unsigned long sem_otime_high;
 unsigned long sem_ctime;
 unsigned long sem_ctime_high;

 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/arm/include/generated/uapi/asm/sembuf.h" 2
# 38 "../include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "../include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 16 "../include/linux/sched.h" 2
# 1 "../include/linux/shm.h" 1






# 1 "../include/uapi/linux/shm.h" 1






# 1 "../include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "../include/uapi/linux/shm.h" 2
# 28 "../include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};



# 1 "./arch/arm/include/generated/uapi/asm/shmbuf.h" 1
# 1 "../include/uapi/asm-generic/shmbuf.h" 1




# 1 "./arch/arm/include/generated/uapi/asm/bitsperlong.h" 1
# 6 "../include/uapi/asm-generic/shmbuf.h" 2
# 25 "../include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;





 unsigned long shm_atime;
 unsigned long shm_atime_high;
 unsigned long shm_dtime;
 unsigned long shm_dtime_high;
 unsigned long shm_ctime;
 unsigned long shm_ctime_high;

 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused4;
 unsigned long __unused5;
};

struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/arm/include/generated/uapi/asm/shmbuf.h" 2
# 44 "../include/uapi/linux/shm.h" 2
# 93 "../include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "../include/linux/shm.h" 2
# 1 "../arch/arm/include/asm/shmparam.h" 1
# 9 "../include/linux/shm.h" 2

struct file;


struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 17 "../include/linux/sched.h" 2
# 1 "../include/linux/kcov.h" 1




# 1 "../include/uapi/linux/kcov.h" 1
# 11 "../include/uapi/linux/kcov.h"
enum {
# 20 "../include/uapi/linux/kcov.h"
 KCOV_TRACE_PC = 0,

 KCOV_TRACE_CMP = 1,
};
# 6 "../include/linux/kcov.h" 2

struct task_struct;



enum kcov_mode {

 KCOV_MODE_DISABLED = 0,

 KCOV_MODE_INIT = 1,




 KCOV_MODE_TRACE_PC = 2,

 KCOV_MODE_TRACE_CMP = 3,
};



void kcov_task_init(struct task_struct *t);
void kcov_task_exit(struct task_struct *t);
# 18 "../include/linux/sched.h" 2

# 1 "../include/linux/plist.h" 1
# 79 "../include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 121 "../include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 210 "../include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 280 "../include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { extern void __compiletime_assert_283(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void))))) __compiletime_assert_283(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { extern void __compiletime_assert_295(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void))))) __compiletime_assert_295(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 20 "../include/linux/sched.h" 2

# 1 "../include/linux/seccomp.h" 1




# 1 "../include/uapi/linux/seccomp.h" 1
# 59 "../include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};

struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 6 "../include/linux/seccomp.h" 2
# 15 "../include/linux/seccomp.h"
# 1 "./arch/arm/include/generated/asm/seccomp.h" 1
# 1 "../include/asm-generic/seccomp.h" 1
# 11 "../include/asm-generic/seccomp.h"
# 1 "../include/uapi/linux/unistd.h" 1







# 1 "../arch/arm/include/asm/unistd.h" 1
# 13 "../arch/arm/include/asm/unistd.h"
# 1 "../arch/arm/include/uapi/asm/unistd.h" 1
# 21 "../arch/arm/include/uapi/asm/unistd.h"
# 1 "./arch/arm/include/generated/uapi/asm/unistd-eabi.h" 1
# 22 "../arch/arm/include/uapi/asm/unistd.h" 2





# 1 "./arch/arm/include/generated/uapi/asm/unistd-common.h" 1
# 28 "../arch/arm/include/uapi/asm/unistd.h" 2
# 14 "../arch/arm/include/asm/unistd.h" 2
# 1 "./arch/arm/include/generated/asm/unistd-nr.h" 1
# 15 "../arch/arm/include/asm/unistd.h" 2
# 9 "../include/uapi/linux/unistd.h" 2
# 12 "../include/asm-generic/seccomp.h" 2
# 2 "./arch/arm/include/generated/asm/seccomp.h" 2
# 16 "../include/linux/seccomp.h" 2

struct seccomp_filter;
# 29 "../include/linux/seccomp.h"
struct seccomp {
 int mode;
 struct seccomp_filter *filter;
};
# 43 "../include/linux/seccomp.h"
extern void secure_computing_strict(int this_syscall);


extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 87 "../include/linux/seccomp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_seccomp_filter(struct task_struct *tsk)
{
 return;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_seccomp_filter(struct task_struct *tsk)
{
 return;
}
# 103 "../include/linux/seccomp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off,
     void *data)
{
 return -22;
}
# 22 "../include/linux/sched.h" 2



# 1 "../include/linux/resource.h" 1




# 1 "../include/uapi/linux/resource.h" 1
# 24 "../include/uapi/linux/resource.h"
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "../include/uapi/linux/resource.h"
# 1 "./arch/arm/include/generated/uapi/asm/resource.h" 1
# 1 "../include/asm-generic/resource.h" 1




# 1 "../include/uapi/asm-generic/resource.h" 1
# 6 "../include/asm-generic/resource.h" 2
# 2 "./arch/arm/include/generated/uapi/asm/resource.h" 2
# 79 "../include/uapi/linux/resource.h" 2
# 6 "../include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "../include/linux/sched.h" 2
# 1 "../include/linux/latencytop.h" 1
# 14 "../include/linux/latencytop.h"
struct task_struct;






struct latency_record {
 unsigned long backtrace[12];
 unsigned int count;
 unsigned long time;
 unsigned long max;
};



extern int latencytop_enabled;
void __account_scheduler_latency(struct task_struct *task, int usecs, int inter);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
 if (__builtin_expect(!!(latencytop_enabled), 0))
  __account_scheduler_latency(task, usecs, inter);
}

void clear_tsk_latency_tracing(struct task_struct *p);

extern int sysctl_latencytop(struct ctl_table *table, int write,
   void *buffer, size_t *lenp, loff_t *ppos);
# 27 "../include/linux/sched.h" 2
# 1 "../include/linux/sched/prio.h" 1
# 48 "../include/linux/sched/prio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "../include/linux/sched.h" 2
# 1 "../include/linux/signal_types.h" 1
# 10 "../include/linux/signal_types.h"
# 1 "../include/uapi/linux/signal.h" 1




# 1 "../arch/arm/include/asm/signal.h" 1




# 1 "../arch/arm/include/uapi/asm/signal.h" 1







struct siginfo;
# 94 "../arch/arm/include/uapi/asm/signal.h"
# 1 "../include/uapi/asm-generic/signal-defs.h" 1
# 18 "../include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 95 "../arch/arm/include/uapi/asm/signal.h" 2
# 114 "../arch/arm/include/uapi/asm/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 6 "../arch/arm/include/asm/signal.h" 2








typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 32)];
} sigset_t;




# 1 "../arch/arm/include/uapi/asm/sigcontext.h" 1
# 10 "../arch/arm/include/uapi/asm/sigcontext.h"
struct sigcontext {
 unsigned long trap_no;
 unsigned long error_code;
 unsigned long oldmask;
 unsigned long arm_r0;
 unsigned long arm_r1;
 unsigned long arm_r2;
 unsigned long arm_r3;
 unsigned long arm_r4;
 unsigned long arm_r5;
 unsigned long arm_r6;
 unsigned long arm_r7;
 unsigned long arm_r8;
 unsigned long arm_r9;
 unsigned long arm_r10;
 unsigned long arm_fp;
 unsigned long arm_ip;
 unsigned long arm_sp;
 unsigned long arm_lr;
 unsigned long arm_pc;
 unsigned long arm_cpsr;
 unsigned long fault_address;
};
# 23 "../arch/arm/include/asm/signal.h" 2
# 6 "../include/uapi/linux/signal.h" 2
# 1 "./arch/arm/include/generated/uapi/asm/siginfo.h" 1
# 1 "../include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 32 "../include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 77 "../include/uapi/asm-generic/siginfo.h"
  union {




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 129 "../include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 320 "../include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 2 "./arch/arm/include/generated/uapi/asm/siginfo.h" 2
# 7 "../include/uapi/linux/signal.h" 2
# 11 "../include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
} kernel_siginfo_t;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct user_struct *user;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};


struct old_sigaction {
 __sighandler_t sa_handler;
 old_sigset_t sa_mask;
 unsigned long sa_flags;
 __sigrestore_t sa_restorer;
};


struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 29 "../include/linux/sched.h" 2

# 1 "../include/linux/task_io_accounting.h" 1
# 12 "../include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
# 44 "../include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 31 "../include/linux/sched.h" 2
# 1 "../include/uapi/linux/rseq.h" 1
# 16 "../include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "../include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "../include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "../include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;



  struct {

   __u32 padding;
   __u32 ptr32;




  } ptr;

 } rseq_cs;
# 144 "../include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 32 "../include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 213 "../include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);

extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 239 "../include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};
# 257 "../include/linux/sched.h"
struct task_cputime {
 u64 utime;
 u64 stime;
 unsigned long long sum_exec_runtime;
};






enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_USER,

 VTIME_SYS,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};

struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 333 "../include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 360 "../include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;

} __attribute__((__aligned__(sizeof(u64))));
# 409 "../include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_load_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_load_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << 7))));

struct sched_statistics {

 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;
 u64 iowait_count;
 u64 iowait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;

};

struct sched_entity {

 struct load_weight load;
 unsigned long runnable_weight;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;
# 490 "../include/linux/sched.h"
 struct sched_avg avg;

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;

 struct sched_rt_entity *parent;

 struct rt_rq *rt_rq;

 struct rt_rq *my_q;

} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 559 "../include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_boosted : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 578 "../include/linux/sched.h"
 struct hrtimer inactive_timer;
};
# 608 "../include/linux/sched.h"
struct uclamp_se {
 unsigned int value : ( __builtin_constant_p((1L << 10)) ? ( (((1L << 10)) == 0 || ((1L << 10)) == 1) ? 1 : ( __builtin_constant_p((1L << 10)) ? ( __builtin_constant_p((1L << 10)) ? ( ((1L << 10)) < 2 ? 0 : ((1L << 10)) & (1ULL << 63) ? 63 : ((1L << 10)) & (1ULL << 62) ? 62 : ((1L << 10)) & (1ULL << 61) ? 61 : ((1L << 10)) & (1ULL << 60) ? 60 : ((1L << 10)) & (1ULL << 59) ? 59 : ((1L << 10)) & (1ULL << 58) ? 58 : ((1L << 10)) & (1ULL << 57) ? 57 : ((1L << 10)) & (1ULL << 56) ? 56 : ((1L << 10)) & (1ULL << 55) ? 55 : ((1L << 10)) & (1ULL << 54) ? 54 : ((1L << 10)) & (1ULL << 53) ? 53 : ((1L << 10)) & (1ULL << 52) ? 52 : ((1L << 10)) & (1ULL << 51) ? 51 : ((1L << 10)) & (1ULL << 50) ? 50 : ((1L << 10)) & (1ULL << 49) ? 49 : ((1L << 10)) & (1ULL << 48) ? 48 : ((1L << 10)) & (1ULL << 47) ? 47 : ((1L << 10)) & (1ULL << 46) ? 46 : ((1L << 10)) & (1ULL << 45) ? 45 : ((1L << 10)) & (1ULL << 44) ? 44 : ((1L << 10)) & (1ULL << 43) ? 43 : ((1L << 10)) & (1ULL << 42) ? 42 : ((1L << 10)) & (1ULL << 41) ? 41 : ((1L << 10)) & (1ULL << 40) ? 40 : ((1L << 10)) & (1ULL << 39) ? 39 : ((1L << 10)) & (1ULL << 38) ? 38 : ((1L << 10)) & (1ULL << 37) ? 37 : ((1L << 10)) & (1ULL << 36) ? 36 : ((1L << 10)) & (1ULL << 35) ? 35 : ((1L << 10)) & (1ULL << 34) ? 34 : ((1L << 10)) & (1ULL << 33) ? 33 : ((1L << 10)) & (1ULL << 32) ? 32 : ((1L << 10)) & (1ULL << 31) ? 31 : ((1L << 10)) & (1ULL << 30) ? 30 : ((1L << 10)) & (1ULL << 29) ? 29 : ((1L << 10)) & (1ULL << 28) ? 28 : ((1L << 10)) & (1ULL << 27) ? 27 : ((1L << 10)) & (1ULL << 26) ? 26 : ((1L << 10)) & (1ULL << 25) ? 25 : ((1L << 10)) & (1ULL << 24) ? 24 : ((1L << 10)) & (1ULL << 23) ? 23 : ((1L << 10)) & (1ULL << 22) ? 22 : ((1L << 10)) & (1ULL << 21) ? 21 : ((1L << 10)) & (1ULL << 20) ? 20 : ((1L << 10)) & (1ULL << 19) ? 19 : ((1L << 10)) & (1ULL << 18) ? 18 : ((1L << 10)) & (1ULL << 17) ? 17 : ((1L << 10)) & (1ULL << 16) ? 16 : ((1L << 10)) & (1ULL << 15) ? 15 : ((1L << 10)) & (1ULL << 14) ? 14 : ((1L << 10)) & (1ULL << 13) ? 13 : ((1L << 10)) & (1ULL << 12) ? 12 : ((1L << 10)) & (1ULL << 11) ? 11 : ((1L << 10)) & (1ULL << 10) ? 10 : ((1L << 10)) & (1ULL << 9) ? 9 : ((1L << 10)) & (1ULL << 8) ? 8 : ((1L << 10)) & (1ULL << 7) ? 7 : ((1L << 10)) & (1ULL << 6) ? 6 : ((1L << 10)) & (1ULL << 5) ? 5 : ((1L << 10)) & (1ULL << 4) ? 4 : ((1L << 10)) & (1ULL << 3) ? 3 : ((1L << 10)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((1L << 10)) <= 4) ? __ilog2_u32((1L << 10)) : __ilog2_u64((1L << 10)) ) + 1 ) : __bits_per((1L << 10)) );
 unsigned int bucket_id : ( __builtin_constant_p(5) ? ( ((5) == 0 || (5) == 1) ? 1 : ( __builtin_constant_p(5) ? ( __builtin_constant_p(5) ? ( (5) < 2 ? 0 : (5) & (1ULL << 63) ? 63 : (5) & (1ULL << 62) ? 62 : (5) & (1ULL << 61) ? 61 : (5) & (1ULL << 60) ? 60 : (5) & (1ULL << 59) ? 59 : (5) & (1ULL << 58) ? 58 : (5) & (1ULL << 57) ? 57 : (5) & (1ULL << 56) ? 56 : (5) & (1ULL << 55) ? 55 : (5) & (1ULL << 54) ? 54 : (5) & (1ULL << 53) ? 53 : (5) & (1ULL << 52) ? 52 : (5) & (1ULL << 51) ? 51 : (5) & (1ULL << 50) ? 50 : (5) & (1ULL << 49) ? 49 : (5) & (1ULL << 48) ? 48 : (5) & (1ULL << 47) ? 47 : (5) & (1ULL << 46) ? 46 : (5) & (1ULL << 45) ? 45 : (5) & (1ULL << 44) ? 44 : (5) & (1ULL << 43) ? 43 : (5) & (1ULL << 42) ? 42 : (5) & (1ULL << 41) ? 41 : (5) & (1ULL << 40) ? 40 : (5) & (1ULL << 39) ? 39 : (5) & (1ULL << 38) ? 38 : (5) & (1ULL << 37) ? 37 : (5) & (1ULL << 36) ? 36 : (5) & (1ULL << 35) ? 35 : (5) & (1ULL << 34) ? 34 : (5) & (1ULL << 33) ? 33 : (5) & (1ULL << 32) ? 32 : (5) & (1ULL << 31) ? 31 : (5) & (1ULL << 30) ? 30 : (5) & (1ULL << 29) ? 29 : (5) & (1ULL << 28) ? 28 : (5) & (1ULL << 27) ? 27 : (5) & (1ULL << 26) ? 26 : (5) & (1ULL << 25) ? 25 : (5) & (1ULL << 24) ? 24 : (5) & (1ULL << 23) ? 23 : (5) & (1ULL << 22) ? 22 : (5) & (1ULL << 21) ? 21 : (5) & (1ULL << 20) ? 20 : (5) & (1ULL << 19) ? 19 : (5) & (1ULL << 18) ? 18 : (5) & (1ULL << 17) ? 17 : (5) & (1ULL << 16) ? 16 : (5) & (1ULL << 15) ? 15 : (5) & (1ULL << 14) ? 14 : (5) & (1ULL << 13) ? 13 : (5) & (1ULL << 12) ? 12 : (5) & (1ULL << 11) ? 11 : (5) & (1ULL << 10) ? 10 : (5) & (1ULL << 9) ? 9 : (5) & (1ULL << 8) ? 8 : (5) & (1ULL << 7) ? 7 : (5) & (1ULL << 6) ? 6 : (5) & (1ULL << 5) ? 5 : (5) & (1ULL << 4) ? 4 : (5) & (1ULL << 3) ? 3 : (5) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(5) <= 4) ? __ilog2_u32(5) : __ilog2_u64(5) ) + 1 ) : __bits_per(5) );
 unsigned int active : 1;
 unsigned int user_defined : 1;
};


union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 deferred_qs;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct task_struct {
# 646 "../include/linux/sched.h"
 volatile long state;







 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;


 struct llist_node wake_entry;
 int on_cpu;




 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;
# 678 "../include/linux/sched.h"
 int recent_used_cpu;
 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;

 struct task_group *sched_task_group;

 struct sched_dl_entity dl;



 struct uclamp_se uclamp_req[UCLAMP_CNT];

 struct uclamp_se uclamp[UCLAMP_CNT];
# 709 "../include/linux/sched.h"
 unsigned int btrace_seq;


 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t cpus_mask;
# 725 "../include/linux/sched.h"
 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;
 unsigned sched_remote_wakeup:1;

 unsigned sched_psi_wake_requeue:1;



 unsigned :0;




 unsigned in_execve:1;
 unsigned in_iowait:1;




 unsigned in_user_fault:1;


 unsigned brk_randomized:1;



 unsigned no_cgroup_migration:1;

 unsigned frozen:1;



 unsigned use_memdelay:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 815 "../include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;

 u64 utime;
 u64 stime;




 u64 gtime;
 struct prev_cputime prev_cputime;
# 866 "../include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 real_start_time;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct task_cputime cputime_expires;
 struct list_head cpu_timers[3];





 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 907 "../include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;


 unsigned long last_switch_count;
 unsigned long last_switch_time;


 struct fs_struct *fs;


 struct files_struct *files;


 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;





 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;


 u32 parent_exec_id;
 u32 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;




 struct mutex_waiter *blocked_on;



 unsigned int irq_events;
 unsigned long hardirq_enable_ip;
 unsigned long hardirq_disable_ip;
 unsigned int hardirq_enable_event;
 unsigned int hardirq_disable_event;
 int hardirqs_enabled;
 int hardirq_context;
 unsigned long softirq_disable_ip;
 unsigned long softirq_enable_ip;
 unsigned int softirq_disable_event;
 unsigned int softirq_enable_event;
 int softirqs_enabled;
 int softirq_context;




 u64 curr_chain_key;
 int lockdep_depth;
 unsigned int lockdep_recursion;
 struct held_lock held_locks[48UL];



 unsigned int in_ubsan;



 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;


 unsigned int psi_flags;



 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;



 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;
# 1126 "../include/linux/sched.h"
 struct rseq *rseq;
 u32 rseq_sig;




 unsigned long rseq_event_mask;


 struct tlbflush_unmap_batch tlb_ubc;

 struct callback_head rcu;


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;



 int make_it_fail;
 unsigned int fail_nth;





 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;


 int latency_record_count;
 struct latency_record latency_record[32];





 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1199 "../include/linux/sched.h"
 unsigned long trace;


 unsigned long trace_recursion;




 unsigned int kcov_mode;


 unsigned int kcov_size;


 void *kcov_area;


 struct kcov *kcov;



 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;



 struct request_queue *throttle_queue;



 struct uprobe_task *utask;


 unsigned int sequential_io;
 unsigned int sequential_io_avg;


 unsigned long task_state_change;

 int pagefault_disabled;

 struct task_struct *oom_reaper_list;
# 1261 "../include/linux/sched.h"
 void *security;
# 1276 "../include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1302 "../include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1335 "../include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ union { typeof((tsk->real_parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); else __read_once_size_nocheck(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); do { } while (0); __u.__val; }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((0) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("../include/linux/sched.h", 1377, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ union { typeof(tsk->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(tsk->state), __u.__c, sizeof(tsk->state)); else __read_once_size_nocheck(&(tsk->state), __u.__c, sizeof(tsk->state)); do { } while (0); __u.__val; });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { extern void __compiletime_assert_1402(void) ; if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_1402(); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { extern void __compiletime_assert_1414(void) ; if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 63) ? 63 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 62) ? 62 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 61) ? 61 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 60) ? 60 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 59) ? 59 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 58) ? 58 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 57) ? 57 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 56) ? 56 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 55) ? 55 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 54) ? 54 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 53) ? 53 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 52) ? 52 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 51) ? 51 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 50) ? 50 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 49) ? 49 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 48) ? 48 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 47) ? 47 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 46) ? 46 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 45) ? 45 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 44) ? 44 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 43) ? 43 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 42) ? 42 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 41) ? 41 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 40) ? 40 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 39) ? 39 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 38) ? 38 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 37) ? 37 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 36) ? 36 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 35) ? 35 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 34) ? 34 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 33) ? 33 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 32) ? 32 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 31) ? 31 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 30) ? 30 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 29) ? 29 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 28) ? 28 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 27) ? 27 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 26) ? 26 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 25) ? 25 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 24) ? 24 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 23) ? 23 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 22) ? 22 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 21) ? 21 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 20) ? 20 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 19) ? 19 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 18) ? 18 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 17) ? 17 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 16) ? 16 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 15) ? 15 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 14) ? 14 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 13) ? 13 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 12) ? 12 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 11) ? 11 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 10) ? 10 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 9) ? 9 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 8) ? 8 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 7) ? 7 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 6) ? 6 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 5) ? 5 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 4) ? 4 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 3) ? 3 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_1414(); } while (0);

 return state_char[state];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1433 "../include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1502 "../include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_percpu_thread(void)
{

 return ((current_thread_info()->task)->flags & 0x04000000) &&
  ((current_thread_info()->task)->nr_cpus_allowed == 1);



}
# 1534 "../include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_no_new_privs(struct task_struct *p) { return test_bit(0, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_no_new_privs(struct task_struct *p) { _set_bit(0,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_page(struct task_struct *p) { return test_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_page(struct task_struct *p) { _set_bit(1,&p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_page(struct task_struct *p) { _clear_bit(1,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_slab(struct task_struct *p) { return test_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_slab(struct task_struct *p) { _set_bit(2,&p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_slab(struct task_struct *p) { _clear_bit(2,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_disable(struct task_struct *p) { return test_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_disable(struct task_struct *p) { _set_bit(3,&p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_disable(struct task_struct *p) { _clear_bit(3,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_noexec(struct task_struct *p) { return test_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_noexec(struct task_struct *p) { _set_bit(7,&p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_noexec(struct task_struct *p) { _clear_bit(7,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_force_disable(struct task_struct *p) { return test_bit(4, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_force_disable(struct task_struct *p) { _set_bit(4,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_disable(struct task_struct *p) { return test_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_disable(struct task_struct *p) { _set_bit(5,&p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ib_disable(struct task_struct *p) { _clear_bit(5,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_force_disable(struct task_struct *p) { return test_bit(6, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_force_disable(struct task_struct *p) { _set_bit(6,&p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 (current_thread_info()->task)->flags &= ~flags;
 (current_thread_info()->task)->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
# 1587 "../include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;


 struct thread_info thread_info;

 unsigned long stack[(((1UL) << 12) << 1)/sizeof(long)];
};


extern struct thread_info init_thread_info;


extern unsigned long init_stack[(((1UL) << 12) << 1) / sizeof(unsigned long)];
# 1664 "../include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






void scheduler_ipi(void);
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
# 1710 "../include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,1)), 0);
}
# 1763 "../include/linux/sched.h"
extern int _cond_resched(void);
# 1773 "../include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cond_resched_rcu(void)
{

 rcu_read_unlock();
 ({ ___might_sleep("../include/linux/sched.h", 1784, 0); _cond_resched(); });
 rcu_read_lock();

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spin_needbreak(spinlock_t *lock)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 1)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_cpu(const struct task_struct *p)
{



 return ({ union { typeof(((struct thread_info *)(p)->stack)->cpu) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)(p)->stack)->cpu), __u.__c, sizeof(((struct thread_info *)(p)->stack)->cpu)); else __read_once_size_nocheck(&(((struct thread_info *)(p)->stack)->cpu), __u.__c, sizeof(((struct thread_info *)(p)->stack)->cpu)); do { } while (0); __u.__val; });

}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 1849 "../include/linux/sched.h"
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);
# 1862 "../include/linux/sched.h"
enum rseq_event_mask_bits {
 RSEQ_EVENT_PREEMPT_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT,
 RSEQ_EVENT_SIGNAL_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT,
 RSEQ_EVENT_MIGRATE_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT,
};

enum rseq_event_mask {
 RSEQ_EVENT_PREEMPT = (1U << RSEQ_EVENT_PREEMPT_BIT),
 RSEQ_EVENT_SIGNAL = (1U << RSEQ_EVENT_SIGNAL_BIT),
 RSEQ_EVENT_MIGRATE = (1U << RSEQ_EVENT_MIGRATE_BIT),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_set_notify_resume(struct task_struct *t)
{
 if (t->rseq)
  set_tsk_thread_flag(t, 2);
}

void __rseq_handle_notify_resume(struct ksignal *sig, struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
 if ((current_thread_info()->task)->rseq)
  __rseq_handle_notify_resume(ksig, regs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 __set_bit(RSEQ_EVENT_SIGNAL_BIT, &(current_thread_info()->task)->rseq_event_mask);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
 rseq_handle_notify_resume(ksig, regs);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_preempt(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_PREEMPT_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_migrate(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_MIGRATE_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
 if (clone_flags & 0x00010000) {
  t->rseq = ((void *)0);
  t->rseq_sig = 0;
  t->rseq_event_mask = 0;
 } else {
  t->rseq = (current_thread_info()->task)->rseq;
  t->rseq_sig = (current_thread_info()->task)->rseq_sig;
  t->rseq_event_mask = (current_thread_info()->task)->rseq_event_mask;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_execve(struct task_struct *t)
{
 t->rseq = ((void *)0);
 t->rseq_sig = 0;
 t->rseq_event_mask = 0;
}
# 1964 "../include/linux/sched.h"
void __exit_umh(struct task_struct *tsk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_umh(struct task_struct *tsk)
{
 if (__builtin_expect(!!(tsk->flags & 0x02000000), 0))
  __exit_umh(tsk);
}



void rseq_syscall(struct pt_regs *regs);
# 1984 "../include/linux/sched.h"
const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);
# 7 "../include/linux/ratelimit.h" 2








struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "../include/linux/ratelimit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { static struct lock_class_key __key; __raw_spin_lock_init((&rs->lock), "&rs->lock", &__key); } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 100),
     10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", (current_thread_info()->task)->comm, rs->missed);

  rs->missed = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;

extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 26 "../include/linux/device.h" 2



# 1 "../arch/arm/include/asm/device.h" 1







struct dev_archdata {




 void *iommu;


 struct dma_iommu_mapping *mapping;




 unsigned int dma_coherent:1;
 unsigned int dma_ops_setup:1;
};

struct omap_device;

struct pdev_archdata {

 struct omap_device *od;

};
# 30 "../include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct bus_type;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct iommu_fwspec;
struct dev_pin_info;
struct iommu_param;

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 60 "../include/linux/device.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
# 115 "../include/linux/device.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int device_match_of_node(struct device *dev, const void *np);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));
struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name);
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 213 "../include/linux/device.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 238 "../include/linux/device.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 280 "../include/linux/device.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 331 "../include/linux/device.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));

void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
int driver_deferred_probe_check_state_continue(struct device *dev);
# 362 "../include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 407 "../include/linux/device.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 452 "../include/linux/device.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));

struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 489 "../include/linux/device.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 521 "../include/linux/device.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 557 "../include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 619 "../include/linux/device.h"
extern int device_create_file(struct device *device,
         const struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          const struct device_attribute *attr);
extern bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
extern int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);


extern void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));
# 650 "../include/linux/device.h"
extern void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
extern int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
extern __attribute__((__format__(printf, 3, 0)))
char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
        va_list ap) __attribute__((__malloc__));
extern __attribute__((__format__(printf, 3, 4)))
char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })), 0))
  return ((void *)0);

 return devm_kmalloc(dev, bytes, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
extern void devm_kfree(struct device *dev, const void *p);
extern char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *devm_kstrdup_const(struct device *dev,
          const char *s, gfp_t gfp);
extern void *devm_kmemdup(struct device *dev, const void *src, size_t len,
     gfp_t gfp);

extern unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
extern void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 750 "../include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;
};
# 774 "../include/linux/device.h"
struct device_connection {
 struct fwnode_handle *fwnode;
 const char *endpoint[2];
 const char *id;
 struct list_head list;
};

void *device_connection_find_match(struct device *dev, const char *con_id,
    void *data,
    void *(*match)(struct device_connection *con,
            int ep, void *data));

struct device *device_connection_find(struct device *dev, const char *con_id);

void device_connection_add(struct device_connection *con);
void device_connection_remove(struct device_connection *con);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_connections_add(struct device_connection *cons)
{
 struct device_connection *c;

 for (c = cons; c->endpoint[0]; c++)
  device_connection_add(c);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_connections_remove(struct device_connection *cons)
{
 struct device_connection *c;

 for (c = cons; c->endpoint[0]; c++)
  device_connection_remove(c);
}
# 824 "../include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 863 "../include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;

 struct callback_head callback_head;

 bool supplier_preactivated;
};
# 885 "../include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};







struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 enum dl_dev_state status;
};
# 985 "../include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;

 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct irq_domain *msi_domain;


 struct dev_pin_info *pins;


 struct list_head msi_list;


 const struct dma_map_ops *dma_ops;
 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_mask;
 unsigned long dma_pfn_offset;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;



 struct cma *cma_area;



 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;




 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct iommu_fwspec *iommu_fwspec;
 struct iommu_param *iommu_param;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;





};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_1076(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_1076(); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != ((void *)0));
}



# 1 "../include/linux/pm_wakeup.h" 1
# 18 "../include/linux/pm_wakeup.h"
struct wake_irq;
# 41 "../include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 bool active:1;
 bool autosleep_enabled:1;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_wakeup_path(struct device *dev)
{
 dev->power.wakeup_path = true;
}


extern void wakeup_source_prepare(struct wakeup_source *ws, const char *name);
extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 184 "../include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wakeup_source_init(struct wakeup_source *ws,
          const char *name)
{
 wakeup_source_prepare(ws, name);
 wakeup_source_add(ws);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 1091 "../include/linux/device.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

extern __attribute__((__format__(printf, 2, 3)))
int dev_set_name(struct device *dev, const char *name, ...);
# 1114 "../include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_to_node(struct device *dev)
{
 return (-1);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dev_node(struct device *dev, int node)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock(struct device *dev)
{
 mutex_lock_nested(&dev->mutex, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible_nested(&dev->mutex, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock_assert(struct device *dev)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(&dev->mutex)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/device.h", 1235); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return ((void *)0);
 return dev->of_node;
}

void driver_init(void);




extern int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern int device_for_each_child_reverse(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern struct device *device_find_child_by_name(struct device *parent,
      const char *name);
extern int device_rename(struct device *dev, const char *new_name);
extern int device_move(struct device *dev, struct device *new_parent,
         enum dpm_order dpm_order);
extern const char *device_get_devnode(struct device *dev,
          umode_t *mode, kuid_t *uid, kgid_t *gid,
          const char **tmp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

extern void lock_device_hotplug(void);
extern void unlock_device_hotplug(void);
extern int lock_device_hotplug_sysfs(void);
extern int device_offline(struct device *dev);
extern int device_online(struct device *dev);
extern void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
extern void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




extern struct device *__root_device_register(const char *name,
          struct module *owner);





extern void root_device_unregister(struct device *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





extern int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
extern int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
extern void device_initial_probe(struct device *dev);
extern int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

extern bool device_is_bound(struct device *dev);




extern __attribute__((__format__(printf, 5, 0)))
struct device *device_create_vargs(struct class *cls, struct device *parent,
       dev_t devt, void *drvdata,
       const char *fmt, va_list vargs);
extern __attribute__((__format__(printf, 5, 6)))
struct device *device_create(struct class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        const char *fmt, ...);
extern __attribute__((__format__(printf, 6, 7)))
struct device *device_create_with_groups(struct class *cls,
        struct device *parent, dev_t devt, void *drvdata,
        const struct attribute_group **groups,
        const char *fmt, ...);
extern void device_destroy(struct class *cls, dev_t devt);

extern int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

extern int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
extern int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
     const struct attribute_group *grp);
extern void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);


extern int devtmpfs_create_node(struct device *dev);
extern int devtmpfs_delete_node(struct device *dev);
extern int devtmpfs_mount(const char *mntdir);







extern void device_shutdown(void);


extern const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);







__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void dev_printk(const char *level, const struct device *dev,
  const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 1631 "../include/linux/device.h"
extern long sysfs_deprecated;
# 14 "../include/linux/platform_device.h" 2




struct mfd_cell;
struct property_entry;
struct platform_device_id;

struct platform_device {
 const char *name;
 int id;
 bool id_auto;
 struct device dev;
 u32 num_resources;
 struct resource *resource;

 const struct platform_device_id *id_entry;
 char *driver_override;


 struct mfd_cell *mfd_cell;


 struct pdev_archdata archdata;
};






extern int platform_device_register(struct platform_device *);
extern void platform_device_unregister(struct platform_device *);

extern struct bus_type platform_bus_type;
extern struct device platform_bus;

extern void arch_setup_pdev_archdata(struct platform_device *);
extern struct resource *platform_get_resource(struct platform_device *,
           unsigned int, unsigned int);
extern void *
devm_platform_ioremap_resource(struct platform_device *pdev,
          unsigned int index);
extern int platform_get_irq(struct platform_device *, unsigned int);
extern int platform_irq_count(struct platform_device *);
extern struct resource *platform_get_resource_byname(struct platform_device *,
           unsigned int,
           const char *);
extern int platform_get_irq_byname(struct platform_device *, const char *);
extern int platform_add_devices(struct platform_device **, int);

struct platform_device_info {
  struct device *parent;
  struct fwnode_handle *fwnode;
  bool of_node_reused;

  const char *name;
  int id;

  const struct resource *res;
  unsigned int num_res;

  const void *data;
  size_t size_data;
  u64 dma_mask;

  struct property_entry *properties;
};
extern struct platform_device *platform_device_register_full(
  const struct platform_device_info *pdevinfo);
# 99 "../include/linux/platform_device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *platform_device_register_resndata(
  struct device *parent, const char *name, int id,
  const struct resource *res, unsigned int num,
  const void *data, size_t size) {

 struct platform_device_info pdevinfo = {
  .parent = parent,
  .name = name,
  .id = id,
  .res = res,
  .num_res = num,
  .data = data,
  .size_data = size,
  .dma_mask = 0,
 };

 return platform_device_register_full(&pdevinfo);
}
# 140 "../include/linux/platform_device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *platform_device_register_simple(
  const char *name, int id,
  const struct resource *res, unsigned int num)
{
 return platform_device_register_resndata(((void *)0), name, id,
   res, num, ((void *)0), 0);
}
# 164 "../include/linux/platform_device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *platform_device_register_data(
  struct device *parent, const char *name, int id,
  const void *data, size_t size)
{
 return platform_device_register_resndata(parent, name, id,
   ((void *)0), 0, data, size);
}

extern struct platform_device *platform_device_alloc(const char *name, int id);
extern int platform_device_add_resources(struct platform_device *pdev,
      const struct resource *res,
      unsigned int num);
extern int platform_device_add_data(struct platform_device *pdev,
        const void *data, size_t size);
extern int platform_device_add_properties(struct platform_device *pdev,
    const struct property_entry *properties);
extern int platform_device_add(struct platform_device *pdev);
extern void platform_device_del(struct platform_device *pdev);
extern void platform_device_put(struct platform_device *pdev);

struct platform_driver {
 int (*probe)(struct platform_device *);
 int (*remove)(struct platform_device *);
 void (*shutdown)(struct platform_device *);
 int (*suspend)(struct platform_device *, pm_message_t state);
 int (*resume)(struct platform_device *);
 struct device_driver driver;
 const struct platform_device_id *id_table;
 bool prevent_deferred_probe;
};
# 203 "../include/linux/platform_device.h"
extern int __platform_driver_register(struct platform_driver *,
     struct module *);
extern void platform_driver_unregister(struct platform_driver *);






extern int __platform_driver_probe(struct platform_driver *driver,
  int (*probe)(struct platform_device *), struct module *module);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *platform_get_drvdata(const struct platform_device *pdev)
{
 return dev_get_drvdata(&pdev->dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void platform_set_drvdata(struct platform_device *pdev,
     void *data)
{
 dev_set_drvdata(&pdev->dev, data);
}
# 278 "../include/linux/platform_device.h"
extern struct platform_device *__platform_create_bundle(
 struct platform_driver *driver, int (*probe)(struct platform_device *),
 struct resource *res, unsigned int n_res,
 const void *data, size_t size, struct module *module);

int __platform_register_drivers(struct platform_driver * const *drivers,
    unsigned int count, struct module *owner);
void platform_unregister_drivers(struct platform_driver * const *drivers,
     unsigned int count);





struct early_platform_driver {
 const char *class_str;
 struct platform_driver *pdrv;
 struct list_head list;
 int requested_id;
 char *buffer;
 int bufsize;
};




extern int early_platform_driver_register(struct early_platform_driver *epdrv,
       char *buf);
extern void early_platform_add_devices(struct platform_device **devs, int num);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_early_platform_device(struct platform_device *pdev)
{
 return !pdev->dev.driver;
}

extern void early_platform_driver_register_all(char *class_str);
extern int early_platform_driver_probe(char *class_str,
           int nr_probe, int user_only);
extern void early_platform_cleanup(void);
# 344 "../include/linux/platform_device.h"
extern int platform_pm_suspend(struct device *dev);
extern int platform_pm_resume(struct device *dev);






extern int platform_pm_freeze(struct device *dev);
extern int platform_pm_thaw(struct device *dev);
extern int platform_pm_poweroff(struct device *dev);
extern int platform_pm_restore(struct device *dev);







extern int platform_dma_configure(struct device *dev);
# 13 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/pinctrl/pinctrl.h" 1
# 16 "../include/linux/pinctrl/pinctrl.h"
# 1 "../include/linux/seq_file.h" 1
# 11 "../include/linux/seq_file.h"
# 1 "../include/linux/fs.h" 1





# 1 "../include/linux/wait_bit.h" 1
# 10 "../include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "../include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("../include/linux/wait_bit.h", 73, 0); do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("../include/linux/wait_bit.h", 98, 0); do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { __might_sleep("../include/linux/wait_bit.h", 125, 0); do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { __might_sleep("../include/linux/wait_bit.h", 153, 0); do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("../include/linux/wait_bit.h", 181, 0); do { } while (0); } while (0);
 if (!_test_and_set_bit(bit,word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("../include/linux/wait_bit.h", 205, 0); do { } while (0); } while (0);
 if (!_test_and_set_bit(bit,word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { __might_sleep("../include/linux/wait_bit.h", 232, 0); do { } while (0); } while (0);
 if (!_test_and_set_bit(bit,word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "../include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 wake_up_bit(word, bit);
}
# 7 "../include/linux/fs.h" 2
# 1 "../include/linux/kdev_t.h" 1




# 1 "../include/uapi/linux/kdev_t.h" 1
# 6 "../include/linux/kdev_t.h" 2
# 24 "../include/linux/kdev_t.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "../include/linux/fs.h" 2
# 1 "../include/linux/dcache.h" 1







# 1 "../include/linux/rculist_bl.h" 1







# 1 "../include/linux/list_bl.h" 1





# 1 "../include/linux/bit_spinlock.h" 1
# 16 "../include/linux/bit_spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
  do {
   do { __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); __asm__ __volatile__("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;"); } while (0);
  } while (test_bit(bitnum, addr));
  do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 }

 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{

 do { if (__builtin_expect(!!(!test_bit(bitnum, addr)), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/bit_spinlock.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "60" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{

 do { if (__builtin_expect(!!(!test_bit(bitnum, addr)), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/bit_spinlock.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "77" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 __clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return test_bit(bitnum, addr);





}
# 7 "../include/linux/list_bl.h" 2
# 34 "../include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/list_bl.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "66" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/list_bl.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "68" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; }) & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/list_bl.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "120" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "../include/linux/rculist_bl.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/rculist_bl.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "14" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/rculist_bl.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "16" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((h->first)) __val; char __c[1]; } __u = { .__val = ( typeof((h->first))) ((typeof(h->first))(_r_a_p__v)) }; __write_once_size(&((h->first)), __u.__c, sizeof((h->first))); __u.__val; }); else do { do { extern void __compiletime_assert_18(void) ; if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_18(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ({ union { typeof(*&h->first) __val; char __c[1]; } __u = { .__val = ( typeof(*&h->first)) ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)) }; __write_once_size(&(*&h->first), __u.__c, sizeof(*&h->first)); __u.__val; }); } while (0); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ union { typeof((h->first)) __val; char __c[1]; } __u; if (1) __read_once_size(&((h->first)), __u.__c, sizeof((h->first))); else __read_once_size_nocheck(&((h->first)), __u.__c, sizeof((h->first))); do { } while (0); __u.__val; }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("../include/linux/rculist_bl.h", 24, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 47 "../include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init_rcu(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  n->pprev = ((void *)0);
 }
}
# 74 "../include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + 0);
}
# 99 "../include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 9 "../include/linux/dcache.h" 2




# 1 "../include/linux/lockref.h" 1
# 25 "../include/linux/lockref.h"
struct lockref {
 union {



  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 14 "../include/linux/dcache.h" 2
# 1 "../include/linux/stringhash.h" 1






# 1 "../include/linux/hash.h" 1
# 60 "../include/linux/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{





 return hash_32_generic((u32)val ^ __hash_32_generic(val >> 32), bits);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_32_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;




 return (u32)val;
}
# 8 "../include/linux/stringhash.h" 2
# 42 "../include/linux/stringhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_32_generic(hash, 32);
}
# 66 "../include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "../include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 15 "../include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 47 "../include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 len; u32 hash;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 89 "../include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[36];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << 7))));
# 221 "../include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(struct dentry *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
# 311 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 334 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 463 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 481 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 513 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 525 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ union { typeof(dentry->d_inode) __val; char __c[1]; } __u; if (1) __read_once_size(&(dentry->d_inode), __u.__c, sizeof(dentry->d_inode)); else __read_once_size_nocheck(&(dentry->d_inode), __u.__c, sizeof(dentry->d_inode)); do { } while (0); __u.__val; });
}
# 540 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 557 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 572 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 588 "../include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[36];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "../include/linux/fs.h" 2
# 1 "../include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "../include/linux/fs.h" 2



# 1 "../include/linux/list_lru.h" 1
# 13 "../include/linux/list_lru.h"
# 1 "../include/linux/shrinker.h" 1
# 12 "../include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "../include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};






extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
# 14 "../include/linux/list_lru.h" 2

struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[0];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} __attribute__((__aligned__((1 << 7))));

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 int shrinker_id;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "../include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "../include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "../include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "../include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "../include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "../include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "../include/linux/fs.h" 2
# 24 "../include/linux/fs.h"
# 1 "../include/linux/capability.h" 1
# 16 "../include/linux/capability.h"
# 1 "../include/uapi/linux/capability.h" 1
# 39 "../include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "../include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "../include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "../include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "../include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
extern bool ns_capable_setid(struct user_namespace *ns, int cap);
# 250 "../include/linux/capability.h"
extern bool privileged_wrt_inode_uidgid(struct user_namespace *ns, const struct inode *inode);
extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);


extern int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);

extern int cap_convert_nscap(struct dentry *dentry, void **ivalue, size_t size);
# 25 "../include/linux/fs.h" 2
# 1 "../include/linux/semaphore.h" 1
# 15 "../include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "../include/linux/semaphore.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { 0 } }, .magic = 0xdead4ead, .owner_cpu = -1, .owner = ((void *)-1L), .dep_map = { .name = "(*sem).lock" } }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 lockdep_init_map(&sem->lock.dep_map, "semaphore->lock", &__key, 0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "../include/linux/fs.h" 2
# 1 "../include/linux/fcntl.h" 1




# 1 "../include/uapi/linux/fcntl.h" 1




# 1 "../arch/arm/include/uapi/asm/fcntl.h" 1
# 10 "../arch/arm/include/uapi/asm/fcntl.h"
# 1 "../include/uapi/asm-generic/fcntl.h" 1
# 156 "../include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 196 "../include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 11 "../arch/arm/include/uapi/asm/fcntl.h" 2
# 6 "../include/uapi/linux/fcntl.h" 2
# 6 "../include/linux/fcntl.h" 2
# 27 "../include/linux/fs.h" 2
# 1 "../include/uapi/linux/fiemap.h" 1
# 17 "../include/uapi/linux/fiemap.h"
struct fiemap_extent {
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];
};

struct fiemap {
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];
};
# 28 "../include/linux/fs.h" 2



# 1 "../include/linux/migrate_mode.h" 1
# 15 "../include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 32 "../include/linux/fs.h" 2


# 1 "../include/linux/percpu-rwsem.h" 1







# 1 "../include/linux/rcuwait.h" 1
# 20 "../include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}

extern void rcuwait_wake_up(struct rcuwait *w);
# 9 "../include/linux/percpu-rwsem.h" 2
# 1 "../include/linux/rcu_sync.h" 1
# 17 "../include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "../include/linux/rcu_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_read_lock_held() && !rcu_read_lock_bh_held() && !rcu_read_lock_sched_held())) { __warned = true; lockdep_rcu_suspicious("../include/linux/rcu_sync.h", 37, "suspicious rcu_sync_is_idle() usage"); } } while (0);



 return !({ union { typeof(rsp->gp_state) __val; char __c[1]; } __u; if (1) __read_once_size(&(rsp->gp_state), __u.__c, sizeof(rsp->gp_state)); else __read_once_size_nocheck(&(rsp->gp_state), __u.__c, sizeof(rsp->gp_state)); do { } while (0); __u.__val; });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "../include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rw_semaphore rw_sem;
 struct rcuwait writer;
 int readers_block;
};
# 33 "../include/linux/percpu-rwsem.h"
extern int __percpu_down_read(struct percpu_rw_semaphore *, int);
extern void __percpu_up_read(struct percpu_rw_semaphore *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { __might_sleep("../include/linux/percpu-rwsem.h", 38, 0); do { } while (0); } while (0);

 lock_acquire(&sem->rw_sem.dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0));

 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
# 51 "../include/linux/percpu-rwsem.h"
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  __percpu_down_read(sem, false);




 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 int ret = 1;

 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);



 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  ret = __percpu_down_read(sem, true);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);





 if (ret)
  lock_acquire(&sem->rw_sem.dep_map, 0, 1, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0));

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(current_thread_info()->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 else
  __percpu_up_read(sem);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);

 lock_release(&sem->rw_sem.dep_map, 1, (unsigned long)__builtin_return_address(0));
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 118 "../include/linux/percpu-rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 lock_release(&sem->rw_sem.dep_map, 1, ip);

 if (!read)
  atomic_long_set(&sem->rw_sem.owner, (-2L));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 lock_acquire(&sem->rw_sem.dep_map, 0, 1, read, 1, ((void *)0), ip);

 if (!read)
  atomic_long_set(&sem->rw_sem.owner, (long)(current_thread_info()->task));

}
# 35 "../include/linux/fs.h" 2

# 1 "../include/linux/delayed_call.h" 1
# 10 "../include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 37 "../include/linux/fs.h" 2

# 1 "../include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 39 "../include/linux/fs.h" 2
# 1 "../include/linux/ioprio.h" 1





# 1 "../include/linux/sched/rt.h" 1






struct task_struct;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != ((void *)0);
}
# 58 "../include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "../include/linux/ioprio.h" 2
# 1 "../include/linux/iocontext.h" 1








enum {
 ICQ_EXITED = 1 << 2,
};
# 72 "../include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;




 int nr_batch_requests;
 unsigned long last_waited;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 129 "../include/linux/iocontext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_io_context_active(struct io_context *ioc)
{
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(atomic_long_read(&ioc->refcount) <= 0); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/iocontext.h", 131); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(({ union { typeof((&ioc->active_ref)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&ioc->active_ref)->counter), __u.__c, sizeof((&ioc->active_ref)->counter)); else __read_once_size_nocheck(&((&ioc->active_ref)->counter), __u.__c, sizeof((&ioc->active_ref)->counter)); do { } while (0); __u.__val; }) <= 0); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/iocontext.h", 132); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(({ union { typeof((&ioc->nr_tasks)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&ioc->nr_tasks)->counter), __u.__c, sizeof((&ioc->nr_tasks)->counter)); else __read_once_size_nocheck(&((&ioc->nr_tasks)->counter), __u.__c, sizeof((&ioc->nr_tasks)->counter)); do { } while (0); __u.__val; }) <= 0); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("../include/linux/iocontext.h", 141); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;

void put_io_context(struct io_context *ioc);
void put_io_context_active(struct io_context *ioc);
void exit_io_context(struct task_struct *task);
struct io_context *get_task_io_context(struct task_struct *task,
           gfp_t gfp_flags, int node);
# 8 "../include/linux/ioprio.h" 2
# 27 "../include/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};






enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 54 "../include/linux/ioprio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_current_ioprio(void)
{
 struct io_context *ioc = (current_thread_info()->task)->io_context;

 if (ioc)
  return ioc->ioprio;
 return (((IOPRIO_CLASS_NONE) << (13)) | 0);
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);


extern int ioprio_check_cap(int ioprio);
# 40 "../include/linux/fs.h" 2
# 1 "../include/linux/fs_types.h" 1
# 71 "../include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 41 "../include/linux/fs.h" 2




# 1 "../include/uapi/linux/fs.h" 1
# 14 "../include/uapi/linux/fs.h"
# 1 "../include/uapi/linux/ioctl.h" 1




# 1 "./arch/arm/include/generated/uapi/asm/ioctl.h" 1
# 1 "../include/asm-generic/ioctl.h" 1




# 1 "../include/uapi/asm-generic/ioctl.h" 1
# 6 "../include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "./arch/arm/include/generated/uapi/asm/ioctl.h" 2
# 6 "../include/uapi/linux/ioctl.h" 2
# 15 "../include/uapi/linux/fs.h" 2
# 51 "../include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 241 "../include/uapi/linux/fs.h"
struct fscrypt_policy {
 __u8 version;
 __u8 contents_encryption_mode;
 __u8 filenames_encryption_mode;
 __u8 flags;
 __u8 master_key_descriptor[8];
};
# 260 "../include/uapi/linux/fs.h"
struct fscrypt_key {
 __u32 mode;
 __u8 raw[64];
 __u32 size;
};
# 331 "../include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 46 "../include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fs_context;
struct fs_parameter_description;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 222 "../include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};





# 1 "../include/linux/quota.h" 1
# 40 "../include/linux/quota.h"
# 1 "../include/linux/percpu_counter.h" 1
# 20 "../include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "../include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{
 s64 ret = fbc->count;

 __asm__ __volatile__("" : : : "memory");
 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 177 "../include/linux/percpu_counter.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 41 "../include/linux/quota.h" 2

# 1 "../include/uapi/linux/dqblk_xfs.h" 1
# 53 "../include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 149 "../include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 192 "../include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u64 qs_pad2[8];
};
# 43 "../include/linux/quota.h" 2
# 1 "../include/linux/dqblk_v1.h" 1
# 44 "../include/linux/quota.h" 2
# 1 "../include/linux/dqblk_v2.h" 1








# 1 "../include/linux/dqblk_qtree.h" 1
# 18 "../include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "../include/linux/dqblk_v2.h" 2
# 45 "../include/linux/quota.h" 2



# 1 "../include/linux/projid.h" 1
# 17 "../include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 49 "../include/linux/quota.h" 2
# 1 "../include/uapi/linux/quota.h" 1
# 90 "../include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "../include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "../include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "../include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "../include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "../include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/quota.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "114" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/quota.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "141" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "../include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int info_dirty(struct mem_dqinfo *info)
{
 return test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 int stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "../include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "../include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 463 "../include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 490 "../include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { extern void __compiletime_assert_503(void) ; if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_503(); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}


extern void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype);
# 518 "../include/linux/quota.h"
struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 244 "../include/linux/fs.h" 2
# 277 "../include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 290 "../include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 316 "../include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 unsigned int ki_cookie;


};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 347 "../include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 442 "../include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;
 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long nrexceptional;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;





struct request_queue;

struct block_device {
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 struct mutex bd_mutex;
 void * bd_claiming;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;

 struct list_head bd_holder_disks;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 u8 bd_partno;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;
 struct backing_dev_info *bd_bdi;
 struct list_head bd_list;






 unsigned long bd_private;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
} ;
# 512 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ union { typeof((&mapping->i_mmap.rb_root)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); else __read_once_size_nocheck(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0));
}
# 554 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_writably_mapped(struct address_space *mapping)
{
 return ({ union { typeof((&mapping->i_mmap_writable)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap_writable)->counter), __u.__c, sizeof((&mapping->i_mmap_writable)->counter)); else __read_once_size_nocheck(&((&mapping->i_mmap_writable)->counter), __u.__c, sizeof((&mapping->i_mmap_writable)->counter)); do { } while (0); __u.__val; }) > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 592 "../include/linux/fs.h"
struct posix_acl;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;


 seqcount_t i_size_seqcount;



 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;

 struct bdi_writeback *i_wb;


 int i_wb_frn_winner;
 u16 i_wb_frn_avg_time;
 u16 i_wb_frn_history;

 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;



 struct fscrypt_info *i_crypt_info;


 void *i_private;
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 766 "../include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write_nested(&inode->i_rwsem, subclass);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read_nested(&inode->i_rwsem, subclass);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);
# 834 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t i_size_read(const struct inode *inode)
{

 loff_t i_size;
 unsigned int seq;

 do {
  seq = read_seqcount_begin(&inode->i_size_seqcount);
  i_size = inode->i_size;
 } while (read_seqcount_retry(&inode->i_size_seqcount, seq));
 return i_size;
# 855 "../include/linux/fs.h"
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_size_write(struct inode *inode, loff_t i_size)
{

 do { __preempt_count_add(1); __asm__ __volatile__("" : : : "memory"); } while (0);
 write_seqcount_begin(&inode->i_size_seqcount);
 inode->i_size = i_size;
 write_seqcount_end(&inode->i_size_seqcount);
 do { __asm__ __volatile__("" : : : "memory"); __preempt_count_sub(1); } while (0);







}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};




struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 struct list_head f_tfile_llink;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[0];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1012 "../include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);



# 1 "../include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1048 "../include/linux/fs.h" 2
# 1066 "../include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1118 "../include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);


extern int fcntl_getlk64(struct file *, unsigned int, struct flock64 *);
extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,
   struct flock64 *);


extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);
struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1298 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1389 "../include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;

 const struct fscrypt_operations *s_cop;

 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 atomic_long_t s_fsnotify_inode_refs;


 int s_readonly_remount;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << 7))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}

extern struct timespec64 timespec64_trunc(struct timespec64 t, unsigned gran);
extern struct timespec64 current_time(struct inode *inode);





void __sb_end_write(struct super_block *sb, int level);
int __sb_start_write(struct super_block *sb, int level, bool wait);
# 1575 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1587 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1599 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1623 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_WRITE, false);
}
# 1652 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT, true);
}
# 1670 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_FS, false);
}


extern bool inode_owner_or_capable(const struct inode *inode);




extern int vfs_create(struct inode *, struct dentry *, umode_t, bool);
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t);
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, const char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_whiteout(struct inode *, struct dentry *);

extern struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode,
      int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);




extern void inode_init_owner(struct inode *inode, const struct inode *dir,
   umode_t mode);
extern bool may_open_dev(const struct path *path);



struct fiemap_extent_info {
 unsigned int fi_flags;
 unsigned int fi_extents_mapped;
 unsigned int fi_extents_max;
 struct fiemap_extent *fi_extents_start;

};
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical,
       u64 phys, u64 len, u32 flags);
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};

struct block_device_operations;
# 1787 "../include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, bool spin);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct inode *,struct dentry *, umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *,const char *);
 int (*mkdir) (struct inode *,struct dentry *,umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*getattr) (const struct path *, struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct inode *, struct dentry *, umode_t);
 int (*set_acl)(struct inode *, struct posix_acl *, int);
} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector,
         unsigned long nr_segs, unsigned long fast_segs,
         struct iovec *fast_pointer,
         struct iovec **ret_pointer);

extern ssize_t __vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, const struct iovec *,
  unsigned long, loff_t *, rwf_t);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 1984 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2013 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool HAS_UNMAPPED_ID(struct inode *inode)
{
 return !uid_valid(inode->i_uid) || !gid_valid(inode->i_gid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}
# 2135 "../include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;






 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_description *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
};




extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
# 2225 "../include/linux/fs.h"
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);

void kill_block_super(struct super_block *sb);






void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2274 "../include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct file *);
extern int locks_mandatory_area(struct inode *, struct file *, loff_t, loff_t, unsigned char);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __mandatory_lock(struct inode *ino)
{
 return (ino->i_mode & (0002000 | 00010)) == 0002000;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mandatory_lock(struct inode *ino)
{
 return ((ino)->i_sb->s_flags & (64)) && __mandatory_lock(ino);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_verify_locked(struct file *file)
{
 if (mandatory_lock(file_inode(file)))
  return locks_mandatory_locked(file);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_verify_truncate(struct inode *inode,
        struct file *f,
        loff_t size)
{
 if (!inode->i_flctx || !mandatory_lock(inode))
  return 0;

 if (size < inode->i_size) {
  return locks_mandatory_area(inode, f, size, inode->i_size - 1,
    1);
 } else {
  return locks_mandatory_area(inode, f, inode->i_size, size - 1,
    1);
 }
}
# 2392 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_lease(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_layout(struct inode *inode, bool wait)
{
 __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2482 "../include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

extern long vfs_truncate(const struct path *, loff_t);
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       const char *, int, umode_t);
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);



extern int ioctl_preallocate(struct file *filp, void *argp);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;





extern int register_blkdev(unsigned int, const char *);
extern void unregister_blkdev(unsigned int, const char *);
extern void bdev_unhash_inode(dev_t dev);
extern struct block_device *bdget(dev_t);
extern struct block_device *bdgrab(struct block_device *bdev);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern void invalidate_bdev(struct block_device *);
extern void iterate_bdevs(void (*)(struct block_device *, void *), void *);
extern int sync_blockdev(struct block_device *bdev);
extern void kill_bdev(struct block_device *);
extern struct super_block *freeze_bdev(struct block_device *);
extern void emergency_thaw_all(void);
extern void emergency_thaw_bdev(struct super_block *sb);
extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);
extern int fsync_bdev(struct block_device *);

extern struct super_block *blockdev_superblock;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return sb == blockdev_superblock;
}
# 2589 "../include/linux/fs.h"
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
extern struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
            void *holder);
extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
           void *holder);
extern void blkdev_put(struct block_device *bdev, fmode_t mode);
extern int __blkdev_reread_part(struct block_device *bdev);
extern int blkdev_reread_part(struct block_device *bdev);


extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
extern void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk);
# 2630 "../include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}







extern const char *__bdevname(dev_t, char *buffer);
extern const char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev(const char *);
extern void blkdev_show(struct seq_file *,off_t);





extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);


extern void check_disk_size_change(struct gendisk *disk,
  struct block_device *bdev, bool verbose);
extern int revalidate_disk(struct gendisk *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *, bool);
extern int invalidate_partition(struct gendisk *, int);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2743 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2760 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2773 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & (1 << 4)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & (1 << 5)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *, struct inode **);
extern int inode_permission(struct inode *, int);
extern int generic_permission(struct inode *, int);
extern int __check_sticky(struct inode *dir, struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 2855 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_open_for_write(const struct inode *inode)
{
 return ({ union { typeof((&inode->i_writecount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&inode->i_writecount)->counter), __u.__c, sizeof((&inode->i_writecount)->counter)); else __read_once_size_nocheck(&((&inode->i_writecount)->counter), __u.__c, sizeof((&inode->i_writecount)->counter)); do { } while (0); __u.__val; }) > 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_dec(struct inode *inode)
{
 do { if (__builtin_expect(!!(!({ union { typeof((&inode->i_readcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&inode->i_readcount)->counter), __u.__c, sizeof((&inode->i_readcount)->counter)); else __read_once_size_nocheck(&((&inode->i_readcount)->counter), __u.__c, sizeof((&inode->i_readcount)->counter)); do { } while (0); __u.__val; })), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/fs.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "2881" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 atomic_dec(&inode->i_readcount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 2898 "../include/linux/fs.h"
extern int do_pipe_flags(int *, int);
# 2914 "../include/linux/fs.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_FIRMWARE_PREALLOC_BUFFER, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_X509_CERTIFICATE, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "x509-certificate", "",
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if ((unsigned)id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

extern int kernel_read_file(struct file *, void **, loff_t *, loff_t,
       enum kernel_read_file_id);
extern int kernel_read_file_from_path(const char *, void **, loff_t *, loff_t,
          enum kernel_read_file_id);
extern int kernel_read_file_from_fd(int, void **, loff_t *, loff_t,
        enum kernel_read_file_id);
extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);

extern void lockdep_annotate_inode_mutex_key(struct inode *inode);



extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);


extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_remap_checks(struct file *file_in, loff_t pos_in,
    struct file *file_out, loff_t pos_out,
    loff_t *count, unsigned int remap_flags);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
extern int generic_copy_file_checks(struct file *file_in, loff_t pos_in,
        struct file *file_out, loff_t pos_out,
        size_t *count, unsigned int flags);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);


extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

void dio_end_io(struct bio *bio);
void dio_warn_stale_pagecache(struct file *filp);

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3123 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3135 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
extern void generic_fillattr(struct inode *, struct kstat *);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

extern int vfs_statx(int, const char *, int, struct kstat *, u32);
extern int vfs_statx_fd(unsigned int, struct kstat *, u32, unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_statx(-100, filename, 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_statx(-100, name, 0x100 | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_fstatat(int dfd, const char *filename,
         struct kstat *stat, int flags)
{
 return vfs_statx(dfd, filename, flags | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_fstat(int fd, struct kstat *stat)
{
 return vfs_statx_fd(fd, stat, 0x000007ffU, 0);
}


extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern int __generic_block_fiemap(struct inode *inode,
      struct fiemap_extent_info *fieinfo,
      loff_t start, loff_t len,
      get_block_t *get_block);
extern int generic_block_fiemap(struct inode *inode,
    struct fiemap_extent_info *fieinfo, u64 start,
    u64 len, get_block_t *get_block);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_super_thawed(struct block_device *);
extern struct super_block *get_super_exclusive_thawed(struct block_device *bdev);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct dentry *, struct iattr *);
extern int simple_getattr(const struct path *, struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *,
    struct inode *, struct dentry *, unsigned int);
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int noop_set_page_dirty(struct page *page);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





extern int setattr_prepare(struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
extern void setattr_copy(struct inode *inode, const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool io_is_direct(struct file *filp)
{
 return (filp->f_flags & 0200000) || ((filp->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_dax(struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= (1 << 1);
 if (io_is_direct(file))
  res |= (1 << 2);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & 1)))
  res |= (1 << 4);
 if (file->f_flags & 04000000)
  res |= (1 << 5);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  ki->ki_flags |= (1 << 7);
 }
 if (flags & (( __kernel_rwf_t)0x00000001))
  ki->ki_flags |= (1 << 3);
 if (flags & (( __kernel_rwf_t)0x00000002))
  ki->ki_flags |= (1 << 4);
 if (flags & (( __kernel_rwf_t)0x00000004))
  ki->ki_flags |= ((1 << 4) | (1 << 5));
 if (flags & (( __kernel_rwf_t)0x00000010))
  ki->ki_flags |= (1 << 1);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[0];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3423 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) get_filesystem_list(char *buf);
# 3454 "../include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_sticky(struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(dir, inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= 4096;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & 16);
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);


extern struct sock *io_uring_get_socket(struct file *file);







int vfs_ioc_setflags_prepare(struct inode *inode, unsigned int oldflags,
        unsigned int flags);

int vfs_ioc_fssetxattr_check(struct inode *inode, const struct fsxattr *old_fa,
        struct fsxattr *fa);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void simple_fill_fsxattr(struct fsxattr *fa, __u32 xflags)
{
 memset(fa, 0, sizeof(*fa));
 fa->fsx_xflags = xflags;
}
# 12 "../include/linux/seq_file.h" 2
# 1 "../include/linux/cred.h" 1
# 13 "../include/linux/cred.h"
# 1 "../include/linux/key.h" 1
# 17 "../include/linux/key.h"
# 1 "../include/linux/sysctl.h" 1
# 30 "../include/linux/sysctl.h"
# 1 "../include/uapi/linux/sysctl.h" 1
# 35 "../include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "../include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler (struct ctl_table *ctl, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec_minmax(struct ctl_table *table, int write,
     void *buffer, size_t *lenp,
     loff_t *ppos);
extern int proc_dointvec_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          void *, size_t *, loff_t *);
extern int proc_do_large_bitmap(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_do_static_key(struct ctl_table *table, int write,
         void *buffer, size_t *lenp,
         loff_t *ppos);
# 105 "../include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)({ union { typeof((&poll->event)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&poll->event)->counter), __u.__c, sizeof((&poll->event)->counter)); else __read_once_size_nocheck(&((&poll->event)->counter), __u.__c, sizeof((&poll->event)->counter)); do { } while (0); __u.__val; });
}
# 123 "../include/linux/sysctl.h"
struct ctl_table
{
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header
{
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);

extern struct ctl_table sysctl_mount_point[];
# 243 "../include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write,
         void *buffer, size_t *lenp, loff_t *ppos);
# 18 "../include/linux/key.h" 2


# 1 "../include/linux/assoc_array.h" 1
# 22 "../include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "../include/linux/key.h" 2







typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct net;
# 74 "../include/linux/key.h"
struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct key_tag;
struct keyring_list;
struct keyring_name;

struct key_tag {
 struct callback_head rcu;
 refcount_t usage;
 bool removed;
};

struct keyring_index_key {

 unsigned long hash;
 union {
  struct {




   char desc[sizeof(long) - 1];
   u8 desc_len;

  };
  unsigned long x;
 };
 struct key_type *type;
 struct key_tag *domain_tag;
 const char *description;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 130 "../include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 172 "../include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };
 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time64_t expiry;
  time64_t revoked_at;
 };
 time64_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 219 "../include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   unsigned long hash;
   unsigned long len_desc;
   struct key_type *type;
   struct key_tag *domain_tag;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 254 "../include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 273 "../include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);
extern bool key_put_tag(struct key_tag *tag);
extern void key_remove_domain(struct key_tag *domain_tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *__key_get(struct key *key)
{
 refcount_inc_checked(&key->usage);
 return key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key_tag(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag,
       const char *callout_info);

extern struct key *request_key_rcu(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         struct key_tag *domain_tag,
         const void *callout_info,
         size_t callout_len,
         void *aux);
# 319 "../include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info)
{
 return request_key_tag(type, description, ((void *)0), callout_info);
}
# 346 "../include/linux/key.h"
extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_move(struct key *key,
      struct key *from_keyring,
      struct key *to_keyring,
      unsigned int flags);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description,
    bool recurse);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     key_perm_t perm);
extern void key_free_user_ns(struct user_namespace *);
# 422 "../include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) short key_read_state(const struct key *key)
{

 return ({ typeof(*&key->state) ___p1 = ({ union { typeof(*&key->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(*&key->state), __u.__c, sizeof(*&key->state)); else __read_once_size_nocheck(&(*&key->state), __u.__c, sizeof(*&key->state)); do { } while (0); __u.__val; }); do { extern void __compiletime_assert_425(void) ; if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)))) __compiletime_assert_425(); } while (0); __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r" (0) : "memory"); ___p1; });
}
# 435 "../include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 458 "../include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct cred *new_cred);
extern void key_fsgid_changed(struct cred *new_cred);
extern void key_init(void);
# 14 "../include/linux/cred.h" 2



# 1 "../include/linux/sched/user.h" 1
# 13 "../include/linux/sched/user.h"
struct user_struct {
 refcount_t __count;
 atomic_t processes;
 atomic_t sigpending;

 atomic_t fanotify_listeners;


 atomic_long_t epoll_watches;



 unsigned long mq_bytes;

 unsigned long locked_shm;
 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;



 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc_checked(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "../include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[0];
} ;
# 40 "../include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 56 "../include/linux/cred.h"
extern struct group_info init_groups;

extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
extern int groups_search(const struct group_info *, kgid_t);

extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 111 "../include/linux/cred.h"
struct cred {
 atomic_t usage;

 atomic_t subscribers;
 void *put_addr;
 unsigned magic;



 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct group_info *group_info;
 struct callback_head rcu;
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) cred_init(void);





extern void __invalid_creds(const struct cred *, const char *, unsigned);
extern void __validate_process_creds(struct task_struct *,
         const char *, unsigned);

extern bool creds_are_invalid(const struct cred *cred);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __validate_creds(const struct cred *cred,
        const char *file, unsigned line)
{
 if (__builtin_expect(!!(creds_are_invalid(cred)), 0))
  __invalid_creds(cred, file, line);
}
# 197 "../include/linux/cred.h"
extern void validate_creds_for_do_exit(struct task_struct *);
# 210 "../include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 224 "../include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 243 "../include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 do { __validate_creds((cred), "../include/linux/cred.h", 248); } while(0);
 return get_new_cred(nonconst_cred);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return ((void *)0);
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return ((void *)0);
 do { __validate_creds((cred), "../include/linux/cred.h", 259); } while(0);
 return cred;
}
# 274 "../include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  do { __validate_creds((cred), "../include/linux/cred.h", 279); } while(0);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 385 "../include/linux/cred.h"
extern struct user_namespace init_user_ns;
# 13 "../include/linux/seq_file.h" 2

struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 u64 version;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 51 "../include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 64 "../include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/seq_file.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "66" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 84 "../include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { asm volatile("1:\t" ".long " "( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )" "\n\t" "\n" ".pushsection .rodata.str, \"aMS\", %progbits, 1\n" "2:\t.asciz " "\"../include/linux/seq_file.h\"" "\n" ".popsection\n" ".pushsection __bug_table,\"aw\"\n" ".align 2\n" "3:\t.word 1b, 2b\n" "\t.hword " "89" ", 0\n" ".popsection"); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
  m->count += num;
 }
}
# 102 "../include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape(struct seq_file *m, const char *s, const char *esc);
void seq_escape_mem_ascii(struct seq_file *m, const char *src, size_t isz);

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);
# 163 "../include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{

 return seq->file->f_cred->user_ns;




}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 213 "../include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 17 "../include/linux/pinctrl/pinctrl.h" 2
# 1 "../include/linux/pinctrl/pinctrl-state.h" 1
# 18 "../include/linux/pinctrl/pinctrl.h" 2
# 1 "../include/linux/pinctrl/devinfo.h" 1
# 20 "../include/linux/pinctrl/devinfo.h"
# 1 "../include/linux/pinctrl/consumer.h" 1
# 20 "../include/linux/pinctrl/consumer.h"
struct pinctrl;
struct pinctrl_state;
struct device;




extern int pinctrl_gpio_request(unsigned gpio);
extern void pinctrl_gpio_free(unsigned gpio);
extern int pinctrl_gpio_direction_input(unsigned gpio);
extern int pinctrl_gpio_direction_output(unsigned gpio);
extern int pinctrl_gpio_set_config(unsigned gpio, unsigned long config);

extern struct pinctrl * __attribute__((__warn_unused_result__)) pinctrl_get(struct device *dev);
extern void pinctrl_put(struct pinctrl *p);
extern struct pinctrl_state * __attribute__((__warn_unused_result__)) pinctrl_lookup_state(
       struct pinctrl *p,
       const char *name);
extern int pinctrl_select_state(struct pinctrl *p, struct pinctrl_state *s);

extern struct pinctrl * __attribute__((__warn_unused_result__)) devm_pinctrl_get(struct device *dev);
extern void devm_pinctrl_put(struct pinctrl *p);


extern int pinctrl_pm_select_default_state(struct device *dev);
extern int pinctrl_pm_select_sleep_state(struct device *dev);
extern int pinctrl_pm_select_idle_state(struct device *dev);
# 136 "../include/linux/pinctrl/consumer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pinctrl * __attribute__((__warn_unused_result__)) pinctrl_get_select(
     struct device *dev, const char *name)
{
 struct pinctrl *p;
 struct pinctrl_state *s;
 int ret;

 p = pinctrl_get(dev);
 if (IS_ERR(p))
  return p;

 s = pinctrl_lookup_state(p, name);
 if (IS_ERR(s)) {
  pinctrl_put(p);
  return ERR_CAST(s);
 }

 ret = pinctrl_select_state(p, s);
 if (ret < 0) {
  pinctrl_put(p);
  return ERR_PTR(ret);
 }

 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pinctrl * __attribute__((__warn_unused_result__)) pinctrl_get_select_default(
     struct device *dev)
{
 return pinctrl_get_select(dev, "default");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pinctrl * __attribute__((__warn_unused_result__)) devm_pinctrl_get_select(
     struct device *dev, const char *name)
{
 struct pinctrl *p;
 struct pinctrl_state *s;
 int ret;

 p = devm_pinctrl_get(dev);
 if (IS_ERR(p))
  return p;

 s = pinctrl_lookup_state(p, name);
 if (IS_ERR(s)) {
  devm_pinctrl_put(p);
  return ERR_CAST(s);
 }

 ret = pinctrl_select_state(p, s);
 if (ret < 0) {
  devm_pinctrl_put(p);
  return ERR_PTR(ret);
 }

 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pinctrl * __attribute__((__warn_unused_result__)) devm_pinctrl_get_select_default(
     struct device *dev)
{
 return devm_pinctrl_get_select(dev, "default");
}
# 21 "../include/linux/pinctrl/devinfo.h" 2
# 30 "../include/linux/pinctrl/devinfo.h"
struct dev_pin_info {
 struct pinctrl *p;
 struct pinctrl_state *default_state;
 struct pinctrl_state *init_state;

 struct pinctrl_state *sleep_state;
 struct pinctrl_state *idle_state;

};

extern int pinctrl_bind_pins(struct device *dev);
extern int pinctrl_init_done(struct device *dev);
# 19 "../include/linux/pinctrl/pinctrl.h" 2

struct device;
struct pinctrl_dev;
struct pinctrl_map;
struct pinmux_ops;
struct pinconf_ops;
struct pin_config_item;
struct gpio_chip;
struct device_node;
# 36 "../include/linux/pinctrl/pinctrl.h"
struct pinctrl_pin_desc {
 unsigned number;
 const char *name;
 void *drv_data;
};
# 58 "../include/linux/pinctrl/pinctrl.h"
struct pinctrl_gpio_range {
 struct list_head node;
 const char *name;
 unsigned int id;
 unsigned int base;
 unsigned int pin_base;
 unsigned const *pins;
 unsigned int npins;
 struct gpio_chip *gc;
};
# 88 "../include/linux/pinctrl/pinctrl.h"
struct pinctrl_ops {
 int (*get_groups_count) (struct pinctrl_dev *pctldev);
 const char *(*get_group_name) (struct pinctrl_dev *pctldev,
           unsigned selector);
 int (*get_group_pins) (struct pinctrl_dev *pctldev,
          unsigned selector,
          const unsigned **pins,
          unsigned *num_pins);
 void (*pin_dbg_show) (struct pinctrl_dev *pctldev, struct seq_file *s,
     unsigned offset);
 int (*dt_node_to_map) (struct pinctrl_dev *pctldev,
          struct device_node *np_config,
          struct pinctrl_map **map, unsigned *num_maps);
 void (*dt_free_map) (struct pinctrl_dev *pctldev,
        struct pinctrl_map *map, unsigned num_maps);
};
# 130 "../include/linux/pinctrl/pinctrl.h"
struct pinctrl_desc {
 const char *name;
 const struct pinctrl_pin_desc *pins;
 unsigned int npins;
 const struct pinctrl_ops *pctlops;
 const struct pinmux_ops *pmxops;
 const struct pinconf_ops *confops;
 struct module *owner;

 unsigned int num_custom_params;
 const struct pinconf_generic_params *custom_params;
 const struct pin_config_item *custom_conf_items;

 bool link_consumers;
};



extern int pinctrl_register_and_init(struct pinctrl_desc *pctldesc,
         struct device *dev, void *driver_data,
         struct pinctrl_dev **pctldev);
extern int pinctrl_enable(struct pinctrl_dev *pctldev);


extern struct pinctrl_dev *pinctrl_register(struct pinctrl_desc *pctldesc,
    struct device *dev, void *driver_data);

extern void pinctrl_unregister(struct pinctrl_dev *pctldev);

extern int devm_pinctrl_register_and_init(struct device *dev,
    struct pinctrl_desc *pctldesc,
    void *driver_data,
    struct pinctrl_dev **pctldev);


extern struct pinctrl_dev *devm_pinctrl_register(struct device *dev,
    struct pinctrl_desc *pctldesc,
    void *driver_data);

extern void devm_pinctrl_unregister(struct device *dev,
    struct pinctrl_dev *pctldev);

extern void pinctrl_add_gpio_range(struct pinctrl_dev *pctldev,
    struct pinctrl_gpio_range *range);
extern void pinctrl_add_gpio_ranges(struct pinctrl_dev *pctldev,
    struct pinctrl_gpio_range *ranges,
    unsigned nranges);
extern void pinctrl_remove_gpio_range(struct pinctrl_dev *pctldev,
    struct pinctrl_gpio_range *range);

extern struct pinctrl_dev *pinctrl_find_and_add_gpio_range(const char *devname,
  struct pinctrl_gpio_range *range);
extern struct pinctrl_gpio_range *
pinctrl_find_gpio_range_from_pin(struct pinctrl_dev *pctldev,
     unsigned int pin);
extern int pinctrl_get_group_pins(struct pinctrl_dev *pctldev,
    const char *pin_group, const unsigned **pins,
    unsigned *num_pins);


extern struct pinctrl_dev *of_pinctrl_get(struct device_node *np);
# 199 "../include/linux/pinctrl/pinctrl.h"
extern const char *pinctrl_dev_get_name(struct pinctrl_dev *pctldev);
extern const char *pinctrl_dev_get_devname(struct pinctrl_dev *pctldev);
extern void *pinctrl_dev_get_drvdata(struct pinctrl_dev *pctldev);
# 14 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/pinctrl/pinmux.h" 1
# 18 "../include/linux/pinctrl/pinmux.h"
struct pinctrl_dev;
# 60 "../include/linux/pinctrl/pinmux.h"
struct pinmux_ops {
 int (*request) (struct pinctrl_dev *pctldev, unsigned offset);
 int (*free) (struct pinctrl_dev *pctldev, unsigned offset);
 int (*get_functions_count) (struct pinctrl_dev *pctldev);
 const char *(*get_function_name) (struct pinctrl_dev *pctldev,
       unsigned selector);
 int (*get_function_groups) (struct pinctrl_dev *pctldev,
      unsigned selector,
      const char * const **groups,
      unsigned *num_groups);
 int (*set_mux) (struct pinctrl_dev *pctldev, unsigned func_selector,
   unsigned group_selector);
 int (*gpio_request_enable) (struct pinctrl_dev *pctldev,
        struct pinctrl_gpio_range *range,
        unsigned offset);
 void (*gpio_disable_free) (struct pinctrl_dev *pctldev,
       struct pinctrl_gpio_range *range,
       unsigned offset);
 int (*gpio_set_direction) (struct pinctrl_dev *pctldev,
       struct pinctrl_gpio_range *range,
       unsigned offset,
       bool input);
 bool strict;
};
# 15 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/pinctrl/pinconf.h" 1
# 16 "../include/linux/pinctrl/pinconf.h"
struct pinctrl_dev;
struct seq_file;
# 38 "../include/linux/pinctrl/pinconf.h"
struct pinconf_ops {

 bool is_generic;

 int (*pin_config_get) (struct pinctrl_dev *pctldev,
          unsigned pin,
          unsigned long *config);
 int (*pin_config_set) (struct pinctrl_dev *pctldev,
          unsigned pin,
          unsigned long *configs,
          unsigned num_configs);
 int (*pin_config_group_get) (struct pinctrl_dev *pctldev,
         unsigned selector,
         unsigned long *config);
 int (*pin_config_group_set) (struct pinctrl_dev *pctldev,
         unsigned selector,
         unsigned long *configs,
         unsigned num_configs);
 void (*pin_config_dbg_show) (struct pinctrl_dev *pctldev,
         struct seq_file *s,
         unsigned offset);
 void (*pin_config_group_dbg_show) (struct pinctrl_dev *pctldev,
        struct seq_file *s,
        unsigned selector);
 void (*pin_config_config_dbg_show) (struct pinctrl_dev *pctldev,
         struct seq_file *s,
         unsigned long config);
};
# 16 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../include/linux/pinctrl/pinconf-generic.h" 1
# 15 "../include/linux/pinctrl/pinconf-generic.h"
# 1 "../include/linux/pinctrl/machine.h" 1
# 18 "../include/linux/pinctrl/machine.h"
enum pinctrl_map_type {
 PIN_MAP_TYPE_INVALID,
 PIN_MAP_TYPE_DUMMY_STATE,
 PIN_MAP_TYPE_MUX_GROUP,
 PIN_MAP_TYPE_CONFIGS_PIN,
 PIN_MAP_TYPE_CONFIGS_GROUP,
};
# 33 "../include/linux/pinctrl/machine.h"
struct pinctrl_map_mux {
 const char *group;
 const char *function;
};
# 47 "../include/linux/pinctrl/machine.h"
struct pinctrl_map_configs {
 const char *group_or_pin;
 unsigned long *configs;
 unsigned num_configs;
};
# 67 "../include/linux/pinctrl/machine.h"
struct pinctrl_map {
 const char *dev_name;
 const char *name;
 enum pinctrl_map_type type;
 const char *ctrl_dev_name;
 union {
  struct pinctrl_map_mux mux;
  struct pinctrl_map_configs configs;
 } data;
};
# 154 "../include/linux/pinctrl/machine.h"
extern int pinctrl_register_mappings(const struct pinctrl_map *map,
    unsigned num_maps);
extern void pinctrl_provide_dummies(void);
# 16 "../include/linux/pinctrl/pinconf-generic.h" 2

struct pinctrl_dev;
struct pinctrl_map;
# 111 "../include/linux/pinctrl/pinconf-generic.h"
enum pin_config_param {
 PIN_CONFIG_BIAS_BUS_HOLD,
 PIN_CONFIG_BIAS_DISABLE,
 PIN_CONFIG_BIAS_HIGH_IMPEDANCE,
 PIN_CONFIG_BIAS_PULL_DOWN,
 PIN_CONFIG_BIAS_PULL_PIN_DEFAULT,
 PIN_CONFIG_BIAS_PULL_UP,
 PIN_CONFIG_DRIVE_OPEN_DRAIN,
 PIN_CONFIG_DRIVE_OPEN_SOURCE,
 PIN_CONFIG_DRIVE_PUSH_PULL,
 PIN_CONFIG_DRIVE_STRENGTH,
 PIN_CONFIG_DRIVE_STRENGTH_UA,
 PIN_CONFIG_INPUT_DEBOUNCE,
 PIN_CONFIG_INPUT_ENABLE,
 PIN_CONFIG_INPUT_SCHMITT,
 PIN_CONFIG_INPUT_SCHMITT_ENABLE,
 PIN_CONFIG_LOW_POWER_MODE,
 PIN_CONFIG_OUTPUT_ENABLE,
 PIN_CONFIG_OUTPUT,
 PIN_CONFIG_POWER_SOURCE,
 PIN_CONFIG_SLEEP_HARDWARE_STATE,
 PIN_CONFIG_SLEW_RATE,
 PIN_CONFIG_SKEW_DELAY,
 PIN_CONFIG_PERSIST_STATE,
 PIN_CONFIG_END = 0x7F,
 PIN_CONFIG_MAX = 0xFF,
};
# 151 "../include/linux/pinctrl/pinconf-generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum pin_config_param pinconf_to_config_param(unsigned long config)
{
 return (enum pin_config_param) (config & 0xffUL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 pinconf_to_config_argument(unsigned long config)
{
 return (u32) ((config >> 8) & 0xffffffUL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pinconf_to_config_packed(enum pin_config_param param,
           u32 argument)
{
 return ((argument << 8) | ((unsigned long) param & 0xffUL));
}





struct pin_config_item {
 const enum pin_config_param param;
 const char * const display;
 const char * const format;
 bool has_arg;
};

struct pinconf_generic_params {
 const char * const property;
 enum pin_config_param param;
 u32 default_value;
};

int pinconf_generic_dt_subnode_to_map(struct pinctrl_dev *pctldev,
  struct device_node *np, struct pinctrl_map **map,
  unsigned *reserved_maps, unsigned *num_maps,
  enum pinctrl_map_type type);
int pinconf_generic_dt_node_to_map(struct pinctrl_dev *pctldev,
  struct device_node *np_config, struct pinctrl_map **map,
  unsigned *num_maps, enum pinctrl_map_type type);
void pinconf_generic_dt_free_map(struct pinctrl_dev *pctldev,
  struct pinctrl_map *map, unsigned num_maps);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pinconf_generic_dt_node_to_map_group(
  struct pinctrl_dev *pctldev, struct device_node *np_config,
  struct pinctrl_map **map, unsigned *num_maps)
{
 return pinconf_generic_dt_node_to_map(pctldev, np_config, map, num_maps,
   PIN_MAP_TYPE_CONFIGS_GROUP);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pinconf_generic_dt_node_to_map_pin(
  struct pinctrl_dev *pctldev, struct device_node *np_config,
  struct pinctrl_map **map, unsigned *num_maps)
{
 return pinconf_generic_dt_node_to_map(pctldev, np_config, map, num_maps,
   PIN_MAP_TYPE_CONFIGS_PIN);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pinconf_generic_dt_node_to_map_all(
  struct pinctrl_dev *pctldev, struct device_node *np_config,
  struct pinctrl_map **map, unsigned *num_maps)
{




 return pinconf_generic_dt_node_to_map(pctldev, np_config, map, num_maps,
   PIN_MAP_TYPE_INVALID);
}
# 17 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2



# 1 "../drivers/pinctrl/aspeed/../core.h" 1
# 17 "../drivers/pinctrl/aspeed/../core.h"
struct pinctrl_gpio_range;
# 42 "../drivers/pinctrl/aspeed/../core.h"
struct pinctrl_dev {
 struct list_head node;
 struct pinctrl_desc *desc;
 struct xarray pin_desc_tree;

 struct xarray pin_group_tree;
 unsigned int num_groups;


 struct xarray pin_function_tree;
 unsigned int num_functions;

 struct list_head gpio_ranges;
 struct device *dev;
 struct module *owner;
 void *driver_data;
 struct pinctrl *p;
 struct pinctrl_state *hog_default;
 struct pinctrl_state *hog_sleep;
 struct mutex mutex;

 struct dentry *device_root;

};
# 77 "../drivers/pinctrl/aspeed/../core.h"
struct pinctrl {
 struct list_head node;
 struct device *dev;
 struct list_head states;
 struct pinctrl_state *state;
 struct list_head dt_maps;
 struct kref users;
};







struct pinctrl_state {
 struct list_head node;
 const char *name;
 struct list_head settings;
};






struct pinctrl_setting_mux {
 unsigned group;
 unsigned func;
};
# 116 "../drivers/pinctrl/aspeed/../core.h"
struct pinctrl_setting_configs {
 unsigned group_or_pin;
 unsigned long *configs;
 unsigned num_configs;
};
# 131 "../drivers/pinctrl/aspeed/../core.h"
struct pinctrl_setting {
 struct list_head node;
 enum pinctrl_map_type type;
 struct pinctrl_dev *pctldev;
 const char *dev_name;
 union {
  struct pinctrl_setting_mux mux;
  struct pinctrl_setting_configs configs;
 } data;
};
# 159 "../drivers/pinctrl/aspeed/../core.h"
struct pin_desc {
 struct pinctrl_dev *pctldev;
 const char *name;
 bool dynamic_name;
 void *drv_data;


 unsigned mux_usecount;
 const char *mux_owner;
 const struct pinctrl_setting_mux *mux_setting;
 const char *gpio_owner;

};







struct pinctrl_maps {
 struct list_head node;
 const struct pinctrl_map *maps;
 unsigned num_maps;
};
# 194 "../drivers/pinctrl/aspeed/../core.h"
struct group_desc {
 const char *name;
 int *pins;
 int num_pins;
 void *data;
};

int pinctrl_generic_get_group_count(struct pinctrl_dev *pctldev);

const char *pinctrl_generic_get_group_name(struct pinctrl_dev *pctldev,
        unsigned int group_selector);

int pinctrl_generic_get_group_pins(struct pinctrl_dev *pctldev,
       unsigned int group_selector,
       const unsigned int **pins,
       unsigned int *npins);

struct group_desc *pinctrl_generic_get_group(struct pinctrl_dev *pctldev,
          unsigned int group_selector);

int pinctrl_generic_add_group(struct pinctrl_dev *pctldev, const char *name,
         int *gpins, int ngpins, void *data);

int pinctrl_generic_remove_group(struct pinctrl_dev *pctldev,
     unsigned int group_selector);



struct pinctrl_dev *get_pinctrl_dev_from_devname(const char *dev_name);
struct pinctrl_dev *get_pinctrl_dev_from_of_node(struct device_node *np);
int pin_get_from_name(struct pinctrl_dev *pctldev, const char *name);
const char *pin_get_name(struct pinctrl_dev *pctldev, const unsigned pin);
int pinctrl_get_group_selector(struct pinctrl_dev *pctldev,
          const char *pin_group);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pin_desc *pin_desc_get(struct pinctrl_dev *pctldev,
         unsigned int pin)
{
 return radix_tree_lookup(&pctldev->pin_desc_tree, pin);
}

extern struct pinctrl_gpio_range *
pinctrl_find_gpio_range_from_pin_nolock(struct pinctrl_dev *pctldev,
     unsigned int pin);

int pinctrl_register_map(const struct pinctrl_map *maps, unsigned num_maps,
    bool dup);
void pinctrl_unregister_map(const struct pinctrl_map *map);

extern int pinctrl_force_sleep(struct pinctrl_dev *pctldev);
extern int pinctrl_force_default(struct pinctrl_dev *pctldev);

extern struct mutex pinctrl_maps_mutex;
extern struct list_head pinctrl_maps;
# 21 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../drivers/pinctrl/aspeed/../pinctrl-utils.h" 1
# 25 "../drivers/pinctrl/aspeed/../pinctrl-utils.h"
int pinctrl_utils_reserve_map(struct pinctrl_dev *pctldev,
  struct pinctrl_map **map, unsigned *reserved_maps,
  unsigned *num_maps, unsigned reserve);
int pinctrl_utils_add_map_mux(struct pinctrl_dev *pctldev,
  struct pinctrl_map **map, unsigned *reserved_maps,
  unsigned *num_maps, const char *group,
  const char *function);
int pinctrl_utils_add_map_configs(struct pinctrl_dev *pctldev,
  struct pinctrl_map **map, unsigned *reserved_maps,
  unsigned *num_maps, const char *group,
  unsigned long *configs, unsigned num_configs,
  enum pinctrl_map_type type);
int pinctrl_utils_add_config(struct pinctrl_dev *pctldev,
  unsigned long **configs, unsigned *num_configs,
  unsigned long config);
void pinctrl_utils_free_map(struct pinctrl_dev *pctldev,
  struct pinctrl_map *map, unsigned num_maps);
# 22 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 1 "../drivers/pinctrl/aspeed/pinctrl-aspeed.h" 1
# 13 "../drivers/pinctrl/aspeed/pinctrl-aspeed.h"
# 1 "../include/linux/regmap.h" 1
# 16 "../include/linux/regmap.h"
# 1 "../include/linux/delay.h" 1
# 24 "../include/linux/delay.h"
extern unsigned long loops_per_jiffy;


# 1 "../arch/arm/include/asm/delay.h" 1
# 11 "../arch/arm/include/asm/delay.h"
# 1 "./arch/arm/include/generated/uapi/asm/param.h" 1
# 12 "../arch/arm/include/asm/delay.h" 2
# 46 "../arch/arm/include/asm/delay.h"
struct delay_timer {
 unsigned long (*read_current_timer)(void);
 unsigned long freq;
};

extern struct arm_delay_ops {
 void (*delay)(unsigned long);
 void (*const_udelay)(unsigned long);
 void (*udelay)(unsigned long);
 unsigned long ticks_per_jiffy;
} arm_delay_ops;
# 67 "../arch/arm/include/asm/delay.h"
extern void __bad_udelay(void);
# 89 "../arch/arm/include/asm/delay.h"
extern void __loop_delay(unsigned long loops);
extern void __loop_udelay(unsigned long usecs);
extern void __loop_const_udelay(unsigned long);



extern void register_current_timer_delay(const struct delay_timer *timer);
# 27 "../include/linux/delay.h" 2
# 49 "../include/linux/delay.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ndelay(unsigned long x)
{
 (__builtin_constant_p((((x) + (1000) - 1) / (1000))) ? (((((x) + (1000) - 1) / (1000))) > (2 * 1000) ? __bad_udelay() : arm_delay_ops.const_udelay(((((x) + (1000) - 1) / (1000))) * (((2147 * 100 + 483648 * 100 / 1000000UL))))) : arm_delay_ops.udelay((((x) + (1000) - 1) / (1000))));
}



extern unsigned long lpj_fine;
void calibrate_delay(void);
void __attribute__((weak)) calibration_delay_done(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}
# 17 "../include/linux/regmap.h" 2




struct module;
struct clk;
struct device;
struct i2c_client;
struct i3c_device;
struct irq_domain;
struct slim_device;
struct spi_device;
struct spmi_device;
struct regmap;
struct regmap_range_cfg;
struct regmap_field;
struct snd_ac97;
struct sdw_slave;


enum regcache_type {
 REGCACHE_NONE,
 REGCACHE_RBTREE,
 REGCACHE_COMPRESSED,
 REGCACHE_FLAT,
};
# 53 "../include/linux/regmap.h"
struct reg_default {
 unsigned int reg;
 unsigned int def;
};
# 68 "../include/linux/regmap.h"
struct reg_sequence {
 unsigned int reg;
 unsigned int def;
 unsigned int delay_us;
};
# 190 "../include/linux/regmap.h"
enum regmap_endian {

 REGMAP_ENDIAN_DEFAULT = 0,
 REGMAP_ENDIAN_BIG,
 REGMAP_ENDIAN_LITTLE,
 REGMAP_ENDIAN_NATIVE,
};
# 205 "../include/linux/regmap.h"
struct regmap_range {
 unsigned int range_min;
 unsigned int range_max;
};
# 225 "../include/linux/regmap.h"
struct regmap_access_table {
 const struct regmap_range *yes_ranges;
 unsigned int n_yes_ranges;
 const struct regmap_range *no_ranges;
 unsigned int n_no_ranges;
};

typedef void (*regmap_lock)(void *);
typedef void (*regmap_unlock)(void *);
# 352 "../include/linux/regmap.h"
struct regmap_config {
 const char *name;

 int reg_bits;
 int reg_stride;
 int pad_bits;
 int val_bits;

 bool (*writeable_reg)(struct device *dev, unsigned int reg);
 bool (*readable_reg)(struct device *dev, unsigned int reg);
 bool (*volatile_reg)(struct device *dev, unsigned int reg);
 bool (*precious_reg)(struct device *dev, unsigned int reg);
 bool (*writeable_noinc_reg)(struct device *dev, unsigned int reg);
 bool (*readable_noinc_reg)(struct device *dev, unsigned int reg);

 bool disable_locking;
 regmap_lock lock;
 regmap_unlock unlock;
 void *lock_arg;

 int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
 int (*reg_write)(void *context, unsigned int reg, unsigned int val);

 bool fast_io;

 unsigned int max_register;
 const struct regmap_access_table *wr_table;
 const struct regmap_access_table *rd_table;
 const struct regmap_access_table *volatile_table;
 const struct regmap_access_table *precious_table;
 const struct regmap_access_table *wr_noinc_table;
 const struct regmap_access_table *rd_noinc_table;
 const struct reg_default *reg_defaults;
 unsigned int num_reg_defaults;
 enum regcache_type cache_type;
 const void *reg_defaults_raw;
 unsigned int num_reg_defaults_raw;

 unsigned long read_flag_mask;
 unsigned long write_flag_mask;
 bool zero_flag_mask;

 bool use_single_read;
 bool use_single_write;
 bool can_multi_write;

 enum regmap_endian reg_format_endian;
 enum regmap_endian val_format_endian;

 const struct regmap_range_cfg *ranges;
 unsigned int num_ranges;

 bool use_hwlock;
 unsigned int hwlock_id;
 unsigned int hwlock_mode;
};
# 429 "../include/linux/regmap.h"
struct regmap_range_cfg {
 const char *name;


 unsigned int range_min;
 unsigned int range_max;


 unsigned int selector_reg;
 unsigned int selector_mask;
 int selector_shift;


 unsigned int window_start;
 unsigned int window_len;
};

struct regmap_async;

typedef int (*regmap_hw_write)(void *context, const void *data,
          size_t count);
typedef int (*regmap_hw_gather_write)(void *context,
          const void *reg, size_t reg_len,
          const void *val, size_t val_len);
typedef int (*regmap_hw_async_write)(void *context,
         const void *reg, size_t reg_len,
         const void *val, size_t val_len,
         struct regmap_async *async);
typedef int (*regmap_hw_read)(void *context,
         const void *reg_buf, size_t reg_size,
         void *val_buf, size_t val_size);
typedef int (*regmap_hw_reg_read)(void *context, unsigned int reg,
      unsigned int *val);
typedef int (*regmap_hw_reg_write)(void *context, unsigned int reg,
       unsigned int val);
typedef int (*regmap_hw_reg_update_bits)(void *context, unsigned int reg,
      unsigned int mask, unsigned int val);
typedef struct regmap_async *(*regmap_hw_async_alloc)(void);
typedef void (*regmap_hw_free_context)(void *context);
# 504 "../include/linux/regmap.h"
struct regmap_bus {
 bool fast_io;
 regmap_hw_write write;
 regmap_hw_gather_write gather_write;
 regmap_hw_async_write async_write;
 regmap_hw_reg_write reg_write;
 regmap_hw_reg_update_bits reg_update_bits;
 regmap_hw_read read;
 regmap_hw_reg_read reg_read;
 regmap_hw_free_context free_context;
 regmap_hw_async_alloc async_alloc;
 u8 read_flag_mask;
 enum regmap_endian reg_format_endian_default;
 enum regmap_endian val_format_endian_default;
 size_t max_raw_read;
 size_t max_raw_write;
};
# 529 "../include/linux/regmap.h"
struct regmap *__regmap_init(struct device *dev,
        const struct regmap_bus *bus,
        void *bus_context,
        const struct regmap_config *config,
        struct lock_class_key *lock_key,
        const char *lock_name);
struct regmap *__regmap_init_i2c(struct i2c_client *i2c,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
struct regmap *__regmap_init_sccb(struct i2c_client *i2c,
      const struct regmap_config *config,
      struct lock_class_key *lock_key,
      const char *lock_name);
struct regmap *__regmap_init_slimbus(struct slim_device *slimbus,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
struct regmap *__regmap_init_spi(struct spi_device *dev,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
struct regmap *__regmap_init_spmi_base(struct spmi_device *dev,
           const struct regmap_config *config,
           struct lock_class_key *lock_key,
           const char *lock_name);
struct regmap *__regmap_init_spmi_ext(struct spmi_device *dev,
          const struct regmap_config *config,
          struct lock_class_key *lock_key,
          const char *lock_name);
struct regmap *__regmap_init_w1(struct device *w1_dev,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
struct regmap *__regmap_init_mmio_clk(struct device *dev, const char *clk_id,
          void *regs,
          const struct regmap_config *config,
          struct lock_class_key *lock_key,
          const char *lock_name);
struct regmap *__regmap_init_ac97(struct snd_ac97 *ac97,
      const struct regmap_config *config,
      struct lock_class_key *lock_key,
      const char *lock_name);
struct regmap *__regmap_init_sdw(struct sdw_slave *sdw,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);

struct regmap *__devm_regmap_init(struct device *dev,
      const struct regmap_bus *bus,
      void *bus_context,
      const struct regmap_config *config,
      struct lock_class_key *lock_key,
      const char *lock_name);
struct regmap *__devm_regmap_init_i2c(struct i2c_client *i2c,
          const struct regmap_config *config,
          struct lock_class_key *lock_key,
          const char *lock_name);
struct regmap *__devm_regmap_init_sccb(struct i2c_client *i2c,
           const struct regmap_config *config,
           struct lock_class_key *lock_key,
           const char *lock_name);
struct regmap *__devm_regmap_init_spi(struct spi_device *dev,
          const struct regmap_config *config,
          struct lock_class_key *lock_key,
          const char *lock_name);
struct regmap *__devm_regmap_init_spmi_base(struct spmi_device *dev,
         const struct regmap_config *config,
         struct lock_class_key *lock_key,
         const char *lock_name);
struct regmap *__devm_regmap_init_spmi_ext(struct spmi_device *dev,
        const struct regmap_config *config,
        struct lock_class_key *lock_key,
        const char *lock_name);
struct regmap *__devm_regmap_init_w1(struct device *w1_dev,
          const struct regmap_config *config,
          struct lock_class_key *lock_key,
          const char *lock_name);
struct regmap *__devm_regmap_init_mmio_clk(struct device *dev,
        const char *clk_id,
        void *regs,
        const struct regmap_config *config,
        struct lock_class_key *lock_key,
        const char *lock_name);
struct regmap *__devm_regmap_init_ac97(struct snd_ac97 *ac97,
           const struct regmap_config *config,
           struct lock_class_key *lock_key,
           const char *lock_name);
struct regmap *__devm_regmap_init_sdw(struct sdw_slave *sdw,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
struct regmap *__devm_regmap_init_slimbus(struct slim_device *slimbus,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
struct regmap *__devm_regmap_init_i3c(struct i3c_device *i3c,
     const struct regmap_config *config,
     struct lock_class_key *lock_key,
     const char *lock_name);
# 666 "../include/linux/regmap.h"
int regmap_attach_dev(struct device *dev, struct regmap *map,
        const struct regmap_config *config);
# 800 "../include/linux/regmap.h"
bool regmap_ac97_default_volatile(struct device *dev, unsigned int reg);
# 1002 "../include/linux/regmap.h"
int regmap_mmio_attach_clk(struct regmap *map, struct clk *clk);
void regmap_mmio_detach_clk(struct regmap *map);
void regmap_exit(struct regmap *map);
int regmap_reinit_cache(struct regmap *map,
   const struct regmap_config *config);
struct regmap *dev_get_regmap(struct device *dev, const char *name);
struct device *regmap_get_device(struct regmap *map);
int regmap_write(struct regmap *map, unsigned int reg, unsigned int val);
int regmap_write_async(struct regmap *map, unsigned int reg, unsigned int val);
int regmap_raw_write(struct regmap *map, unsigned int reg,
       const void *val, size_t val_len);
int regmap_noinc_write(struct regmap *map, unsigned int reg,
       const void *val, size_t val_len);
int regmap_bulk_write(struct regmap *map, unsigned int reg, const void *val,
   size_t val_count);
int regmap_multi_reg_write(struct regmap *map, const struct reg_sequence *regs,
   int num_regs);
int regmap_multi_reg_write_bypassed(struct regmap *map,
        const struct reg_sequence *regs,
        int num_regs);
int regmap_raw_write_async(struct regmap *map, unsigned int reg,
      const void *val, size_t val_len);
int regmap_read(struct regmap *map, unsigned int reg, unsigned int *val);
int regmap_raw_read(struct regmap *map, unsigned int reg,
      void *val, size_t val_len);
int regmap_noinc_read(struct regmap *map, unsigned int reg,
        void *val, size_t val_len);
int regmap_bulk_read(struct regmap *map, unsigned int reg, void *val,
       size_t val_count);
int regmap_update_bits_base(struct regmap *map, unsigned int reg,
       unsigned int mask, unsigned int val,
       bool *change, bool async, bool force);
int regmap_get_val_bytes(struct regmap *map);
int regmap_get_max_register(struct regmap *map);
int regmap_get_reg_stride(struct regmap *map);
int regmap_async_complete(struct regmap *map);
bool regmap_can_raw_write(struct regmap *map);
size_t regmap_get_raw_read_max(struct regmap *map);
size_t regmap_get_raw_write_max(struct regmap *map);

int regcache_sync(struct regmap *map);
int regcache_sync_region(struct regmap *map, unsigned int min,
    unsigned int max);
int regcache_drop_region(struct regmap *map, unsigned int min,
    unsigned int max);
void regcache_cache_only(struct regmap *map, bool enable);
void regcache_cache_bypass(struct regmap *map, bool enable);
void regcache_mark_dirty(struct regmap *map);

bool regmap_check_range_table(struct regmap *map, unsigned int reg,
         const struct regmap_access_table *table);

int regmap_register_patch(struct regmap *map, const struct reg_sequence *regs,
     int num_regs);
int regmap_parse_val(struct regmap *map, const void *buf,
    unsigned int *val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool regmap_reg_in_range(unsigned int reg,
           const struct regmap_range *range)
{
 return reg >= range->range_min && reg <= range->range_max;
}

bool regmap_reg_in_ranges(unsigned int reg,
     const struct regmap_range *ranges,
     unsigned int nranges);
# 1078 "../include/linux/regmap.h"
struct reg_field {
 unsigned int reg;
 unsigned int lsb;
 unsigned int msb;
 unsigned int id_size;
 unsigned int id_offset;
};







struct regmap_field *regmap_field_alloc(struct regmap *regmap,
  struct reg_field reg_field);
void regmap_field_free(struct regmap_field *field);

struct regmap_field *devm_regmap_field_alloc(struct device *dev,
  struct regmap *regmap, struct reg_field reg_field);
void devm_regmap_field_free(struct device *dev, struct regmap_field *field);

int regmap_field_read(struct regmap_field *field, unsigned int *val);
int regmap_field_update_bits_base(struct regmap_field *field,
      unsigned int mask, unsigned int val,
      bool *change, bool async, bool force);
int regmap_fields_read(struct regmap_field *field, unsigned int id,
         unsigned int *val);
int regmap_fields_update_bits_base(struct regmap_field *field, unsigned int id,
       unsigned int mask, unsigned int val,
       bool *change, bool async, bool force);
# 1119 "../include/linux/regmap.h"
struct regmap_irq_type {
 unsigned int type_reg_offset;
 unsigned int type_reg_mask;
 unsigned int type_rising_val;
 unsigned int type_falling_val;
 unsigned int type_level_low_val;
 unsigned int type_level_high_val;
 unsigned int types_supported;
};
# 1136 "../include/linux/regmap.h"
struct regmap_irq {
 unsigned int reg_offset;
 unsigned int mask;
 struct regmap_irq_type type;
};
# 1154 "../include/linux/regmap.h"
struct regmap_irq_sub_irq_map {
 unsigned int num_regs;
 unsigned int *offset;
};
# 1224 "../include/linux/regmap.h"
struct regmap_irq_chip {
 const char *name;

 unsigned int main_status;
 unsigned int num_main_status_bits;
 struct regmap_irq_sub_irq_map *sub_reg_offsets;
 int num_main_regs;

 unsigned int status_base;
 unsigned int mask_base;
 unsigned int unmask_base;
 unsigned int ack_base;
 unsigned int wake_base;
 unsigned int type_base;
 unsigned int irq_reg_stride;
 bool mask_writeonly:1;
 bool init_ack_masked:1;
 bool mask_invert:1;
 bool use_ack:1;
 bool ack_invert:1;
 bool wake_invert:1;
 bool runtime_pm:1;
 bool type_invert:1;
 bool type_in_mask:1;
 bool clear_on_unmask:1;

 int num_regs;

 const struct regmap_irq *irqs;
 int num_irqs;

 int num_type_reg;
 unsigned int type_reg_stride;

 int (*handle_pre_irq)(void *irq_drv_data);
 int (*handle_post_irq)(void *irq_drv_data);
 void *irq_drv_data;
};

struct regmap_irq_chip_data;

int regmap_add_irq_chip(struct regmap *map, int irq, int irq_flags,
   int irq_base, const struct regmap_irq_chip *chip,
   struct regmap_irq_chip_data **data);
void regmap_del_irq_chip(int irq, struct regmap_irq_chip_data *data);

int devm_regmap_add_irq_chip(struct device *dev, struct regmap *map, int irq,
        int irq_flags, int irq_base,
        const struct regmap_irq_chip *chip,
        struct regmap_irq_chip_data **data);
void devm_regmap_del_irq_chip(struct device *dev, int irq,
         struct regmap_irq_chip_data *data);

int regmap_irq_chip_get_base(struct regmap_irq_chip_data *data);
int regmap_irq_get_virq(struct regmap_irq_chip_data *data, int irq);
struct irq_domain *regmap_irq_get_domain(struct regmap_irq_chip_data *data);
# 14 "../drivers/pinctrl/aspeed/pinctrl-aspeed.h" 2

# 1 "../drivers/pinctrl/aspeed/pinmux-aspeed.h" 1







# 1 "/home/nathan/cbl/usr/lib/clang/10.0.0/include/stdbool.h" 1 3
# 9 "../drivers/pinctrl/aspeed/pinmux-aspeed.h" 2
# 442 "../drivers/pinctrl/aspeed/pinmux-aspeed.h"
struct aspeed_sig_desc {
 unsigned int ip;
 unsigned int reg;
 u32 mask;
 u32 enable;
 u32 disable;
};
# 463 "../drivers/pinctrl/aspeed/pinmux-aspeed.h"
struct aspeed_sig_expr {
 const char *signal;
 const char *function;
 int ndescs;
 const struct aspeed_sig_desc *descs;
};
# 480 "../drivers/pinctrl/aspeed/pinmux-aspeed.h"
struct aspeed_pin_desc {
 const char *name;
 const struct aspeed_sig_expr ***prios;
};
# 750 "../drivers/pinctrl/aspeed/pinmux-aspeed.h"
struct aspeed_pin_group {
 const char *name;
 const unsigned int *pins;
 const unsigned int npins;
};







struct aspeed_pin_function {
 const char *name;
 const char *const *groups;
 unsigned int ngroups;
};







struct aspeed_pinmux_data;

struct aspeed_pinmux_ops {
 int (*set)(const struct aspeed_pinmux_data *ctx,
     const struct aspeed_sig_expr *expr, _Bool enabled);
};

struct aspeed_pinmux_data {
 struct regmap *maps[3];

 const struct aspeed_pinmux_ops *ops;

 const struct aspeed_pin_group *groups;
 const unsigned int ngroups;

 const struct aspeed_pin_function *functions;
 const unsigned int nfunctions;
};

int aspeed_sig_desc_eval(const struct aspeed_sig_desc *desc, _Bool enabled,
    struct regmap *map);

int aspeed_sig_expr_eval(const struct aspeed_pinmux_data *ctx,
    const struct aspeed_sig_expr *expr,
    _Bool enabled);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int aspeed_sig_expr_set(const struct aspeed_pinmux_data *ctx,
          const struct aspeed_sig_expr *expr,
          _Bool enabled)
{
 return ctx->ops->set(ctx, expr, enabled);
}
# 16 "../drivers/pinctrl/aspeed/pinctrl-aspeed.h" 2







struct aspeed_pin_config {
 enum pin_config_param param;
 unsigned int pins[2];
 unsigned int reg;
 u8 bit;
 u8 value;
};
# 38 "../drivers/pinctrl/aspeed/pinctrl-aspeed.h"
struct aspeed_pinctrl_data {
 struct regmap *scu;

 const struct pinctrl_pin_desc *pins;
 const unsigned int npins;

 const struct aspeed_pin_config *configs;
 const unsigned int nconfigs;

 struct aspeed_pinmux_data pinmux;
};


int aspeed_pinctrl_get_groups_count(struct pinctrl_dev *pctldev);
const char *aspeed_pinctrl_get_group_name(struct pinctrl_dev *pctldev,
  unsigned int group);
int aspeed_pinctrl_get_group_pins(struct pinctrl_dev *pctldev,
  unsigned int group, const unsigned int **pins,
  unsigned int *npins);
void aspeed_pinctrl_pin_dbg_show(struct pinctrl_dev *pctldev,
  struct seq_file *s, unsigned int offset);
int aspeed_pinmux_get_fn_count(struct pinctrl_dev *pctldev);
const char *aspeed_pinmux_get_fn_name(struct pinctrl_dev *pctldev,
  unsigned int function);
int aspeed_pinmux_get_fn_groups(struct pinctrl_dev *pctldev,
  unsigned int function, const char * const **groups,
  unsigned int * const num_groups);
int aspeed_pinmux_set_mux(struct pinctrl_dev *pctldev, unsigned int function,
  unsigned int group);
int aspeed_gpio_request_enable(struct pinctrl_dev *pctldev,
  struct pinctrl_gpio_range *range,
  unsigned int offset);
int aspeed_pinctrl_probe(struct platform_device *pdev,
  struct pinctrl_desc *pdesc,
  struct aspeed_pinctrl_data *pdata);
int aspeed_pin_config_get(struct pinctrl_dev *pctldev, unsigned int offset,
  unsigned long *config);
int aspeed_pin_config_set(struct pinctrl_dev *pctldev, unsigned int offset,
  unsigned long *configs, unsigned int num_configs);
int aspeed_pin_config_group_get(struct pinctrl_dev *pctldev,
  unsigned int selector,
  unsigned long *config);
int aspeed_pin_config_group_set(struct pinctrl_dev *pctldev,
  unsigned int selector,
  unsigned long *configs,
  unsigned int num_configs);
# 23 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c" 2
# 67 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
static const struct aspeed_sig_desc sig_descs_MAC1LINK_MAC1LINK[] = { { 0, 0x80, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_MAC1LINK_MAC1LINK = { .signal = "MAC1LINK", .function = "MAC1LINK", .ndescs = (sizeof(sig_descs_MAC1LINK_MAC1LINK) / sizeof((sig_descs_MAC1LINK_MAC1LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_MAC1LINK_MAC1LINK)), typeof(&(sig_descs_MAC1LINK_MAC1LINK)[0])))); }))), .descs = &(sig_descs_MAC1LINK_MAC1LINK)[0], }; static const struct aspeed_sig_expr *sig_exprs_MAC1LINK_MAC1LINK[] = { (&sig_expr_MAC1LINK_MAC1LINK), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_0_MAC1LINK[(sizeof(sig_exprs_MAC1LINK_MAC1LINK) / sizeof((sig_exprs_MAC1LINK_MAC1LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_MAC1LINK_MAC1LINK)), typeof(&(sig_exprs_MAC1LINK_MAC1LINK)[0])))); })))] __attribute__((alias("sig_exprs_MAC1LINK_MAC1LINK"))); static const struct aspeed_sig_desc sig_descs_GPIOA0_GPIOA0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA0_GPIOA0 = { .signal = "GPIOA0", .function = "GPIOA0", .ndescs = (sizeof(sig_descs_GPIOA0_GPIOA0) / sizeof((sig_descs_GPIOA0_GPIOA0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA0_GPIOA0)), typeof(&(sig_descs_GPIOA0_GPIOA0)[0])))); }))), .descs = &(sig_descs_GPIOA0_GPIOA0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA0_GPIOA0[] = { (&sig_expr_GPIOA0_GPIOA0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_0_GPIOA0[(sizeof(sig_exprs_GPIOA0_GPIOA0) / sizeof((sig_exprs_GPIOA0_GPIOA0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA0_GPIOA0)), typeof(&(sig_exprs_GPIOA0_GPIOA0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA0_GPIOA0"))); static const struct aspeed_sig_expr **pin_exprs_0[] = { sig_exprs_0_MAC1LINK, sig_exprs_0_GPIOA0, ((void *)0) }; static const struct aspeed_pin_desc pin_0 = { "0", (&pin_exprs_0[0]) }; static const int group_pins_MAC1LINK[] = { 0 }; static const char *func_groups_MAC1LINK[] = { "MAC1LINK" };


static const struct aspeed_sig_desc sig_descs_MAC2LINK_MAC2LINK[] = { { 0, 0x80, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_MAC2LINK_MAC2LINK = { .signal = "MAC2LINK", .function = "MAC2LINK", .ndescs = (sizeof(sig_descs_MAC2LINK_MAC2LINK) / sizeof((sig_descs_MAC2LINK_MAC2LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_MAC2LINK_MAC2LINK)), typeof(&(sig_descs_MAC2LINK_MAC2LINK)[0])))); }))), .descs = &(sig_descs_MAC2LINK_MAC2LINK)[0], }; static const struct aspeed_sig_expr *sig_exprs_MAC2LINK_MAC2LINK[] = { (&sig_expr_MAC2LINK_MAC2LINK), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_1_MAC2LINK[(sizeof(sig_exprs_MAC2LINK_MAC2LINK) / sizeof((sig_exprs_MAC2LINK_MAC2LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_MAC2LINK_MAC2LINK)), typeof(&(sig_exprs_MAC2LINK_MAC2LINK)[0])))); })))] __attribute__((alias("sig_exprs_MAC2LINK_MAC2LINK"))); static const struct aspeed_sig_desc sig_descs_GPIOA1_GPIOA1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA1_GPIOA1 = { .signal = "GPIOA1", .function = "GPIOA1", .ndescs = (sizeof(sig_descs_GPIOA1_GPIOA1) / sizeof((sig_descs_GPIOA1_GPIOA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA1_GPIOA1)), typeof(&(sig_descs_GPIOA1_GPIOA1)[0])))); }))), .descs = &(sig_descs_GPIOA1_GPIOA1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA1_GPIOA1[] = { (&sig_expr_GPIOA1_GPIOA1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_1_GPIOA1[(sizeof(sig_exprs_GPIOA1_GPIOA1) / sizeof((sig_exprs_GPIOA1_GPIOA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA1_GPIOA1)), typeof(&(sig_exprs_GPIOA1_GPIOA1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA1_GPIOA1"))); static const struct aspeed_sig_expr **pin_exprs_1[] = { sig_exprs_1_MAC2LINK, sig_exprs_1_GPIOA1, ((void *)0) }; static const struct aspeed_pin_desc pin_1 = { "1", (&pin_exprs_1[0]) }; static const int group_pins_MAC2LINK[] = { 1 }; static const char *func_groups_MAC2LINK[] = { "MAC2LINK" };


static const struct aspeed_sig_desc sig_descs_SPI1CS1_SPI1CS1[] = { { 0, 0x80, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SPI1CS1_SPI1CS1 = { .signal = "SPI1CS1", .function = "SPI1CS1", .ndescs = (sizeof(sig_descs_SPI1CS1_SPI1CS1) / sizeof((sig_descs_SPI1CS1_SPI1CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CS1_SPI1CS1)), typeof(&(sig_descs_SPI1CS1_SPI1CS1)[0])))); }))), .descs = &(sig_descs_SPI1CS1_SPI1CS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SPI1CS1_SPI1CS1[] = { (&sig_expr_SPI1CS1_SPI1CS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_2_SPI1CS1[(sizeof(sig_exprs_SPI1CS1_SPI1CS1) / sizeof((sig_exprs_SPI1CS1_SPI1CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI1CS1_SPI1CS1)), typeof(&(sig_exprs_SPI1CS1_SPI1CS1)[0])))); })))] __attribute__((alias("sig_exprs_SPI1CS1_SPI1CS1")));
static const struct aspeed_sig_desc sig_descs_TIMER3_TIMER3[] = { { 0, 0x80, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_TIMER3_TIMER3 = { .signal = "TIMER3", .function = "TIMER3", .ndescs = (sizeof(sig_descs_TIMER3_TIMER3) / sizeof((sig_descs_TIMER3_TIMER3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TIMER3_TIMER3)), typeof(&(sig_descs_TIMER3_TIMER3)[0])))); }))), .descs = &(sig_descs_TIMER3_TIMER3)[0], }; static const struct aspeed_sig_expr *sig_exprs_TIMER3_TIMER3[] = { (&sig_expr_TIMER3_TIMER3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_2_TIMER3[(sizeof(sig_exprs_TIMER3_TIMER3) / sizeof((sig_exprs_TIMER3_TIMER3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TIMER3_TIMER3)), typeof(&(sig_exprs_TIMER3_TIMER3)[0])))); })))] __attribute__((alias("sig_exprs_TIMER3_TIMER3")));
static const struct aspeed_sig_desc sig_descs_GPIOA2_GPIOA2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA2_GPIOA2 = { .signal = "GPIOA2", .function = "GPIOA2", .ndescs = (sizeof(sig_descs_GPIOA2_GPIOA2) / sizeof((sig_descs_GPIOA2_GPIOA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA2_GPIOA2)), typeof(&(sig_descs_GPIOA2_GPIOA2)[0])))); }))), .descs = &(sig_descs_GPIOA2_GPIOA2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA2_GPIOA2[] = { (&sig_expr_GPIOA2_GPIOA2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_2_GPIOA2[(sizeof(sig_exprs_GPIOA2_GPIOA2) / sizeof((sig_exprs_GPIOA2_GPIOA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA2_GPIOA2)), typeof(&(sig_exprs_GPIOA2_GPIOA2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA2_GPIOA2"))); static const struct aspeed_sig_expr **pin_exprs_2[] = { sig_exprs_2_SPI1CS1, sig_exprs_2_TIMER3, sig_exprs_2_GPIOA2, ((void *)0) }; static const struct aspeed_pin_desc pin_2 = { "2", (&pin_exprs_2[0]) };
static const int group_pins_SPI1CS1[] = { 2 }; static const char *func_groups_SPI1CS1[] = { "SPI1CS1" };
static const int group_pins_TIMER3[] = { 2 }; static const char *func_groups_TIMER3[] = { "TIMER3" };


static const struct aspeed_sig_desc sig_descs_TIMER4_TIMER4[] = { { 0, 0x80, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_TIMER4_TIMER4 = { .signal = "TIMER4", .function = "TIMER4", .ndescs = (sizeof(sig_descs_TIMER4_TIMER4) / sizeof((sig_descs_TIMER4_TIMER4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TIMER4_TIMER4)), typeof(&(sig_descs_TIMER4_TIMER4)[0])))); }))), .descs = &(sig_descs_TIMER4_TIMER4)[0], }; static const struct aspeed_sig_expr *sig_exprs_TIMER4_TIMER4[] = { (&sig_expr_TIMER4_TIMER4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_3_TIMER4[(sizeof(sig_exprs_TIMER4_TIMER4) / sizeof((sig_exprs_TIMER4_TIMER4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TIMER4_TIMER4)), typeof(&(sig_exprs_TIMER4_TIMER4)[0])))); })))] __attribute__((alias("sig_exprs_TIMER4_TIMER4"))); static const struct aspeed_sig_desc sig_descs_GPIOA3_GPIOA3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA3_GPIOA3 = { .signal = "GPIOA3", .function = "GPIOA3", .ndescs = (sizeof(sig_descs_GPIOA3_GPIOA3) / sizeof((sig_descs_GPIOA3_GPIOA3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA3_GPIOA3)), typeof(&(sig_descs_GPIOA3_GPIOA3)[0])))); }))), .descs = &(sig_descs_GPIOA3_GPIOA3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA3_GPIOA3[] = { (&sig_expr_GPIOA3_GPIOA3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_3_GPIOA3[(sizeof(sig_exprs_GPIOA3_GPIOA3) / sizeof((sig_exprs_GPIOA3_GPIOA3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA3_GPIOA3)), typeof(&(sig_exprs_GPIOA3_GPIOA3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA3_GPIOA3"))); static const struct aspeed_sig_expr **pin_exprs_3[] = { sig_exprs_3_TIMER4, sig_exprs_3_GPIOA3, ((void *)0) }; static const struct aspeed_pin_desc pin_3 = { "3", (&pin_exprs_3[0]) }; static const int group_pins_TIMER4[] = { 3 }; static const char *func_groups_TIMER4[] = { "TIMER4" };




static const struct aspeed_sig_desc sig_descs_SCL9_I2C9[] = { { 0, 0x90, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_SCL9_I2C9 = { .signal = "SCL9", .function = "I2C9", .ndescs = (sizeof(sig_descs_SCL9_I2C9) / sizeof((sig_descs_SCL9_I2C9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL9_I2C9)), typeof(&(sig_descs_SCL9_I2C9)[0])))); }))), .descs = &(sig_descs_SCL9_I2C9)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL9_I2C9[] = { (&sig_expr_SCL9_I2C9), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_4_SCL9[(sizeof(sig_exprs_SCL9_I2C9) / sizeof((sig_exprs_SCL9_I2C9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL9_I2C9)), typeof(&(sig_exprs_SCL9_I2C9)[0])))); })))] __attribute__((alias("sig_exprs_SCL9_I2C9")));
static const struct aspeed_sig_desc sig_descs_TIMER5_TIMER5[] = { { 0, 0x80, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_TIMER5_TIMER5 = { .signal = "TIMER5", .function = "TIMER5", .ndescs = (sizeof(sig_descs_TIMER5_TIMER5) / sizeof((sig_descs_TIMER5_TIMER5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TIMER5_TIMER5)), typeof(&(sig_descs_TIMER5_TIMER5)[0])))); }))), .descs = &(sig_descs_TIMER5_TIMER5)[0], }; static const struct aspeed_sig_expr *sig_exprs_TIMER5_TIMER5[] = { (&sig_expr_TIMER5_TIMER5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_4_TIMER5[(sizeof(sig_exprs_TIMER5_TIMER5) / sizeof((sig_exprs_TIMER5_TIMER5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TIMER5_TIMER5)), typeof(&(sig_exprs_TIMER5_TIMER5)[0])))); })))] __attribute__((alias("sig_exprs_TIMER5_TIMER5")));
static const struct aspeed_sig_desc sig_descs_GPIOA4_GPIOA4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA4_GPIOA4 = { .signal = "GPIOA4", .function = "GPIOA4", .ndescs = (sizeof(sig_descs_GPIOA4_GPIOA4) / sizeof((sig_descs_GPIOA4_GPIOA4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA4_GPIOA4)), typeof(&(sig_descs_GPIOA4_GPIOA4)[0])))); }))), .descs = &(sig_descs_GPIOA4_GPIOA4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA4_GPIOA4[] = { (&sig_expr_GPIOA4_GPIOA4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_4_GPIOA4[(sizeof(sig_exprs_GPIOA4_GPIOA4) / sizeof((sig_exprs_GPIOA4_GPIOA4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA4_GPIOA4)), typeof(&(sig_exprs_GPIOA4_GPIOA4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA4_GPIOA4"))); static const struct aspeed_sig_expr **pin_exprs_4[] = { sig_exprs_4_SCL9, sig_exprs_4_TIMER5, sig_exprs_4_GPIOA4, ((void *)0) }; static const struct aspeed_pin_desc pin_4 = { "4", (&pin_exprs_4[0]) };

static const int group_pins_TIMER5[] = { 4 }; static const char *func_groups_TIMER5[] = { "TIMER5" };


static const struct aspeed_sig_desc sig_descs_SDA9_I2C9[] = { { 0, 0x90, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_SDA9_I2C9 = { .signal = "SDA9", .function = "I2C9", .ndescs = (sizeof(sig_descs_SDA9_I2C9) / sizeof((sig_descs_SDA9_I2C9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA9_I2C9)), typeof(&(sig_descs_SDA9_I2C9)[0])))); }))), .descs = &(sig_descs_SDA9_I2C9)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA9_I2C9[] = { (&sig_expr_SDA9_I2C9), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_5_SDA9[(sizeof(sig_exprs_SDA9_I2C9) / sizeof((sig_exprs_SDA9_I2C9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA9_I2C9)), typeof(&(sig_exprs_SDA9_I2C9)[0])))); })))] __attribute__((alias("sig_exprs_SDA9_I2C9")));
static const struct aspeed_sig_desc sig_descs_TIMER6_TIMER6[] = { { 0, 0x80, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_TIMER6_TIMER6 = { .signal = "TIMER6", .function = "TIMER6", .ndescs = (sizeof(sig_descs_TIMER6_TIMER6) / sizeof((sig_descs_TIMER6_TIMER6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TIMER6_TIMER6)), typeof(&(sig_descs_TIMER6_TIMER6)[0])))); }))), .descs = &(sig_descs_TIMER6_TIMER6)[0], }; static const struct aspeed_sig_expr *sig_exprs_TIMER6_TIMER6[] = { (&sig_expr_TIMER6_TIMER6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_5_TIMER6[(sizeof(sig_exprs_TIMER6_TIMER6) / sizeof((sig_exprs_TIMER6_TIMER6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TIMER6_TIMER6)), typeof(&(sig_exprs_TIMER6_TIMER6)[0])))); })))] __attribute__((alias("sig_exprs_TIMER6_TIMER6")));
static const struct aspeed_sig_desc sig_descs_GPIOA5_GPIOA5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA5_GPIOA5 = { .signal = "GPIOA5", .function = "GPIOA5", .ndescs = (sizeof(sig_descs_GPIOA5_GPIOA5) / sizeof((sig_descs_GPIOA5_GPIOA5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA5_GPIOA5)), typeof(&(sig_descs_GPIOA5_GPIOA5)[0])))); }))), .descs = &(sig_descs_GPIOA5_GPIOA5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA5_GPIOA5[] = { (&sig_expr_GPIOA5_GPIOA5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_5_GPIOA5[(sizeof(sig_exprs_GPIOA5_GPIOA5) / sizeof((sig_exprs_GPIOA5_GPIOA5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA5_GPIOA5)), typeof(&(sig_exprs_GPIOA5_GPIOA5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA5_GPIOA5"))); static const struct aspeed_sig_expr **pin_exprs_5[] = { sig_exprs_5_SDA9, sig_exprs_5_TIMER6, sig_exprs_5_GPIOA5, ((void *)0) }; static const struct aspeed_pin_desc pin_5 = { "5", (&pin_exprs_5[0]) };

static const int group_pins_TIMER6[] = { 5 }; static const char *func_groups_TIMER6[] = { "TIMER6" };

static const int group_pins_I2C9[] = { 4, 5 }; static const char *func_groups_I2C9[] = { "I2C9" };




static const struct aspeed_sig_desc sig_descs_MDC2_MDIO2[] = { { 0, 0x90, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_MDC2_MDIO2 = { .signal = "MDC2", .function = "MDIO2", .ndescs = (sizeof(sig_descs_MDC2_MDIO2) / sizeof((sig_descs_MDC2_MDIO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_MDC2_MDIO2)), typeof(&(sig_descs_MDC2_MDIO2)[0])))); }))), .descs = &(sig_descs_MDC2_MDIO2)[0], }; static const struct aspeed_sig_expr *sig_exprs_MDC2_MDIO2[] = { (&sig_expr_MDC2_MDIO2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_6_MDC2[(sizeof(sig_exprs_MDC2_MDIO2) / sizeof((sig_exprs_MDC2_MDIO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_MDC2_MDIO2)), typeof(&(sig_exprs_MDC2_MDIO2)[0])))); })))] __attribute__((alias("sig_exprs_MDC2_MDIO2")));
static const struct aspeed_sig_desc sig_descs_TIMER7_TIMER7[] = { { 0, 0x80, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_TIMER7_TIMER7 = { .signal = "TIMER7", .function = "TIMER7", .ndescs = (sizeof(sig_descs_TIMER7_TIMER7) / sizeof((sig_descs_TIMER7_TIMER7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TIMER7_TIMER7)), typeof(&(sig_descs_TIMER7_TIMER7)[0])))); }))), .descs = &(sig_descs_TIMER7_TIMER7)[0], }; static const struct aspeed_sig_expr *sig_exprs_TIMER7_TIMER7[] = { (&sig_expr_TIMER7_TIMER7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_6_TIMER7[(sizeof(sig_exprs_TIMER7_TIMER7) / sizeof((sig_exprs_TIMER7_TIMER7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TIMER7_TIMER7)), typeof(&(sig_exprs_TIMER7_TIMER7)[0])))); })))] __attribute__((alias("sig_exprs_TIMER7_TIMER7")));
static const struct aspeed_sig_desc sig_descs_GPIOA6_GPIOA6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA6_GPIOA6 = { .signal = "GPIOA6", .function = "GPIOA6", .ndescs = (sizeof(sig_descs_GPIOA6_GPIOA6) / sizeof((sig_descs_GPIOA6_GPIOA6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA6_GPIOA6)), typeof(&(sig_descs_GPIOA6_GPIOA6)[0])))); }))), .descs = &(sig_descs_GPIOA6_GPIOA6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA6_GPIOA6[] = { (&sig_expr_GPIOA6_GPIOA6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_6_GPIOA6[(sizeof(sig_exprs_GPIOA6_GPIOA6) / sizeof((sig_exprs_GPIOA6_GPIOA6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA6_GPIOA6)), typeof(&(sig_exprs_GPIOA6_GPIOA6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA6_GPIOA6"))); static const struct aspeed_sig_expr **pin_exprs_6[] = { sig_exprs_6_MDC2, sig_exprs_6_TIMER7, sig_exprs_6_GPIOA6, ((void *)0) }; static const struct aspeed_pin_desc pin_6 = { "6", (&pin_exprs_6[0]) };

static const int group_pins_TIMER7[] = { 6 }; static const char *func_groups_TIMER7[] = { "TIMER7" };


static const struct aspeed_sig_desc sig_descs_MDIO2_MDIO2[] = { { 0, 0x90, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_MDIO2_MDIO2 = { .signal = "MDIO2", .function = "MDIO2", .ndescs = (sizeof(sig_descs_MDIO2_MDIO2) / sizeof((sig_descs_MDIO2_MDIO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_MDIO2_MDIO2)), typeof(&(sig_descs_MDIO2_MDIO2)[0])))); }))), .descs = &(sig_descs_MDIO2_MDIO2)[0], }; static const struct aspeed_sig_expr *sig_exprs_MDIO2_MDIO2[] = { (&sig_expr_MDIO2_MDIO2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_7_MDIO2[(sizeof(sig_exprs_MDIO2_MDIO2) / sizeof((sig_exprs_MDIO2_MDIO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_MDIO2_MDIO2)), typeof(&(sig_exprs_MDIO2_MDIO2)[0])))); })))] __attribute__((alias("sig_exprs_MDIO2_MDIO2")));
static const struct aspeed_sig_desc sig_descs_TIMER8_TIMER8[] = { { 0, 0x80, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x90, ((((1UL))) << (6)), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_TIMER8_TIMER8 = { .signal = "TIMER8", .function = "TIMER8", .ndescs = (sizeof(sig_descs_TIMER8_TIMER8) / sizeof((sig_descs_TIMER8_TIMER8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TIMER8_TIMER8)), typeof(&(sig_descs_TIMER8_TIMER8)[0])))); }))), .descs = &(sig_descs_TIMER8_TIMER8)[0], }; static const struct aspeed_sig_expr *sig_exprs_TIMER8_TIMER8[] = { (&sig_expr_TIMER8_TIMER8), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_7_TIMER8[(sizeof(sig_exprs_TIMER8_TIMER8) / sizeof((sig_exprs_TIMER8_TIMER8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TIMER8_TIMER8)), typeof(&(sig_exprs_TIMER8_TIMER8)[0])))); })))] __attribute__((alias("sig_exprs_TIMER8_TIMER8")));
static const struct aspeed_sig_desc sig_descs_GPIOA7_GPIOA7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOA7_GPIOA7 = { .signal = "GPIOA7", .function = "GPIOA7", .ndescs = (sizeof(sig_descs_GPIOA7_GPIOA7) / sizeof((sig_descs_GPIOA7_GPIOA7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOA7_GPIOA7)), typeof(&(sig_descs_GPIOA7_GPIOA7)[0])))); }))), .descs = &(sig_descs_GPIOA7_GPIOA7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOA7_GPIOA7[] = { (&sig_expr_GPIOA7_GPIOA7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_7_GPIOA7[(sizeof(sig_exprs_GPIOA7_GPIOA7) / sizeof((sig_exprs_GPIOA7_GPIOA7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOA7_GPIOA7)), typeof(&(sig_exprs_GPIOA7_GPIOA7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOA7_GPIOA7"))); static const struct aspeed_sig_expr **pin_exprs_7[] = { sig_exprs_7_MDIO2, sig_exprs_7_TIMER8, sig_exprs_7_GPIOA7, ((void *)0) }; static const struct aspeed_pin_desc pin_7 = { "7", (&pin_exprs_7[0]) };

static const int group_pins_TIMER8[] = { 7 }; static const char *func_groups_TIMER8[] = { "TIMER8" };

static const int group_pins_MDIO2[] = { 6, 7 }; static const char *func_groups_MDIO2[] = { "MDIO2" };


static const struct aspeed_sig_desc sig_descs_GPIOB0_GPIOB0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB0_GPIOB0 = { .signal = "GPIOB0", .function = "GPIOB0", .ndescs = (sizeof(sig_descs_GPIOB0_GPIOB0) / sizeof((sig_descs_GPIOB0_GPIOB0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB0_GPIOB0)), typeof(&(sig_descs_GPIOB0_GPIOB0)[0])))); }))), .descs = &(sig_descs_GPIOB0_GPIOB0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB0_GPIOB0[] = { (&sig_expr_GPIOB0_GPIOB0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_8_GPIOB0[(sizeof(sig_exprs_GPIOB0_GPIOB0) / sizeof((sig_exprs_GPIOB0_GPIOB0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB0_GPIOB0)), typeof(&(sig_exprs_GPIOB0_GPIOB0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB0_GPIOB0"))); static const struct aspeed_sig_expr **pin_exprs_8[] = { sig_exprs_8_GPIOB0, ((void *)0) }; static const struct aspeed_pin_desc pin_8 = { "8", (&pin_exprs_8[0]) };


static const struct aspeed_sig_desc sig_descs_GPIOB1_GPIOB1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB1_GPIOB1 = { .signal = "GPIOB1", .function = "GPIOB1", .ndescs = (sizeof(sig_descs_GPIOB1_GPIOB1) / sizeof((sig_descs_GPIOB1_GPIOB1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB1_GPIOB1)), typeof(&(sig_descs_GPIOB1_GPIOB1)[0])))); }))), .descs = &(sig_descs_GPIOB1_GPIOB1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB1_GPIOB1[] = { (&sig_expr_GPIOB1_GPIOB1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_9_GPIOB1[(sizeof(sig_exprs_GPIOB1_GPIOB1) / sizeof((sig_exprs_GPIOB1_GPIOB1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB1_GPIOB1)), typeof(&(sig_exprs_GPIOB1_GPIOB1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB1_GPIOB1"))); static const struct aspeed_sig_expr **pin_exprs_9[] = { sig_exprs_9_GPIOB1, ((void *)0) }; static const struct aspeed_pin_desc pin_9 = { "9", (&pin_exprs_9[0]) };


static const struct aspeed_sig_desc sig_descs_GPIOB2_GPIOB2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB2_GPIOB2 = { .signal = "GPIOB2", .function = "GPIOB2", .ndescs = (sizeof(sig_descs_GPIOB2_GPIOB2) / sizeof((sig_descs_GPIOB2_GPIOB2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB2_GPIOB2)), typeof(&(sig_descs_GPIOB2_GPIOB2)[0])))); }))), .descs = &(sig_descs_GPIOB2_GPIOB2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB2_GPIOB2[] = { (&sig_expr_GPIOB2_GPIOB2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_10_GPIOB2[(sizeof(sig_exprs_GPIOB2_GPIOB2) / sizeof((sig_exprs_GPIOB2_GPIOB2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB2_GPIOB2)), typeof(&(sig_exprs_GPIOB2_GPIOB2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB2_GPIOB2"))); static const struct aspeed_sig_expr **pin_exprs_10[] = { sig_exprs_10_GPIOB2, ((void *)0) }; static const struct aspeed_pin_desc pin_10 = { "10", (&pin_exprs_10[0]) };


static const struct aspeed_sig_desc sig_descs_GPIOB3_GPIOB3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB3_GPIOB3 = { .signal = "GPIOB3", .function = "GPIOB3", .ndescs = (sizeof(sig_descs_GPIOB3_GPIOB3) / sizeof((sig_descs_GPIOB3_GPIOB3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB3_GPIOB3)), typeof(&(sig_descs_GPIOB3_GPIOB3)[0])))); }))), .descs = &(sig_descs_GPIOB3_GPIOB3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB3_GPIOB3[] = { (&sig_expr_GPIOB3_GPIOB3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_11_GPIOB3[(sizeof(sig_exprs_GPIOB3_GPIOB3) / sizeof((sig_exprs_GPIOB3_GPIOB3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB3_GPIOB3)), typeof(&(sig_exprs_GPIOB3_GPIOB3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB3_GPIOB3"))); static const struct aspeed_sig_expr **pin_exprs_11[] = { sig_exprs_11_GPIOB3, ((void *)0) }; static const struct aspeed_pin_desc pin_11 = { "11", (&pin_exprs_11[0]) };


static const struct aspeed_sig_desc sig_descs_USBCKI_USBCKI[] = { { 0, 0x70, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_USBCKI_USBCKI = { .signal = "USBCKI", .function = "USBCKI", .ndescs = (sizeof(sig_descs_USBCKI_USBCKI) / sizeof((sig_descs_USBCKI_USBCKI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USBCKI_USBCKI)), typeof(&(sig_descs_USBCKI_USBCKI)[0])))); }))), .descs = &(sig_descs_USBCKI_USBCKI)[0], }; static const struct aspeed_sig_expr *sig_exprs_USBCKI_USBCKI[] = { (&sig_expr_USBCKI_USBCKI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_12_USBCKI[(sizeof(sig_exprs_USBCKI_USBCKI) / sizeof((sig_exprs_USBCKI_USBCKI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USBCKI_USBCKI)), typeof(&(sig_exprs_USBCKI_USBCKI)[0])))); })))] __attribute__((alias("sig_exprs_USBCKI_USBCKI"))); static const struct aspeed_sig_desc sig_descs_GPIOB4_GPIOB4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB4_GPIOB4 = { .signal = "GPIOB4", .function = "GPIOB4", .ndescs = (sizeof(sig_descs_GPIOB4_GPIOB4) / sizeof((sig_descs_GPIOB4_GPIOB4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB4_GPIOB4)), typeof(&(sig_descs_GPIOB4_GPIOB4)[0])))); }))), .descs = &(sig_descs_GPIOB4_GPIOB4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB4_GPIOB4[] = { (&sig_expr_GPIOB4_GPIOB4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_12_GPIOB4[(sizeof(sig_exprs_GPIOB4_GPIOB4) / sizeof((sig_exprs_GPIOB4_GPIOB4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB4_GPIOB4)), typeof(&(sig_exprs_GPIOB4_GPIOB4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB4_GPIOB4"))); static const struct aspeed_sig_expr **pin_exprs_12[] = { sig_exprs_12_USBCKI, sig_exprs_12_GPIOB4, ((void *)0) }; static const struct aspeed_pin_desc pin_12 = { "12", (&pin_exprs_12[0]) }; static const int group_pins_USBCKI[] = { 12 }; static const char *func_groups_USBCKI[] = { "USBCKI" };



static const struct aspeed_sig_desc sig_descs_LPCPD_LPCPD[] = { { 0, 0x80, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LPCPD_LPCPD = { .signal = "LPCPD", .function = "LPCPD", .ndescs = (sizeof(sig_descs_LPCPD_LPCPD) / sizeof((sig_descs_LPCPD_LPCPD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LPCPD_LPCPD)), typeof(&(sig_descs_LPCPD_LPCPD)[0])))); }))), .descs = &(sig_descs_LPCPD_LPCPD)[0], }; static const struct aspeed_sig_expr *sig_exprs_LPCPD_LPCPD[] = { (&sig_expr_LPCPD_LPCPD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_13_LPCPD[(sizeof(sig_exprs_LPCPD_LPCPD) / sizeof((sig_exprs_LPCPD_LPCPD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LPCPD_LPCPD)), typeof(&(sig_exprs_LPCPD_LPCPD)[0])))); })))] __attribute__((alias("sig_exprs_LPCPD_LPCPD")));
static const struct aspeed_sig_desc sig_descs_LPCSMI_LPCSMI[] = { { 0, 0x80, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LPCSMI_LPCSMI = { .signal = "LPCSMI", .function = "LPCSMI", .ndescs = (sizeof(sig_descs_LPCSMI_LPCSMI) / sizeof((sig_descs_LPCSMI_LPCSMI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LPCSMI_LPCSMI)), typeof(&(sig_descs_LPCSMI_LPCSMI)[0])))); }))), .descs = &(sig_descs_LPCSMI_LPCSMI)[0], }; static const struct aspeed_sig_expr *sig_exprs_LPCSMI_LPCSMI[] = { (&sig_expr_LPCSMI_LPCSMI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_13_LPCSMI[(sizeof(sig_exprs_LPCSMI_LPCSMI) / sizeof((sig_exprs_LPCSMI_LPCSMI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LPCSMI_LPCSMI)), typeof(&(sig_exprs_LPCSMI_LPCSMI)[0])))); })))] __attribute__((alias("sig_exprs_LPCSMI_LPCSMI")));
static const struct aspeed_sig_desc sig_descs_GPIOB5_GPIOB5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB5_GPIOB5 = { .signal = "GPIOB5", .function = "GPIOB5", .ndescs = (sizeof(sig_descs_GPIOB5_GPIOB5) / sizeof((sig_descs_GPIOB5_GPIOB5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB5_GPIOB5)), typeof(&(sig_descs_GPIOB5_GPIOB5)[0])))); }))), .descs = &(sig_descs_GPIOB5_GPIOB5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB5_GPIOB5[] = { (&sig_expr_GPIOB5_GPIOB5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_13_GPIOB5[(sizeof(sig_exprs_GPIOB5_GPIOB5) / sizeof((sig_exprs_GPIOB5_GPIOB5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB5_GPIOB5)), typeof(&(sig_exprs_GPIOB5_GPIOB5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB5_GPIOB5"))); static const struct aspeed_sig_expr **pin_exprs_13[] = { sig_exprs_13_LPCPD, sig_exprs_13_LPCSMI, sig_exprs_13_GPIOB5, ((void *)0) }; static const struct aspeed_pin_desc pin_13 = { "13", (&pin_exprs_13[0]) };
static const int group_pins_LPCPD[] = { 13 }; static const char *func_groups_LPCPD[] = { "LPCPD" };
static const int group_pins_LPCSMI[] = { 13 }; static const char *func_groups_LPCSMI[] = { "LPCSMI" };


static const struct aspeed_sig_desc sig_descs_LPCPME_LPCPME[] = { { 0, 0x80, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LPCPME_LPCPME = { .signal = "LPCPME", .function = "LPCPME", .ndescs = (sizeof(sig_descs_LPCPME_LPCPME) / sizeof((sig_descs_LPCPME_LPCPME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LPCPME_LPCPME)), typeof(&(sig_descs_LPCPME_LPCPME)[0])))); }))), .descs = &(sig_descs_LPCPME_LPCPME)[0], }; static const struct aspeed_sig_expr *sig_exprs_LPCPME_LPCPME[] = { (&sig_expr_LPCPME_LPCPME), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_14_LPCPME[(sizeof(sig_exprs_LPCPME_LPCPME) / sizeof((sig_exprs_LPCPME_LPCPME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LPCPME_LPCPME)), typeof(&(sig_exprs_LPCPME_LPCPME)[0])))); })))] __attribute__((alias("sig_exprs_LPCPME_LPCPME"))); static const struct aspeed_sig_desc sig_descs_GPIOB6_GPIOB6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB6_GPIOB6 = { .signal = "GPIOB6", .function = "GPIOB6", .ndescs = (sizeof(sig_descs_GPIOB6_GPIOB6) / sizeof((sig_descs_GPIOB6_GPIOB6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB6_GPIOB6)), typeof(&(sig_descs_GPIOB6_GPIOB6)[0])))); }))), .descs = &(sig_descs_GPIOB6_GPIOB6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB6_GPIOB6[] = { (&sig_expr_GPIOB6_GPIOB6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_14_GPIOB6[(sizeof(sig_exprs_GPIOB6_GPIOB6) / sizeof((sig_exprs_GPIOB6_GPIOB6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB6_GPIOB6)), typeof(&(sig_exprs_GPIOB6_GPIOB6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB6_GPIOB6"))); static const struct aspeed_sig_expr **pin_exprs_14[] = { sig_exprs_14_LPCPME, sig_exprs_14_GPIOB6, ((void *)0) }; static const struct aspeed_pin_desc pin_14 = { "14", (&pin_exprs_14[0]) }; static const int group_pins_LPCPME[] = { 14 }; static const char *func_groups_LPCPME[] = { "LPCPME" };


static const struct aspeed_sig_desc sig_descs_GPIOB7_GPIOB7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOB7_GPIOB7 = { .signal = "GPIOB7", .function = "GPIOB7", .ndescs = (sizeof(sig_descs_GPIOB7_GPIOB7) / sizeof((sig_descs_GPIOB7_GPIOB7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOB7_GPIOB7)), typeof(&(sig_descs_GPIOB7_GPIOB7)[0])))); }))), .descs = &(sig_descs_GPIOB7_GPIOB7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOB7_GPIOB7[] = { (&sig_expr_GPIOB7_GPIOB7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_15_GPIOB7[(sizeof(sig_exprs_GPIOB7_GPIOB7) / sizeof((sig_exprs_GPIOB7_GPIOB7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOB7_GPIOB7)), typeof(&(sig_exprs_GPIOB7_GPIOB7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOB7_GPIOB7"))); static const struct aspeed_sig_expr **pin_exprs_15[] = { sig_exprs_15_GPIOB7, ((void *)0) }; static const struct aspeed_pin_desc pin_15 = { "15", (&pin_exprs_15[0]) };





static const struct aspeed_sig_desc sig_descs_SD1CLK_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1CLK_SD1 = { .signal = "SD1CLK", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1CLK_SD1) / sizeof((sig_descs_SD1CLK_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1CLK_SD1)), typeof(&(sig_descs_SD1CLK_SD1)[0])))); }))), .descs = &(sig_descs_SD1CLK_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1CLK_SD1[] = { (&sig_expr_SD1CLK_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_16_SD1CLK[(sizeof(sig_exprs_SD1CLK_SD1) / sizeof((sig_exprs_SD1CLK_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1CLK_SD1)), typeof(&(sig_exprs_SD1CLK_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1CLK_SD1")));
static const struct aspeed_sig_desc sig_descs_SCL10_I2C10[] = { { 0, 0x90, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL10_I2C10 = { .signal = "SCL10", .function = "I2C10", .ndescs = (sizeof(sig_descs_SCL10_I2C10) / sizeof((sig_descs_SCL10_I2C10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL10_I2C10)), typeof(&(sig_descs_SCL10_I2C10)[0])))); }))), .descs = &(sig_descs_SCL10_I2C10)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL10_I2C10[] = { (&sig_expr_SCL10_I2C10), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_16_SCL10[(sizeof(sig_exprs_SCL10_I2C10) / sizeof((sig_exprs_SCL10_I2C10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL10_I2C10)), typeof(&(sig_exprs_SCL10_I2C10)[0])))); })))] __attribute__((alias("sig_exprs_SCL10_I2C10")));
static const struct aspeed_sig_desc sig_descs_GPIOC0_GPIOC0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC0_GPIOC0 = { .signal = "GPIOC0", .function = "GPIOC0", .ndescs = (sizeof(sig_descs_GPIOC0_GPIOC0) / sizeof((sig_descs_GPIOC0_GPIOC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC0_GPIOC0)), typeof(&(sig_descs_GPIOC0_GPIOC0)[0])))); }))), .descs = &(sig_descs_GPIOC0_GPIOC0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC0_GPIOC0[] = { (&sig_expr_GPIOC0_GPIOC0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_16_GPIOC0[(sizeof(sig_exprs_GPIOC0_GPIOC0) / sizeof((sig_exprs_GPIOC0_GPIOC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC0_GPIOC0)), typeof(&(sig_exprs_GPIOC0_GPIOC0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC0_GPIOC0"))); static const struct aspeed_sig_expr **pin_exprs_16[] = { sig_exprs_16_SD1CLK, sig_exprs_16_SCL10, sig_exprs_16_GPIOC0, ((void *)0) }; static const struct aspeed_pin_desc pin_16 = { "16", (&pin_exprs_16[0]) };


static const struct aspeed_sig_desc sig_descs_SD1CMD_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1CMD_SD1 = { .signal = "SD1CMD", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1CMD_SD1) / sizeof((sig_descs_SD1CMD_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1CMD_SD1)), typeof(&(sig_descs_SD1CMD_SD1)[0])))); }))), .descs = &(sig_descs_SD1CMD_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1CMD_SD1[] = { (&sig_expr_SD1CMD_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_17_SD1CMD[(sizeof(sig_exprs_SD1CMD_SD1) / sizeof((sig_exprs_SD1CMD_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1CMD_SD1)), typeof(&(sig_exprs_SD1CMD_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1CMD_SD1")));
static const struct aspeed_sig_desc sig_descs_SDA10_I2C10[] = { { 0, 0x90, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA10_I2C10 = { .signal = "SDA10", .function = "I2C10", .ndescs = (sizeof(sig_descs_SDA10_I2C10) / sizeof((sig_descs_SDA10_I2C10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA10_I2C10)), typeof(&(sig_descs_SDA10_I2C10)[0])))); }))), .descs = &(sig_descs_SDA10_I2C10)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA10_I2C10[] = { (&sig_expr_SDA10_I2C10), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_17_SDA10[(sizeof(sig_exprs_SDA10_I2C10) / sizeof((sig_exprs_SDA10_I2C10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA10_I2C10)), typeof(&(sig_exprs_SDA10_I2C10)[0])))); })))] __attribute__((alias("sig_exprs_SDA10_I2C10")));
static const struct aspeed_sig_desc sig_descs_GPIOC1_GPIOC1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC1_GPIOC1 = { .signal = "GPIOC1", .function = "GPIOC1", .ndescs = (sizeof(sig_descs_GPIOC1_GPIOC1) / sizeof((sig_descs_GPIOC1_GPIOC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC1_GPIOC1)), typeof(&(sig_descs_GPIOC1_GPIOC1)[0])))); }))), .descs = &(sig_descs_GPIOC1_GPIOC1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC1_GPIOC1[] = { (&sig_expr_GPIOC1_GPIOC1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_17_GPIOC1[(sizeof(sig_exprs_GPIOC1_GPIOC1) / sizeof((sig_exprs_GPIOC1_GPIOC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC1_GPIOC1)), typeof(&(sig_exprs_GPIOC1_GPIOC1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC1_GPIOC1"))); static const struct aspeed_sig_expr **pin_exprs_17[] = { sig_exprs_17_SD1CMD, sig_exprs_17_SDA10, sig_exprs_17_GPIOC1, ((void *)0) }; static const struct aspeed_pin_desc pin_17 = { "17", (&pin_exprs_17[0]) };

static const int group_pins_I2C10[] = { 16, 17 }; static const char *func_groups_I2C10[] = { "I2C10" };



static const struct aspeed_sig_desc sig_descs_SD1DAT0_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1DAT0_SD1 = { .signal = "SD1DAT0", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1DAT0_SD1) / sizeof((sig_descs_SD1DAT0_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1DAT0_SD1)), typeof(&(sig_descs_SD1DAT0_SD1)[0])))); }))), .descs = &(sig_descs_SD1DAT0_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1DAT0_SD1[] = { (&sig_expr_SD1DAT0_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_18_SD1DAT0[(sizeof(sig_exprs_SD1DAT0_SD1) / sizeof((sig_exprs_SD1DAT0_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1DAT0_SD1)), typeof(&(sig_exprs_SD1DAT0_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1DAT0_SD1")));
static const struct aspeed_sig_desc sig_descs_SCL11_I2C11[] = { { 0, 0x90, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL11_I2C11 = { .signal = "SCL11", .function = "I2C11", .ndescs = (sizeof(sig_descs_SCL11_I2C11) / sizeof((sig_descs_SCL11_I2C11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL11_I2C11)), typeof(&(sig_descs_SCL11_I2C11)[0])))); }))), .descs = &(sig_descs_SCL11_I2C11)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL11_I2C11[] = { (&sig_expr_SCL11_I2C11), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_18_SCL11[(sizeof(sig_exprs_SCL11_I2C11) / sizeof((sig_exprs_SCL11_I2C11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL11_I2C11)), typeof(&(sig_exprs_SCL11_I2C11)[0])))); })))] __attribute__((alias("sig_exprs_SCL11_I2C11")));
static const struct aspeed_sig_desc sig_descs_GPIOC2_GPIOC2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC2_GPIOC2 = { .signal = "GPIOC2", .function = "GPIOC2", .ndescs = (sizeof(sig_descs_GPIOC2_GPIOC2) / sizeof((sig_descs_GPIOC2_GPIOC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC2_GPIOC2)), typeof(&(sig_descs_GPIOC2_GPIOC2)[0])))); }))), .descs = &(sig_descs_GPIOC2_GPIOC2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC2_GPIOC2[] = { (&sig_expr_GPIOC2_GPIOC2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_18_GPIOC2[(sizeof(sig_exprs_GPIOC2_GPIOC2) / sizeof((sig_exprs_GPIOC2_GPIOC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC2_GPIOC2)), typeof(&(sig_exprs_GPIOC2_GPIOC2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC2_GPIOC2"))); static const struct aspeed_sig_expr **pin_exprs_18[] = { sig_exprs_18_SD1DAT0, sig_exprs_18_SCL11, sig_exprs_18_GPIOC2, ((void *)0) }; static const struct aspeed_pin_desc pin_18 = { "18", (&pin_exprs_18[0]) };


static const struct aspeed_sig_desc sig_descs_SD1DAT1_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1DAT1_SD1 = { .signal = "SD1DAT1", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1DAT1_SD1) / sizeof((sig_descs_SD1DAT1_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1DAT1_SD1)), typeof(&(sig_descs_SD1DAT1_SD1)[0])))); }))), .descs = &(sig_descs_SD1DAT1_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1DAT1_SD1[] = { (&sig_expr_SD1DAT1_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_19_SD1DAT1[(sizeof(sig_exprs_SD1DAT1_SD1) / sizeof((sig_exprs_SD1DAT1_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1DAT1_SD1)), typeof(&(sig_exprs_SD1DAT1_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1DAT1_SD1")));
static const struct aspeed_sig_desc sig_descs_SDA11_I2C11[] = { { 0, 0x90, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA11_I2C11 = { .signal = "SDA11", .function = "I2C11", .ndescs = (sizeof(sig_descs_SDA11_I2C11) / sizeof((sig_descs_SDA11_I2C11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA11_I2C11)), typeof(&(sig_descs_SDA11_I2C11)[0])))); }))), .descs = &(sig_descs_SDA11_I2C11)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA11_I2C11[] = { (&sig_expr_SDA11_I2C11), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_19_SDA11[(sizeof(sig_exprs_SDA11_I2C11) / sizeof((sig_exprs_SDA11_I2C11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA11_I2C11)), typeof(&(sig_exprs_SDA11_I2C11)[0])))); })))] __attribute__((alias("sig_exprs_SDA11_I2C11")));
static const struct aspeed_sig_desc sig_descs_GPIOC3_GPIOC3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC3_GPIOC3 = { .signal = "GPIOC3", .function = "GPIOC3", .ndescs = (sizeof(sig_descs_GPIOC3_GPIOC3) / sizeof((sig_descs_GPIOC3_GPIOC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC3_GPIOC3)), typeof(&(sig_descs_GPIOC3_GPIOC3)[0])))); }))), .descs = &(sig_descs_GPIOC3_GPIOC3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC3_GPIOC3[] = { (&sig_expr_GPIOC3_GPIOC3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_19_GPIOC3[(sizeof(sig_exprs_GPIOC3_GPIOC3) / sizeof((sig_exprs_GPIOC3_GPIOC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC3_GPIOC3)), typeof(&(sig_exprs_GPIOC3_GPIOC3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC3_GPIOC3"))); static const struct aspeed_sig_expr **pin_exprs_19[] = { sig_exprs_19_SD1DAT1, sig_exprs_19_SDA11, sig_exprs_19_GPIOC3, ((void *)0) }; static const struct aspeed_pin_desc pin_19 = { "19", (&pin_exprs_19[0]) };

static const int group_pins_I2C11[] = { 18, 19 }; static const char *func_groups_I2C11[] = { "I2C11" };



static const struct aspeed_sig_desc sig_descs_SD1DAT2_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1DAT2_SD1 = { .signal = "SD1DAT2", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1DAT2_SD1) / sizeof((sig_descs_SD1DAT2_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1DAT2_SD1)), typeof(&(sig_descs_SD1DAT2_SD1)[0])))); }))), .descs = &(sig_descs_SD1DAT2_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1DAT2_SD1[] = { (&sig_expr_SD1DAT2_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_20_SD1DAT2[(sizeof(sig_exprs_SD1DAT2_SD1) / sizeof((sig_exprs_SD1DAT2_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1DAT2_SD1)), typeof(&(sig_exprs_SD1DAT2_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1DAT2_SD1")));
static const struct aspeed_sig_desc sig_descs_SCL12_I2C12[] = { { 0, 0x90, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL12_I2C12 = { .signal = "SCL12", .function = "I2C12", .ndescs = (sizeof(sig_descs_SCL12_I2C12) / sizeof((sig_descs_SCL12_I2C12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL12_I2C12)), typeof(&(sig_descs_SCL12_I2C12)[0])))); }))), .descs = &(sig_descs_SCL12_I2C12)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL12_I2C12[] = { (&sig_expr_SCL12_I2C12), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_20_SCL12[(sizeof(sig_exprs_SCL12_I2C12) / sizeof((sig_exprs_SCL12_I2C12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL12_I2C12)), typeof(&(sig_exprs_SCL12_I2C12)[0])))); })))] __attribute__((alias("sig_exprs_SCL12_I2C12")));
static const struct aspeed_sig_desc sig_descs_GPIOC4_GPIOC4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC4_GPIOC4 = { .signal = "GPIOC4", .function = "GPIOC4", .ndescs = (sizeof(sig_descs_GPIOC4_GPIOC4) / sizeof((sig_descs_GPIOC4_GPIOC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC4_GPIOC4)), typeof(&(sig_descs_GPIOC4_GPIOC4)[0])))); }))), .descs = &(sig_descs_GPIOC4_GPIOC4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC4_GPIOC4[] = { (&sig_expr_GPIOC4_GPIOC4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_20_GPIOC4[(sizeof(sig_exprs_GPIOC4_GPIOC4) / sizeof((sig_exprs_GPIOC4_GPIOC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC4_GPIOC4)), typeof(&(sig_exprs_GPIOC4_GPIOC4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC4_GPIOC4"))); static const struct aspeed_sig_expr **pin_exprs_20[] = { sig_exprs_20_SD1DAT2, sig_exprs_20_SCL12, sig_exprs_20_GPIOC4, ((void *)0) }; static const struct aspeed_pin_desc pin_20 = { "20", (&pin_exprs_20[0]) };


static const struct aspeed_sig_desc sig_descs_SD1DAT3_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1DAT3_SD1 = { .signal = "SD1DAT3", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1DAT3_SD1) / sizeof((sig_descs_SD1DAT3_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1DAT3_SD1)), typeof(&(sig_descs_SD1DAT3_SD1)[0])))); }))), .descs = &(sig_descs_SD1DAT3_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1DAT3_SD1[] = { (&sig_expr_SD1DAT3_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_21_SD1DAT3[(sizeof(sig_exprs_SD1DAT3_SD1) / sizeof((sig_exprs_SD1DAT3_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1DAT3_SD1)), typeof(&(sig_exprs_SD1DAT3_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1DAT3_SD1")));
static const struct aspeed_sig_desc sig_descs_SDA12_I2C12[] = { { 0, 0x90, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA12_I2C12 = { .signal = "SDA12", .function = "I2C12", .ndescs = (sizeof(sig_descs_SDA12_I2C12) / sizeof((sig_descs_SDA12_I2C12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA12_I2C12)), typeof(&(sig_descs_SDA12_I2C12)[0])))); }))), .descs = &(sig_descs_SDA12_I2C12)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA12_I2C12[] = { (&sig_expr_SDA12_I2C12), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_21_SDA12[(sizeof(sig_exprs_SDA12_I2C12) / sizeof((sig_exprs_SDA12_I2C12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA12_I2C12)), typeof(&(sig_exprs_SDA12_I2C12)[0])))); })))] __attribute__((alias("sig_exprs_SDA12_I2C12")));
static const struct aspeed_sig_desc sig_descs_GPIOC5_GPIOC5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC5_GPIOC5 = { .signal = "GPIOC5", .function = "GPIOC5", .ndescs = (sizeof(sig_descs_GPIOC5_GPIOC5) / sizeof((sig_descs_GPIOC5_GPIOC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC5_GPIOC5)), typeof(&(sig_descs_GPIOC5_GPIOC5)[0])))); }))), .descs = &(sig_descs_GPIOC5_GPIOC5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC5_GPIOC5[] = { (&sig_expr_GPIOC5_GPIOC5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_21_GPIOC5[(sizeof(sig_exprs_GPIOC5_GPIOC5) / sizeof((sig_exprs_GPIOC5_GPIOC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC5_GPIOC5)), typeof(&(sig_exprs_GPIOC5_GPIOC5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC5_GPIOC5"))); static const struct aspeed_sig_expr **pin_exprs_21[] = { sig_exprs_21_SD1DAT3, sig_exprs_21_SDA12, sig_exprs_21_GPIOC5, ((void *)0) }; static const struct aspeed_pin_desc pin_21 = { "21", (&pin_exprs_21[0]) };

static const int group_pins_I2C12[] = { 20, 21 }; static const char *func_groups_I2C12[] = { "I2C12" };



static const struct aspeed_sig_desc sig_descs_SD1CD_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1CD_SD1 = { .signal = "SD1CD", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1CD_SD1) / sizeof((sig_descs_SD1CD_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1CD_SD1)), typeof(&(sig_descs_SD1CD_SD1)[0])))); }))), .descs = &(sig_descs_SD1CD_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1CD_SD1[] = { (&sig_expr_SD1CD_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_22_SD1CD[(sizeof(sig_exprs_SD1CD_SD1) / sizeof((sig_exprs_SD1CD_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1CD_SD1)), typeof(&(sig_exprs_SD1CD_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1CD_SD1")));
static const struct aspeed_sig_desc sig_descs_SCL13_I2C13[] = { { 0, 0x90, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL13_I2C13 = { .signal = "SCL13", .function = "I2C13", .ndescs = (sizeof(sig_descs_SCL13_I2C13) / sizeof((sig_descs_SCL13_I2C13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL13_I2C13)), typeof(&(sig_descs_SCL13_I2C13)[0])))); }))), .descs = &(sig_descs_SCL13_I2C13)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL13_I2C13[] = { (&sig_expr_SCL13_I2C13), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_22_SCL13[(sizeof(sig_exprs_SCL13_I2C13) / sizeof((sig_exprs_SCL13_I2C13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL13_I2C13)), typeof(&(sig_exprs_SCL13_I2C13)[0])))); })))] __attribute__((alias("sig_exprs_SCL13_I2C13")));
static const struct aspeed_sig_desc sig_descs_GPIOC6_GPIOC6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC6_GPIOC6 = { .signal = "GPIOC6", .function = "GPIOC6", .ndescs = (sizeof(sig_descs_GPIOC6_GPIOC6) / sizeof((sig_descs_GPIOC6_GPIOC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC6_GPIOC6)), typeof(&(sig_descs_GPIOC6_GPIOC6)[0])))); }))), .descs = &(sig_descs_GPIOC6_GPIOC6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC6_GPIOC6[] = { (&sig_expr_GPIOC6_GPIOC6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_22_GPIOC6[(sizeof(sig_exprs_GPIOC6_GPIOC6) / sizeof((sig_exprs_GPIOC6_GPIOC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC6_GPIOC6)), typeof(&(sig_exprs_GPIOC6_GPIOC6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC6_GPIOC6"))); static const struct aspeed_sig_expr **pin_exprs_22[] = { sig_exprs_22_SD1CD, sig_exprs_22_SCL13, sig_exprs_22_GPIOC6, ((void *)0) }; static const struct aspeed_pin_desc pin_22 = { "22", (&pin_exprs_22[0]) };


static const struct aspeed_sig_desc sig_descs_SD1WP_SD1[] = { { 0, 0x90, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD1WP_SD1 = { .signal = "SD1WP", .function = "SD1", .ndescs = (sizeof(sig_descs_SD1WP_SD1) / sizeof((sig_descs_SD1WP_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD1WP_SD1)), typeof(&(sig_descs_SD1WP_SD1)[0])))); }))), .descs = &(sig_descs_SD1WP_SD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD1WP_SD1[] = { (&sig_expr_SD1WP_SD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_23_SD1WP[(sizeof(sig_exprs_SD1WP_SD1) / sizeof((sig_exprs_SD1WP_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD1WP_SD1)), typeof(&(sig_exprs_SD1WP_SD1)[0])))); })))] __attribute__((alias("sig_exprs_SD1WP_SD1")));
static const struct aspeed_sig_desc sig_descs_SDA13_I2C13[] = { { 0, 0x90, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA13_I2C13 = { .signal = "SDA13", .function = "I2C13", .ndescs = (sizeof(sig_descs_SDA13_I2C13) / sizeof((sig_descs_SDA13_I2C13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA13_I2C13)), typeof(&(sig_descs_SDA13_I2C13)[0])))); }))), .descs = &(sig_descs_SDA13_I2C13)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA13_I2C13[] = { (&sig_expr_SDA13_I2C13), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_23_SDA13[(sizeof(sig_exprs_SDA13_I2C13) / sizeof((sig_exprs_SDA13_I2C13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA13_I2C13)), typeof(&(sig_exprs_SDA13_I2C13)[0])))); })))] __attribute__((alias("sig_exprs_SDA13_I2C13")));
static const struct aspeed_sig_desc sig_descs_GPIOC7_GPIOC7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOC7_GPIOC7 = { .signal = "GPIOC7", .function = "GPIOC7", .ndescs = (sizeof(sig_descs_GPIOC7_GPIOC7) / sizeof((sig_descs_GPIOC7_GPIOC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOC7_GPIOC7)), typeof(&(sig_descs_GPIOC7_GPIOC7)[0])))); }))), .descs = &(sig_descs_GPIOC7_GPIOC7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOC7_GPIOC7[] = { (&sig_expr_GPIOC7_GPIOC7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_23_GPIOC7[(sizeof(sig_exprs_GPIOC7_GPIOC7) / sizeof((sig_exprs_GPIOC7_GPIOC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOC7_GPIOC7)), typeof(&(sig_exprs_GPIOC7_GPIOC7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOC7_GPIOC7"))); static const struct aspeed_sig_expr **pin_exprs_23[] = { sig_exprs_23_SD1WP, sig_exprs_23_SDA13, sig_exprs_23_GPIOC7, ((void *)0) }; static const struct aspeed_pin_desc pin_23 = { "23", (&pin_exprs_23[0]) };

static const int group_pins_I2C13[] = { 22, 23 }; static const char *func_groups_I2C13[] = { "I2C13" };
static const int group_pins_SD1[] = { 16, 17, 18, 19, 20, 21, 22, 23 }; static const char *func_groups_SD1[] = { "SD1" };






static const struct aspeed_sig_desc sig_descs_SD2CLK_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2CLK_SD2 = { .signal = "SD2CLK", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2CLK_SD2) / sizeof((sig_descs_SD2CLK_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2CLK_SD2)), typeof(&(sig_descs_SD2CLK_SD2)[0])))); }))), .descs = &(sig_descs_SD2CLK_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2CLK_SD2[] = { (&sig_expr_SD2CLK_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_24_SD2CLK[(sizeof(sig_exprs_SD2CLK_SD2) / sizeof((sig_exprs_SD2CLK_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2CLK_SD2)), typeof(&(sig_exprs_SD2CLK_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2CLK_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID0IN_GPID0[] = { { 0, 0x8C, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID0IN_GPID0 = { .signal = "GPID0IN", .function = "GPID0", .ndescs = (sizeof(sig_descs_GPID0IN_GPID0) / sizeof((sig_descs_GPID0IN_GPID0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID0IN_GPID0)), typeof(&(sig_descs_GPID0IN_GPID0)[0])))); }))), .descs = &(sig_descs_GPID0IN_GPID0)[0], };
static const struct aspeed_sig_desc sig_descs_GPID0IN_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID0IN_GPID = { .signal = "GPID0IN", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID0IN_GPID) / sizeof((sig_descs_GPID0IN_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID0IN_GPID)), typeof(&(sig_descs_GPID0IN_GPID)[0])))); }))), .descs = &(sig_descs_GPID0IN_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID0IN_GPID0[] = { (&sig_expr_GPID0IN_GPID0), (&sig_expr_GPID0IN_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_24_GPID0IN[(sizeof(sig_exprs_GPID0IN_GPID0) / sizeof((sig_exprs_GPID0IN_GPID0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID0IN_GPID0)), typeof(&(sig_exprs_GPID0IN_GPID0)[0])))); })))] __attribute__((alias("sig_exprs_GPID0IN_GPID0")));
static const struct aspeed_sig_desc sig_descs_GPIOD0_GPIOD0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD0_GPIOD0 = { .signal = "GPIOD0", .function = "GPIOD0", .ndescs = (sizeof(sig_descs_GPIOD0_GPIOD0) / sizeof((sig_descs_GPIOD0_GPIOD0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD0_GPIOD0)), typeof(&(sig_descs_GPIOD0_GPIOD0)[0])))); }))), .descs = &(sig_descs_GPIOD0_GPIOD0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD0_GPIOD0[] = { (&sig_expr_GPIOD0_GPIOD0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_24_GPIOD0[(sizeof(sig_exprs_GPIOD0_GPIOD0) / sizeof((sig_exprs_GPIOD0_GPIOD0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD0_GPIOD0)), typeof(&(sig_exprs_GPIOD0_GPIOD0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD0_GPIOD0"))); static const struct aspeed_sig_expr **pin_exprs_24[] = { sig_exprs_24_SD2CLK, sig_exprs_24_GPID0IN, sig_exprs_24_GPIOD0, ((void *)0) }; static const struct aspeed_pin_desc pin_24 = { "24", (&pin_exprs_24[0]) };


static const struct aspeed_sig_desc sig_descs_SD2CMD_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2CMD_SD2 = { .signal = "SD2CMD", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2CMD_SD2) / sizeof((sig_descs_SD2CMD_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2CMD_SD2)), typeof(&(sig_descs_SD2CMD_SD2)[0])))); }))), .descs = &(sig_descs_SD2CMD_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2CMD_SD2[] = { (&sig_expr_SD2CMD_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_25_SD2CMD[(sizeof(sig_exprs_SD2CMD_SD2) / sizeof((sig_exprs_SD2CMD_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2CMD_SD2)), typeof(&(sig_exprs_SD2CMD_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2CMD_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID0OUT_GPID0[] = { { 0, 0x8C, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID0OUT_GPID0 = { .signal = "GPID0OUT", .function = "GPID0", .ndescs = (sizeof(sig_descs_GPID0OUT_GPID0) / sizeof((sig_descs_GPID0OUT_GPID0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID0OUT_GPID0)), typeof(&(sig_descs_GPID0OUT_GPID0)[0])))); }))), .descs = &(sig_descs_GPID0OUT_GPID0)[0], };
static const struct aspeed_sig_desc sig_descs_GPID0OUT_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID0OUT_GPID = { .signal = "GPID0OUT", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID0OUT_GPID) / sizeof((sig_descs_GPID0OUT_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID0OUT_GPID)), typeof(&(sig_descs_GPID0OUT_GPID)[0])))); }))), .descs = &(sig_descs_GPID0OUT_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID0OUT_GPID0[] = { (&sig_expr_GPID0OUT_GPID0), (&sig_expr_GPID0OUT_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_25_GPID0OUT[(sizeof(sig_exprs_GPID0OUT_GPID0) / sizeof((sig_exprs_GPID0OUT_GPID0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID0OUT_GPID0)), typeof(&(sig_exprs_GPID0OUT_GPID0)[0])))); })))] __attribute__((alias("sig_exprs_GPID0OUT_GPID0")));
static const struct aspeed_sig_desc sig_descs_GPIOD1_GPIOD1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD1_GPIOD1 = { .signal = "GPIOD1", .function = "GPIOD1", .ndescs = (sizeof(sig_descs_GPIOD1_GPIOD1) / sizeof((sig_descs_GPIOD1_GPIOD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD1_GPIOD1)), typeof(&(sig_descs_GPIOD1_GPIOD1)[0])))); }))), .descs = &(sig_descs_GPIOD1_GPIOD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD1_GPIOD1[] = { (&sig_expr_GPIOD1_GPIOD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_25_GPIOD1[(sizeof(sig_exprs_GPIOD1_GPIOD1) / sizeof((sig_exprs_GPIOD1_GPIOD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD1_GPIOD1)), typeof(&(sig_exprs_GPIOD1_GPIOD1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD1_GPIOD1"))); static const struct aspeed_sig_expr **pin_exprs_25[] = { sig_exprs_25_SD2CMD, sig_exprs_25_GPID0OUT, sig_exprs_25_GPIOD1, ((void *)0) }; static const struct aspeed_pin_desc pin_25 = { "25", (&pin_exprs_25[0]) };

static const int group_pins_GPID0[] = { 24, 25 }; static const char *func_groups_GPID0[] = { "GPID0" };




static const struct aspeed_sig_desc sig_descs_SD2DAT0_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2DAT0_SD2 = { .signal = "SD2DAT0", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2DAT0_SD2) / sizeof((sig_descs_SD2DAT0_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2DAT0_SD2)), typeof(&(sig_descs_SD2DAT0_SD2)[0])))); }))), .descs = &(sig_descs_SD2DAT0_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2DAT0_SD2[] = { (&sig_expr_SD2DAT0_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_26_SD2DAT0[(sizeof(sig_exprs_SD2DAT0_SD2) / sizeof((sig_exprs_SD2DAT0_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2DAT0_SD2)), typeof(&(sig_exprs_SD2DAT0_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2DAT0_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID2IN_GPID2[] = { { 0, 0x8C, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID2IN_GPID2 = { .signal = "GPID2IN", .function = "GPID2", .ndescs = (sizeof(sig_descs_GPID2IN_GPID2) / sizeof((sig_descs_GPID2IN_GPID2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID2IN_GPID2)), typeof(&(sig_descs_GPID2IN_GPID2)[0])))); }))), .descs = &(sig_descs_GPID2IN_GPID2)[0], };
static const struct aspeed_sig_desc sig_descs_GPID2IN_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID2IN_GPID = { .signal = "GPID2IN", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID2IN_GPID) / sizeof((sig_descs_GPID2IN_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID2IN_GPID)), typeof(&(sig_descs_GPID2IN_GPID)[0])))); }))), .descs = &(sig_descs_GPID2IN_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID2IN_GPID2[] = { (&sig_expr_GPID2IN_GPID2), (&sig_expr_GPID2IN_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_26_GPID2IN[(sizeof(sig_exprs_GPID2IN_GPID2) / sizeof((sig_exprs_GPID2IN_GPID2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID2IN_GPID2)), typeof(&(sig_exprs_GPID2IN_GPID2)[0])))); })))] __attribute__((alias("sig_exprs_GPID2IN_GPID2")));
static const struct aspeed_sig_desc sig_descs_GPIOD2_GPIOD2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD2_GPIOD2 = { .signal = "GPIOD2", .function = "GPIOD2", .ndescs = (sizeof(sig_descs_GPIOD2_GPIOD2) / sizeof((sig_descs_GPIOD2_GPIOD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD2_GPIOD2)), typeof(&(sig_descs_GPIOD2_GPIOD2)[0])))); }))), .descs = &(sig_descs_GPIOD2_GPIOD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD2_GPIOD2[] = { (&sig_expr_GPIOD2_GPIOD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_26_GPIOD2[(sizeof(sig_exprs_GPIOD2_GPIOD2) / sizeof((sig_exprs_GPIOD2_GPIOD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD2_GPIOD2)), typeof(&(sig_exprs_GPIOD2_GPIOD2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD2_GPIOD2"))); static const struct aspeed_sig_expr **pin_exprs_26[] = { sig_exprs_26_SD2DAT0, sig_exprs_26_GPID2IN, sig_exprs_26_GPIOD2, ((void *)0) }; static const struct aspeed_pin_desc pin_26 = { "26", (&pin_exprs_26[0]) };


static const struct aspeed_sig_desc sig_descs_SD2DAT1_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2DAT1_SD2 = { .signal = "SD2DAT1", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2DAT1_SD2) / sizeof((sig_descs_SD2DAT1_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2DAT1_SD2)), typeof(&(sig_descs_SD2DAT1_SD2)[0])))); }))), .descs = &(sig_descs_SD2DAT1_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2DAT1_SD2[] = { (&sig_expr_SD2DAT1_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_27_SD2DAT1[(sizeof(sig_exprs_SD2DAT1_SD2) / sizeof((sig_exprs_SD2DAT1_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2DAT1_SD2)), typeof(&(sig_exprs_SD2DAT1_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2DAT1_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID2OUT_GPID2[] = { { 0, 0x8C, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID2OUT_GPID2 = { .signal = "GPID2OUT", .function = "GPID2", .ndescs = (sizeof(sig_descs_GPID2OUT_GPID2) / sizeof((sig_descs_GPID2OUT_GPID2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID2OUT_GPID2)), typeof(&(sig_descs_GPID2OUT_GPID2)[0])))); }))), .descs = &(sig_descs_GPID2OUT_GPID2)[0], };
static const struct aspeed_sig_desc sig_descs_GPID2OUT_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID2OUT_GPID = { .signal = "GPID2OUT", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID2OUT_GPID) / sizeof((sig_descs_GPID2OUT_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID2OUT_GPID)), typeof(&(sig_descs_GPID2OUT_GPID)[0])))); }))), .descs = &(sig_descs_GPID2OUT_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID2OUT_GPID2[] = { (&sig_expr_GPID2OUT_GPID2), (&sig_expr_GPID2OUT_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_27_GPID2OUT[(sizeof(sig_exprs_GPID2OUT_GPID2) / sizeof((sig_exprs_GPID2OUT_GPID2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID2OUT_GPID2)), typeof(&(sig_exprs_GPID2OUT_GPID2)[0])))); })))] __attribute__((alias("sig_exprs_GPID2OUT_GPID2")));
static const struct aspeed_sig_desc sig_descs_GPIOD3_GPIOD3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD3_GPIOD3 = { .signal = "GPIOD3", .function = "GPIOD3", .ndescs = (sizeof(sig_descs_GPIOD3_GPIOD3) / sizeof((sig_descs_GPIOD3_GPIOD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD3_GPIOD3)), typeof(&(sig_descs_GPIOD3_GPIOD3)[0])))); }))), .descs = &(sig_descs_GPIOD3_GPIOD3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD3_GPIOD3[] = { (&sig_expr_GPIOD3_GPIOD3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_27_GPIOD3[(sizeof(sig_exprs_GPIOD3_GPIOD3) / sizeof((sig_exprs_GPIOD3_GPIOD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD3_GPIOD3)), typeof(&(sig_exprs_GPIOD3_GPIOD3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD3_GPIOD3"))); static const struct aspeed_sig_expr **pin_exprs_27[] = { sig_exprs_27_SD2DAT1, sig_exprs_27_GPID2OUT, sig_exprs_27_GPIOD3, ((void *)0) }; static const struct aspeed_pin_desc pin_27 = { "27", (&pin_exprs_27[0]) };

static const int group_pins_GPID2[] = { 26, 27 }; static const char *func_groups_GPID2[] = { "GPID2" };




static const struct aspeed_sig_desc sig_descs_SD2DAT2_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2DAT2_SD2 = { .signal = "SD2DAT2", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2DAT2_SD2) / sizeof((sig_descs_SD2DAT2_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2DAT2_SD2)), typeof(&(sig_descs_SD2DAT2_SD2)[0])))); }))), .descs = &(sig_descs_SD2DAT2_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2DAT2_SD2[] = { (&sig_expr_SD2DAT2_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_28_SD2DAT2[(sizeof(sig_exprs_SD2DAT2_SD2) / sizeof((sig_exprs_SD2DAT2_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2DAT2_SD2)), typeof(&(sig_exprs_SD2DAT2_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2DAT2_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID4IN_GPID4[] = { { 0, 0x8C, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID4IN_GPID4 = { .signal = "GPID4IN", .function = "GPID4", .ndescs = (sizeof(sig_descs_GPID4IN_GPID4) / sizeof((sig_descs_GPID4IN_GPID4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID4IN_GPID4)), typeof(&(sig_descs_GPID4IN_GPID4)[0])))); }))), .descs = &(sig_descs_GPID4IN_GPID4)[0], };
static const struct aspeed_sig_desc sig_descs_GPID4IN_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID4IN_GPID = { .signal = "GPID4IN", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID4IN_GPID) / sizeof((sig_descs_GPID4IN_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID4IN_GPID)), typeof(&(sig_descs_GPID4IN_GPID)[0])))); }))), .descs = &(sig_descs_GPID4IN_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID4IN_GPID4[] = { (&sig_expr_GPID4IN_GPID4), (&sig_expr_GPID4IN_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_28_GPID4IN[(sizeof(sig_exprs_GPID4IN_GPID4) / sizeof((sig_exprs_GPID4IN_GPID4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID4IN_GPID4)), typeof(&(sig_exprs_GPID4IN_GPID4)[0])))); })))] __attribute__((alias("sig_exprs_GPID4IN_GPID4")));
static const struct aspeed_sig_desc sig_descs_GPIOD4_GPIOD4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD4_GPIOD4 = { .signal = "GPIOD4", .function = "GPIOD4", .ndescs = (sizeof(sig_descs_GPIOD4_GPIOD4) / sizeof((sig_descs_GPIOD4_GPIOD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD4_GPIOD4)), typeof(&(sig_descs_GPIOD4_GPIOD4)[0])))); }))), .descs = &(sig_descs_GPIOD4_GPIOD4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD4_GPIOD4[] = { (&sig_expr_GPIOD4_GPIOD4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_28_GPIOD4[(sizeof(sig_exprs_GPIOD4_GPIOD4) / sizeof((sig_exprs_GPIOD4_GPIOD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD4_GPIOD4)), typeof(&(sig_exprs_GPIOD4_GPIOD4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD4_GPIOD4"))); static const struct aspeed_sig_expr **pin_exprs_28[] = { sig_exprs_28_SD2DAT2, sig_exprs_28_GPID4IN, sig_exprs_28_GPIOD4, ((void *)0) }; static const struct aspeed_pin_desc pin_28 = { "28", (&pin_exprs_28[0]) };


static const struct aspeed_sig_desc sig_descs_SD2DAT3_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2DAT3_SD2 = { .signal = "SD2DAT3", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2DAT3_SD2) / sizeof((sig_descs_SD2DAT3_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2DAT3_SD2)), typeof(&(sig_descs_SD2DAT3_SD2)[0])))); }))), .descs = &(sig_descs_SD2DAT3_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2DAT3_SD2[] = { (&sig_expr_SD2DAT3_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_29_SD2DAT3[(sizeof(sig_exprs_SD2DAT3_SD2) / sizeof((sig_exprs_SD2DAT3_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2DAT3_SD2)), typeof(&(sig_exprs_SD2DAT3_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2DAT3_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID4OUT_GPID4[] = { { 0, 0x8C, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID4OUT_GPID4 = { .signal = "GPID4OUT", .function = "GPID4", .ndescs = (sizeof(sig_descs_GPID4OUT_GPID4) / sizeof((sig_descs_GPID4OUT_GPID4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID4OUT_GPID4)), typeof(&(sig_descs_GPID4OUT_GPID4)[0])))); }))), .descs = &(sig_descs_GPID4OUT_GPID4)[0], };
static const struct aspeed_sig_desc sig_descs_GPID4OUT_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID4OUT_GPID = { .signal = "GPID4OUT", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID4OUT_GPID) / sizeof((sig_descs_GPID4OUT_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID4OUT_GPID)), typeof(&(sig_descs_GPID4OUT_GPID)[0])))); }))), .descs = &(sig_descs_GPID4OUT_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID4OUT_GPID4[] = { (&sig_expr_GPID4OUT_GPID4), (&sig_expr_GPID4OUT_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_29_GPID4OUT[(sizeof(sig_exprs_GPID4OUT_GPID4) / sizeof((sig_exprs_GPID4OUT_GPID4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID4OUT_GPID4)), typeof(&(sig_exprs_GPID4OUT_GPID4)[0])))); })))] __attribute__((alias("sig_exprs_GPID4OUT_GPID4")));
static const struct aspeed_sig_desc sig_descs_GPIOD5_GPIOD5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD5_GPIOD5 = { .signal = "GPIOD5", .function = "GPIOD5", .ndescs = (sizeof(sig_descs_GPIOD5_GPIOD5) / sizeof((sig_descs_GPIOD5_GPIOD5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD5_GPIOD5)), typeof(&(sig_descs_GPIOD5_GPIOD5)[0])))); }))), .descs = &(sig_descs_GPIOD5_GPIOD5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD5_GPIOD5[] = { (&sig_expr_GPIOD5_GPIOD5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_29_GPIOD5[(sizeof(sig_exprs_GPIOD5_GPIOD5) / sizeof((sig_exprs_GPIOD5_GPIOD5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD5_GPIOD5)), typeof(&(sig_exprs_GPIOD5_GPIOD5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD5_GPIOD5"))); static const struct aspeed_sig_expr **pin_exprs_29[] = { sig_exprs_29_SD2DAT3, sig_exprs_29_GPID4OUT, sig_exprs_29_GPIOD5, ((void *)0) }; static const struct aspeed_pin_desc pin_29 = { "29", (&pin_exprs_29[0]) };

static const int group_pins_GPID4[] = { 28, 29 }; static const char *func_groups_GPID4[] = { "GPID4" };




static const struct aspeed_sig_desc sig_descs_SD2CD_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2CD_SD2 = { .signal = "SD2CD", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2CD_SD2) / sizeof((sig_descs_SD2CD_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2CD_SD2)), typeof(&(sig_descs_SD2CD_SD2)[0])))); }))), .descs = &(sig_descs_SD2CD_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2CD_SD2[] = { (&sig_expr_SD2CD_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_30_SD2CD[(sizeof(sig_exprs_SD2CD_SD2) / sizeof((sig_exprs_SD2CD_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2CD_SD2)), typeof(&(sig_exprs_SD2CD_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2CD_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID6IN_GPID6[] = { { 0, 0x8C, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID6IN_GPID6 = { .signal = "GPID6IN", .function = "GPID6", .ndescs = (sizeof(sig_descs_GPID6IN_GPID6) / sizeof((sig_descs_GPID6IN_GPID6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID6IN_GPID6)), typeof(&(sig_descs_GPID6IN_GPID6)[0])))); }))), .descs = &(sig_descs_GPID6IN_GPID6)[0], };
static const struct aspeed_sig_desc sig_descs_GPID6IN_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID6IN_GPID = { .signal = "GPID6IN", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID6IN_GPID) / sizeof((sig_descs_GPID6IN_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID6IN_GPID)), typeof(&(sig_descs_GPID6IN_GPID)[0])))); }))), .descs = &(sig_descs_GPID6IN_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID6IN_GPID6[] = { (&sig_expr_GPID6IN_GPID6), (&sig_expr_GPID6IN_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_30_GPID6IN[(sizeof(sig_exprs_GPID6IN_GPID6) / sizeof((sig_exprs_GPID6IN_GPID6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID6IN_GPID6)), typeof(&(sig_exprs_GPID6IN_GPID6)[0])))); })))] __attribute__((alias("sig_exprs_GPID6IN_GPID6")));
static const struct aspeed_sig_desc sig_descs_GPIOD6_GPIOD6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD6_GPIOD6 = { .signal = "GPIOD6", .function = "GPIOD6", .ndescs = (sizeof(sig_descs_GPIOD6_GPIOD6) / sizeof((sig_descs_GPIOD6_GPIOD6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD6_GPIOD6)), typeof(&(sig_descs_GPIOD6_GPIOD6)[0])))); }))), .descs = &(sig_descs_GPIOD6_GPIOD6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD6_GPIOD6[] = { (&sig_expr_GPIOD6_GPIOD6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_30_GPIOD6[(sizeof(sig_exprs_GPIOD6_GPIOD6) / sizeof((sig_exprs_GPIOD6_GPIOD6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD6_GPIOD6)), typeof(&(sig_exprs_GPIOD6_GPIOD6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD6_GPIOD6"))); static const struct aspeed_sig_expr **pin_exprs_30[] = { sig_exprs_30_SD2CD, sig_exprs_30_GPID6IN, sig_exprs_30_GPIOD6, ((void *)0) }; static const struct aspeed_pin_desc pin_30 = { "30", (&pin_exprs_30[0]) };


static const struct aspeed_sig_desc sig_descs_SD2WP_SD2[] = { { 0, 0x90, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SD2WP_SD2 = { .signal = "SD2WP", .function = "SD2", .ndescs = (sizeof(sig_descs_SD2WP_SD2) / sizeof((sig_descs_SD2WP_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SD2WP_SD2)), typeof(&(sig_descs_SD2WP_SD2)[0])))); }))), .descs = &(sig_descs_SD2WP_SD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SD2WP_SD2[] = { (&sig_expr_SD2WP_SD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_31_SD2WP[(sizeof(sig_exprs_SD2WP_SD2) / sizeof((sig_exprs_SD2WP_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SD2WP_SD2)), typeof(&(sig_exprs_SD2WP_SD2)[0])))); })))] __attribute__((alias("sig_exprs_SD2WP_SD2")));
static const struct aspeed_sig_desc sig_descs_GPID6OUT_GPID6[] = { { 0, 0x8C, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID6OUT_GPID6 = { .signal = "GPID6OUT", .function = "GPID6", .ndescs = (sizeof(sig_descs_GPID6OUT_GPID6) / sizeof((sig_descs_GPID6OUT_GPID6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID6OUT_GPID6)), typeof(&(sig_descs_GPID6OUT_GPID6)[0])))); }))), .descs = &(sig_descs_GPID6OUT_GPID6)[0], };
static const struct aspeed_sig_desc sig_descs_GPID6OUT_GPID[] = { { 0, 0x70, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPID6OUT_GPID = { .signal = "GPID6OUT", .function = "GPID", .ndescs = (sizeof(sig_descs_GPID6OUT_GPID) / sizeof((sig_descs_GPID6OUT_GPID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPID6OUT_GPID)), typeof(&(sig_descs_GPID6OUT_GPID)[0])))); }))), .descs = &(sig_descs_GPID6OUT_GPID)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPID6OUT_GPID6[] = { (&sig_expr_GPID6OUT_GPID6), (&sig_expr_GPID6OUT_GPID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_31_GPID6OUT[(sizeof(sig_exprs_GPID6OUT_GPID6) / sizeof((sig_exprs_GPID6OUT_GPID6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPID6OUT_GPID6)), typeof(&(sig_exprs_GPID6OUT_GPID6)[0])))); })))] __attribute__((alias("sig_exprs_GPID6OUT_GPID6")));
static const struct aspeed_sig_desc sig_descs_GPIOD7_GPIOD7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOD7_GPIOD7 = { .signal = "GPIOD7", .function = "GPIOD7", .ndescs = (sizeof(sig_descs_GPIOD7_GPIOD7) / sizeof((sig_descs_GPIOD7_GPIOD7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOD7_GPIOD7)), typeof(&(sig_descs_GPIOD7_GPIOD7)[0])))); }))), .descs = &(sig_descs_GPIOD7_GPIOD7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOD7_GPIOD7[] = { (&sig_expr_GPIOD7_GPIOD7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_31_GPIOD7[(sizeof(sig_exprs_GPIOD7_GPIOD7) / sizeof((sig_exprs_GPIOD7_GPIOD7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOD7_GPIOD7)), typeof(&(sig_exprs_GPIOD7_GPIOD7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOD7_GPIOD7"))); static const struct aspeed_sig_expr **pin_exprs_31[] = { sig_exprs_31_SD2WP, sig_exprs_31_GPID6OUT, sig_exprs_31_GPIOD7, ((void *)0) }; static const struct aspeed_pin_desc pin_31 = { "31", (&pin_exprs_31[0]) };

static const int group_pins_GPID6[] = { 30, 31 }; static const char *func_groups_GPID6[] = { "GPID6" };
static const int group_pins_SD2[] = { 24, 25, 26, 27, 28, 29, 30, 31 }; static const char *func_groups_SD2[] = { "SD2" };





static const struct aspeed_sig_desc sig_descs_NCTS3_NCTS3[] = { { 0, 0x80, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NCTS3_NCTS3 = { .signal = "NCTS3", .function = "NCTS3", .ndescs = (sizeof(sig_descs_NCTS3_NCTS3) / sizeof((sig_descs_NCTS3_NCTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NCTS3_NCTS3)), typeof(&(sig_descs_NCTS3_NCTS3)[0])))); }))), .descs = &(sig_descs_NCTS3_NCTS3)[0], }; static const struct aspeed_sig_expr *sig_exprs_NCTS3_NCTS3[] = { (&sig_expr_NCTS3_NCTS3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_32_NCTS3[(sizeof(sig_exprs_NCTS3_NCTS3) / sizeof((sig_exprs_NCTS3_NCTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NCTS3_NCTS3)), typeof(&(sig_exprs_NCTS3_NCTS3)[0])))); })))] __attribute__((alias("sig_exprs_NCTS3_NCTS3")));
static const struct aspeed_sig_desc sig_descs_GPIE0IN_GPIE0[] = { { 0, 0x8C, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE0IN_GPIE0 = { .signal = "GPIE0IN", .function = "GPIE0", .ndescs = (sizeof(sig_descs_GPIE0IN_GPIE0) / sizeof((sig_descs_GPIE0IN_GPIE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE0IN_GPIE0)), typeof(&(sig_descs_GPIE0IN_GPIE0)[0])))); }))), .descs = &(sig_descs_GPIE0IN_GPIE0)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE0IN_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE0IN_GPIE = { .signal = "GPIE0IN", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE0IN_GPIE) / sizeof((sig_descs_GPIE0IN_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE0IN_GPIE)), typeof(&(sig_descs_GPIE0IN_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE0IN_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE0IN_GPIE0[] = { (&sig_expr_GPIE0IN_GPIE0), (&sig_expr_GPIE0IN_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_32_GPIE0IN[(sizeof(sig_exprs_GPIE0IN_GPIE0) / sizeof((sig_exprs_GPIE0IN_GPIE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE0IN_GPIE0)), typeof(&(sig_exprs_GPIE0IN_GPIE0)[0])))); })))] __attribute__((alias("sig_exprs_GPIE0IN_GPIE0")));
static const struct aspeed_sig_desc sig_descs_GPIOE0_GPIOE0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE0_GPIOE0 = { .signal = "GPIOE0", .function = "GPIOE0", .ndescs = (sizeof(sig_descs_GPIOE0_GPIOE0) / sizeof((sig_descs_GPIOE0_GPIOE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE0_GPIOE0)), typeof(&(sig_descs_GPIOE0_GPIOE0)[0])))); }))), .descs = &(sig_descs_GPIOE0_GPIOE0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE0_GPIOE0[] = { (&sig_expr_GPIOE0_GPIOE0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_32_GPIOE0[(sizeof(sig_exprs_GPIOE0_GPIOE0) / sizeof((sig_exprs_GPIOE0_GPIOE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE0_GPIOE0)), typeof(&(sig_exprs_GPIOE0_GPIOE0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE0_GPIOE0"))); static const struct aspeed_sig_expr **pin_exprs_32[] = { sig_exprs_32_NCTS3, sig_exprs_32_GPIE0IN, sig_exprs_32_GPIOE0, ((void *)0) }; static const struct aspeed_pin_desc pin_32 = { "32", (&pin_exprs_32[0]) };
static const int group_pins_NCTS3[] = { 32 }; static const char *func_groups_NCTS3[] = { "NCTS3" };


static const struct aspeed_sig_desc sig_descs_NDCD3_NDCD3[] = { { 0, 0x80, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDCD3_NDCD3 = { .signal = "NDCD3", .function = "NDCD3", .ndescs = (sizeof(sig_descs_NDCD3_NDCD3) / sizeof((sig_descs_NDCD3_NDCD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDCD3_NDCD3)), typeof(&(sig_descs_NDCD3_NDCD3)[0])))); }))), .descs = &(sig_descs_NDCD3_NDCD3)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDCD3_NDCD3[] = { (&sig_expr_NDCD3_NDCD3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_33_NDCD3[(sizeof(sig_exprs_NDCD3_NDCD3) / sizeof((sig_exprs_NDCD3_NDCD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDCD3_NDCD3)), typeof(&(sig_exprs_NDCD3_NDCD3)[0])))); })))] __attribute__((alias("sig_exprs_NDCD3_NDCD3")));
static const struct aspeed_sig_desc sig_descs_GPIE0OUT_GPIE0[] = { { 0, 0x8C, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE0OUT_GPIE0 = { .signal = "GPIE0OUT", .function = "GPIE0", .ndescs = (sizeof(sig_descs_GPIE0OUT_GPIE0) / sizeof((sig_descs_GPIE0OUT_GPIE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE0OUT_GPIE0)), typeof(&(sig_descs_GPIE0OUT_GPIE0)[0])))); }))), .descs = &(sig_descs_GPIE0OUT_GPIE0)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE0OUT_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE0OUT_GPIE = { .signal = "GPIE0OUT", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE0OUT_GPIE) / sizeof((sig_descs_GPIE0OUT_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE0OUT_GPIE)), typeof(&(sig_descs_GPIE0OUT_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE0OUT_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE0OUT_GPIE0[] = { (&sig_expr_GPIE0OUT_GPIE0), (&sig_expr_GPIE0OUT_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_33_GPIE0OUT[(sizeof(sig_exprs_GPIE0OUT_GPIE0) / sizeof((sig_exprs_GPIE0OUT_GPIE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE0OUT_GPIE0)), typeof(&(sig_exprs_GPIE0OUT_GPIE0)[0])))); })))] __attribute__((alias("sig_exprs_GPIE0OUT_GPIE0")));
static const struct aspeed_sig_desc sig_descs_GPIOE1_GPIOE1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE1_GPIOE1 = { .signal = "GPIOE1", .function = "GPIOE1", .ndescs = (sizeof(sig_descs_GPIOE1_GPIOE1) / sizeof((sig_descs_GPIOE1_GPIOE1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE1_GPIOE1)), typeof(&(sig_descs_GPIOE1_GPIOE1)[0])))); }))), .descs = &(sig_descs_GPIOE1_GPIOE1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE1_GPIOE1[] = { (&sig_expr_GPIOE1_GPIOE1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_33_GPIOE1[(sizeof(sig_exprs_GPIOE1_GPIOE1) / sizeof((sig_exprs_GPIOE1_GPIOE1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE1_GPIOE1)), typeof(&(sig_exprs_GPIOE1_GPIOE1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE1_GPIOE1"))); static const struct aspeed_sig_expr **pin_exprs_33[] = { sig_exprs_33_NDCD3, sig_exprs_33_GPIE0OUT, sig_exprs_33_GPIOE1, ((void *)0) }; static const struct aspeed_pin_desc pin_33 = { "33", (&pin_exprs_33[0]) };
static const int group_pins_NDCD3[] = { 33 }; static const char *func_groups_NDCD3[] = { "NDCD3" };

static const int group_pins_GPIE0[] = { 32, 33 }; static const char *func_groups_GPIE0[] = { "GPIE0" };




static const struct aspeed_sig_desc sig_descs_NDSR3_NDSR3[] = { { 0, 0x80, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDSR3_NDSR3 = { .signal = "NDSR3", .function = "NDSR3", .ndescs = (sizeof(sig_descs_NDSR3_NDSR3) / sizeof((sig_descs_NDSR3_NDSR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDSR3_NDSR3)), typeof(&(sig_descs_NDSR3_NDSR3)[0])))); }))), .descs = &(sig_descs_NDSR3_NDSR3)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDSR3_NDSR3[] = { (&sig_expr_NDSR3_NDSR3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_34_NDSR3[(sizeof(sig_exprs_NDSR3_NDSR3) / sizeof((sig_exprs_NDSR3_NDSR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDSR3_NDSR3)), typeof(&(sig_exprs_NDSR3_NDSR3)[0])))); })))] __attribute__((alias("sig_exprs_NDSR3_NDSR3")));
static const struct aspeed_sig_desc sig_descs_GPIE2IN_GPIE2[] = { { 0, 0x8C, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE2IN_GPIE2 = { .signal = "GPIE2IN", .function = "GPIE2", .ndescs = (sizeof(sig_descs_GPIE2IN_GPIE2) / sizeof((sig_descs_GPIE2IN_GPIE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE2IN_GPIE2)), typeof(&(sig_descs_GPIE2IN_GPIE2)[0])))); }))), .descs = &(sig_descs_GPIE2IN_GPIE2)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE2IN_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE2IN_GPIE = { .signal = "GPIE2IN", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE2IN_GPIE) / sizeof((sig_descs_GPIE2IN_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE2IN_GPIE)), typeof(&(sig_descs_GPIE2IN_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE2IN_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE2IN_GPIE2[] = { (&sig_expr_GPIE2IN_GPIE2), (&sig_expr_GPIE2IN_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_34_GPIE2IN[(sizeof(sig_exprs_GPIE2IN_GPIE2) / sizeof((sig_exprs_GPIE2IN_GPIE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE2IN_GPIE2)), typeof(&(sig_exprs_GPIE2IN_GPIE2)[0])))); })))] __attribute__((alias("sig_exprs_GPIE2IN_GPIE2")));
static const struct aspeed_sig_desc sig_descs_GPIOE2_GPIOE2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE2_GPIOE2 = { .signal = "GPIOE2", .function = "GPIOE2", .ndescs = (sizeof(sig_descs_GPIOE2_GPIOE2) / sizeof((sig_descs_GPIOE2_GPIOE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE2_GPIOE2)), typeof(&(sig_descs_GPIOE2_GPIOE2)[0])))); }))), .descs = &(sig_descs_GPIOE2_GPIOE2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE2_GPIOE2[] = { (&sig_expr_GPIOE2_GPIOE2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_34_GPIOE2[(sizeof(sig_exprs_GPIOE2_GPIOE2) / sizeof((sig_exprs_GPIOE2_GPIOE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE2_GPIOE2)), typeof(&(sig_exprs_GPIOE2_GPIOE2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE2_GPIOE2"))); static const struct aspeed_sig_expr **pin_exprs_34[] = { sig_exprs_34_NDSR3, sig_exprs_34_GPIE2IN, sig_exprs_34_GPIOE2, ((void *)0) }; static const struct aspeed_pin_desc pin_34 = { "34", (&pin_exprs_34[0]) };
static const int group_pins_NDSR3[] = { 34 }; static const char *func_groups_NDSR3[] = { "NDSR3" };



static const struct aspeed_sig_desc sig_descs_NRI3_NRI3[] = { { 0, 0x80, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NRI3_NRI3 = { .signal = "NRI3", .function = "NRI3", .ndescs = (sizeof(sig_descs_NRI3_NRI3) / sizeof((sig_descs_NRI3_NRI3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRI3_NRI3)), typeof(&(sig_descs_NRI3_NRI3)[0])))); }))), .descs = &(sig_descs_NRI3_NRI3)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRI3_NRI3[] = { (&sig_expr_NRI3_NRI3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_35_NRI3[(sizeof(sig_exprs_NRI3_NRI3) / sizeof((sig_exprs_NRI3_NRI3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRI3_NRI3)), typeof(&(sig_exprs_NRI3_NRI3)[0])))); })))] __attribute__((alias("sig_exprs_NRI3_NRI3")));
static const struct aspeed_sig_desc sig_descs_GPIE2OUT_GPIE2[] = { { 0, 0x8C, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE2OUT_GPIE2 = { .signal = "GPIE2OUT", .function = "GPIE2", .ndescs = (sizeof(sig_descs_GPIE2OUT_GPIE2) / sizeof((sig_descs_GPIE2OUT_GPIE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE2OUT_GPIE2)), typeof(&(sig_descs_GPIE2OUT_GPIE2)[0])))); }))), .descs = &(sig_descs_GPIE2OUT_GPIE2)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE2OUT_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE2OUT_GPIE = { .signal = "GPIE2OUT", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE2OUT_GPIE) / sizeof((sig_descs_GPIE2OUT_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE2OUT_GPIE)), typeof(&(sig_descs_GPIE2OUT_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE2OUT_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE2OUT_GPIE2[] = { (&sig_expr_GPIE2OUT_GPIE2), (&sig_expr_GPIE2OUT_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_35_GPIE2OUT[(sizeof(sig_exprs_GPIE2OUT_GPIE2) / sizeof((sig_exprs_GPIE2OUT_GPIE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE2OUT_GPIE2)), typeof(&(sig_exprs_GPIE2OUT_GPIE2)[0])))); })))] __attribute__((alias("sig_exprs_GPIE2OUT_GPIE2")));
static const struct aspeed_sig_desc sig_descs_GPIOE3_GPIOE3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE3_GPIOE3 = { .signal = "GPIOE3", .function = "GPIOE3", .ndescs = (sizeof(sig_descs_GPIOE3_GPIOE3) / sizeof((sig_descs_GPIOE3_GPIOE3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE3_GPIOE3)), typeof(&(sig_descs_GPIOE3_GPIOE3)[0])))); }))), .descs = &(sig_descs_GPIOE3_GPIOE3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE3_GPIOE3[] = { (&sig_expr_GPIOE3_GPIOE3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_35_GPIOE3[(sizeof(sig_exprs_GPIOE3_GPIOE3) / sizeof((sig_exprs_GPIOE3_GPIOE3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE3_GPIOE3)), typeof(&(sig_exprs_GPIOE3_GPIOE3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE3_GPIOE3"))); static const struct aspeed_sig_expr **pin_exprs_35[] = { sig_exprs_35_NRI3, sig_exprs_35_GPIE2OUT, sig_exprs_35_GPIOE3, ((void *)0) }; static const struct aspeed_pin_desc pin_35 = { "35", (&pin_exprs_35[0]) };
static const int group_pins_NRI3[] = { 35 }; static const char *func_groups_NRI3[] = { "NRI3" };

static const int group_pins_GPIE2[] = { 34, 35 }; static const char *func_groups_GPIE2[] = { "GPIE2" };




static const struct aspeed_sig_desc sig_descs_NDTR3_NDTR3[] = { { 0, 0x80, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDTR3_NDTR3 = { .signal = "NDTR3", .function = "NDTR3", .ndescs = (sizeof(sig_descs_NDTR3_NDTR3) / sizeof((sig_descs_NDTR3_NDTR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDTR3_NDTR3)), typeof(&(sig_descs_NDTR3_NDTR3)[0])))); }))), .descs = &(sig_descs_NDTR3_NDTR3)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDTR3_NDTR3[] = { (&sig_expr_NDTR3_NDTR3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_36_NDTR3[(sizeof(sig_exprs_NDTR3_NDTR3) / sizeof((sig_exprs_NDTR3_NDTR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDTR3_NDTR3)), typeof(&(sig_exprs_NDTR3_NDTR3)[0])))); })))] __attribute__((alias("sig_exprs_NDTR3_NDTR3")));
static const struct aspeed_sig_desc sig_descs_GPIE4IN_GPIE4[] = { { 0, 0x8C, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE4IN_GPIE4 = { .signal = "GPIE4IN", .function = "GPIE4", .ndescs = (sizeof(sig_descs_GPIE4IN_GPIE4) / sizeof((sig_descs_GPIE4IN_GPIE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE4IN_GPIE4)), typeof(&(sig_descs_GPIE4IN_GPIE4)[0])))); }))), .descs = &(sig_descs_GPIE4IN_GPIE4)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE4IN_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE4IN_GPIE = { .signal = "GPIE4IN", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE4IN_GPIE) / sizeof((sig_descs_GPIE4IN_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE4IN_GPIE)), typeof(&(sig_descs_GPIE4IN_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE4IN_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE4IN_GPIE4[] = { (&sig_expr_GPIE4IN_GPIE4), (&sig_expr_GPIE4IN_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_36_GPIE4IN[(sizeof(sig_exprs_GPIE4IN_GPIE4) / sizeof((sig_exprs_GPIE4IN_GPIE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE4IN_GPIE4)), typeof(&(sig_exprs_GPIE4IN_GPIE4)[0])))); })))] __attribute__((alias("sig_exprs_GPIE4IN_GPIE4")));
static const struct aspeed_sig_desc sig_descs_GPIOE4_GPIOE4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE4_GPIOE4 = { .signal = "GPIOE4", .function = "GPIOE4", .ndescs = (sizeof(sig_descs_GPIOE4_GPIOE4) / sizeof((sig_descs_GPIOE4_GPIOE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE4_GPIOE4)), typeof(&(sig_descs_GPIOE4_GPIOE4)[0])))); }))), .descs = &(sig_descs_GPIOE4_GPIOE4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE4_GPIOE4[] = { (&sig_expr_GPIOE4_GPIOE4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_36_GPIOE4[(sizeof(sig_exprs_GPIOE4_GPIOE4) / sizeof((sig_exprs_GPIOE4_GPIOE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE4_GPIOE4)), typeof(&(sig_exprs_GPIOE4_GPIOE4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE4_GPIOE4"))); static const struct aspeed_sig_expr **pin_exprs_36[] = { sig_exprs_36_NDTR3, sig_exprs_36_GPIE4IN, sig_exprs_36_GPIOE4, ((void *)0) }; static const struct aspeed_pin_desc pin_36 = { "36", (&pin_exprs_36[0]) };
static const int group_pins_NDTR3[] = { 36 }; static const char *func_groups_NDTR3[] = { "NDTR3" };


static const struct aspeed_sig_desc sig_descs_NRTS3_NRTS3[] = { { 0, 0x80, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NRTS3_NRTS3 = { .signal = "NRTS3", .function = "NRTS3", .ndescs = (sizeof(sig_descs_NRTS3_NRTS3) / sizeof((sig_descs_NRTS3_NRTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRTS3_NRTS3)), typeof(&(sig_descs_NRTS3_NRTS3)[0])))); }))), .descs = &(sig_descs_NRTS3_NRTS3)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRTS3_NRTS3[] = { (&sig_expr_NRTS3_NRTS3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_37_NRTS3[(sizeof(sig_exprs_NRTS3_NRTS3) / sizeof((sig_exprs_NRTS3_NRTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRTS3_NRTS3)), typeof(&(sig_exprs_NRTS3_NRTS3)[0])))); })))] __attribute__((alias("sig_exprs_NRTS3_NRTS3")));
static const struct aspeed_sig_desc sig_descs_GPIE4OUT_GPIE4[] = { { 0, 0x8C, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE4OUT_GPIE4 = { .signal = "GPIE4OUT", .function = "GPIE4", .ndescs = (sizeof(sig_descs_GPIE4OUT_GPIE4) / sizeof((sig_descs_GPIE4OUT_GPIE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE4OUT_GPIE4)), typeof(&(sig_descs_GPIE4OUT_GPIE4)[0])))); }))), .descs = &(sig_descs_GPIE4OUT_GPIE4)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE4OUT_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE4OUT_GPIE = { .signal = "GPIE4OUT", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE4OUT_GPIE) / sizeof((sig_descs_GPIE4OUT_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE4OUT_GPIE)), typeof(&(sig_descs_GPIE4OUT_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE4OUT_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE4OUT_GPIE4[] = { (&sig_expr_GPIE4OUT_GPIE4), (&sig_expr_GPIE4OUT_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_37_GPIE4OUT[(sizeof(sig_exprs_GPIE4OUT_GPIE4) / sizeof((sig_exprs_GPIE4OUT_GPIE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE4OUT_GPIE4)), typeof(&(sig_exprs_GPIE4OUT_GPIE4)[0])))); })))] __attribute__((alias("sig_exprs_GPIE4OUT_GPIE4")));
static const struct aspeed_sig_desc sig_descs_GPIOE5_GPIOE5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE5_GPIOE5 = { .signal = "GPIOE5", .function = "GPIOE5", .ndescs = (sizeof(sig_descs_GPIOE5_GPIOE5) / sizeof((sig_descs_GPIOE5_GPIOE5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE5_GPIOE5)), typeof(&(sig_descs_GPIOE5_GPIOE5)[0])))); }))), .descs = &(sig_descs_GPIOE5_GPIOE5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE5_GPIOE5[] = { (&sig_expr_GPIOE5_GPIOE5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_37_GPIOE5[(sizeof(sig_exprs_GPIOE5_GPIOE5) / sizeof((sig_exprs_GPIOE5_GPIOE5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE5_GPIOE5)), typeof(&(sig_exprs_GPIOE5_GPIOE5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE5_GPIOE5"))); static const struct aspeed_sig_expr **pin_exprs_37[] = { sig_exprs_37_NRTS3, sig_exprs_37_GPIE4OUT, sig_exprs_37_GPIOE5, ((void *)0) }; static const struct aspeed_pin_desc pin_37 = { "37", (&pin_exprs_37[0]) };
static const int group_pins_NRTS3[] = { 37 }; static const char *func_groups_NRTS3[] = { "NRTS3" };

static const int group_pins_GPIE4[] = { 36, 37 }; static const char *func_groups_GPIE4[] = { "GPIE4" };




static const struct aspeed_sig_desc sig_descs_TXD3_TXD3[] = { { 0, 0x80, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_TXD3_TXD3 = { .signal = "TXD3", .function = "TXD3", .ndescs = (sizeof(sig_descs_TXD3_TXD3) / sizeof((sig_descs_TXD3_TXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TXD3_TXD3)), typeof(&(sig_descs_TXD3_TXD3)[0])))); }))), .descs = &(sig_descs_TXD3_TXD3)[0], }; static const struct aspeed_sig_expr *sig_exprs_TXD3_TXD3[] = { (&sig_expr_TXD3_TXD3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_38_TXD3[(sizeof(sig_exprs_TXD3_TXD3) / sizeof((sig_exprs_TXD3_TXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TXD3_TXD3)), typeof(&(sig_exprs_TXD3_TXD3)[0])))); })))] __attribute__((alias("sig_exprs_TXD3_TXD3")));
static const struct aspeed_sig_desc sig_descs_GPIE6IN_GPIE6[] = { { 0, 0x8C, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE6IN_GPIE6 = { .signal = "GPIE6IN", .function = "GPIE6", .ndescs = (sizeof(sig_descs_GPIE6IN_GPIE6) / sizeof((sig_descs_GPIE6IN_GPIE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE6IN_GPIE6)), typeof(&(sig_descs_GPIE6IN_GPIE6)[0])))); }))), .descs = &(sig_descs_GPIE6IN_GPIE6)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE6IN_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE6IN_GPIE = { .signal = "GPIE6IN", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE6IN_GPIE) / sizeof((sig_descs_GPIE6IN_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE6IN_GPIE)), typeof(&(sig_descs_GPIE6IN_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE6IN_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE6IN_GPIE6[] = { (&sig_expr_GPIE6IN_GPIE6), (&sig_expr_GPIE6IN_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_38_GPIE6IN[(sizeof(sig_exprs_GPIE6IN_GPIE6) / sizeof((sig_exprs_GPIE6IN_GPIE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE6IN_GPIE6)), typeof(&(sig_exprs_GPIE6IN_GPIE6)[0])))); })))] __attribute__((alias("sig_exprs_GPIE6IN_GPIE6")));
static const struct aspeed_sig_desc sig_descs_GPIOE6_GPIOE6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE6_GPIOE6 = { .signal = "GPIOE6", .function = "GPIOE6", .ndescs = (sizeof(sig_descs_GPIOE6_GPIOE6) / sizeof((sig_descs_GPIOE6_GPIOE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE6_GPIOE6)), typeof(&(sig_descs_GPIOE6_GPIOE6)[0])))); }))), .descs = &(sig_descs_GPIOE6_GPIOE6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE6_GPIOE6[] = { (&sig_expr_GPIOE6_GPIOE6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_38_GPIOE6[(sizeof(sig_exprs_GPIOE6_GPIOE6) / sizeof((sig_exprs_GPIOE6_GPIOE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE6_GPIOE6)), typeof(&(sig_exprs_GPIOE6_GPIOE6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE6_GPIOE6"))); static const struct aspeed_sig_expr **pin_exprs_38[] = { sig_exprs_38_TXD3, sig_exprs_38_GPIE6IN, sig_exprs_38_GPIOE6, ((void *)0) }; static const struct aspeed_pin_desc pin_38 = { "38", (&pin_exprs_38[0]) };
static const int group_pins_TXD3[] = { 38 }; static const char *func_groups_TXD3[] = { "TXD3" };


static const struct aspeed_sig_desc sig_descs_RXD3_RXD3[] = { { 0, 0x80, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RXD3_RXD3 = { .signal = "RXD3", .function = "RXD3", .ndescs = (sizeof(sig_descs_RXD3_RXD3) / sizeof((sig_descs_RXD3_RXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RXD3_RXD3)), typeof(&(sig_descs_RXD3_RXD3)[0])))); }))), .descs = &(sig_descs_RXD3_RXD3)[0], }; static const struct aspeed_sig_expr *sig_exprs_RXD3_RXD3[] = { (&sig_expr_RXD3_RXD3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_39_RXD3[(sizeof(sig_exprs_RXD3_RXD3) / sizeof((sig_exprs_RXD3_RXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RXD3_RXD3)), typeof(&(sig_exprs_RXD3_RXD3)[0])))); })))] __attribute__((alias("sig_exprs_RXD3_RXD3")));
static const struct aspeed_sig_desc sig_descs_GPIE6OUT_GPIE6[] = { { 0, 0x8C, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE6OUT_GPIE6 = { .signal = "GPIE6OUT", .function = "GPIE6", .ndescs = (sizeof(sig_descs_GPIE6OUT_GPIE6) / sizeof((sig_descs_GPIE6OUT_GPIE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE6OUT_GPIE6)), typeof(&(sig_descs_GPIE6OUT_GPIE6)[0])))); }))), .descs = &(sig_descs_GPIE6OUT_GPIE6)[0], };
static const struct aspeed_sig_desc sig_descs_GPIE6OUT_GPIE[] = { { 0, 0x70, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIE6OUT_GPIE = { .signal = "GPIE6OUT", .function = "GPIE", .ndescs = (sizeof(sig_descs_GPIE6OUT_GPIE) / sizeof((sig_descs_GPIE6OUT_GPIE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIE6OUT_GPIE)), typeof(&(sig_descs_GPIE6OUT_GPIE)[0])))); }))), .descs = &(sig_descs_GPIE6OUT_GPIE)[0], };
static const struct aspeed_sig_expr *sig_exprs_GPIE6OUT_GPIE6[] = { (&sig_expr_GPIE6OUT_GPIE6), (&sig_expr_GPIE6OUT_GPIE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_39_GPIE6OUT[(sizeof(sig_exprs_GPIE6OUT_GPIE6) / sizeof((sig_exprs_GPIE6OUT_GPIE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIE6OUT_GPIE6)), typeof(&(sig_exprs_GPIE6OUT_GPIE6)[0])))); })))] __attribute__((alias("sig_exprs_GPIE6OUT_GPIE6")));
static const struct aspeed_sig_desc sig_descs_GPIOE7_GPIOE7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOE7_GPIOE7 = { .signal = "GPIOE7", .function = "GPIOE7", .ndescs = (sizeof(sig_descs_GPIOE7_GPIOE7) / sizeof((sig_descs_GPIOE7_GPIOE7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOE7_GPIOE7)), typeof(&(sig_descs_GPIOE7_GPIOE7)[0])))); }))), .descs = &(sig_descs_GPIOE7_GPIOE7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOE7_GPIOE7[] = { (&sig_expr_GPIOE7_GPIOE7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_39_GPIOE7[(sizeof(sig_exprs_GPIOE7_GPIOE7) / sizeof((sig_exprs_GPIOE7_GPIOE7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOE7_GPIOE7)), typeof(&(sig_exprs_GPIOE7_GPIOE7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOE7_GPIOE7"))); static const struct aspeed_sig_expr **pin_exprs_39[] = { sig_exprs_39_RXD3, sig_exprs_39_GPIE6OUT, sig_exprs_39_GPIOE7, ((void *)0) }; static const struct aspeed_pin_desc pin_39 = { "39", (&pin_exprs_39[0]) };
static const int group_pins_RXD3[] = { 39 }; static const char *func_groups_RXD3[] = { "RXD3" };

static const int group_pins_GPIE6[] = { 38, 39 }; static const char *func_groups_GPIE6[] = { "GPIE6" };





static const struct aspeed_sig_desc sig_descs_LHAD0_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD0_LPCHC = { .signal = "LHAD0", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHAD0_LPCHC) / sizeof((sig_descs_LHAD0_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD0_LPCHC)), typeof(&(sig_descs_LHAD0_LPCHC)[0])))); }))), .descs = &(sig_descs_LHAD0_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHAD0_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD0_LPCPLUS = { .signal = "LHAD0", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHAD0_LPCPLUS) / sizeof((sig_descs_LHAD0_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD0_LPCPLUS)), typeof(&(sig_descs_LHAD0_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHAD0_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHAD0_LPCHC[] = { (&sig_expr_LHAD0_LPCHC), (&sig_expr_LHAD0_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_40_LHAD0[(sizeof(sig_exprs_LHAD0_LPCHC) / sizeof((sig_exprs_LHAD0_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHAD0_LPCHC)), typeof(&(sig_exprs_LHAD0_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHAD0_LPCHC")));
static const struct aspeed_sig_desc sig_descs_NCTS4_NCTS4[] = { { 0, 0x80, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NCTS4_NCTS4 = { .signal = "NCTS4", .function = "NCTS4", .ndescs = (sizeof(sig_descs_NCTS4_NCTS4) / sizeof((sig_descs_NCTS4_NCTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NCTS4_NCTS4)), typeof(&(sig_descs_NCTS4_NCTS4)[0])))); }))), .descs = &(sig_descs_NCTS4_NCTS4)[0], }; static const struct aspeed_sig_expr *sig_exprs_NCTS4_NCTS4[] = { (&sig_expr_NCTS4_NCTS4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_40_NCTS4[(sizeof(sig_exprs_NCTS4_NCTS4) / sizeof((sig_exprs_NCTS4_NCTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NCTS4_NCTS4)), typeof(&(sig_exprs_NCTS4_NCTS4)[0])))); })))] __attribute__((alias("sig_exprs_NCTS4_NCTS4")));
static const struct aspeed_sig_desc sig_descs_GPIOF0_GPIOF0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF0_GPIOF0 = { .signal = "GPIOF0", .function = "GPIOF0", .ndescs = (sizeof(sig_descs_GPIOF0_GPIOF0) / sizeof((sig_descs_GPIOF0_GPIOF0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF0_GPIOF0)), typeof(&(sig_descs_GPIOF0_GPIOF0)[0])))); }))), .descs = &(sig_descs_GPIOF0_GPIOF0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF0_GPIOF0[] = { (&sig_expr_GPIOF0_GPIOF0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_40_GPIOF0[(sizeof(sig_exprs_GPIOF0_GPIOF0) / sizeof((sig_exprs_GPIOF0_GPIOF0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF0_GPIOF0)), typeof(&(sig_exprs_GPIOF0_GPIOF0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF0_GPIOF0"))); static const struct aspeed_sig_expr **pin_exprs_40[] = { sig_exprs_40_LHAD0, sig_exprs_40_NCTS4, sig_exprs_40_GPIOF0, ((void *)0) }; static const struct aspeed_pin_desc pin_40 = { "40", (&pin_exprs_40[0]) };
static const int group_pins_NCTS4[] = { 40 }; static const char *func_groups_NCTS4[] = { "NCTS4" };


static const struct aspeed_sig_desc sig_descs_LHAD1_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD1_LPCHC = { .signal = "LHAD1", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHAD1_LPCHC) / sizeof((sig_descs_LHAD1_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD1_LPCHC)), typeof(&(sig_descs_LHAD1_LPCHC)[0])))); }))), .descs = &(sig_descs_LHAD1_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHAD1_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD1_LPCPLUS = { .signal = "LHAD1", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHAD1_LPCPLUS) / sizeof((sig_descs_LHAD1_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD1_LPCPLUS)), typeof(&(sig_descs_LHAD1_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHAD1_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHAD1_LPCHC[] = { (&sig_expr_LHAD1_LPCHC), (&sig_expr_LHAD1_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_41_LHAD1[(sizeof(sig_exprs_LHAD1_LPCHC) / sizeof((sig_exprs_LHAD1_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHAD1_LPCHC)), typeof(&(sig_exprs_LHAD1_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHAD1_LPCHC")));
static const struct aspeed_sig_desc sig_descs_NDCD4_NDCD4[] = { { 0, 0x80, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDCD4_NDCD4 = { .signal = "NDCD4", .function = "NDCD4", .ndescs = (sizeof(sig_descs_NDCD4_NDCD4) / sizeof((sig_descs_NDCD4_NDCD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDCD4_NDCD4)), typeof(&(sig_descs_NDCD4_NDCD4)[0])))); }))), .descs = &(sig_descs_NDCD4_NDCD4)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDCD4_NDCD4[] = { (&sig_expr_NDCD4_NDCD4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_41_NDCD4[(sizeof(sig_exprs_NDCD4_NDCD4) / sizeof((sig_exprs_NDCD4_NDCD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDCD4_NDCD4)), typeof(&(sig_exprs_NDCD4_NDCD4)[0])))); })))] __attribute__((alias("sig_exprs_NDCD4_NDCD4")));
static const struct aspeed_sig_desc sig_descs_GPIOF1_GPIOF1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF1_GPIOF1 = { .signal = "GPIOF1", .function = "GPIOF1", .ndescs = (sizeof(sig_descs_GPIOF1_GPIOF1) / sizeof((sig_descs_GPIOF1_GPIOF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF1_GPIOF1)), typeof(&(sig_descs_GPIOF1_GPIOF1)[0])))); }))), .descs = &(sig_descs_GPIOF1_GPIOF1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF1_GPIOF1[] = { (&sig_expr_GPIOF1_GPIOF1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_41_GPIOF1[(sizeof(sig_exprs_GPIOF1_GPIOF1) / sizeof((sig_exprs_GPIOF1_GPIOF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF1_GPIOF1)), typeof(&(sig_exprs_GPIOF1_GPIOF1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF1_GPIOF1"))); static const struct aspeed_sig_expr **pin_exprs_41[] = { sig_exprs_41_LHAD1, sig_exprs_41_NDCD4, sig_exprs_41_GPIOF1, ((void *)0) }; static const struct aspeed_pin_desc pin_41 = { "41", (&pin_exprs_41[0]) };
static const int group_pins_NDCD4[] = { 41 }; static const char *func_groups_NDCD4[] = { "NDCD4" };


static const struct aspeed_sig_desc sig_descs_LHAD2_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD2_LPCHC = { .signal = "LHAD2", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHAD2_LPCHC) / sizeof((sig_descs_LHAD2_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD2_LPCHC)), typeof(&(sig_descs_LHAD2_LPCHC)[0])))); }))), .descs = &(sig_descs_LHAD2_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHAD2_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD2_LPCPLUS = { .signal = "LHAD2", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHAD2_LPCPLUS) / sizeof((sig_descs_LHAD2_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD2_LPCPLUS)), typeof(&(sig_descs_LHAD2_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHAD2_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHAD2_LPCHC[] = { (&sig_expr_LHAD2_LPCHC), (&sig_expr_LHAD2_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_42_LHAD2[(sizeof(sig_exprs_LHAD2_LPCHC) / sizeof((sig_exprs_LHAD2_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHAD2_LPCHC)), typeof(&(sig_exprs_LHAD2_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHAD2_LPCHC")));
static const struct aspeed_sig_desc sig_descs_NDSR4_NDSR4[] = { { 0, 0x80, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDSR4_NDSR4 = { .signal = "NDSR4", .function = "NDSR4", .ndescs = (sizeof(sig_descs_NDSR4_NDSR4) / sizeof((sig_descs_NDSR4_NDSR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDSR4_NDSR4)), typeof(&(sig_descs_NDSR4_NDSR4)[0])))); }))), .descs = &(sig_descs_NDSR4_NDSR4)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDSR4_NDSR4[] = { (&sig_expr_NDSR4_NDSR4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_42_NDSR4[(sizeof(sig_exprs_NDSR4_NDSR4) / sizeof((sig_exprs_NDSR4_NDSR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDSR4_NDSR4)), typeof(&(sig_exprs_NDSR4_NDSR4)[0])))); })))] __attribute__((alias("sig_exprs_NDSR4_NDSR4")));
static const struct aspeed_sig_desc sig_descs_GPIOF2_GPIOF2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF2_GPIOF2 = { .signal = "GPIOF2", .function = "GPIOF2", .ndescs = (sizeof(sig_descs_GPIOF2_GPIOF2) / sizeof((sig_descs_GPIOF2_GPIOF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF2_GPIOF2)), typeof(&(sig_descs_GPIOF2_GPIOF2)[0])))); }))), .descs = &(sig_descs_GPIOF2_GPIOF2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF2_GPIOF2[] = { (&sig_expr_GPIOF2_GPIOF2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_42_GPIOF2[(sizeof(sig_exprs_GPIOF2_GPIOF2) / sizeof((sig_exprs_GPIOF2_GPIOF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF2_GPIOF2)), typeof(&(sig_exprs_GPIOF2_GPIOF2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF2_GPIOF2"))); static const struct aspeed_sig_expr **pin_exprs_42[] = { sig_exprs_42_LHAD2, sig_exprs_42_NDSR4, sig_exprs_42_GPIOF2, ((void *)0) }; static const struct aspeed_pin_desc pin_42 = { "42", (&pin_exprs_42[0]) };
static const int group_pins_NDSR4[] = { 42 }; static const char *func_groups_NDSR4[] = { "NDSR4" };


static const struct aspeed_sig_desc sig_descs_LHAD3_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD3_LPCHC = { .signal = "LHAD3", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHAD3_LPCHC) / sizeof((sig_descs_LHAD3_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD3_LPCHC)), typeof(&(sig_descs_LHAD3_LPCHC)[0])))); }))), .descs = &(sig_descs_LHAD3_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHAD3_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHAD3_LPCPLUS = { .signal = "LHAD3", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHAD3_LPCPLUS) / sizeof((sig_descs_LHAD3_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHAD3_LPCPLUS)), typeof(&(sig_descs_LHAD3_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHAD3_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHAD3_LPCHC[] = { (&sig_expr_LHAD3_LPCHC), (&sig_expr_LHAD3_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_43_LHAD3[(sizeof(sig_exprs_LHAD3_LPCHC) / sizeof((sig_exprs_LHAD3_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHAD3_LPCHC)), typeof(&(sig_exprs_LHAD3_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHAD3_LPCHC")));
static const struct aspeed_sig_desc sig_descs_NRI4_NRI4[] = { { 0, 0x80, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NRI4_NRI4 = { .signal = "NRI4", .function = "NRI4", .ndescs = (sizeof(sig_descs_NRI4_NRI4) / sizeof((sig_descs_NRI4_NRI4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRI4_NRI4)), typeof(&(sig_descs_NRI4_NRI4)[0])))); }))), .descs = &(sig_descs_NRI4_NRI4)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRI4_NRI4[] = { (&sig_expr_NRI4_NRI4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_43_NRI4[(sizeof(sig_exprs_NRI4_NRI4) / sizeof((sig_exprs_NRI4_NRI4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRI4_NRI4)), typeof(&(sig_exprs_NRI4_NRI4)[0])))); })))] __attribute__((alias("sig_exprs_NRI4_NRI4")));
static const struct aspeed_sig_desc sig_descs_GPIOF3_GPIOF3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF3_GPIOF3 = { .signal = "GPIOF3", .function = "GPIOF3", .ndescs = (sizeof(sig_descs_GPIOF3_GPIOF3) / sizeof((sig_descs_GPIOF3_GPIOF3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF3_GPIOF3)), typeof(&(sig_descs_GPIOF3_GPIOF3)[0])))); }))), .descs = &(sig_descs_GPIOF3_GPIOF3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF3_GPIOF3[] = { (&sig_expr_GPIOF3_GPIOF3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_43_GPIOF3[(sizeof(sig_exprs_GPIOF3_GPIOF3) / sizeof((sig_exprs_GPIOF3_GPIOF3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF3_GPIOF3)), typeof(&(sig_exprs_GPIOF3_GPIOF3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF3_GPIOF3"))); static const struct aspeed_sig_expr **pin_exprs_43[] = { sig_exprs_43_LHAD3, sig_exprs_43_NRI4, sig_exprs_43_GPIOF3, ((void *)0) }; static const struct aspeed_pin_desc pin_43 = { "43", (&pin_exprs_43[0]) };
static const int group_pins_NRI4[] = { 43 }; static const char *func_groups_NRI4[] = { "NRI4" };


static const struct aspeed_sig_desc sig_descs_LHCLK_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHCLK_LPCHC = { .signal = "LHCLK", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHCLK_LPCHC) / sizeof((sig_descs_LHCLK_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHCLK_LPCHC)), typeof(&(sig_descs_LHCLK_LPCHC)[0])))); }))), .descs = &(sig_descs_LHCLK_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHCLK_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHCLK_LPCPLUS = { .signal = "LHCLK", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHCLK_LPCPLUS) / sizeof((sig_descs_LHCLK_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHCLK_LPCPLUS)), typeof(&(sig_descs_LHCLK_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHCLK_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHCLK_LPCHC[] = { (&sig_expr_LHCLK_LPCHC), (&sig_expr_LHCLK_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_44_LHCLK[(sizeof(sig_exprs_LHCLK_LPCHC) / sizeof((sig_exprs_LHCLK_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHCLK_LPCHC)), typeof(&(sig_exprs_LHCLK_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHCLK_LPCHC")));
static const struct aspeed_sig_desc sig_descs_NDTR4_NDTR4[] = { { 0, 0x80, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDTR4_NDTR4 = { .signal = "NDTR4", .function = "NDTR4", .ndescs = (sizeof(sig_descs_NDTR4_NDTR4) / sizeof((sig_descs_NDTR4_NDTR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDTR4_NDTR4)), typeof(&(sig_descs_NDTR4_NDTR4)[0])))); }))), .descs = &(sig_descs_NDTR4_NDTR4)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDTR4_NDTR4[] = { (&sig_expr_NDTR4_NDTR4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_44_NDTR4[(sizeof(sig_exprs_NDTR4_NDTR4) / sizeof((sig_exprs_NDTR4_NDTR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDTR4_NDTR4)), typeof(&(sig_exprs_NDTR4_NDTR4)[0])))); })))] __attribute__((alias("sig_exprs_NDTR4_NDTR4")));
static const struct aspeed_sig_desc sig_descs_GPIOF4_GPIOF4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF4_GPIOF4 = { .signal = "GPIOF4", .function = "GPIOF4", .ndescs = (sizeof(sig_descs_GPIOF4_GPIOF4) / sizeof((sig_descs_GPIOF4_GPIOF4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF4_GPIOF4)), typeof(&(sig_descs_GPIOF4_GPIOF4)[0])))); }))), .descs = &(sig_descs_GPIOF4_GPIOF4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF4_GPIOF4[] = { (&sig_expr_GPIOF4_GPIOF4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_44_GPIOF4[(sizeof(sig_exprs_GPIOF4_GPIOF4) / sizeof((sig_exprs_GPIOF4_GPIOF4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF4_GPIOF4)), typeof(&(sig_exprs_GPIOF4_GPIOF4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF4_GPIOF4"))); static const struct aspeed_sig_expr **pin_exprs_44[] = { sig_exprs_44_LHCLK, sig_exprs_44_NDTR4, sig_exprs_44_GPIOF4, ((void *)0) }; static const struct aspeed_pin_desc pin_44 = { "44", (&pin_exprs_44[0]) };
static const int group_pins_NDTR4[] = { 44 }; static const char *func_groups_NDTR4[] = { "NDTR4" };


static const struct aspeed_sig_desc sig_descs_LHFRAME_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHFRAME_LPCHC = { .signal = "LHFRAME", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHFRAME_LPCHC) / sizeof((sig_descs_LHFRAME_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHFRAME_LPCHC)), typeof(&(sig_descs_LHFRAME_LPCHC)[0])))); }))), .descs = &(sig_descs_LHFRAME_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHFRAME_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHFRAME_LPCPLUS = { .signal = "LHFRAME", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHFRAME_LPCPLUS) / sizeof((sig_descs_LHFRAME_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHFRAME_LPCPLUS)), typeof(&(sig_descs_LHFRAME_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHFRAME_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHFRAME_LPCHC[] = { (&sig_expr_LHFRAME_LPCHC), (&sig_expr_LHFRAME_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_45_LHFRAME[(sizeof(sig_exprs_LHFRAME_LPCHC) / sizeof((sig_exprs_LHFRAME_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHFRAME_LPCHC)), typeof(&(sig_exprs_LHFRAME_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHFRAME_LPCHC")));
static const struct aspeed_sig_desc sig_descs_NRTS4_NRTS4[] = { { 0, 0x80, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NRTS4_NRTS4 = { .signal = "NRTS4", .function = "NRTS4", .ndescs = (sizeof(sig_descs_NRTS4_NRTS4) / sizeof((sig_descs_NRTS4_NRTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRTS4_NRTS4)), typeof(&(sig_descs_NRTS4_NRTS4)[0])))); }))), .descs = &(sig_descs_NRTS4_NRTS4)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRTS4_NRTS4[] = { (&sig_expr_NRTS4_NRTS4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_45_NRTS4[(sizeof(sig_exprs_NRTS4_NRTS4) / sizeof((sig_exprs_NRTS4_NRTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRTS4_NRTS4)), typeof(&(sig_exprs_NRTS4_NRTS4)[0])))); })))] __attribute__((alias("sig_exprs_NRTS4_NRTS4")));
static const struct aspeed_sig_desc sig_descs_GPIOF5_GPIOF5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF5_GPIOF5 = { .signal = "GPIOF5", .function = "GPIOF5", .ndescs = (sizeof(sig_descs_GPIOF5_GPIOF5) / sizeof((sig_descs_GPIOF5_GPIOF5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF5_GPIOF5)), typeof(&(sig_descs_GPIOF5_GPIOF5)[0])))); }))), .descs = &(sig_descs_GPIOF5_GPIOF5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF5_GPIOF5[] = { (&sig_expr_GPIOF5_GPIOF5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_45_GPIOF5[(sizeof(sig_exprs_GPIOF5_GPIOF5) / sizeof((sig_exprs_GPIOF5_GPIOF5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF5_GPIOF5)), typeof(&(sig_exprs_GPIOF5_GPIOF5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF5_GPIOF5"))); static const struct aspeed_sig_expr **pin_exprs_45[] = { sig_exprs_45_LHFRAME, sig_exprs_45_NRTS4, sig_exprs_45_GPIOF5, ((void *)0) }; static const struct aspeed_pin_desc pin_45 = { "45", (&pin_exprs_45[0]) };
static const int group_pins_NRTS4[] = { 45 }; static const char *func_groups_NRTS4[] = { "NRTS4" };


static const struct aspeed_sig_desc sig_descs_LHSIRQ_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHSIRQ_LPCHC = { .signal = "LHSIRQ", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHSIRQ_LPCHC) / sizeof((sig_descs_LHSIRQ_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHSIRQ_LPCHC)), typeof(&(sig_descs_LHSIRQ_LPCHC)[0])))); }))), .descs = &(sig_descs_LHSIRQ_LPCHC)[0], }; static const struct aspeed_sig_expr *sig_exprs_LHSIRQ_LPCHC[] = { (&sig_expr_LHSIRQ_LPCHC), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_46_LHSIRQ[(sizeof(sig_exprs_LHSIRQ_LPCHC) / sizeof((sig_exprs_LHSIRQ_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHSIRQ_LPCHC)), typeof(&(sig_exprs_LHSIRQ_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHSIRQ_LPCHC")));
static const struct aspeed_sig_desc sig_descs_TXD4_TXD4[] = { { 0, 0x80, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_TXD4_TXD4 = { .signal = "TXD4", .function = "TXD4", .ndescs = (sizeof(sig_descs_TXD4_TXD4) / sizeof((sig_descs_TXD4_TXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TXD4_TXD4)), typeof(&(sig_descs_TXD4_TXD4)[0])))); }))), .descs = &(sig_descs_TXD4_TXD4)[0], }; static const struct aspeed_sig_expr *sig_exprs_TXD4_TXD4[] = { (&sig_expr_TXD4_TXD4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_46_TXD4[(sizeof(sig_exprs_TXD4_TXD4) / sizeof((sig_exprs_TXD4_TXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TXD4_TXD4)), typeof(&(sig_exprs_TXD4_TXD4)[0])))); })))] __attribute__((alias("sig_exprs_TXD4_TXD4")));
static const struct aspeed_sig_desc sig_descs_GPIOF6_GPIOF6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF6_GPIOF6 = { .signal = "GPIOF6", .function = "GPIOF6", .ndescs = (sizeof(sig_descs_GPIOF6_GPIOF6) / sizeof((sig_descs_GPIOF6_GPIOF6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF6_GPIOF6)), typeof(&(sig_descs_GPIOF6_GPIOF6)[0])))); }))), .descs = &(sig_descs_GPIOF6_GPIOF6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF6_GPIOF6[] = { (&sig_expr_GPIOF6_GPIOF6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_46_GPIOF6[(sizeof(sig_exprs_GPIOF6_GPIOF6) / sizeof((sig_exprs_GPIOF6_GPIOF6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF6_GPIOF6)), typeof(&(sig_exprs_GPIOF6_GPIOF6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF6_GPIOF6"))); static const struct aspeed_sig_expr **pin_exprs_46[] = { sig_exprs_46_LHSIRQ, sig_exprs_46_TXD4, sig_exprs_46_GPIOF6, ((void *)0) }; static const struct aspeed_pin_desc pin_46 = { "46", (&pin_exprs_46[0]) };
static const int group_pins_TXD4[] = { 46 }; static const char *func_groups_TXD4[] = { "TXD4" };


static const struct aspeed_sig_desc sig_descs_LHRST_LPCHC[] = { { 2, 0x20, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHRST_LPCHC = { .signal = "LHRST", .function = "LPCHC", .ndescs = (sizeof(sig_descs_LHRST_LPCHC) / sizeof((sig_descs_LHRST_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHRST_LPCHC)), typeof(&(sig_descs_LHRST_LPCHC)[0])))); }))), .descs = &(sig_descs_LHRST_LPCHC)[0], };
static const struct aspeed_sig_desc sig_descs_LHRST_LPCPLUS[] = { { 0, 0x90, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LHRST_LPCPLUS = { .signal = "LHRST", .function = "LPCPLUS", .ndescs = (sizeof(sig_descs_LHRST_LPCPLUS) / sizeof((sig_descs_LHRST_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LHRST_LPCPLUS)), typeof(&(sig_descs_LHRST_LPCPLUS)[0])))); }))), .descs = &(sig_descs_LHRST_LPCPLUS)[0], };
static const struct aspeed_sig_expr *sig_exprs_LHRST_LPCHC[] = { (&sig_expr_LHRST_LPCHC), (&sig_expr_LHRST_LPCPLUS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_47_LHRST[(sizeof(sig_exprs_LHRST_LPCHC) / sizeof((sig_exprs_LHRST_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LHRST_LPCHC)), typeof(&(sig_exprs_LHRST_LPCHC)[0])))); })))] __attribute__((alias("sig_exprs_LHRST_LPCHC")));
static const struct aspeed_sig_desc sig_descs_RXD4_RXD4[] = { { 0, 0x80, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RXD4_RXD4 = { .signal = "RXD4", .function = "RXD4", .ndescs = (sizeof(sig_descs_RXD4_RXD4) / sizeof((sig_descs_RXD4_RXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RXD4_RXD4)), typeof(&(sig_descs_RXD4_RXD4)[0])))); }))), .descs = &(sig_descs_RXD4_RXD4)[0], }; static const struct aspeed_sig_expr *sig_exprs_RXD4_RXD4[] = { (&sig_expr_RXD4_RXD4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_47_RXD4[(sizeof(sig_exprs_RXD4_RXD4) / sizeof((sig_exprs_RXD4_RXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RXD4_RXD4)), typeof(&(sig_exprs_RXD4_RXD4)[0])))); })))] __attribute__((alias("sig_exprs_RXD4_RXD4")));
static const struct aspeed_sig_desc sig_descs_GPIOF7_GPIOF7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOF7_GPIOF7 = { .signal = "GPIOF7", .function = "GPIOF7", .ndescs = (sizeof(sig_descs_GPIOF7_GPIOF7) / sizeof((sig_descs_GPIOF7_GPIOF7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOF7_GPIOF7)), typeof(&(sig_descs_GPIOF7_GPIOF7)[0])))); }))), .descs = &(sig_descs_GPIOF7_GPIOF7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOF7_GPIOF7[] = { (&sig_expr_GPIOF7_GPIOF7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_47_GPIOF7[(sizeof(sig_exprs_GPIOF7_GPIOF7) / sizeof((sig_exprs_GPIOF7_GPIOF7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOF7_GPIOF7)), typeof(&(sig_exprs_GPIOF7_GPIOF7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOF7_GPIOF7"))); static const struct aspeed_sig_expr **pin_exprs_47[] = { sig_exprs_47_LHRST, sig_exprs_47_RXD4, sig_exprs_47_GPIOF7, ((void *)0) }; static const struct aspeed_pin_desc pin_47 = { "47", (&pin_exprs_47[0]) };
static const int group_pins_RXD4[] = { 47 }; static const char *func_groups_RXD4[] = { "RXD4" };

static const int group_pins_LPCHC[] = { 40, 41, 42, 43, 44, 45, 46, 47 }; static const char *func_groups_LPCHC[] = { "LPCHC" };
static const int group_pins_LPCPLUS[] = { 40, 41, 42, 43, 44, 45, 47 }; static const char *func_groups_LPCPLUS[] = { "LPCPLUS" };


static const struct aspeed_sig_desc sig_descs_SGPS1CK_SGPS1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS1CK_SGPS1 = { .signal = "SGPS1CK", .function = "SGPS1", .ndescs = (sizeof(sig_descs_SGPS1CK_SGPS1) / sizeof((sig_descs_SGPS1CK_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS1CK_SGPS1)), typeof(&(sig_descs_SGPS1CK_SGPS1)[0])))); }))), .descs = &(sig_descs_SGPS1CK_SGPS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS1CK_SGPS1[] = { (&sig_expr_SGPS1CK_SGPS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_48_SGPS1CK[(sizeof(sig_exprs_SGPS1CK_SGPS1) / sizeof((sig_exprs_SGPS1CK_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS1CK_SGPS1)), typeof(&(sig_exprs_SGPS1CK_SGPS1)[0])))); })))] __attribute__((alias("sig_exprs_SGPS1CK_SGPS1")));
static const struct aspeed_sig_desc sig_descs_GPIOG0_GPIOG0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG0_GPIOG0 = { .signal = "GPIOG0", .function = "GPIOG0", .ndescs = (sizeof(sig_descs_GPIOG0_GPIOG0) / sizeof((sig_descs_GPIOG0_GPIOG0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG0_GPIOG0)), typeof(&(sig_descs_GPIOG0_GPIOG0)[0])))); }))), .descs = &(sig_descs_GPIOG0_GPIOG0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG0_GPIOG0[] = { (&sig_expr_GPIOG0_GPIOG0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_48_GPIOG0[(sizeof(sig_exprs_GPIOG0_GPIOG0) / sizeof((sig_exprs_GPIOG0_GPIOG0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG0_GPIOG0)), typeof(&(sig_exprs_GPIOG0_GPIOG0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG0_GPIOG0"))); static const struct aspeed_sig_expr **pin_exprs_48[] = { sig_exprs_48_SGPS1CK, sig_exprs_48_GPIOG0, ((void *)0) }; static const struct aspeed_pin_desc pin_48 = { "48", (&pin_exprs_48[0]) };


static const struct aspeed_sig_desc sig_descs_SGPS1LD_SGPS1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS1LD_SGPS1 = { .signal = "SGPS1LD", .function = "SGPS1", .ndescs = (sizeof(sig_descs_SGPS1LD_SGPS1) / sizeof((sig_descs_SGPS1LD_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS1LD_SGPS1)), typeof(&(sig_descs_SGPS1LD_SGPS1)[0])))); }))), .descs = &(sig_descs_SGPS1LD_SGPS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS1LD_SGPS1[] = { (&sig_expr_SGPS1LD_SGPS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_49_SGPS1LD[(sizeof(sig_exprs_SGPS1LD_SGPS1) / sizeof((sig_exprs_SGPS1LD_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS1LD_SGPS1)), typeof(&(sig_exprs_SGPS1LD_SGPS1)[0])))); })))] __attribute__((alias("sig_exprs_SGPS1LD_SGPS1")));
static const struct aspeed_sig_desc sig_descs_GPIOG1_GPIOG1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG1_GPIOG1 = { .signal = "GPIOG1", .function = "GPIOG1", .ndescs = (sizeof(sig_descs_GPIOG1_GPIOG1) / sizeof((sig_descs_GPIOG1_GPIOG1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG1_GPIOG1)), typeof(&(sig_descs_GPIOG1_GPIOG1)[0])))); }))), .descs = &(sig_descs_GPIOG1_GPIOG1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG1_GPIOG1[] = { (&sig_expr_GPIOG1_GPIOG1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_49_GPIOG1[(sizeof(sig_exprs_GPIOG1_GPIOG1) / sizeof((sig_exprs_GPIOG1_GPIOG1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG1_GPIOG1)), typeof(&(sig_exprs_GPIOG1_GPIOG1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG1_GPIOG1"))); static const struct aspeed_sig_expr **pin_exprs_49[] = { sig_exprs_49_SGPS1LD, sig_exprs_49_GPIOG1, ((void *)0) }; static const struct aspeed_pin_desc pin_49 = { "49", (&pin_exprs_49[0]) };


static const struct aspeed_sig_desc sig_descs_SGPS1I0_SGPS1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS1I0_SGPS1 = { .signal = "SGPS1I0", .function = "SGPS1", .ndescs = (sizeof(sig_descs_SGPS1I0_SGPS1) / sizeof((sig_descs_SGPS1I0_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS1I0_SGPS1)), typeof(&(sig_descs_SGPS1I0_SGPS1)[0])))); }))), .descs = &(sig_descs_SGPS1I0_SGPS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS1I0_SGPS1[] = { (&sig_expr_SGPS1I0_SGPS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_50_SGPS1I0[(sizeof(sig_exprs_SGPS1I0_SGPS1) / sizeof((sig_exprs_SGPS1I0_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS1I0_SGPS1)), typeof(&(sig_exprs_SGPS1I0_SGPS1)[0])))); })))] __attribute__((alias("sig_exprs_SGPS1I0_SGPS1")));
static const struct aspeed_sig_desc sig_descs_GPIOG2_GPIOG2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG2_GPIOG2 = { .signal = "GPIOG2", .function = "GPIOG2", .ndescs = (sizeof(sig_descs_GPIOG2_GPIOG2) / sizeof((sig_descs_GPIOG2_GPIOG2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG2_GPIOG2)), typeof(&(sig_descs_GPIOG2_GPIOG2)[0])))); }))), .descs = &(sig_descs_GPIOG2_GPIOG2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG2_GPIOG2[] = { (&sig_expr_GPIOG2_GPIOG2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_50_GPIOG2[(sizeof(sig_exprs_GPIOG2_GPIOG2) / sizeof((sig_exprs_GPIOG2_GPIOG2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG2_GPIOG2)), typeof(&(sig_exprs_GPIOG2_GPIOG2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG2_GPIOG2"))); static const struct aspeed_sig_expr **pin_exprs_50[] = { sig_exprs_50_SGPS1I0, sig_exprs_50_GPIOG2, ((void *)0) }; static const struct aspeed_pin_desc pin_50 = { "50", (&pin_exprs_50[0]) };


static const struct aspeed_sig_desc sig_descs_SGPS1I1_SGPS1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS1I1_SGPS1 = { .signal = "SGPS1I1", .function = "SGPS1", .ndescs = (sizeof(sig_descs_SGPS1I1_SGPS1) / sizeof((sig_descs_SGPS1I1_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS1I1_SGPS1)), typeof(&(sig_descs_SGPS1I1_SGPS1)[0])))); }))), .descs = &(sig_descs_SGPS1I1_SGPS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS1I1_SGPS1[] = { (&sig_expr_SGPS1I1_SGPS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_51_SGPS1I1[(sizeof(sig_exprs_SGPS1I1_SGPS1) / sizeof((sig_exprs_SGPS1I1_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS1I1_SGPS1)), typeof(&(sig_exprs_SGPS1I1_SGPS1)[0])))); })))] __attribute__((alias("sig_exprs_SGPS1I1_SGPS1")));
static const struct aspeed_sig_desc sig_descs_GPIOG3_GPIOG3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG3_GPIOG3 = { .signal = "GPIOG3", .function = "GPIOG3", .ndescs = (sizeof(sig_descs_GPIOG3_GPIOG3) / sizeof((sig_descs_GPIOG3_GPIOG3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG3_GPIOG3)), typeof(&(sig_descs_GPIOG3_GPIOG3)[0])))); }))), .descs = &(sig_descs_GPIOG3_GPIOG3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG3_GPIOG3[] = { (&sig_expr_GPIOG3_GPIOG3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_51_GPIOG3[(sizeof(sig_exprs_GPIOG3_GPIOG3) / sizeof((sig_exprs_GPIOG3_GPIOG3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG3_GPIOG3)), typeof(&(sig_exprs_GPIOG3_GPIOG3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG3_GPIOG3"))); static const struct aspeed_sig_expr **pin_exprs_51[] = { sig_exprs_51_SGPS1I1, sig_exprs_51_GPIOG3, ((void *)0) }; static const struct aspeed_pin_desc pin_51 = { "51", (&pin_exprs_51[0]) };

static const int group_pins_SGPS1[] = { 48, 49, 50, 51 }; static const char *func_groups_SGPS1[] = { "SGPS1" };




static const struct aspeed_sig_desc sig_descs_SGPS2CK_SGPS2[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS2CK_SGPS2 = { .signal = "SGPS2CK", .function = "SGPS2", .ndescs = (sizeof(sig_descs_SGPS2CK_SGPS2) / sizeof((sig_descs_SGPS2CK_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS2CK_SGPS2)), typeof(&(sig_descs_SGPS2CK_SGPS2)[0])))); }))), .descs = &(sig_descs_SGPS2CK_SGPS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS2CK_SGPS2[] = { (&sig_expr_SGPS2CK_SGPS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_52_SGPS2CK[(sizeof(sig_exprs_SGPS2CK_SGPS2) / sizeof((sig_exprs_SGPS2CK_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS2CK_SGPS2)), typeof(&(sig_exprs_SGPS2CK_SGPS2)[0])))); })))] __attribute__((alias("sig_exprs_SGPS2CK_SGPS2")));
static const struct aspeed_sig_desc sig_descs_SALT1_SALT1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT1_SALT1 = { .signal = "SALT1", .function = "SALT1", .ndescs = (sizeof(sig_descs_SALT1_SALT1) / sizeof((sig_descs_SALT1_SALT1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT1_SALT1)), typeof(&(sig_descs_SALT1_SALT1)[0])))); }))), .descs = &(sig_descs_SALT1_SALT1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT1_SALT1[] = { (&sig_expr_SALT1_SALT1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_52_SALT1[(sizeof(sig_exprs_SALT1_SALT1) / sizeof((sig_exprs_SALT1_SALT1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT1_SALT1)), typeof(&(sig_exprs_SALT1_SALT1)[0])))); })))] __attribute__((alias("sig_exprs_SALT1_SALT1")));
static const struct aspeed_sig_desc sig_descs_GPIOG4_GPIOG4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG4_GPIOG4 = { .signal = "GPIOG4", .function = "GPIOG4", .ndescs = (sizeof(sig_descs_GPIOG4_GPIOG4) / sizeof((sig_descs_GPIOG4_GPIOG4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG4_GPIOG4)), typeof(&(sig_descs_GPIOG4_GPIOG4)[0])))); }))), .descs = &(sig_descs_GPIOG4_GPIOG4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG4_GPIOG4[] = { (&sig_expr_GPIOG4_GPIOG4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_52_GPIOG4[(sizeof(sig_exprs_GPIOG4_GPIOG4) / sizeof((sig_exprs_GPIOG4_GPIOG4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG4_GPIOG4)), typeof(&(sig_exprs_GPIOG4_GPIOG4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG4_GPIOG4"))); static const struct aspeed_sig_expr **pin_exprs_52[] = { sig_exprs_52_SGPS2CK, sig_exprs_52_SALT1, sig_exprs_52_GPIOG4, ((void *)0) }; static const struct aspeed_pin_desc pin_52 = { "52", (&pin_exprs_52[0]) };
static const int group_pins_SALT1[] = { 52 }; static const char *func_groups_SALT1[] = { "SALT1" };


static const struct aspeed_sig_desc sig_descs_SGPS2LD_SGPS2[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS2LD_SGPS2 = { .signal = "SGPS2LD", .function = "SGPS2", .ndescs = (sizeof(sig_descs_SGPS2LD_SGPS2) / sizeof((sig_descs_SGPS2LD_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS2LD_SGPS2)), typeof(&(sig_descs_SGPS2LD_SGPS2)[0])))); }))), .descs = &(sig_descs_SGPS2LD_SGPS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS2LD_SGPS2[] = { (&sig_expr_SGPS2LD_SGPS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_53_SGPS2LD[(sizeof(sig_exprs_SGPS2LD_SGPS2) / sizeof((sig_exprs_SGPS2LD_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS2LD_SGPS2)), typeof(&(sig_exprs_SGPS2LD_SGPS2)[0])))); })))] __attribute__((alias("sig_exprs_SGPS2LD_SGPS2")));
static const struct aspeed_sig_desc sig_descs_SALT2_SALT2[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT2_SALT2 = { .signal = "SALT2", .function = "SALT2", .ndescs = (sizeof(sig_descs_SALT2_SALT2) / sizeof((sig_descs_SALT2_SALT2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT2_SALT2)), typeof(&(sig_descs_SALT2_SALT2)[0])))); }))), .descs = &(sig_descs_SALT2_SALT2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT2_SALT2[] = { (&sig_expr_SALT2_SALT2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_53_SALT2[(sizeof(sig_exprs_SALT2_SALT2) / sizeof((sig_exprs_SALT2_SALT2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT2_SALT2)), typeof(&(sig_exprs_SALT2_SALT2)[0])))); })))] __attribute__((alias("sig_exprs_SALT2_SALT2")));
static const struct aspeed_sig_desc sig_descs_GPIOG5_GPIOG5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG5_GPIOG5 = { .signal = "GPIOG5", .function = "GPIOG5", .ndescs = (sizeof(sig_descs_GPIOG5_GPIOG5) / sizeof((sig_descs_GPIOG5_GPIOG5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG5_GPIOG5)), typeof(&(sig_descs_GPIOG5_GPIOG5)[0])))); }))), .descs = &(sig_descs_GPIOG5_GPIOG5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG5_GPIOG5[] = { (&sig_expr_GPIOG5_GPIOG5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_53_GPIOG5[(sizeof(sig_exprs_GPIOG5_GPIOG5) / sizeof((sig_exprs_GPIOG5_GPIOG5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG5_GPIOG5)), typeof(&(sig_exprs_GPIOG5_GPIOG5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG5_GPIOG5"))); static const struct aspeed_sig_expr **pin_exprs_53[] = { sig_exprs_53_SGPS2LD, sig_exprs_53_SALT2, sig_exprs_53_GPIOG5, ((void *)0) }; static const struct aspeed_pin_desc pin_53 = { "53", (&pin_exprs_53[0]) };
static const int group_pins_SALT2[] = { 53 }; static const char *func_groups_SALT2[] = { "SALT2" };


static const struct aspeed_sig_desc sig_descs_SGPS2I0_SGPS2[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS2I0_SGPS2 = { .signal = "SGPS2I0", .function = "SGPS2", .ndescs = (sizeof(sig_descs_SGPS2I0_SGPS2) / sizeof((sig_descs_SGPS2I0_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS2I0_SGPS2)), typeof(&(sig_descs_SGPS2I0_SGPS2)[0])))); }))), .descs = &(sig_descs_SGPS2I0_SGPS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS2I0_SGPS2[] = { (&sig_expr_SGPS2I0_SGPS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_54_SGPS2I0[(sizeof(sig_exprs_SGPS2I0_SGPS2) / sizeof((sig_exprs_SGPS2I0_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS2I0_SGPS2)), typeof(&(sig_exprs_SGPS2I0_SGPS2)[0])))); })))] __attribute__((alias("sig_exprs_SGPS2I0_SGPS2")));
static const struct aspeed_sig_desc sig_descs_SALT3_SALT3[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT3_SALT3 = { .signal = "SALT3", .function = "SALT3", .ndescs = (sizeof(sig_descs_SALT3_SALT3) / sizeof((sig_descs_SALT3_SALT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT3_SALT3)), typeof(&(sig_descs_SALT3_SALT3)[0])))); }))), .descs = &(sig_descs_SALT3_SALT3)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT3_SALT3[] = { (&sig_expr_SALT3_SALT3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_54_SALT3[(sizeof(sig_exprs_SALT3_SALT3) / sizeof((sig_exprs_SALT3_SALT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT3_SALT3)), typeof(&(sig_exprs_SALT3_SALT3)[0])))); })))] __attribute__((alias("sig_exprs_SALT3_SALT3")));
static const struct aspeed_sig_desc sig_descs_GPIOG6_GPIOG6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG6_GPIOG6 = { .signal = "GPIOG6", .function = "GPIOG6", .ndescs = (sizeof(sig_descs_GPIOG6_GPIOG6) / sizeof((sig_descs_GPIOG6_GPIOG6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG6_GPIOG6)), typeof(&(sig_descs_GPIOG6_GPIOG6)[0])))); }))), .descs = &(sig_descs_GPIOG6_GPIOG6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG6_GPIOG6[] = { (&sig_expr_GPIOG6_GPIOG6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_54_GPIOG6[(sizeof(sig_exprs_GPIOG6_GPIOG6) / sizeof((sig_exprs_GPIOG6_GPIOG6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG6_GPIOG6)), typeof(&(sig_exprs_GPIOG6_GPIOG6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG6_GPIOG6"))); static const struct aspeed_sig_expr **pin_exprs_54[] = { sig_exprs_54_SGPS2I0, sig_exprs_54_SALT3, sig_exprs_54_GPIOG6, ((void *)0) }; static const struct aspeed_pin_desc pin_54 = { "54", (&pin_exprs_54[0]) };
static const int group_pins_SALT3[] = { 54 }; static const char *func_groups_SALT3[] = { "SALT3" };


static const struct aspeed_sig_desc sig_descs_SGPS2I1_SGPS2[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPS2I1_SGPS2 = { .signal = "SGPS2I1", .function = "SGPS2", .ndescs = (sizeof(sig_descs_SGPS2I1_SGPS2) / sizeof((sig_descs_SGPS2I1_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPS2I1_SGPS2)), typeof(&(sig_descs_SGPS2I1_SGPS2)[0])))); }))), .descs = &(sig_descs_SGPS2I1_SGPS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPS2I1_SGPS2[] = { (&sig_expr_SGPS2I1_SGPS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_55_SGPS2I1[(sizeof(sig_exprs_SGPS2I1_SGPS2) / sizeof((sig_exprs_SGPS2I1_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPS2I1_SGPS2)), typeof(&(sig_exprs_SGPS2I1_SGPS2)[0])))); })))] __attribute__((alias("sig_exprs_SGPS2I1_SGPS2")));
static const struct aspeed_sig_desc sig_descs_SALT4_SALT4[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x84, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT4_SALT4 = { .signal = "SALT4", .function = "SALT4", .ndescs = (sizeof(sig_descs_SALT4_SALT4) / sizeof((sig_descs_SALT4_SALT4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT4_SALT4)), typeof(&(sig_descs_SALT4_SALT4)[0])))); }))), .descs = &(sig_descs_SALT4_SALT4)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT4_SALT4[] = { (&sig_expr_SALT4_SALT4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_55_SALT4[(sizeof(sig_exprs_SALT4_SALT4) / sizeof((sig_exprs_SALT4_SALT4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT4_SALT4)), typeof(&(sig_exprs_SALT4_SALT4)[0])))); })))] __attribute__((alias("sig_exprs_SALT4_SALT4")));
static const struct aspeed_sig_desc sig_descs_GPIOG7_GPIOG7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOG7_GPIOG7 = { .signal = "GPIOG7", .function = "GPIOG7", .ndescs = (sizeof(sig_descs_GPIOG7_GPIOG7) / sizeof((sig_descs_GPIOG7_GPIOG7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOG7_GPIOG7)), typeof(&(sig_descs_GPIOG7_GPIOG7)[0])))); }))), .descs = &(sig_descs_GPIOG7_GPIOG7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOG7_GPIOG7[] = { (&sig_expr_GPIOG7_GPIOG7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_55_GPIOG7[(sizeof(sig_exprs_GPIOG7_GPIOG7) / sizeof((sig_exprs_GPIOG7_GPIOG7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOG7_GPIOG7)), typeof(&(sig_exprs_GPIOG7_GPIOG7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOG7_GPIOG7"))); static const struct aspeed_sig_expr **pin_exprs_55[] = { sig_exprs_55_SGPS2I1, sig_exprs_55_SALT4, sig_exprs_55_GPIOG7, ((void *)0) }; static const struct aspeed_pin_desc pin_55 = { "55", (&pin_exprs_55[0]) };
static const int group_pins_SALT4[] = { 55 }; static const char *func_groups_SALT4[] = { "SALT4" };

static const int group_pins_SGPS2[] = { 52, 53, 54, 55 }; static const char *func_groups_SGPS2[] = { "SGPS2" };




static const struct aspeed_sig_desc sig_descs_DASHA18_DASHA18[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHA18_DASHA18 = { .signal = "DASHA18", .function = "DASHA18", .ndescs = (sizeof(sig_descs_DASHA18_DASHA18) / sizeof((sig_descs_DASHA18_DASHA18)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHA18_DASHA18)), typeof(&(sig_descs_DASHA18_DASHA18)[0])))); }))), .descs = &(sig_descs_DASHA18_DASHA18)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHA18_DASHA18[] = { (&sig_expr_DASHA18_DASHA18), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_56_DASHA18[(sizeof(sig_exprs_DASHA18_DASHA18) / sizeof((sig_exprs_DASHA18_DASHA18)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHA18_DASHA18)), typeof(&(sig_exprs_DASHA18_DASHA18)[0])))); })))] __attribute__((alias("sig_exprs_DASHA18_DASHA18")));
static const struct aspeed_sig_desc sig_descs_NCTS6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NCTS6_UART6 = { .signal = "NCTS6", .function = "UART6", .ndescs = (sizeof(sig_descs_NCTS6_UART6) / sizeof((sig_descs_NCTS6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NCTS6_UART6)), typeof(&(sig_descs_NCTS6_UART6)[0])))); }))), .descs = &(sig_descs_NCTS6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_NCTS6_UART6[] = { (&sig_expr_NCTS6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_56_NCTS6[(sizeof(sig_exprs_NCTS6_UART6) / sizeof((sig_exprs_NCTS6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NCTS6_UART6)), typeof(&(sig_exprs_NCTS6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_NCTS6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH0_GPIOH0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH0_GPIOH0 = { .signal = "GPIOH0", .function = "GPIOH0", .ndescs = (sizeof(sig_descs_GPIOH0_GPIOH0) / sizeof((sig_descs_GPIOH0_GPIOH0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH0_GPIOH0)), typeof(&(sig_descs_GPIOH0_GPIOH0)[0])))); }))), .descs = &(sig_descs_GPIOH0_GPIOH0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH0_GPIOH0[] = { (&sig_expr_GPIOH0_GPIOH0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_56_GPIOH0[(sizeof(sig_exprs_GPIOH0_GPIOH0) / sizeof((sig_exprs_GPIOH0_GPIOH0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH0_GPIOH0)), typeof(&(sig_exprs_GPIOH0_GPIOH0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH0_GPIOH0"))); static const struct aspeed_sig_expr **pin_exprs_56[] = { sig_exprs_56_DASHA18, sig_exprs_56_NCTS6, sig_exprs_56_GPIOH0, ((void *)0) }; static const struct aspeed_pin_desc pin_56 = { "56", (&pin_exprs_56[0]) };


static const struct aspeed_sig_desc sig_descs_DASHB18_DASHB18[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHB18_DASHB18 = { .signal = "DASHB18", .function = "DASHB18", .ndescs = (sizeof(sig_descs_DASHB18_DASHB18) / sizeof((sig_descs_DASHB18_DASHB18)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHB18_DASHB18)), typeof(&(sig_descs_DASHB18_DASHB18)[0])))); }))), .descs = &(sig_descs_DASHB18_DASHB18)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHB18_DASHB18[] = { (&sig_expr_DASHB18_DASHB18), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_57_DASHB18[(sizeof(sig_exprs_DASHB18_DASHB18) / sizeof((sig_exprs_DASHB18_DASHB18)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHB18_DASHB18)), typeof(&(sig_exprs_DASHB18_DASHB18)[0])))); })))] __attribute__((alias("sig_exprs_DASHB18_DASHB18")));
static const struct aspeed_sig_desc sig_descs_NDCD6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDCD6_UART6 = { .signal = "NDCD6", .function = "UART6", .ndescs = (sizeof(sig_descs_NDCD6_UART6) / sizeof((sig_descs_NDCD6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDCD6_UART6)), typeof(&(sig_descs_NDCD6_UART6)[0])))); }))), .descs = &(sig_descs_NDCD6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDCD6_UART6[] = { (&sig_expr_NDCD6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_57_NDCD6[(sizeof(sig_exprs_NDCD6_UART6) / sizeof((sig_exprs_NDCD6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDCD6_UART6)), typeof(&(sig_exprs_NDCD6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_NDCD6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH1_GPIOH1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH1_GPIOH1 = { .signal = "GPIOH1", .function = "GPIOH1", .ndescs = (sizeof(sig_descs_GPIOH1_GPIOH1) / sizeof((sig_descs_GPIOH1_GPIOH1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH1_GPIOH1)), typeof(&(sig_descs_GPIOH1_GPIOH1)[0])))); }))), .descs = &(sig_descs_GPIOH1_GPIOH1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH1_GPIOH1[] = { (&sig_expr_GPIOH1_GPIOH1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_57_GPIOH1[(sizeof(sig_exprs_GPIOH1_GPIOH1) / sizeof((sig_exprs_GPIOH1_GPIOH1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH1_GPIOH1)), typeof(&(sig_exprs_GPIOH1_GPIOH1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH1_GPIOH1"))); static const struct aspeed_sig_expr **pin_exprs_57[] = { sig_exprs_57_DASHB18, sig_exprs_57_NDCD6, sig_exprs_57_GPIOH1, ((void *)0) }; static const struct aspeed_pin_desc pin_57 = { "57", (&pin_exprs_57[0]) };


static const struct aspeed_sig_desc sig_descs_DASHD17_DASHD17[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHD17_DASHD17 = { .signal = "DASHD17", .function = "DASHD17", .ndescs = (sizeof(sig_descs_DASHD17_DASHD17) / sizeof((sig_descs_DASHD17_DASHD17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHD17_DASHD17)), typeof(&(sig_descs_DASHD17_DASHD17)[0])))); }))), .descs = &(sig_descs_DASHD17_DASHD17)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHD17_DASHD17[] = { (&sig_expr_DASHD17_DASHD17), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_58_DASHD17[(sizeof(sig_exprs_DASHD17_DASHD17) / sizeof((sig_exprs_DASHD17_DASHD17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHD17_DASHD17)), typeof(&(sig_exprs_DASHD17_DASHD17)[0])))); })))] __attribute__((alias("sig_exprs_DASHD17_DASHD17")));
static const struct aspeed_sig_desc sig_descs_NDSR6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDSR6_UART6 = { .signal = "NDSR6", .function = "UART6", .ndescs = (sizeof(sig_descs_NDSR6_UART6) / sizeof((sig_descs_NDSR6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDSR6_UART6)), typeof(&(sig_descs_NDSR6_UART6)[0])))); }))), .descs = &(sig_descs_NDSR6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDSR6_UART6[] = { (&sig_expr_NDSR6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_58_NDSR6[(sizeof(sig_exprs_NDSR6_UART6) / sizeof((sig_exprs_NDSR6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDSR6_UART6)), typeof(&(sig_exprs_NDSR6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_NDSR6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH2_GPIOH2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH2_GPIOH2 = { .signal = "GPIOH2", .function = "GPIOH2", .ndescs = (sizeof(sig_descs_GPIOH2_GPIOH2) / sizeof((sig_descs_GPIOH2_GPIOH2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH2_GPIOH2)), typeof(&(sig_descs_GPIOH2_GPIOH2)[0])))); }))), .descs = &(sig_descs_GPIOH2_GPIOH2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH2_GPIOH2[] = { (&sig_expr_GPIOH2_GPIOH2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_58_GPIOH2[(sizeof(sig_exprs_GPIOH2_GPIOH2) / sizeof((sig_exprs_GPIOH2_GPIOH2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH2_GPIOH2)), typeof(&(sig_exprs_GPIOH2_GPIOH2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH2_GPIOH2"))); static const struct aspeed_sig_expr **pin_exprs_58[] = { sig_exprs_58_DASHD17, sig_exprs_58_NDSR6, sig_exprs_58_GPIOH2, ((void *)0) }; static const struct aspeed_pin_desc pin_58 = { "58", (&pin_exprs_58[0]) };


static const struct aspeed_sig_desc sig_descs_DASHC17_DASHC17[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHC17_DASHC17 = { .signal = "DASHC17", .function = "DASHC17", .ndescs = (sizeof(sig_descs_DASHC17_DASHC17) / sizeof((sig_descs_DASHC17_DASHC17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHC17_DASHC17)), typeof(&(sig_descs_DASHC17_DASHC17)[0])))); }))), .descs = &(sig_descs_DASHC17_DASHC17)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHC17_DASHC17[] = { (&sig_expr_DASHC17_DASHC17), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_59_DASHC17[(sizeof(sig_exprs_DASHC17_DASHC17) / sizeof((sig_exprs_DASHC17_DASHC17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHC17_DASHC17)), typeof(&(sig_exprs_DASHC17_DASHC17)[0])))); })))] __attribute__((alias("sig_exprs_DASHC17_DASHC17")));
static const struct aspeed_sig_desc sig_descs_NRI6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NRI6_UART6 = { .signal = "NRI6", .function = "UART6", .ndescs = (sizeof(sig_descs_NRI6_UART6) / sizeof((sig_descs_NRI6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRI6_UART6)), typeof(&(sig_descs_NRI6_UART6)[0])))); }))), .descs = &(sig_descs_NRI6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRI6_UART6[] = { (&sig_expr_NRI6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_59_NRI6[(sizeof(sig_exprs_NRI6_UART6) / sizeof((sig_exprs_NRI6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRI6_UART6)), typeof(&(sig_exprs_NRI6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_NRI6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH3_GPIOH3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH3_GPIOH3 = { .signal = "GPIOH3", .function = "GPIOH3", .ndescs = (sizeof(sig_descs_GPIOH3_GPIOH3) / sizeof((sig_descs_GPIOH3_GPIOH3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH3_GPIOH3)), typeof(&(sig_descs_GPIOH3_GPIOH3)[0])))); }))), .descs = &(sig_descs_GPIOH3_GPIOH3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH3_GPIOH3[] = { (&sig_expr_GPIOH3_GPIOH3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_59_GPIOH3[(sizeof(sig_exprs_GPIOH3_GPIOH3) / sizeof((sig_exprs_GPIOH3_GPIOH3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH3_GPIOH3)), typeof(&(sig_exprs_GPIOH3_GPIOH3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH3_GPIOH3"))); static const struct aspeed_sig_expr **pin_exprs_59[] = { sig_exprs_59_DASHC17, sig_exprs_59_NRI6, sig_exprs_59_GPIOH3, ((void *)0) }; static const struct aspeed_pin_desc pin_59 = { "59", (&pin_exprs_59[0]) };


static const struct aspeed_sig_desc sig_descs_DASHA17_DASHA17[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHA17_DASHA17 = { .signal = "DASHA17", .function = "DASHA17", .ndescs = (sizeof(sig_descs_DASHA17_DASHA17) / sizeof((sig_descs_DASHA17_DASHA17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHA17_DASHA17)), typeof(&(sig_descs_DASHA17_DASHA17)[0])))); }))), .descs = &(sig_descs_DASHA17_DASHA17)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHA17_DASHA17[] = { (&sig_expr_DASHA17_DASHA17), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_60_DASHA17[(sizeof(sig_exprs_DASHA17_DASHA17) / sizeof((sig_exprs_DASHA17_DASHA17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHA17_DASHA17)), typeof(&(sig_exprs_DASHA17_DASHA17)[0])))); })))] __attribute__((alias("sig_exprs_DASHA17_DASHA17")));
static const struct aspeed_sig_desc sig_descs_NDTR6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDTR6_UART6 = { .signal = "NDTR6", .function = "UART6", .ndescs = (sizeof(sig_descs_NDTR6_UART6) / sizeof((sig_descs_NDTR6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDTR6_UART6)), typeof(&(sig_descs_NDTR6_UART6)[0])))); }))), .descs = &(sig_descs_NDTR6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDTR6_UART6[] = { (&sig_expr_NDTR6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_60_NDTR6[(sizeof(sig_exprs_NDTR6_UART6) / sizeof((sig_exprs_NDTR6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDTR6_UART6)), typeof(&(sig_exprs_NDTR6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_NDTR6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH4_GPIOH4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH4_GPIOH4 = { .signal = "GPIOH4", .function = "GPIOH4", .ndescs = (sizeof(sig_descs_GPIOH4_GPIOH4) / sizeof((sig_descs_GPIOH4_GPIOH4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH4_GPIOH4)), typeof(&(sig_descs_GPIOH4_GPIOH4)[0])))); }))), .descs = &(sig_descs_GPIOH4_GPIOH4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH4_GPIOH4[] = { (&sig_expr_GPIOH4_GPIOH4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_60_GPIOH4[(sizeof(sig_exprs_GPIOH4_GPIOH4) / sizeof((sig_exprs_GPIOH4_GPIOH4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH4_GPIOH4)), typeof(&(sig_exprs_GPIOH4_GPIOH4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH4_GPIOH4"))); static const struct aspeed_sig_expr **pin_exprs_60[] = { sig_exprs_60_DASHA17, sig_exprs_60_NDTR6, sig_exprs_60_GPIOH4, ((void *)0) }; static const struct aspeed_pin_desc pin_60 = { "60", (&pin_exprs_60[0]) };


static const struct aspeed_sig_desc sig_descs_DASHB17_DASHB17[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x94, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHB17_DASHB17 = { .signal = "DASHB17", .function = "DASHB17", .ndescs = (sizeof(sig_descs_DASHB17_DASHB17) / sizeof((sig_descs_DASHB17_DASHB17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHB17_DASHB17)), typeof(&(sig_descs_DASHB17_DASHB17)[0])))); }))), .descs = &(sig_descs_DASHB17_DASHB17)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHB17_DASHB17[] = { (&sig_expr_DASHB17_DASHB17), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_61_DASHB17[(sizeof(sig_exprs_DASHB17_DASHB17) / sizeof((sig_exprs_DASHB17_DASHB17)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHB17_DASHB17)), typeof(&(sig_exprs_DASHB17_DASHB17)[0])))); })))] __attribute__((alias("sig_exprs_DASHB17_DASHB17")));
static const struct aspeed_sig_desc sig_descs_NRTS6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NRTS6_UART6 = { .signal = "NRTS6", .function = "UART6", .ndescs = (sizeof(sig_descs_NRTS6_UART6) / sizeof((sig_descs_NRTS6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRTS6_UART6)), typeof(&(sig_descs_NRTS6_UART6)[0])))); }))), .descs = &(sig_descs_NRTS6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRTS6_UART6[] = { (&sig_expr_NRTS6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_61_NRTS6[(sizeof(sig_exprs_NRTS6_UART6) / sizeof((sig_exprs_NRTS6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRTS6_UART6)), typeof(&(sig_exprs_NRTS6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_NRTS6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH5_GPIOH5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH5_GPIOH5 = { .signal = "GPIOH5", .function = "GPIOH5", .ndescs = (sizeof(sig_descs_GPIOH5_GPIOH5) / sizeof((sig_descs_GPIOH5_GPIOH5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH5_GPIOH5)), typeof(&(sig_descs_GPIOH5_GPIOH5)[0])))); }))), .descs = &(sig_descs_GPIOH5_GPIOH5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH5_GPIOH5[] = { (&sig_expr_GPIOH5_GPIOH5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_61_GPIOH5[(sizeof(sig_exprs_GPIOH5_GPIOH5) / sizeof((sig_exprs_GPIOH5_GPIOH5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH5_GPIOH5)), typeof(&(sig_exprs_GPIOH5_GPIOH5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH5_GPIOH5"))); static const struct aspeed_sig_expr **pin_exprs_61[] = { sig_exprs_61_DASHB17, sig_exprs_61_NRTS6, sig_exprs_61_GPIOH5, ((void *)0) }; static const struct aspeed_pin_desc pin_61 = { "61", (&pin_exprs_61[0]) };


static const struct aspeed_sig_desc sig_descs_TXD6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_TXD6_UART6 = { .signal = "TXD6", .function = "UART6", .ndescs = (sizeof(sig_descs_TXD6_UART6) / sizeof((sig_descs_TXD6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TXD6_UART6)), typeof(&(sig_descs_TXD6_UART6)[0])))); }))), .descs = &(sig_descs_TXD6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_TXD6_UART6[] = { (&sig_expr_TXD6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_62_TXD6[(sizeof(sig_exprs_TXD6_UART6) / sizeof((sig_exprs_TXD6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TXD6_UART6)), typeof(&(sig_exprs_TXD6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_TXD6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH6_GPIOH6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH6_GPIOH6 = { .signal = "GPIOH6", .function = "GPIOH6", .ndescs = (sizeof(sig_descs_GPIOH6_GPIOH6) / sizeof((sig_descs_GPIOH6_GPIOH6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH6_GPIOH6)), typeof(&(sig_descs_GPIOH6_GPIOH6)[0])))); }))), .descs = &(sig_descs_GPIOH6_GPIOH6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH6_GPIOH6[] = { (&sig_expr_GPIOH6_GPIOH6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_62_GPIOH6[(sizeof(sig_exprs_GPIOH6_GPIOH6) / sizeof((sig_exprs_GPIOH6_GPIOH6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH6_GPIOH6)), typeof(&(sig_exprs_GPIOH6_GPIOH6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH6_GPIOH6"))); static const struct aspeed_sig_expr **pin_exprs_62[] = { sig_exprs_62_TXD6, sig_exprs_62_GPIOH6, ((void *)0) }; static const struct aspeed_pin_desc pin_62 = { "62", (&pin_exprs_62[0]) };


static const struct aspeed_sig_desc sig_descs_RXD6_UART6[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x90, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RXD6_UART6 = { .signal = "RXD6", .function = "UART6", .ndescs = (sizeof(sig_descs_RXD6_UART6) / sizeof((sig_descs_RXD6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RXD6_UART6)), typeof(&(sig_descs_RXD6_UART6)[0])))); }))), .descs = &(sig_descs_RXD6_UART6)[0], }; static const struct aspeed_sig_expr *sig_exprs_RXD6_UART6[] = { (&sig_expr_RXD6_UART6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_63_RXD6[(sizeof(sig_exprs_RXD6_UART6) / sizeof((sig_exprs_RXD6_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RXD6_UART6)), typeof(&(sig_exprs_RXD6_UART6)[0])))); })))] __attribute__((alias("sig_exprs_RXD6_UART6")));
static const struct aspeed_sig_desc sig_descs_GPIOH7_GPIOH7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOH7_GPIOH7 = { .signal = "GPIOH7", .function = "GPIOH7", .ndescs = (sizeof(sig_descs_GPIOH7_GPIOH7) / sizeof((sig_descs_GPIOH7_GPIOH7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOH7_GPIOH7)), typeof(&(sig_descs_GPIOH7_GPIOH7)[0])))); }))), .descs = &(sig_descs_GPIOH7_GPIOH7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOH7_GPIOH7[] = { (&sig_expr_GPIOH7_GPIOH7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_63_GPIOH7[(sizeof(sig_exprs_GPIOH7_GPIOH7) / sizeof((sig_exprs_GPIOH7_GPIOH7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOH7_GPIOH7)), typeof(&(sig_exprs_GPIOH7_GPIOH7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOH7_GPIOH7"))); static const struct aspeed_sig_expr **pin_exprs_63[] = { sig_exprs_63_RXD6, sig_exprs_63_GPIOH7, ((void *)0) }; static const struct aspeed_pin_desc pin_63 = { "63", (&pin_exprs_63[0]) };

static const int group_pins_UART6[] = { 56, 57, 58, 59, 60, 61, 62, 63 }; static const char *func_groups_UART6[] = { "UART6" };
# 523 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
static const struct aspeed_sig_desc sig_descs_SYSCS_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSCS_SPI1DEBUG = { .signal = "SYSCS", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SYSCS_SPI1DEBUG) / sizeof((sig_descs_SYSCS_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSCS_SPI1DEBUG)), typeof(&(sig_descs_SYSCS_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SYSCS_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SYSCS_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSCS_SPI1PASSTHRU = { .signal = "SYSCS", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SYSCS_SPI1PASSTHRU) / sizeof((sig_descs_SYSCS_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSCS_SPI1PASSTHRU)), typeof(&(sig_descs_SYSCS_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SYSCS_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SYSCS_SPI1DEBUG[] = { (&sig_expr_SYSCS_SPI1DEBUG), (&sig_expr_SYSCS_SPI1PASSTHRU), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_64_SYSCS[(sizeof(sig_exprs_SYSCS_SPI1DEBUG) / sizeof((sig_exprs_SYSCS_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SYSCS_SPI1DEBUG)), typeof(&(sig_exprs_SYSCS_SPI1DEBUG)[0])))); })))] __attribute__((alias("sig_exprs_SYSCS_SPI1DEBUG")));
static const struct aspeed_sig_desc sig_descs_GPIOI0_GPIOI0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI0_GPIOI0 = { .signal = "GPIOI0", .function = "GPIOI0", .ndescs = (sizeof(sig_descs_GPIOI0_GPIOI0) / sizeof((sig_descs_GPIOI0_GPIOI0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI0_GPIOI0)), typeof(&(sig_descs_GPIOI0_GPIOI0)[0])))); }))), .descs = &(sig_descs_GPIOI0_GPIOI0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI0_GPIOI0[] = { (&sig_expr_GPIOI0_GPIOI0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_64_GPIOI0[(sizeof(sig_exprs_GPIOI0_GPIOI0) / sizeof((sig_exprs_GPIOI0_GPIOI0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI0_GPIOI0)), typeof(&(sig_exprs_GPIOI0_GPIOI0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI0_GPIOI0"))); static const struct aspeed_sig_expr **pin_exprs_64[] = { sig_exprs_64_SYSCS, sig_exprs_64_GPIOI0, ((void *)0) }; static const struct aspeed_pin_desc pin_64 = { "64", (&pin_exprs_64[0]) };


static const struct aspeed_sig_desc sig_descs_SYSCK_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSCK_SPI1DEBUG = { .signal = "SYSCK", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SYSCK_SPI1DEBUG) / sizeof((sig_descs_SYSCK_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSCK_SPI1DEBUG)), typeof(&(sig_descs_SYSCK_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SYSCK_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SYSCK_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSCK_SPI1PASSTHRU = { .signal = "SYSCK", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SYSCK_SPI1PASSTHRU) / sizeof((sig_descs_SYSCK_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSCK_SPI1PASSTHRU)), typeof(&(sig_descs_SYSCK_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SYSCK_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SYSCK_SPI1DEBUG[] = { (&sig_expr_SYSCK_SPI1DEBUG), (&sig_expr_SYSCK_SPI1PASSTHRU), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_65_SYSCK[(sizeof(sig_exprs_SYSCK_SPI1DEBUG) / sizeof((sig_exprs_SYSCK_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SYSCK_SPI1DEBUG)), typeof(&(sig_exprs_SYSCK_SPI1DEBUG)[0])))); })))] __attribute__((alias("sig_exprs_SYSCK_SPI1DEBUG")));
static const struct aspeed_sig_desc sig_descs_GPIOI1_GPIOI1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI1_GPIOI1 = { .signal = "GPIOI1", .function = "GPIOI1", .ndescs = (sizeof(sig_descs_GPIOI1_GPIOI1) / sizeof((sig_descs_GPIOI1_GPIOI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI1_GPIOI1)), typeof(&(sig_descs_GPIOI1_GPIOI1)[0])))); }))), .descs = &(sig_descs_GPIOI1_GPIOI1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI1_GPIOI1[] = { (&sig_expr_GPIOI1_GPIOI1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_65_GPIOI1[(sizeof(sig_exprs_GPIOI1_GPIOI1) / sizeof((sig_exprs_GPIOI1_GPIOI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI1_GPIOI1)), typeof(&(sig_exprs_GPIOI1_GPIOI1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI1_GPIOI1"))); static const struct aspeed_sig_expr **pin_exprs_65[] = { sig_exprs_65_SYSCK, sig_exprs_65_GPIOI1, ((void *)0) }; static const struct aspeed_pin_desc pin_65 = { "65", (&pin_exprs_65[0]) };


static const struct aspeed_sig_desc sig_descs_SYSMOSI_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSMOSI_SPI1DEBUG = { .signal = "SYSMOSI", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SYSMOSI_SPI1DEBUG) / sizeof((sig_descs_SYSMOSI_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSMOSI_SPI1DEBUG)), typeof(&(sig_descs_SYSMOSI_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SYSMOSI_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SYSMOSI_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSMOSI_SPI1PASSTHRU = { .signal = "SYSMOSI", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SYSMOSI_SPI1PASSTHRU) / sizeof((sig_descs_SYSMOSI_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSMOSI_SPI1PASSTHRU)), typeof(&(sig_descs_SYSMOSI_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SYSMOSI_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SYSMOSI_SPI1DEBUG[] = { (&sig_expr_SYSMOSI_SPI1DEBUG), (&sig_expr_SYSMOSI_SPI1PASSTHRU), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_66_SYSMOSI[(sizeof(sig_exprs_SYSMOSI_SPI1DEBUG) / sizeof((sig_exprs_SYSMOSI_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SYSMOSI_SPI1DEBUG)), typeof(&(sig_exprs_SYSMOSI_SPI1DEBUG)[0])))); })))] __attribute__((alias("sig_exprs_SYSMOSI_SPI1DEBUG")));
static const struct aspeed_sig_desc sig_descs_GPIOI2_GPIOI2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI2_GPIOI2 = { .signal = "GPIOI2", .function = "GPIOI2", .ndescs = (sizeof(sig_descs_GPIOI2_GPIOI2) / sizeof((sig_descs_GPIOI2_GPIOI2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI2_GPIOI2)), typeof(&(sig_descs_GPIOI2_GPIOI2)[0])))); }))), .descs = &(sig_descs_GPIOI2_GPIOI2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI2_GPIOI2[] = { (&sig_expr_GPIOI2_GPIOI2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_66_GPIOI2[(sizeof(sig_exprs_GPIOI2_GPIOI2) / sizeof((sig_exprs_GPIOI2_GPIOI2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI2_GPIOI2)), typeof(&(sig_exprs_GPIOI2_GPIOI2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI2_GPIOI2"))); static const struct aspeed_sig_expr **pin_exprs_66[] = { sig_exprs_66_SYSMOSI, sig_exprs_66_GPIOI2, ((void *)0) }; static const struct aspeed_pin_desc pin_66 = { "66", (&pin_exprs_66[0]) };


static const struct aspeed_sig_desc sig_descs_SYSMISO_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSMISO_SPI1DEBUG = { .signal = "SYSMISO", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SYSMISO_SPI1DEBUG) / sizeof((sig_descs_SYSMISO_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSMISO_SPI1DEBUG)), typeof(&(sig_descs_SYSMISO_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SYSMISO_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SYSMISO_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SYSMISO_SPI1PASSTHRU = { .signal = "SYSMISO", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SYSMISO_SPI1PASSTHRU) / sizeof((sig_descs_SYSMISO_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SYSMISO_SPI1PASSTHRU)), typeof(&(sig_descs_SYSMISO_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SYSMISO_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SYSMISO_SPI1DEBUG[] = { (&sig_expr_SYSMISO_SPI1DEBUG), (&sig_expr_SYSMISO_SPI1PASSTHRU), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_67_SYSMISO[(sizeof(sig_exprs_SYSMISO_SPI1DEBUG) / sizeof((sig_exprs_SYSMISO_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SYSMISO_SPI1DEBUG)), typeof(&(sig_exprs_SYSMISO_SPI1DEBUG)[0])))); })))] __attribute__((alias("sig_exprs_SYSMISO_SPI1DEBUG")));
static const struct aspeed_sig_desc sig_descs_GPIOI3_GPIOI3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI3_GPIOI3 = { .signal = "GPIOI3", .function = "GPIOI3", .ndescs = (sizeof(sig_descs_GPIOI3_GPIOI3) / sizeof((sig_descs_GPIOI3_GPIOI3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI3_GPIOI3)), typeof(&(sig_descs_GPIOI3_GPIOI3)[0])))); }))), .descs = &(sig_descs_GPIOI3_GPIOI3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI3_GPIOI3[] = { (&sig_expr_GPIOI3_GPIOI3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_67_GPIOI3[(sizeof(sig_exprs_GPIOI3_GPIOI3) / sizeof((sig_exprs_GPIOI3_GPIOI3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI3_GPIOI3)), typeof(&(sig_exprs_GPIOI3_GPIOI3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI3_GPIOI3"))); static const struct aspeed_sig_expr **pin_exprs_67[] = { sig_exprs_67_SYSMISO, sig_exprs_67_GPIOI3, ((void *)0) }; static const struct aspeed_pin_desc pin_67 = { "67", (&pin_exprs_67[0]) };




static const struct aspeed_sig_desc sig_descs_SPI1CS0_SPI1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 1, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1CS0_SPI1 = { .signal = "SPI1CS0", .function = "SPI1", .ndescs = (sizeof(sig_descs_SPI1CS0_SPI1) / sizeof((sig_descs_SPI1CS0_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CS0_SPI1)), typeof(&(sig_descs_SPI1CS0_SPI1)[0])))); }))), .descs = &(sig_descs_SPI1CS0_SPI1)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1CS0_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1CS0_SPI1DEBUG = { .signal = "SPI1CS0", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SPI1CS0_SPI1DEBUG) / sizeof((sig_descs_SPI1CS0_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CS0_SPI1DEBUG)), typeof(&(sig_descs_SPI1CS0_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SPI1CS0_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1CS0_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1CS0_SPI1PASSTHRU = { .signal = "SPI1CS0", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SPI1CS0_SPI1PASSTHRU) / sizeof((sig_descs_SPI1CS0_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CS0_SPI1PASSTHRU)), typeof(&(sig_descs_SPI1CS0_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SPI1CS0_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SPI1CS0_SPI1[] = { (&sig_expr_SPI1CS0_SPI1), (&sig_expr_SPI1CS0_SPI1DEBUG), (&sig_expr_SPI1CS0_SPI1PASSTHRU), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_68_SPI1CS0[(sizeof(sig_exprs_SPI1CS0_SPI1) / sizeof((sig_exprs_SPI1CS0_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI1CS0_SPI1)), typeof(&(sig_exprs_SPI1CS0_SPI1)[0])))); })))] __attribute__((alias("sig_exprs_SPI1CS0_SPI1")));
static const struct aspeed_sig_desc sig_descs_VBCS_VGABIOSROM[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VBCS_VGABIOSROM = { .signal = "VBCS", .function = "VGABIOSROM", .ndescs = (sizeof(sig_descs_VBCS_VGABIOSROM) / sizeof((sig_descs_VBCS_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VBCS_VGABIOSROM)), typeof(&(sig_descs_VBCS_VGABIOSROM)[0])))); }))), .descs = &(sig_descs_VBCS_VGABIOSROM)[0], }; static const struct aspeed_sig_expr *sig_exprs_VBCS_VGABIOSROM[] = { (&sig_expr_VBCS_VGABIOSROM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_68_VBCS[(sizeof(sig_exprs_VBCS_VGABIOSROM) / sizeof((sig_exprs_VBCS_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VBCS_VGABIOSROM)), typeof(&(sig_exprs_VBCS_VGABIOSROM)[0])))); })))] __attribute__((alias("sig_exprs_VBCS_VGABIOSROM")));
static const struct aspeed_sig_desc sig_descs_GPIOI4_GPIOI4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI4_GPIOI4 = { .signal = "GPIOI4", .function = "GPIOI4", .ndescs = (sizeof(sig_descs_GPIOI4_GPIOI4) / sizeof((sig_descs_GPIOI4_GPIOI4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI4_GPIOI4)), typeof(&(sig_descs_GPIOI4_GPIOI4)[0])))); }))), .descs = &(sig_descs_GPIOI4_GPIOI4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI4_GPIOI4[] = { (&sig_expr_GPIOI4_GPIOI4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_68_GPIOI4[(sizeof(sig_exprs_GPIOI4_GPIOI4) / sizeof((sig_exprs_GPIOI4_GPIOI4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI4_GPIOI4)), typeof(&(sig_exprs_GPIOI4_GPIOI4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI4_GPIOI4"))); static const struct aspeed_sig_expr **pin_exprs_68[] = { sig_exprs_68_SPI1CS0, sig_exprs_68_VBCS, sig_exprs_68_GPIOI4, ((void *)0) }; static const struct aspeed_pin_desc pin_68 = { "68", (&pin_exprs_68[0]) };


static const struct aspeed_sig_desc sig_descs_SPI1CK_SPI1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 1, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1CK_SPI1 = { .signal = "SPI1CK", .function = "SPI1", .ndescs = (sizeof(sig_descs_SPI1CK_SPI1) / sizeof((sig_descs_SPI1CK_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CK_SPI1)), typeof(&(sig_descs_SPI1CK_SPI1)[0])))); }))), .descs = &(sig_descs_SPI1CK_SPI1)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1CK_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1CK_SPI1DEBUG = { .signal = "SPI1CK", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SPI1CK_SPI1DEBUG) / sizeof((sig_descs_SPI1CK_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CK_SPI1DEBUG)), typeof(&(sig_descs_SPI1CK_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SPI1CK_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1CK_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1CK_SPI1PASSTHRU = { .signal = "SPI1CK", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SPI1CK_SPI1PASSTHRU) / sizeof((sig_descs_SPI1CK_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1CK_SPI1PASSTHRU)), typeof(&(sig_descs_SPI1CK_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SPI1CK_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SPI1CK_SPI1[] = { (&sig_expr_SPI1CK_SPI1), (&sig_expr_SPI1CK_SPI1DEBUG), (&sig_expr_SPI1CK_SPI1PASSTHRU), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_69_SPI1CK[(sizeof(sig_exprs_SPI1CK_SPI1) / sizeof((sig_exprs_SPI1CK_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI1CK_SPI1)), typeof(&(sig_exprs_SPI1CK_SPI1)[0])))); })))] __attribute__((alias("sig_exprs_SPI1CK_SPI1")));
static const struct aspeed_sig_desc sig_descs_VBCK_VGABIOSROM[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VBCK_VGABIOSROM = { .signal = "VBCK", .function = "VGABIOSROM", .ndescs = (sizeof(sig_descs_VBCK_VGABIOSROM) / sizeof((sig_descs_VBCK_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VBCK_VGABIOSROM)), typeof(&(sig_descs_VBCK_VGABIOSROM)[0])))); }))), .descs = &(sig_descs_VBCK_VGABIOSROM)[0], }; static const struct aspeed_sig_expr *sig_exprs_VBCK_VGABIOSROM[] = { (&sig_expr_VBCK_VGABIOSROM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_69_VBCK[(sizeof(sig_exprs_VBCK_VGABIOSROM) / sizeof((sig_exprs_VBCK_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VBCK_VGABIOSROM)), typeof(&(sig_exprs_VBCK_VGABIOSROM)[0])))); })))] __attribute__((alias("sig_exprs_VBCK_VGABIOSROM")));
static const struct aspeed_sig_desc sig_descs_GPIOI5_GPIOI5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI5_GPIOI5 = { .signal = "GPIOI5", .function = "GPIOI5", .ndescs = (sizeof(sig_descs_GPIOI5_GPIOI5) / sizeof((sig_descs_GPIOI5_GPIOI5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI5_GPIOI5)), typeof(&(sig_descs_GPIOI5_GPIOI5)[0])))); }))), .descs = &(sig_descs_GPIOI5_GPIOI5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI5_GPIOI5[] = { (&sig_expr_GPIOI5_GPIOI5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_69_GPIOI5[(sizeof(sig_exprs_GPIOI5_GPIOI5) / sizeof((sig_exprs_GPIOI5_GPIOI5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI5_GPIOI5)), typeof(&(sig_exprs_GPIOI5_GPIOI5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI5_GPIOI5"))); static const struct aspeed_sig_expr **pin_exprs_69[] = { sig_exprs_69_SPI1CK, sig_exprs_69_VBCK, sig_exprs_69_GPIOI5, ((void *)0) }; static const struct aspeed_pin_desc pin_69 = { "69", (&pin_exprs_69[0]) };


static const struct aspeed_sig_desc sig_descs_SPI1MOSI_SPI1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 1, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1MOSI_SPI1 = { .signal = "SPI1MOSI", .function = "SPI1", .ndescs = (sizeof(sig_descs_SPI1MOSI_SPI1) / sizeof((sig_descs_SPI1MOSI_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1MOSI_SPI1)), typeof(&(sig_descs_SPI1MOSI_SPI1)[0])))); }))), .descs = &(sig_descs_SPI1MOSI_SPI1)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1MOSI_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1MOSI_SPI1DEBUG = { .signal = "SPI1MOSI", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SPI1MOSI_SPI1DEBUG) / sizeof((sig_descs_SPI1MOSI_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1MOSI_SPI1DEBUG)), typeof(&(sig_descs_SPI1MOSI_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SPI1MOSI_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1MOSI_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1MOSI_SPI1PASSTHRU = { .signal = "SPI1MOSI", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SPI1MOSI_SPI1PASSTHRU) / sizeof((sig_descs_SPI1MOSI_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1MOSI_SPI1PASSTHRU)), typeof(&(sig_descs_SPI1MOSI_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SPI1MOSI_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SPI1MOSI_SPI1[] = { (&sig_expr_SPI1MOSI_SPI1), (&sig_expr_SPI1MOSI_SPI1DEBUG), (&sig_expr_SPI1MOSI_SPI1PASSTHRU), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_70_SPI1MOSI[(sizeof(sig_exprs_SPI1MOSI_SPI1) / sizeof((sig_exprs_SPI1MOSI_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI1MOSI_SPI1)), typeof(&(sig_exprs_SPI1MOSI_SPI1)[0])))); })))] __attribute__((alias("sig_exprs_SPI1MOSI_SPI1")));
static const struct aspeed_sig_desc sig_descs_VBMOSI_VGABIOSROM[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VBMOSI_VGABIOSROM = { .signal = "VBMOSI", .function = "VGABIOSROM", .ndescs = (sizeof(sig_descs_VBMOSI_VGABIOSROM) / sizeof((sig_descs_VBMOSI_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VBMOSI_VGABIOSROM)), typeof(&(sig_descs_VBMOSI_VGABIOSROM)[0])))); }))), .descs = &(sig_descs_VBMOSI_VGABIOSROM)[0], }; static const struct aspeed_sig_expr *sig_exprs_VBMOSI_VGABIOSROM[] = { (&sig_expr_VBMOSI_VGABIOSROM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_70_VBMOSI[(sizeof(sig_exprs_VBMOSI_VGABIOSROM) / sizeof((sig_exprs_VBMOSI_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VBMOSI_VGABIOSROM)), typeof(&(sig_exprs_VBMOSI_VGABIOSROM)[0])))); })))] __attribute__((alias("sig_exprs_VBMOSI_VGABIOSROM")));
static const struct aspeed_sig_desc sig_descs_GPIOI6_GPIOI6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI6_GPIOI6 = { .signal = "GPIOI6", .function = "GPIOI6", .ndescs = (sizeof(sig_descs_GPIOI6_GPIOI6) / sizeof((sig_descs_GPIOI6_GPIOI6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI6_GPIOI6)), typeof(&(sig_descs_GPIOI6_GPIOI6)[0])))); }))), .descs = &(sig_descs_GPIOI6_GPIOI6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI6_GPIOI6[] = { (&sig_expr_GPIOI6_GPIOI6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_70_GPIOI6[(sizeof(sig_exprs_GPIOI6_GPIOI6) / sizeof((sig_exprs_GPIOI6_GPIOI6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI6_GPIOI6)), typeof(&(sig_exprs_GPIOI6_GPIOI6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI6_GPIOI6"))); static const struct aspeed_sig_expr **pin_exprs_70[] = { sig_exprs_70_SPI1MOSI, sig_exprs_70_VBMOSI, sig_exprs_70_GPIOI6, ((void *)0) }; static const struct aspeed_pin_desc pin_70 = { "70", (&pin_exprs_70[0]) };


static const struct aspeed_sig_desc sig_descs_SPI1MISO_SPI1[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 1, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1MISO_SPI1 = { .signal = "SPI1MISO", .function = "SPI1", .ndescs = (sizeof(sig_descs_SPI1MISO_SPI1) / sizeof((sig_descs_SPI1MISO_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1MISO_SPI1)), typeof(&(sig_descs_SPI1MISO_SPI1)[0])))); }))), .descs = &(sig_descs_SPI1MISO_SPI1)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1MISO_SPI1DEBUG[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1MISO_SPI1DEBUG = { .signal = "SPI1MISO", .function = "SPI1DEBUG", .ndescs = (sizeof(sig_descs_SPI1MISO_SPI1DEBUG) / sizeof((sig_descs_SPI1MISO_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1MISO_SPI1DEBUG)), typeof(&(sig_descs_SPI1MISO_SPI1DEBUG)[0])))); }))), .descs = &(sig_descs_SPI1MISO_SPI1DEBUG)[0], };
static const struct aspeed_sig_desc sig_descs_SPI1MISO_SPI1PASSTHRU[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, (((~(((0UL)))) - ((((1UL))) << (12)) + 1) & (~(((0UL))) >> (32 - 1 - (13)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI1MISO_SPI1PASSTHRU = { .signal = "SPI1MISO", .function = "SPI1PASSTHRU", .ndescs = (sizeof(sig_descs_SPI1MISO_SPI1PASSTHRU) / sizeof((sig_descs_SPI1MISO_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI1MISO_SPI1PASSTHRU)), typeof(&(sig_descs_SPI1MISO_SPI1PASSTHRU)[0])))); }))), .descs = &(sig_descs_SPI1MISO_SPI1PASSTHRU)[0], };
static const struct aspeed_sig_expr *sig_exprs_SPI1MISO_SPI1[] = { (&sig_expr_SPI1MISO_SPI1), (&sig_expr_SPI1MISO_SPI1DEBUG), (&sig_expr_SPI1MISO_SPI1PASSTHRU), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_71_SPI1MISO[(sizeof(sig_exprs_SPI1MISO_SPI1) / sizeof((sig_exprs_SPI1MISO_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI1MISO_SPI1)), typeof(&(sig_exprs_SPI1MISO_SPI1)[0])))); })))] __attribute__((alias("sig_exprs_SPI1MISO_SPI1")));
static const struct aspeed_sig_desc sig_descs_VBMISO_VGABIOSROM[] = { { 0, 0x90, ((((1UL))) << (6)), 0, 0 }, { 0, 0x70, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VBMISO_VGABIOSROM = { .signal = "VBMISO", .function = "VGABIOSROM", .ndescs = (sizeof(sig_descs_VBMISO_VGABIOSROM) / sizeof((sig_descs_VBMISO_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VBMISO_VGABIOSROM)), typeof(&(sig_descs_VBMISO_VGABIOSROM)[0])))); }))), .descs = &(sig_descs_VBMISO_VGABIOSROM)[0], }; static const struct aspeed_sig_expr *sig_exprs_VBMISO_VGABIOSROM[] = { (&sig_expr_VBMISO_VGABIOSROM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_71_VBMISO[(sizeof(sig_exprs_VBMISO_VGABIOSROM) / sizeof((sig_exprs_VBMISO_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VBMISO_VGABIOSROM)), typeof(&(sig_exprs_VBMISO_VGABIOSROM)[0])))); })))] __attribute__((alias("sig_exprs_VBMISO_VGABIOSROM")));
static const struct aspeed_sig_desc sig_descs_GPIOI7_GPIOI7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOI7_GPIOI7 = { .signal = "GPIOI7", .function = "GPIOI7", .ndescs = (sizeof(sig_descs_GPIOI7_GPIOI7) / sizeof((sig_descs_GPIOI7_GPIOI7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOI7_GPIOI7)), typeof(&(sig_descs_GPIOI7_GPIOI7)[0])))); }))), .descs = &(sig_descs_GPIOI7_GPIOI7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOI7_GPIOI7[] = { (&sig_expr_GPIOI7_GPIOI7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_71_GPIOI7[(sizeof(sig_exprs_GPIOI7_GPIOI7) / sizeof((sig_exprs_GPIOI7_GPIOI7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOI7_GPIOI7)), typeof(&(sig_exprs_GPIOI7_GPIOI7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOI7_GPIOI7"))); static const struct aspeed_sig_expr **pin_exprs_71[] = { sig_exprs_71_SPI1MISO, sig_exprs_71_VBMISO, sig_exprs_71_GPIOI7, ((void *)0) }; static const struct aspeed_pin_desc pin_71 = { "71", (&pin_exprs_71[0]) };

static const int group_pins_SPI1[] = { 68, 69, 70, 71 }; static const char *func_groups_SPI1[] = { "SPI1" };
static const int group_pins_SPI1DEBUG[] = { 64, 65, 66, 67, 68, 69, 70, 71 }; static const char *func_groups_SPI1DEBUG[] = { "SPI1DEBUG" };
static const int group_pins_SPI1PASSTHRU[] = { 64, 65, 66, 67, 68, 69, 70, 71 }; static const char *func_groups_SPI1PASSTHRU[] = { "SPI1PASSTHRU" };
static const int group_pins_VGABIOSROM[] = { 68, 69, 70, 71 }; static const char *func_groups_VGABIOSROM[] = { "VGABIOSROM" };


static const struct aspeed_sig_desc sig_descs_SGPMCK_SGPM[] = { { 0, 0x84, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPMCK_SGPM = { .signal = "SGPMCK", .function = "SGPM", .ndescs = (sizeof(sig_descs_SGPMCK_SGPM) / sizeof((sig_descs_SGPMCK_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPMCK_SGPM)), typeof(&(sig_descs_SGPMCK_SGPM)[0])))); }))), .descs = &(sig_descs_SGPMCK_SGPM)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPMCK_SGPM[] = { (&sig_expr_SGPMCK_SGPM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_72_SGPMCK[(sizeof(sig_exprs_SGPMCK_SGPM) / sizeof((sig_exprs_SGPMCK_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPMCK_SGPM)), typeof(&(sig_exprs_SGPMCK_SGPM)[0])))); })))] __attribute__((alias("sig_exprs_SGPMCK_SGPM")));
static const struct aspeed_sig_desc sig_descs_GPIOJ0_GPIOJ0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ0_GPIOJ0 = { .signal = "GPIOJ0", .function = "GPIOJ0", .ndescs = (sizeof(sig_descs_GPIOJ0_GPIOJ0) / sizeof((sig_descs_GPIOJ0_GPIOJ0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ0_GPIOJ0)), typeof(&(sig_descs_GPIOJ0_GPIOJ0)[0])))); }))), .descs = &(sig_descs_GPIOJ0_GPIOJ0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ0_GPIOJ0[] = { (&sig_expr_GPIOJ0_GPIOJ0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_72_GPIOJ0[(sizeof(sig_exprs_GPIOJ0_GPIOJ0) / sizeof((sig_exprs_GPIOJ0_GPIOJ0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ0_GPIOJ0)), typeof(&(sig_exprs_GPIOJ0_GPIOJ0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ0_GPIOJ0"))); static const struct aspeed_sig_expr **pin_exprs_72[] = { sig_exprs_72_SGPMCK, sig_exprs_72_GPIOJ0, ((void *)0) }; static const struct aspeed_pin_desc pin_72 = { "72", (&pin_exprs_72[0]) };


static const struct aspeed_sig_desc sig_descs_SGPMLD_SGPM[] = { { 0, 0x84, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPMLD_SGPM = { .signal = "SGPMLD", .function = "SGPM", .ndescs = (sizeof(sig_descs_SGPMLD_SGPM) / sizeof((sig_descs_SGPMLD_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPMLD_SGPM)), typeof(&(sig_descs_SGPMLD_SGPM)[0])))); }))), .descs = &(sig_descs_SGPMLD_SGPM)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPMLD_SGPM[] = { (&sig_expr_SGPMLD_SGPM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_73_SGPMLD[(sizeof(sig_exprs_SGPMLD_SGPM) / sizeof((sig_exprs_SGPMLD_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPMLD_SGPM)), typeof(&(sig_exprs_SGPMLD_SGPM)[0])))); })))] __attribute__((alias("sig_exprs_SGPMLD_SGPM")));
static const struct aspeed_sig_desc sig_descs_GPIOJ1_GPIOJ1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ1_GPIOJ1 = { .signal = "GPIOJ1", .function = "GPIOJ1", .ndescs = (sizeof(sig_descs_GPIOJ1_GPIOJ1) / sizeof((sig_descs_GPIOJ1_GPIOJ1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ1_GPIOJ1)), typeof(&(sig_descs_GPIOJ1_GPIOJ1)[0])))); }))), .descs = &(sig_descs_GPIOJ1_GPIOJ1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ1_GPIOJ1[] = { (&sig_expr_GPIOJ1_GPIOJ1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_73_GPIOJ1[(sizeof(sig_exprs_GPIOJ1_GPIOJ1) / sizeof((sig_exprs_GPIOJ1_GPIOJ1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ1_GPIOJ1)), typeof(&(sig_exprs_GPIOJ1_GPIOJ1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ1_GPIOJ1"))); static const struct aspeed_sig_expr **pin_exprs_73[] = { sig_exprs_73_SGPMLD, sig_exprs_73_GPIOJ1, ((void *)0) }; static const struct aspeed_pin_desc pin_73 = { "73", (&pin_exprs_73[0]) };


static const struct aspeed_sig_desc sig_descs_SGPMO_SGPM[] = { { 0, 0x84, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPMO_SGPM = { .signal = "SGPMO", .function = "SGPM", .ndescs = (sizeof(sig_descs_SGPMO_SGPM) / sizeof((sig_descs_SGPMO_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPMO_SGPM)), typeof(&(sig_descs_SGPMO_SGPM)[0])))); }))), .descs = &(sig_descs_SGPMO_SGPM)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPMO_SGPM[] = { (&sig_expr_SGPMO_SGPM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_74_SGPMO[(sizeof(sig_exprs_SGPMO_SGPM) / sizeof((sig_exprs_SGPMO_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPMO_SGPM)), typeof(&(sig_exprs_SGPMO_SGPM)[0])))); })))] __attribute__((alias("sig_exprs_SGPMO_SGPM")));
static const struct aspeed_sig_desc sig_descs_GPIOJ2_GPIOJ2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ2_GPIOJ2 = { .signal = "GPIOJ2", .function = "GPIOJ2", .ndescs = (sizeof(sig_descs_GPIOJ2_GPIOJ2) / sizeof((sig_descs_GPIOJ2_GPIOJ2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ2_GPIOJ2)), typeof(&(sig_descs_GPIOJ2_GPIOJ2)[0])))); }))), .descs = &(sig_descs_GPIOJ2_GPIOJ2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ2_GPIOJ2[] = { (&sig_expr_GPIOJ2_GPIOJ2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_74_GPIOJ2[(sizeof(sig_exprs_GPIOJ2_GPIOJ2) / sizeof((sig_exprs_GPIOJ2_GPIOJ2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ2_GPIOJ2)), typeof(&(sig_exprs_GPIOJ2_GPIOJ2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ2_GPIOJ2"))); static const struct aspeed_sig_expr **pin_exprs_74[] = { sig_exprs_74_SGPMO, sig_exprs_74_GPIOJ2, ((void *)0) }; static const struct aspeed_pin_desc pin_74 = { "74", (&pin_exprs_74[0]) };


static const struct aspeed_sig_desc sig_descs_SGPMI_SGPM[] = { { 0, 0x84, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SGPMI_SGPM = { .signal = "SGPMI", .function = "SGPM", .ndescs = (sizeof(sig_descs_SGPMI_SGPM) / sizeof((sig_descs_SGPMI_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SGPMI_SGPM)), typeof(&(sig_descs_SGPMI_SGPM)[0])))); }))), .descs = &(sig_descs_SGPMI_SGPM)[0], }; static const struct aspeed_sig_expr *sig_exprs_SGPMI_SGPM[] = { (&sig_expr_SGPMI_SGPM), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_75_SGPMI[(sizeof(sig_exprs_SGPMI_SGPM) / sizeof((sig_exprs_SGPMI_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SGPMI_SGPM)), typeof(&(sig_exprs_SGPMI_SGPM)[0])))); })))] __attribute__((alias("sig_exprs_SGPMI_SGPM")));
static const struct aspeed_sig_desc sig_descs_GPIOJ3_GPIOJ3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ3_GPIOJ3 = { .signal = "GPIOJ3", .function = "GPIOJ3", .ndescs = (sizeof(sig_descs_GPIOJ3_GPIOJ3) / sizeof((sig_descs_GPIOJ3_GPIOJ3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ3_GPIOJ3)), typeof(&(sig_descs_GPIOJ3_GPIOJ3)[0])))); }))), .descs = &(sig_descs_GPIOJ3_GPIOJ3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ3_GPIOJ3[] = { (&sig_expr_GPIOJ3_GPIOJ3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_75_GPIOJ3[(sizeof(sig_exprs_GPIOJ3_GPIOJ3) / sizeof((sig_exprs_GPIOJ3_GPIOJ3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ3_GPIOJ3)), typeof(&(sig_exprs_GPIOJ3_GPIOJ3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ3_GPIOJ3"))); static const struct aspeed_sig_expr **pin_exprs_75[] = { sig_exprs_75_SGPMI, sig_exprs_75_GPIOJ3, ((void *)0) }; static const struct aspeed_pin_desc pin_75 = { "75", (&pin_exprs_75[0]) };

static const int group_pins_SGPM[] = { 72, 73, 74, 75 }; static const char *func_groups_SGPM[] = { "SGPM" };


static const struct aspeed_sig_desc sig_descs_VGAHS_VGAHS[] = { { 0, 0x84, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VGAHS_VGAHS = { .signal = "VGAHS", .function = "VGAHS", .ndescs = (sizeof(sig_descs_VGAHS_VGAHS) / sizeof((sig_descs_VGAHS_VGAHS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VGAHS_VGAHS)), typeof(&(sig_descs_VGAHS_VGAHS)[0])))); }))), .descs = &(sig_descs_VGAHS_VGAHS)[0], }; static const struct aspeed_sig_expr *sig_exprs_VGAHS_VGAHS[] = { (&sig_expr_VGAHS_VGAHS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_76_VGAHS[(sizeof(sig_exprs_VGAHS_VGAHS) / sizeof((sig_exprs_VGAHS_VGAHS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VGAHS_VGAHS)), typeof(&(sig_exprs_VGAHS_VGAHS)[0])))); })))] __attribute__((alias("sig_exprs_VGAHS_VGAHS")));
static const struct aspeed_sig_desc sig_descs_DASHN5_DASHN5[] = { { 0, 0x94, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHN5_DASHN5 = { .signal = "DASHN5", .function = "DASHN5", .ndescs = (sizeof(sig_descs_DASHN5_DASHN5) / sizeof((sig_descs_DASHN5_DASHN5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHN5_DASHN5)), typeof(&(sig_descs_DASHN5_DASHN5)[0])))); }))), .descs = &(sig_descs_DASHN5_DASHN5)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHN5_DASHN5[] = { (&sig_expr_DASHN5_DASHN5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_76_DASHN5[(sizeof(sig_exprs_DASHN5_DASHN5) / sizeof((sig_exprs_DASHN5_DASHN5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHN5_DASHN5)), typeof(&(sig_exprs_DASHN5_DASHN5)[0])))); })))] __attribute__((alias("sig_exprs_DASHN5_DASHN5")));
static const struct aspeed_sig_desc sig_descs_GPIOJ4_GPIOJ4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ4_GPIOJ4 = { .signal = "GPIOJ4", .function = "GPIOJ4", .ndescs = (sizeof(sig_descs_GPIOJ4_GPIOJ4) / sizeof((sig_descs_GPIOJ4_GPIOJ4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ4_GPIOJ4)), typeof(&(sig_descs_GPIOJ4_GPIOJ4)[0])))); }))), .descs = &(sig_descs_GPIOJ4_GPIOJ4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ4_GPIOJ4[] = { (&sig_expr_GPIOJ4_GPIOJ4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_76_GPIOJ4[(sizeof(sig_exprs_GPIOJ4_GPIOJ4) / sizeof((sig_exprs_GPIOJ4_GPIOJ4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ4_GPIOJ4)), typeof(&(sig_exprs_GPIOJ4_GPIOJ4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ4_GPIOJ4"))); static const struct aspeed_sig_expr **pin_exprs_76[] = { sig_exprs_76_VGAHS, sig_exprs_76_DASHN5, sig_exprs_76_GPIOJ4, ((void *)0) }; static const struct aspeed_pin_desc pin_76 = { "76", (&pin_exprs_76[0]) };
static const int group_pins_VGAHS[] = { 76 }; static const char *func_groups_VGAHS[] = { "VGAHS" };


static const struct aspeed_sig_desc sig_descs_VGAVS_VGAVS[] = { { 0, 0x84, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VGAVS_VGAVS = { .signal = "VGAVS", .function = "VGAVS", .ndescs = (sizeof(sig_descs_VGAVS_VGAVS) / sizeof((sig_descs_VGAVS_VGAVS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VGAVS_VGAVS)), typeof(&(sig_descs_VGAVS_VGAVS)[0])))); }))), .descs = &(sig_descs_VGAVS_VGAVS)[0], }; static const struct aspeed_sig_expr *sig_exprs_VGAVS_VGAVS[] = { (&sig_expr_VGAVS_VGAVS), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_77_VGAVS[(sizeof(sig_exprs_VGAVS_VGAVS) / sizeof((sig_exprs_VGAVS_VGAVS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VGAVS_VGAVS)), typeof(&(sig_exprs_VGAVS_VGAVS)[0])))); })))] __attribute__((alias("sig_exprs_VGAVS_VGAVS")));
static const struct aspeed_sig_desc sig_descs_DASHR4_DASHR4[] = { { 0, 0x94, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHR4_DASHR4 = { .signal = "DASHR4", .function = "DASHR4", .ndescs = (sizeof(sig_descs_DASHR4_DASHR4) / sizeof((sig_descs_DASHR4_DASHR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHR4_DASHR4)), typeof(&(sig_descs_DASHR4_DASHR4)[0])))); }))), .descs = &(sig_descs_DASHR4_DASHR4)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHR4_DASHR4[] = { (&sig_expr_DASHR4_DASHR4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_77_DASHR4[(sizeof(sig_exprs_DASHR4_DASHR4) / sizeof((sig_exprs_DASHR4_DASHR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHR4_DASHR4)), typeof(&(sig_exprs_DASHR4_DASHR4)[0])))); })))] __attribute__((alias("sig_exprs_DASHR4_DASHR4")));
static const struct aspeed_sig_desc sig_descs_GPIOJ5_GPIOJ5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ5_GPIOJ5 = { .signal = "GPIOJ5", .function = "GPIOJ5", .ndescs = (sizeof(sig_descs_GPIOJ5_GPIOJ5) / sizeof((sig_descs_GPIOJ5_GPIOJ5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ5_GPIOJ5)), typeof(&(sig_descs_GPIOJ5_GPIOJ5)[0])))); }))), .descs = &(sig_descs_GPIOJ5_GPIOJ5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ5_GPIOJ5[] = { (&sig_expr_GPIOJ5_GPIOJ5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_77_GPIOJ5[(sizeof(sig_exprs_GPIOJ5_GPIOJ5) / sizeof((sig_exprs_GPIOJ5_GPIOJ5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ5_GPIOJ5)), typeof(&(sig_exprs_GPIOJ5_GPIOJ5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ5_GPIOJ5"))); static const struct aspeed_sig_expr **pin_exprs_77[] = { sig_exprs_77_VGAVS, sig_exprs_77_DASHR4, sig_exprs_77_GPIOJ5, ((void *)0) }; static const struct aspeed_pin_desc pin_77 = { "77", (&pin_exprs_77[0]) };
static const int group_pins_VGAVS[] = { 77 }; static const char *func_groups_VGAVS[] = { "VGAVS" };


static const struct aspeed_sig_desc sig_descs_DDCCLK_DDCCLK[] = { { 0, 0x84, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DDCCLK_DDCCLK = { .signal = "DDCCLK", .function = "DDCCLK", .ndescs = (sizeof(sig_descs_DDCCLK_DDCCLK) / sizeof((sig_descs_DDCCLK_DDCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DDCCLK_DDCCLK)), typeof(&(sig_descs_DDCCLK_DDCCLK)[0])))); }))), .descs = &(sig_descs_DDCCLK_DDCCLK)[0], }; static const struct aspeed_sig_expr *sig_exprs_DDCCLK_DDCCLK[] = { (&sig_expr_DDCCLK_DDCCLK), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_78_DDCCLK[(sizeof(sig_exprs_DDCCLK_DDCCLK) / sizeof((sig_exprs_DDCCLK_DDCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DDCCLK_DDCCLK)), typeof(&(sig_exprs_DDCCLK_DDCCLK)[0])))); })))] __attribute__((alias("sig_exprs_DDCCLK_DDCCLK")));
static const struct aspeed_sig_desc sig_descs_DASHR3_DASHR3[] = { { 0, 0x94, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHR3_DASHR3 = { .signal = "DASHR3", .function = "DASHR3", .ndescs = (sizeof(sig_descs_DASHR3_DASHR3) / sizeof((sig_descs_DASHR3_DASHR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHR3_DASHR3)), typeof(&(sig_descs_DASHR3_DASHR3)[0])))); }))), .descs = &(sig_descs_DASHR3_DASHR3)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHR3_DASHR3[] = { (&sig_expr_DASHR3_DASHR3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_78_DASHR3[(sizeof(sig_exprs_DASHR3_DASHR3) / sizeof((sig_exprs_DASHR3_DASHR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHR3_DASHR3)), typeof(&(sig_exprs_DASHR3_DASHR3)[0])))); })))] __attribute__((alias("sig_exprs_DASHR3_DASHR3")));
static const struct aspeed_sig_desc sig_descs_GPIOJ6_GPIOJ6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ6_GPIOJ6 = { .signal = "GPIOJ6", .function = "GPIOJ6", .ndescs = (sizeof(sig_descs_GPIOJ6_GPIOJ6) / sizeof((sig_descs_GPIOJ6_GPIOJ6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ6_GPIOJ6)), typeof(&(sig_descs_GPIOJ6_GPIOJ6)[0])))); }))), .descs = &(sig_descs_GPIOJ6_GPIOJ6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ6_GPIOJ6[] = { (&sig_expr_GPIOJ6_GPIOJ6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_78_GPIOJ6[(sizeof(sig_exprs_GPIOJ6_GPIOJ6) / sizeof((sig_exprs_GPIOJ6_GPIOJ6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ6_GPIOJ6)), typeof(&(sig_exprs_GPIOJ6_GPIOJ6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ6_GPIOJ6"))); static const struct aspeed_sig_expr **pin_exprs_78[] = { sig_exprs_78_DDCCLK, sig_exprs_78_DASHR3, sig_exprs_78_GPIOJ6, ((void *)0) }; static const struct aspeed_pin_desc pin_78 = { "78", (&pin_exprs_78[0]) };
static const int group_pins_DDCCLK[] = { 78 }; static const char *func_groups_DDCCLK[] = { "DDCCLK" };


static const struct aspeed_sig_desc sig_descs_DDCDAT_DDCDAT[] = { { 0, 0x84, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DDCDAT_DDCDAT = { .signal = "DDCDAT", .function = "DDCDAT", .ndescs = (sizeof(sig_descs_DDCDAT_DDCDAT) / sizeof((sig_descs_DDCDAT_DDCDAT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DDCDAT_DDCDAT)), typeof(&(sig_descs_DDCDAT_DDCDAT)[0])))); }))), .descs = &(sig_descs_DDCDAT_DDCDAT)[0], }; static const struct aspeed_sig_expr *sig_exprs_DDCDAT_DDCDAT[] = { (&sig_expr_DDCDAT_DDCDAT), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_79_DDCDAT[(sizeof(sig_exprs_DDCDAT_DDCDAT) / sizeof((sig_exprs_DDCDAT_DDCDAT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DDCDAT_DDCDAT)), typeof(&(sig_exprs_DDCDAT_DDCDAT)[0])))); })))] __attribute__((alias("sig_exprs_DDCDAT_DDCDAT")));
static const struct aspeed_sig_desc sig_descs_DASHT3_DASHT3[] = { { 0, 0x94, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHT3_DASHT3 = { .signal = "DASHT3", .function = "DASHT3", .ndescs = (sizeof(sig_descs_DASHT3_DASHT3) / sizeof((sig_descs_DASHT3_DASHT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHT3_DASHT3)), typeof(&(sig_descs_DASHT3_DASHT3)[0])))); }))), .descs = &(sig_descs_DASHT3_DASHT3)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHT3_DASHT3[] = { (&sig_expr_DASHT3_DASHT3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_79_DASHT3[(sizeof(sig_exprs_DASHT3_DASHT3) / sizeof((sig_exprs_DASHT3_DASHT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHT3_DASHT3)), typeof(&(sig_exprs_DASHT3_DASHT3)[0])))); })))] __attribute__((alias("sig_exprs_DASHT3_DASHT3")));
static const struct aspeed_sig_desc sig_descs_GPIOJ7_GPIOJ7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOJ7_GPIOJ7 = { .signal = "GPIOJ7", .function = "GPIOJ7", .ndescs = (sizeof(sig_descs_GPIOJ7_GPIOJ7) / sizeof((sig_descs_GPIOJ7_GPIOJ7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOJ7_GPIOJ7)), typeof(&(sig_descs_GPIOJ7_GPIOJ7)[0])))); }))), .descs = &(sig_descs_GPIOJ7_GPIOJ7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOJ7_GPIOJ7[] = { (&sig_expr_GPIOJ7_GPIOJ7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_79_GPIOJ7[(sizeof(sig_exprs_GPIOJ7_GPIOJ7) / sizeof((sig_exprs_GPIOJ7_GPIOJ7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOJ7_GPIOJ7)), typeof(&(sig_exprs_GPIOJ7_GPIOJ7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOJ7_GPIOJ7"))); static const struct aspeed_sig_expr **pin_exprs_79[] = { sig_exprs_79_DDCDAT, sig_exprs_79_DASHT3, sig_exprs_79_GPIOJ7, ((void *)0) }; static const struct aspeed_pin_desc pin_79 = { "79", (&pin_exprs_79[0]) };
static const int group_pins_DDCDAT[] = { 79 }; static const char *func_groups_DDCDAT[] = { "DDCDAT" };




static const struct aspeed_sig_desc sig_descs_SCL5_I2C5[] = { { 0, 0x90, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL5_I2C5 = { .signal = "SCL5", .function = "I2C5", .ndescs = (sizeof(sig_descs_SCL5_I2C5) / sizeof((sig_descs_SCL5_I2C5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL5_I2C5)), typeof(&(sig_descs_SCL5_I2C5)[0])))); }))), .descs = &(sig_descs_SCL5_I2C5)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL5_I2C5[] = { (&sig_expr_SCL5_I2C5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_80_SCL5[(sizeof(sig_exprs_SCL5_I2C5) / sizeof((sig_exprs_SCL5_I2C5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL5_I2C5)), typeof(&(sig_exprs_SCL5_I2C5)[0])))); })))] __attribute__((alias("sig_exprs_SCL5_I2C5")));
static const struct aspeed_sig_desc sig_descs_GPIOK0_GPIOK0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK0_GPIOK0 = { .signal = "GPIOK0", .function = "GPIOK0", .ndescs = (sizeof(sig_descs_GPIOK0_GPIOK0) / sizeof((sig_descs_GPIOK0_GPIOK0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK0_GPIOK0)), typeof(&(sig_descs_GPIOK0_GPIOK0)[0])))); }))), .descs = &(sig_descs_GPIOK0_GPIOK0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK0_GPIOK0[] = { (&sig_expr_GPIOK0_GPIOK0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_80_GPIOK0[(sizeof(sig_exprs_GPIOK0_GPIOK0) / sizeof((sig_exprs_GPIOK0_GPIOK0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK0_GPIOK0)), typeof(&(sig_exprs_GPIOK0_GPIOK0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK0_GPIOK0"))); static const struct aspeed_sig_expr **pin_exprs_80[] = { sig_exprs_80_SCL5, sig_exprs_80_GPIOK0, ((void *)0) }; static const struct aspeed_pin_desc pin_80 = { "80", (&pin_exprs_80[0]) };


static const struct aspeed_sig_desc sig_descs_SDA5_I2C5[] = { { 0, 0x90, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA5_I2C5 = { .signal = "SDA5", .function = "I2C5", .ndescs = (sizeof(sig_descs_SDA5_I2C5) / sizeof((sig_descs_SDA5_I2C5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA5_I2C5)), typeof(&(sig_descs_SDA5_I2C5)[0])))); }))), .descs = &(sig_descs_SDA5_I2C5)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA5_I2C5[] = { (&sig_expr_SDA5_I2C5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_81_SDA5[(sizeof(sig_exprs_SDA5_I2C5) / sizeof((sig_exprs_SDA5_I2C5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA5_I2C5)), typeof(&(sig_exprs_SDA5_I2C5)[0])))); })))] __attribute__((alias("sig_exprs_SDA5_I2C5")));
static const struct aspeed_sig_desc sig_descs_GPIOK1_GPIOK1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK1_GPIOK1 = { .signal = "GPIOK1", .function = "GPIOK1", .ndescs = (sizeof(sig_descs_GPIOK1_GPIOK1) / sizeof((sig_descs_GPIOK1_GPIOK1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK1_GPIOK1)), typeof(&(sig_descs_GPIOK1_GPIOK1)[0])))); }))), .descs = &(sig_descs_GPIOK1_GPIOK1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK1_GPIOK1[] = { (&sig_expr_GPIOK1_GPIOK1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_81_GPIOK1[(sizeof(sig_exprs_GPIOK1_GPIOK1) / sizeof((sig_exprs_GPIOK1_GPIOK1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK1_GPIOK1)), typeof(&(sig_exprs_GPIOK1_GPIOK1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK1_GPIOK1"))); static const struct aspeed_sig_expr **pin_exprs_81[] = { sig_exprs_81_SDA5, sig_exprs_81_GPIOK1, ((void *)0) }; static const struct aspeed_pin_desc pin_81 = { "81", (&pin_exprs_81[0]) };

static const int group_pins_I2C5[] = { 80, 81 }; static const char *func_groups_I2C5[] = { "I2C5" };




static const struct aspeed_sig_desc sig_descs_SCL6_I2C6[] = { { 0, 0x90, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL6_I2C6 = { .signal = "SCL6", .function = "I2C6", .ndescs = (sizeof(sig_descs_SCL6_I2C6) / sizeof((sig_descs_SCL6_I2C6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL6_I2C6)), typeof(&(sig_descs_SCL6_I2C6)[0])))); }))), .descs = &(sig_descs_SCL6_I2C6)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL6_I2C6[] = { (&sig_expr_SCL6_I2C6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_82_SCL6[(sizeof(sig_exprs_SCL6_I2C6) / sizeof((sig_exprs_SCL6_I2C6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL6_I2C6)), typeof(&(sig_exprs_SCL6_I2C6)[0])))); })))] __attribute__((alias("sig_exprs_SCL6_I2C6")));
static const struct aspeed_sig_desc sig_descs_GPIOK2_GPIOK2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK2_GPIOK2 = { .signal = "GPIOK2", .function = "GPIOK2", .ndescs = (sizeof(sig_descs_GPIOK2_GPIOK2) / sizeof((sig_descs_GPIOK2_GPIOK2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK2_GPIOK2)), typeof(&(sig_descs_GPIOK2_GPIOK2)[0])))); }))), .descs = &(sig_descs_GPIOK2_GPIOK2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK2_GPIOK2[] = { (&sig_expr_GPIOK2_GPIOK2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_82_GPIOK2[(sizeof(sig_exprs_GPIOK2_GPIOK2) / sizeof((sig_exprs_GPIOK2_GPIOK2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK2_GPIOK2)), typeof(&(sig_exprs_GPIOK2_GPIOK2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK2_GPIOK2"))); static const struct aspeed_sig_expr **pin_exprs_82[] = { sig_exprs_82_SCL6, sig_exprs_82_GPIOK2, ((void *)0) }; static const struct aspeed_pin_desc pin_82 = { "82", (&pin_exprs_82[0]) };


static const struct aspeed_sig_desc sig_descs_SDA6_I2C6[] = { { 0, 0x90, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA6_I2C6 = { .signal = "SDA6", .function = "I2C6", .ndescs = (sizeof(sig_descs_SDA6_I2C6) / sizeof((sig_descs_SDA6_I2C6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA6_I2C6)), typeof(&(sig_descs_SDA6_I2C6)[0])))); }))), .descs = &(sig_descs_SDA6_I2C6)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA6_I2C6[] = { (&sig_expr_SDA6_I2C6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_83_SDA6[(sizeof(sig_exprs_SDA6_I2C6) / sizeof((sig_exprs_SDA6_I2C6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA6_I2C6)), typeof(&(sig_exprs_SDA6_I2C6)[0])))); })))] __attribute__((alias("sig_exprs_SDA6_I2C6")));
static const struct aspeed_sig_desc sig_descs_GPIOK3_GPIOK3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK3_GPIOK3 = { .signal = "GPIOK3", .function = "GPIOK3", .ndescs = (sizeof(sig_descs_GPIOK3_GPIOK3) / sizeof((sig_descs_GPIOK3_GPIOK3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK3_GPIOK3)), typeof(&(sig_descs_GPIOK3_GPIOK3)[0])))); }))), .descs = &(sig_descs_GPIOK3_GPIOK3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK3_GPIOK3[] = { (&sig_expr_GPIOK3_GPIOK3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_83_GPIOK3[(sizeof(sig_exprs_GPIOK3_GPIOK3) / sizeof((sig_exprs_GPIOK3_GPIOK3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK3_GPIOK3)), typeof(&(sig_exprs_GPIOK3_GPIOK3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK3_GPIOK3"))); static const struct aspeed_sig_expr **pin_exprs_83[] = { sig_exprs_83_SDA6, sig_exprs_83_GPIOK3, ((void *)0) }; static const struct aspeed_pin_desc pin_83 = { "83", (&pin_exprs_83[0]) };

static const int group_pins_I2C6[] = { 82, 83 }; static const char *func_groups_I2C6[] = { "I2C6" };




static const struct aspeed_sig_desc sig_descs_SCL7_I2C7[] = { { 0, 0x90, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL7_I2C7 = { .signal = "SCL7", .function = "I2C7", .ndescs = (sizeof(sig_descs_SCL7_I2C7) / sizeof((sig_descs_SCL7_I2C7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL7_I2C7)), typeof(&(sig_descs_SCL7_I2C7)[0])))); }))), .descs = &(sig_descs_SCL7_I2C7)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL7_I2C7[] = { (&sig_expr_SCL7_I2C7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_84_SCL7[(sizeof(sig_exprs_SCL7_I2C7) / sizeof((sig_exprs_SCL7_I2C7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL7_I2C7)), typeof(&(sig_exprs_SCL7_I2C7)[0])))); })))] __attribute__((alias("sig_exprs_SCL7_I2C7")));
static const struct aspeed_sig_desc sig_descs_GPIOK4_GPIOK4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK4_GPIOK4 = { .signal = "GPIOK4", .function = "GPIOK4", .ndescs = (sizeof(sig_descs_GPIOK4_GPIOK4) / sizeof((sig_descs_GPIOK4_GPIOK4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK4_GPIOK4)), typeof(&(sig_descs_GPIOK4_GPIOK4)[0])))); }))), .descs = &(sig_descs_GPIOK4_GPIOK4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK4_GPIOK4[] = { (&sig_expr_GPIOK4_GPIOK4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_84_GPIOK4[(sizeof(sig_exprs_GPIOK4_GPIOK4) / sizeof((sig_exprs_GPIOK4_GPIOK4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK4_GPIOK4)), typeof(&(sig_exprs_GPIOK4_GPIOK4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK4_GPIOK4"))); static const struct aspeed_sig_expr **pin_exprs_84[] = { sig_exprs_84_SCL7, sig_exprs_84_GPIOK4, ((void *)0) }; static const struct aspeed_pin_desc pin_84 = { "84", (&pin_exprs_84[0]) };


static const struct aspeed_sig_desc sig_descs_SDA7_I2C7[] = { { 0, 0x90, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA7_I2C7 = { .signal = "SDA7", .function = "I2C7", .ndescs = (sizeof(sig_descs_SDA7_I2C7) / sizeof((sig_descs_SDA7_I2C7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA7_I2C7)), typeof(&(sig_descs_SDA7_I2C7)[0])))); }))), .descs = &(sig_descs_SDA7_I2C7)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA7_I2C7[] = { (&sig_expr_SDA7_I2C7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_85_SDA7[(sizeof(sig_exprs_SDA7_I2C7) / sizeof((sig_exprs_SDA7_I2C7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA7_I2C7)), typeof(&(sig_exprs_SDA7_I2C7)[0])))); })))] __attribute__((alias("sig_exprs_SDA7_I2C7")));
static const struct aspeed_sig_desc sig_descs_GPIOK5_GPIOK5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK5_GPIOK5 = { .signal = "GPIOK5", .function = "GPIOK5", .ndescs = (sizeof(sig_descs_GPIOK5_GPIOK5) / sizeof((sig_descs_GPIOK5_GPIOK5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK5_GPIOK5)), typeof(&(sig_descs_GPIOK5_GPIOK5)[0])))); }))), .descs = &(sig_descs_GPIOK5_GPIOK5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK5_GPIOK5[] = { (&sig_expr_GPIOK5_GPIOK5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_85_GPIOK5[(sizeof(sig_exprs_GPIOK5_GPIOK5) / sizeof((sig_exprs_GPIOK5_GPIOK5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK5_GPIOK5)), typeof(&(sig_exprs_GPIOK5_GPIOK5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK5_GPIOK5"))); static const struct aspeed_sig_expr **pin_exprs_85[] = { sig_exprs_85_SDA7, sig_exprs_85_GPIOK5, ((void *)0) }; static const struct aspeed_pin_desc pin_85 = { "85", (&pin_exprs_85[0]) };

static const int group_pins_I2C7[] = { 84, 85 }; static const char *func_groups_I2C7[] = { "I2C7" };




static const struct aspeed_sig_desc sig_descs_SCL8_I2C8[] = { { 0, 0x90, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL8_I2C8 = { .signal = "SCL8", .function = "I2C8", .ndescs = (sizeof(sig_descs_SCL8_I2C8) / sizeof((sig_descs_SCL8_I2C8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL8_I2C8)), typeof(&(sig_descs_SCL8_I2C8)[0])))); }))), .descs = &(sig_descs_SCL8_I2C8)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL8_I2C8[] = { (&sig_expr_SCL8_I2C8), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_86_SCL8[(sizeof(sig_exprs_SCL8_I2C8) / sizeof((sig_exprs_SCL8_I2C8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL8_I2C8)), typeof(&(sig_exprs_SCL8_I2C8)[0])))); })))] __attribute__((alias("sig_exprs_SCL8_I2C8")));
static const struct aspeed_sig_desc sig_descs_GPIOK6_GPIOK6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK6_GPIOK6 = { .signal = "GPIOK6", .function = "GPIOK6", .ndescs = (sizeof(sig_descs_GPIOK6_GPIOK6) / sizeof((sig_descs_GPIOK6_GPIOK6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK6_GPIOK6)), typeof(&(sig_descs_GPIOK6_GPIOK6)[0])))); }))), .descs = &(sig_descs_GPIOK6_GPIOK6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK6_GPIOK6[] = { (&sig_expr_GPIOK6_GPIOK6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_86_GPIOK6[(sizeof(sig_exprs_GPIOK6_GPIOK6) / sizeof((sig_exprs_GPIOK6_GPIOK6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK6_GPIOK6)), typeof(&(sig_exprs_GPIOK6_GPIOK6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK6_GPIOK6"))); static const struct aspeed_sig_expr **pin_exprs_86[] = { sig_exprs_86_SCL8, sig_exprs_86_GPIOK6, ((void *)0) }; static const struct aspeed_pin_desc pin_86 = { "86", (&pin_exprs_86[0]) };


static const struct aspeed_sig_desc sig_descs_SDA8_I2C8[] = { { 0, 0x90, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA8_I2C8 = { .signal = "SDA8", .function = "I2C8", .ndescs = (sizeof(sig_descs_SDA8_I2C8) / sizeof((sig_descs_SDA8_I2C8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA8_I2C8)), typeof(&(sig_descs_SDA8_I2C8)[0])))); }))), .descs = &(sig_descs_SDA8_I2C8)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA8_I2C8[] = { (&sig_expr_SDA8_I2C8), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_87_SDA8[(sizeof(sig_exprs_SDA8_I2C8) / sizeof((sig_exprs_SDA8_I2C8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA8_I2C8)), typeof(&(sig_exprs_SDA8_I2C8)[0])))); })))] __attribute__((alias("sig_exprs_SDA8_I2C8")));
static const struct aspeed_sig_desc sig_descs_GPIOK7_GPIOK7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOK7_GPIOK7 = { .signal = "GPIOK7", .function = "GPIOK7", .ndescs = (sizeof(sig_descs_GPIOK7_GPIOK7) / sizeof((sig_descs_GPIOK7_GPIOK7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOK7_GPIOK7)), typeof(&(sig_descs_GPIOK7_GPIOK7)[0])))); }))), .descs = &(sig_descs_GPIOK7_GPIOK7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOK7_GPIOK7[] = { (&sig_expr_GPIOK7_GPIOK7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_87_GPIOK7[(sizeof(sig_exprs_GPIOK7_GPIOK7) / sizeof((sig_exprs_GPIOK7_GPIOK7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOK7_GPIOK7)), typeof(&(sig_exprs_GPIOK7_GPIOK7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOK7_GPIOK7"))); static const struct aspeed_sig_expr **pin_exprs_87[] = { sig_exprs_87_SDA8, sig_exprs_87_GPIOK7, ((void *)0) }; static const struct aspeed_pin_desc pin_87 = { "87", (&pin_exprs_87[0]) };

static const int group_pins_I2C8[] = { 86, 87 }; static const char *func_groups_I2C8[] = { "I2C8" };


static const struct aspeed_sig_desc sig_descs_NCTS1_NCTS1[] = { { 0, 0x84, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NCTS1_NCTS1 = { .signal = "NCTS1", .function = "NCTS1", .ndescs = (sizeof(sig_descs_NCTS1_NCTS1) / sizeof((sig_descs_NCTS1_NCTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NCTS1_NCTS1)), typeof(&(sig_descs_NCTS1_NCTS1)[0])))); }))), .descs = &(sig_descs_NCTS1_NCTS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_NCTS1_NCTS1[] = { (&sig_expr_NCTS1_NCTS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_88_NCTS1[(sizeof(sig_exprs_NCTS1_NCTS1) / sizeof((sig_exprs_NCTS1_NCTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NCTS1_NCTS1)), typeof(&(sig_exprs_NCTS1_NCTS1)[0])))); })))] __attribute__((alias("sig_exprs_NCTS1_NCTS1"))); static const struct aspeed_sig_desc sig_descs_GPIOL0_GPIOL0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL0_GPIOL0 = { .signal = "GPIOL0", .function = "GPIOL0", .ndescs = (sizeof(sig_descs_GPIOL0_GPIOL0) / sizeof((sig_descs_GPIOL0_GPIOL0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL0_GPIOL0)), typeof(&(sig_descs_GPIOL0_GPIOL0)[0])))); }))), .descs = &(sig_descs_GPIOL0_GPIOL0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL0_GPIOL0[] = { (&sig_expr_GPIOL0_GPIOL0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_88_GPIOL0[(sizeof(sig_exprs_GPIOL0_GPIOL0) / sizeof((sig_exprs_GPIOL0_GPIOL0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL0_GPIOL0)), typeof(&(sig_exprs_GPIOL0_GPIOL0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL0_GPIOL0"))); static const struct aspeed_sig_expr **pin_exprs_88[] = { sig_exprs_88_NCTS1, sig_exprs_88_GPIOL0, ((void *)0) }; static const struct aspeed_pin_desc pin_88 = { "88", (&pin_exprs_88[0]) }; static const int group_pins_NCTS1[] = { 88 }; static const char *func_groups_NCTS1[] = { "NCTS1" };
# 702 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
static const struct aspeed_sig_desc sig_descs_VPIDE_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIDE_VPI24 = { .signal = "VPIDE", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIDE_VPI24) / sizeof((sig_descs_VPIDE_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIDE_VPI24)), typeof(&(sig_descs_VPIDE_VPI24)[0])))); }))), .descs = &(sig_descs_VPIDE_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIDE_VPI24[] = { (&sig_expr_VPIDE_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_89_VPIDE[(sizeof(sig_exprs_VPIDE_VPI24) / sizeof((sig_exprs_VPIDE_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIDE_VPI24)), typeof(&(sig_exprs_VPIDE_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIDE_VPI24")));
static const struct aspeed_sig_desc sig_descs_NDCD1_NDCD1[] = { { 0, 0x84, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NDCD1_NDCD1 = { .signal = "NDCD1", .function = "NDCD1", .ndescs = (sizeof(sig_descs_NDCD1_NDCD1) / sizeof((sig_descs_NDCD1_NDCD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDCD1_NDCD1)), typeof(&(sig_descs_NDCD1_NDCD1)[0])))); }))), .descs = &(sig_descs_NDCD1_NDCD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDCD1_NDCD1[] = { (&sig_expr_NDCD1_NDCD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_89_NDCD1[(sizeof(sig_exprs_NDCD1_NDCD1) / sizeof((sig_exprs_NDCD1_NDCD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDCD1_NDCD1)), typeof(&(sig_exprs_NDCD1_NDCD1)[0])))); })))] __attribute__((alias("sig_exprs_NDCD1_NDCD1")));
static const struct aspeed_sig_desc sig_descs_GPIOL1_GPIOL1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL1_GPIOL1 = { .signal = "GPIOL1", .function = "GPIOL1", .ndescs = (sizeof(sig_descs_GPIOL1_GPIOL1) / sizeof((sig_descs_GPIOL1_GPIOL1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL1_GPIOL1)), typeof(&(sig_descs_GPIOL1_GPIOL1)[0])))); }))), .descs = &(sig_descs_GPIOL1_GPIOL1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL1_GPIOL1[] = { (&sig_expr_GPIOL1_GPIOL1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_89_GPIOL1[(sizeof(sig_exprs_GPIOL1_GPIOL1) / sizeof((sig_exprs_GPIOL1_GPIOL1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL1_GPIOL1)), typeof(&(sig_exprs_GPIOL1_GPIOL1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL1_GPIOL1"))); static const struct aspeed_sig_expr **pin_exprs_89[] = { sig_exprs_89_VPIDE, sig_exprs_89_NDCD1, sig_exprs_89_GPIOL1, ((void *)0) }; static const struct aspeed_pin_desc pin_89 = { "89", (&pin_exprs_89[0]) };
static const int group_pins_NDCD1[] = { 89 }; static const char *func_groups_NDCD1[] = { "NDCD1" };



static const struct aspeed_sig_desc sig_descs_DASHU1_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHU1_VPI24 = { .signal = "DASHU1", .function = "VPI24", .ndescs = (sizeof(sig_descs_DASHU1_VPI24) / sizeof((sig_descs_DASHU1_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHU1_VPI24)), typeof(&(sig_descs_DASHU1_VPI24)[0])))); }))), .descs = &(sig_descs_DASHU1_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHU1_VPI24[] = { (&sig_expr_DASHU1_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_90_DASHU1[(sizeof(sig_exprs_DASHU1_VPI24) / sizeof((sig_exprs_DASHU1_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHU1_VPI24)), typeof(&(sig_exprs_DASHU1_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_DASHU1_VPI24")));
static const struct aspeed_sig_desc sig_descs_NDSR1_NDSR1[] = { { 0, 0x84, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NDSR1_NDSR1 = { .signal = "NDSR1", .function = "NDSR1", .ndescs = (sizeof(sig_descs_NDSR1_NDSR1) / sizeof((sig_descs_NDSR1_NDSR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDSR1_NDSR1)), typeof(&(sig_descs_NDSR1_NDSR1)[0])))); }))), .descs = &(sig_descs_NDSR1_NDSR1)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDSR1_NDSR1[] = { (&sig_expr_NDSR1_NDSR1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_90_NDSR1[(sizeof(sig_exprs_NDSR1_NDSR1) / sizeof((sig_exprs_NDSR1_NDSR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDSR1_NDSR1)), typeof(&(sig_exprs_NDSR1_NDSR1)[0])))); })))] __attribute__((alias("sig_exprs_NDSR1_NDSR1")));
static const struct aspeed_sig_desc sig_descs_GPIOL2_GPIOL2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL2_GPIOL2 = { .signal = "GPIOL2", .function = "GPIOL2", .ndescs = (sizeof(sig_descs_GPIOL2_GPIOL2) / sizeof((sig_descs_GPIOL2_GPIOL2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL2_GPIOL2)), typeof(&(sig_descs_GPIOL2_GPIOL2)[0])))); }))), .descs = &(sig_descs_GPIOL2_GPIOL2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL2_GPIOL2[] = { (&sig_expr_GPIOL2_GPIOL2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_90_GPIOL2[(sizeof(sig_exprs_GPIOL2_GPIOL2) / sizeof((sig_exprs_GPIOL2_GPIOL2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL2_GPIOL2)), typeof(&(sig_exprs_GPIOL2_GPIOL2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL2_GPIOL2"))); static const struct aspeed_sig_expr **pin_exprs_90[] = { sig_exprs_90_DASHU1, sig_exprs_90_NDSR1, sig_exprs_90_GPIOL2, ((void *)0) }; static const struct aspeed_pin_desc pin_90 = { "90", (&pin_exprs_90[0]) };
static const int group_pins_NDSR1[] = { 90 }; static const char *func_groups_NDSR1[] = { "NDSR1" };



static const struct aspeed_sig_desc sig_descs_VPIHS_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIHS_VPI24 = { .signal = "VPIHS", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIHS_VPI24) / sizeof((sig_descs_VPIHS_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIHS_VPI24)), typeof(&(sig_descs_VPIHS_VPI24)[0])))); }))), .descs = &(sig_descs_VPIHS_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIHS_VPI24[] = { (&sig_expr_VPIHS_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_91_VPIHS[(sizeof(sig_exprs_VPIHS_VPI24) / sizeof((sig_exprs_VPIHS_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIHS_VPI24)), typeof(&(sig_exprs_VPIHS_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIHS_VPI24")));
static const struct aspeed_sig_desc sig_descs_NRI1_NRI1[] = { { 0, 0x84, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NRI1_NRI1 = { .signal = "NRI1", .function = "NRI1", .ndescs = (sizeof(sig_descs_NRI1_NRI1) / sizeof((sig_descs_NRI1_NRI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRI1_NRI1)), typeof(&(sig_descs_NRI1_NRI1)[0])))); }))), .descs = &(sig_descs_NRI1_NRI1)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRI1_NRI1[] = { (&sig_expr_NRI1_NRI1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_91_NRI1[(sizeof(sig_exprs_NRI1_NRI1) / sizeof((sig_exprs_NRI1_NRI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRI1_NRI1)), typeof(&(sig_exprs_NRI1_NRI1)[0])))); })))] __attribute__((alias("sig_exprs_NRI1_NRI1")));
static const struct aspeed_sig_desc sig_descs_GPIOL3_GPIOL3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL3_GPIOL3 = { .signal = "GPIOL3", .function = "GPIOL3", .ndescs = (sizeof(sig_descs_GPIOL3_GPIOL3) / sizeof((sig_descs_GPIOL3_GPIOL3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL3_GPIOL3)), typeof(&(sig_descs_GPIOL3_GPIOL3)[0])))); }))), .descs = &(sig_descs_GPIOL3_GPIOL3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL3_GPIOL3[] = { (&sig_expr_GPIOL3_GPIOL3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_91_GPIOL3[(sizeof(sig_exprs_GPIOL3_GPIOL3) / sizeof((sig_exprs_GPIOL3_GPIOL3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL3_GPIOL3)), typeof(&(sig_exprs_GPIOL3_GPIOL3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL3_GPIOL3"))); static const struct aspeed_sig_expr **pin_exprs_91[] = { sig_exprs_91_VPIHS, sig_exprs_91_NRI1, sig_exprs_91_GPIOL3, ((void *)0) }; static const struct aspeed_pin_desc pin_91 = { "91", (&pin_exprs_91[0]) };
static const int group_pins_NRI1[] = { 91 }; static const char *func_groups_NRI1[] = { "NRI1" };



static const struct aspeed_sig_desc sig_descs_VPIVS_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIVS_VPI24 = { .signal = "VPIVS", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIVS_VPI24) / sizeof((sig_descs_VPIVS_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIVS_VPI24)), typeof(&(sig_descs_VPIVS_VPI24)[0])))); }))), .descs = &(sig_descs_VPIVS_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIVS_VPI24[] = { (&sig_expr_VPIVS_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_92_VPIVS[(sizeof(sig_exprs_VPIVS_VPI24) / sizeof((sig_exprs_VPIVS_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIVS_VPI24)), typeof(&(sig_exprs_VPIVS_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIVS_VPI24")));
static const struct aspeed_sig_desc sig_descs_NDTR1_NDTR1[] = { { 0, 0x84, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NDTR1_NDTR1 = { .signal = "NDTR1", .function = "NDTR1", .ndescs = (sizeof(sig_descs_NDTR1_NDTR1) / sizeof((sig_descs_NDTR1_NDTR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDTR1_NDTR1)), typeof(&(sig_descs_NDTR1_NDTR1)[0])))); }))), .descs = &(sig_descs_NDTR1_NDTR1)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDTR1_NDTR1[] = { (&sig_expr_NDTR1_NDTR1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_92_NDTR1[(sizeof(sig_exprs_NDTR1_NDTR1) / sizeof((sig_exprs_NDTR1_NDTR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDTR1_NDTR1)), typeof(&(sig_exprs_NDTR1_NDTR1)[0])))); })))] __attribute__((alias("sig_exprs_NDTR1_NDTR1")));
static const struct aspeed_sig_desc sig_descs_GPIOL4_GPIOL4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL4_GPIOL4 = { .signal = "GPIOL4", .function = "GPIOL4", .ndescs = (sizeof(sig_descs_GPIOL4_GPIOL4) / sizeof((sig_descs_GPIOL4_GPIOL4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL4_GPIOL4)), typeof(&(sig_descs_GPIOL4_GPIOL4)[0])))); }))), .descs = &(sig_descs_GPIOL4_GPIOL4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL4_GPIOL4[] = { (&sig_expr_GPIOL4_GPIOL4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_92_GPIOL4[(sizeof(sig_exprs_GPIOL4_GPIOL4) / sizeof((sig_exprs_GPIOL4_GPIOL4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL4_GPIOL4)), typeof(&(sig_exprs_GPIOL4_GPIOL4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL4_GPIOL4"))); static const struct aspeed_sig_expr **pin_exprs_92[] = { sig_exprs_92_VPIVS, sig_exprs_92_NDTR1, sig_exprs_92_GPIOL4, ((void *)0) }; static const struct aspeed_pin_desc pin_92 = { "92", (&pin_exprs_92[0]) };
static const int group_pins_NDTR1[] = { 92 }; static const char *func_groups_NDTR1[] = { "NDTR1" };



static const struct aspeed_sig_desc sig_descs_VPICLK_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPICLK_VPI24 = { .signal = "VPICLK", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPICLK_VPI24) / sizeof((sig_descs_VPICLK_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPICLK_VPI24)), typeof(&(sig_descs_VPICLK_VPI24)[0])))); }))), .descs = &(sig_descs_VPICLK_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPICLK_VPI24[] = { (&sig_expr_VPICLK_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_93_VPICLK[(sizeof(sig_exprs_VPICLK_VPI24) / sizeof((sig_exprs_VPICLK_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPICLK_VPI24)), typeof(&(sig_exprs_VPICLK_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPICLK_VPI24")));
static const struct aspeed_sig_desc sig_descs_NRTS1_NRTS1[] = { { 0, 0x84, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NRTS1_NRTS1 = { .signal = "NRTS1", .function = "NRTS1", .ndescs = (sizeof(sig_descs_NRTS1_NRTS1) / sizeof((sig_descs_NRTS1_NRTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRTS1_NRTS1)), typeof(&(sig_descs_NRTS1_NRTS1)[0])))); }))), .descs = &(sig_descs_NRTS1_NRTS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRTS1_NRTS1[] = { (&sig_expr_NRTS1_NRTS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_93_NRTS1[(sizeof(sig_exprs_NRTS1_NRTS1) / sizeof((sig_exprs_NRTS1_NRTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRTS1_NRTS1)), typeof(&(sig_exprs_NRTS1_NRTS1)[0])))); })))] __attribute__((alias("sig_exprs_NRTS1_NRTS1")));
static const struct aspeed_sig_desc sig_descs_GPIOL5_GPIOL5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL5_GPIOL5 = { .signal = "GPIOL5", .function = "GPIOL5", .ndescs = (sizeof(sig_descs_GPIOL5_GPIOL5) / sizeof((sig_descs_GPIOL5_GPIOL5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL5_GPIOL5)), typeof(&(sig_descs_GPIOL5_GPIOL5)[0])))); }))), .descs = &(sig_descs_GPIOL5_GPIOL5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL5_GPIOL5[] = { (&sig_expr_GPIOL5_GPIOL5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_93_GPIOL5[(sizeof(sig_exprs_GPIOL5_GPIOL5) / sizeof((sig_exprs_GPIOL5_GPIOL5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL5_GPIOL5)), typeof(&(sig_exprs_GPIOL5_GPIOL5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL5_GPIOL5"))); static const struct aspeed_sig_expr **pin_exprs_93[] = { sig_exprs_93_VPICLK, sig_exprs_93_NRTS1, sig_exprs_93_GPIOL5, ((void *)0) }; static const struct aspeed_pin_desc pin_93 = { "93", (&pin_exprs_93[0]) };
static const int group_pins_NRTS1[] = { 93 }; static const char *func_groups_NRTS1[] = { "NRTS1" };



static const struct aspeed_sig_desc sig_descs_DASHV1_DASHV1[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x84, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHV1_DASHV1 = { .signal = "DASHV1", .function = "DASHV1", .ndescs = (sizeof(sig_descs_DASHV1_DASHV1) / sizeof((sig_descs_DASHV1_DASHV1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHV1_DASHV1)), typeof(&(sig_descs_DASHV1_DASHV1)[0])))); }))), .descs = &(sig_descs_DASHV1_DASHV1)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHV1_DASHV1[] = { (&sig_expr_DASHV1_DASHV1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_94_DASHV1[(sizeof(sig_exprs_DASHV1_DASHV1) / sizeof((sig_exprs_DASHV1_DASHV1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHV1_DASHV1)), typeof(&(sig_exprs_DASHV1_DASHV1)[0])))); })))] __attribute__((alias("sig_exprs_DASHV1_DASHV1")));
static const struct aspeed_sig_desc sig_descs_TXD1_TXD1[] = { { 0, 0x84, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_TXD1_TXD1 = { .signal = "TXD1", .function = "TXD1", .ndescs = (sizeof(sig_descs_TXD1_TXD1) / sizeof((sig_descs_TXD1_TXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TXD1_TXD1)), typeof(&(sig_descs_TXD1_TXD1)[0])))); }))), .descs = &(sig_descs_TXD1_TXD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_TXD1_TXD1[] = { (&sig_expr_TXD1_TXD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_94_TXD1[(sizeof(sig_exprs_TXD1_TXD1) / sizeof((sig_exprs_TXD1_TXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TXD1_TXD1)), typeof(&(sig_exprs_TXD1_TXD1)[0])))); })))] __attribute__((alias("sig_exprs_TXD1_TXD1")));
static const struct aspeed_sig_desc sig_descs_GPIOL6_GPIOL6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL6_GPIOL6 = { .signal = "GPIOL6", .function = "GPIOL6", .ndescs = (sizeof(sig_descs_GPIOL6_GPIOL6) / sizeof((sig_descs_GPIOL6_GPIOL6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL6_GPIOL6)), typeof(&(sig_descs_GPIOL6_GPIOL6)[0])))); }))), .descs = &(sig_descs_GPIOL6_GPIOL6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL6_GPIOL6[] = { (&sig_expr_GPIOL6_GPIOL6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_94_GPIOL6[(sizeof(sig_exprs_GPIOL6_GPIOL6) / sizeof((sig_exprs_GPIOL6_GPIOL6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL6_GPIOL6)), typeof(&(sig_exprs_GPIOL6_GPIOL6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL6_GPIOL6"))); static const struct aspeed_sig_expr **pin_exprs_94[] = { sig_exprs_94_DASHV1, sig_exprs_94_TXD1, sig_exprs_94_GPIOL6, ((void *)0) }; static const struct aspeed_pin_desc pin_94 = { "94", (&pin_exprs_94[0]) };
static const int group_pins_TXD1[] = { 94 }; static const char *func_groups_TXD1[] = { "TXD1" };



static const struct aspeed_sig_desc sig_descs_DASHW1_DASHW1[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x84, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHW1_DASHW1 = { .signal = "DASHW1", .function = "DASHW1", .ndescs = (sizeof(sig_descs_DASHW1_DASHW1) / sizeof((sig_descs_DASHW1_DASHW1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHW1_DASHW1)), typeof(&(sig_descs_DASHW1_DASHW1)[0])))); }))), .descs = &(sig_descs_DASHW1_DASHW1)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHW1_DASHW1[] = { (&sig_expr_DASHW1_DASHW1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_95_DASHW1[(sizeof(sig_exprs_DASHW1_DASHW1) / sizeof((sig_exprs_DASHW1_DASHW1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHW1_DASHW1)), typeof(&(sig_exprs_DASHW1_DASHW1)[0])))); })))] __attribute__((alias("sig_exprs_DASHW1_DASHW1")));
static const struct aspeed_sig_desc sig_descs_RXD1_RXD1[] = { { 0, 0x84, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_RXD1_RXD1 = { .signal = "RXD1", .function = "RXD1", .ndescs = (sizeof(sig_descs_RXD1_RXD1) / sizeof((sig_descs_RXD1_RXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RXD1_RXD1)), typeof(&(sig_descs_RXD1_RXD1)[0])))); }))), .descs = &(sig_descs_RXD1_RXD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RXD1_RXD1[] = { (&sig_expr_RXD1_RXD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_95_RXD1[(sizeof(sig_exprs_RXD1_RXD1) / sizeof((sig_exprs_RXD1_RXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RXD1_RXD1)), typeof(&(sig_exprs_RXD1_RXD1)[0])))); })))] __attribute__((alias("sig_exprs_RXD1_RXD1")));
static const struct aspeed_sig_desc sig_descs_GPIOL7_GPIOL7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOL7_GPIOL7 = { .signal = "GPIOL7", .function = "GPIOL7", .ndescs = (sizeof(sig_descs_GPIOL7_GPIOL7) / sizeof((sig_descs_GPIOL7_GPIOL7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOL7_GPIOL7)), typeof(&(sig_descs_GPIOL7_GPIOL7)[0])))); }))), .descs = &(sig_descs_GPIOL7_GPIOL7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOL7_GPIOL7[] = { (&sig_expr_GPIOL7_GPIOL7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_95_GPIOL7[(sizeof(sig_exprs_GPIOL7_GPIOL7) / sizeof((sig_exprs_GPIOL7_GPIOL7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOL7_GPIOL7)), typeof(&(sig_exprs_GPIOL7_GPIOL7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOL7_GPIOL7"))); static const struct aspeed_sig_expr **pin_exprs_95[] = { sig_exprs_95_DASHW1, sig_exprs_95_RXD1, sig_exprs_95_GPIOL7, ((void *)0) }; static const struct aspeed_pin_desc pin_95 = { "95", (&pin_exprs_95[0]) };
static const int group_pins_RXD1[] = { 95 }; static const char *func_groups_RXD1[] = { "RXD1" };



static const struct aspeed_sig_desc sig_descs_VPIB2_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB2_VPI24 = { .signal = "VPIB2", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB2_VPI24) / sizeof((sig_descs_VPIB2_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB2_VPI24)), typeof(&(sig_descs_VPIB2_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB2_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB2_VPI24[] = { (&sig_expr_VPIB2_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_96_VPIB2[(sizeof(sig_exprs_VPIB2_VPI24) / sizeof((sig_exprs_VPIB2_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB2_VPI24)), typeof(&(sig_exprs_VPIB2_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB2_VPI24")));
static const struct aspeed_sig_desc sig_descs_NCTS2_NCTS2[] = { { 0, 0x84, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NCTS2_NCTS2 = { .signal = "NCTS2", .function = "NCTS2", .ndescs = (sizeof(sig_descs_NCTS2_NCTS2) / sizeof((sig_descs_NCTS2_NCTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NCTS2_NCTS2)), typeof(&(sig_descs_NCTS2_NCTS2)[0])))); }))), .descs = &(sig_descs_NCTS2_NCTS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_NCTS2_NCTS2[] = { (&sig_expr_NCTS2_NCTS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_96_NCTS2[(sizeof(sig_exprs_NCTS2_NCTS2) / sizeof((sig_exprs_NCTS2_NCTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NCTS2_NCTS2)), typeof(&(sig_exprs_NCTS2_NCTS2)[0])))); })))] __attribute__((alias("sig_exprs_NCTS2_NCTS2")));
static const struct aspeed_sig_desc sig_descs_GPIOM0_GPIOM0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM0_GPIOM0 = { .signal = "GPIOM0", .function = "GPIOM0", .ndescs = (sizeof(sig_descs_GPIOM0_GPIOM0) / sizeof((sig_descs_GPIOM0_GPIOM0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM0_GPIOM0)), typeof(&(sig_descs_GPIOM0_GPIOM0)[0])))); }))), .descs = &(sig_descs_GPIOM0_GPIOM0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM0_GPIOM0[] = { (&sig_expr_GPIOM0_GPIOM0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_96_GPIOM0[(sizeof(sig_exprs_GPIOM0_GPIOM0) / sizeof((sig_exprs_GPIOM0_GPIOM0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM0_GPIOM0)), typeof(&(sig_exprs_GPIOM0_GPIOM0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM0_GPIOM0"))); static const struct aspeed_sig_expr **pin_exprs_96[] = { sig_exprs_96_VPIB2, sig_exprs_96_NCTS2, sig_exprs_96_GPIOM0, ((void *)0) }; static const struct aspeed_pin_desc pin_96 = { "96", (&pin_exprs_96[0]) };
static const int group_pins_NCTS2[] = { 96 }; static const char *func_groups_NCTS2[] = { "NCTS2" };



static const struct aspeed_sig_desc sig_descs_VPIB3_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB3_VPI24 = { .signal = "VPIB3", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB3_VPI24) / sizeof((sig_descs_VPIB3_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB3_VPI24)), typeof(&(sig_descs_VPIB3_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB3_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB3_VPI24[] = { (&sig_expr_VPIB3_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_97_VPIB3[(sizeof(sig_exprs_VPIB3_VPI24) / sizeof((sig_exprs_VPIB3_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB3_VPI24)), typeof(&(sig_exprs_VPIB3_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB3_VPI24")));
static const struct aspeed_sig_desc sig_descs_NDCD2_NDCD2[] = { { 0, 0x84, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NDCD2_NDCD2 = { .signal = "NDCD2", .function = "NDCD2", .ndescs = (sizeof(sig_descs_NDCD2_NDCD2) / sizeof((sig_descs_NDCD2_NDCD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDCD2_NDCD2)), typeof(&(sig_descs_NDCD2_NDCD2)[0])))); }))), .descs = &(sig_descs_NDCD2_NDCD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDCD2_NDCD2[] = { (&sig_expr_NDCD2_NDCD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_97_NDCD2[(sizeof(sig_exprs_NDCD2_NDCD2) / sizeof((sig_exprs_NDCD2_NDCD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDCD2_NDCD2)), typeof(&(sig_exprs_NDCD2_NDCD2)[0])))); })))] __attribute__((alias("sig_exprs_NDCD2_NDCD2")));
static const struct aspeed_sig_desc sig_descs_GPIOM1_GPIOM1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM1_GPIOM1 = { .signal = "GPIOM1", .function = "GPIOM1", .ndescs = (sizeof(sig_descs_GPIOM1_GPIOM1) / sizeof((sig_descs_GPIOM1_GPIOM1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM1_GPIOM1)), typeof(&(sig_descs_GPIOM1_GPIOM1)[0])))); }))), .descs = &(sig_descs_GPIOM1_GPIOM1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM1_GPIOM1[] = { (&sig_expr_GPIOM1_GPIOM1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_97_GPIOM1[(sizeof(sig_exprs_GPIOM1_GPIOM1) / sizeof((sig_exprs_GPIOM1_GPIOM1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM1_GPIOM1)), typeof(&(sig_exprs_GPIOM1_GPIOM1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM1_GPIOM1"))); static const struct aspeed_sig_expr **pin_exprs_97[] = { sig_exprs_97_VPIB3, sig_exprs_97_NDCD2, sig_exprs_97_GPIOM1, ((void *)0) }; static const struct aspeed_pin_desc pin_97 = { "97", (&pin_exprs_97[0]) };
static const int group_pins_NDCD2[] = { 97 }; static const char *func_groups_NDCD2[] = { "NDCD2" };



static const struct aspeed_sig_desc sig_descs_VPIB4_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB4_VPI24 = { .signal = "VPIB4", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB4_VPI24) / sizeof((sig_descs_VPIB4_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB4_VPI24)), typeof(&(sig_descs_VPIB4_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB4_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB4_VPI24[] = { (&sig_expr_VPIB4_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_98_VPIB4[(sizeof(sig_exprs_VPIB4_VPI24) / sizeof((sig_exprs_VPIB4_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB4_VPI24)), typeof(&(sig_exprs_VPIB4_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB4_VPI24")));
static const struct aspeed_sig_desc sig_descs_NDSR2_NDSR2[] = { { 0, 0x84, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NDSR2_NDSR2 = { .signal = "NDSR2", .function = "NDSR2", .ndescs = (sizeof(sig_descs_NDSR2_NDSR2) / sizeof((sig_descs_NDSR2_NDSR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDSR2_NDSR2)), typeof(&(sig_descs_NDSR2_NDSR2)[0])))); }))), .descs = &(sig_descs_NDSR2_NDSR2)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDSR2_NDSR2[] = { (&sig_expr_NDSR2_NDSR2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_98_NDSR2[(sizeof(sig_exprs_NDSR2_NDSR2) / sizeof((sig_exprs_NDSR2_NDSR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDSR2_NDSR2)), typeof(&(sig_exprs_NDSR2_NDSR2)[0])))); })))] __attribute__((alias("sig_exprs_NDSR2_NDSR2")));
static const struct aspeed_sig_desc sig_descs_GPIOM2_GPIOM2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM2_GPIOM2 = { .signal = "GPIOM2", .function = "GPIOM2", .ndescs = (sizeof(sig_descs_GPIOM2_GPIOM2) / sizeof((sig_descs_GPIOM2_GPIOM2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM2_GPIOM2)), typeof(&(sig_descs_GPIOM2_GPIOM2)[0])))); }))), .descs = &(sig_descs_GPIOM2_GPIOM2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM2_GPIOM2[] = { (&sig_expr_GPIOM2_GPIOM2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_98_GPIOM2[(sizeof(sig_exprs_GPIOM2_GPIOM2) / sizeof((sig_exprs_GPIOM2_GPIOM2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM2_GPIOM2)), typeof(&(sig_exprs_GPIOM2_GPIOM2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM2_GPIOM2"))); static const struct aspeed_sig_expr **pin_exprs_98[] = { sig_exprs_98_VPIB4, sig_exprs_98_NDSR2, sig_exprs_98_GPIOM2, ((void *)0) }; static const struct aspeed_pin_desc pin_98 = { "98", (&pin_exprs_98[0]) };
static const int group_pins_NDSR2[] = { 98 }; static const char *func_groups_NDSR2[] = { "NDSR2" };



static const struct aspeed_sig_desc sig_descs_VPIB5_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB5_VPI24 = { .signal = "VPIB5", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB5_VPI24) / sizeof((sig_descs_VPIB5_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB5_VPI24)), typeof(&(sig_descs_VPIB5_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB5_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB5_VPI24[] = { (&sig_expr_VPIB5_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_99_VPIB5[(sizeof(sig_exprs_VPIB5_VPI24) / sizeof((sig_exprs_VPIB5_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB5_VPI24)), typeof(&(sig_exprs_VPIB5_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB5_VPI24")));
static const struct aspeed_sig_desc sig_descs_NRI2_NRI2[] = { { 0, 0x84, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NRI2_NRI2 = { .signal = "NRI2", .function = "NRI2", .ndescs = (sizeof(sig_descs_NRI2_NRI2) / sizeof((sig_descs_NRI2_NRI2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRI2_NRI2)), typeof(&(sig_descs_NRI2_NRI2)[0])))); }))), .descs = &(sig_descs_NRI2_NRI2)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRI2_NRI2[] = { (&sig_expr_NRI2_NRI2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_99_NRI2[(sizeof(sig_exprs_NRI2_NRI2) / sizeof((sig_exprs_NRI2_NRI2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRI2_NRI2)), typeof(&(sig_exprs_NRI2_NRI2)[0])))); })))] __attribute__((alias("sig_exprs_NRI2_NRI2")));
static const struct aspeed_sig_desc sig_descs_GPIOM3_GPIOM3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM3_GPIOM3 = { .signal = "GPIOM3", .function = "GPIOM3", .ndescs = (sizeof(sig_descs_GPIOM3_GPIOM3) / sizeof((sig_descs_GPIOM3_GPIOM3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM3_GPIOM3)), typeof(&(sig_descs_GPIOM3_GPIOM3)[0])))); }))), .descs = &(sig_descs_GPIOM3_GPIOM3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM3_GPIOM3[] = { (&sig_expr_GPIOM3_GPIOM3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_99_GPIOM3[(sizeof(sig_exprs_GPIOM3_GPIOM3) / sizeof((sig_exprs_GPIOM3_GPIOM3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM3_GPIOM3)), typeof(&(sig_exprs_GPIOM3_GPIOM3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM3_GPIOM3"))); static const struct aspeed_sig_expr **pin_exprs_99[] = { sig_exprs_99_VPIB5, sig_exprs_99_NRI2, sig_exprs_99_GPIOM3, ((void *)0) }; static const struct aspeed_pin_desc pin_99 = { "99", (&pin_exprs_99[0]) };
static const int group_pins_NRI2[] = { 99 }; static const char *func_groups_NRI2[] = { "NRI2" };



static const struct aspeed_sig_desc sig_descs_VPIB6_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB6_VPI24 = { .signal = "VPIB6", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB6_VPI24) / sizeof((sig_descs_VPIB6_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB6_VPI24)), typeof(&(sig_descs_VPIB6_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB6_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB6_VPI24[] = { (&sig_expr_VPIB6_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_100_VPIB6[(sizeof(sig_exprs_VPIB6_VPI24) / sizeof((sig_exprs_VPIB6_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB6_VPI24)), typeof(&(sig_exprs_VPIB6_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB6_VPI24")));
static const struct aspeed_sig_desc sig_descs_NDTR2_NDTR2[] = { { 0, 0x84, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NDTR2_NDTR2 = { .signal = "NDTR2", .function = "NDTR2", .ndescs = (sizeof(sig_descs_NDTR2_NDTR2) / sizeof((sig_descs_NDTR2_NDTR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NDTR2_NDTR2)), typeof(&(sig_descs_NDTR2_NDTR2)[0])))); }))), .descs = &(sig_descs_NDTR2_NDTR2)[0], }; static const struct aspeed_sig_expr *sig_exprs_NDTR2_NDTR2[] = { (&sig_expr_NDTR2_NDTR2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_100_NDTR2[(sizeof(sig_exprs_NDTR2_NDTR2) / sizeof((sig_exprs_NDTR2_NDTR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NDTR2_NDTR2)), typeof(&(sig_exprs_NDTR2_NDTR2)[0])))); })))] __attribute__((alias("sig_exprs_NDTR2_NDTR2")));
static const struct aspeed_sig_desc sig_descs_GPIOM4_GPIOM4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM4_GPIOM4 = { .signal = "GPIOM4", .function = "GPIOM4", .ndescs = (sizeof(sig_descs_GPIOM4_GPIOM4) / sizeof((sig_descs_GPIOM4_GPIOM4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM4_GPIOM4)), typeof(&(sig_descs_GPIOM4_GPIOM4)[0])))); }))), .descs = &(sig_descs_GPIOM4_GPIOM4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM4_GPIOM4[] = { (&sig_expr_GPIOM4_GPIOM4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_100_GPIOM4[(sizeof(sig_exprs_GPIOM4_GPIOM4) / sizeof((sig_exprs_GPIOM4_GPIOM4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM4_GPIOM4)), typeof(&(sig_exprs_GPIOM4_GPIOM4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM4_GPIOM4"))); static const struct aspeed_sig_expr **pin_exprs_100[] = { sig_exprs_100_VPIB6, sig_exprs_100_NDTR2, sig_exprs_100_GPIOM4, ((void *)0) }; static const struct aspeed_pin_desc pin_100 = { "100", (&pin_exprs_100[0]) };
static const int group_pins_NDTR2[] = { 100 }; static const char *func_groups_NDTR2[] = { "NDTR2" };



static const struct aspeed_sig_desc sig_descs_VPIB7_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB7_VPI24 = { .signal = "VPIB7", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB7_VPI24) / sizeof((sig_descs_VPIB7_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB7_VPI24)), typeof(&(sig_descs_VPIB7_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB7_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB7_VPI24[] = { (&sig_expr_VPIB7_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_101_VPIB7[(sizeof(sig_exprs_VPIB7_VPI24) / sizeof((sig_exprs_VPIB7_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB7_VPI24)), typeof(&(sig_exprs_VPIB7_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB7_VPI24")));
static const struct aspeed_sig_desc sig_descs_NRTS2_NRTS2[] = { { 0, 0x84, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_NRTS2_NRTS2 = { .signal = "NRTS2", .function = "NRTS2", .ndescs = (sizeof(sig_descs_NRTS2_NRTS2) / sizeof((sig_descs_NRTS2_NRTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NRTS2_NRTS2)), typeof(&(sig_descs_NRTS2_NRTS2)[0])))); }))), .descs = &(sig_descs_NRTS2_NRTS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_NRTS2_NRTS2[] = { (&sig_expr_NRTS2_NRTS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_101_NRTS2[(sizeof(sig_exprs_NRTS2_NRTS2) / sizeof((sig_exprs_NRTS2_NRTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NRTS2_NRTS2)), typeof(&(sig_exprs_NRTS2_NRTS2)[0])))); })))] __attribute__((alias("sig_exprs_NRTS2_NRTS2")));
static const struct aspeed_sig_desc sig_descs_GPIOM5_GPIOM5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM5_GPIOM5 = { .signal = "GPIOM5", .function = "GPIOM5", .ndescs = (sizeof(sig_descs_GPIOM5_GPIOM5) / sizeof((sig_descs_GPIOM5_GPIOM5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM5_GPIOM5)), typeof(&(sig_descs_GPIOM5_GPIOM5)[0])))); }))), .descs = &(sig_descs_GPIOM5_GPIOM5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM5_GPIOM5[] = { (&sig_expr_GPIOM5_GPIOM5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_101_GPIOM5[(sizeof(sig_exprs_GPIOM5_GPIOM5) / sizeof((sig_exprs_GPIOM5_GPIOM5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM5_GPIOM5)), typeof(&(sig_exprs_GPIOM5_GPIOM5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM5_GPIOM5"))); static const struct aspeed_sig_expr **pin_exprs_101[] = { sig_exprs_101_VPIB7, sig_exprs_101_NRTS2, sig_exprs_101_GPIOM5, ((void *)0) }; static const struct aspeed_pin_desc pin_101 = { "101", (&pin_exprs_101[0]) };
static const int group_pins_NRTS2[] = { 101 }; static const char *func_groups_NRTS2[] = { "NRTS2" };



static const struct aspeed_sig_desc sig_descs_VPIB8_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB8_VPI24 = { .signal = "VPIB8", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB8_VPI24) / sizeof((sig_descs_VPIB8_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB8_VPI24)), typeof(&(sig_descs_VPIB8_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB8_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB8_VPI24[] = { (&sig_expr_VPIB8_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_102_VPIB8[(sizeof(sig_exprs_VPIB8_VPI24) / sizeof((sig_exprs_VPIB8_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB8_VPI24)), typeof(&(sig_exprs_VPIB8_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB8_VPI24")));
static const struct aspeed_sig_desc sig_descs_TXD2_TXD2[] = { { 0, 0x84, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_TXD2_TXD2 = { .signal = "TXD2", .function = "TXD2", .ndescs = (sizeof(sig_descs_TXD2_TXD2) / sizeof((sig_descs_TXD2_TXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_TXD2_TXD2)), typeof(&(sig_descs_TXD2_TXD2)[0])))); }))), .descs = &(sig_descs_TXD2_TXD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_TXD2_TXD2[] = { (&sig_expr_TXD2_TXD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_102_TXD2[(sizeof(sig_exprs_TXD2_TXD2) / sizeof((sig_exprs_TXD2_TXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_TXD2_TXD2)), typeof(&(sig_exprs_TXD2_TXD2)[0])))); })))] __attribute__((alias("sig_exprs_TXD2_TXD2")));
static const struct aspeed_sig_desc sig_descs_GPIOM6_GPIOM6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM6_GPIOM6 = { .signal = "GPIOM6", .function = "GPIOM6", .ndescs = (sizeof(sig_descs_GPIOM6_GPIOM6) / sizeof((sig_descs_GPIOM6_GPIOM6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM6_GPIOM6)), typeof(&(sig_descs_GPIOM6_GPIOM6)[0])))); }))), .descs = &(sig_descs_GPIOM6_GPIOM6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM6_GPIOM6[] = { (&sig_expr_GPIOM6_GPIOM6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_102_GPIOM6[(sizeof(sig_exprs_GPIOM6_GPIOM6) / sizeof((sig_exprs_GPIOM6_GPIOM6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM6_GPIOM6)), typeof(&(sig_exprs_GPIOM6_GPIOM6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM6_GPIOM6"))); static const struct aspeed_sig_expr **pin_exprs_102[] = { sig_exprs_102_VPIB8, sig_exprs_102_TXD2, sig_exprs_102_GPIOM6, ((void *)0) }; static const struct aspeed_pin_desc pin_102 = { "102", (&pin_exprs_102[0]) };
static const int group_pins_TXD2[] = { 102 }; static const char *func_groups_TXD2[] = { "TXD2" };



static const struct aspeed_sig_desc sig_descs_VPIB9_VPI24[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x84, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIB9_VPI24 = { .signal = "VPIB9", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIB9_VPI24) / sizeof((sig_descs_VPIB9_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIB9_VPI24)), typeof(&(sig_descs_VPIB9_VPI24)[0])))); }))), .descs = &(sig_descs_VPIB9_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIB9_VPI24[] = { (&sig_expr_VPIB9_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_103_VPIB9[(sizeof(sig_exprs_VPIB9_VPI24) / sizeof((sig_exprs_VPIB9_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIB9_VPI24)), typeof(&(sig_exprs_VPIB9_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIB9_VPI24")));
static const struct aspeed_sig_desc sig_descs_RXD2_RXD2[] = { { 0, 0x84, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_RXD2_RXD2 = { .signal = "RXD2", .function = "RXD2", .ndescs = (sizeof(sig_descs_RXD2_RXD2) / sizeof((sig_descs_RXD2_RXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RXD2_RXD2)), typeof(&(sig_descs_RXD2_RXD2)[0])))); }))), .descs = &(sig_descs_RXD2_RXD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RXD2_RXD2[] = { (&sig_expr_RXD2_RXD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_103_RXD2[(sizeof(sig_exprs_RXD2_RXD2) / sizeof((sig_exprs_RXD2_RXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RXD2_RXD2)), typeof(&(sig_exprs_RXD2_RXD2)[0])))); })))] __attribute__((alias("sig_exprs_RXD2_RXD2")));
static const struct aspeed_sig_desc sig_descs_GPIOM7_GPIOM7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOM7_GPIOM7 = { .signal = "GPIOM7", .function = "GPIOM7", .ndescs = (sizeof(sig_descs_GPIOM7_GPIOM7) / sizeof((sig_descs_GPIOM7_GPIOM7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOM7_GPIOM7)), typeof(&(sig_descs_GPIOM7_GPIOM7)[0])))); }))), .descs = &(sig_descs_GPIOM7_GPIOM7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOM7_GPIOM7[] = { (&sig_expr_GPIOM7_GPIOM7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_103_GPIOM7[(sizeof(sig_exprs_GPIOM7_GPIOM7) / sizeof((sig_exprs_GPIOM7_GPIOM7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOM7_GPIOM7)), typeof(&(sig_exprs_GPIOM7_GPIOM7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOM7_GPIOM7"))); static const struct aspeed_sig_expr **pin_exprs_103[] = { sig_exprs_103_VPIB9, sig_exprs_103_RXD2, sig_exprs_103_GPIOM7, ((void *)0) }; static const struct aspeed_pin_desc pin_103 = { "103", (&pin_exprs_103[0]) };
static const int group_pins_RXD2[] = { 103 }; static const char *func_groups_RXD2[] = { "RXD2" };



static const struct aspeed_sig_desc sig_descs_DASHN0_DASHN0[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x88, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHN0_DASHN0 = { .signal = "DASHN0", .function = "DASHN0", .ndescs = (sizeof(sig_descs_DASHN0_DASHN0) / sizeof((sig_descs_DASHN0_DASHN0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHN0_DASHN0)), typeof(&(sig_descs_DASHN0_DASHN0)[0])))); }))), .descs = &(sig_descs_DASHN0_DASHN0)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHN0_DASHN0[] = { (&sig_expr_DASHN0_DASHN0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_104_DASHN0[(sizeof(sig_exprs_DASHN0_DASHN0) / sizeof((sig_exprs_DASHN0_DASHN0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHN0_DASHN0)), typeof(&(sig_exprs_DASHN0_DASHN0)[0])))); })))] __attribute__((alias("sig_exprs_DASHN0_DASHN0")));
static const struct aspeed_sig_desc sig_descs_PWM0_PWM0[] = { { 0, 0x88, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM0_PWM0 = { .signal = "PWM0", .function = "PWM0", .ndescs = (sizeof(sig_descs_PWM0_PWM0) / sizeof((sig_descs_PWM0_PWM0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM0_PWM0)), typeof(&(sig_descs_PWM0_PWM0)[0])))); }))), .descs = &(sig_descs_PWM0_PWM0)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM0_PWM0[] = { (&sig_expr_PWM0_PWM0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_104_PWM0[(sizeof(sig_exprs_PWM0_PWM0) / sizeof((sig_exprs_PWM0_PWM0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM0_PWM0)), typeof(&(sig_exprs_PWM0_PWM0)[0])))); })))] __attribute__((alias("sig_exprs_PWM0_PWM0")));
static const struct aspeed_sig_desc sig_descs_GPION0_GPION0[] = { }; static const struct aspeed_sig_expr sig_expr_GPION0_GPION0 = { .signal = "GPION0", .function = "GPION0", .ndescs = (sizeof(sig_descs_GPION0_GPION0) / sizeof((sig_descs_GPION0_GPION0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION0_GPION0)), typeof(&(sig_descs_GPION0_GPION0)[0])))); }))), .descs = &(sig_descs_GPION0_GPION0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION0_GPION0[] = { (&sig_expr_GPION0_GPION0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_104_GPION0[(sizeof(sig_exprs_GPION0_GPION0) / sizeof((sig_exprs_GPION0_GPION0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION0_GPION0)), typeof(&(sig_exprs_GPION0_GPION0)[0])))); })))] __attribute__((alias("sig_exprs_GPION0_GPION0"))); static const struct aspeed_sig_expr **pin_exprs_104[] = { sig_exprs_104_DASHN0, sig_exprs_104_PWM0, sig_exprs_104_GPION0, ((void *)0) }; static const struct aspeed_pin_desc pin_104 = { "104", (&pin_exprs_104[0]) };
static const int group_pins_PWM0[] = { 104 }; static const char *func_groups_PWM0[] = { "PWM0" };



static const struct aspeed_sig_desc sig_descs_DASHN1_DASHN1[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x88, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHN1_DASHN1 = { .signal = "DASHN1", .function = "DASHN1", .ndescs = (sizeof(sig_descs_DASHN1_DASHN1) / sizeof((sig_descs_DASHN1_DASHN1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHN1_DASHN1)), typeof(&(sig_descs_DASHN1_DASHN1)[0])))); }))), .descs = &(sig_descs_DASHN1_DASHN1)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHN1_DASHN1[] = { (&sig_expr_DASHN1_DASHN1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_105_DASHN1[(sizeof(sig_exprs_DASHN1_DASHN1) / sizeof((sig_exprs_DASHN1_DASHN1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHN1_DASHN1)), typeof(&(sig_exprs_DASHN1_DASHN1)[0])))); })))] __attribute__((alias("sig_exprs_DASHN1_DASHN1")));
static const struct aspeed_sig_desc sig_descs_PWM1_PWM1[] = { { 0, 0x88, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM1_PWM1 = { .signal = "PWM1", .function = "PWM1", .ndescs = (sizeof(sig_descs_PWM1_PWM1) / sizeof((sig_descs_PWM1_PWM1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM1_PWM1)), typeof(&(sig_descs_PWM1_PWM1)[0])))); }))), .descs = &(sig_descs_PWM1_PWM1)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM1_PWM1[] = { (&sig_expr_PWM1_PWM1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_105_PWM1[(sizeof(sig_exprs_PWM1_PWM1) / sizeof((sig_exprs_PWM1_PWM1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM1_PWM1)), typeof(&(sig_exprs_PWM1_PWM1)[0])))); })))] __attribute__((alias("sig_exprs_PWM1_PWM1")));
static const struct aspeed_sig_desc sig_descs_GPION1_GPION1[] = { }; static const struct aspeed_sig_expr sig_expr_GPION1_GPION1 = { .signal = "GPION1", .function = "GPION1", .ndescs = (sizeof(sig_descs_GPION1_GPION1) / sizeof((sig_descs_GPION1_GPION1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION1_GPION1)), typeof(&(sig_descs_GPION1_GPION1)[0])))); }))), .descs = &(sig_descs_GPION1_GPION1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION1_GPION1[] = { (&sig_expr_GPION1_GPION1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_105_GPION1[(sizeof(sig_exprs_GPION1_GPION1) / sizeof((sig_exprs_GPION1_GPION1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION1_GPION1)), typeof(&(sig_exprs_GPION1_GPION1)[0])))); })))] __attribute__((alias("sig_exprs_GPION1_GPION1"))); static const struct aspeed_sig_expr **pin_exprs_105[] = { sig_exprs_105_DASHN1, sig_exprs_105_PWM1, sig_exprs_105_GPION1, ((void *)0) }; static const struct aspeed_pin_desc pin_105 = { "105", (&pin_exprs_105[0]) };
static const int group_pins_PWM1[] = { 105 }; static const char *func_groups_PWM1[] = { "PWM1" };



static const struct aspeed_sig_desc sig_descs_VPIG2_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG2_VPI24 = { .signal = "VPIG2", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG2_VPI24) / sizeof((sig_descs_VPIG2_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG2_VPI24)), typeof(&(sig_descs_VPIG2_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG2_VPI24)[0], };
static const struct aspeed_sig_desc sig_descs_VPIG2_VPIRSVD[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x88, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG2_VPIRSVD = { .signal = "VPIG2", .function = "VPIRSVD", .ndescs = (sizeof(sig_descs_VPIG2_VPIRSVD) / sizeof((sig_descs_VPIG2_VPIRSVD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG2_VPIRSVD)), typeof(&(sig_descs_VPIG2_VPIRSVD)[0])))); }))), .descs = &(sig_descs_VPIG2_VPIRSVD)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPIG2_VPI24[] = { (&sig_expr_VPIG2_VPI24), (&sig_expr_VPIG2_VPIRSVD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_106_VPIG2[(sizeof(sig_exprs_VPIG2_VPI24) / sizeof((sig_exprs_VPIG2_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG2_VPI24)), typeof(&(sig_exprs_VPIG2_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG2_VPI24")));
static const struct aspeed_sig_desc sig_descs_PWM2_PWM2[] = { { 0, 0x88, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM2_PWM2 = { .signal = "PWM2", .function = "PWM2", .ndescs = (sizeof(sig_descs_PWM2_PWM2) / sizeof((sig_descs_PWM2_PWM2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM2_PWM2)), typeof(&(sig_descs_PWM2_PWM2)[0])))); }))), .descs = &(sig_descs_PWM2_PWM2)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM2_PWM2[] = { (&sig_expr_PWM2_PWM2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_106_PWM2[(sizeof(sig_exprs_PWM2_PWM2) / sizeof((sig_exprs_PWM2_PWM2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM2_PWM2)), typeof(&(sig_exprs_PWM2_PWM2)[0])))); })))] __attribute__((alias("sig_exprs_PWM2_PWM2")));
static const struct aspeed_sig_desc sig_descs_GPION2_GPION2[] = { }; static const struct aspeed_sig_expr sig_expr_GPION2_GPION2 = { .signal = "GPION2", .function = "GPION2", .ndescs = (sizeof(sig_descs_GPION2_GPION2) / sizeof((sig_descs_GPION2_GPION2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION2_GPION2)), typeof(&(sig_descs_GPION2_GPION2)[0])))); }))), .descs = &(sig_descs_GPION2_GPION2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION2_GPION2[] = { (&sig_expr_GPION2_GPION2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_106_GPION2[(sizeof(sig_exprs_GPION2_GPION2) / sizeof((sig_exprs_GPION2_GPION2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION2_GPION2)), typeof(&(sig_exprs_GPION2_GPION2)[0])))); })))] __attribute__((alias("sig_exprs_GPION2_GPION2"))); static const struct aspeed_sig_expr **pin_exprs_106[] = { sig_exprs_106_VPIG2, sig_exprs_106_PWM2, sig_exprs_106_GPION2, ((void *)0) }; static const struct aspeed_pin_desc pin_106 = { "106", (&pin_exprs_106[0]) };
static const int group_pins_PWM2[] = { 106 }; static const char *func_groups_PWM2[] = { "PWM2" };



static const struct aspeed_sig_desc sig_descs_VPIG3_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG3_VPI24 = { .signal = "VPIG3", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG3_VPI24) / sizeof((sig_descs_VPIG3_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG3_VPI24)), typeof(&(sig_descs_VPIG3_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG3_VPI24)[0], };
static const struct aspeed_sig_desc sig_descs_VPIG3_VPIRSVD[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x88, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG3_VPIRSVD = { .signal = "VPIG3", .function = "VPIRSVD", .ndescs = (sizeof(sig_descs_VPIG3_VPIRSVD) / sizeof((sig_descs_VPIG3_VPIRSVD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG3_VPIRSVD)), typeof(&(sig_descs_VPIG3_VPIRSVD)[0])))); }))), .descs = &(sig_descs_VPIG3_VPIRSVD)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPIG3_VPI24[] = { (&sig_expr_VPIG3_VPI24), (&sig_expr_VPIG3_VPIRSVD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_107_VPIG3[(sizeof(sig_exprs_VPIG3_VPI24) / sizeof((sig_exprs_VPIG3_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG3_VPI24)), typeof(&(sig_exprs_VPIG3_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG3_VPI24")));
static const struct aspeed_sig_desc sig_descs_PWM3_PWM3[] = { { 0, 0x88, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM3_PWM3 = { .signal = "PWM3", .function = "PWM3", .ndescs = (sizeof(sig_descs_PWM3_PWM3) / sizeof((sig_descs_PWM3_PWM3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM3_PWM3)), typeof(&(sig_descs_PWM3_PWM3)[0])))); }))), .descs = &(sig_descs_PWM3_PWM3)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM3_PWM3[] = { (&sig_expr_PWM3_PWM3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_107_PWM3[(sizeof(sig_exprs_PWM3_PWM3) / sizeof((sig_exprs_PWM3_PWM3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM3_PWM3)), typeof(&(sig_exprs_PWM3_PWM3)[0])))); })))] __attribute__((alias("sig_exprs_PWM3_PWM3")));
static const struct aspeed_sig_desc sig_descs_GPION3_GPION3[] = { }; static const struct aspeed_sig_expr sig_expr_GPION3_GPION3 = { .signal = "GPION3", .function = "GPION3", .ndescs = (sizeof(sig_descs_GPION3_GPION3) / sizeof((sig_descs_GPION3_GPION3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION3_GPION3)), typeof(&(sig_descs_GPION3_GPION3)[0])))); }))), .descs = &(sig_descs_GPION3_GPION3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION3_GPION3[] = { (&sig_expr_GPION3_GPION3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_107_GPION3[(sizeof(sig_exprs_GPION3_GPION3) / sizeof((sig_exprs_GPION3_GPION3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION3_GPION3)), typeof(&(sig_exprs_GPION3_GPION3)[0])))); })))] __attribute__((alias("sig_exprs_GPION3_GPION3"))); static const struct aspeed_sig_expr **pin_exprs_107[] = { sig_exprs_107_VPIG3, sig_exprs_107_PWM3, sig_exprs_107_GPION3, ((void *)0) }; static const struct aspeed_pin_desc pin_107 = { "107", (&pin_exprs_107[0]) };
static const int group_pins_PWM3[] = { 107 }; static const char *func_groups_PWM3[] = { "PWM3" };



static const struct aspeed_sig_desc sig_descs_VPIG4_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG4_VPI24 = { .signal = "VPIG4", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG4_VPI24) / sizeof((sig_descs_VPIG4_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG4_VPI24)), typeof(&(sig_descs_VPIG4_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG4_VPI24)[0], };
static const struct aspeed_sig_desc sig_descs_VPIG4_VPIRSVD[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x88, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG4_VPIRSVD = { .signal = "VPIG4", .function = "VPIRSVD", .ndescs = (sizeof(sig_descs_VPIG4_VPIRSVD) / sizeof((sig_descs_VPIG4_VPIRSVD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG4_VPIRSVD)), typeof(&(sig_descs_VPIG4_VPIRSVD)[0])))); }))), .descs = &(sig_descs_VPIG4_VPIRSVD)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPIG4_VPI24[] = { (&sig_expr_VPIG4_VPI24), (&sig_expr_VPIG4_VPIRSVD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_108_VPIG4[(sizeof(sig_exprs_VPIG4_VPI24) / sizeof((sig_exprs_VPIG4_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG4_VPI24)), typeof(&(sig_exprs_VPIG4_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG4_VPI24")));
static const struct aspeed_sig_desc sig_descs_PWM4_PWM4[] = { { 0, 0x88, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM4_PWM4 = { .signal = "PWM4", .function = "PWM4", .ndescs = (sizeof(sig_descs_PWM4_PWM4) / sizeof((sig_descs_PWM4_PWM4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM4_PWM4)), typeof(&(sig_descs_PWM4_PWM4)[0])))); }))), .descs = &(sig_descs_PWM4_PWM4)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM4_PWM4[] = { (&sig_expr_PWM4_PWM4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_108_PWM4[(sizeof(sig_exprs_PWM4_PWM4) / sizeof((sig_exprs_PWM4_PWM4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM4_PWM4)), typeof(&(sig_exprs_PWM4_PWM4)[0])))); })))] __attribute__((alias("sig_exprs_PWM4_PWM4")));
static const struct aspeed_sig_desc sig_descs_GPION4_GPION4[] = { }; static const struct aspeed_sig_expr sig_expr_GPION4_GPION4 = { .signal = "GPION4", .function = "GPION4", .ndescs = (sizeof(sig_descs_GPION4_GPION4) / sizeof((sig_descs_GPION4_GPION4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION4_GPION4)), typeof(&(sig_descs_GPION4_GPION4)[0])))); }))), .descs = &(sig_descs_GPION4_GPION4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION4_GPION4[] = { (&sig_expr_GPION4_GPION4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_108_GPION4[(sizeof(sig_exprs_GPION4_GPION4) / sizeof((sig_exprs_GPION4_GPION4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION4_GPION4)), typeof(&(sig_exprs_GPION4_GPION4)[0])))); })))] __attribute__((alias("sig_exprs_GPION4_GPION4"))); static const struct aspeed_sig_expr **pin_exprs_108[] = { sig_exprs_108_VPIG4, sig_exprs_108_PWM4, sig_exprs_108_GPION4, ((void *)0) }; static const struct aspeed_pin_desc pin_108 = { "108", (&pin_exprs_108[0]) };
static const int group_pins_PWM4[] = { 108 }; static const char *func_groups_PWM4[] = { "PWM4" };



static const struct aspeed_sig_desc sig_descs_VPIG5_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG5_VPI24 = { .signal = "VPIG5", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG5_VPI24) / sizeof((sig_descs_VPIG5_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG5_VPI24)), typeof(&(sig_descs_VPIG5_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG5_VPI24)[0], };
static const struct aspeed_sig_desc sig_descs_VPIG5_VPIRSVD[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 3, 0 }, { 0, 0x88, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG5_VPIRSVD = { .signal = "VPIG5", .function = "VPIRSVD", .ndescs = (sizeof(sig_descs_VPIG5_VPIRSVD) / sizeof((sig_descs_VPIG5_VPIRSVD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG5_VPIRSVD)), typeof(&(sig_descs_VPIG5_VPIRSVD)[0])))); }))), .descs = &(sig_descs_VPIG5_VPIRSVD)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPIG5_VPI24[] = { (&sig_expr_VPIG5_VPI24), (&sig_expr_VPIG5_VPIRSVD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_109_VPIG5[(sizeof(sig_exprs_VPIG5_VPI24) / sizeof((sig_exprs_VPIG5_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG5_VPI24)), typeof(&(sig_exprs_VPIG5_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG5_VPI24")));
static const struct aspeed_sig_desc sig_descs_PWM5_PWM5[] = { { 0, 0x88, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM5_PWM5 = { .signal = "PWM5", .function = "PWM5", .ndescs = (sizeof(sig_descs_PWM5_PWM5) / sizeof((sig_descs_PWM5_PWM5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM5_PWM5)), typeof(&(sig_descs_PWM5_PWM5)[0])))); }))), .descs = &(sig_descs_PWM5_PWM5)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM5_PWM5[] = { (&sig_expr_PWM5_PWM5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_109_PWM5[(sizeof(sig_exprs_PWM5_PWM5) / sizeof((sig_exprs_PWM5_PWM5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM5_PWM5)), typeof(&(sig_exprs_PWM5_PWM5)[0])))); })))] __attribute__((alias("sig_exprs_PWM5_PWM5")));
static const struct aspeed_sig_desc sig_descs_GPION5_GPION5[] = { }; static const struct aspeed_sig_expr sig_expr_GPION5_GPION5 = { .signal = "GPION5", .function = "GPION5", .ndescs = (sizeof(sig_descs_GPION5_GPION5) / sizeof((sig_descs_GPION5_GPION5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION5_GPION5)), typeof(&(sig_descs_GPION5_GPION5)[0])))); }))), .descs = &(sig_descs_GPION5_GPION5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION5_GPION5[] = { (&sig_expr_GPION5_GPION5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_109_GPION5[(sizeof(sig_exprs_GPION5_GPION5) / sizeof((sig_exprs_GPION5_GPION5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION5_GPION5)), typeof(&(sig_exprs_GPION5_GPION5)[0])))); })))] __attribute__((alias("sig_exprs_GPION5_GPION5"))); static const struct aspeed_sig_expr **pin_exprs_109[] = { sig_exprs_109_VPIG5, sig_exprs_109_PWM5, sig_exprs_109_GPION5, ((void *)0) }; static const struct aspeed_pin_desc pin_109 = { "109", (&pin_exprs_109[0]) };
static const int group_pins_PWM5[] = { 109 }; static const char *func_groups_PWM5[] = { "PWM5" };



static const struct aspeed_sig_desc sig_descs_VPIG6_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPIG6_VPI24 = { .signal = "VPIG6", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG6_VPI24) / sizeof((sig_descs_VPIG6_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG6_VPI24)), typeof(&(sig_descs_VPIG6_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG6_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIG6_VPI24[] = { (&sig_expr_VPIG6_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_110_VPIG6[(sizeof(sig_exprs_VPIG6_VPI24) / sizeof((sig_exprs_VPIG6_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG6_VPI24)), typeof(&(sig_exprs_VPIG6_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG6_VPI24")));
static const struct aspeed_sig_desc sig_descs_PWM6_PWM6[] = { { 0, 0x88, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM6_PWM6 = { .signal = "PWM6", .function = "PWM6", .ndescs = (sizeof(sig_descs_PWM6_PWM6) / sizeof((sig_descs_PWM6_PWM6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM6_PWM6)), typeof(&(sig_descs_PWM6_PWM6)[0])))); }))), .descs = &(sig_descs_PWM6_PWM6)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM6_PWM6[] = { (&sig_expr_PWM6_PWM6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_110_PWM6[(sizeof(sig_exprs_PWM6_PWM6) / sizeof((sig_exprs_PWM6_PWM6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM6_PWM6)), typeof(&(sig_exprs_PWM6_PWM6)[0])))); })))] __attribute__((alias("sig_exprs_PWM6_PWM6")));
static const struct aspeed_sig_desc sig_descs_GPION6_GPION6[] = { }; static const struct aspeed_sig_expr sig_expr_GPION6_GPION6 = { .signal = "GPION6", .function = "GPION6", .ndescs = (sizeof(sig_descs_GPION6_GPION6) / sizeof((sig_descs_GPION6_GPION6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION6_GPION6)), typeof(&(sig_descs_GPION6_GPION6)[0])))); }))), .descs = &(sig_descs_GPION6_GPION6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION6_GPION6[] = { (&sig_expr_GPION6_GPION6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_110_GPION6[(sizeof(sig_exprs_GPION6_GPION6) / sizeof((sig_exprs_GPION6_GPION6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION6_GPION6)), typeof(&(sig_exprs_GPION6_GPION6)[0])))); })))] __attribute__((alias("sig_exprs_GPION6_GPION6"))); static const struct aspeed_sig_expr **pin_exprs_110[] = { sig_exprs_110_VPIG6, sig_exprs_110_PWM6, sig_exprs_110_GPION6, ((void *)0) }; static const struct aspeed_pin_desc pin_110 = { "110", (&pin_exprs_110[0]) };
static const int group_pins_PWM6[] = { 110 }; static const char *func_groups_PWM6[] = { "PWM6" };



static const struct aspeed_sig_desc sig_descs_VPIG7_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPIG7_VPI24 = { .signal = "VPIG7", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG7_VPI24) / sizeof((sig_descs_VPIG7_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG7_VPI24)), typeof(&(sig_descs_VPIG7_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG7_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIG7_VPI24[] = { (&sig_expr_VPIG7_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_111_VPIG7[(sizeof(sig_exprs_VPIG7_VPI24) / sizeof((sig_exprs_VPIG7_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG7_VPI24)), typeof(&(sig_exprs_VPIG7_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG7_VPI24")));
static const struct aspeed_sig_desc sig_descs_PWM7_PWM7[] = { { 0, 0x88, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_PWM7_PWM7 = { .signal = "PWM7", .function = "PWM7", .ndescs = (sizeof(sig_descs_PWM7_PWM7) / sizeof((sig_descs_PWM7_PWM7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PWM7_PWM7)), typeof(&(sig_descs_PWM7_PWM7)[0])))); }))), .descs = &(sig_descs_PWM7_PWM7)[0], }; static const struct aspeed_sig_expr *sig_exprs_PWM7_PWM7[] = { (&sig_expr_PWM7_PWM7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_111_PWM7[(sizeof(sig_exprs_PWM7_PWM7) / sizeof((sig_exprs_PWM7_PWM7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PWM7_PWM7)), typeof(&(sig_exprs_PWM7_PWM7)[0])))); })))] __attribute__((alias("sig_exprs_PWM7_PWM7")));
static const struct aspeed_sig_desc sig_descs_GPION7_GPION7[] = { }; static const struct aspeed_sig_expr sig_expr_GPION7_GPION7 = { .signal = "GPION7", .function = "GPION7", .ndescs = (sizeof(sig_descs_GPION7_GPION7) / sizeof((sig_descs_GPION7_GPION7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPION7_GPION7)), typeof(&(sig_descs_GPION7_GPION7)[0])))); }))), .descs = &(sig_descs_GPION7_GPION7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPION7_GPION7[] = { (&sig_expr_GPION7_GPION7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_111_GPION7[(sizeof(sig_exprs_GPION7_GPION7) / sizeof((sig_exprs_GPION7_GPION7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPION7_GPION7)), typeof(&(sig_exprs_GPION7_GPION7)[0])))); })))] __attribute__((alias("sig_exprs_GPION7_GPION7"))); static const struct aspeed_sig_expr **pin_exprs_111[] = { sig_exprs_111_VPIG7, sig_exprs_111_PWM7, sig_exprs_111_GPION7, ((void *)0) }; static const struct aspeed_pin_desc pin_111 = { "111", (&pin_exprs_111[0]) };
static const int group_pins_PWM7[] = { 111 }; static const char *func_groups_PWM7[] = { "PWM7" };


static const struct aspeed_sig_desc sig_descs_VPIG8_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG8_VPI24 = { .signal = "VPIG8", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG8_VPI24) / sizeof((sig_descs_VPIG8_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG8_VPI24)), typeof(&(sig_descs_VPIG8_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG8_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIG8_VPI24[] = { (&sig_expr_VPIG8_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_112_VPIG8[(sizeof(sig_exprs_VPIG8_VPI24) / sizeof((sig_exprs_VPIG8_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG8_VPI24)), typeof(&(sig_exprs_VPIG8_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG8_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOO0_GPIOO0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO0_GPIOO0 = { .signal = "GPIOO0", .function = "GPIOO0", .ndescs = (sizeof(sig_descs_GPIOO0_GPIOO0) / sizeof((sig_descs_GPIOO0_GPIOO0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO0_GPIOO0)), typeof(&(sig_descs_GPIOO0_GPIOO0)[0])))); }))), .descs = &(sig_descs_GPIOO0_GPIOO0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO0_GPIOO0[] = { (&sig_expr_GPIOO0_GPIOO0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_112_GPIOO0[(sizeof(sig_exprs_GPIOO0_GPIOO0) / sizeof((sig_exprs_GPIOO0_GPIOO0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO0_GPIOO0)), typeof(&(sig_exprs_GPIOO0_GPIOO0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO0_GPIOO0"))); static const struct aspeed_sig_expr **pin_exprs_112[] = { sig_exprs_112_VPIG8, sig_exprs_112_GPIOO0, ((void *)0) }; static const struct aspeed_pin_desc pin_112 = { "112", (&pin_exprs_112[0]) };


static const struct aspeed_sig_desc sig_descs_VPIG9_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIG9_VPI24 = { .signal = "VPIG9", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIG9_VPI24) / sizeof((sig_descs_VPIG9_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIG9_VPI24)), typeof(&(sig_descs_VPIG9_VPI24)[0])))); }))), .descs = &(sig_descs_VPIG9_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIG9_VPI24[] = { (&sig_expr_VPIG9_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_113_VPIG9[(sizeof(sig_exprs_VPIG9_VPI24) / sizeof((sig_exprs_VPIG9_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIG9_VPI24)), typeof(&(sig_exprs_VPIG9_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIG9_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOO1_GPIOO1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO1_GPIOO1 = { .signal = "GPIOO1", .function = "GPIOO1", .ndescs = (sizeof(sig_descs_GPIOO1_GPIOO1) / sizeof((sig_descs_GPIOO1_GPIOO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO1_GPIOO1)), typeof(&(sig_descs_GPIOO1_GPIOO1)[0])))); }))), .descs = &(sig_descs_GPIOO1_GPIOO1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO1_GPIOO1[] = { (&sig_expr_GPIOO1_GPIOO1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_113_GPIOO1[(sizeof(sig_exprs_GPIOO1_GPIOO1) / sizeof((sig_exprs_GPIOO1_GPIOO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO1_GPIOO1)), typeof(&(sig_exprs_GPIOO1_GPIOO1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO1_GPIOO1"))); static const struct aspeed_sig_expr **pin_exprs_113[] = { sig_exprs_113_VPIG9, sig_exprs_113_GPIOO1, ((void *)0) }; static const struct aspeed_pin_desc pin_113 = { "113", (&pin_exprs_113[0]) };


static const struct aspeed_sig_desc sig_descs_DASHV5_DASHV5[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x88, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHV5_DASHV5 = { .signal = "DASHV5", .function = "DASHV5", .ndescs = (sizeof(sig_descs_DASHV5_DASHV5) / sizeof((sig_descs_DASHV5_DASHV5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHV5_DASHV5)), typeof(&(sig_descs_DASHV5_DASHV5)[0])))); }))), .descs = &(sig_descs_DASHV5_DASHV5)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHV5_DASHV5[] = { (&sig_expr_DASHV5_DASHV5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_114_DASHV5[(sizeof(sig_exprs_DASHV5_DASHV5) / sizeof((sig_exprs_DASHV5_DASHV5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHV5_DASHV5)), typeof(&(sig_exprs_DASHV5_DASHV5)[0])))); })))] __attribute__((alias("sig_exprs_DASHV5_DASHV5")));

static const struct aspeed_sig_desc sig_descs_GPIOO2_GPIOO2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO2_GPIOO2 = { .signal = "GPIOO2", .function = "GPIOO2", .ndescs = (sizeof(sig_descs_GPIOO2_GPIOO2) / sizeof((sig_descs_GPIOO2_GPIOO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO2_GPIOO2)), typeof(&(sig_descs_GPIOO2_GPIOO2)[0])))); }))), .descs = &(sig_descs_GPIOO2_GPIOO2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO2_GPIOO2[] = { (&sig_expr_GPIOO2_GPIOO2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_114_GPIOO2[(sizeof(sig_exprs_GPIOO2_GPIOO2) / sizeof((sig_exprs_GPIOO2_GPIOO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO2_GPIOO2)), typeof(&(sig_exprs_GPIOO2_GPIOO2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO2_GPIOO2"))); static const struct aspeed_sig_expr **pin_exprs_114[] = { sig_exprs_114_DASHV5, sig_exprs_114_GPIOO2, ((void *)0) }; static const struct aspeed_pin_desc pin_114 = { "114", (&pin_exprs_114[0]) };


static const struct aspeed_sig_desc sig_descs_DASHAB4_DASHAB4[] = { { 0, 0x90, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x88, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHAB4_DASHAB4 = { .signal = "DASHAB4", .function = "DASHAB4", .ndescs = (sizeof(sig_descs_DASHAB4_DASHAB4) / sizeof((sig_descs_DASHAB4_DASHAB4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHAB4_DASHAB4)), typeof(&(sig_descs_DASHAB4_DASHAB4)[0])))); }))), .descs = &(sig_descs_DASHAB4_DASHAB4)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHAB4_DASHAB4[] = { (&sig_expr_DASHAB4_DASHAB4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_115_DASHAB4[(sizeof(sig_exprs_DASHAB4_DASHAB4) / sizeof((sig_exprs_DASHAB4_DASHAB4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHAB4_DASHAB4)), typeof(&(sig_exprs_DASHAB4_DASHAB4)[0])))); })))] __attribute__((alias("sig_exprs_DASHAB4_DASHAB4")));

static const struct aspeed_sig_desc sig_descs_GPIOO3_GPIOO3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO3_GPIOO3 = { .signal = "GPIOO3", .function = "GPIOO3", .ndescs = (sizeof(sig_descs_GPIOO3_GPIOO3) / sizeof((sig_descs_GPIOO3_GPIOO3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO3_GPIOO3)), typeof(&(sig_descs_GPIOO3_GPIOO3)[0])))); }))), .descs = &(sig_descs_GPIOO3_GPIOO3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO3_GPIOO3[] = { (&sig_expr_GPIOO3_GPIOO3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_115_GPIOO3[(sizeof(sig_exprs_GPIOO3_GPIOO3) / sizeof((sig_exprs_GPIOO3_GPIOO3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO3_GPIOO3)), typeof(&(sig_exprs_GPIOO3_GPIOO3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO3_GPIOO3"))); static const struct aspeed_sig_expr **pin_exprs_115[] = { sig_exprs_115_DASHAB4, sig_exprs_115_GPIOO3, ((void *)0) }; static const struct aspeed_pin_desc pin_115 = { "115", (&pin_exprs_115[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR2_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR2_VPI24 = { .signal = "VPIR2", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR2_VPI24) / sizeof((sig_descs_VPIR2_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR2_VPI24)), typeof(&(sig_descs_VPIR2_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR2_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR2_VPI24[] = { (&sig_expr_VPIR2_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_116_VPIR2[(sizeof(sig_exprs_VPIR2_VPI24) / sizeof((sig_exprs_VPIR2_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR2_VPI24)), typeof(&(sig_exprs_VPIR2_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR2_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOO4_GPIOO4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO4_GPIOO4 = { .signal = "GPIOO4", .function = "GPIOO4", .ndescs = (sizeof(sig_descs_GPIOO4_GPIOO4) / sizeof((sig_descs_GPIOO4_GPIOO4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO4_GPIOO4)), typeof(&(sig_descs_GPIOO4_GPIOO4)[0])))); }))), .descs = &(sig_descs_GPIOO4_GPIOO4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO4_GPIOO4[] = { (&sig_expr_GPIOO4_GPIOO4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_116_GPIOO4[(sizeof(sig_exprs_GPIOO4_GPIOO4) / sizeof((sig_exprs_GPIOO4_GPIOO4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO4_GPIOO4)), typeof(&(sig_exprs_GPIOO4_GPIOO4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO4_GPIOO4"))); static const struct aspeed_sig_expr **pin_exprs_116[] = { sig_exprs_116_VPIR2, sig_exprs_116_GPIOO4, ((void *)0) }; static const struct aspeed_pin_desc pin_116 = { "116", (&pin_exprs_116[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR3_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR3_VPI24 = { .signal = "VPIR3", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR3_VPI24) / sizeof((sig_descs_VPIR3_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR3_VPI24)), typeof(&(sig_descs_VPIR3_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR3_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR3_VPI24[] = { (&sig_expr_VPIR3_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_117_VPIR3[(sizeof(sig_exprs_VPIR3_VPI24) / sizeof((sig_exprs_VPIR3_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR3_VPI24)), typeof(&(sig_exprs_VPIR3_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR3_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOO5_GPIOO5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO5_GPIOO5 = { .signal = "GPIOO5", .function = "GPIOO5", .ndescs = (sizeof(sig_descs_GPIOO5_GPIOO5) / sizeof((sig_descs_GPIOO5_GPIOO5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO5_GPIOO5)), typeof(&(sig_descs_GPIOO5_GPIOO5)[0])))); }))), .descs = &(sig_descs_GPIOO5_GPIOO5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO5_GPIOO5[] = { (&sig_expr_GPIOO5_GPIOO5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_117_GPIOO5[(sizeof(sig_exprs_GPIOO5_GPIOO5) / sizeof((sig_exprs_GPIOO5_GPIOO5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO5_GPIOO5)), typeof(&(sig_exprs_GPIOO5_GPIOO5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO5_GPIOO5"))); static const struct aspeed_sig_expr **pin_exprs_117[] = { sig_exprs_117_VPIR3, sig_exprs_117_GPIOO5, ((void *)0) }; static const struct aspeed_pin_desc pin_117 = { "117", (&pin_exprs_117[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR4_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR4_VPI24 = { .signal = "VPIR4", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR4_VPI24) / sizeof((sig_descs_VPIR4_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR4_VPI24)), typeof(&(sig_descs_VPIR4_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR4_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR4_VPI24[] = { (&sig_expr_VPIR4_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_118_VPIR4[(sizeof(sig_exprs_VPIR4_VPI24) / sizeof((sig_exprs_VPIR4_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR4_VPI24)), typeof(&(sig_exprs_VPIR4_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR4_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOO6_GPIOO6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO6_GPIOO6 = { .signal = "GPIOO6", .function = "GPIOO6", .ndescs = (sizeof(sig_descs_GPIOO6_GPIOO6) / sizeof((sig_descs_GPIOO6_GPIOO6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO6_GPIOO6)), typeof(&(sig_descs_GPIOO6_GPIOO6)[0])))); }))), .descs = &(sig_descs_GPIOO6_GPIOO6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO6_GPIOO6[] = { (&sig_expr_GPIOO6_GPIOO6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_118_GPIOO6[(sizeof(sig_exprs_GPIOO6_GPIOO6) / sizeof((sig_exprs_GPIOO6_GPIOO6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO6_GPIOO6)), typeof(&(sig_exprs_GPIOO6_GPIOO6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO6_GPIOO6"))); static const struct aspeed_sig_expr **pin_exprs_118[] = { sig_exprs_118_VPIR4, sig_exprs_118_GPIOO6, ((void *)0) }; static const struct aspeed_pin_desc pin_118 = { "118", (&pin_exprs_118[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR5_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR5_VPI24 = { .signal = "VPIR5", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR5_VPI24) / sizeof((sig_descs_VPIR5_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR5_VPI24)), typeof(&(sig_descs_VPIR5_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR5_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR5_VPI24[] = { (&sig_expr_VPIR5_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_119_VPIR5[(sizeof(sig_exprs_VPIR5_VPI24) / sizeof((sig_exprs_VPIR5_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR5_VPI24)), typeof(&(sig_exprs_VPIR5_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR5_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOO7_GPIOO7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOO7_GPIOO7 = { .signal = "GPIOO7", .function = "GPIOO7", .ndescs = (sizeof(sig_descs_GPIOO7_GPIOO7) / sizeof((sig_descs_GPIOO7_GPIOO7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOO7_GPIOO7)), typeof(&(sig_descs_GPIOO7_GPIOO7)[0])))); }))), .descs = &(sig_descs_GPIOO7_GPIOO7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOO7_GPIOO7[] = { (&sig_expr_GPIOO7_GPIOO7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_119_GPIOO7[(sizeof(sig_exprs_GPIOO7_GPIOO7) / sizeof((sig_exprs_GPIOO7_GPIOO7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOO7_GPIOO7)), typeof(&(sig_exprs_GPIOO7_GPIOO7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOO7_GPIOO7"))); static const struct aspeed_sig_expr **pin_exprs_119[] = { sig_exprs_119_VPIR5, sig_exprs_119_GPIOO7, ((void *)0) }; static const struct aspeed_pin_desc pin_119 = { "119", (&pin_exprs_119[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR6_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR6_VPI24 = { .signal = "VPIR6", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR6_VPI24) / sizeof((sig_descs_VPIR6_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR6_VPI24)), typeof(&(sig_descs_VPIR6_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR6_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR6_VPI24[] = { (&sig_expr_VPIR6_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_120_VPIR6[(sizeof(sig_exprs_VPIR6_VPI24) / sizeof((sig_exprs_VPIR6_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR6_VPI24)), typeof(&(sig_exprs_VPIR6_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR6_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOP0_GPIOP0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP0_GPIOP0 = { .signal = "GPIOP0", .function = "GPIOP0", .ndescs = (sizeof(sig_descs_GPIOP0_GPIOP0) / sizeof((sig_descs_GPIOP0_GPIOP0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP0_GPIOP0)), typeof(&(sig_descs_GPIOP0_GPIOP0)[0])))); }))), .descs = &(sig_descs_GPIOP0_GPIOP0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP0_GPIOP0[] = { (&sig_expr_GPIOP0_GPIOP0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_120_GPIOP0[(sizeof(sig_exprs_GPIOP0_GPIOP0) / sizeof((sig_exprs_GPIOP0_GPIOP0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP0_GPIOP0)), typeof(&(sig_exprs_GPIOP0_GPIOP0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP0_GPIOP0"))); static const struct aspeed_sig_expr **pin_exprs_120[] = { sig_exprs_120_VPIR6, sig_exprs_120_GPIOP0, ((void *)0) }; static const struct aspeed_pin_desc pin_120 = { "120", (&pin_exprs_120[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR7_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR7_VPI24 = { .signal = "VPIR7", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR7_VPI24) / sizeof((sig_descs_VPIR7_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR7_VPI24)), typeof(&(sig_descs_VPIR7_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR7_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR7_VPI24[] = { (&sig_expr_VPIR7_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_121_VPIR7[(sizeof(sig_exprs_VPIR7_VPI24) / sizeof((sig_exprs_VPIR7_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR7_VPI24)), typeof(&(sig_exprs_VPIR7_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR7_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOP1_GPIOP1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP1_GPIOP1 = { .signal = "GPIOP1", .function = "GPIOP1", .ndescs = (sizeof(sig_descs_GPIOP1_GPIOP1) / sizeof((sig_descs_GPIOP1_GPIOP1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP1_GPIOP1)), typeof(&(sig_descs_GPIOP1_GPIOP1)[0])))); }))), .descs = &(sig_descs_GPIOP1_GPIOP1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP1_GPIOP1[] = { (&sig_expr_GPIOP1_GPIOP1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_121_GPIOP1[(sizeof(sig_exprs_GPIOP1_GPIOP1) / sizeof((sig_exprs_GPIOP1_GPIOP1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP1_GPIOP1)), typeof(&(sig_exprs_GPIOP1_GPIOP1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP1_GPIOP1"))); static const struct aspeed_sig_expr **pin_exprs_121[] = { sig_exprs_121_VPIR7, sig_exprs_121_GPIOP1, ((void *)0) }; static const struct aspeed_pin_desc pin_121 = { "121", (&pin_exprs_121[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR8_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR8_VPI24 = { .signal = "VPIR8", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR8_VPI24) / sizeof((sig_descs_VPIR8_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR8_VPI24)), typeof(&(sig_descs_VPIR8_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR8_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR8_VPI24[] = { (&sig_expr_VPIR8_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_122_VPIR8[(sizeof(sig_exprs_VPIR8_VPI24) / sizeof((sig_exprs_VPIR8_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR8_VPI24)), typeof(&(sig_exprs_VPIR8_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR8_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOP2_GPIOP2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP2_GPIOP2 = { .signal = "GPIOP2", .function = "GPIOP2", .ndescs = (sizeof(sig_descs_GPIOP2_GPIOP2) / sizeof((sig_descs_GPIOP2_GPIOP2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP2_GPIOP2)), typeof(&(sig_descs_GPIOP2_GPIOP2)[0])))); }))), .descs = &(sig_descs_GPIOP2_GPIOP2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP2_GPIOP2[] = { (&sig_expr_GPIOP2_GPIOP2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_122_GPIOP2[(sizeof(sig_exprs_GPIOP2_GPIOP2) / sizeof((sig_exprs_GPIOP2_GPIOP2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP2_GPIOP2)), typeof(&(sig_exprs_GPIOP2_GPIOP2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP2_GPIOP2"))); static const struct aspeed_sig_expr **pin_exprs_122[] = { sig_exprs_122_VPIR8, sig_exprs_122_GPIOP2, ((void *)0) }; static const struct aspeed_pin_desc pin_122 = { "122", (&pin_exprs_122[0]) };


static const struct aspeed_sig_desc sig_descs_VPIR9_VPI24[] = { { 0, 0x90, (((~(((0UL)))) - ((((1UL))) << (4)) + 1) & (~(((0UL))) >> (32 - 1 - (5)))), 2, 0 }, { 0, 0x88, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_VPIR9_VPI24 = { .signal = "VPIR9", .function = "VPI24", .ndescs = (sizeof(sig_descs_VPIR9_VPI24) / sizeof((sig_descs_VPIR9_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPIR9_VPI24)), typeof(&(sig_descs_VPIR9_VPI24)[0])))); }))), .descs = &(sig_descs_VPIR9_VPI24)[0], }; static const struct aspeed_sig_expr *sig_exprs_VPIR9_VPI24[] = { (&sig_expr_VPIR9_VPI24), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_123_VPIR9[(sizeof(sig_exprs_VPIR9_VPI24) / sizeof((sig_exprs_VPIR9_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPIR9_VPI24)), typeof(&(sig_exprs_VPIR9_VPI24)[0])))); })))] __attribute__((alias("sig_exprs_VPIR9_VPI24")));

static const struct aspeed_sig_desc sig_descs_GPIOP3_GPIOP3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP3_GPIOP3 = { .signal = "GPIOP3", .function = "GPIOP3", .ndescs = (sizeof(sig_descs_GPIOP3_GPIOP3) / sizeof((sig_descs_GPIOP3_GPIOP3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP3_GPIOP3)), typeof(&(sig_descs_GPIOP3_GPIOP3)[0])))); }))), .descs = &(sig_descs_GPIOP3_GPIOP3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP3_GPIOP3[] = { (&sig_expr_GPIOP3_GPIOP3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_123_GPIOP3[(sizeof(sig_exprs_GPIOP3_GPIOP3) / sizeof((sig_exprs_GPIOP3_GPIOP3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP3_GPIOP3)), typeof(&(sig_exprs_GPIOP3_GPIOP3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP3_GPIOP3"))); static const struct aspeed_sig_expr **pin_exprs_123[] = { sig_exprs_123_VPIR9, sig_exprs_123_GPIOP3, ((void *)0) }; static const struct aspeed_pin_desc pin_123 = { "123", (&pin_exprs_123[0]) };

static const int group_pins_VPI24[] = { 89, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123 }; static const char *func_groups_VPI24[] = { "VPI24" };




static const struct aspeed_sig_desc sig_descs_DASHY6_DASHY6[] = { { 0, 0x90, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x88, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHY6_DASHY6 = { .signal = "DASHY6", .function = "DASHY6", .ndescs = (sizeof(sig_descs_DASHY6_DASHY6) / sizeof((sig_descs_DASHY6_DASHY6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHY6_DASHY6)), typeof(&(sig_descs_DASHY6_DASHY6)[0])))); }))), .descs = &(sig_descs_DASHY6_DASHY6)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHY6_DASHY6[] = { (&sig_expr_DASHY6_DASHY6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_124_DASHY6[(sizeof(sig_exprs_DASHY6_DASHY6) / sizeof((sig_exprs_DASHY6_DASHY6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHY6_DASHY6)), typeof(&(sig_exprs_DASHY6_DASHY6)[0])))); })))] __attribute__((alias("sig_exprs_DASHY6_DASHY6")));

static const struct aspeed_sig_desc sig_descs_GPIOP4_GPIOP4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP4_GPIOP4 = { .signal = "GPIOP4", .function = "GPIOP4", .ndescs = (sizeof(sig_descs_GPIOP4_GPIOP4) / sizeof((sig_descs_GPIOP4_GPIOP4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP4_GPIOP4)), typeof(&(sig_descs_GPIOP4_GPIOP4)[0])))); }))), .descs = &(sig_descs_GPIOP4_GPIOP4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP4_GPIOP4[] = { (&sig_expr_GPIOP4_GPIOP4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_124_GPIOP4[(sizeof(sig_exprs_GPIOP4_GPIOP4) / sizeof((sig_exprs_GPIOP4_GPIOP4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP4_GPIOP4)), typeof(&(sig_exprs_GPIOP4_GPIOP4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP4_GPIOP4"))); static const struct aspeed_sig_expr **pin_exprs_124[] = { sig_exprs_124_DASHY6, sig_exprs_124_GPIOP4, ((void *)0) }; static const struct aspeed_pin_desc pin_124 = { "124", (&pin_exprs_124[0]) };


static const struct aspeed_sig_desc sig_descs_DASHY5_DASHY5[] = { { 0, 0x90, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x88, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHY5_DASHY5 = { .signal = "DASHY5", .function = "DASHY5", .ndescs = (sizeof(sig_descs_DASHY5_DASHY5) / sizeof((sig_descs_DASHY5_DASHY5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHY5_DASHY5)), typeof(&(sig_descs_DASHY5_DASHY5)[0])))); }))), .descs = &(sig_descs_DASHY5_DASHY5)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHY5_DASHY5[] = { (&sig_expr_DASHY5_DASHY5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_125_DASHY5[(sizeof(sig_exprs_DASHY5_DASHY5) / sizeof((sig_exprs_DASHY5_DASHY5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHY5_DASHY5)), typeof(&(sig_exprs_DASHY5_DASHY5)[0])))); })))] __attribute__((alias("sig_exprs_DASHY5_DASHY5")));

static const struct aspeed_sig_desc sig_descs_GPIOP5_GPIOP5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP5_GPIOP5 = { .signal = "GPIOP5", .function = "GPIOP5", .ndescs = (sizeof(sig_descs_GPIOP5_GPIOP5) / sizeof((sig_descs_GPIOP5_GPIOP5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP5_GPIOP5)), typeof(&(sig_descs_GPIOP5_GPIOP5)[0])))); }))), .descs = &(sig_descs_GPIOP5_GPIOP5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP5_GPIOP5[] = { (&sig_expr_GPIOP5_GPIOP5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_125_GPIOP5[(sizeof(sig_exprs_GPIOP5_GPIOP5) / sizeof((sig_exprs_GPIOP5_GPIOP5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP5_GPIOP5)), typeof(&(sig_exprs_GPIOP5_GPIOP5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP5_GPIOP5"))); static const struct aspeed_sig_expr **pin_exprs_125[] = { sig_exprs_125_DASHY5, sig_exprs_125_GPIOP5, ((void *)0) }; static const struct aspeed_pin_desc pin_125 = { "125", (&pin_exprs_125[0]) };


static const struct aspeed_sig_desc sig_descs_DASHW6_DASHW6[] = { { 0, 0x90, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x88, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHW6_DASHW6 = { .signal = "DASHW6", .function = "DASHW6", .ndescs = (sizeof(sig_descs_DASHW6_DASHW6) / sizeof((sig_descs_DASHW6_DASHW6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHW6_DASHW6)), typeof(&(sig_descs_DASHW6_DASHW6)[0])))); }))), .descs = &(sig_descs_DASHW6_DASHW6)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHW6_DASHW6[] = { (&sig_expr_DASHW6_DASHW6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_126_DASHW6[(sizeof(sig_exprs_DASHW6_DASHW6) / sizeof((sig_exprs_DASHW6_DASHW6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHW6_DASHW6)), typeof(&(sig_exprs_DASHW6_DASHW6)[0])))); })))] __attribute__((alias("sig_exprs_DASHW6_DASHW6")));

static const struct aspeed_sig_desc sig_descs_GPIOP6_GPIOP6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP6_GPIOP6 = { .signal = "GPIOP6", .function = "GPIOP6", .ndescs = (sizeof(sig_descs_GPIOP6_GPIOP6) / sizeof((sig_descs_GPIOP6_GPIOP6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP6_GPIOP6)), typeof(&(sig_descs_GPIOP6_GPIOP6)[0])))); }))), .descs = &(sig_descs_GPIOP6_GPIOP6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP6_GPIOP6[] = { (&sig_expr_GPIOP6_GPIOP6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_126_GPIOP6[(sizeof(sig_exprs_GPIOP6_GPIOP6) / sizeof((sig_exprs_GPIOP6_GPIOP6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP6_GPIOP6)), typeof(&(sig_exprs_GPIOP6_GPIOP6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP6_GPIOP6"))); static const struct aspeed_sig_expr **pin_exprs_126[] = { sig_exprs_126_DASHW6, sig_exprs_126_GPIOP6, ((void *)0) }; static const struct aspeed_pin_desc pin_126 = { "126", (&pin_exprs_126[0]) };


static const struct aspeed_sig_desc sig_descs_DASHV6_DASHV6[] = { { 0, 0x90, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x88, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHV6_DASHV6 = { .signal = "DASHV6", .function = "DASHV6", .ndescs = (sizeof(sig_descs_DASHV6_DASHV6) / sizeof((sig_descs_DASHV6_DASHV6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHV6_DASHV6)), typeof(&(sig_descs_DASHV6_DASHV6)[0])))); }))), .descs = &(sig_descs_DASHV6_DASHV6)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHV6_DASHV6[] = { (&sig_expr_DASHV6_DASHV6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_127_DASHV6[(sizeof(sig_exprs_DASHV6_DASHV6) / sizeof((sig_exprs_DASHV6_DASHV6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHV6_DASHV6)), typeof(&(sig_exprs_DASHV6_DASHV6)[0])))); })))] __attribute__((alias("sig_exprs_DASHV6_DASHV6")));

static const struct aspeed_sig_desc sig_descs_GPIOP7_GPIOP7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOP7_GPIOP7 = { .signal = "GPIOP7", .function = "GPIOP7", .ndescs = (sizeof(sig_descs_GPIOP7_GPIOP7) / sizeof((sig_descs_GPIOP7_GPIOP7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOP7_GPIOP7)), typeof(&(sig_descs_GPIOP7_GPIOP7)[0])))); }))), .descs = &(sig_descs_GPIOP7_GPIOP7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOP7_GPIOP7[] = { (&sig_expr_GPIOP7_GPIOP7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_127_GPIOP7[(sizeof(sig_exprs_GPIOP7_GPIOP7) / sizeof((sig_exprs_GPIOP7_GPIOP7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOP7_GPIOP7)), typeof(&(sig_exprs_GPIOP7_GPIOP7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOP7_GPIOP7"))); static const struct aspeed_sig_expr **pin_exprs_127[] = { sig_exprs_127_DASHV6, sig_exprs_127_GPIOP7, ((void *)0) }; static const struct aspeed_pin_desc pin_127 = { "127", (&pin_exprs_127[0]) };




static const struct aspeed_sig_desc sig_descs_SCL3_I2C3[] = { { 0, 0x90, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL3_I2C3 = { .signal = "SCL3", .function = "I2C3", .ndescs = (sizeof(sig_descs_SCL3_I2C3) / sizeof((sig_descs_SCL3_I2C3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL3_I2C3)), typeof(&(sig_descs_SCL3_I2C3)[0])))); }))), .descs = &(sig_descs_SCL3_I2C3)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL3_I2C3[] = { (&sig_expr_SCL3_I2C3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_128_SCL3[(sizeof(sig_exprs_SCL3_I2C3) / sizeof((sig_exprs_SCL3_I2C3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL3_I2C3)), typeof(&(sig_exprs_SCL3_I2C3)[0])))); })))] __attribute__((alias("sig_exprs_SCL3_I2C3")));
static const struct aspeed_sig_desc sig_descs_GPIOQ0_GPIOQ0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ0_GPIOQ0 = { .signal = "GPIOQ0", .function = "GPIOQ0", .ndescs = (sizeof(sig_descs_GPIOQ0_GPIOQ0) / sizeof((sig_descs_GPIOQ0_GPIOQ0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ0_GPIOQ0)), typeof(&(sig_descs_GPIOQ0_GPIOQ0)[0])))); }))), .descs = &(sig_descs_GPIOQ0_GPIOQ0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ0_GPIOQ0[] = { (&sig_expr_GPIOQ0_GPIOQ0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_128_GPIOQ0[(sizeof(sig_exprs_GPIOQ0_GPIOQ0) / sizeof((sig_exprs_GPIOQ0_GPIOQ0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ0_GPIOQ0)), typeof(&(sig_exprs_GPIOQ0_GPIOQ0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ0_GPIOQ0"))); static const struct aspeed_sig_expr **pin_exprs_128[] = { sig_exprs_128_SCL3, sig_exprs_128_GPIOQ0, ((void *)0) }; static const struct aspeed_pin_desc pin_128 = { "128", (&pin_exprs_128[0]) };


static const struct aspeed_sig_desc sig_descs_SDA3_I2C3[] = { { 0, 0x90, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA3_I2C3 = { .signal = "SDA3", .function = "I2C3", .ndescs = (sizeof(sig_descs_SDA3_I2C3) / sizeof((sig_descs_SDA3_I2C3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA3_I2C3)), typeof(&(sig_descs_SDA3_I2C3)[0])))); }))), .descs = &(sig_descs_SDA3_I2C3)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA3_I2C3[] = { (&sig_expr_SDA3_I2C3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_129_SDA3[(sizeof(sig_exprs_SDA3_I2C3) / sizeof((sig_exprs_SDA3_I2C3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA3_I2C3)), typeof(&(sig_exprs_SDA3_I2C3)[0])))); })))] __attribute__((alias("sig_exprs_SDA3_I2C3")));
static const struct aspeed_sig_desc sig_descs_GPIOQ1_GPIOQ1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ1_GPIOQ1 = { .signal = "GPIOQ1", .function = "GPIOQ1", .ndescs = (sizeof(sig_descs_GPIOQ1_GPIOQ1) / sizeof((sig_descs_GPIOQ1_GPIOQ1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ1_GPIOQ1)), typeof(&(sig_descs_GPIOQ1_GPIOQ1)[0])))); }))), .descs = &(sig_descs_GPIOQ1_GPIOQ1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ1_GPIOQ1[] = { (&sig_expr_GPIOQ1_GPIOQ1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_129_GPIOQ1[(sizeof(sig_exprs_GPIOQ1_GPIOQ1) / sizeof((sig_exprs_GPIOQ1_GPIOQ1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ1_GPIOQ1)), typeof(&(sig_exprs_GPIOQ1_GPIOQ1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ1_GPIOQ1"))); static const struct aspeed_sig_expr **pin_exprs_129[] = { sig_exprs_129_SDA3, sig_exprs_129_GPIOQ1, ((void *)0) }; static const struct aspeed_pin_desc pin_129 = { "129", (&pin_exprs_129[0]) };

static const int group_pins_I2C3[] = { 128, 129 }; static const char *func_groups_I2C3[] = { "I2C3" };




static const struct aspeed_sig_desc sig_descs_SCL4_I2C4[] = { { 0, 0x90, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL4_I2C4 = { .signal = "SCL4", .function = "I2C4", .ndescs = (sizeof(sig_descs_SCL4_I2C4) / sizeof((sig_descs_SCL4_I2C4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL4_I2C4)), typeof(&(sig_descs_SCL4_I2C4)[0])))); }))), .descs = &(sig_descs_SCL4_I2C4)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL4_I2C4[] = { (&sig_expr_SCL4_I2C4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_130_SCL4[(sizeof(sig_exprs_SCL4_I2C4) / sizeof((sig_exprs_SCL4_I2C4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL4_I2C4)), typeof(&(sig_exprs_SCL4_I2C4)[0])))); })))] __attribute__((alias("sig_exprs_SCL4_I2C4")));
static const struct aspeed_sig_desc sig_descs_GPIOQ2_GPIOQ2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ2_GPIOQ2 = { .signal = "GPIOQ2", .function = "GPIOQ2", .ndescs = (sizeof(sig_descs_GPIOQ2_GPIOQ2) / sizeof((sig_descs_GPIOQ2_GPIOQ2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ2_GPIOQ2)), typeof(&(sig_descs_GPIOQ2_GPIOQ2)[0])))); }))), .descs = &(sig_descs_GPIOQ2_GPIOQ2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ2_GPIOQ2[] = { (&sig_expr_GPIOQ2_GPIOQ2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_130_GPIOQ2[(sizeof(sig_exprs_GPIOQ2_GPIOQ2) / sizeof((sig_exprs_GPIOQ2_GPIOQ2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ2_GPIOQ2)), typeof(&(sig_exprs_GPIOQ2_GPIOQ2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ2_GPIOQ2"))); static const struct aspeed_sig_expr **pin_exprs_130[] = { sig_exprs_130_SCL4, sig_exprs_130_GPIOQ2, ((void *)0) }; static const struct aspeed_pin_desc pin_130 = { "130", (&pin_exprs_130[0]) };


static const struct aspeed_sig_desc sig_descs_SDA4_I2C4[] = { { 0, 0x90, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA4_I2C4 = { .signal = "SDA4", .function = "I2C4", .ndescs = (sizeof(sig_descs_SDA4_I2C4) / sizeof((sig_descs_SDA4_I2C4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA4_I2C4)), typeof(&(sig_descs_SDA4_I2C4)[0])))); }))), .descs = &(sig_descs_SDA4_I2C4)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA4_I2C4[] = { (&sig_expr_SDA4_I2C4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_131_SDA4[(sizeof(sig_exprs_SDA4_I2C4) / sizeof((sig_exprs_SDA4_I2C4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA4_I2C4)), typeof(&(sig_exprs_SDA4_I2C4)[0])))); })))] __attribute__((alias("sig_exprs_SDA4_I2C4")));
static const struct aspeed_sig_desc sig_descs_GPIOQ3_GPIOQ3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ3_GPIOQ3 = { .signal = "GPIOQ3", .function = "GPIOQ3", .ndescs = (sizeof(sig_descs_GPIOQ3_GPIOQ3) / sizeof((sig_descs_GPIOQ3_GPIOQ3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ3_GPIOQ3)), typeof(&(sig_descs_GPIOQ3_GPIOQ3)[0])))); }))), .descs = &(sig_descs_GPIOQ3_GPIOQ3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ3_GPIOQ3[] = { (&sig_expr_GPIOQ3_GPIOQ3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_131_GPIOQ3[(sizeof(sig_exprs_GPIOQ3_GPIOQ3) / sizeof((sig_exprs_GPIOQ3_GPIOQ3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ3_GPIOQ3)), typeof(&(sig_exprs_GPIOQ3_GPIOQ3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ3_GPIOQ3"))); static const struct aspeed_sig_expr **pin_exprs_131[] = { sig_exprs_131_SDA4, sig_exprs_131_GPIOQ3, ((void *)0) }; static const struct aspeed_pin_desc pin_131 = { "131", (&pin_exprs_131[0]) };

static const int group_pins_I2C4[] = { 130, 131 }; static const char *func_groups_I2C4[] = { "I2C4" };




static const struct aspeed_sig_desc sig_descs_SCL14_I2C14[] = { { 0, 0x90, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL14_I2C14 = { .signal = "SCL14", .function = "I2C14", .ndescs = (sizeof(sig_descs_SCL14_I2C14) / sizeof((sig_descs_SCL14_I2C14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL14_I2C14)), typeof(&(sig_descs_SCL14_I2C14)[0])))); }))), .descs = &(sig_descs_SCL14_I2C14)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL14_I2C14[] = { (&sig_expr_SCL14_I2C14), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_132_SCL14[(sizeof(sig_exprs_SCL14_I2C14) / sizeof((sig_exprs_SCL14_I2C14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL14_I2C14)), typeof(&(sig_exprs_SCL14_I2C14)[0])))); })))] __attribute__((alias("sig_exprs_SCL14_I2C14")));
static const struct aspeed_sig_desc sig_descs_GPIOQ4_GPIOQ4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ4_GPIOQ4 = { .signal = "GPIOQ4", .function = "GPIOQ4", .ndescs = (sizeof(sig_descs_GPIOQ4_GPIOQ4) / sizeof((sig_descs_GPIOQ4_GPIOQ4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ4_GPIOQ4)), typeof(&(sig_descs_GPIOQ4_GPIOQ4)[0])))); }))), .descs = &(sig_descs_GPIOQ4_GPIOQ4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ4_GPIOQ4[] = { (&sig_expr_GPIOQ4_GPIOQ4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_132_GPIOQ4[(sizeof(sig_exprs_GPIOQ4_GPIOQ4) / sizeof((sig_exprs_GPIOQ4_GPIOQ4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ4_GPIOQ4)), typeof(&(sig_exprs_GPIOQ4_GPIOQ4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ4_GPIOQ4"))); static const struct aspeed_sig_expr **pin_exprs_132[] = { sig_exprs_132_SCL14, sig_exprs_132_GPIOQ4, ((void *)0) }; static const struct aspeed_pin_desc pin_132 = { "132", (&pin_exprs_132[0]) };


static const struct aspeed_sig_desc sig_descs_SDA14_I2C14[] = { { 0, 0x90, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA14_I2C14 = { .signal = "SDA14", .function = "I2C14", .ndescs = (sizeof(sig_descs_SDA14_I2C14) / sizeof((sig_descs_SDA14_I2C14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA14_I2C14)), typeof(&(sig_descs_SDA14_I2C14)[0])))); }))), .descs = &(sig_descs_SDA14_I2C14)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA14_I2C14[] = { (&sig_expr_SDA14_I2C14), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_133_SDA14[(sizeof(sig_exprs_SDA14_I2C14) / sizeof((sig_exprs_SDA14_I2C14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA14_I2C14)), typeof(&(sig_exprs_SDA14_I2C14)[0])))); })))] __attribute__((alias("sig_exprs_SDA14_I2C14")));
static const struct aspeed_sig_desc sig_descs_GPIOQ5_GPIOQ5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ5_GPIOQ5 = { .signal = "GPIOQ5", .function = "GPIOQ5", .ndescs = (sizeof(sig_descs_GPIOQ5_GPIOQ5) / sizeof((sig_descs_GPIOQ5_GPIOQ5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ5_GPIOQ5)), typeof(&(sig_descs_GPIOQ5_GPIOQ5)[0])))); }))), .descs = &(sig_descs_GPIOQ5_GPIOQ5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ5_GPIOQ5[] = { (&sig_expr_GPIOQ5_GPIOQ5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_133_GPIOQ5[(sizeof(sig_exprs_GPIOQ5_GPIOQ5) / sizeof((sig_exprs_GPIOQ5_GPIOQ5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ5_GPIOQ5)), typeof(&(sig_exprs_GPIOQ5_GPIOQ5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ5_GPIOQ5"))); static const struct aspeed_sig_expr **pin_exprs_133[] = { sig_exprs_133_SDA14, sig_exprs_133_GPIOQ5, ((void *)0) }; static const struct aspeed_pin_desc pin_133 = { "133", (&pin_exprs_133[0]) };

static const int group_pins_I2C14[] = { 132, 133 }; static const char *func_groups_I2C14[] = { "I2C14" };


static const struct aspeed_sig_desc sig_descs_OSCCLK_OSCCLK[] = { { 0, 0x2C, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_OSCCLK_OSCCLK = { .signal = "OSCCLK", .function = "OSCCLK", .ndescs = (sizeof(sig_descs_OSCCLK_OSCCLK) / sizeof((sig_descs_OSCCLK_OSCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_OSCCLK_OSCCLK)), typeof(&(sig_descs_OSCCLK_OSCCLK)[0])))); }))), .descs = &(sig_descs_OSCCLK_OSCCLK)[0], }; static const struct aspeed_sig_expr *sig_exprs_OSCCLK_OSCCLK[] = { (&sig_expr_OSCCLK_OSCCLK), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_134_OSCCLK[(sizeof(sig_exprs_OSCCLK_OSCCLK) / sizeof((sig_exprs_OSCCLK_OSCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_OSCCLK_OSCCLK)), typeof(&(sig_exprs_OSCCLK_OSCCLK)[0])))); })))] __attribute__((alias("sig_exprs_OSCCLK_OSCCLK"))); static const struct aspeed_sig_desc sig_descs_GPIOQ6_GPIOQ6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ6_GPIOQ6 = { .signal = "GPIOQ6", .function = "GPIOQ6", .ndescs = (sizeof(sig_descs_GPIOQ6_GPIOQ6) / sizeof((sig_descs_GPIOQ6_GPIOQ6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ6_GPIOQ6)), typeof(&(sig_descs_GPIOQ6_GPIOQ6)[0])))); }))), .descs = &(sig_descs_GPIOQ6_GPIOQ6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ6_GPIOQ6[] = { (&sig_expr_GPIOQ6_GPIOQ6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_134_GPIOQ6[(sizeof(sig_exprs_GPIOQ6_GPIOQ6) / sizeof((sig_exprs_GPIOQ6_GPIOQ6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ6_GPIOQ6)), typeof(&(sig_exprs_GPIOQ6_GPIOQ6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ6_GPIOQ6"))); static const struct aspeed_sig_expr **pin_exprs_134[] = { sig_exprs_134_OSCCLK, sig_exprs_134_GPIOQ6, ((void *)0) }; static const struct aspeed_pin_desc pin_134 = { "134", (&pin_exprs_134[0]) }; static const int group_pins_OSCCLK[] = { 134 }; static const char *func_groups_OSCCLK[] = { "OSCCLK" };


static const struct aspeed_sig_desc sig_descs_PEWAKE_PEWAKE[] = { { 0, 0x2C, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_PEWAKE_PEWAKE = { .signal = "PEWAKE", .function = "PEWAKE", .ndescs = (sizeof(sig_descs_PEWAKE_PEWAKE) / sizeof((sig_descs_PEWAKE_PEWAKE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_PEWAKE_PEWAKE)), typeof(&(sig_descs_PEWAKE_PEWAKE)[0])))); }))), .descs = &(sig_descs_PEWAKE_PEWAKE)[0], }; static const struct aspeed_sig_expr *sig_exprs_PEWAKE_PEWAKE[] = { (&sig_expr_PEWAKE_PEWAKE), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_135_PEWAKE[(sizeof(sig_exprs_PEWAKE_PEWAKE) / sizeof((sig_exprs_PEWAKE_PEWAKE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_PEWAKE_PEWAKE)), typeof(&(sig_exprs_PEWAKE_PEWAKE)[0])))); })))] __attribute__((alias("sig_exprs_PEWAKE_PEWAKE"))); static const struct aspeed_sig_desc sig_descs_GPIOQ7_GPIOQ7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOQ7_GPIOQ7 = { .signal = "GPIOQ7", .function = "GPIOQ7", .ndescs = (sizeof(sig_descs_GPIOQ7_GPIOQ7) / sizeof((sig_descs_GPIOQ7_GPIOQ7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOQ7_GPIOQ7)), typeof(&(sig_descs_GPIOQ7_GPIOQ7)[0])))); }))), .descs = &(sig_descs_GPIOQ7_GPIOQ7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOQ7_GPIOQ7[] = { (&sig_expr_GPIOQ7_GPIOQ7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_135_GPIOQ7[(sizeof(sig_exprs_GPIOQ7_GPIOQ7) / sizeof((sig_exprs_GPIOQ7_GPIOQ7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOQ7_GPIOQ7)), typeof(&(sig_exprs_GPIOQ7_GPIOQ7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOQ7_GPIOQ7"))); static const struct aspeed_sig_expr **pin_exprs_135[] = { sig_exprs_135_PEWAKE, sig_exprs_135_GPIOQ7, ((void *)0) }; static const struct aspeed_pin_desc pin_135 = { "135", (&pin_exprs_135[0]) }; static const int group_pins_PEWAKE[] = { 135 }; static const char *func_groups_PEWAKE[] = { "PEWAKE" };


static const struct aspeed_sig_desc sig_descs_FWSPICS1_FWSPICS1[] = { { 0, 0x88, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_FWSPICS1_FWSPICS1 = { .signal = "FWSPICS1", .function = "FWSPICS1", .ndescs = (sizeof(sig_descs_FWSPICS1_FWSPICS1) / sizeof((sig_descs_FWSPICS1_FWSPICS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_FWSPICS1_FWSPICS1)), typeof(&(sig_descs_FWSPICS1_FWSPICS1)[0])))); }))), .descs = &(sig_descs_FWSPICS1_FWSPICS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_FWSPICS1_FWSPICS1[] = { (&sig_expr_FWSPICS1_FWSPICS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_136_FWSPICS1[(sizeof(sig_exprs_FWSPICS1_FWSPICS1) / sizeof((sig_exprs_FWSPICS1_FWSPICS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_FWSPICS1_FWSPICS1)), typeof(&(sig_exprs_FWSPICS1_FWSPICS1)[0])))); })))] __attribute__((alias("sig_exprs_FWSPICS1_FWSPICS1"))); static const struct aspeed_sig_desc sig_descs_GPIOR0_GPIOR0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR0_GPIOR0 = { .signal = "GPIOR0", .function = "GPIOR0", .ndescs = (sizeof(sig_descs_GPIOR0_GPIOR0) / sizeof((sig_descs_GPIOR0_GPIOR0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR0_GPIOR0)), typeof(&(sig_descs_GPIOR0_GPIOR0)[0])))); }))), .descs = &(sig_descs_GPIOR0_GPIOR0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR0_GPIOR0[] = { (&sig_expr_GPIOR0_GPIOR0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_136_GPIOR0[(sizeof(sig_exprs_GPIOR0_GPIOR0) / sizeof((sig_exprs_GPIOR0_GPIOR0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR0_GPIOR0)), typeof(&(sig_exprs_GPIOR0_GPIOR0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR0_GPIOR0"))); static const struct aspeed_sig_expr **pin_exprs_136[] = { sig_exprs_136_FWSPICS1, sig_exprs_136_GPIOR0, ((void *)0) }; static const struct aspeed_pin_desc pin_136 = { "136", (&pin_exprs_136[0]) }; static const int group_pins_FWSPICS1[] = { 136 }; static const char *func_groups_FWSPICS1[] = { "FWSPICS1" };


static const struct aspeed_sig_desc sig_descs_FWSPICS2_FWSPICS2[] = { { 0, 0x88, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_FWSPICS2_FWSPICS2 = { .signal = "FWSPICS2", .function = "FWSPICS2", .ndescs = (sizeof(sig_descs_FWSPICS2_FWSPICS2) / sizeof((sig_descs_FWSPICS2_FWSPICS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_FWSPICS2_FWSPICS2)), typeof(&(sig_descs_FWSPICS2_FWSPICS2)[0])))); }))), .descs = &(sig_descs_FWSPICS2_FWSPICS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_FWSPICS2_FWSPICS2[] = { (&sig_expr_FWSPICS2_FWSPICS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_137_FWSPICS2[(sizeof(sig_exprs_FWSPICS2_FWSPICS2) / sizeof((sig_exprs_FWSPICS2_FWSPICS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_FWSPICS2_FWSPICS2)), typeof(&(sig_exprs_FWSPICS2_FWSPICS2)[0])))); })))] __attribute__((alias("sig_exprs_FWSPICS2_FWSPICS2"))); static const struct aspeed_sig_desc sig_descs_GPIOR1_GPIOR1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR1_GPIOR1 = { .signal = "GPIOR1", .function = "GPIOR1", .ndescs = (sizeof(sig_descs_GPIOR1_GPIOR1) / sizeof((sig_descs_GPIOR1_GPIOR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR1_GPIOR1)), typeof(&(sig_descs_GPIOR1_GPIOR1)[0])))); }))), .descs = &(sig_descs_GPIOR1_GPIOR1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR1_GPIOR1[] = { (&sig_expr_GPIOR1_GPIOR1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_137_GPIOR1[(sizeof(sig_exprs_GPIOR1_GPIOR1) / sizeof((sig_exprs_GPIOR1_GPIOR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR1_GPIOR1)), typeof(&(sig_exprs_GPIOR1_GPIOR1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR1_GPIOR1"))); static const struct aspeed_sig_expr **pin_exprs_137[] = { sig_exprs_137_FWSPICS2, sig_exprs_137_GPIOR1, ((void *)0) }; static const struct aspeed_pin_desc pin_137 = { "137", (&pin_exprs_137[0]) }; static const int group_pins_FWSPICS2[] = { 137 }; static const char *func_groups_FWSPICS2[] = { "FWSPICS2" };


static const struct aspeed_sig_desc sig_descs_SPI2CS0_SPI2CS0[] = { { 0, 0x88, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI2CS0_SPI2CS0 = { .signal = "SPI2CS0", .function = "SPI2CS0", .ndescs = (sizeof(sig_descs_SPI2CS0_SPI2CS0) / sizeof((sig_descs_SPI2CS0_SPI2CS0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI2CS0_SPI2CS0)), typeof(&(sig_descs_SPI2CS0_SPI2CS0)[0])))); }))), .descs = &(sig_descs_SPI2CS0_SPI2CS0)[0], }; static const struct aspeed_sig_expr *sig_exprs_SPI2CS0_SPI2CS0[] = { (&sig_expr_SPI2CS0_SPI2CS0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_138_SPI2CS0[(sizeof(sig_exprs_SPI2CS0_SPI2CS0) / sizeof((sig_exprs_SPI2CS0_SPI2CS0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI2CS0_SPI2CS0)), typeof(&(sig_exprs_SPI2CS0_SPI2CS0)[0])))); })))] __attribute__((alias("sig_exprs_SPI2CS0_SPI2CS0"))); static const struct aspeed_sig_desc sig_descs_GPIOR2_GPIOR2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR2_GPIOR2 = { .signal = "GPIOR2", .function = "GPIOR2", .ndescs = (sizeof(sig_descs_GPIOR2_GPIOR2) / sizeof((sig_descs_GPIOR2_GPIOR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR2_GPIOR2)), typeof(&(sig_descs_GPIOR2_GPIOR2)[0])))); }))), .descs = &(sig_descs_GPIOR2_GPIOR2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR2_GPIOR2[] = { (&sig_expr_GPIOR2_GPIOR2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_138_GPIOR2[(sizeof(sig_exprs_GPIOR2_GPIOR2) / sizeof((sig_exprs_GPIOR2_GPIOR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR2_GPIOR2)), typeof(&(sig_exprs_GPIOR2_GPIOR2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR2_GPIOR2"))); static const struct aspeed_sig_expr **pin_exprs_138[] = { sig_exprs_138_SPI2CS0, sig_exprs_138_GPIOR2, ((void *)0) }; static const struct aspeed_pin_desc pin_138 = { "138", (&pin_exprs_138[0]) }; static const int group_pins_SPI2CS0[] = { 138 }; static const char *func_groups_SPI2CS0[] = { "SPI2CS0" };


static const struct aspeed_sig_desc sig_descs_SPI2CK_SPI2CK[] = { { 0, 0x88, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI2CK_SPI2CK = { .signal = "SPI2CK", .function = "SPI2CK", .ndescs = (sizeof(sig_descs_SPI2CK_SPI2CK) / sizeof((sig_descs_SPI2CK_SPI2CK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI2CK_SPI2CK)), typeof(&(sig_descs_SPI2CK_SPI2CK)[0])))); }))), .descs = &(sig_descs_SPI2CK_SPI2CK)[0], }; static const struct aspeed_sig_expr *sig_exprs_SPI2CK_SPI2CK[] = { (&sig_expr_SPI2CK_SPI2CK), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_139_SPI2CK[(sizeof(sig_exprs_SPI2CK_SPI2CK) / sizeof((sig_exprs_SPI2CK_SPI2CK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI2CK_SPI2CK)), typeof(&(sig_exprs_SPI2CK_SPI2CK)[0])))); })))] __attribute__((alias("sig_exprs_SPI2CK_SPI2CK"))); static const struct aspeed_sig_desc sig_descs_GPIOR3_GPIOR3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR3_GPIOR3 = { .signal = "GPIOR3", .function = "GPIOR3", .ndescs = (sizeof(sig_descs_GPIOR3_GPIOR3) / sizeof((sig_descs_GPIOR3_GPIOR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR3_GPIOR3)), typeof(&(sig_descs_GPIOR3_GPIOR3)[0])))); }))), .descs = &(sig_descs_GPIOR3_GPIOR3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR3_GPIOR3[] = { (&sig_expr_GPIOR3_GPIOR3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_139_GPIOR3[(sizeof(sig_exprs_GPIOR3_GPIOR3) / sizeof((sig_exprs_GPIOR3_GPIOR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR3_GPIOR3)), typeof(&(sig_exprs_GPIOR3_GPIOR3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR3_GPIOR3"))); static const struct aspeed_sig_expr **pin_exprs_139[] = { sig_exprs_139_SPI2CK, sig_exprs_139_GPIOR3, ((void *)0) }; static const struct aspeed_pin_desc pin_139 = { "139", (&pin_exprs_139[0]) }; static const int group_pins_SPI2CK[] = { 139 }; static const char *func_groups_SPI2CK[] = { "SPI2CK" };


static const struct aspeed_sig_desc sig_descs_SPI2MOSI_SPI2MOSI[] = { { 0, 0x88, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI2MOSI_SPI2MOSI = { .signal = "SPI2MOSI", .function = "SPI2MOSI", .ndescs = (sizeof(sig_descs_SPI2MOSI_SPI2MOSI) / sizeof((sig_descs_SPI2MOSI_SPI2MOSI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI2MOSI_SPI2MOSI)), typeof(&(sig_descs_SPI2MOSI_SPI2MOSI)[0])))); }))), .descs = &(sig_descs_SPI2MOSI_SPI2MOSI)[0], }; static const struct aspeed_sig_expr *sig_exprs_SPI2MOSI_SPI2MOSI[] = { (&sig_expr_SPI2MOSI_SPI2MOSI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_140_SPI2MOSI[(sizeof(sig_exprs_SPI2MOSI_SPI2MOSI) / sizeof((sig_exprs_SPI2MOSI_SPI2MOSI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI2MOSI_SPI2MOSI)), typeof(&(sig_exprs_SPI2MOSI_SPI2MOSI)[0])))); })))] __attribute__((alias("sig_exprs_SPI2MOSI_SPI2MOSI"))); static const struct aspeed_sig_desc sig_descs_GPIOR4_GPIOR4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR4_GPIOR4 = { .signal = "GPIOR4", .function = "GPIOR4", .ndescs = (sizeof(sig_descs_GPIOR4_GPIOR4) / sizeof((sig_descs_GPIOR4_GPIOR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR4_GPIOR4)), typeof(&(sig_descs_GPIOR4_GPIOR4)[0])))); }))), .descs = &(sig_descs_GPIOR4_GPIOR4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR4_GPIOR4[] = { (&sig_expr_GPIOR4_GPIOR4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_140_GPIOR4[(sizeof(sig_exprs_GPIOR4_GPIOR4) / sizeof((sig_exprs_GPIOR4_GPIOR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR4_GPIOR4)), typeof(&(sig_exprs_GPIOR4_GPIOR4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR4_GPIOR4"))); static const struct aspeed_sig_expr **pin_exprs_140[] = { sig_exprs_140_SPI2MOSI, sig_exprs_140_GPIOR4, ((void *)0) }; static const struct aspeed_pin_desc pin_140 = { "140", (&pin_exprs_140[0]) }; static const int group_pins_SPI2MOSI[] = { 140 }; static const char *func_groups_SPI2MOSI[] = { "SPI2MOSI" };


static const struct aspeed_sig_desc sig_descs_SPI2MISO_SPI2MISO[] = { { 0, 0x88, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_SPI2MISO_SPI2MISO = { .signal = "SPI2MISO", .function = "SPI2MISO", .ndescs = (sizeof(sig_descs_SPI2MISO_SPI2MISO) / sizeof((sig_descs_SPI2MISO_SPI2MISO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI2MISO_SPI2MISO)), typeof(&(sig_descs_SPI2MISO_SPI2MISO)[0])))); }))), .descs = &(sig_descs_SPI2MISO_SPI2MISO)[0], }; static const struct aspeed_sig_expr *sig_exprs_SPI2MISO_SPI2MISO[] = { (&sig_expr_SPI2MISO_SPI2MISO), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_141_SPI2MISO[(sizeof(sig_exprs_SPI2MISO_SPI2MISO) / sizeof((sig_exprs_SPI2MISO_SPI2MISO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI2MISO_SPI2MISO)), typeof(&(sig_exprs_SPI2MISO_SPI2MISO)[0])))); })))] __attribute__((alias("sig_exprs_SPI2MISO_SPI2MISO"))); static const struct aspeed_sig_desc sig_descs_GPIOR5_GPIOR5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR5_GPIOR5 = { .signal = "GPIOR5", .function = "GPIOR5", .ndescs = (sizeof(sig_descs_GPIOR5_GPIOR5) / sizeof((sig_descs_GPIOR5_GPIOR5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR5_GPIOR5)), typeof(&(sig_descs_GPIOR5_GPIOR5)[0])))); }))), .descs = &(sig_descs_GPIOR5_GPIOR5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR5_GPIOR5[] = { (&sig_expr_GPIOR5_GPIOR5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_141_GPIOR5[(sizeof(sig_exprs_GPIOR5_GPIOR5) / sizeof((sig_exprs_GPIOR5_GPIOR5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR5_GPIOR5)), typeof(&(sig_exprs_GPIOR5_GPIOR5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR5_GPIOR5"))); static const struct aspeed_sig_expr **pin_exprs_141[] = { sig_exprs_141_SPI2MISO, sig_exprs_141_GPIOR5, ((void *)0) }; static const struct aspeed_pin_desc pin_141 = { "141", (&pin_exprs_141[0]) }; static const int group_pins_SPI2MISO[] = { 141 }; static const char *func_groups_SPI2MISO[] = { "SPI2MISO" };


static const struct aspeed_sig_desc sig_descs_MDC1_MDIO1[] = { { 0, 0x88, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_MDC1_MDIO1 = { .signal = "MDC1", .function = "MDIO1", .ndescs = (sizeof(sig_descs_MDC1_MDIO1) / sizeof((sig_descs_MDC1_MDIO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_MDC1_MDIO1)), typeof(&(sig_descs_MDC1_MDIO1)[0])))); }))), .descs = &(sig_descs_MDC1_MDIO1)[0], }; static const struct aspeed_sig_expr *sig_exprs_MDC1_MDIO1[] = { (&sig_expr_MDC1_MDIO1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_142_MDC1[(sizeof(sig_exprs_MDC1_MDIO1) / sizeof((sig_exprs_MDC1_MDIO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_MDC1_MDIO1)), typeof(&(sig_exprs_MDC1_MDIO1)[0])))); })))] __attribute__((alias("sig_exprs_MDC1_MDIO1")));
static const struct aspeed_sig_desc sig_descs_GPIOR6_GPIOR6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR6_GPIOR6 = { .signal = "GPIOR6", .function = "GPIOR6", .ndescs = (sizeof(sig_descs_GPIOR6_GPIOR6) / sizeof((sig_descs_GPIOR6_GPIOR6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR6_GPIOR6)), typeof(&(sig_descs_GPIOR6_GPIOR6)[0])))); }))), .descs = &(sig_descs_GPIOR6_GPIOR6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR6_GPIOR6[] = { (&sig_expr_GPIOR6_GPIOR6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_142_GPIOR6[(sizeof(sig_exprs_GPIOR6_GPIOR6) / sizeof((sig_exprs_GPIOR6_GPIOR6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR6_GPIOR6)), typeof(&(sig_exprs_GPIOR6_GPIOR6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR6_GPIOR6"))); static const struct aspeed_sig_expr **pin_exprs_142[] = { sig_exprs_142_MDC1, sig_exprs_142_GPIOR6, ((void *)0) }; static const struct aspeed_pin_desc pin_142 = { "142", (&pin_exprs_142[0]) };


static const struct aspeed_sig_desc sig_descs_MDIO1_MDIO1[] = { { 0, 0x88, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_MDIO1_MDIO1 = { .signal = "MDIO1", .function = "MDIO1", .ndescs = (sizeof(sig_descs_MDIO1_MDIO1) / sizeof((sig_descs_MDIO1_MDIO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_MDIO1_MDIO1)), typeof(&(sig_descs_MDIO1_MDIO1)[0])))); }))), .descs = &(sig_descs_MDIO1_MDIO1)[0], }; static const struct aspeed_sig_expr *sig_exprs_MDIO1_MDIO1[] = { (&sig_expr_MDIO1_MDIO1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_143_MDIO1[(sizeof(sig_exprs_MDIO1_MDIO1) / sizeof((sig_exprs_MDIO1_MDIO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_MDIO1_MDIO1)), typeof(&(sig_exprs_MDIO1_MDIO1)[0])))); })))] __attribute__((alias("sig_exprs_MDIO1_MDIO1")));
static const struct aspeed_sig_desc sig_descs_GPIOR7_GPIOR7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOR7_GPIOR7 = { .signal = "GPIOR7", .function = "GPIOR7", .ndescs = (sizeof(sig_descs_GPIOR7_GPIOR7) / sizeof((sig_descs_GPIOR7_GPIOR7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOR7_GPIOR7)), typeof(&(sig_descs_GPIOR7_GPIOR7)[0])))); }))), .descs = &(sig_descs_GPIOR7_GPIOR7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOR7_GPIOR7[] = { (&sig_expr_GPIOR7_GPIOR7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_143_GPIOR7[(sizeof(sig_exprs_GPIOR7_GPIOR7) / sizeof((sig_exprs_GPIOR7_GPIOR7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOR7_GPIOR7)), typeof(&(sig_exprs_GPIOR7_GPIOR7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOR7_GPIOR7"))); static const struct aspeed_sig_expr **pin_exprs_143[] = { sig_exprs_143_MDIO1, sig_exprs_143_GPIOR7, ((void *)0) }; static const struct aspeed_pin_desc pin_143 = { "143", (&pin_exprs_143[0]) };

static const int group_pins_MDIO1[] = { 142, 143 }; static const char *func_groups_MDIO1[] = { "MDIO1" };
# 1032 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
static const struct aspeed_sig_desc sig_descs_VPOB2_VPO[] = { { 0, 0x8C, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB2_VPO = { .signal = "VPOB2", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB2_VPO) / sizeof((sig_descs_VPOB2_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB2_VPO)), typeof(&(sig_descs_VPOB2_VPO)[0])))); }))), .descs = &(sig_descs_VPOB2_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB2_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB2_VPOOFF1 = { .signal = "VPOB2", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB2_VPOOFF1) / sizeof((sig_descs_VPOB2_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB2_VPOOFF1)), typeof(&(sig_descs_VPOB2_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB2_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB2_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB2_VPOOFF2 = { .signal = "VPOB2", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB2_VPOOFF2) / sizeof((sig_descs_VPOB2_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB2_VPOOFF2)), typeof(&(sig_descs_VPOB2_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB2_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB2_VPO[] = { (&sig_expr_VPOB2_VPO), (&sig_expr_VPOB2_VPOOFF1), (&sig_expr_VPOB2_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_144_VPOB2[(sizeof(sig_exprs_VPOB2_VPO) / sizeof((sig_exprs_VPOB2_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB2_VPO)), typeof(&(sig_exprs_VPOB2_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB2_VPO")));
static const struct aspeed_sig_desc sig_descs_SPI2CS1_SPI2CS1[] = { { 0, 0x8C, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SPI2CS1_SPI2CS1 = { .signal = "SPI2CS1", .function = "SPI2CS1", .ndescs = (sizeof(sig_descs_SPI2CS1_SPI2CS1) / sizeof((sig_descs_SPI2CS1_SPI2CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SPI2CS1_SPI2CS1)), typeof(&(sig_descs_SPI2CS1_SPI2CS1)[0])))); }))), .descs = &(sig_descs_SPI2CS1_SPI2CS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SPI2CS1_SPI2CS1[] = { (&sig_expr_SPI2CS1_SPI2CS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_144_SPI2CS1[(sizeof(sig_exprs_SPI2CS1_SPI2CS1) / sizeof((sig_exprs_SPI2CS1_SPI2CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SPI2CS1_SPI2CS1)), typeof(&(sig_exprs_SPI2CS1_SPI2CS1)[0])))); })))] __attribute__((alias("sig_exprs_SPI2CS1_SPI2CS1")));
static const struct aspeed_sig_desc sig_descs_GPIOS0_GPIOS0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS0_GPIOS0 = { .signal = "GPIOS0", .function = "GPIOS0", .ndescs = (sizeof(sig_descs_GPIOS0_GPIOS0) / sizeof((sig_descs_GPIOS0_GPIOS0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS0_GPIOS0)), typeof(&(sig_descs_GPIOS0_GPIOS0)[0])))); }))), .descs = &(sig_descs_GPIOS0_GPIOS0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS0_GPIOS0[] = { (&sig_expr_GPIOS0_GPIOS0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_144_GPIOS0[(sizeof(sig_exprs_GPIOS0_GPIOS0) / sizeof((sig_exprs_GPIOS0_GPIOS0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS0_GPIOS0)), typeof(&(sig_exprs_GPIOS0_GPIOS0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS0_GPIOS0"))); static const struct aspeed_sig_expr **pin_exprs_144[] = { sig_exprs_144_VPOB2, sig_exprs_144_SPI2CS1, sig_exprs_144_GPIOS0, ((void *)0) }; static const struct aspeed_pin_desc pin_144 = { "144", (&pin_exprs_144[0]) };
static const int group_pins_SPI2CS1[] = { 144 }; static const char *func_groups_SPI2CS1[] = { "SPI2CS1" };



static const struct aspeed_sig_desc sig_descs_VPOB3_VPO[] = { { 0, 0x8C, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB3_VPO = { .signal = "VPOB3", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB3_VPO) / sizeof((sig_descs_VPOB3_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB3_VPO)), typeof(&(sig_descs_VPOB3_VPO)[0])))); }))), .descs = &(sig_descs_VPOB3_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB3_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB3_VPOOFF1 = { .signal = "VPOB3", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB3_VPOOFF1) / sizeof((sig_descs_VPOB3_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB3_VPOOFF1)), typeof(&(sig_descs_VPOB3_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB3_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB3_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB3_VPOOFF2 = { .signal = "VPOB3", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB3_VPOOFF2) / sizeof((sig_descs_VPOB3_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB3_VPOOFF2)), typeof(&(sig_descs_VPOB3_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB3_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB3_VPO[] = { (&sig_expr_VPOB3_VPO), (&sig_expr_VPOB3_VPOOFF1), (&sig_expr_VPOB3_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_145_VPOB3[(sizeof(sig_exprs_VPOB3_VPO) / sizeof((sig_exprs_VPOB3_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB3_VPO)), typeof(&(sig_exprs_VPOB3_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB3_VPO")));
static const struct aspeed_sig_desc sig_descs_BMCINT_BMCINT[] = { { 0, 0x8C, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_BMCINT_BMCINT = { .signal = "BMCINT", .function = "BMCINT", .ndescs = (sizeof(sig_descs_BMCINT_BMCINT) / sizeof((sig_descs_BMCINT_BMCINT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_BMCINT_BMCINT)), typeof(&(sig_descs_BMCINT_BMCINT)[0])))); }))), .descs = &(sig_descs_BMCINT_BMCINT)[0], }; static const struct aspeed_sig_expr *sig_exprs_BMCINT_BMCINT[] = { (&sig_expr_BMCINT_BMCINT), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_145_BMCINT[(sizeof(sig_exprs_BMCINT_BMCINT) / sizeof((sig_exprs_BMCINT_BMCINT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_BMCINT_BMCINT)), typeof(&(sig_exprs_BMCINT_BMCINT)[0])))); })))] __attribute__((alias("sig_exprs_BMCINT_BMCINT")));
static const struct aspeed_sig_desc sig_descs_GPIOS1_GPIOS1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS1_GPIOS1 = { .signal = "GPIOS1", .function = "GPIOS1", .ndescs = (sizeof(sig_descs_GPIOS1_GPIOS1) / sizeof((sig_descs_GPIOS1_GPIOS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS1_GPIOS1)), typeof(&(sig_descs_GPIOS1_GPIOS1)[0])))); }))), .descs = &(sig_descs_GPIOS1_GPIOS1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS1_GPIOS1[] = { (&sig_expr_GPIOS1_GPIOS1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_145_GPIOS1[(sizeof(sig_exprs_GPIOS1_GPIOS1) / sizeof((sig_exprs_GPIOS1_GPIOS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS1_GPIOS1)), typeof(&(sig_exprs_GPIOS1_GPIOS1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS1_GPIOS1"))); static const struct aspeed_sig_expr **pin_exprs_145[] = { sig_exprs_145_VPOB3, sig_exprs_145_BMCINT, sig_exprs_145_GPIOS1, ((void *)0) }; static const struct aspeed_pin_desc pin_145 = { "145", (&pin_exprs_145[0]) };
static const int group_pins_BMCINT[] = { 145 }; static const char *func_groups_BMCINT[] = { "BMCINT" };



static const struct aspeed_sig_desc sig_descs_VPOB4_VPO[] = { { 0, 0x8C, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB4_VPO = { .signal = "VPOB4", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB4_VPO) / sizeof((sig_descs_VPOB4_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB4_VPO)), typeof(&(sig_descs_VPOB4_VPO)[0])))); }))), .descs = &(sig_descs_VPOB4_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB4_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB4_VPOOFF1 = { .signal = "VPOB4", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB4_VPOOFF1) / sizeof((sig_descs_VPOB4_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB4_VPOOFF1)), typeof(&(sig_descs_VPOB4_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB4_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB4_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB4_VPOOFF2 = { .signal = "VPOB4", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB4_VPOOFF2) / sizeof((sig_descs_VPOB4_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB4_VPOOFF2)), typeof(&(sig_descs_VPOB4_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB4_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB4_VPO[] = { (&sig_expr_VPOB4_VPO), (&sig_expr_VPOB4_VPOOFF1), (&sig_expr_VPOB4_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_146_VPOB4[(sizeof(sig_exprs_VPOB4_VPO) / sizeof((sig_exprs_VPOB4_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB4_VPO)), typeof(&(sig_exprs_VPOB4_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB4_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT5_SALT5[] = { { 0, 0x8C, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT5_SALT5 = { .signal = "SALT5", .function = "SALT5", .ndescs = (sizeof(sig_descs_SALT5_SALT5) / sizeof((sig_descs_SALT5_SALT5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT5_SALT5)), typeof(&(sig_descs_SALT5_SALT5)[0])))); }))), .descs = &(sig_descs_SALT5_SALT5)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT5_SALT5[] = { (&sig_expr_SALT5_SALT5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_146_SALT5[(sizeof(sig_exprs_SALT5_SALT5) / sizeof((sig_exprs_SALT5_SALT5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT5_SALT5)), typeof(&(sig_exprs_SALT5_SALT5)[0])))); })))] __attribute__((alias("sig_exprs_SALT5_SALT5")));
static const struct aspeed_sig_desc sig_descs_GPIOS2_GPIOS2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS2_GPIOS2 = { .signal = "GPIOS2", .function = "GPIOS2", .ndescs = (sizeof(sig_descs_GPIOS2_GPIOS2) / sizeof((sig_descs_GPIOS2_GPIOS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS2_GPIOS2)), typeof(&(sig_descs_GPIOS2_GPIOS2)[0])))); }))), .descs = &(sig_descs_GPIOS2_GPIOS2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS2_GPIOS2[] = { (&sig_expr_GPIOS2_GPIOS2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_146_GPIOS2[(sizeof(sig_exprs_GPIOS2_GPIOS2) / sizeof((sig_exprs_GPIOS2_GPIOS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS2_GPIOS2)), typeof(&(sig_exprs_GPIOS2_GPIOS2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS2_GPIOS2"))); static const struct aspeed_sig_expr **pin_exprs_146[] = { sig_exprs_146_VPOB4, sig_exprs_146_SALT5, sig_exprs_146_GPIOS2, ((void *)0) }; static const struct aspeed_pin_desc pin_146 = { "146", (&pin_exprs_146[0]) };
static const int group_pins_SALT5[] = { 146 }; static const char *func_groups_SALT5[] = { "SALT5" };



static const struct aspeed_sig_desc sig_descs_VPOB5_VPO[] = { { 0, 0x8C, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB5_VPO = { .signal = "VPOB5", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB5_VPO) / sizeof((sig_descs_VPOB5_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB5_VPO)), typeof(&(sig_descs_VPOB5_VPO)[0])))); }))), .descs = &(sig_descs_VPOB5_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB5_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB5_VPOOFF1 = { .signal = "VPOB5", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB5_VPOOFF1) / sizeof((sig_descs_VPOB5_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB5_VPOOFF1)), typeof(&(sig_descs_VPOB5_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB5_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB5_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB5_VPOOFF2 = { .signal = "VPOB5", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB5_VPOOFF2) / sizeof((sig_descs_VPOB5_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB5_VPOOFF2)), typeof(&(sig_descs_VPOB5_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB5_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB5_VPO[] = { (&sig_expr_VPOB5_VPO), (&sig_expr_VPOB5_VPOOFF1), (&sig_expr_VPOB5_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_147_VPOB5[(sizeof(sig_exprs_VPOB5_VPO) / sizeof((sig_exprs_VPOB5_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB5_VPO)), typeof(&(sig_exprs_VPOB5_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB5_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT6_SALT6[] = { { 0, 0x8C, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT6_SALT6 = { .signal = "SALT6", .function = "SALT6", .ndescs = (sizeof(sig_descs_SALT6_SALT6) / sizeof((sig_descs_SALT6_SALT6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT6_SALT6)), typeof(&(sig_descs_SALT6_SALT6)[0])))); }))), .descs = &(sig_descs_SALT6_SALT6)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT6_SALT6[] = { (&sig_expr_SALT6_SALT6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_147_SALT6[(sizeof(sig_exprs_SALT6_SALT6) / sizeof((sig_exprs_SALT6_SALT6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT6_SALT6)), typeof(&(sig_exprs_SALT6_SALT6)[0])))); })))] __attribute__((alias("sig_exprs_SALT6_SALT6")));
static const struct aspeed_sig_desc sig_descs_GPIOS3_GPIOS3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS3_GPIOS3 = { .signal = "GPIOS3", .function = "GPIOS3", .ndescs = (sizeof(sig_descs_GPIOS3_GPIOS3) / sizeof((sig_descs_GPIOS3_GPIOS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS3_GPIOS3)), typeof(&(sig_descs_GPIOS3_GPIOS3)[0])))); }))), .descs = &(sig_descs_GPIOS3_GPIOS3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS3_GPIOS3[] = { (&sig_expr_GPIOS3_GPIOS3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_147_GPIOS3[(sizeof(sig_exprs_GPIOS3_GPIOS3) / sizeof((sig_exprs_GPIOS3_GPIOS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS3_GPIOS3)), typeof(&(sig_exprs_GPIOS3_GPIOS3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS3_GPIOS3"))); static const struct aspeed_sig_expr **pin_exprs_147[] = { sig_exprs_147_VPOB5, sig_exprs_147_SALT6, sig_exprs_147_GPIOS3, ((void *)0) }; static const struct aspeed_pin_desc pin_147 = { "147", (&pin_exprs_147[0]) };
static const int group_pins_SALT6[] = { 147 }; static const char *func_groups_SALT6[] = { "SALT6" };



static const struct aspeed_sig_desc sig_descs_VPOB6_VPO[] = { { 0, 0x8C, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB6_VPO = { .signal = "VPOB6", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB6_VPO) / sizeof((sig_descs_VPOB6_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB6_VPO)), typeof(&(sig_descs_VPOB6_VPO)[0])))); }))), .descs = &(sig_descs_VPOB6_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB6_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB6_VPOOFF1 = { .signal = "VPOB6", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB6_VPOOFF1) / sizeof((sig_descs_VPOB6_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB6_VPOOFF1)), typeof(&(sig_descs_VPOB6_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB6_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB6_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB6_VPOOFF2 = { .signal = "VPOB6", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB6_VPOOFF2) / sizeof((sig_descs_VPOB6_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB6_VPOOFF2)), typeof(&(sig_descs_VPOB6_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB6_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB6_VPO[] = { (&sig_expr_VPOB6_VPO), (&sig_expr_VPOB6_VPOOFF1), (&sig_expr_VPOB6_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_148_VPOB6[(sizeof(sig_exprs_VPOB6_VPO) / sizeof((sig_exprs_VPOB6_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB6_VPO)), typeof(&(sig_exprs_VPOB6_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB6_VPO")));
static const struct aspeed_sig_desc sig_descs_GPIOS4_GPIOS4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS4_GPIOS4 = { .signal = "GPIOS4", .function = "GPIOS4", .ndescs = (sizeof(sig_descs_GPIOS4_GPIOS4) / sizeof((sig_descs_GPIOS4_GPIOS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS4_GPIOS4)), typeof(&(sig_descs_GPIOS4_GPIOS4)[0])))); }))), .descs = &(sig_descs_GPIOS4_GPIOS4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS4_GPIOS4[] = { (&sig_expr_GPIOS4_GPIOS4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_148_GPIOS4[(sizeof(sig_exprs_GPIOS4_GPIOS4) / sizeof((sig_exprs_GPIOS4_GPIOS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS4_GPIOS4)), typeof(&(sig_exprs_GPIOS4_GPIOS4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS4_GPIOS4"))); static const struct aspeed_sig_expr **pin_exprs_148[] = { sig_exprs_148_VPOB6, sig_exprs_148_GPIOS4, ((void *)0) }; static const struct aspeed_pin_desc pin_148 = { "148", (&pin_exprs_148[0]) };



static const struct aspeed_sig_desc sig_descs_VPOB7_VPO[] = { { 0, 0x8C, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB7_VPO = { .signal = "VPOB7", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB7_VPO) / sizeof((sig_descs_VPOB7_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB7_VPO)), typeof(&(sig_descs_VPOB7_VPO)[0])))); }))), .descs = &(sig_descs_VPOB7_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB7_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB7_VPOOFF1 = { .signal = "VPOB7", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB7_VPOOFF1) / sizeof((sig_descs_VPOB7_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB7_VPOOFF1)), typeof(&(sig_descs_VPOB7_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB7_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB7_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB7_VPOOFF2 = { .signal = "VPOB7", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB7_VPOOFF2) / sizeof((sig_descs_VPOB7_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB7_VPOOFF2)), typeof(&(sig_descs_VPOB7_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB7_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB7_VPO[] = { (&sig_expr_VPOB7_VPO), (&sig_expr_VPOB7_VPOOFF1), (&sig_expr_VPOB7_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_149_VPOB7[(sizeof(sig_exprs_VPOB7_VPO) / sizeof((sig_exprs_VPOB7_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB7_VPO)), typeof(&(sig_exprs_VPOB7_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB7_VPO")));
static const struct aspeed_sig_desc sig_descs_GPIOS5_GPIOS5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS5_GPIOS5 = { .signal = "GPIOS5", .function = "GPIOS5", .ndescs = (sizeof(sig_descs_GPIOS5_GPIOS5) / sizeof((sig_descs_GPIOS5_GPIOS5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS5_GPIOS5)), typeof(&(sig_descs_GPIOS5_GPIOS5)[0])))); }))), .descs = &(sig_descs_GPIOS5_GPIOS5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS5_GPIOS5[] = { (&sig_expr_GPIOS5_GPIOS5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_149_GPIOS5[(sizeof(sig_exprs_GPIOS5_GPIOS5) / sizeof((sig_exprs_GPIOS5_GPIOS5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS5_GPIOS5)), typeof(&(sig_exprs_GPIOS5_GPIOS5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS5_GPIOS5"))); static const struct aspeed_sig_expr **pin_exprs_149[] = { sig_exprs_149_VPOB7, sig_exprs_149_GPIOS5, ((void *)0) }; static const struct aspeed_pin_desc pin_149 = { "149", (&pin_exprs_149[0]) };



static const struct aspeed_sig_desc sig_descs_VPOB8_VPO[] = { { 0, 0x8C, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB8_VPO = { .signal = "VPOB8", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB8_VPO) / sizeof((sig_descs_VPOB8_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB8_VPO)), typeof(&(sig_descs_VPOB8_VPO)[0])))); }))), .descs = &(sig_descs_VPOB8_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB8_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB8_VPOOFF1 = { .signal = "VPOB8", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB8_VPOOFF1) / sizeof((sig_descs_VPOB8_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB8_VPOOFF1)), typeof(&(sig_descs_VPOB8_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB8_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB8_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB8_VPOOFF2 = { .signal = "VPOB8", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB8_VPOOFF2) / sizeof((sig_descs_VPOB8_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB8_VPOOFF2)), typeof(&(sig_descs_VPOB8_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB8_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB8_VPO[] = { (&sig_expr_VPOB8_VPO), (&sig_expr_VPOB8_VPOOFF1), (&sig_expr_VPOB8_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_150_VPOB8[(sizeof(sig_exprs_VPOB8_VPO) / sizeof((sig_exprs_VPOB8_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB8_VPO)), typeof(&(sig_exprs_VPOB8_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB8_VPO")));
static const struct aspeed_sig_desc sig_descs_GPIOS6_GPIOS6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS6_GPIOS6 = { .signal = "GPIOS6", .function = "GPIOS6", .ndescs = (sizeof(sig_descs_GPIOS6_GPIOS6) / sizeof((sig_descs_GPIOS6_GPIOS6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS6_GPIOS6)), typeof(&(sig_descs_GPIOS6_GPIOS6)[0])))); }))), .descs = &(sig_descs_GPIOS6_GPIOS6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS6_GPIOS6[] = { (&sig_expr_GPIOS6_GPIOS6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_150_GPIOS6[(sizeof(sig_exprs_GPIOS6_GPIOS6) / sizeof((sig_exprs_GPIOS6_GPIOS6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS6_GPIOS6)), typeof(&(sig_exprs_GPIOS6_GPIOS6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS6_GPIOS6"))); static const struct aspeed_sig_expr **pin_exprs_150[] = { sig_exprs_150_VPOB8, sig_exprs_150_GPIOS6, ((void *)0) }; static const struct aspeed_pin_desc pin_150 = { "150", (&pin_exprs_150[0]) };



static const struct aspeed_sig_desc sig_descs_VPOB9_VPO[] = { { 0, 0x8C, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB9_VPO = { .signal = "VPOB9", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOB9_VPO) / sizeof((sig_descs_VPOB9_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB9_VPO)), typeof(&(sig_descs_VPOB9_VPO)[0])))); }))), .descs = &(sig_descs_VPOB9_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB9_VPOOFF1[] = { { 0, 0x8C, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB9_VPOOFF1 = { .signal = "VPOB9", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOB9_VPOOFF1) / sizeof((sig_descs_VPOB9_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB9_VPOOFF1)), typeof(&(sig_descs_VPOB9_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOB9_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOB9_VPOOFF2[] = { { 0, 0x8C, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOB9_VPOOFF2 = { .signal = "VPOB9", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOB9_VPOOFF2) / sizeof((sig_descs_VPOB9_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOB9_VPOOFF2)), typeof(&(sig_descs_VPOB9_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOB9_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOB9_VPO[] = { (&sig_expr_VPOB9_VPO), (&sig_expr_VPOB9_VPOOFF1), (&sig_expr_VPOB9_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_151_VPOB9[(sizeof(sig_exprs_VPOB9_VPO) / sizeof((sig_exprs_VPOB9_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOB9_VPO)), typeof(&(sig_exprs_VPOB9_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOB9_VPO")));
static const struct aspeed_sig_desc sig_descs_GPIOS7_GPIOS7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOS7_GPIOS7 = { .signal = "GPIOS7", .function = "GPIOS7", .ndescs = (sizeof(sig_descs_GPIOS7_GPIOS7) / sizeof((sig_descs_GPIOS7_GPIOS7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOS7_GPIOS7)), typeof(&(sig_descs_GPIOS7_GPIOS7)[0])))); }))), .descs = &(sig_descs_GPIOS7_GPIOS7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOS7_GPIOS7[] = { (&sig_expr_GPIOS7_GPIOS7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_151_GPIOS7[(sizeof(sig_exprs_GPIOS7_GPIOS7) / sizeof((sig_exprs_GPIOS7_GPIOS7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOS7_GPIOS7)), typeof(&(sig_exprs_GPIOS7_GPIOS7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOS7_GPIOS7"))); static const struct aspeed_sig_expr **pin_exprs_151[] = { sig_exprs_151_VPOB9, sig_exprs_151_GPIOS7, ((void *)0) }; static const struct aspeed_pin_desc pin_151 = { "151", (&pin_exprs_151[0]) };







static const struct aspeed_sig_desc sig_descs_GPIOT0_GPIOT0[] = { { 0, 0xA0, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT0_GPIOT0 = { .signal = "GPIOT0", .function = "GPIOT0", .ndescs = (sizeof(sig_descs_GPIOT0_GPIOT0) / sizeof((sig_descs_GPIOT0_GPIOT0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT0_GPIOT0)), typeof(&(sig_descs_GPIOT0_GPIOT0)[0])))); }))), .descs = &(sig_descs_GPIOT0_GPIOT0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT0_GPIOT0[] = { (&sig_expr_GPIOT0_GPIOT0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_152_GPIOT0[(sizeof(sig_exprs_GPIOT0_GPIOT0) / sizeof((sig_exprs_GPIOT0_GPIOT0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT0_GPIOT0)), typeof(&(sig_exprs_GPIOT0_GPIOT0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT0_GPIOT0")));
static const struct aspeed_sig_desc sig_descs_RMII1RCLKO_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) }, { 0, 0x48, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1RCLKO_RMII1 = { .signal = "RMII1RCLKO", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1RCLKO_RMII1) / sizeof((sig_descs_RMII1RCLKO_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1RCLKO_RMII1)), typeof(&(sig_descs_RMII1RCLKO_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1RCLKO_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1RCLKO_RMII1[] = { (&sig_expr_RMII1RCLKO_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_152_RMII1RCLKO[(sizeof(sig_exprs_RMII1RCLKO_RMII1) / sizeof((sig_exprs_RMII1RCLKO_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1RCLKO_RMII1)), typeof(&(sig_exprs_RMII1RCLKO_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1RCLKO_RMII1")));

static const struct aspeed_sig_desc sig_descs_RGMII1TXCK_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1TXCK_RGMII1 = { .signal = "RGMII1TXCK", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1TXCK_RGMII1) / sizeof((sig_descs_RGMII1TXCK_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1TXCK_RGMII1)), typeof(&(sig_descs_RGMII1TXCK_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1TXCK_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1TXCK_RGMII1[] = { (&sig_expr_RGMII1TXCK_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_152_RGMII1TXCK[(sizeof(sig_exprs_RGMII1TXCK_RGMII1) / sizeof((sig_exprs_RGMII1TXCK_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1TXCK_RGMII1)), typeof(&(sig_exprs_RGMII1TXCK_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1TXCK_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_152[] = { sig_exprs_152_GPIOT0, sig_exprs_152_RMII1RCLKO, sig_exprs_152_RGMII1TXCK, ((void *)0) }; static const struct aspeed_pin_desc pin_152 = { "B5", (&pin_exprs_152[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT1_GPIOT1[] = { { 0, 0xA0, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT1_GPIOT1 = { .signal = "GPIOT1", .function = "GPIOT1", .ndescs = (sizeof(sig_descs_GPIOT1_GPIOT1) / sizeof((sig_descs_GPIOT1_GPIOT1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT1_GPIOT1)), typeof(&(sig_descs_GPIOT1_GPIOT1)[0])))); }))), .descs = &(sig_descs_GPIOT1_GPIOT1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT1_GPIOT1[] = { (&sig_expr_GPIOT1_GPIOT1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_153_GPIOT1[(sizeof(sig_exprs_GPIOT1_GPIOT1) / sizeof((sig_exprs_GPIOT1_GPIOT1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT1_GPIOT1)), typeof(&(sig_exprs_GPIOT1_GPIOT1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT1_GPIOT1")));
static const struct aspeed_sig_desc sig_descs_RMII1TXEN_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1TXEN_RMII1 = { .signal = "RMII1TXEN", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1TXEN_RMII1) / sizeof((sig_descs_RMII1TXEN_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1TXEN_RMII1)), typeof(&(sig_descs_RMII1TXEN_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1TXEN_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1TXEN_RMII1[] = { (&sig_expr_RMII1TXEN_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_153_RMII1TXEN[(sizeof(sig_exprs_RMII1TXEN_RMII1) / sizeof((sig_exprs_RMII1TXEN_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1TXEN_RMII1)), typeof(&(sig_exprs_RMII1TXEN_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1TXEN_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1TXCTL_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1TXCTL_RGMII1 = { .signal = "RGMII1TXCTL", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1TXCTL_RGMII1) / sizeof((sig_descs_RGMII1TXCTL_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1TXCTL_RGMII1)), typeof(&(sig_descs_RGMII1TXCTL_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1TXCTL_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1TXCTL_RGMII1[] = { (&sig_expr_RGMII1TXCTL_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_153_RGMII1TXCTL[(sizeof(sig_exprs_RGMII1TXCTL_RGMII1) / sizeof((sig_exprs_RGMII1TXCTL_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1TXCTL_RGMII1)), typeof(&(sig_exprs_RGMII1TXCTL_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1TXCTL_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_153[] = { sig_exprs_153_GPIOT1, sig_exprs_153_RMII1TXEN, sig_exprs_153_RGMII1TXCTL, ((void *)0) }; static const struct aspeed_pin_desc pin_153 = { "E9", (&pin_exprs_153[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT2_GPIOT2[] = { { 0, 0xA0, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT2_GPIOT2 = { .signal = "GPIOT2", .function = "GPIOT2", .ndescs = (sizeof(sig_descs_GPIOT2_GPIOT2) / sizeof((sig_descs_GPIOT2_GPIOT2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT2_GPIOT2)), typeof(&(sig_descs_GPIOT2_GPIOT2)[0])))); }))), .descs = &(sig_descs_GPIOT2_GPIOT2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT2_GPIOT2[] = { (&sig_expr_GPIOT2_GPIOT2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_154_GPIOT2[(sizeof(sig_exprs_GPIOT2_GPIOT2) / sizeof((sig_exprs_GPIOT2_GPIOT2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT2_GPIOT2)), typeof(&(sig_exprs_GPIOT2_GPIOT2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT2_GPIOT2")));
static const struct aspeed_sig_desc sig_descs_RMII1TXD0_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1TXD0_RMII1 = { .signal = "RMII1TXD0", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1TXD0_RMII1) / sizeof((sig_descs_RMII1TXD0_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1TXD0_RMII1)), typeof(&(sig_descs_RMII1TXD0_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1TXD0_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1TXD0_RMII1[] = { (&sig_expr_RMII1TXD0_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_154_RMII1TXD0[(sizeof(sig_exprs_RMII1TXD0_RMII1) / sizeof((sig_exprs_RMII1TXD0_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1TXD0_RMII1)), typeof(&(sig_exprs_RMII1TXD0_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1TXD0_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1TXD0_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1TXD0_RGMII1 = { .signal = "RGMII1TXD0", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1TXD0_RGMII1) / sizeof((sig_descs_RGMII1TXD0_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1TXD0_RGMII1)), typeof(&(sig_descs_RGMII1TXD0_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1TXD0_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1TXD0_RGMII1[] = { (&sig_expr_RGMII1TXD0_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_154_RGMII1TXD0[(sizeof(sig_exprs_RGMII1TXD0_RGMII1) / sizeof((sig_exprs_RGMII1TXD0_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1TXD0_RGMII1)), typeof(&(sig_exprs_RGMII1TXD0_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1TXD0_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_154[] = { sig_exprs_154_GPIOT2, sig_exprs_154_RMII1TXD0, sig_exprs_154_RGMII1TXD0, ((void *)0) }; static const struct aspeed_pin_desc pin_154 = { "F9", (&pin_exprs_154[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT3_GPIOT3[] = { { 0, 0xA0, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT3_GPIOT3 = { .signal = "GPIOT3", .function = "GPIOT3", .ndescs = (sizeof(sig_descs_GPIOT3_GPIOT3) / sizeof((sig_descs_GPIOT3_GPIOT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT3_GPIOT3)), typeof(&(sig_descs_GPIOT3_GPIOT3)[0])))); }))), .descs = &(sig_descs_GPIOT3_GPIOT3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT3_GPIOT3[] = { (&sig_expr_GPIOT3_GPIOT3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_155_GPIOT3[(sizeof(sig_exprs_GPIOT3_GPIOT3) / sizeof((sig_exprs_GPIOT3_GPIOT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT3_GPIOT3)), typeof(&(sig_exprs_GPIOT3_GPIOT3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT3_GPIOT3")));
static const struct aspeed_sig_desc sig_descs_RMII1TXD1_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1TXD1_RMII1 = { .signal = "RMII1TXD1", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1TXD1_RMII1) / sizeof((sig_descs_RMII1TXD1_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1TXD1_RMII1)), typeof(&(sig_descs_RMII1TXD1_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1TXD1_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1TXD1_RMII1[] = { (&sig_expr_RMII1TXD1_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_155_RMII1TXD1[(sizeof(sig_exprs_RMII1TXD1_RMII1) / sizeof((sig_exprs_RMII1TXD1_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1TXD1_RMII1)), typeof(&(sig_exprs_RMII1TXD1_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1TXD1_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1TXD1_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1TXD1_RGMII1 = { .signal = "RGMII1TXD1", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1TXD1_RGMII1) / sizeof((sig_descs_RGMII1TXD1_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1TXD1_RGMII1)), typeof(&(sig_descs_RGMII1TXD1_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1TXD1_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1TXD1_RGMII1[] = { (&sig_expr_RGMII1TXD1_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_155_RGMII1TXD1[(sizeof(sig_exprs_RGMII1TXD1_RGMII1) / sizeof((sig_exprs_RGMII1TXD1_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1TXD1_RGMII1)), typeof(&(sig_exprs_RGMII1TXD1_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1TXD1_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_155[] = { sig_exprs_155_GPIOT3, sig_exprs_155_RMII1TXD1, sig_exprs_155_RGMII1TXD1, ((void *)0) }; static const struct aspeed_pin_desc pin_155 = { "A5", (&pin_exprs_155[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT4_GPIOT4[] = { { 0, 0xA0, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT4_GPIOT4 = { .signal = "GPIOT4", .function = "GPIOT4", .ndescs = (sizeof(sig_descs_GPIOT4_GPIOT4) / sizeof((sig_descs_GPIOT4_GPIOT4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT4_GPIOT4)), typeof(&(sig_descs_GPIOT4_GPIOT4)[0])))); }))), .descs = &(sig_descs_GPIOT4_GPIOT4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT4_GPIOT4[] = { (&sig_expr_GPIOT4_GPIOT4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_156_GPIOT4[(sizeof(sig_exprs_GPIOT4_GPIOT4) / sizeof((sig_exprs_GPIOT4_GPIOT4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT4_GPIOT4)), typeof(&(sig_exprs_GPIOT4_GPIOT4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT4_GPIOT4")));
static const struct aspeed_sig_desc sig_descs_RMII1DASH0_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1DASH0_RMII1 = { .signal = "RMII1DASH0", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1DASH0_RMII1) / sizeof((sig_descs_RMII1DASH0_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1DASH0_RMII1)), typeof(&(sig_descs_RMII1DASH0_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1DASH0_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1DASH0_RMII1[] = { (&sig_expr_RMII1DASH0_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_156_RMII1DASH0[(sizeof(sig_exprs_RMII1DASH0_RMII1) / sizeof((sig_exprs_RMII1DASH0_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1DASH0_RMII1)), typeof(&(sig_exprs_RMII1DASH0_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1DASH0_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1TXD2_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1TXD2_RGMII1 = { .signal = "RGMII1TXD2", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1TXD2_RGMII1) / sizeof((sig_descs_RGMII1TXD2_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1TXD2_RGMII1)), typeof(&(sig_descs_RGMII1TXD2_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1TXD2_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1TXD2_RGMII1[] = { (&sig_expr_RGMII1TXD2_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_156_RGMII1TXD2[(sizeof(sig_exprs_RGMII1TXD2_RGMII1) / sizeof((sig_exprs_RGMII1TXD2_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1TXD2_RGMII1)), typeof(&(sig_exprs_RGMII1TXD2_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1TXD2_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_156[] = { sig_exprs_156_GPIOT4, sig_exprs_156_RMII1DASH0, sig_exprs_156_RGMII1TXD2, ((void *)0) }; static const struct aspeed_pin_desc pin_156 = { "E7", (&pin_exprs_156[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT5_GPIOT5[] = { { 0, 0xA0, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT5_GPIOT5 = { .signal = "GPIOT5", .function = "GPIOT5", .ndescs = (sizeof(sig_descs_GPIOT5_GPIOT5) / sizeof((sig_descs_GPIOT5_GPIOT5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT5_GPIOT5)), typeof(&(sig_descs_GPIOT5_GPIOT5)[0])))); }))), .descs = &(sig_descs_GPIOT5_GPIOT5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT5_GPIOT5[] = { (&sig_expr_GPIOT5_GPIOT5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_157_GPIOT5[(sizeof(sig_exprs_GPIOT5_GPIOT5) / sizeof((sig_exprs_GPIOT5_GPIOT5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT5_GPIOT5)), typeof(&(sig_exprs_GPIOT5_GPIOT5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT5_GPIOT5")));
static const struct aspeed_sig_desc sig_descs_RMII1DASH1_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1DASH1_RMII1 = { .signal = "RMII1DASH1", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1DASH1_RMII1) / sizeof((sig_descs_RMII1DASH1_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1DASH1_RMII1)), typeof(&(sig_descs_RMII1DASH1_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1DASH1_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1DASH1_RMII1[] = { (&sig_expr_RMII1DASH1_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_157_RMII1DASH1[(sizeof(sig_exprs_RMII1DASH1_RMII1) / sizeof((sig_exprs_RMII1DASH1_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1DASH1_RMII1)), typeof(&(sig_exprs_RMII1DASH1_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1DASH1_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1TXD3_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1TXD3_RGMII1 = { .signal = "RGMII1TXD3", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1TXD3_RGMII1) / sizeof((sig_descs_RGMII1TXD3_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1TXD3_RGMII1)), typeof(&(sig_descs_RGMII1TXD3_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1TXD3_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1TXD3_RGMII1[] = { (&sig_expr_RGMII1TXD3_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_157_RGMII1TXD3[(sizeof(sig_exprs_RGMII1TXD3_RGMII1) / sizeof((sig_exprs_RGMII1TXD3_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1TXD3_RGMII1)), typeof(&(sig_exprs_RGMII1TXD3_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1TXD3_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_157[] = { sig_exprs_157_GPIOT5, sig_exprs_157_RMII1DASH1, sig_exprs_157_RGMII1TXD3, ((void *)0) }; static const struct aspeed_pin_desc pin_157 = { "D7", (&pin_exprs_157[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT6_GPIOT6[] = { { 0, 0xA0, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT6_GPIOT6 = { .signal = "GPIOT6", .function = "GPIOT6", .ndescs = (sizeof(sig_descs_GPIOT6_GPIOT6) / sizeof((sig_descs_GPIOT6_GPIOT6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT6_GPIOT6)), typeof(&(sig_descs_GPIOT6_GPIOT6)[0])))); }))), .descs = &(sig_descs_GPIOT6_GPIOT6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT6_GPIOT6[] = { (&sig_expr_GPIOT6_GPIOT6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_158_GPIOT6[(sizeof(sig_exprs_GPIOT6_GPIOT6) / sizeof((sig_exprs_GPIOT6_GPIOT6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT6_GPIOT6)), typeof(&(sig_exprs_GPIOT6_GPIOT6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT6_GPIOT6")));
static const struct aspeed_sig_desc sig_descs_RMII2RCLKO_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) }, { 0, 0x48, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2RCLKO_RMII2 = { .signal = "RMII2RCLKO", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2RCLKO_RMII2) / sizeof((sig_descs_RMII2RCLKO_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2RCLKO_RMII2)), typeof(&(sig_descs_RMII2RCLKO_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2RCLKO_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2RCLKO_RMII2[] = { (&sig_expr_RMII2RCLKO_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_158_RMII2RCLKO[(sizeof(sig_exprs_RMII2RCLKO_RMII2) / sizeof((sig_exprs_RMII2RCLKO_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2RCLKO_RMII2)), typeof(&(sig_exprs_RMII2RCLKO_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2RCLKO_RMII2")));

static const struct aspeed_sig_desc sig_descs_RGMII2TXCK_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2TXCK_RGMII2 = { .signal = "RGMII2TXCK", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2TXCK_RGMII2) / sizeof((sig_descs_RGMII2TXCK_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2TXCK_RGMII2)), typeof(&(sig_descs_RGMII2TXCK_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2TXCK_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2TXCK_RGMII2[] = { (&sig_expr_RGMII2TXCK_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_158_RGMII2TXCK[(sizeof(sig_exprs_RGMII2TXCK_RGMII2) / sizeof((sig_exprs_RGMII2TXCK_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2TXCK_RGMII2)), typeof(&(sig_exprs_RGMII2TXCK_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2TXCK_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_158[] = { sig_exprs_158_GPIOT6, sig_exprs_158_RMII2RCLKO, sig_exprs_158_RGMII2TXCK, ((void *)0) }; static const struct aspeed_pin_desc pin_158 = { "B2", (&pin_exprs_158[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOT7_GPIOT7[] = { { 0, 0xA0, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOT7_GPIOT7 = { .signal = "GPIOT7", .function = "GPIOT7", .ndescs = (sizeof(sig_descs_GPIOT7_GPIOT7) / sizeof((sig_descs_GPIOT7_GPIOT7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOT7_GPIOT7)), typeof(&(sig_descs_GPIOT7_GPIOT7)[0])))); }))), .descs = &(sig_descs_GPIOT7_GPIOT7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOT7_GPIOT7[] = { (&sig_expr_GPIOT7_GPIOT7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_159_GPIOT7[(sizeof(sig_exprs_GPIOT7_GPIOT7) / sizeof((sig_exprs_GPIOT7_GPIOT7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOT7_GPIOT7)), typeof(&(sig_exprs_GPIOT7_GPIOT7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOT7_GPIOT7")));
static const struct aspeed_sig_desc sig_descs_RMII2TXEN_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2TXEN_RMII2 = { .signal = "RMII2TXEN", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2TXEN_RMII2) / sizeof((sig_descs_RMII2TXEN_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2TXEN_RMII2)), typeof(&(sig_descs_RMII2TXEN_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2TXEN_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2TXEN_RMII2[] = { (&sig_expr_RMII2TXEN_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_159_RMII2TXEN[(sizeof(sig_exprs_RMII2TXEN_RMII2) / sizeof((sig_exprs_RMII2TXEN_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2TXEN_RMII2)), typeof(&(sig_exprs_RMII2TXEN_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2TXEN_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2TXCTL_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2TXCTL_RGMII2 = { .signal = "RGMII2TXCTL", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2TXCTL_RGMII2) / sizeof((sig_descs_RGMII2TXCTL_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2TXCTL_RGMII2)), typeof(&(sig_descs_RGMII2TXCTL_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2TXCTL_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2TXCTL_RGMII2[] = { (&sig_expr_RGMII2TXCTL_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_159_RGMII2TXCTL[(sizeof(sig_exprs_RGMII2TXCTL_RGMII2) / sizeof((sig_exprs_RGMII2TXCTL_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2TXCTL_RGMII2)), typeof(&(sig_exprs_RGMII2TXCTL_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2TXCTL_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_159[] = { sig_exprs_159_GPIOT7, sig_exprs_159_RMII2TXEN, sig_exprs_159_RGMII2TXCTL, ((void *)0) }; static const struct aspeed_pin_desc pin_159 = { "B1", (&pin_exprs_159[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU0_GPIOU0[] = { { 0, 0xA0, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU0_GPIOU0 = { .signal = "GPIOU0", .function = "GPIOU0", .ndescs = (sizeof(sig_descs_GPIOU0_GPIOU0) / sizeof((sig_descs_GPIOU0_GPIOU0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU0_GPIOU0)), typeof(&(sig_descs_GPIOU0_GPIOU0)[0])))); }))), .descs = &(sig_descs_GPIOU0_GPIOU0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU0_GPIOU0[] = { (&sig_expr_GPIOU0_GPIOU0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_160_GPIOU0[(sizeof(sig_exprs_GPIOU0_GPIOU0) / sizeof((sig_exprs_GPIOU0_GPIOU0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU0_GPIOU0)), typeof(&(sig_exprs_GPIOU0_GPIOU0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU0_GPIOU0")));
static const struct aspeed_sig_desc sig_descs_RMII2TXD0_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2TXD0_RMII2 = { .signal = "RMII2TXD0", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2TXD0_RMII2) / sizeof((sig_descs_RMII2TXD0_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2TXD0_RMII2)), typeof(&(sig_descs_RMII2TXD0_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2TXD0_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2TXD0_RMII2[] = { (&sig_expr_RMII2TXD0_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_160_RMII2TXD0[(sizeof(sig_exprs_RMII2TXD0_RMII2) / sizeof((sig_exprs_RMII2TXD0_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2TXD0_RMII2)), typeof(&(sig_exprs_RMII2TXD0_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2TXD0_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2TXD0_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2TXD0_RGMII2 = { .signal = "RGMII2TXD0", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2TXD0_RGMII2) / sizeof((sig_descs_RGMII2TXD0_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2TXD0_RGMII2)), typeof(&(sig_descs_RGMII2TXD0_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2TXD0_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2TXD0_RGMII2[] = { (&sig_expr_RGMII2TXD0_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_160_RGMII2TXD0[(sizeof(sig_exprs_RGMII2TXD0_RGMII2) / sizeof((sig_exprs_RGMII2TXD0_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2TXD0_RGMII2)), typeof(&(sig_exprs_RGMII2TXD0_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2TXD0_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_160[] = { sig_exprs_160_GPIOU0, sig_exprs_160_RMII2TXD0, sig_exprs_160_RGMII2TXD0, ((void *)0) }; static const struct aspeed_pin_desc pin_160 = { "A2", (&pin_exprs_160[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU1_GPIOU1[] = { { 0, 0xA0, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU1_GPIOU1 = { .signal = "GPIOU1", .function = "GPIOU1", .ndescs = (sizeof(sig_descs_GPIOU1_GPIOU1) / sizeof((sig_descs_GPIOU1_GPIOU1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU1_GPIOU1)), typeof(&(sig_descs_GPIOU1_GPIOU1)[0])))); }))), .descs = &(sig_descs_GPIOU1_GPIOU1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU1_GPIOU1[] = { (&sig_expr_GPIOU1_GPIOU1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_161_GPIOU1[(sizeof(sig_exprs_GPIOU1_GPIOU1) / sizeof((sig_exprs_GPIOU1_GPIOU1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU1_GPIOU1)), typeof(&(sig_exprs_GPIOU1_GPIOU1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU1_GPIOU1")));
static const struct aspeed_sig_desc sig_descs_RMII2TXD1_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2TXD1_RMII2 = { .signal = "RMII2TXD1", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2TXD1_RMII2) / sizeof((sig_descs_RMII2TXD1_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2TXD1_RMII2)), typeof(&(sig_descs_RMII2TXD1_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2TXD1_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2TXD1_RMII2[] = { (&sig_expr_RMII2TXD1_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_161_RMII2TXD1[(sizeof(sig_exprs_RMII2TXD1_RMII2) / sizeof((sig_exprs_RMII2TXD1_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2TXD1_RMII2)), typeof(&(sig_exprs_RMII2TXD1_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2TXD1_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2TXD1_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2TXD1_RGMII2 = { .signal = "RGMII2TXD1", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2TXD1_RGMII2) / sizeof((sig_descs_RGMII2TXD1_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2TXD1_RGMII2)), typeof(&(sig_descs_RGMII2TXD1_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2TXD1_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2TXD1_RGMII2[] = { (&sig_expr_RGMII2TXD1_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_161_RGMII2TXD1[(sizeof(sig_exprs_RGMII2TXD1_RGMII2) / sizeof((sig_exprs_RGMII2TXD1_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2TXD1_RGMII2)), typeof(&(sig_exprs_RGMII2TXD1_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2TXD1_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_161[] = { sig_exprs_161_GPIOU1, sig_exprs_161_RMII2TXD1, sig_exprs_161_RGMII2TXD1, ((void *)0) }; static const struct aspeed_pin_desc pin_161 = { "B3", (&pin_exprs_161[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU2_GPIOU2[] = { { 0, 0xA0, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU2_GPIOU2 = { .signal = "GPIOU2", .function = "GPIOU2", .ndescs = (sizeof(sig_descs_GPIOU2_GPIOU2) / sizeof((sig_descs_GPIOU2_GPIOU2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU2_GPIOU2)), typeof(&(sig_descs_GPIOU2_GPIOU2)[0])))); }))), .descs = &(sig_descs_GPIOU2_GPIOU2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU2_GPIOU2[] = { (&sig_expr_GPIOU2_GPIOU2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_162_GPIOU2[(sizeof(sig_exprs_GPIOU2_GPIOU2) / sizeof((sig_exprs_GPIOU2_GPIOU2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU2_GPIOU2)), typeof(&(sig_exprs_GPIOU2_GPIOU2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU2_GPIOU2")));
static const struct aspeed_sig_desc sig_descs_RMII2DASH0_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2DASH0_RMII2 = { .signal = "RMII2DASH0", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2DASH0_RMII2) / sizeof((sig_descs_RMII2DASH0_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2DASH0_RMII2)), typeof(&(sig_descs_RMII2DASH0_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2DASH0_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2DASH0_RMII2[] = { (&sig_expr_RMII2DASH0_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_162_RMII2DASH0[(sizeof(sig_exprs_RMII2DASH0_RMII2) / sizeof((sig_exprs_RMII2DASH0_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2DASH0_RMII2)), typeof(&(sig_exprs_RMII2DASH0_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2DASH0_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2TXD2_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2TXD2_RGMII2 = { .signal = "RGMII2TXD2", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2TXD2_RGMII2) / sizeof((sig_descs_RGMII2TXD2_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2TXD2_RGMII2)), typeof(&(sig_descs_RGMII2TXD2_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2TXD2_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2TXD2_RGMII2[] = { (&sig_expr_RGMII2TXD2_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_162_RGMII2TXD2[(sizeof(sig_exprs_RGMII2TXD2_RGMII2) / sizeof((sig_exprs_RGMII2TXD2_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2TXD2_RGMII2)), typeof(&(sig_exprs_RGMII2TXD2_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2TXD2_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_162[] = { sig_exprs_162_GPIOU2, sig_exprs_162_RMII2DASH0, sig_exprs_162_RGMII2TXD2, ((void *)0) }; static const struct aspeed_pin_desc pin_162 = { "D5", (&pin_exprs_162[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU3_GPIOU3[] = { { 0, 0xA0, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU3_GPIOU3 = { .signal = "GPIOU3", .function = "GPIOU3", .ndescs = (sizeof(sig_descs_GPIOU3_GPIOU3) / sizeof((sig_descs_GPIOU3_GPIOU3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU3_GPIOU3)), typeof(&(sig_descs_GPIOU3_GPIOU3)[0])))); }))), .descs = &(sig_descs_GPIOU3_GPIOU3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU3_GPIOU3[] = { (&sig_expr_GPIOU3_GPIOU3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_163_GPIOU3[(sizeof(sig_exprs_GPIOU3_GPIOU3) / sizeof((sig_exprs_GPIOU3_GPIOU3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU3_GPIOU3)), typeof(&(sig_exprs_GPIOU3_GPIOU3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU3_GPIOU3")));
static const struct aspeed_sig_desc sig_descs_RMII2DASH1_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2DASH1_RMII2 = { .signal = "RMII2DASH1", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2DASH1_RMII2) / sizeof((sig_descs_RMII2DASH1_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2DASH1_RMII2)), typeof(&(sig_descs_RMII2DASH1_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2DASH1_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2DASH1_RMII2[] = { (&sig_expr_RMII2DASH1_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_163_RMII2DASH1[(sizeof(sig_exprs_RMII2DASH1_RMII2) / sizeof((sig_exprs_RMII2DASH1_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2DASH1_RMII2)), typeof(&(sig_exprs_RMII2DASH1_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2DASH1_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2TXD3_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2TXD3_RGMII2 = { .signal = "RGMII2TXD3", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2TXD3_RGMII2) / sizeof((sig_descs_RGMII2TXD3_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2TXD3_RGMII2)), typeof(&(sig_descs_RGMII2TXD3_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2TXD3_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2TXD3_RGMII2[] = { (&sig_expr_RGMII2TXD3_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_163_RGMII2TXD3[(sizeof(sig_exprs_RGMII2TXD3_RGMII2) / sizeof((sig_exprs_RGMII2TXD3_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2TXD3_RGMII2)), typeof(&(sig_exprs_RGMII2TXD3_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2TXD3_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_163[] = { sig_exprs_163_GPIOU3, sig_exprs_163_RMII2DASH1, sig_exprs_163_RGMII2TXD3, ((void *)0) }; static const struct aspeed_pin_desc pin_163 = { "D4", (&pin_exprs_163[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU4_GPIOU4[] = { { 0, 0xA0, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU4_GPIOU4 = { .signal = "GPIOU4", .function = "GPIOU4", .ndescs = (sizeof(sig_descs_GPIOU4_GPIOU4) / sizeof((sig_descs_GPIOU4_GPIOU4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU4_GPIOU4)), typeof(&(sig_descs_GPIOU4_GPIOU4)[0])))); }))), .descs = &(sig_descs_GPIOU4_GPIOU4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU4_GPIOU4[] = { (&sig_expr_GPIOU4_GPIOU4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_164_GPIOU4[(sizeof(sig_exprs_GPIOU4_GPIOU4) / sizeof((sig_exprs_GPIOU4_GPIOU4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU4_GPIOU4)), typeof(&(sig_exprs_GPIOU4_GPIOU4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU4_GPIOU4")));
static const struct aspeed_sig_desc sig_descs_RMII1RCLKI_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1RCLKI_RMII1 = { .signal = "RMII1RCLKI", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1RCLKI_RMII1) / sizeof((sig_descs_RMII1RCLKI_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1RCLKI_RMII1)), typeof(&(sig_descs_RMII1RCLKI_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1RCLKI_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1RCLKI_RMII1[] = { (&sig_expr_RMII1RCLKI_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_164_RMII1RCLKI[(sizeof(sig_exprs_RMII1RCLKI_RMII1) / sizeof((sig_exprs_RMII1RCLKI_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1RCLKI_RMII1)), typeof(&(sig_exprs_RMII1RCLKI_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1RCLKI_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1RXCK_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1RXCK_RGMII1 = { .signal = "RGMII1RXCK", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1RXCK_RGMII1) / sizeof((sig_descs_RGMII1RXCK_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1RXCK_RGMII1)), typeof(&(sig_descs_RGMII1RXCK_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1RXCK_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1RXCK_RGMII1[] = { (&sig_expr_RGMII1RXCK_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_164_RGMII1RXCK[(sizeof(sig_exprs_RGMII1RXCK_RGMII1) / sizeof((sig_exprs_RGMII1RXCK_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1RXCK_RGMII1)), typeof(&(sig_exprs_RGMII1RXCK_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1RXCK_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_164[] = { sig_exprs_164_GPIOU4, sig_exprs_164_RMII1RCLKI, sig_exprs_164_RGMII1RXCK, ((void *)0) }; static const struct aspeed_pin_desc pin_164 = { "B4", (&pin_exprs_164[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU5_GPIOU5[] = { { 0, 0xA0, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU5_GPIOU5 = { .signal = "GPIOU5", .function = "GPIOU5", .ndescs = (sizeof(sig_descs_GPIOU5_GPIOU5) / sizeof((sig_descs_GPIOU5_GPIOU5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU5_GPIOU5)), typeof(&(sig_descs_GPIOU5_GPIOU5)[0])))); }))), .descs = &(sig_descs_GPIOU5_GPIOU5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU5_GPIOU5[] = { (&sig_expr_GPIOU5_GPIOU5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_165_GPIOU5[(sizeof(sig_exprs_GPIOU5_GPIOU5) / sizeof((sig_exprs_GPIOU5_GPIOU5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU5_GPIOU5)), typeof(&(sig_exprs_GPIOU5_GPIOU5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU5_GPIOU5")));
static const struct aspeed_sig_desc sig_descs_RMII1DASH2_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1DASH2_RMII1 = { .signal = "RMII1DASH2", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1DASH2_RMII1) / sizeof((sig_descs_RMII1DASH2_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1DASH2_RMII1)), typeof(&(sig_descs_RMII1DASH2_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1DASH2_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1DASH2_RMII1[] = { (&sig_expr_RMII1DASH2_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_165_RMII1DASH2[(sizeof(sig_exprs_RMII1DASH2_RMII1) / sizeof((sig_exprs_RMII1DASH2_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1DASH2_RMII1)), typeof(&(sig_exprs_RMII1DASH2_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1DASH2_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1RXCTL_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1RXCTL_RGMII1 = { .signal = "RGMII1RXCTL", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1RXCTL_RGMII1) / sizeof((sig_descs_RGMII1RXCTL_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1RXCTL_RGMII1)), typeof(&(sig_descs_RGMII1RXCTL_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1RXCTL_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1RXCTL_RGMII1[] = { (&sig_expr_RGMII1RXCTL_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_165_RGMII1RXCTL[(sizeof(sig_exprs_RGMII1RXCTL_RGMII1) / sizeof((sig_exprs_RGMII1RXCTL_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1RXCTL_RGMII1)), typeof(&(sig_exprs_RGMII1RXCTL_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1RXCTL_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_165[] = { sig_exprs_165_GPIOU5, sig_exprs_165_RMII1DASH2, sig_exprs_165_RGMII1RXCTL, ((void *)0) }; static const struct aspeed_pin_desc pin_165 = { "A4", (&pin_exprs_165[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU6_GPIOU6[] = { { 0, 0xA0, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU6_GPIOU6 = { .signal = "GPIOU6", .function = "GPIOU6", .ndescs = (sizeof(sig_descs_GPIOU6_GPIOU6) / sizeof((sig_descs_GPIOU6_GPIOU6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU6_GPIOU6)), typeof(&(sig_descs_GPIOU6_GPIOU6)[0])))); }))), .descs = &(sig_descs_GPIOU6_GPIOU6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU6_GPIOU6[] = { (&sig_expr_GPIOU6_GPIOU6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_166_GPIOU6[(sizeof(sig_exprs_GPIOU6_GPIOU6) / sizeof((sig_exprs_GPIOU6_GPIOU6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU6_GPIOU6)), typeof(&(sig_exprs_GPIOU6_GPIOU6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU6_GPIOU6")));
static const struct aspeed_sig_desc sig_descs_RMII1RXD0_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1RXD0_RMII1 = { .signal = "RMII1RXD0", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1RXD0_RMII1) / sizeof((sig_descs_RMII1RXD0_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1RXD0_RMII1)), typeof(&(sig_descs_RMII1RXD0_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1RXD0_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1RXD0_RMII1[] = { (&sig_expr_RMII1RXD0_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_166_RMII1RXD0[(sizeof(sig_exprs_RMII1RXD0_RMII1) / sizeof((sig_exprs_RMII1RXD0_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1RXD0_RMII1)), typeof(&(sig_exprs_RMII1RXD0_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1RXD0_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1RXD0_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1RXD0_RGMII1 = { .signal = "RGMII1RXD0", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1RXD0_RGMII1) / sizeof((sig_descs_RGMII1RXD0_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1RXD0_RGMII1)), typeof(&(sig_descs_RGMII1RXD0_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1RXD0_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1RXD0_RGMII1[] = { (&sig_expr_RGMII1RXD0_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_166_RGMII1RXD0[(sizeof(sig_exprs_RGMII1RXD0_RGMII1) / sizeof((sig_exprs_RGMII1RXD0_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1RXD0_RGMII1)), typeof(&(sig_exprs_RGMII1RXD0_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1RXD0_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_166[] = { sig_exprs_166_GPIOU6, sig_exprs_166_RMII1RXD0, sig_exprs_166_RGMII1RXD0, ((void *)0) }; static const struct aspeed_pin_desc pin_166 = { "A3", (&pin_exprs_166[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOU7_GPIOU7[] = { { 0, 0xA0, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOU7_GPIOU7 = { .signal = "GPIOU7", .function = "GPIOU7", .ndescs = (sizeof(sig_descs_GPIOU7_GPIOU7) / sizeof((sig_descs_GPIOU7_GPIOU7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOU7_GPIOU7)), typeof(&(sig_descs_GPIOU7_GPIOU7)[0])))); }))), .descs = &(sig_descs_GPIOU7_GPIOU7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOU7_GPIOU7[] = { (&sig_expr_GPIOU7_GPIOU7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_167_GPIOU7[(sizeof(sig_exprs_GPIOU7_GPIOU7) / sizeof((sig_exprs_GPIOU7_GPIOU7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOU7_GPIOU7)), typeof(&(sig_exprs_GPIOU7_GPIOU7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOU7_GPIOU7")));
static const struct aspeed_sig_desc sig_descs_RMII1RXD1_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1RXD1_RMII1 = { .signal = "RMII1RXD1", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1RXD1_RMII1) / sizeof((sig_descs_RMII1RXD1_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1RXD1_RMII1)), typeof(&(sig_descs_RMII1RXD1_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1RXD1_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1RXD1_RMII1[] = { (&sig_expr_RMII1RXD1_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_167_RMII1RXD1[(sizeof(sig_exprs_RMII1RXD1_RMII1) / sizeof((sig_exprs_RMII1RXD1_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1RXD1_RMII1)), typeof(&(sig_exprs_RMII1RXD1_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1RXD1_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1RXD1_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1RXD1_RGMII1 = { .signal = "RGMII1RXD1", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1RXD1_RGMII1) / sizeof((sig_descs_RGMII1RXD1_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1RXD1_RGMII1)), typeof(&(sig_descs_RGMII1RXD1_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1RXD1_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1RXD1_RGMII1[] = { (&sig_expr_RGMII1RXD1_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_167_RGMII1RXD1[(sizeof(sig_exprs_RGMII1RXD1_RGMII1) / sizeof((sig_exprs_RGMII1RXD1_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1RXD1_RGMII1)), typeof(&(sig_exprs_RGMII1RXD1_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1RXD1_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_167[] = { sig_exprs_167_GPIOU7, sig_exprs_167_RMII1RXD1, sig_exprs_167_RGMII1RXD1, ((void *)0) }; static const struct aspeed_pin_desc pin_167 = { "D6", (&pin_exprs_167[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV0_GPIOV0[] = { { 0, 0xA0, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV0_GPIOV0 = { .signal = "GPIOV0", .function = "GPIOV0", .ndescs = (sizeof(sig_descs_GPIOV0_GPIOV0) / sizeof((sig_descs_GPIOV0_GPIOV0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV0_GPIOV0)), typeof(&(sig_descs_GPIOV0_GPIOV0)[0])))); }))), .descs = &(sig_descs_GPIOV0_GPIOV0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV0_GPIOV0[] = { (&sig_expr_GPIOV0_GPIOV0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_168_GPIOV0[(sizeof(sig_exprs_GPIOV0_GPIOV0) / sizeof((sig_exprs_GPIOV0_GPIOV0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV0_GPIOV0)), typeof(&(sig_exprs_GPIOV0_GPIOV0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV0_GPIOV0")));
static const struct aspeed_sig_desc sig_descs_RMII1CRSDV_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1CRSDV_RMII1 = { .signal = "RMII1CRSDV", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1CRSDV_RMII1) / sizeof((sig_descs_RMII1CRSDV_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1CRSDV_RMII1)), typeof(&(sig_descs_RMII1CRSDV_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1CRSDV_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1CRSDV_RMII1[] = { (&sig_expr_RMII1CRSDV_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_168_RMII1CRSDV[(sizeof(sig_exprs_RMII1CRSDV_RMII1) / sizeof((sig_exprs_RMII1CRSDV_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1CRSDV_RMII1)), typeof(&(sig_exprs_RMII1CRSDV_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1CRSDV_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1RXD2_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1RXD2_RGMII1 = { .signal = "RGMII1RXD2", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1RXD2_RGMII1) / sizeof((sig_descs_RGMII1RXD2_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1RXD2_RGMII1)), typeof(&(sig_descs_RGMII1RXD2_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1RXD2_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1RXD2_RGMII1[] = { (&sig_expr_RGMII1RXD2_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_168_RGMII1RXD2[(sizeof(sig_exprs_RGMII1RXD2_RGMII1) / sizeof((sig_exprs_RGMII1RXD2_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1RXD2_RGMII1)), typeof(&(sig_exprs_RGMII1RXD2_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1RXD2_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_168[] = { sig_exprs_168_GPIOV0, sig_exprs_168_RMII1CRSDV, sig_exprs_168_RGMII1RXD2, ((void *)0) }; static const struct aspeed_pin_desc pin_168 = { "C5", (&pin_exprs_168[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV1_GPIOV1[] = { { 0, 0xA0, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV1_GPIOV1 = { .signal = "GPIOV1", .function = "GPIOV1", .ndescs = (sizeof(sig_descs_GPIOV1_GPIOV1) / sizeof((sig_descs_GPIOV1_GPIOV1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV1_GPIOV1)), typeof(&(sig_descs_GPIOV1_GPIOV1)[0])))); }))), .descs = &(sig_descs_GPIOV1_GPIOV1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV1_GPIOV1[] = { (&sig_expr_GPIOV1_GPIOV1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_169_GPIOV1[(sizeof(sig_exprs_GPIOV1_GPIOV1) / sizeof((sig_exprs_GPIOV1_GPIOV1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV1_GPIOV1)), typeof(&(sig_exprs_GPIOV1_GPIOV1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV1_GPIOV1")));
static const struct aspeed_sig_desc sig_descs_RMII1RXER_RMII1[] = { { 0, 0x70, ((((1UL))) << ((6) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII1RXER_RMII1 = { .signal = "RMII1RXER", .function = "RMII1", .ndescs = (sizeof(sig_descs_RMII1RXER_RMII1) / sizeof((sig_descs_RMII1RXER_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII1RXER_RMII1)), typeof(&(sig_descs_RMII1RXER_RMII1)[0])))); }))), .descs = &(sig_descs_RMII1RXER_RMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII1RXER_RMII1[] = { (&sig_expr_RMII1RXER_RMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_169_RMII1RXER[(sizeof(sig_exprs_RMII1RXER_RMII1) / sizeof((sig_exprs_RMII1RXER_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII1RXER_RMII1)), typeof(&(sig_exprs_RMII1RXER_RMII1)[0])))); })))] __attribute__((alias("sig_exprs_RMII1RXER_RMII1")));
static const struct aspeed_sig_desc sig_descs_RGMII1RXD3_RGMII1[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII1RXD3_RGMII1 = { .signal = "RGMII1RXD3", .function = "RGMII1", .ndescs = (sizeof(sig_descs_RGMII1RXD3_RGMII1) / sizeof((sig_descs_RGMII1RXD3_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII1RXD3_RGMII1)), typeof(&(sig_descs_RGMII1RXD3_RGMII1)[0])))); }))), .descs = &(sig_descs_RGMII1RXD3_RGMII1)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII1RXD3_RGMII1[] = { (&sig_expr_RGMII1RXD3_RGMII1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_169_RGMII1RXD3[(sizeof(sig_exprs_RGMII1RXD3_RGMII1) / sizeof((sig_exprs_RGMII1RXD3_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII1RXD3_RGMII1)), typeof(&(sig_exprs_RGMII1RXD3_RGMII1)[0])))); })))] __attribute__((alias("sig_exprs_RGMII1RXD3_RGMII1")));
static const struct aspeed_sig_expr **pin_exprs_169[] = { sig_exprs_169_GPIOV1, sig_exprs_169_RMII1RXER, sig_exprs_169_RGMII1RXD3, ((void *)0) }; static const struct aspeed_pin_desc pin_169 = { "C4", (&pin_exprs_169[0]) };


static const int group_pins_RGMII1[] = { 164, 165, 166, 167, 168, 169, 152, 153, 154, 155, 156, 157 }; static const char *func_groups_RGMII1[] = { "RGMII1" };
static const int group_pins_RMII1[] = { 164, 166, 167, 168, 169, 152, 153, 154, 155 }; static const char *func_groups_RMII1[] = { "RMII1" };


static const struct aspeed_sig_desc sig_descs_GPIOV2_GPIOV2[] = { { 0, 0xA0, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV2_GPIOV2 = { .signal = "GPIOV2", .function = "GPIOV2", .ndescs = (sizeof(sig_descs_GPIOV2_GPIOV2) / sizeof((sig_descs_GPIOV2_GPIOV2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV2_GPIOV2)), typeof(&(sig_descs_GPIOV2_GPIOV2)[0])))); }))), .descs = &(sig_descs_GPIOV2_GPIOV2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV2_GPIOV2[] = { (&sig_expr_GPIOV2_GPIOV2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_170_GPIOV2[(sizeof(sig_exprs_GPIOV2_GPIOV2) / sizeof((sig_exprs_GPIOV2_GPIOV2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV2_GPIOV2)), typeof(&(sig_exprs_GPIOV2_GPIOV2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV2_GPIOV2")));
static const struct aspeed_sig_desc sig_descs_RMII2RCLKI_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2RCLKI_RMII2 = { .signal = "RMII2RCLKI", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2RCLKI_RMII2) / sizeof((sig_descs_RMII2RCLKI_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2RCLKI_RMII2)), typeof(&(sig_descs_RMII2RCLKI_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2RCLKI_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2RCLKI_RMII2[] = { (&sig_expr_RMII2RCLKI_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_170_RMII2RCLKI[(sizeof(sig_exprs_RMII2RCLKI_RMII2) / sizeof((sig_exprs_RMII2RCLKI_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2RCLKI_RMII2)), typeof(&(sig_exprs_RMII2RCLKI_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2RCLKI_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2RXCK_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2RXCK_RGMII2 = { .signal = "RGMII2RXCK", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2RXCK_RGMII2) / sizeof((sig_descs_RGMII2RXCK_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2RXCK_RGMII2)), typeof(&(sig_descs_RGMII2RXCK_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2RXCK_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2RXCK_RGMII2[] = { (&sig_expr_RGMII2RXCK_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_170_RGMII2RXCK[(sizeof(sig_exprs_RGMII2RXCK_RGMII2) / sizeof((sig_exprs_RGMII2RXCK_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2RXCK_RGMII2)), typeof(&(sig_exprs_RGMII2RXCK_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2RXCK_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_170[] = { sig_exprs_170_GPIOV2, sig_exprs_170_RMII2RCLKI, sig_exprs_170_RGMII2RXCK, ((void *)0) }; static const struct aspeed_pin_desc pin_170 = { "C2", (&pin_exprs_170[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV3_GPIOV3[] = { { 0, 0xA0, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV3_GPIOV3 = { .signal = "GPIOV3", .function = "GPIOV3", .ndescs = (sizeof(sig_descs_GPIOV3_GPIOV3) / sizeof((sig_descs_GPIOV3_GPIOV3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV3_GPIOV3)), typeof(&(sig_descs_GPIOV3_GPIOV3)[0])))); }))), .descs = &(sig_descs_GPIOV3_GPIOV3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV3_GPIOV3[] = { (&sig_expr_GPIOV3_GPIOV3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_171_GPIOV3[(sizeof(sig_exprs_GPIOV3_GPIOV3) / sizeof((sig_exprs_GPIOV3_GPIOV3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV3_GPIOV3)), typeof(&(sig_exprs_GPIOV3_GPIOV3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV3_GPIOV3")));
static const struct aspeed_sig_desc sig_descs_RMII2DASH2_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2DASH2_RMII2 = { .signal = "RMII2DASH2", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2DASH2_RMII2) / sizeof((sig_descs_RMII2DASH2_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2DASH2_RMII2)), typeof(&(sig_descs_RMII2DASH2_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2DASH2_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2DASH2_RMII2[] = { (&sig_expr_RMII2DASH2_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_171_RMII2DASH2[(sizeof(sig_exprs_RMII2DASH2_RMII2) / sizeof((sig_exprs_RMII2DASH2_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2DASH2_RMII2)), typeof(&(sig_exprs_RMII2DASH2_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2DASH2_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2RXCTL_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2RXCTL_RGMII2 = { .signal = "RGMII2RXCTL", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2RXCTL_RGMII2) / sizeof((sig_descs_RGMII2RXCTL_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2RXCTL_RGMII2)), typeof(&(sig_descs_RGMII2RXCTL_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2RXCTL_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2RXCTL_RGMII2[] = { (&sig_expr_RGMII2RXCTL_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_171_RGMII2RXCTL[(sizeof(sig_exprs_RGMII2RXCTL_RGMII2) / sizeof((sig_exprs_RGMII2RXCTL_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2RXCTL_RGMII2)), typeof(&(sig_exprs_RGMII2RXCTL_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2RXCTL_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_171[] = { sig_exprs_171_GPIOV3, sig_exprs_171_RMII2DASH2, sig_exprs_171_RGMII2RXCTL, ((void *)0) }; static const struct aspeed_pin_desc pin_171 = { "C1", (&pin_exprs_171[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV4_GPIOV4[] = { { 0, 0xA0, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV4_GPIOV4 = { .signal = "GPIOV4", .function = "GPIOV4", .ndescs = (sizeof(sig_descs_GPIOV4_GPIOV4) / sizeof((sig_descs_GPIOV4_GPIOV4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV4_GPIOV4)), typeof(&(sig_descs_GPIOV4_GPIOV4)[0])))); }))), .descs = &(sig_descs_GPIOV4_GPIOV4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV4_GPIOV4[] = { (&sig_expr_GPIOV4_GPIOV4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_172_GPIOV4[(sizeof(sig_exprs_GPIOV4_GPIOV4) / sizeof((sig_exprs_GPIOV4_GPIOV4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV4_GPIOV4)), typeof(&(sig_exprs_GPIOV4_GPIOV4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV4_GPIOV4")));
static const struct aspeed_sig_desc sig_descs_RMII2RXD0_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2RXD0_RMII2 = { .signal = "RMII2RXD0", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2RXD0_RMII2) / sizeof((sig_descs_RMII2RXD0_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2RXD0_RMII2)), typeof(&(sig_descs_RMII2RXD0_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2RXD0_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2RXD0_RMII2[] = { (&sig_expr_RMII2RXD0_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_172_RMII2RXD0[(sizeof(sig_exprs_RMII2RXD0_RMII2) / sizeof((sig_exprs_RMII2RXD0_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2RXD0_RMII2)), typeof(&(sig_exprs_RMII2RXD0_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2RXD0_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2RXD0_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2RXD0_RGMII2 = { .signal = "RGMII2RXD0", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2RXD0_RGMII2) / sizeof((sig_descs_RGMII2RXD0_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2RXD0_RGMII2)), typeof(&(sig_descs_RGMII2RXD0_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2RXD0_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2RXD0_RGMII2[] = { (&sig_expr_RGMII2RXD0_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_172_RGMII2RXD0[(sizeof(sig_exprs_RGMII2RXD0_RGMII2) / sizeof((sig_exprs_RGMII2RXD0_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2RXD0_RGMII2)), typeof(&(sig_exprs_RGMII2RXD0_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2RXD0_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_172[] = { sig_exprs_172_GPIOV4, sig_exprs_172_RMII2RXD0, sig_exprs_172_RGMII2RXD0, ((void *)0) }; static const struct aspeed_pin_desc pin_172 = { "C3", (&pin_exprs_172[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV5_GPIOV5[] = { { 0, 0xA0, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV5_GPIOV5 = { .signal = "GPIOV5", .function = "GPIOV5", .ndescs = (sizeof(sig_descs_GPIOV5_GPIOV5) / sizeof((sig_descs_GPIOV5_GPIOV5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV5_GPIOV5)), typeof(&(sig_descs_GPIOV5_GPIOV5)[0])))); }))), .descs = &(sig_descs_GPIOV5_GPIOV5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV5_GPIOV5[] = { (&sig_expr_GPIOV5_GPIOV5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_173_GPIOV5[(sizeof(sig_exprs_GPIOV5_GPIOV5) / sizeof((sig_exprs_GPIOV5_GPIOV5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV5_GPIOV5)), typeof(&(sig_exprs_GPIOV5_GPIOV5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV5_GPIOV5")));
static const struct aspeed_sig_desc sig_descs_RMII2RXD1_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2RXD1_RMII2 = { .signal = "RMII2RXD1", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2RXD1_RMII2) / sizeof((sig_descs_RMII2RXD1_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2RXD1_RMII2)), typeof(&(sig_descs_RMII2RXD1_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2RXD1_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2RXD1_RMII2[] = { (&sig_expr_RMII2RXD1_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_173_RMII2RXD1[(sizeof(sig_exprs_RMII2RXD1_RMII2) / sizeof((sig_exprs_RMII2RXD1_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2RXD1_RMII2)), typeof(&(sig_exprs_RMII2RXD1_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2RXD1_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2RXD1_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2RXD1_RGMII2 = { .signal = "RGMII2RXD1", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2RXD1_RGMII2) / sizeof((sig_descs_RGMII2RXD1_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2RXD1_RGMII2)), typeof(&(sig_descs_RGMII2RXD1_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2RXD1_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2RXD1_RGMII2[] = { (&sig_expr_RGMII2RXD1_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_173_RGMII2RXD1[(sizeof(sig_exprs_RGMII2RXD1_RGMII2) / sizeof((sig_exprs_RGMII2RXD1_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2RXD1_RGMII2)), typeof(&(sig_exprs_RGMII2RXD1_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2RXD1_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_173[] = { sig_exprs_173_GPIOV5, sig_exprs_173_RMII2RXD1, sig_exprs_173_RGMII2RXD1, ((void *)0) }; static const struct aspeed_pin_desc pin_173 = { "D1", (&pin_exprs_173[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV6_GPIOV6[] = { { 0, 0xA0, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV6_GPIOV6 = { .signal = "GPIOV6", .function = "GPIOV6", .ndescs = (sizeof(sig_descs_GPIOV6_GPIOV6) / sizeof((sig_descs_GPIOV6_GPIOV6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV6_GPIOV6)), typeof(&(sig_descs_GPIOV6_GPIOV6)[0])))); }))), .descs = &(sig_descs_GPIOV6_GPIOV6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV6_GPIOV6[] = { (&sig_expr_GPIOV6_GPIOV6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_174_GPIOV6[(sizeof(sig_exprs_GPIOV6_GPIOV6) / sizeof((sig_exprs_GPIOV6_GPIOV6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV6_GPIOV6)), typeof(&(sig_exprs_GPIOV6_GPIOV6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV6_GPIOV6")));
static const struct aspeed_sig_desc sig_descs_RMII2CRSDV_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2CRSDV_RMII2 = { .signal = "RMII2CRSDV", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2CRSDV_RMII2) / sizeof((sig_descs_RMII2CRSDV_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2CRSDV_RMII2)), typeof(&(sig_descs_RMII2CRSDV_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2CRSDV_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2CRSDV_RMII2[] = { (&sig_expr_RMII2CRSDV_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_174_RMII2CRSDV[(sizeof(sig_exprs_RMII2CRSDV_RMII2) / sizeof((sig_exprs_RMII2CRSDV_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2CRSDV_RMII2)), typeof(&(sig_exprs_RMII2CRSDV_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2CRSDV_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2RXD2_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2RXD2_RGMII2 = { .signal = "RGMII2RXD2", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2RXD2_RGMII2) / sizeof((sig_descs_RGMII2RXD2_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2RXD2_RGMII2)), typeof(&(sig_descs_RGMII2RXD2_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2RXD2_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2RXD2_RGMII2[] = { (&sig_expr_RGMII2RXD2_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_174_RGMII2RXD2[(sizeof(sig_exprs_RGMII2RXD2_RGMII2) / sizeof((sig_exprs_RGMII2RXD2_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2RXD2_RGMII2)), typeof(&(sig_exprs_RGMII2RXD2_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2RXD2_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_174[] = { sig_exprs_174_GPIOV6, sig_exprs_174_RMII2CRSDV, sig_exprs_174_RGMII2RXD2, ((void *)0) }; static const struct aspeed_pin_desc pin_174 = { "D2", (&pin_exprs_174[0]) };



static const struct aspeed_sig_desc sig_descs_GPIOV7_GPIOV7[] = { { 0, 0xA0, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOV7_GPIOV7 = { .signal = "GPIOV7", .function = "GPIOV7", .ndescs = (sizeof(sig_descs_GPIOV7_GPIOV7) / sizeof((sig_descs_GPIOV7_GPIOV7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOV7_GPIOV7)), typeof(&(sig_descs_GPIOV7_GPIOV7)[0])))); }))), .descs = &(sig_descs_GPIOV7_GPIOV7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOV7_GPIOV7[] = { (&sig_expr_GPIOV7_GPIOV7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_175_GPIOV7[(sizeof(sig_exprs_GPIOV7_GPIOV7) / sizeof((sig_exprs_GPIOV7_GPIOV7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOV7_GPIOV7)), typeof(&(sig_exprs_GPIOV7_GPIOV7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOV7_GPIOV7")));
static const struct aspeed_sig_desc sig_descs_RMII2RXER_RMII2[] = { { 0, 0x70, ((((1UL))) << ((7) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_RMII2RXER_RMII2 = { .signal = "RMII2RXER", .function = "RMII2", .ndescs = (sizeof(sig_descs_RMII2RXER_RMII2) / sizeof((sig_descs_RMII2RXER_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RMII2RXER_RMII2)), typeof(&(sig_descs_RMII2RXER_RMII2)[0])))); }))), .descs = &(sig_descs_RMII2RXER_RMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RMII2RXER_RMII2[] = { (&sig_expr_RMII2RXER_RMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_175_RMII2RXER[(sizeof(sig_exprs_RMII2RXER_RMII2) / sizeof((sig_exprs_RMII2RXER_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RMII2RXER_RMII2)), typeof(&(sig_exprs_RMII2RXER_RMII2)[0])))); })))] __attribute__((alias("sig_exprs_RMII2RXER_RMII2")));
static const struct aspeed_sig_desc sig_descs_RGMII2RXD3_RGMII2[] = { }; static const struct aspeed_sig_expr sig_expr_RGMII2RXD3_RGMII2 = { .signal = "RGMII2RXD3", .function = "RGMII2", .ndescs = (sizeof(sig_descs_RGMII2RXD3_RGMII2) / sizeof((sig_descs_RGMII2RXD3_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_RGMII2RXD3_RGMII2)), typeof(&(sig_descs_RGMII2RXD3_RGMII2)[0])))); }))), .descs = &(sig_descs_RGMII2RXD3_RGMII2)[0], }; static const struct aspeed_sig_expr *sig_exprs_RGMII2RXD3_RGMII2[] = { (&sig_expr_RGMII2RXD3_RGMII2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_175_RGMII2RXD3[(sizeof(sig_exprs_RGMII2RXD3_RGMII2) / sizeof((sig_exprs_RGMII2RXD3_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_RGMII2RXD3_RGMII2)), typeof(&(sig_exprs_RGMII2RXD3_RGMII2)[0])))); })))] __attribute__((alias("sig_exprs_RGMII2RXD3_RGMII2")));
static const struct aspeed_sig_expr **pin_exprs_175[] = { sig_exprs_175_GPIOV7, sig_exprs_175_RMII2RXER, sig_exprs_175_RGMII2RXD3, ((void *)0) }; static const struct aspeed_pin_desc pin_175 = { "E6", (&pin_exprs_175[0]) };


static const int group_pins_RGMII2[] = { 158, 159, 160, 161, 162, 163, 170, 171, 172, 173, 174, 175 }; static const char *func_groups_RGMII2[] = { "RGMII2" };
static const int group_pins_RMII2[] = { 158, 159, 160, 161, 170, 172, 173, 174, 175 }; static const char *func_groups_RMII2[] = { "RMII2" };


static const struct aspeed_sig_desc sig_descs_GPIOW0_GPIOW0[] = { { 0, 0xA0, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW0_GPIOW0 = { .signal = "GPIOW0", .function = "GPIOW0", .ndescs = (sizeof(sig_descs_GPIOW0_GPIOW0) / sizeof((sig_descs_GPIOW0_GPIOW0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW0_GPIOW0)), typeof(&(sig_descs_GPIOW0_GPIOW0)[0])))); }))), .descs = &(sig_descs_GPIOW0_GPIOW0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW0_GPIOW0[] = { (&sig_expr_GPIOW0_GPIOW0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_176_GPIOW0[(sizeof(sig_exprs_GPIOW0_GPIOW0) / sizeof((sig_exprs_GPIOW0_GPIOW0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW0_GPIOW0)), typeof(&(sig_exprs_GPIOW0_GPIOW0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW0_GPIOW0")));
static const struct aspeed_sig_desc sig_descs_ADC0_ADC0[] = { }; static const struct aspeed_sig_expr sig_expr_ADC0_ADC0 = { .signal = "ADC0", .function = "ADC0", .ndescs = (sizeof(sig_descs_ADC0_ADC0) / sizeof((sig_descs_ADC0_ADC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC0_ADC0)), typeof(&(sig_descs_ADC0_ADC0)[0])))); }))), .descs = &(sig_descs_ADC0_ADC0)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC0_ADC0[] = { (&sig_expr_ADC0_ADC0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_176_ADC0[(sizeof(sig_exprs_ADC0_ADC0) / sizeof((sig_exprs_ADC0_ADC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC0_ADC0)), typeof(&(sig_exprs_ADC0_ADC0)[0])))); })))] __attribute__((alias("sig_exprs_ADC0_ADC0")));
static const struct aspeed_sig_expr **pin_exprs_176[] = { sig_exprs_176_GPIOW0, sig_exprs_176_ADC0, ((void *)0) }; static const struct aspeed_pin_desc pin_176 = { "F4", (&pin_exprs_176[0]) };
static const int group_pins_ADC0[] = { 176 }; static const char *func_groups_ADC0[] = { "ADC0" };


static const struct aspeed_sig_desc sig_descs_GPIOW1_GPIOW1[] = { { 0, 0xA0, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW1_GPIOW1 = { .signal = "GPIOW1", .function = "GPIOW1", .ndescs = (sizeof(sig_descs_GPIOW1_GPIOW1) / sizeof((sig_descs_GPIOW1_GPIOW1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW1_GPIOW1)), typeof(&(sig_descs_GPIOW1_GPIOW1)[0])))); }))), .descs = &(sig_descs_GPIOW1_GPIOW1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW1_GPIOW1[] = { (&sig_expr_GPIOW1_GPIOW1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_177_GPIOW1[(sizeof(sig_exprs_GPIOW1_GPIOW1) / sizeof((sig_exprs_GPIOW1_GPIOW1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW1_GPIOW1)), typeof(&(sig_exprs_GPIOW1_GPIOW1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW1_GPIOW1")));
static const struct aspeed_sig_desc sig_descs_ADC1_ADC1[] = { }; static const struct aspeed_sig_expr sig_expr_ADC1_ADC1 = { .signal = "ADC1", .function = "ADC1", .ndescs = (sizeof(sig_descs_ADC1_ADC1) / sizeof((sig_descs_ADC1_ADC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC1_ADC1)), typeof(&(sig_descs_ADC1_ADC1)[0])))); }))), .descs = &(sig_descs_ADC1_ADC1)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC1_ADC1[] = { (&sig_expr_ADC1_ADC1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_177_ADC1[(sizeof(sig_exprs_ADC1_ADC1) / sizeof((sig_exprs_ADC1_ADC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC1_ADC1)), typeof(&(sig_exprs_ADC1_ADC1)[0])))); })))] __attribute__((alias("sig_exprs_ADC1_ADC1")));
static const struct aspeed_sig_expr **pin_exprs_177[] = { sig_exprs_177_GPIOW1, sig_exprs_177_ADC1, ((void *)0) }; static const struct aspeed_pin_desc pin_177 = { "F5", (&pin_exprs_177[0]) };
static const int group_pins_ADC1[] = { 177 }; static const char *func_groups_ADC1[] = { "ADC1" };


static const struct aspeed_sig_desc sig_descs_GPIOW2_GPIOW2[] = { { 0, 0xA0, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW2_GPIOW2 = { .signal = "GPIOW2", .function = "GPIOW2", .ndescs = (sizeof(sig_descs_GPIOW2_GPIOW2) / sizeof((sig_descs_GPIOW2_GPIOW2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW2_GPIOW2)), typeof(&(sig_descs_GPIOW2_GPIOW2)[0])))); }))), .descs = &(sig_descs_GPIOW2_GPIOW2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW2_GPIOW2[] = { (&sig_expr_GPIOW2_GPIOW2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_178_GPIOW2[(sizeof(sig_exprs_GPIOW2_GPIOW2) / sizeof((sig_exprs_GPIOW2_GPIOW2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW2_GPIOW2)), typeof(&(sig_exprs_GPIOW2_GPIOW2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW2_GPIOW2")));
static const struct aspeed_sig_desc sig_descs_ADC2_ADC2[] = { }; static const struct aspeed_sig_expr sig_expr_ADC2_ADC2 = { .signal = "ADC2", .function = "ADC2", .ndescs = (sizeof(sig_descs_ADC2_ADC2) / sizeof((sig_descs_ADC2_ADC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC2_ADC2)), typeof(&(sig_descs_ADC2_ADC2)[0])))); }))), .descs = &(sig_descs_ADC2_ADC2)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC2_ADC2[] = { (&sig_expr_ADC2_ADC2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_178_ADC2[(sizeof(sig_exprs_ADC2_ADC2) / sizeof((sig_exprs_ADC2_ADC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC2_ADC2)), typeof(&(sig_exprs_ADC2_ADC2)[0])))); })))] __attribute__((alias("sig_exprs_ADC2_ADC2")));
static const struct aspeed_sig_expr **pin_exprs_178[] = { sig_exprs_178_GPIOW2, sig_exprs_178_ADC2, ((void *)0) }; static const struct aspeed_pin_desc pin_178 = { "E2", (&pin_exprs_178[0]) };
static const int group_pins_ADC2[] = { 178 }; static const char *func_groups_ADC2[] = { "ADC2" };


static const struct aspeed_sig_desc sig_descs_GPIOW3_GPIOW3[] = { { 0, 0xA0, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW3_GPIOW3 = { .signal = "GPIOW3", .function = "GPIOW3", .ndescs = (sizeof(sig_descs_GPIOW3_GPIOW3) / sizeof((sig_descs_GPIOW3_GPIOW3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW3_GPIOW3)), typeof(&(sig_descs_GPIOW3_GPIOW3)[0])))); }))), .descs = &(sig_descs_GPIOW3_GPIOW3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW3_GPIOW3[] = { (&sig_expr_GPIOW3_GPIOW3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_179_GPIOW3[(sizeof(sig_exprs_GPIOW3_GPIOW3) / sizeof((sig_exprs_GPIOW3_GPIOW3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW3_GPIOW3)), typeof(&(sig_exprs_GPIOW3_GPIOW3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW3_GPIOW3")));
static const struct aspeed_sig_desc sig_descs_ADC3_ADC3[] = { }; static const struct aspeed_sig_expr sig_expr_ADC3_ADC3 = { .signal = "ADC3", .function = "ADC3", .ndescs = (sizeof(sig_descs_ADC3_ADC3) / sizeof((sig_descs_ADC3_ADC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC3_ADC3)), typeof(&(sig_descs_ADC3_ADC3)[0])))); }))), .descs = &(sig_descs_ADC3_ADC3)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC3_ADC3[] = { (&sig_expr_ADC3_ADC3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_179_ADC3[(sizeof(sig_exprs_ADC3_ADC3) / sizeof((sig_exprs_ADC3_ADC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC3_ADC3)), typeof(&(sig_exprs_ADC3_ADC3)[0])))); })))] __attribute__((alias("sig_exprs_ADC3_ADC3")));
static const struct aspeed_sig_expr **pin_exprs_179[] = { sig_exprs_179_GPIOW3, sig_exprs_179_ADC3, ((void *)0) }; static const struct aspeed_pin_desc pin_179 = { "E1", (&pin_exprs_179[0]) };
static const int group_pins_ADC3[] = { 179 }; static const char *func_groups_ADC3[] = { "ADC3" };


static const struct aspeed_sig_desc sig_descs_GPIOW4_GPIOW4[] = { { 0, 0xA0, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW4_GPIOW4 = { .signal = "GPIOW4", .function = "GPIOW4", .ndescs = (sizeof(sig_descs_GPIOW4_GPIOW4) / sizeof((sig_descs_GPIOW4_GPIOW4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW4_GPIOW4)), typeof(&(sig_descs_GPIOW4_GPIOW4)[0])))); }))), .descs = &(sig_descs_GPIOW4_GPIOW4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW4_GPIOW4[] = { (&sig_expr_GPIOW4_GPIOW4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_180_GPIOW4[(sizeof(sig_exprs_GPIOW4_GPIOW4) / sizeof((sig_exprs_GPIOW4_GPIOW4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW4_GPIOW4)), typeof(&(sig_exprs_GPIOW4_GPIOW4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW4_GPIOW4")));
static const struct aspeed_sig_desc sig_descs_ADC4_ADC4[] = { }; static const struct aspeed_sig_expr sig_expr_ADC4_ADC4 = { .signal = "ADC4", .function = "ADC4", .ndescs = (sizeof(sig_descs_ADC4_ADC4) / sizeof((sig_descs_ADC4_ADC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC4_ADC4)), typeof(&(sig_descs_ADC4_ADC4)[0])))); }))), .descs = &(sig_descs_ADC4_ADC4)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC4_ADC4[] = { (&sig_expr_ADC4_ADC4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_180_ADC4[(sizeof(sig_exprs_ADC4_ADC4) / sizeof((sig_exprs_ADC4_ADC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC4_ADC4)), typeof(&(sig_exprs_ADC4_ADC4)[0])))); })))] __attribute__((alias("sig_exprs_ADC4_ADC4")));
static const struct aspeed_sig_expr **pin_exprs_180[] = { sig_exprs_180_GPIOW4, sig_exprs_180_ADC4, ((void *)0) }; static const struct aspeed_pin_desc pin_180 = { "F3", (&pin_exprs_180[0]) };
static const int group_pins_ADC4[] = { 180 }; static const char *func_groups_ADC4[] = { "ADC4" };


static const struct aspeed_sig_desc sig_descs_GPIOW5_GPIOW5[] = { { 0, 0xA0, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW5_GPIOW5 = { .signal = "GPIOW5", .function = "GPIOW5", .ndescs = (sizeof(sig_descs_GPIOW5_GPIOW5) / sizeof((sig_descs_GPIOW5_GPIOW5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW5_GPIOW5)), typeof(&(sig_descs_GPIOW5_GPIOW5)[0])))); }))), .descs = &(sig_descs_GPIOW5_GPIOW5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW5_GPIOW5[] = { (&sig_expr_GPIOW5_GPIOW5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_181_GPIOW5[(sizeof(sig_exprs_GPIOW5_GPIOW5) / sizeof((sig_exprs_GPIOW5_GPIOW5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW5_GPIOW5)), typeof(&(sig_exprs_GPIOW5_GPIOW5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW5_GPIOW5")));
static const struct aspeed_sig_desc sig_descs_ADC5_ADC5[] = { }; static const struct aspeed_sig_expr sig_expr_ADC5_ADC5 = { .signal = "ADC5", .function = "ADC5", .ndescs = (sizeof(sig_descs_ADC5_ADC5) / sizeof((sig_descs_ADC5_ADC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC5_ADC5)), typeof(&(sig_descs_ADC5_ADC5)[0])))); }))), .descs = &(sig_descs_ADC5_ADC5)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC5_ADC5[] = { (&sig_expr_ADC5_ADC5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_181_ADC5[(sizeof(sig_exprs_ADC5_ADC5) / sizeof((sig_exprs_ADC5_ADC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC5_ADC5)), typeof(&(sig_exprs_ADC5_ADC5)[0])))); })))] __attribute__((alias("sig_exprs_ADC5_ADC5")));
static const struct aspeed_sig_expr **pin_exprs_181[] = { sig_exprs_181_GPIOW5, sig_exprs_181_ADC5, ((void *)0) }; static const struct aspeed_pin_desc pin_181 = { "E3", (&pin_exprs_181[0]) };
static const int group_pins_ADC5[] = { 181 }; static const char *func_groups_ADC5[] = { "ADC5" };


static const struct aspeed_sig_desc sig_descs_GPIOW6_GPIOW6[] = { { 0, 0xA0, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW6_GPIOW6 = { .signal = "GPIOW6", .function = "GPIOW6", .ndescs = (sizeof(sig_descs_GPIOW6_GPIOW6) / sizeof((sig_descs_GPIOW6_GPIOW6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW6_GPIOW6)), typeof(&(sig_descs_GPIOW6_GPIOW6)[0])))); }))), .descs = &(sig_descs_GPIOW6_GPIOW6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW6_GPIOW6[] = { (&sig_expr_GPIOW6_GPIOW6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_182_GPIOW6[(sizeof(sig_exprs_GPIOW6_GPIOW6) / sizeof((sig_exprs_GPIOW6_GPIOW6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW6_GPIOW6)), typeof(&(sig_exprs_GPIOW6_GPIOW6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW6_GPIOW6")));
static const struct aspeed_sig_desc sig_descs_ADC6_ADC6[] = { }; static const struct aspeed_sig_expr sig_expr_ADC6_ADC6 = { .signal = "ADC6", .function = "ADC6", .ndescs = (sizeof(sig_descs_ADC6_ADC6) / sizeof((sig_descs_ADC6_ADC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC6_ADC6)), typeof(&(sig_descs_ADC6_ADC6)[0])))); }))), .descs = &(sig_descs_ADC6_ADC6)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC6_ADC6[] = { (&sig_expr_ADC6_ADC6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_182_ADC6[(sizeof(sig_exprs_ADC6_ADC6) / sizeof((sig_exprs_ADC6_ADC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC6_ADC6)), typeof(&(sig_exprs_ADC6_ADC6)[0])))); })))] __attribute__((alias("sig_exprs_ADC6_ADC6")));
static const struct aspeed_sig_expr **pin_exprs_182[] = { sig_exprs_182_GPIOW6, sig_exprs_182_ADC6, ((void *)0) }; static const struct aspeed_pin_desc pin_182 = { "G5", (&pin_exprs_182[0]) };
static const int group_pins_ADC6[] = { 182 }; static const char *func_groups_ADC6[] = { "ADC6" };


static const struct aspeed_sig_desc sig_descs_GPIOW7_GPIOW7[] = { { 0, 0xA0, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOW7_GPIOW7 = { .signal = "GPIOW7", .function = "GPIOW7", .ndescs = (sizeof(sig_descs_GPIOW7_GPIOW7) / sizeof((sig_descs_GPIOW7_GPIOW7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOW7_GPIOW7)), typeof(&(sig_descs_GPIOW7_GPIOW7)[0])))); }))), .descs = &(sig_descs_GPIOW7_GPIOW7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOW7_GPIOW7[] = { (&sig_expr_GPIOW7_GPIOW7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_183_GPIOW7[(sizeof(sig_exprs_GPIOW7_GPIOW7) / sizeof((sig_exprs_GPIOW7_GPIOW7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOW7_GPIOW7)), typeof(&(sig_exprs_GPIOW7_GPIOW7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOW7_GPIOW7")));
static const struct aspeed_sig_desc sig_descs_ADC7_ADC7[] = { }; static const struct aspeed_sig_expr sig_expr_ADC7_ADC7 = { .signal = "ADC7", .function = "ADC7", .ndescs = (sizeof(sig_descs_ADC7_ADC7) / sizeof((sig_descs_ADC7_ADC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC7_ADC7)), typeof(&(sig_descs_ADC7_ADC7)[0])))); }))), .descs = &(sig_descs_ADC7_ADC7)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC7_ADC7[] = { (&sig_expr_ADC7_ADC7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_183_ADC7[(sizeof(sig_exprs_ADC7_ADC7) / sizeof((sig_exprs_ADC7_ADC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC7_ADC7)), typeof(&(sig_exprs_ADC7_ADC7)[0])))); })))] __attribute__((alias("sig_exprs_ADC7_ADC7")));
static const struct aspeed_sig_expr **pin_exprs_183[] = { sig_exprs_183_GPIOW7, sig_exprs_183_ADC7, ((void *)0) }; static const struct aspeed_pin_desc pin_183 = { "G4", (&pin_exprs_183[0]) };
static const int group_pins_ADC7[] = { 183 }; static const char *func_groups_ADC7[] = { "ADC7" };


static const struct aspeed_sig_desc sig_descs_GPIOX0_GPIOX0[] = { { 0, 0xA4, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX0_GPIOX0 = { .signal = "GPIOX0", .function = "GPIOX0", .ndescs = (sizeof(sig_descs_GPIOX0_GPIOX0) / sizeof((sig_descs_GPIOX0_GPIOX0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX0_GPIOX0)), typeof(&(sig_descs_GPIOX0_GPIOX0)[0])))); }))), .descs = &(sig_descs_GPIOX0_GPIOX0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX0_GPIOX0[] = { (&sig_expr_GPIOX0_GPIOX0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_184_GPIOX0[(sizeof(sig_exprs_GPIOX0_GPIOX0) / sizeof((sig_exprs_GPIOX0_GPIOX0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX0_GPIOX0)), typeof(&(sig_exprs_GPIOX0_GPIOX0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX0_GPIOX0")));
static const struct aspeed_sig_desc sig_descs_ADC8_ADC8[] = { }; static const struct aspeed_sig_expr sig_expr_ADC8_ADC8 = { .signal = "ADC8", .function = "ADC8", .ndescs = (sizeof(sig_descs_ADC8_ADC8) / sizeof((sig_descs_ADC8_ADC8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC8_ADC8)), typeof(&(sig_descs_ADC8_ADC8)[0])))); }))), .descs = &(sig_descs_ADC8_ADC8)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC8_ADC8[] = { (&sig_expr_ADC8_ADC8), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_184_ADC8[(sizeof(sig_exprs_ADC8_ADC8) / sizeof((sig_exprs_ADC8_ADC8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC8_ADC8)), typeof(&(sig_exprs_ADC8_ADC8)[0])))); })))] __attribute__((alias("sig_exprs_ADC8_ADC8")));
static const struct aspeed_sig_expr **pin_exprs_184[] = { sig_exprs_184_GPIOX0, sig_exprs_184_ADC8, ((void *)0) }; static const struct aspeed_pin_desc pin_184 = { "F2", (&pin_exprs_184[0]) };
static const int group_pins_ADC8[] = { 184 }; static const char *func_groups_ADC8[] = { "ADC8" };


static const struct aspeed_sig_desc sig_descs_GPIOX1_GPIOX1[] = { { 0, 0xA4, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX1_GPIOX1 = { .signal = "GPIOX1", .function = "GPIOX1", .ndescs = (sizeof(sig_descs_GPIOX1_GPIOX1) / sizeof((sig_descs_GPIOX1_GPIOX1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX1_GPIOX1)), typeof(&(sig_descs_GPIOX1_GPIOX1)[0])))); }))), .descs = &(sig_descs_GPIOX1_GPIOX1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX1_GPIOX1[] = { (&sig_expr_GPIOX1_GPIOX1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_185_GPIOX1[(sizeof(sig_exprs_GPIOX1_GPIOX1) / sizeof((sig_exprs_GPIOX1_GPIOX1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX1_GPIOX1)), typeof(&(sig_exprs_GPIOX1_GPIOX1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX1_GPIOX1")));
static const struct aspeed_sig_desc sig_descs_ADC9_ADC9[] = { }; static const struct aspeed_sig_expr sig_expr_ADC9_ADC9 = { .signal = "ADC9", .function = "ADC9", .ndescs = (sizeof(sig_descs_ADC9_ADC9) / sizeof((sig_descs_ADC9_ADC9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC9_ADC9)), typeof(&(sig_descs_ADC9_ADC9)[0])))); }))), .descs = &(sig_descs_ADC9_ADC9)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC9_ADC9[] = { (&sig_expr_ADC9_ADC9), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_185_ADC9[(sizeof(sig_exprs_ADC9_ADC9) / sizeof((sig_exprs_ADC9_ADC9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC9_ADC9)), typeof(&(sig_exprs_ADC9_ADC9)[0])))); })))] __attribute__((alias("sig_exprs_ADC9_ADC9")));
static const struct aspeed_sig_expr **pin_exprs_185[] = { sig_exprs_185_GPIOX1, sig_exprs_185_ADC9, ((void *)0) }; static const struct aspeed_pin_desc pin_185 = { "G3", (&pin_exprs_185[0]) };
static const int group_pins_ADC9[] = { 185 }; static const char *func_groups_ADC9[] = { "ADC9" };


static const struct aspeed_sig_desc sig_descs_GPIOX2_GPIOX2[] = { { 0, 0xA4, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX2_GPIOX2 = { .signal = "GPIOX2", .function = "GPIOX2", .ndescs = (sizeof(sig_descs_GPIOX2_GPIOX2) / sizeof((sig_descs_GPIOX2_GPIOX2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX2_GPIOX2)), typeof(&(sig_descs_GPIOX2_GPIOX2)[0])))); }))), .descs = &(sig_descs_GPIOX2_GPIOX2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX2_GPIOX2[] = { (&sig_expr_GPIOX2_GPIOX2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_186_GPIOX2[(sizeof(sig_exprs_GPIOX2_GPIOX2) / sizeof((sig_exprs_GPIOX2_GPIOX2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX2_GPIOX2)), typeof(&(sig_exprs_GPIOX2_GPIOX2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX2_GPIOX2")));
static const struct aspeed_sig_desc sig_descs_ADC10_ADC10[] = { }; static const struct aspeed_sig_expr sig_expr_ADC10_ADC10 = { .signal = "ADC10", .function = "ADC10", .ndescs = (sizeof(sig_descs_ADC10_ADC10) / sizeof((sig_descs_ADC10_ADC10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC10_ADC10)), typeof(&(sig_descs_ADC10_ADC10)[0])))); }))), .descs = &(sig_descs_ADC10_ADC10)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC10_ADC10[] = { (&sig_expr_ADC10_ADC10), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_186_ADC10[(sizeof(sig_exprs_ADC10_ADC10) / sizeof((sig_exprs_ADC10_ADC10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC10_ADC10)), typeof(&(sig_exprs_ADC10_ADC10)[0])))); })))] __attribute__((alias("sig_exprs_ADC10_ADC10")));
static const struct aspeed_sig_expr **pin_exprs_186[] = { sig_exprs_186_GPIOX2, sig_exprs_186_ADC10, ((void *)0) }; static const struct aspeed_pin_desc pin_186 = { "G2", (&pin_exprs_186[0]) };
static const int group_pins_ADC10[] = { 186 }; static const char *func_groups_ADC10[] = { "ADC10" };


static const struct aspeed_sig_desc sig_descs_GPIOX3_GPIOX3[] = { { 0, 0xA4, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX3_GPIOX3 = { .signal = "GPIOX3", .function = "GPIOX3", .ndescs = (sizeof(sig_descs_GPIOX3_GPIOX3) / sizeof((sig_descs_GPIOX3_GPIOX3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX3_GPIOX3)), typeof(&(sig_descs_GPIOX3_GPIOX3)[0])))); }))), .descs = &(sig_descs_GPIOX3_GPIOX3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX3_GPIOX3[] = { (&sig_expr_GPIOX3_GPIOX3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_187_GPIOX3[(sizeof(sig_exprs_GPIOX3_GPIOX3) / sizeof((sig_exprs_GPIOX3_GPIOX3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX3_GPIOX3)), typeof(&(sig_exprs_GPIOX3_GPIOX3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX3_GPIOX3")));
static const struct aspeed_sig_desc sig_descs_ADC11_ADC11[] = { }; static const struct aspeed_sig_expr sig_expr_ADC11_ADC11 = { .signal = "ADC11", .function = "ADC11", .ndescs = (sizeof(sig_descs_ADC11_ADC11) / sizeof((sig_descs_ADC11_ADC11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC11_ADC11)), typeof(&(sig_descs_ADC11_ADC11)[0])))); }))), .descs = &(sig_descs_ADC11_ADC11)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC11_ADC11[] = { (&sig_expr_ADC11_ADC11), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_187_ADC11[(sizeof(sig_exprs_ADC11_ADC11) / sizeof((sig_exprs_ADC11_ADC11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC11_ADC11)), typeof(&(sig_exprs_ADC11_ADC11)[0])))); })))] __attribute__((alias("sig_exprs_ADC11_ADC11")));
static const struct aspeed_sig_expr **pin_exprs_187[] = { sig_exprs_187_GPIOX3, sig_exprs_187_ADC11, ((void *)0) }; static const struct aspeed_pin_desc pin_187 = { "F1", (&pin_exprs_187[0]) };
static const int group_pins_ADC11[] = { 187 }; static const char *func_groups_ADC11[] = { "ADC11" };


static const struct aspeed_sig_desc sig_descs_GPIOX4_GPIOX4[] = { { 0, 0xA4, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX4_GPIOX4 = { .signal = "GPIOX4", .function = "GPIOX4", .ndescs = (sizeof(sig_descs_GPIOX4_GPIOX4) / sizeof((sig_descs_GPIOX4_GPIOX4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX4_GPIOX4)), typeof(&(sig_descs_GPIOX4_GPIOX4)[0])))); }))), .descs = &(sig_descs_GPIOX4_GPIOX4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX4_GPIOX4[] = { (&sig_expr_GPIOX4_GPIOX4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_188_GPIOX4[(sizeof(sig_exprs_GPIOX4_GPIOX4) / sizeof((sig_exprs_GPIOX4_GPIOX4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX4_GPIOX4)), typeof(&(sig_exprs_GPIOX4_GPIOX4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX4_GPIOX4")));
static const struct aspeed_sig_desc sig_descs_ADC12_ADC12[] = { }; static const struct aspeed_sig_expr sig_expr_ADC12_ADC12 = { .signal = "ADC12", .function = "ADC12", .ndescs = (sizeof(sig_descs_ADC12_ADC12) / sizeof((sig_descs_ADC12_ADC12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC12_ADC12)), typeof(&(sig_descs_ADC12_ADC12)[0])))); }))), .descs = &(sig_descs_ADC12_ADC12)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC12_ADC12[] = { (&sig_expr_ADC12_ADC12), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_188_ADC12[(sizeof(sig_exprs_ADC12_ADC12) / sizeof((sig_exprs_ADC12_ADC12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC12_ADC12)), typeof(&(sig_exprs_ADC12_ADC12)[0])))); })))] __attribute__((alias("sig_exprs_ADC12_ADC12")));
static const struct aspeed_sig_expr **pin_exprs_188[] = { sig_exprs_188_GPIOX4, sig_exprs_188_ADC12, ((void *)0) }; static const struct aspeed_pin_desc pin_188 = { "H5", (&pin_exprs_188[0]) };
static const int group_pins_ADC12[] = { 188 }; static const char *func_groups_ADC12[] = { "ADC12" };


static const struct aspeed_sig_desc sig_descs_GPIOX5_GPIOX5[] = { { 0, 0xA4, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX5_GPIOX5 = { .signal = "GPIOX5", .function = "GPIOX5", .ndescs = (sizeof(sig_descs_GPIOX5_GPIOX5) / sizeof((sig_descs_GPIOX5_GPIOX5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX5_GPIOX5)), typeof(&(sig_descs_GPIOX5_GPIOX5)[0])))); }))), .descs = &(sig_descs_GPIOX5_GPIOX5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX5_GPIOX5[] = { (&sig_expr_GPIOX5_GPIOX5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_189_GPIOX5[(sizeof(sig_exprs_GPIOX5_GPIOX5) / sizeof((sig_exprs_GPIOX5_GPIOX5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX5_GPIOX5)), typeof(&(sig_exprs_GPIOX5_GPIOX5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX5_GPIOX5")));
static const struct aspeed_sig_desc sig_descs_ADC13_ADC13[] = { }; static const struct aspeed_sig_expr sig_expr_ADC13_ADC13 = { .signal = "ADC13", .function = "ADC13", .ndescs = (sizeof(sig_descs_ADC13_ADC13) / sizeof((sig_descs_ADC13_ADC13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC13_ADC13)), typeof(&(sig_descs_ADC13_ADC13)[0])))); }))), .descs = &(sig_descs_ADC13_ADC13)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC13_ADC13[] = { (&sig_expr_ADC13_ADC13), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_189_ADC13[(sizeof(sig_exprs_ADC13_ADC13) / sizeof((sig_exprs_ADC13_ADC13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC13_ADC13)), typeof(&(sig_exprs_ADC13_ADC13)[0])))); })))] __attribute__((alias("sig_exprs_ADC13_ADC13")));
static const struct aspeed_sig_expr **pin_exprs_189[] = { sig_exprs_189_GPIOX5, sig_exprs_189_ADC13, ((void *)0) }; static const struct aspeed_pin_desc pin_189 = { "G1", (&pin_exprs_189[0]) };
static const int group_pins_ADC13[] = { 189 }; static const char *func_groups_ADC13[] = { "ADC13" };


static const struct aspeed_sig_desc sig_descs_GPIOX6_GPIOX6[] = { { 0, 0xA4, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX6_GPIOX6 = { .signal = "GPIOX6", .function = "GPIOX6", .ndescs = (sizeof(sig_descs_GPIOX6_GPIOX6) / sizeof((sig_descs_GPIOX6_GPIOX6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX6_GPIOX6)), typeof(&(sig_descs_GPIOX6_GPIOX6)[0])))); }))), .descs = &(sig_descs_GPIOX6_GPIOX6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX6_GPIOX6[] = { (&sig_expr_GPIOX6_GPIOX6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_190_GPIOX6[(sizeof(sig_exprs_GPIOX6_GPIOX6) / sizeof((sig_exprs_GPIOX6_GPIOX6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX6_GPIOX6)), typeof(&(sig_exprs_GPIOX6_GPIOX6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX6_GPIOX6")));
static const struct aspeed_sig_desc sig_descs_ADC14_ADC14[] = { }; static const struct aspeed_sig_expr sig_expr_ADC14_ADC14 = { .signal = "ADC14", .function = "ADC14", .ndescs = (sizeof(sig_descs_ADC14_ADC14) / sizeof((sig_descs_ADC14_ADC14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC14_ADC14)), typeof(&(sig_descs_ADC14_ADC14)[0])))); }))), .descs = &(sig_descs_ADC14_ADC14)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC14_ADC14[] = { (&sig_expr_ADC14_ADC14), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_190_ADC14[(sizeof(sig_exprs_ADC14_ADC14) / sizeof((sig_exprs_ADC14_ADC14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC14_ADC14)), typeof(&(sig_exprs_ADC14_ADC14)[0])))); })))] __attribute__((alias("sig_exprs_ADC14_ADC14")));
static const struct aspeed_sig_expr **pin_exprs_190[] = { sig_exprs_190_GPIOX6, sig_exprs_190_ADC14, ((void *)0) }; static const struct aspeed_pin_desc pin_190 = { "H3", (&pin_exprs_190[0]) };
static const int group_pins_ADC14[] = { 190 }; static const char *func_groups_ADC14[] = { "ADC14" };


static const struct aspeed_sig_desc sig_descs_GPIOX7_GPIOX7[] = { { 0, 0xA4, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_GPIOX7_GPIOX7 = { .signal = "GPIOX7", .function = "GPIOX7", .ndescs = (sizeof(sig_descs_GPIOX7_GPIOX7) / sizeof((sig_descs_GPIOX7_GPIOX7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOX7_GPIOX7)), typeof(&(sig_descs_GPIOX7_GPIOX7)[0])))); }))), .descs = &(sig_descs_GPIOX7_GPIOX7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOX7_GPIOX7[] = { (&sig_expr_GPIOX7_GPIOX7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_191_GPIOX7[(sizeof(sig_exprs_GPIOX7_GPIOX7) / sizeof((sig_exprs_GPIOX7_GPIOX7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOX7_GPIOX7)), typeof(&(sig_exprs_GPIOX7_GPIOX7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOX7_GPIOX7")));
static const struct aspeed_sig_desc sig_descs_ADC15_ADC15[] = { }; static const struct aspeed_sig_expr sig_expr_ADC15_ADC15 = { .signal = "ADC15", .function = "ADC15", .ndescs = (sizeof(sig_descs_ADC15_ADC15) / sizeof((sig_descs_ADC15_ADC15)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ADC15_ADC15)), typeof(&(sig_descs_ADC15_ADC15)[0])))); }))), .descs = &(sig_descs_ADC15_ADC15)[0], }; static const struct aspeed_sig_expr *sig_exprs_ADC15_ADC15[] = { (&sig_expr_ADC15_ADC15), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_191_ADC15[(sizeof(sig_exprs_ADC15_ADC15) / sizeof((sig_exprs_ADC15_ADC15)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ADC15_ADC15)), typeof(&(sig_exprs_ADC15_ADC15)[0])))); })))] __attribute__((alias("sig_exprs_ADC15_ADC15")));
static const struct aspeed_sig_expr **pin_exprs_191[] = { sig_exprs_191_GPIOX7, sig_exprs_191_ADC15, ((void *)0) }; static const struct aspeed_pin_desc pin_191 = { "H4", (&pin_exprs_191[0]) };
static const int group_pins_ADC15[] = { 191 }; static const char *func_groups_ADC15[] = { "ADC15" };




static const struct aspeed_sig_desc sig_descs_SIOS3_SIOS3[] = { { 0, 0xA4, ((((1UL))) << ((8) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOS3_SIOS3 = { .signal = "SIOS3", .function = "SIOS3", .ndescs = (sizeof(sig_descs_SIOS3_SIOS3) / sizeof((sig_descs_SIOS3_SIOS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOS3_SIOS3)), typeof(&(sig_descs_SIOS3_SIOS3)[0])))); }))), .descs = &(sig_descs_SIOS3_SIOS3)[0], };
static const struct aspeed_sig_desc sig_descs_SIOS3_ACPI[] = { { 0, 0x70, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOS3_ACPI = { .signal = "SIOS3", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOS3_ACPI) / sizeof((sig_descs_SIOS3_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOS3_ACPI)), typeof(&(sig_descs_SIOS3_ACPI)[0])))); }))), .descs = &(sig_descs_SIOS3_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOS3_SIOS3[] = { (&sig_expr_SIOS3_SIOS3), (&sig_expr_SIOS3_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_192_SIOS3[(sizeof(sig_exprs_SIOS3_SIOS3) / sizeof((sig_exprs_SIOS3_SIOS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOS3_SIOS3)), typeof(&(sig_exprs_SIOS3_SIOS3)[0])))); })))] __attribute__((alias("sig_exprs_SIOS3_SIOS3")));
static const struct aspeed_sig_desc sig_descs_DASHR22_DASHR22[] = { { 0, 0x94, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHR22_DASHR22 = { .signal = "DASHR22", .function = "DASHR22", .ndescs = (sizeof(sig_descs_DASHR22_DASHR22) / sizeof((sig_descs_DASHR22_DASHR22)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHR22_DASHR22)), typeof(&(sig_descs_DASHR22_DASHR22)[0])))); }))), .descs = &(sig_descs_DASHR22_DASHR22)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHR22_DASHR22[] = { (&sig_expr_DASHR22_DASHR22), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_192_DASHR22[(sizeof(sig_exprs_DASHR22_DASHR22) / sizeof((sig_exprs_DASHR22_DASHR22)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHR22_DASHR22)), typeof(&(sig_exprs_DASHR22_DASHR22)[0])))); })))] __attribute__((alias("sig_exprs_DASHR22_DASHR22")));
static const struct aspeed_sig_desc sig_descs_GPIOY0_GPIOY0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY0_GPIOY0 = { .signal = "GPIOY0", .function = "GPIOY0", .ndescs = (sizeof(sig_descs_GPIOY0_GPIOY0) / sizeof((sig_descs_GPIOY0_GPIOY0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY0_GPIOY0)), typeof(&(sig_descs_GPIOY0_GPIOY0)[0])))); }))), .descs = &(sig_descs_GPIOY0_GPIOY0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY0_GPIOY0[] = { (&sig_expr_GPIOY0_GPIOY0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_192_GPIOY0[(sizeof(sig_exprs_GPIOY0_GPIOY0) / sizeof((sig_exprs_GPIOY0_GPIOY0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY0_GPIOY0)), typeof(&(sig_exprs_GPIOY0_GPIOY0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY0_GPIOY0"))); static const struct aspeed_sig_expr **pin_exprs_192[] = { sig_exprs_192_SIOS3, sig_exprs_192_DASHR22, sig_exprs_192_GPIOY0, ((void *)0) }; static const struct aspeed_pin_desc pin_192 = { "192", (&pin_exprs_192[0]) };
static const int group_pins_SIOS3[] = { 192 }; static const char *func_groups_SIOS3[] = { "SIOS3" };


static const struct aspeed_sig_desc sig_descs_SIOS5_SIOS5[] = { { 0, 0xA4, ((((1UL))) << ((9) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOS5_SIOS5 = { .signal = "SIOS5", .function = "SIOS5", .ndescs = (sizeof(sig_descs_SIOS5_SIOS5) / sizeof((sig_descs_SIOS5_SIOS5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOS5_SIOS5)), typeof(&(sig_descs_SIOS5_SIOS5)[0])))); }))), .descs = &(sig_descs_SIOS5_SIOS5)[0], };
static const struct aspeed_sig_desc sig_descs_SIOS5_ACPI[] = { { 0, 0x70, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOS5_ACPI = { .signal = "SIOS5", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOS5_ACPI) / sizeof((sig_descs_SIOS5_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOS5_ACPI)), typeof(&(sig_descs_SIOS5_ACPI)[0])))); }))), .descs = &(sig_descs_SIOS5_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOS5_SIOS5[] = { (&sig_expr_SIOS5_SIOS5), (&sig_expr_SIOS5_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_193_SIOS5[(sizeof(sig_exprs_SIOS5_SIOS5) / sizeof((sig_exprs_SIOS5_SIOS5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOS5_SIOS5)), typeof(&(sig_exprs_SIOS5_SIOS5)[0])))); })))] __attribute__((alias("sig_exprs_SIOS5_SIOS5")));
static const struct aspeed_sig_desc sig_descs_DASHR21_DASHR21[] = { { 0, 0x94, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHR21_DASHR21 = { .signal = "DASHR21", .function = "DASHR21", .ndescs = (sizeof(sig_descs_DASHR21_DASHR21) / sizeof((sig_descs_DASHR21_DASHR21)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHR21_DASHR21)), typeof(&(sig_descs_DASHR21_DASHR21)[0])))); }))), .descs = &(sig_descs_DASHR21_DASHR21)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHR21_DASHR21[] = { (&sig_expr_DASHR21_DASHR21), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_193_DASHR21[(sizeof(sig_exprs_DASHR21_DASHR21) / sizeof((sig_exprs_DASHR21_DASHR21)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHR21_DASHR21)), typeof(&(sig_exprs_DASHR21_DASHR21)[0])))); })))] __attribute__((alias("sig_exprs_DASHR21_DASHR21")));
static const struct aspeed_sig_desc sig_descs_GPIOY1_GPIOY1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY1_GPIOY1 = { .signal = "GPIOY1", .function = "GPIOY1", .ndescs = (sizeof(sig_descs_GPIOY1_GPIOY1) / sizeof((sig_descs_GPIOY1_GPIOY1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY1_GPIOY1)), typeof(&(sig_descs_GPIOY1_GPIOY1)[0])))); }))), .descs = &(sig_descs_GPIOY1_GPIOY1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY1_GPIOY1[] = { (&sig_expr_GPIOY1_GPIOY1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_193_GPIOY1[(sizeof(sig_exprs_GPIOY1_GPIOY1) / sizeof((sig_exprs_GPIOY1_GPIOY1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY1_GPIOY1)), typeof(&(sig_exprs_GPIOY1_GPIOY1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY1_GPIOY1"))); static const struct aspeed_sig_expr **pin_exprs_193[] = { sig_exprs_193_SIOS5, sig_exprs_193_DASHR21, sig_exprs_193_GPIOY1, ((void *)0) }; static const struct aspeed_pin_desc pin_193 = { "193", (&pin_exprs_193[0]) };
static const int group_pins_SIOS5[] = { 193 }; static const char *func_groups_SIOS5[] = { "SIOS5" };


static const struct aspeed_sig_desc sig_descs_SIOPWREQ_SIOPWREQ[] = { { 0, 0xA4, ((((1UL))) << ((10) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPWREQ_SIOPWREQ = { .signal = "SIOPWREQ", .function = "SIOPWREQ", .ndescs = (sizeof(sig_descs_SIOPWREQ_SIOPWREQ) / sizeof((sig_descs_SIOPWREQ_SIOPWREQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPWREQ_SIOPWREQ)), typeof(&(sig_descs_SIOPWREQ_SIOPWREQ)[0])))); }))), .descs = &(sig_descs_SIOPWREQ_SIOPWREQ)[0], };
static const struct aspeed_sig_desc sig_descs_SIOPWREQ_ACPI[] = { { 0, 0x70, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPWREQ_ACPI = { .signal = "SIOPWREQ", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOPWREQ_ACPI) / sizeof((sig_descs_SIOPWREQ_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPWREQ_ACPI)), typeof(&(sig_descs_SIOPWREQ_ACPI)[0])))); }))), .descs = &(sig_descs_SIOPWREQ_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOPWREQ_SIOPWREQ[] = { (&sig_expr_SIOPWREQ_SIOPWREQ), (&sig_expr_SIOPWREQ_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_194_SIOPWREQ[(sizeof(sig_exprs_SIOPWREQ_SIOPWREQ) / sizeof((sig_exprs_SIOPWREQ_SIOPWREQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOPWREQ_SIOPWREQ)), typeof(&(sig_exprs_SIOPWREQ_SIOPWREQ)[0])))); })))] __attribute__((alias("sig_exprs_SIOPWREQ_SIOPWREQ")));
static const struct aspeed_sig_desc sig_descs_DASHP22_DASHP22[] = { { 0, 0x94, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHP22_DASHP22 = { .signal = "DASHP22", .function = "DASHP22", .ndescs = (sizeof(sig_descs_DASHP22_DASHP22) / sizeof((sig_descs_DASHP22_DASHP22)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHP22_DASHP22)), typeof(&(sig_descs_DASHP22_DASHP22)[0])))); }))), .descs = &(sig_descs_DASHP22_DASHP22)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHP22_DASHP22[] = { (&sig_expr_DASHP22_DASHP22), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_194_DASHP22[(sizeof(sig_exprs_DASHP22_DASHP22) / sizeof((sig_exprs_DASHP22_DASHP22)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHP22_DASHP22)), typeof(&(sig_exprs_DASHP22_DASHP22)[0])))); })))] __attribute__((alias("sig_exprs_DASHP22_DASHP22")));
static const struct aspeed_sig_desc sig_descs_GPIOY2_GPIOY2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY2_GPIOY2 = { .signal = "GPIOY2", .function = "GPIOY2", .ndescs = (sizeof(sig_descs_GPIOY2_GPIOY2) / sizeof((sig_descs_GPIOY2_GPIOY2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY2_GPIOY2)), typeof(&(sig_descs_GPIOY2_GPIOY2)[0])))); }))), .descs = &(sig_descs_GPIOY2_GPIOY2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY2_GPIOY2[] = { (&sig_expr_GPIOY2_GPIOY2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_194_GPIOY2[(sizeof(sig_exprs_GPIOY2_GPIOY2) / sizeof((sig_exprs_GPIOY2_GPIOY2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY2_GPIOY2)), typeof(&(sig_exprs_GPIOY2_GPIOY2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY2_GPIOY2"))); static const struct aspeed_sig_expr **pin_exprs_194[] = { sig_exprs_194_SIOPWREQ, sig_exprs_194_DASHP22, sig_exprs_194_GPIOY2, ((void *)0) }; static const struct aspeed_pin_desc pin_194 = { "194", (&pin_exprs_194[0]) };
static const int group_pins_SIOPWREQ[] = { 194 }; static const char *func_groups_SIOPWREQ[] = { "SIOPWREQ" };


static const struct aspeed_sig_desc sig_descs_SIOONCTRL_SIOONCTRL[] = { { 0, 0xA4, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOONCTRL_SIOONCTRL = { .signal = "SIOONCTRL", .function = "SIOONCTRL", .ndescs = (sizeof(sig_descs_SIOONCTRL_SIOONCTRL) / sizeof((sig_descs_SIOONCTRL_SIOONCTRL)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOONCTRL_SIOONCTRL)), typeof(&(sig_descs_SIOONCTRL_SIOONCTRL)[0])))); }))), .descs = &(sig_descs_SIOONCTRL_SIOONCTRL)[0], };
static const struct aspeed_sig_desc sig_descs_SIOONCTRL_ACPI[] = { { 0, 0x70, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOONCTRL_ACPI = { .signal = "SIOONCTRL", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOONCTRL_ACPI) / sizeof((sig_descs_SIOONCTRL_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOONCTRL_ACPI)), typeof(&(sig_descs_SIOONCTRL_ACPI)[0])))); }))), .descs = &(sig_descs_SIOONCTRL_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOONCTRL_SIOONCTRL[] = { (&sig_expr_SIOONCTRL_SIOONCTRL), (&sig_expr_SIOONCTRL_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_195_SIOONCTRL[(sizeof(sig_exprs_SIOONCTRL_SIOONCTRL) / sizeof((sig_exprs_SIOONCTRL_SIOONCTRL)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOONCTRL_SIOONCTRL)), typeof(&(sig_exprs_SIOONCTRL_SIOONCTRL)[0])))); })))] __attribute__((alias("sig_exprs_SIOONCTRL_SIOONCTRL")));
static const struct aspeed_sig_desc sig_descs_DASHP21_DASHP21[] = { { 0, 0x94, ((((1UL))) << ((11) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_DASHP21_DASHP21 = { .signal = "DASHP21", .function = "DASHP21", .ndescs = (sizeof(sig_descs_DASHP21_DASHP21) / sizeof((sig_descs_DASHP21_DASHP21)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_DASHP21_DASHP21)), typeof(&(sig_descs_DASHP21_DASHP21)[0])))); }))), .descs = &(sig_descs_DASHP21_DASHP21)[0], }; static const struct aspeed_sig_expr *sig_exprs_DASHP21_DASHP21[] = { (&sig_expr_DASHP21_DASHP21), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_195_DASHP21[(sizeof(sig_exprs_DASHP21_DASHP21) / sizeof((sig_exprs_DASHP21_DASHP21)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_DASHP21_DASHP21)), typeof(&(sig_exprs_DASHP21_DASHP21)[0])))); })))] __attribute__((alias("sig_exprs_DASHP21_DASHP21")));
static const struct aspeed_sig_desc sig_descs_GPIOY3_GPIOY3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY3_GPIOY3 = { .signal = "GPIOY3", .function = "GPIOY3", .ndescs = (sizeof(sig_descs_GPIOY3_GPIOY3) / sizeof((sig_descs_GPIOY3_GPIOY3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY3_GPIOY3)), typeof(&(sig_descs_GPIOY3_GPIOY3)[0])))); }))), .descs = &(sig_descs_GPIOY3_GPIOY3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY3_GPIOY3[] = { (&sig_expr_GPIOY3_GPIOY3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_195_GPIOY3[(sizeof(sig_exprs_GPIOY3_GPIOY3) / sizeof((sig_exprs_GPIOY3_GPIOY3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY3_GPIOY3)), typeof(&(sig_exprs_GPIOY3_GPIOY3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY3_GPIOY3"))); static const struct aspeed_sig_expr **pin_exprs_195[] = { sig_exprs_195_SIOONCTRL, sig_exprs_195_DASHP21, sig_exprs_195_GPIOY3, ((void *)0) }; static const struct aspeed_pin_desc pin_195 = { "195", (&pin_exprs_195[0]) };
static const int group_pins_SIOONCTRL[] = { 195 }; static const char *func_groups_SIOONCTRL[] = { "SIOONCTRL" };


static const struct aspeed_sig_desc sig_descs_SCL1_SCL1[] = { { 0, 0xA4, ((((1UL))) << ((12) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL1_SCL1 = { .signal = "SCL1", .function = "SCL1", .ndescs = (sizeof(sig_descs_SCL1_SCL1) / sizeof((sig_descs_SCL1_SCL1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL1_SCL1)), typeof(&(sig_descs_SCL1_SCL1)[0])))); }))), .descs = &(sig_descs_SCL1_SCL1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL1_SCL1[] = { (&sig_expr_SCL1_SCL1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_196_SCL1[(sizeof(sig_exprs_SCL1_SCL1) / sizeof((sig_exprs_SCL1_SCL1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL1_SCL1)), typeof(&(sig_exprs_SCL1_SCL1)[0])))); })))] __attribute__((alias("sig_exprs_SCL1_SCL1"))); static const struct aspeed_sig_desc sig_descs_GPIOY4_GPIOY4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY4_GPIOY4 = { .signal = "GPIOY4", .function = "GPIOY4", .ndescs = (sizeof(sig_descs_GPIOY4_GPIOY4) / sizeof((sig_descs_GPIOY4_GPIOY4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY4_GPIOY4)), typeof(&(sig_descs_GPIOY4_GPIOY4)[0])))); }))), .descs = &(sig_descs_GPIOY4_GPIOY4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY4_GPIOY4[] = { (&sig_expr_GPIOY4_GPIOY4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_196_GPIOY4[(sizeof(sig_exprs_GPIOY4_GPIOY4) / sizeof((sig_exprs_GPIOY4_GPIOY4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY4_GPIOY4)), typeof(&(sig_exprs_GPIOY4_GPIOY4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY4_GPIOY4"))); static const struct aspeed_sig_expr **pin_exprs_196[] = { sig_exprs_196_SCL1, sig_exprs_196_GPIOY4, ((void *)0) }; static const struct aspeed_pin_desc pin_196 = { "196", (&pin_exprs_196[0]) }; static const int group_pins_SCL1[] = { 196 }; static const char *func_groups_SCL1[] = { "SCL1" };


static const struct aspeed_sig_desc sig_descs_SDA1_SDA1[] = { { 0, 0xA4, ((((1UL))) << ((13) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA1_SDA1 = { .signal = "SDA1", .function = "SDA1", .ndescs = (sizeof(sig_descs_SDA1_SDA1) / sizeof((sig_descs_SDA1_SDA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA1_SDA1)), typeof(&(sig_descs_SDA1_SDA1)[0])))); }))), .descs = &(sig_descs_SDA1_SDA1)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA1_SDA1[] = { (&sig_expr_SDA1_SDA1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_197_SDA1[(sizeof(sig_exprs_SDA1_SDA1) / sizeof((sig_exprs_SDA1_SDA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA1_SDA1)), typeof(&(sig_exprs_SDA1_SDA1)[0])))); })))] __attribute__((alias("sig_exprs_SDA1_SDA1"))); static const struct aspeed_sig_desc sig_descs_GPIOY5_GPIOY5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY5_GPIOY5 = { .signal = "GPIOY5", .function = "GPIOY5", .ndescs = (sizeof(sig_descs_GPIOY5_GPIOY5) / sizeof((sig_descs_GPIOY5_GPIOY5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY5_GPIOY5)), typeof(&(sig_descs_GPIOY5_GPIOY5)[0])))); }))), .descs = &(sig_descs_GPIOY5_GPIOY5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY5_GPIOY5[] = { (&sig_expr_GPIOY5_GPIOY5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_197_GPIOY5[(sizeof(sig_exprs_GPIOY5_GPIOY5) / sizeof((sig_exprs_GPIOY5_GPIOY5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY5_GPIOY5)), typeof(&(sig_exprs_GPIOY5_GPIOY5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY5_GPIOY5"))); static const struct aspeed_sig_expr **pin_exprs_197[] = { sig_exprs_197_SDA1, sig_exprs_197_GPIOY5, ((void *)0) }; static const struct aspeed_pin_desc pin_197 = { "197", (&pin_exprs_197[0]) }; static const int group_pins_SDA1[] = { 197 }; static const char *func_groups_SDA1[] = { "SDA1" };


static const struct aspeed_sig_desc sig_descs_SCL2_SCL2[] = { { 0, 0xA4, ((((1UL))) << ((14) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SCL2_SCL2 = { .signal = "SCL2", .function = "SCL2", .ndescs = (sizeof(sig_descs_SCL2_SCL2) / sizeof((sig_descs_SCL2_SCL2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SCL2_SCL2)), typeof(&(sig_descs_SCL2_SCL2)[0])))); }))), .descs = &(sig_descs_SCL2_SCL2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SCL2_SCL2[] = { (&sig_expr_SCL2_SCL2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_198_SCL2[(sizeof(sig_exprs_SCL2_SCL2) / sizeof((sig_exprs_SCL2_SCL2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SCL2_SCL2)), typeof(&(sig_exprs_SCL2_SCL2)[0])))); })))] __attribute__((alias("sig_exprs_SCL2_SCL2"))); static const struct aspeed_sig_desc sig_descs_GPIOY6_GPIOY6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY6_GPIOY6 = { .signal = "GPIOY6", .function = "GPIOY6", .ndescs = (sizeof(sig_descs_GPIOY6_GPIOY6) / sizeof((sig_descs_GPIOY6_GPIOY6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY6_GPIOY6)), typeof(&(sig_descs_GPIOY6_GPIOY6)[0])))); }))), .descs = &(sig_descs_GPIOY6_GPIOY6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY6_GPIOY6[] = { (&sig_expr_GPIOY6_GPIOY6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_198_GPIOY6[(sizeof(sig_exprs_GPIOY6_GPIOY6) / sizeof((sig_exprs_GPIOY6_GPIOY6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY6_GPIOY6)), typeof(&(sig_exprs_GPIOY6_GPIOY6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY6_GPIOY6"))); static const struct aspeed_sig_expr **pin_exprs_198[] = { sig_exprs_198_SCL2, sig_exprs_198_GPIOY6, ((void *)0) }; static const struct aspeed_pin_desc pin_198 = { "198", (&pin_exprs_198[0]) }; static const int group_pins_SCL2[] = { 198 }; static const char *func_groups_SCL2[] = { "SCL2" };


static const struct aspeed_sig_desc sig_descs_SDA2_SDA2[] = { { 0, 0xA4, ((((1UL))) << ((15) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SDA2_SDA2 = { .signal = "SDA2", .function = "SDA2", .ndescs = (sizeof(sig_descs_SDA2_SDA2) / sizeof((sig_descs_SDA2_SDA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SDA2_SDA2)), typeof(&(sig_descs_SDA2_SDA2)[0])))); }))), .descs = &(sig_descs_SDA2_SDA2)[0], }; static const struct aspeed_sig_expr *sig_exprs_SDA2_SDA2[] = { (&sig_expr_SDA2_SDA2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_199_SDA2[(sizeof(sig_exprs_SDA2_SDA2) / sizeof((sig_exprs_SDA2_SDA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SDA2_SDA2)), typeof(&(sig_exprs_SDA2_SDA2)[0])))); })))] __attribute__((alias("sig_exprs_SDA2_SDA2"))); static const struct aspeed_sig_desc sig_descs_GPIOY7_GPIOY7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOY7_GPIOY7 = { .signal = "GPIOY7", .function = "GPIOY7", .ndescs = (sizeof(sig_descs_GPIOY7_GPIOY7) / sizeof((sig_descs_GPIOY7_GPIOY7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOY7_GPIOY7)), typeof(&(sig_descs_GPIOY7_GPIOY7)[0])))); }))), .descs = &(sig_descs_GPIOY7_GPIOY7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOY7_GPIOY7[] = { (&sig_expr_GPIOY7_GPIOY7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_199_GPIOY7[(sizeof(sig_exprs_GPIOY7_GPIOY7) / sizeof((sig_exprs_GPIOY7_GPIOY7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOY7_GPIOY7)), typeof(&(sig_exprs_GPIOY7_GPIOY7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOY7_GPIOY7"))); static const struct aspeed_sig_expr **pin_exprs_199[] = { sig_exprs_199_SDA2, sig_exprs_199_GPIOY7, ((void *)0) }; static const struct aspeed_pin_desc pin_199 = { "199", (&pin_exprs_199[0]) }; static const int group_pins_SDA2[] = { 199 }; static const char *func_groups_SDA2[] = { "SDA2" };





static const struct aspeed_sig_desc sig_descs_VPOG2_VPO[] = { { 0, 0xA4, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG2_VPO = { .signal = "VPOG2", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG2_VPO) / sizeof((sig_descs_VPOG2_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG2_VPO)), typeof(&(sig_descs_VPOG2_VPO)[0])))); }))), .descs = &(sig_descs_VPOG2_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG2_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG2_VPOOFF1 = { .signal = "VPOG2", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG2_VPOOFF1) / sizeof((sig_descs_VPOG2_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG2_VPOOFF1)), typeof(&(sig_descs_VPOG2_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG2_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG2_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG2_VPOOFF2 = { .signal = "VPOG2", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG2_VPOOFF2) / sizeof((sig_descs_VPOG2_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG2_VPOOFF2)), typeof(&(sig_descs_VPOG2_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG2_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG2_VPO[] = { (&sig_expr_VPOG2_VPO), (&sig_expr_VPOG2_VPOOFF1), (&sig_expr_VPOG2_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_200_VPOG2[(sizeof(sig_exprs_VPOG2_VPO) / sizeof((sig_exprs_VPOG2_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG2_VPO)), typeof(&(sig_exprs_VPOG2_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG2_VPO")));
static const struct aspeed_sig_desc sig_descs_SIOPBI_SIOPBI[] = { { 0, 0xA4, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPBI_SIOPBI = { .signal = "SIOPBI", .function = "SIOPBI", .ndescs = (sizeof(sig_descs_SIOPBI_SIOPBI) / sizeof((sig_descs_SIOPBI_SIOPBI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPBI_SIOPBI)), typeof(&(sig_descs_SIOPBI_SIOPBI)[0])))); }))), .descs = &(sig_descs_SIOPBI_SIOPBI)[0], };
static const struct aspeed_sig_desc sig_descs_SIOPBI_ACPI[] = { { 0, 0xA4, ((((1UL))) << ((16) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPBI_ACPI = { .signal = "SIOPBI", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOPBI_ACPI) / sizeof((sig_descs_SIOPBI_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPBI_ACPI)), typeof(&(sig_descs_SIOPBI_ACPI)[0])))); }))), .descs = &(sig_descs_SIOPBI_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOPBI_SIOPBI[] = { (&sig_expr_SIOPBI_SIOPBI), (&sig_expr_SIOPBI_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_200_SIOPBI[(sizeof(sig_exprs_SIOPBI_SIOPBI) / sizeof((sig_exprs_SIOPBI_SIOPBI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOPBI_SIOPBI)), typeof(&(sig_exprs_SIOPBI_SIOPBI)[0])))); })))] __attribute__((alias("sig_exprs_SIOPBI_SIOPBI")));
static const struct aspeed_sig_desc sig_descs_NORA0_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA0_PNOR = { .signal = "NORA0", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA0_PNOR) / sizeof((sig_descs_NORA0_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA0_PNOR)), typeof(&(sig_descs_NORA0_PNOR)[0])))); }))), .descs = &(sig_descs_NORA0_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA0_PNOR[] = { (&sig_expr_NORA0_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_200_NORA0[(sizeof(sig_exprs_NORA0_PNOR) / sizeof((sig_exprs_NORA0_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA0_PNOR)), typeof(&(sig_exprs_NORA0_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA0_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ0_GPIOZ0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ0_GPIOZ0 = { .signal = "GPIOZ0", .function = "GPIOZ0", .ndescs = (sizeof(sig_descs_GPIOZ0_GPIOZ0) / sizeof((sig_descs_GPIOZ0_GPIOZ0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ0_GPIOZ0)), typeof(&(sig_descs_GPIOZ0_GPIOZ0)[0])))); }))), .descs = &(sig_descs_GPIOZ0_GPIOZ0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ0_GPIOZ0[] = { (&sig_expr_GPIOZ0_GPIOZ0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_200_GPIOZ0[(sizeof(sig_exprs_GPIOZ0_GPIOZ0) / sizeof((sig_exprs_GPIOZ0_GPIOZ0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ0_GPIOZ0)), typeof(&(sig_exprs_GPIOZ0_GPIOZ0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ0_GPIOZ0")));
static const struct aspeed_sig_expr **pin_exprs_200[] = { sig_exprs_200_VPOG2, sig_exprs_200_SIOPBI, sig_exprs_200_NORA0, sig_exprs_200_GPIOZ0, ((void *)0) }; static const struct aspeed_pin_desc pin_200 = { "Y20", (&pin_exprs_200[0]) };

static const int group_pins_SIOPBI[] = { 200 }; static const char *func_groups_SIOPBI[] = { "SIOPBI" };



static const struct aspeed_sig_desc sig_descs_VPOG3_VPO[] = { { 0, 0xA4, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG3_VPO = { .signal = "VPOG3", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG3_VPO) / sizeof((sig_descs_VPOG3_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG3_VPO)), typeof(&(sig_descs_VPOG3_VPO)[0])))); }))), .descs = &(sig_descs_VPOG3_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG3_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG3_VPOOFF1 = { .signal = "VPOG3", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG3_VPOOFF1) / sizeof((sig_descs_VPOG3_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG3_VPOOFF1)), typeof(&(sig_descs_VPOG3_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG3_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG3_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG3_VPOOFF2 = { .signal = "VPOG3", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG3_VPOOFF2) / sizeof((sig_descs_VPOG3_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG3_VPOOFF2)), typeof(&(sig_descs_VPOG3_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG3_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG3_VPO[] = { (&sig_expr_VPOG3_VPO), (&sig_expr_VPOG3_VPOOFF1), (&sig_expr_VPOG3_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_201_VPOG3[(sizeof(sig_exprs_VPOG3_VPO) / sizeof((sig_exprs_VPOG3_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG3_VPO)), typeof(&(sig_exprs_VPOG3_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG3_VPO")));
static const struct aspeed_sig_desc sig_descs_SIOPWRGD_SIOPWRGD[] = { { 0, 0xA4, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPWRGD_SIOPWRGD = { .signal = "SIOPWRGD", .function = "SIOPWRGD", .ndescs = (sizeof(sig_descs_SIOPWRGD_SIOPWRGD) / sizeof((sig_descs_SIOPWRGD_SIOPWRGD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPWRGD_SIOPWRGD)), typeof(&(sig_descs_SIOPWRGD_SIOPWRGD)[0])))); }))), .descs = &(sig_descs_SIOPWRGD_SIOPWRGD)[0], };
static const struct aspeed_sig_desc sig_descs_SIOPWRGD_ACPI[] = { { 0, 0xA4, ((((1UL))) << ((17) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPWRGD_ACPI = { .signal = "SIOPWRGD", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOPWRGD_ACPI) / sizeof((sig_descs_SIOPWRGD_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPWRGD_ACPI)), typeof(&(sig_descs_SIOPWRGD_ACPI)[0])))); }))), .descs = &(sig_descs_SIOPWRGD_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOPWRGD_SIOPWRGD[] = { (&sig_expr_SIOPWRGD_SIOPWRGD), (&sig_expr_SIOPWRGD_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_201_SIOPWRGD[(sizeof(sig_exprs_SIOPWRGD_SIOPWRGD) / sizeof((sig_exprs_SIOPWRGD_SIOPWRGD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOPWRGD_SIOPWRGD)), typeof(&(sig_exprs_SIOPWRGD_SIOPWRGD)[0])))); })))] __attribute__((alias("sig_exprs_SIOPWRGD_SIOPWRGD")));
static const struct aspeed_sig_desc sig_descs_NORA1_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA1_PNOR = { .signal = "NORA1", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA1_PNOR) / sizeof((sig_descs_NORA1_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA1_PNOR)), typeof(&(sig_descs_NORA1_PNOR)[0])))); }))), .descs = &(sig_descs_NORA1_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA1_PNOR[] = { (&sig_expr_NORA1_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_201_NORA1[(sizeof(sig_exprs_NORA1_PNOR) / sizeof((sig_exprs_NORA1_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA1_PNOR)), typeof(&(sig_exprs_NORA1_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA1_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ1_GPIOZ1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ1_GPIOZ1 = { .signal = "GPIOZ1", .function = "GPIOZ1", .ndescs = (sizeof(sig_descs_GPIOZ1_GPIOZ1) / sizeof((sig_descs_GPIOZ1_GPIOZ1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ1_GPIOZ1)), typeof(&(sig_descs_GPIOZ1_GPIOZ1)[0])))); }))), .descs = &(sig_descs_GPIOZ1_GPIOZ1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ1_GPIOZ1[] = { (&sig_expr_GPIOZ1_GPIOZ1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_201_GPIOZ1[(sizeof(sig_exprs_GPIOZ1_GPIOZ1) / sizeof((sig_exprs_GPIOZ1_GPIOZ1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ1_GPIOZ1)), typeof(&(sig_exprs_GPIOZ1_GPIOZ1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ1_GPIOZ1")));
static const struct aspeed_sig_expr **pin_exprs_201[] = { sig_exprs_201_VPOG3, sig_exprs_201_SIOPWRGD, sig_exprs_201_NORA1, sig_exprs_201_GPIOZ1, ((void *)0) }; static const struct aspeed_pin_desc pin_201 = { "AB20", (&pin_exprs_201[0]) };


static const int group_pins_SIOPWRGD[] = { 201 }; static const char *func_groups_SIOPWRGD[] = { "SIOPWRGD" };



static const struct aspeed_sig_desc sig_descs_VPOG4_VPO[] = { { 0, 0xA4, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG4_VPO = { .signal = "VPOG4", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG4_VPO) / sizeof((sig_descs_VPOG4_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG4_VPO)), typeof(&(sig_descs_VPOG4_VPO)[0])))); }))), .descs = &(sig_descs_VPOG4_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG4_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG4_VPOOFF1 = { .signal = "VPOG4", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG4_VPOOFF1) / sizeof((sig_descs_VPOG4_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG4_VPOOFF1)), typeof(&(sig_descs_VPOG4_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG4_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG4_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG4_VPOOFF2 = { .signal = "VPOG4", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG4_VPOOFF2) / sizeof((sig_descs_VPOG4_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG4_VPOOFF2)), typeof(&(sig_descs_VPOG4_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG4_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG4_VPO[] = { (&sig_expr_VPOG4_VPO), (&sig_expr_VPOG4_VPOOFF1), (&sig_expr_VPOG4_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_202_VPOG4[(sizeof(sig_exprs_VPOG4_VPO) / sizeof((sig_exprs_VPOG4_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG4_VPO)), typeof(&(sig_exprs_VPOG4_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG4_VPO")));
static const struct aspeed_sig_desc sig_descs_SIOPBO_SIOPBO[] = { { 0, 0xA4, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPBO_SIOPBO = { .signal = "SIOPBO", .function = "SIOPBO", .ndescs = (sizeof(sig_descs_SIOPBO_SIOPBO) / sizeof((sig_descs_SIOPBO_SIOPBO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPBO_SIOPBO)), typeof(&(sig_descs_SIOPBO_SIOPBO)[0])))); }))), .descs = &(sig_descs_SIOPBO_SIOPBO)[0], };
static const struct aspeed_sig_desc sig_descs_SIOPBO_ACPI[] = { { 0, 0xA4, ((((1UL))) << ((18) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOPBO_ACPI = { .signal = "SIOPBO", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOPBO_ACPI) / sizeof((sig_descs_SIOPBO_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOPBO_ACPI)), typeof(&(sig_descs_SIOPBO_ACPI)[0])))); }))), .descs = &(sig_descs_SIOPBO_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOPBO_SIOPBO[] = { (&sig_expr_SIOPBO_SIOPBO), (&sig_expr_SIOPBO_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_202_SIOPBO[(sizeof(sig_exprs_SIOPBO_SIOPBO) / sizeof((sig_exprs_SIOPBO_SIOPBO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOPBO_SIOPBO)), typeof(&(sig_exprs_SIOPBO_SIOPBO)[0])))); })))] __attribute__((alias("sig_exprs_SIOPBO_SIOPBO")));
static const struct aspeed_sig_desc sig_descs_NORA2_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA2_PNOR = { .signal = "NORA2", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA2_PNOR) / sizeof((sig_descs_NORA2_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA2_PNOR)), typeof(&(sig_descs_NORA2_PNOR)[0])))); }))), .descs = &(sig_descs_NORA2_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA2_PNOR[] = { (&sig_expr_NORA2_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_202_NORA2[(sizeof(sig_exprs_NORA2_PNOR) / sizeof((sig_exprs_NORA2_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA2_PNOR)), typeof(&(sig_exprs_NORA2_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA2_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ2_GPIOZ2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ2_GPIOZ2 = { .signal = "GPIOZ2", .function = "GPIOZ2", .ndescs = (sizeof(sig_descs_GPIOZ2_GPIOZ2) / sizeof((sig_descs_GPIOZ2_GPIOZ2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ2_GPIOZ2)), typeof(&(sig_descs_GPIOZ2_GPIOZ2)[0])))); }))), .descs = &(sig_descs_GPIOZ2_GPIOZ2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ2_GPIOZ2[] = { (&sig_expr_GPIOZ2_GPIOZ2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_202_GPIOZ2[(sizeof(sig_exprs_GPIOZ2_GPIOZ2) / sizeof((sig_exprs_GPIOZ2_GPIOZ2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ2_GPIOZ2)), typeof(&(sig_exprs_GPIOZ2_GPIOZ2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ2_GPIOZ2")));
static const struct aspeed_sig_expr **pin_exprs_202[] = { sig_exprs_202_VPOG4, sig_exprs_202_SIOPBO, sig_exprs_202_NORA2, sig_exprs_202_GPIOZ2, ((void *)0) }; static const struct aspeed_pin_desc pin_202 = { "AB21", (&pin_exprs_202[0]) };


static const int group_pins_SIOPBO[] = { 202 }; static const char *func_groups_SIOPBO[] = { "SIOPBO" };



static const struct aspeed_sig_desc sig_descs_VPOG5_VPO[] = { { 0, 0xA4, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG5_VPO = { .signal = "VPOG5", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG5_VPO) / sizeof((sig_descs_VPOG5_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG5_VPO)), typeof(&(sig_descs_VPOG5_VPO)[0])))); }))), .descs = &(sig_descs_VPOG5_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG5_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG5_VPOOFF1 = { .signal = "VPOG5", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG5_VPOOFF1) / sizeof((sig_descs_VPOG5_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG5_VPOOFF1)), typeof(&(sig_descs_VPOG5_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG5_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG5_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOG5_VPOOFF2 = { .signal = "VPOG5", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG5_VPOOFF2) / sizeof((sig_descs_VPOG5_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG5_VPOOFF2)), typeof(&(sig_descs_VPOG5_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG5_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG5_VPO[] = { (&sig_expr_VPOG5_VPO), (&sig_expr_VPOG5_VPOOFF1), (&sig_expr_VPOG5_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_203_VPOG5[(sizeof(sig_exprs_VPOG5_VPO) / sizeof((sig_exprs_VPOG5_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG5_VPO)), typeof(&(sig_exprs_VPOG5_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG5_VPO")));
static const struct aspeed_sig_desc sig_descs_SIOSCI_SIOSCI[] = { { 0, 0xA4, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOSCI_SIOSCI = { .signal = "SIOSCI", .function = "SIOSCI", .ndescs = (sizeof(sig_descs_SIOSCI_SIOSCI) / sizeof((sig_descs_SIOSCI_SIOSCI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOSCI_SIOSCI)), typeof(&(sig_descs_SIOSCI_SIOSCI)[0])))); }))), .descs = &(sig_descs_SIOSCI_SIOSCI)[0], };
static const struct aspeed_sig_desc sig_descs_SIOSCI_ACPI[] = { { 0, 0xA4, ((((1UL))) << ((19) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SIOSCI_ACPI = { .signal = "SIOSCI", .function = "ACPI", .ndescs = (sizeof(sig_descs_SIOSCI_ACPI) / sizeof((sig_descs_SIOSCI_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SIOSCI_ACPI)), typeof(&(sig_descs_SIOSCI_ACPI)[0])))); }))), .descs = &(sig_descs_SIOSCI_ACPI)[0], };
static const struct aspeed_sig_expr *sig_exprs_SIOSCI_SIOSCI[] = { (&sig_expr_SIOSCI_SIOSCI), (&sig_expr_SIOSCI_ACPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_203_SIOSCI[(sizeof(sig_exprs_SIOSCI_SIOSCI) / sizeof((sig_exprs_SIOSCI_SIOSCI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SIOSCI_SIOSCI)), typeof(&(sig_exprs_SIOSCI_SIOSCI)[0])))); })))] __attribute__((alias("sig_exprs_SIOSCI_SIOSCI")));
static const struct aspeed_sig_desc sig_descs_NORA3_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA3_PNOR = { .signal = "NORA3", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA3_PNOR) / sizeof((sig_descs_NORA3_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA3_PNOR)), typeof(&(sig_descs_NORA3_PNOR)[0])))); }))), .descs = &(sig_descs_NORA3_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA3_PNOR[] = { (&sig_expr_NORA3_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_203_NORA3[(sizeof(sig_exprs_NORA3_PNOR) / sizeof((sig_exprs_NORA3_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA3_PNOR)), typeof(&(sig_exprs_NORA3_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA3_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ3_GPIOZ3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ3_GPIOZ3 = { .signal = "GPIOZ3", .function = "GPIOZ3", .ndescs = (sizeof(sig_descs_GPIOZ3_GPIOZ3) / sizeof((sig_descs_GPIOZ3_GPIOZ3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ3_GPIOZ3)), typeof(&(sig_descs_GPIOZ3_GPIOZ3)[0])))); }))), .descs = &(sig_descs_GPIOZ3_GPIOZ3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ3_GPIOZ3[] = { (&sig_expr_GPIOZ3_GPIOZ3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_203_GPIOZ3[(sizeof(sig_exprs_GPIOZ3_GPIOZ3) / sizeof((sig_exprs_GPIOZ3_GPIOZ3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ3_GPIOZ3)), typeof(&(sig_exprs_GPIOZ3_GPIOZ3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ3_GPIOZ3")));
static const struct aspeed_sig_expr **pin_exprs_203[] = { sig_exprs_203_VPOG5, sig_exprs_203_SIOSCI, sig_exprs_203_NORA3, sig_exprs_203_GPIOZ3, ((void *)0) }; static const struct aspeed_pin_desc pin_203 = { "AA21", (&pin_exprs_203[0]) };


static const int group_pins_SIOSCI[] = { 203 }; static const char *func_groups_SIOSCI[] = { "SIOSCI" };

static const int group_pins_ACPI[] = { 192, 193, 194, 195, 200, 201, 202, 203 }; static const char *func_groups_ACPI[] = { "ACPI" };
# 1554 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
static const struct aspeed_sig_desc sig_descs_VPOG6_VPO[] = { { 0, 0xA4, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG6_VPO = { .signal = "VPOG6", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG6_VPO) / sizeof((sig_descs_VPOG6_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG6_VPO)), typeof(&(sig_descs_VPOG6_VPO)[0])))); }))), .descs = &(sig_descs_VPOG6_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG6_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG6_VPOOFF1 = { .signal = "VPOG6", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG6_VPOOFF1) / sizeof((sig_descs_VPOG6_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG6_VPOOFF1)), typeof(&(sig_descs_VPOG6_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG6_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG6_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((20) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG6_VPOOFF2 = { .signal = "VPOG6", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG6_VPOOFF2) / sizeof((sig_descs_VPOG6_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG6_VPOOFF2)), typeof(&(sig_descs_VPOG6_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG6_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG6_VPO[] = { (&sig_expr_VPOG6_VPO), (&sig_expr_VPOG6_VPOOFF1), (&sig_expr_VPOG6_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_204_VPOG6[(sizeof(sig_exprs_VPOG6_VPO) / sizeof((sig_exprs_VPOG6_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG6_VPO)), typeof(&(sig_exprs_VPOG6_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG6_VPO")));
static const struct aspeed_sig_desc sig_descs_NORA4_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA4_PNOR = { .signal = "NORA4", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA4_PNOR) / sizeof((sig_descs_NORA4_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA4_PNOR)), typeof(&(sig_descs_NORA4_PNOR)[0])))); }))), .descs = &(sig_descs_NORA4_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA4_PNOR[] = { (&sig_expr_NORA4_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_204_NORA4[(sizeof(sig_exprs_NORA4_PNOR) / sizeof((sig_exprs_NORA4_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA4_PNOR)), typeof(&(sig_exprs_NORA4_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA4_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ4_GPIOZ4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ4_GPIOZ4 = { .signal = "GPIOZ4", .function = "GPIOZ4", .ndescs = (sizeof(sig_descs_GPIOZ4_GPIOZ4) / sizeof((sig_descs_GPIOZ4_GPIOZ4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ4_GPIOZ4)), typeof(&(sig_descs_GPIOZ4_GPIOZ4)[0])))); }))), .descs = &(sig_descs_GPIOZ4_GPIOZ4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ4_GPIOZ4[] = { (&sig_expr_GPIOZ4_GPIOZ4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_204_GPIOZ4[(sizeof(sig_exprs_GPIOZ4_GPIOZ4) / sizeof((sig_exprs_GPIOZ4_GPIOZ4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ4_GPIOZ4)), typeof(&(sig_exprs_GPIOZ4_GPIOZ4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ4_GPIOZ4"))); static const struct aspeed_sig_expr **pin_exprs_204[] = { sig_exprs_204_VPOG6, sig_exprs_204_NORA4, sig_exprs_204_GPIOZ4, ((void *)0) }; static const struct aspeed_pin_desc pin_204 = { "204", (&pin_exprs_204[0]) };



static const struct aspeed_sig_desc sig_descs_VPOG7_VPO[] = { { 0, 0xA4, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG7_VPO = { .signal = "VPOG7", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG7_VPO) / sizeof((sig_descs_VPOG7_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG7_VPO)), typeof(&(sig_descs_VPOG7_VPO)[0])))); }))), .descs = &(sig_descs_VPOG7_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG7_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG7_VPOOFF1 = { .signal = "VPOG7", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG7_VPOOFF1) / sizeof((sig_descs_VPOG7_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG7_VPOOFF1)), typeof(&(sig_descs_VPOG7_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG7_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG7_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((21) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG7_VPOOFF2 = { .signal = "VPOG7", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG7_VPOOFF2) / sizeof((sig_descs_VPOG7_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG7_VPOOFF2)), typeof(&(sig_descs_VPOG7_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG7_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG7_VPO[] = { (&sig_expr_VPOG7_VPO), (&sig_expr_VPOG7_VPOOFF1), (&sig_expr_VPOG7_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_205_VPOG7[(sizeof(sig_exprs_VPOG7_VPO) / sizeof((sig_exprs_VPOG7_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG7_VPO)), typeof(&(sig_exprs_VPOG7_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG7_VPO")));
static const struct aspeed_sig_desc sig_descs_NORA5_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA5_PNOR = { .signal = "NORA5", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA5_PNOR) / sizeof((sig_descs_NORA5_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA5_PNOR)), typeof(&(sig_descs_NORA5_PNOR)[0])))); }))), .descs = &(sig_descs_NORA5_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA5_PNOR[] = { (&sig_expr_NORA5_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_205_NORA5[(sizeof(sig_exprs_NORA5_PNOR) / sizeof((sig_exprs_NORA5_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA5_PNOR)), typeof(&(sig_exprs_NORA5_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA5_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ5_GPIOZ5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ5_GPIOZ5 = { .signal = "GPIOZ5", .function = "GPIOZ5", .ndescs = (sizeof(sig_descs_GPIOZ5_GPIOZ5) / sizeof((sig_descs_GPIOZ5_GPIOZ5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ5_GPIOZ5)), typeof(&(sig_descs_GPIOZ5_GPIOZ5)[0])))); }))), .descs = &(sig_descs_GPIOZ5_GPIOZ5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ5_GPIOZ5[] = { (&sig_expr_GPIOZ5_GPIOZ5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_205_GPIOZ5[(sizeof(sig_exprs_GPIOZ5_GPIOZ5) / sizeof((sig_exprs_GPIOZ5_GPIOZ5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ5_GPIOZ5)), typeof(&(sig_exprs_GPIOZ5_GPIOZ5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ5_GPIOZ5"))); static const struct aspeed_sig_expr **pin_exprs_205[] = { sig_exprs_205_VPOG7, sig_exprs_205_NORA5, sig_exprs_205_GPIOZ5, ((void *)0) }; static const struct aspeed_pin_desc pin_205 = { "205", (&pin_exprs_205[0]) };



static const struct aspeed_sig_desc sig_descs_VPOG8_VPO[] = { { 0, 0xA4, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG8_VPO = { .signal = "VPOG8", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG8_VPO) / sizeof((sig_descs_VPOG8_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG8_VPO)), typeof(&(sig_descs_VPOG8_VPO)[0])))); }))), .descs = &(sig_descs_VPOG8_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG8_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG8_VPOOFF1 = { .signal = "VPOG8", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG8_VPOOFF1) / sizeof((sig_descs_VPOG8_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG8_VPOOFF1)), typeof(&(sig_descs_VPOG8_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG8_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG8_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((22) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG8_VPOOFF2 = { .signal = "VPOG8", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG8_VPOOFF2) / sizeof((sig_descs_VPOG8_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG8_VPOOFF2)), typeof(&(sig_descs_VPOG8_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG8_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG8_VPO[] = { (&sig_expr_VPOG8_VPO), (&sig_expr_VPOG8_VPOOFF1), (&sig_expr_VPOG8_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_206_VPOG8[(sizeof(sig_exprs_VPOG8_VPO) / sizeof((sig_exprs_VPOG8_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG8_VPO)), typeof(&(sig_exprs_VPOG8_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG8_VPO")));
static const struct aspeed_sig_desc sig_descs_NORA6_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA6_PNOR = { .signal = "NORA6", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA6_PNOR) / sizeof((sig_descs_NORA6_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA6_PNOR)), typeof(&(sig_descs_NORA6_PNOR)[0])))); }))), .descs = &(sig_descs_NORA6_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA6_PNOR[] = { (&sig_expr_NORA6_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_206_NORA6[(sizeof(sig_exprs_NORA6_PNOR) / sizeof((sig_exprs_NORA6_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA6_PNOR)), typeof(&(sig_exprs_NORA6_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA6_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ6_GPIOZ6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ6_GPIOZ6 = { .signal = "GPIOZ6", .function = "GPIOZ6", .ndescs = (sizeof(sig_descs_GPIOZ6_GPIOZ6) / sizeof((sig_descs_GPIOZ6_GPIOZ6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ6_GPIOZ6)), typeof(&(sig_descs_GPIOZ6_GPIOZ6)[0])))); }))), .descs = &(sig_descs_GPIOZ6_GPIOZ6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ6_GPIOZ6[] = { (&sig_expr_GPIOZ6_GPIOZ6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_206_GPIOZ6[(sizeof(sig_exprs_GPIOZ6_GPIOZ6) / sizeof((sig_exprs_GPIOZ6_GPIOZ6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ6_GPIOZ6)), typeof(&(sig_exprs_GPIOZ6_GPIOZ6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ6_GPIOZ6"))); static const struct aspeed_sig_expr **pin_exprs_206[] = { sig_exprs_206_VPOG8, sig_exprs_206_NORA6, sig_exprs_206_GPIOZ6, ((void *)0) }; static const struct aspeed_pin_desc pin_206 = { "206", (&pin_exprs_206[0]) };



static const struct aspeed_sig_desc sig_descs_VPOG9_VPO[] = { { 0, 0xA4, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG9_VPO = { .signal = "VPOG9", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOG9_VPO) / sizeof((sig_descs_VPOG9_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG9_VPO)), typeof(&(sig_descs_VPOG9_VPO)[0])))); }))), .descs = &(sig_descs_VPOG9_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG9_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG9_VPOOFF1 = { .signal = "VPOG9", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOG9_VPOOFF1) / sizeof((sig_descs_VPOG9_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG9_VPOOFF1)), typeof(&(sig_descs_VPOG9_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOG9_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOG9_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((23) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOG9_VPOOFF2 = { .signal = "VPOG9", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOG9_VPOOFF2) / sizeof((sig_descs_VPOG9_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOG9_VPOOFF2)), typeof(&(sig_descs_VPOG9_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOG9_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOG9_VPO[] = { (&sig_expr_VPOG9_VPO), (&sig_expr_VPOG9_VPOOFF1), (&sig_expr_VPOG9_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_207_VPOG9[(sizeof(sig_exprs_VPOG9_VPO) / sizeof((sig_exprs_VPOG9_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOG9_VPO)), typeof(&(sig_exprs_VPOG9_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOG9_VPO")));
static const struct aspeed_sig_desc sig_descs_NORA7_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORA7_PNOR = { .signal = "NORA7", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORA7_PNOR) / sizeof((sig_descs_NORA7_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORA7_PNOR)), typeof(&(sig_descs_NORA7_PNOR)[0])))); }))), .descs = &(sig_descs_NORA7_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORA7_PNOR[] = { (&sig_expr_NORA7_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_207_NORA7[(sizeof(sig_exprs_NORA7_PNOR) / sizeof((sig_exprs_NORA7_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORA7_PNOR)), typeof(&(sig_exprs_NORA7_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORA7_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOZ7_GPIOZ7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOZ7_GPIOZ7 = { .signal = "GPIOZ7", .function = "GPIOZ7", .ndescs = (sizeof(sig_descs_GPIOZ7_GPIOZ7) / sizeof((sig_descs_GPIOZ7_GPIOZ7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOZ7_GPIOZ7)), typeof(&(sig_descs_GPIOZ7_GPIOZ7)[0])))); }))), .descs = &(sig_descs_GPIOZ7_GPIOZ7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOZ7_GPIOZ7[] = { (&sig_expr_GPIOZ7_GPIOZ7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_207_GPIOZ7[(sizeof(sig_exprs_GPIOZ7_GPIOZ7) / sizeof((sig_exprs_GPIOZ7_GPIOZ7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOZ7_GPIOZ7)), typeof(&(sig_exprs_GPIOZ7_GPIOZ7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOZ7_GPIOZ7"))); static const struct aspeed_sig_expr **pin_exprs_207[] = { sig_exprs_207_VPOG9, sig_exprs_207_NORA7, sig_exprs_207_GPIOZ7, ((void *)0) }; static const struct aspeed_pin_desc pin_207 = { "207", (&pin_exprs_207[0]) };



static const struct aspeed_sig_desc sig_descs_VPOR2_VPO[] = { { 0, 0xA4, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR2_VPO = { .signal = "VPOR2", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR2_VPO) / sizeof((sig_descs_VPOR2_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR2_VPO)), typeof(&(sig_descs_VPOR2_VPO)[0])))); }))), .descs = &(sig_descs_VPOR2_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR2_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR2_VPOOFF1 = { .signal = "VPOR2", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR2_VPOOFF1) / sizeof((sig_descs_VPOR2_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR2_VPOOFF1)), typeof(&(sig_descs_VPOR2_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR2_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR2_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR2_VPOOFF2 = { .signal = "VPOR2", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR2_VPOOFF2) / sizeof((sig_descs_VPOR2_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR2_VPOOFF2)), typeof(&(sig_descs_VPOR2_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR2_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR2_VPO[] = { (&sig_expr_VPOR2_VPO), (&sig_expr_VPOR2_VPOOFF1), (&sig_expr_VPOR2_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_208_VPOR2[(sizeof(sig_exprs_VPOR2_VPO) / sizeof((sig_exprs_VPOR2_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR2_VPO)), typeof(&(sig_exprs_VPOR2_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR2_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT7_SALT7[] = { { 0, 0xA4, ((((1UL))) << ((24) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT7_SALT7 = { .signal = "SALT7", .function = "SALT7", .ndescs = (sizeof(sig_descs_SALT7_SALT7) / sizeof((sig_descs_SALT7_SALT7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT7_SALT7)), typeof(&(sig_descs_SALT7_SALT7)[0])))); }))), .descs = &(sig_descs_SALT7_SALT7)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT7_SALT7[] = { (&sig_expr_SALT7_SALT7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_208_SALT7[(sizeof(sig_exprs_SALT7_SALT7) / sizeof((sig_exprs_SALT7_SALT7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT7_SALT7)), typeof(&(sig_exprs_SALT7_SALT7)[0])))); })))] __attribute__((alias("sig_exprs_SALT7_SALT7")));
static const struct aspeed_sig_desc sig_descs_NORD0_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD0_PNOR = { .signal = "NORD0", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD0_PNOR) / sizeof((sig_descs_NORD0_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD0_PNOR)), typeof(&(sig_descs_NORD0_PNOR)[0])))); }))), .descs = &(sig_descs_NORD0_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD0_PNOR[] = { (&sig_expr_NORD0_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_208_NORD0[(sizeof(sig_exprs_NORD0_PNOR) / sizeof((sig_exprs_NORD0_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD0_PNOR)), typeof(&(sig_exprs_NORD0_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD0_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA0_GPIOAA0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA0_GPIOAA0 = { .signal = "GPIOAA0", .function = "GPIOAA0", .ndescs = (sizeof(sig_descs_GPIOAA0_GPIOAA0) / sizeof((sig_descs_GPIOAA0_GPIOAA0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA0_GPIOAA0)), typeof(&(sig_descs_GPIOAA0_GPIOAA0)[0])))); }))), .descs = &(sig_descs_GPIOAA0_GPIOAA0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA0_GPIOAA0[] = { (&sig_expr_GPIOAA0_GPIOAA0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_208_GPIOAA0[(sizeof(sig_exprs_GPIOAA0_GPIOAA0) / sizeof((sig_exprs_GPIOAA0_GPIOAA0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA0_GPIOAA0)), typeof(&(sig_exprs_GPIOAA0_GPIOAA0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA0_GPIOAA0")));
static const struct aspeed_sig_expr **pin_exprs_208[] = { sig_exprs_208_VPOR2, sig_exprs_208_SALT7, sig_exprs_208_NORD0, sig_exprs_208_GPIOAA0, ((void *)0) }; static const struct aspeed_pin_desc pin_208 = { "Y21", (&pin_exprs_208[0]) };

static const int group_pins_SALT7[] = { 208 }; static const char *func_groups_SALT7[] = { "SALT7" };



static const struct aspeed_sig_desc sig_descs_VPOR3_VPO[] = { { 0, 0xA4, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR3_VPO = { .signal = "VPOR3", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR3_VPO) / sizeof((sig_descs_VPOR3_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR3_VPO)), typeof(&(sig_descs_VPOR3_VPO)[0])))); }))), .descs = &(sig_descs_VPOR3_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR3_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR3_VPOOFF1 = { .signal = "VPOR3", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR3_VPOOFF1) / sizeof((sig_descs_VPOR3_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR3_VPOOFF1)), typeof(&(sig_descs_VPOR3_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR3_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR3_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR3_VPOOFF2 = { .signal = "VPOR3", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR3_VPOOFF2) / sizeof((sig_descs_VPOR3_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR3_VPOOFF2)), typeof(&(sig_descs_VPOR3_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR3_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR3_VPO[] = { (&sig_expr_VPOR3_VPO), (&sig_expr_VPOR3_VPOOFF1), (&sig_expr_VPOR3_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_209_VPOR3[(sizeof(sig_exprs_VPOR3_VPO) / sizeof((sig_exprs_VPOR3_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR3_VPO)), typeof(&(sig_exprs_VPOR3_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR3_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT8_SALT8[] = { { 0, 0xA4, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT8_SALT8 = { .signal = "SALT8", .function = "SALT8", .ndescs = (sizeof(sig_descs_SALT8_SALT8) / sizeof((sig_descs_SALT8_SALT8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT8_SALT8)), typeof(&(sig_descs_SALT8_SALT8)[0])))); }))), .descs = &(sig_descs_SALT8_SALT8)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT8_SALT8[] = { (&sig_expr_SALT8_SALT8), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_209_SALT8[(sizeof(sig_exprs_SALT8_SALT8) / sizeof((sig_exprs_SALT8_SALT8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT8_SALT8)), typeof(&(sig_exprs_SALT8_SALT8)[0])))); })))] __attribute__((alias("sig_exprs_SALT8_SALT8")));
static const struct aspeed_sig_desc sig_descs_NORD1_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD1_PNOR = { .signal = "NORD1", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD1_PNOR) / sizeof((sig_descs_NORD1_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD1_PNOR)), typeof(&(sig_descs_NORD1_PNOR)[0])))); }))), .descs = &(sig_descs_NORD1_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD1_PNOR[] = { (&sig_expr_NORD1_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_209_NORD1[(sizeof(sig_exprs_NORD1_PNOR) / sizeof((sig_exprs_NORD1_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD1_PNOR)), typeof(&(sig_exprs_NORD1_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD1_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA1_GPIOAA1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA1_GPIOAA1 = { .signal = "GPIOAA1", .function = "GPIOAA1", .ndescs = (sizeof(sig_descs_GPIOAA1_GPIOAA1) / sizeof((sig_descs_GPIOAA1_GPIOAA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA1_GPIOAA1)), typeof(&(sig_descs_GPIOAA1_GPIOAA1)[0])))); }))), .descs = &(sig_descs_GPIOAA1_GPIOAA1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA1_GPIOAA1[] = { (&sig_expr_GPIOAA1_GPIOAA1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_209_GPIOAA1[(sizeof(sig_exprs_GPIOAA1_GPIOAA1) / sizeof((sig_exprs_GPIOAA1_GPIOAA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA1_GPIOAA1)), typeof(&(sig_exprs_GPIOAA1_GPIOAA1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA1_GPIOAA1")));
static const struct aspeed_sig_expr **pin_exprs_209[] = { sig_exprs_209_VPOR3, sig_exprs_209_SALT8, sig_exprs_209_NORD1, sig_exprs_209_GPIOAA1, ((void *)0) }; static const struct aspeed_pin_desc pin_209 = { "V21", (&pin_exprs_209[0]) };

static const int group_pins_SALT8[] = { 209 }; static const char *func_groups_SALT8[] = { "SALT8" };



static const struct aspeed_sig_desc sig_descs_VPOR4_VPO[] = { { 0, 0xA4, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR4_VPO = { .signal = "VPOR4", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR4_VPO) / sizeof((sig_descs_VPOR4_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR4_VPO)), typeof(&(sig_descs_VPOR4_VPO)[0])))); }))), .descs = &(sig_descs_VPOR4_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR4_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR4_VPOOFF1 = { .signal = "VPOR4", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR4_VPOOFF1) / sizeof((sig_descs_VPOR4_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR4_VPOOFF1)), typeof(&(sig_descs_VPOR4_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR4_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR4_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR4_VPOOFF2 = { .signal = "VPOR4", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR4_VPOOFF2) / sizeof((sig_descs_VPOR4_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR4_VPOOFF2)), typeof(&(sig_descs_VPOR4_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR4_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR4_VPO[] = { (&sig_expr_VPOR4_VPO), (&sig_expr_VPOR4_VPOOFF1), (&sig_expr_VPOR4_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_210_VPOR4[(sizeof(sig_exprs_VPOR4_VPO) / sizeof((sig_exprs_VPOR4_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR4_VPO)), typeof(&(sig_exprs_VPOR4_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR4_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT9_SALT9[] = { { 0, 0xA4, ((((1UL))) << ((26) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT9_SALT9 = { .signal = "SALT9", .function = "SALT9", .ndescs = (sizeof(sig_descs_SALT9_SALT9) / sizeof((sig_descs_SALT9_SALT9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT9_SALT9)), typeof(&(sig_descs_SALT9_SALT9)[0])))); }))), .descs = &(sig_descs_SALT9_SALT9)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT9_SALT9[] = { (&sig_expr_SALT9_SALT9), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_210_SALT9[(sizeof(sig_exprs_SALT9_SALT9) / sizeof((sig_exprs_SALT9_SALT9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT9_SALT9)), typeof(&(sig_exprs_SALT9_SALT9)[0])))); })))] __attribute__((alias("sig_exprs_SALT9_SALT9")));
static const struct aspeed_sig_desc sig_descs_NORD2_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD2_PNOR = { .signal = "NORD2", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD2_PNOR) / sizeof((sig_descs_NORD2_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD2_PNOR)), typeof(&(sig_descs_NORD2_PNOR)[0])))); }))), .descs = &(sig_descs_NORD2_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD2_PNOR[] = { (&sig_expr_NORD2_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_210_NORD2[(sizeof(sig_exprs_NORD2_PNOR) / sizeof((sig_exprs_NORD2_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD2_PNOR)), typeof(&(sig_exprs_NORD2_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD2_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA2_GPIOAA2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA2_GPIOAA2 = { .signal = "GPIOAA2", .function = "GPIOAA2", .ndescs = (sizeof(sig_descs_GPIOAA2_GPIOAA2) / sizeof((sig_descs_GPIOAA2_GPIOAA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA2_GPIOAA2)), typeof(&(sig_descs_GPIOAA2_GPIOAA2)[0])))); }))), .descs = &(sig_descs_GPIOAA2_GPIOAA2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA2_GPIOAA2[] = { (&sig_expr_GPIOAA2_GPIOAA2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_210_GPIOAA2[(sizeof(sig_exprs_GPIOAA2_GPIOAA2) / sizeof((sig_exprs_GPIOAA2_GPIOAA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA2_GPIOAA2)), typeof(&(sig_exprs_GPIOAA2_GPIOAA2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA2_GPIOAA2")));
static const struct aspeed_sig_expr **pin_exprs_210[] = { sig_exprs_210_VPOR4, sig_exprs_210_SALT9, sig_exprs_210_NORD2, sig_exprs_210_GPIOAA2, ((void *)0) }; static const struct aspeed_pin_desc pin_210 = { "Y22", (&pin_exprs_210[0]) };

static const int group_pins_SALT9[] = { 210 }; static const char *func_groups_SALT9[] = { "SALT9" };



static const struct aspeed_sig_desc sig_descs_VPOR5_VPO[] = { { 0, 0xA4, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR5_VPO = { .signal = "VPOR5", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR5_VPO) / sizeof((sig_descs_VPOR5_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR5_VPO)), typeof(&(sig_descs_VPOR5_VPO)[0])))); }))), .descs = &(sig_descs_VPOR5_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR5_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR5_VPOOFF1 = { .signal = "VPOR5", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR5_VPOOFF1) / sizeof((sig_descs_VPOR5_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR5_VPOOFF1)), typeof(&(sig_descs_VPOR5_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR5_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR5_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR5_VPOOFF2 = { .signal = "VPOR5", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR5_VPOOFF2) / sizeof((sig_descs_VPOR5_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR5_VPOOFF2)), typeof(&(sig_descs_VPOR5_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR5_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR5_VPO[] = { (&sig_expr_VPOR5_VPO), (&sig_expr_VPOR5_VPOOFF1), (&sig_expr_VPOR5_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_211_VPOR5[(sizeof(sig_exprs_VPOR5_VPO) / sizeof((sig_exprs_VPOR5_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR5_VPO)), typeof(&(sig_exprs_VPOR5_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR5_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT10_SALT10[] = { { 0, 0xA4, ((((1UL))) << ((27) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT10_SALT10 = { .signal = "SALT10", .function = "SALT10", .ndescs = (sizeof(sig_descs_SALT10_SALT10) / sizeof((sig_descs_SALT10_SALT10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT10_SALT10)), typeof(&(sig_descs_SALT10_SALT10)[0])))); }))), .descs = &(sig_descs_SALT10_SALT10)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT10_SALT10[] = { (&sig_expr_SALT10_SALT10), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_211_SALT10[(sizeof(sig_exprs_SALT10_SALT10) / sizeof((sig_exprs_SALT10_SALT10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT10_SALT10)), typeof(&(sig_exprs_SALT10_SALT10)[0])))); })))] __attribute__((alias("sig_exprs_SALT10_SALT10")));
static const struct aspeed_sig_desc sig_descs_NORD3_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD3_PNOR = { .signal = "NORD3", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD3_PNOR) / sizeof((sig_descs_NORD3_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD3_PNOR)), typeof(&(sig_descs_NORD3_PNOR)[0])))); }))), .descs = &(sig_descs_NORD3_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD3_PNOR[] = { (&sig_expr_NORD3_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_211_NORD3[(sizeof(sig_exprs_NORD3_PNOR) / sizeof((sig_exprs_NORD3_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD3_PNOR)), typeof(&(sig_exprs_NORD3_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD3_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA3_GPIOAA3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA3_GPIOAA3 = { .signal = "GPIOAA3", .function = "GPIOAA3", .ndescs = (sizeof(sig_descs_GPIOAA3_GPIOAA3) / sizeof((sig_descs_GPIOAA3_GPIOAA3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA3_GPIOAA3)), typeof(&(sig_descs_GPIOAA3_GPIOAA3)[0])))); }))), .descs = &(sig_descs_GPIOAA3_GPIOAA3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA3_GPIOAA3[] = { (&sig_expr_GPIOAA3_GPIOAA3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_211_GPIOAA3[(sizeof(sig_exprs_GPIOAA3_GPIOAA3) / sizeof((sig_exprs_GPIOAA3_GPIOAA3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA3_GPIOAA3)), typeof(&(sig_exprs_GPIOAA3_GPIOAA3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA3_GPIOAA3")));
static const struct aspeed_sig_expr **pin_exprs_211[] = { sig_exprs_211_VPOR5, sig_exprs_211_SALT10, sig_exprs_211_NORD3, sig_exprs_211_GPIOAA3, ((void *)0) }; static const struct aspeed_pin_desc pin_211 = { "AA22", (&pin_exprs_211[0]) };


static const int group_pins_SALT10[] = { 211 }; static const char *func_groups_SALT10[] = { "SALT10" };



static const struct aspeed_sig_desc sig_descs_VPOR6_VPO[] = { { 0, 0xA4, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR6_VPO = { .signal = "VPOR6", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR6_VPO) / sizeof((sig_descs_VPOR6_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR6_VPO)), typeof(&(sig_descs_VPOR6_VPO)[0])))); }))), .descs = &(sig_descs_VPOR6_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR6_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR6_VPOOFF1 = { .signal = "VPOR6", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR6_VPOOFF1) / sizeof((sig_descs_VPOR6_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR6_VPOOFF1)), typeof(&(sig_descs_VPOR6_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR6_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR6_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR6_VPOOFF2 = { .signal = "VPOR6", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR6_VPOOFF2) / sizeof((sig_descs_VPOR6_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR6_VPOOFF2)), typeof(&(sig_descs_VPOR6_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR6_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR6_VPO[] = { (&sig_expr_VPOR6_VPO), (&sig_expr_VPOR6_VPOOFF1), (&sig_expr_VPOR6_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_212_VPOR6[(sizeof(sig_exprs_VPOR6_VPO) / sizeof((sig_exprs_VPOR6_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR6_VPO)), typeof(&(sig_exprs_VPOR6_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR6_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT11_SALT11[] = { { 0, 0xA4, ((((1UL))) << ((28) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT11_SALT11 = { .signal = "SALT11", .function = "SALT11", .ndescs = (sizeof(sig_descs_SALT11_SALT11) / sizeof((sig_descs_SALT11_SALT11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT11_SALT11)), typeof(&(sig_descs_SALT11_SALT11)[0])))); }))), .descs = &(sig_descs_SALT11_SALT11)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT11_SALT11[] = { (&sig_expr_SALT11_SALT11), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_212_SALT11[(sizeof(sig_exprs_SALT11_SALT11) / sizeof((sig_exprs_SALT11_SALT11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT11_SALT11)), typeof(&(sig_exprs_SALT11_SALT11)[0])))); })))] __attribute__((alias("sig_exprs_SALT11_SALT11")));
static const struct aspeed_sig_desc sig_descs_NORD4_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD4_PNOR = { .signal = "NORD4", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD4_PNOR) / sizeof((sig_descs_NORD4_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD4_PNOR)), typeof(&(sig_descs_NORD4_PNOR)[0])))); }))), .descs = &(sig_descs_NORD4_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD4_PNOR[] = { (&sig_expr_NORD4_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_212_NORD4[(sizeof(sig_exprs_NORD4_PNOR) / sizeof((sig_exprs_NORD4_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD4_PNOR)), typeof(&(sig_exprs_NORD4_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD4_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA4_GPIOAA4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA4_GPIOAA4 = { .signal = "GPIOAA4", .function = "GPIOAA4", .ndescs = (sizeof(sig_descs_GPIOAA4_GPIOAA4) / sizeof((sig_descs_GPIOAA4_GPIOAA4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA4_GPIOAA4)), typeof(&(sig_descs_GPIOAA4_GPIOAA4)[0])))); }))), .descs = &(sig_descs_GPIOAA4_GPIOAA4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA4_GPIOAA4[] = { (&sig_expr_GPIOAA4_GPIOAA4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_212_GPIOAA4[(sizeof(sig_exprs_GPIOAA4_GPIOAA4) / sizeof((sig_exprs_GPIOAA4_GPIOAA4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA4_GPIOAA4)), typeof(&(sig_exprs_GPIOAA4_GPIOAA4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA4_GPIOAA4")));
static const struct aspeed_sig_expr **pin_exprs_212[] = { sig_exprs_212_VPOR6, sig_exprs_212_SALT11, sig_exprs_212_NORD4, sig_exprs_212_GPIOAA4, ((void *)0) }; static const struct aspeed_pin_desc pin_212 = { "U22", (&pin_exprs_212[0]) };

static const int group_pins_SALT11[] = { 212 }; static const char *func_groups_SALT11[] = { "SALT11" };



static const struct aspeed_sig_desc sig_descs_VPOR7_VPO[] = { { 0, 0xA4, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR7_VPO = { .signal = "VPOR7", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR7_VPO) / sizeof((sig_descs_VPOR7_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR7_VPO)), typeof(&(sig_descs_VPOR7_VPO)[0])))); }))), .descs = &(sig_descs_VPOR7_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR7_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR7_VPOOFF1 = { .signal = "VPOR7", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR7_VPOOFF1) / sizeof((sig_descs_VPOR7_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR7_VPOOFF1)), typeof(&(sig_descs_VPOR7_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR7_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR7_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR7_VPOOFF2 = { .signal = "VPOR7", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR7_VPOOFF2) / sizeof((sig_descs_VPOR7_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR7_VPOOFF2)), typeof(&(sig_descs_VPOR7_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR7_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR7_VPO[] = { (&sig_expr_VPOR7_VPO), (&sig_expr_VPOR7_VPOOFF1), (&sig_expr_VPOR7_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_213_VPOR7[(sizeof(sig_exprs_VPOR7_VPO) / sizeof((sig_exprs_VPOR7_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR7_VPO)), typeof(&(sig_exprs_VPOR7_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR7_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT12_SALT12[] = { { 0, 0xA4, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT12_SALT12 = { .signal = "SALT12", .function = "SALT12", .ndescs = (sizeof(sig_descs_SALT12_SALT12) / sizeof((sig_descs_SALT12_SALT12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT12_SALT12)), typeof(&(sig_descs_SALT12_SALT12)[0])))); }))), .descs = &(sig_descs_SALT12_SALT12)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT12_SALT12[] = { (&sig_expr_SALT12_SALT12), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_213_SALT12[(sizeof(sig_exprs_SALT12_SALT12) / sizeof((sig_exprs_SALT12_SALT12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT12_SALT12)), typeof(&(sig_exprs_SALT12_SALT12)[0])))); })))] __attribute__((alias("sig_exprs_SALT12_SALT12")));
static const struct aspeed_sig_desc sig_descs_NORD5_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD5_PNOR = { .signal = "NORD5", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD5_PNOR) / sizeof((sig_descs_NORD5_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD5_PNOR)), typeof(&(sig_descs_NORD5_PNOR)[0])))); }))), .descs = &(sig_descs_NORD5_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD5_PNOR[] = { (&sig_expr_NORD5_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_213_NORD5[(sizeof(sig_exprs_NORD5_PNOR) / sizeof((sig_exprs_NORD5_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD5_PNOR)), typeof(&(sig_exprs_NORD5_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD5_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA5_GPIOAA5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA5_GPIOAA5 = { .signal = "GPIOAA5", .function = "GPIOAA5", .ndescs = (sizeof(sig_descs_GPIOAA5_GPIOAA5) / sizeof((sig_descs_GPIOAA5_GPIOAA5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA5_GPIOAA5)), typeof(&(sig_descs_GPIOAA5_GPIOAA5)[0])))); }))), .descs = &(sig_descs_GPIOAA5_GPIOAA5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA5_GPIOAA5[] = { (&sig_expr_GPIOAA5_GPIOAA5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_213_GPIOAA5[(sizeof(sig_exprs_GPIOAA5_GPIOAA5) / sizeof((sig_exprs_GPIOAA5_GPIOAA5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA5_GPIOAA5)), typeof(&(sig_exprs_GPIOAA5_GPIOAA5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA5_GPIOAA5")));
static const struct aspeed_sig_expr **pin_exprs_213[] = { sig_exprs_213_VPOR7, sig_exprs_213_SALT12, sig_exprs_213_NORD5, sig_exprs_213_GPIOAA5, ((void *)0) }; static const struct aspeed_pin_desc pin_213 = { "T20", (&pin_exprs_213[0]) };

static const int group_pins_SALT12[] = { 213 }; static const char *func_groups_SALT12[] = { "SALT12" };



static const struct aspeed_sig_desc sig_descs_VPOR8_VPO[] = { { 0, 0xA4, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR8_VPO = { .signal = "VPOR8", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR8_VPO) / sizeof((sig_descs_VPOR8_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR8_VPO)), typeof(&(sig_descs_VPOR8_VPO)[0])))); }))), .descs = &(sig_descs_VPOR8_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR8_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR8_VPOOFF1 = { .signal = "VPOR8", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR8_VPOOFF1) / sizeof((sig_descs_VPOR8_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR8_VPOOFF1)), typeof(&(sig_descs_VPOR8_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR8_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR8_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR8_VPOOFF2 = { .signal = "VPOR8", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR8_VPOOFF2) / sizeof((sig_descs_VPOR8_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR8_VPOOFF2)), typeof(&(sig_descs_VPOR8_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR8_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR8_VPO[] = { (&sig_expr_VPOR8_VPO), (&sig_expr_VPOR8_VPOOFF1), (&sig_expr_VPOR8_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_214_VPOR8[(sizeof(sig_exprs_VPOR8_VPO) / sizeof((sig_exprs_VPOR8_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR8_VPO)), typeof(&(sig_exprs_VPOR8_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR8_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT13_SALT13[] = { { 0, 0xA4, ((((1UL))) << ((30) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT13_SALT13 = { .signal = "SALT13", .function = "SALT13", .ndescs = (sizeof(sig_descs_SALT13_SALT13) / sizeof((sig_descs_SALT13_SALT13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT13_SALT13)), typeof(&(sig_descs_SALT13_SALT13)[0])))); }))), .descs = &(sig_descs_SALT13_SALT13)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT13_SALT13[] = { (&sig_expr_SALT13_SALT13), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_214_SALT13[(sizeof(sig_exprs_SALT13_SALT13) / sizeof((sig_exprs_SALT13_SALT13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT13_SALT13)), typeof(&(sig_exprs_SALT13_SALT13)[0])))); })))] __attribute__((alias("sig_exprs_SALT13_SALT13")));
static const struct aspeed_sig_desc sig_descs_NORD6_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD6_PNOR = { .signal = "NORD6", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD6_PNOR) / sizeof((sig_descs_NORD6_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD6_PNOR)), typeof(&(sig_descs_NORD6_PNOR)[0])))); }))), .descs = &(sig_descs_NORD6_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD6_PNOR[] = { (&sig_expr_NORD6_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_214_NORD6[(sizeof(sig_exprs_NORD6_PNOR) / sizeof((sig_exprs_NORD6_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD6_PNOR)), typeof(&(sig_exprs_NORD6_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD6_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA6_GPIOAA6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA6_GPIOAA6 = { .signal = "GPIOAA6", .function = "GPIOAA6", .ndescs = (sizeof(sig_descs_GPIOAA6_GPIOAA6) / sizeof((sig_descs_GPIOAA6_GPIOAA6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA6_GPIOAA6)), typeof(&(sig_descs_GPIOAA6_GPIOAA6)[0])))); }))), .descs = &(sig_descs_GPIOAA6_GPIOAA6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA6_GPIOAA6[] = { (&sig_expr_GPIOAA6_GPIOAA6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_214_GPIOAA6[(sizeof(sig_exprs_GPIOAA6_GPIOAA6) / sizeof((sig_exprs_GPIOAA6_GPIOAA6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA6_GPIOAA6)), typeof(&(sig_exprs_GPIOAA6_GPIOAA6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA6_GPIOAA6")));
static const struct aspeed_sig_expr **pin_exprs_214[] = { sig_exprs_214_VPOR8, sig_exprs_214_SALT13, sig_exprs_214_NORD6, sig_exprs_214_GPIOAA6, ((void *)0) }; static const struct aspeed_pin_desc pin_214 = { "N18", (&pin_exprs_214[0]) };

static const int group_pins_SALT13[] = { 214 }; static const char *func_groups_SALT13[] = { "SALT13" };



static const struct aspeed_sig_desc sig_descs_VPOR9_VPO[] = { { 0, 0xA4, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR9_VPO = { .signal = "VPOR9", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOR9_VPO) / sizeof((sig_descs_VPOR9_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR9_VPO)), typeof(&(sig_descs_VPOR9_VPO)[0])))); }))), .descs = &(sig_descs_VPOR9_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR9_VPOOFF1[] = { { 0, 0xA4, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR9_VPOOFF1 = { .signal = "VPOR9", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOR9_VPOOFF1) / sizeof((sig_descs_VPOR9_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR9_VPOOFF1)), typeof(&(sig_descs_VPOR9_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOR9_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOR9_VPOOFF2[] = { { 0, 0xA4, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, (((~(((0UL)))) - ((((1UL))) << (6)) + 1) & (~(((0UL))) >> (32 - 1 - (7)))), 2, 2 } }; static const struct aspeed_sig_expr sig_expr_VPOR9_VPOOFF2 = { .signal = "VPOR9", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOR9_VPOOFF2) / sizeof((sig_descs_VPOR9_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOR9_VPOOFF2)), typeof(&(sig_descs_VPOR9_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOR9_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOR9_VPO[] = { (&sig_expr_VPOR9_VPO), (&sig_expr_VPOR9_VPOOFF1), (&sig_expr_VPOR9_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_215_VPOR9[(sizeof(sig_exprs_VPOR9_VPO) / sizeof((sig_exprs_VPOR9_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOR9_VPO)), typeof(&(sig_exprs_VPOR9_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOR9_VPO")));
static const struct aspeed_sig_desc sig_descs_SALT14_SALT14[] = { { 0, 0xA4, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_SALT14_SALT14 = { .signal = "SALT14", .function = "SALT14", .ndescs = (sizeof(sig_descs_SALT14_SALT14) / sizeof((sig_descs_SALT14_SALT14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_SALT14_SALT14)), typeof(&(sig_descs_SALT14_SALT14)[0])))); }))), .descs = &(sig_descs_SALT14_SALT14)[0], }; static const struct aspeed_sig_expr *sig_exprs_SALT14_SALT14[] = { (&sig_expr_SALT14_SALT14), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_215_SALT14[(sizeof(sig_exprs_SALT14_SALT14) / sizeof((sig_exprs_SALT14_SALT14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_SALT14_SALT14)), typeof(&(sig_exprs_SALT14_SALT14)[0])))); })))] __attribute__((alias("sig_exprs_SALT14_SALT14")));
static const struct aspeed_sig_desc sig_descs_NORD7_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORD7_PNOR = { .signal = "NORD7", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORD7_PNOR) / sizeof((sig_descs_NORD7_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORD7_PNOR)), typeof(&(sig_descs_NORD7_PNOR)[0])))); }))), .descs = &(sig_descs_NORD7_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORD7_PNOR[] = { (&sig_expr_NORD7_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_215_NORD7[(sizeof(sig_exprs_NORD7_PNOR) / sizeof((sig_exprs_NORD7_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORD7_PNOR)), typeof(&(sig_exprs_NORD7_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORD7_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAA7_GPIOAA7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAA7_GPIOAA7 = { .signal = "GPIOAA7", .function = "GPIOAA7", .ndescs = (sizeof(sig_descs_GPIOAA7_GPIOAA7) / sizeof((sig_descs_GPIOAA7_GPIOAA7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAA7_GPIOAA7)), typeof(&(sig_descs_GPIOAA7_GPIOAA7)[0])))); }))), .descs = &(sig_descs_GPIOAA7_GPIOAA7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAA7_GPIOAA7[] = { (&sig_expr_GPIOAA7_GPIOAA7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_215_GPIOAA7[(sizeof(sig_exprs_GPIOAA7_GPIOAA7) / sizeof((sig_exprs_GPIOAA7_GPIOAA7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAA7_GPIOAA7)), typeof(&(sig_exprs_GPIOAA7_GPIOAA7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAA7_GPIOAA7")));
static const struct aspeed_sig_expr **pin_exprs_215[] = { sig_exprs_215_VPOR9, sig_exprs_215_SALT14, sig_exprs_215_NORD7, sig_exprs_215_GPIOAA7, ((void *)0) }; static const struct aspeed_pin_desc pin_215 = { "P19", (&pin_exprs_215[0]) };

static const int group_pins_SALT14[] = { 215 }; static const char *func_groups_SALT14[] = { "SALT14" };



static const struct aspeed_sig_desc sig_descs_VPODE_VPO[] = { { 0, 0xA8, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPODE_VPO = { .signal = "VPODE", .function = "VPO", .ndescs = (sizeof(sig_descs_VPODE_VPO) / sizeof((sig_descs_VPODE_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPODE_VPO)), typeof(&(sig_descs_VPODE_VPO)[0])))); }))), .descs = &(sig_descs_VPODE_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPODE_VPOOFF1[] = { { 0, 0xA8, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPODE_VPOOFF1 = { .signal = "VPODE", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPODE_VPOOFF1) / sizeof((sig_descs_VPODE_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPODE_VPOOFF1)), typeof(&(sig_descs_VPODE_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPODE_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPODE_VPOOFF2[] = { { 0, 0xA8, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPODE_VPOOFF2 = { .signal = "VPODE", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPODE_VPOOFF2) / sizeof((sig_descs_VPODE_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPODE_VPOOFF2)), typeof(&(sig_descs_VPODE_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPODE_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPODE_VPO[] = { (&sig_expr_VPODE_VPO), (&sig_expr_VPODE_VPOOFF1), (&sig_expr_VPODE_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_216_VPODE[(sizeof(sig_exprs_VPODE_VPO) / sizeof((sig_exprs_VPODE_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPODE_VPO)), typeof(&(sig_exprs_VPODE_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPODE_VPO")));
static const struct aspeed_sig_desc sig_descs_NOROE_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NOROE_PNOR = { .signal = "NOROE", .function = "PNOR", .ndescs = (sizeof(sig_descs_NOROE_PNOR) / sizeof((sig_descs_NOROE_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NOROE_PNOR)), typeof(&(sig_descs_NOROE_PNOR)[0])))); }))), .descs = &(sig_descs_NOROE_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NOROE_PNOR[] = { (&sig_expr_NOROE_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_216_NOROE[(sizeof(sig_exprs_NOROE_PNOR) / sizeof((sig_exprs_NOROE_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NOROE_PNOR)), typeof(&(sig_exprs_NOROE_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NOROE_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAB0_GPIOAB0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAB0_GPIOAB0 = { .signal = "GPIOAB0", .function = "GPIOAB0", .ndescs = (sizeof(sig_descs_GPIOAB0_GPIOAB0) / sizeof((sig_descs_GPIOAB0_GPIOAB0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAB0_GPIOAB0)), typeof(&(sig_descs_GPIOAB0_GPIOAB0)[0])))); }))), .descs = &(sig_descs_GPIOAB0_GPIOAB0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAB0_GPIOAB0[] = { (&sig_expr_GPIOAB0_GPIOAB0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_216_GPIOAB0[(sizeof(sig_exprs_GPIOAB0_GPIOAB0) / sizeof((sig_exprs_GPIOAB0_GPIOAB0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAB0_GPIOAB0)), typeof(&(sig_exprs_GPIOAB0_GPIOAB0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAB0_GPIOAB0"))); static const struct aspeed_sig_expr **pin_exprs_216[] = { sig_exprs_216_VPODE, sig_exprs_216_NOROE, sig_exprs_216_GPIOAB0, ((void *)0) }; static const struct aspeed_pin_desc pin_216 = { "216", (&pin_exprs_216[0]) };



static const struct aspeed_sig_desc sig_descs_VPOHS_VPO[] = { { 0, 0xA8, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOHS_VPO = { .signal = "VPOHS", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOHS_VPO) / sizeof((sig_descs_VPOHS_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOHS_VPO)), typeof(&(sig_descs_VPOHS_VPO)[0])))); }))), .descs = &(sig_descs_VPOHS_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOHS_VPOOFF1[] = { { 0, 0xA8, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOHS_VPOOFF1 = { .signal = "VPOHS", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOHS_VPOOFF1) / sizeof((sig_descs_VPOHS_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOHS_VPOOFF1)), typeof(&(sig_descs_VPOHS_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOHS_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOHS_VPOOFF2[] = { { 0, 0xA8, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOHS_VPOOFF2 = { .signal = "VPOHS", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOHS_VPOOFF2) / sizeof((sig_descs_VPOHS_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOHS_VPOOFF2)), typeof(&(sig_descs_VPOHS_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOHS_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOHS_VPO[] = { (&sig_expr_VPOHS_VPO), (&sig_expr_VPOHS_VPOOFF1), (&sig_expr_VPOHS_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_217_VPOHS[(sizeof(sig_exprs_VPOHS_VPO) / sizeof((sig_exprs_VPOHS_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOHS_VPO)), typeof(&(sig_exprs_VPOHS_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOHS_VPO")));
static const struct aspeed_sig_desc sig_descs_NORWE_PNOR[] = { { 0, 0x90, ((((1UL))) << ((31) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_NORWE_PNOR = { .signal = "NORWE", .function = "PNOR", .ndescs = (sizeof(sig_descs_NORWE_PNOR) / sizeof((sig_descs_NORWE_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_NORWE_PNOR)), typeof(&(sig_descs_NORWE_PNOR)[0])))); }))), .descs = &(sig_descs_NORWE_PNOR)[0], }; static const struct aspeed_sig_expr *sig_exprs_NORWE_PNOR[] = { (&sig_expr_NORWE_PNOR), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_217_NORWE[(sizeof(sig_exprs_NORWE_PNOR) / sizeof((sig_exprs_NORWE_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_NORWE_PNOR)), typeof(&(sig_exprs_NORWE_PNOR)[0])))); })))] __attribute__((alias("sig_exprs_NORWE_PNOR")));
static const struct aspeed_sig_desc sig_descs_GPIOAB1_GPIOAB1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAB1_GPIOAB1 = { .signal = "GPIOAB1", .function = "GPIOAB1", .ndescs = (sizeof(sig_descs_GPIOAB1_GPIOAB1) / sizeof((sig_descs_GPIOAB1_GPIOAB1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAB1_GPIOAB1)), typeof(&(sig_descs_GPIOAB1_GPIOAB1)[0])))); }))), .descs = &(sig_descs_GPIOAB1_GPIOAB1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAB1_GPIOAB1[] = { (&sig_expr_GPIOAB1_GPIOAB1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_217_GPIOAB1[(sizeof(sig_exprs_GPIOAB1_GPIOAB1) / sizeof((sig_exprs_GPIOAB1_GPIOAB1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAB1_GPIOAB1)), typeof(&(sig_exprs_GPIOAB1_GPIOAB1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAB1_GPIOAB1"))); static const struct aspeed_sig_expr **pin_exprs_217[] = { sig_exprs_217_VPOHS, sig_exprs_217_NORWE, sig_exprs_217_GPIOAB1, ((void *)0) }; static const struct aspeed_pin_desc pin_217 = { "217", (&pin_exprs_217[0]) };

static const int group_pins_PNOR[] = { 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217 }; static const char *func_groups_PNOR[] = { "PNOR" };




static const struct aspeed_sig_desc sig_descs_VPOVS_VPO[] = { { 0, 0xA8, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOVS_VPO = { .signal = "VPOVS", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOVS_VPO) / sizeof((sig_descs_VPOVS_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOVS_VPO)), typeof(&(sig_descs_VPOVS_VPO)[0])))); }))), .descs = &(sig_descs_VPOVS_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOVS_VPOOFF1[] = { { 0, 0xA8, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOVS_VPOOFF1 = { .signal = "VPOVS", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOVS_VPOOFF1) / sizeof((sig_descs_VPOVS_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOVS_VPOOFF1)), typeof(&(sig_descs_VPOVS_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOVS_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOVS_VPOOFF2[] = { { 0, 0xA8, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOVS_VPOOFF2 = { .signal = "VPOVS", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOVS_VPOOFF2) / sizeof((sig_descs_VPOVS_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOVS_VPOOFF2)), typeof(&(sig_descs_VPOVS_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOVS_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOVS_VPO[] = { (&sig_expr_VPOVS_VPO), (&sig_expr_VPOVS_VPOOFF1), (&sig_expr_VPOVS_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_218_VPOVS[(sizeof(sig_exprs_VPOVS_VPO) / sizeof((sig_exprs_VPOVS_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOVS_VPO)), typeof(&(sig_exprs_VPOVS_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOVS_VPO")));
static const struct aspeed_sig_desc sig_descs_WDTRST1_WDTRST1[] = { { 0, 0xA8, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_WDTRST1_WDTRST1 = { .signal = "WDTRST1", .function = "WDTRST1", .ndescs = (sizeof(sig_descs_WDTRST1_WDTRST1) / sizeof((sig_descs_WDTRST1_WDTRST1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_WDTRST1_WDTRST1)), typeof(&(sig_descs_WDTRST1_WDTRST1)[0])))); }))), .descs = &(sig_descs_WDTRST1_WDTRST1)[0], }; static const struct aspeed_sig_expr *sig_exprs_WDTRST1_WDTRST1[] = { (&sig_expr_WDTRST1_WDTRST1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_218_WDTRST1[(sizeof(sig_exprs_WDTRST1_WDTRST1) / sizeof((sig_exprs_WDTRST1_WDTRST1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_WDTRST1_WDTRST1)), typeof(&(sig_exprs_WDTRST1_WDTRST1)[0])))); })))] __attribute__((alias("sig_exprs_WDTRST1_WDTRST1")));
static const struct aspeed_sig_desc sig_descs_GPIOAB2_GPIOAB2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAB2_GPIOAB2 = { .signal = "GPIOAB2", .function = "GPIOAB2", .ndescs = (sizeof(sig_descs_GPIOAB2_GPIOAB2) / sizeof((sig_descs_GPIOAB2_GPIOAB2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAB2_GPIOAB2)), typeof(&(sig_descs_GPIOAB2_GPIOAB2)[0])))); }))), .descs = &(sig_descs_GPIOAB2_GPIOAB2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAB2_GPIOAB2[] = { (&sig_expr_GPIOAB2_GPIOAB2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_218_GPIOAB2[(sizeof(sig_exprs_GPIOAB2_GPIOAB2) / sizeof((sig_exprs_GPIOAB2_GPIOAB2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAB2_GPIOAB2)), typeof(&(sig_exprs_GPIOAB2_GPIOAB2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAB2_GPIOAB2"))); static const struct aspeed_sig_expr **pin_exprs_218[] = { sig_exprs_218_VPOVS, sig_exprs_218_WDTRST1, sig_exprs_218_GPIOAB2, ((void *)0) }; static const struct aspeed_pin_desc pin_218 = { "218", (&pin_exprs_218[0]) };
static const int group_pins_WDTRST1[] = { 218 }; static const char *func_groups_WDTRST1[] = { "WDTRST1" };



static const struct aspeed_sig_desc sig_descs_VPOCLK_VPO[] = { { 0, 0xA8, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 1, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOCLK_VPO = { .signal = "VPOCLK", .function = "VPO", .ndescs = (sizeof(sig_descs_VPOCLK_VPO) / sizeof((sig_descs_VPOCLK_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOCLK_VPO)), typeof(&(sig_descs_VPOCLK_VPO)[0])))); }))), .descs = &(sig_descs_VPOCLK_VPO)[0], };
static const struct aspeed_sig_desc sig_descs_VPOCLK_VPOOFF1[] = { { 0, 0xA8, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 2, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOCLK_VPOOFF1 = { .signal = "VPOCLK", .function = "VPOOFF1", .ndescs = (sizeof(sig_descs_VPOCLK_VPOOFF1) / sizeof((sig_descs_VPOCLK_VPOOFF1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOCLK_VPOOFF1)), typeof(&(sig_descs_VPOCLK_VPOOFF1)[0])))); }))), .descs = &(sig_descs_VPOCLK_VPOOFF1)[0], };
static const struct aspeed_sig_desc sig_descs_VPOCLK_VPOOFF2[] = { { 0, 0xA8, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) }, { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (32 - 1 - (1)))), 3, 0 }, { 1, 0x64, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_VPOCLK_VPOOFF2 = { .signal = "VPOCLK", .function = "VPOOFF2", .ndescs = (sizeof(sig_descs_VPOCLK_VPOOFF2) / sizeof((sig_descs_VPOCLK_VPOOFF2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_VPOCLK_VPOOFF2)), typeof(&(sig_descs_VPOCLK_VPOOFF2)[0])))); }))), .descs = &(sig_descs_VPOCLK_VPOOFF2)[0], };
static const struct aspeed_sig_expr *sig_exprs_VPOCLK_VPO[] = { (&sig_expr_VPOCLK_VPO), (&sig_expr_VPOCLK_VPOOFF1), (&sig_expr_VPOCLK_VPOOFF2), ((void *)0) };



static const struct aspeed_sig_expr * sig_exprs_219_VPOCLK[(sizeof(sig_exprs_VPOCLK_VPO) / sizeof((sig_exprs_VPOCLK_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_VPOCLK_VPO)), typeof(&(sig_exprs_VPOCLK_VPO)[0])))); })))] __attribute__((alias("sig_exprs_VPOCLK_VPO")));
static const struct aspeed_sig_desc sig_descs_WDTRST2_WDTRST2[] = { { 0, 0xA8, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_WDTRST2_WDTRST2 = { .signal = "WDTRST2", .function = "WDTRST2", .ndescs = (sizeof(sig_descs_WDTRST2_WDTRST2) / sizeof((sig_descs_WDTRST2_WDTRST2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_WDTRST2_WDTRST2)), typeof(&(sig_descs_WDTRST2_WDTRST2)[0])))); }))), .descs = &(sig_descs_WDTRST2_WDTRST2)[0], }; static const struct aspeed_sig_expr *sig_exprs_WDTRST2_WDTRST2[] = { (&sig_expr_WDTRST2_WDTRST2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_219_WDTRST2[(sizeof(sig_exprs_WDTRST2_WDTRST2) / sizeof((sig_exprs_WDTRST2_WDTRST2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_WDTRST2_WDTRST2)), typeof(&(sig_exprs_WDTRST2_WDTRST2)[0])))); })))] __attribute__((alias("sig_exprs_WDTRST2_WDTRST2")));
static const struct aspeed_sig_desc sig_descs_GPIOAB3_GPIOAB3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAB3_GPIOAB3 = { .signal = "GPIOAB3", .function = "GPIOAB3", .ndescs = (sizeof(sig_descs_GPIOAB3_GPIOAB3) / sizeof((sig_descs_GPIOAB3_GPIOAB3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAB3_GPIOAB3)), typeof(&(sig_descs_GPIOAB3_GPIOAB3)[0])))); }))), .descs = &(sig_descs_GPIOAB3_GPIOAB3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAB3_GPIOAB3[] = { (&sig_expr_GPIOAB3_GPIOAB3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_219_GPIOAB3[(sizeof(sig_exprs_GPIOAB3_GPIOAB3) / sizeof((sig_exprs_GPIOAB3_GPIOAB3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAB3_GPIOAB3)), typeof(&(sig_exprs_GPIOAB3_GPIOAB3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAB3_GPIOAB3"))); static const struct aspeed_sig_expr **pin_exprs_219[] = { sig_exprs_219_VPOCLK, sig_exprs_219_WDTRST2, sig_exprs_219_GPIOAB3, ((void *)0) }; static const struct aspeed_pin_desc pin_219 = { "219", (&pin_exprs_219[0]) };
static const int group_pins_WDTRST2[] = { 219 }; static const char *func_groups_WDTRST2[] = { "WDTRST2" };

static const int group_pins_VPO[] = { 144, 145, 146, 147, 148, 149, 150, 151, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219 }; static const char *func_groups_VPO[] = { "VPO" };






static const struct aspeed_sig_desc sig_descs_ESPID0_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPID0_ESPI = { .signal = "ESPID0", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPID0_ESPI) / sizeof((sig_descs_ESPID0_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPID0_ESPI)), typeof(&(sig_descs_ESPID0_ESPI)[0])))); }))), .descs = &(sig_descs_ESPID0_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPID0_ESPI[] = { (&sig_expr_ESPID0_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_224_ESPID0[(sizeof(sig_exprs_ESPID0_ESPI) / sizeof((sig_exprs_ESPID0_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPID0_ESPI)), typeof(&(sig_exprs_ESPID0_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPID0_ESPI")));
static const struct aspeed_sig_desc sig_descs_LAD0_LAD0[] = { { 0, 0xAC, ((((1UL))) << ((0) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LAD0_LAD0 = { .signal = "LAD0", .function = "LAD0", .ndescs = (sizeof(sig_descs_LAD0_LAD0) / sizeof((sig_descs_LAD0_LAD0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LAD0_LAD0)), typeof(&(sig_descs_LAD0_LAD0)[0])))); }))), .descs = &(sig_descs_LAD0_LAD0)[0], }; static const struct aspeed_sig_expr *sig_exprs_LAD0_LAD0[] = { (&sig_expr_LAD0_LAD0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_224_LAD0[(sizeof(sig_exprs_LAD0_LAD0) / sizeof((sig_exprs_LAD0_LAD0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LAD0_LAD0)), typeof(&(sig_exprs_LAD0_LAD0)[0])))); })))] __attribute__((alias("sig_exprs_LAD0_LAD0")));
static const struct aspeed_sig_desc sig_descs_GPIOAC0_GPIOAC0[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC0_GPIOAC0 = { .signal = "GPIOAC0", .function = "GPIOAC0", .ndescs = (sizeof(sig_descs_GPIOAC0_GPIOAC0) / sizeof((sig_descs_GPIOAC0_GPIOAC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC0_GPIOAC0)), typeof(&(sig_descs_GPIOAC0_GPIOAC0)[0])))); }))), .descs = &(sig_descs_GPIOAC0_GPIOAC0)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC0_GPIOAC0[] = { (&sig_expr_GPIOAC0_GPIOAC0), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_224_GPIOAC0[(sizeof(sig_exprs_GPIOAC0_GPIOAC0) / sizeof((sig_exprs_GPIOAC0_GPIOAC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC0_GPIOAC0)), typeof(&(sig_exprs_GPIOAC0_GPIOAC0)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC0_GPIOAC0"))); static const struct aspeed_sig_expr **pin_exprs_224[] = { sig_exprs_224_ESPID0, sig_exprs_224_LAD0, sig_exprs_224_GPIOAC0, ((void *)0) }; static const struct aspeed_pin_desc pin_224 = { "224", (&pin_exprs_224[0]) };
static const int group_pins_LAD0[] = { 224 }; static const char *func_groups_LAD0[] = { "LAD0" };


static const struct aspeed_sig_desc sig_descs_ESPID1_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPID1_ESPI = { .signal = "ESPID1", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPID1_ESPI) / sizeof((sig_descs_ESPID1_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPID1_ESPI)), typeof(&(sig_descs_ESPID1_ESPI)[0])))); }))), .descs = &(sig_descs_ESPID1_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPID1_ESPI[] = { (&sig_expr_ESPID1_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_225_ESPID1[(sizeof(sig_exprs_ESPID1_ESPI) / sizeof((sig_exprs_ESPID1_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPID1_ESPI)), typeof(&(sig_exprs_ESPID1_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPID1_ESPI")));
static const struct aspeed_sig_desc sig_descs_LAD1_LAD1[] = { { 0, 0xAC, ((((1UL))) << ((1) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LAD1_LAD1 = { .signal = "LAD1", .function = "LAD1", .ndescs = (sizeof(sig_descs_LAD1_LAD1) / sizeof((sig_descs_LAD1_LAD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LAD1_LAD1)), typeof(&(sig_descs_LAD1_LAD1)[0])))); }))), .descs = &(sig_descs_LAD1_LAD1)[0], }; static const struct aspeed_sig_expr *sig_exprs_LAD1_LAD1[] = { (&sig_expr_LAD1_LAD1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_225_LAD1[(sizeof(sig_exprs_LAD1_LAD1) / sizeof((sig_exprs_LAD1_LAD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LAD1_LAD1)), typeof(&(sig_exprs_LAD1_LAD1)[0])))); })))] __attribute__((alias("sig_exprs_LAD1_LAD1")));
static const struct aspeed_sig_desc sig_descs_GPIOAC1_GPIOAC1[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC1_GPIOAC1 = { .signal = "GPIOAC1", .function = "GPIOAC1", .ndescs = (sizeof(sig_descs_GPIOAC1_GPIOAC1) / sizeof((sig_descs_GPIOAC1_GPIOAC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC1_GPIOAC1)), typeof(&(sig_descs_GPIOAC1_GPIOAC1)[0])))); }))), .descs = &(sig_descs_GPIOAC1_GPIOAC1)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC1_GPIOAC1[] = { (&sig_expr_GPIOAC1_GPIOAC1), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_225_GPIOAC1[(sizeof(sig_exprs_GPIOAC1_GPIOAC1) / sizeof((sig_exprs_GPIOAC1_GPIOAC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC1_GPIOAC1)), typeof(&(sig_exprs_GPIOAC1_GPIOAC1)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC1_GPIOAC1"))); static const struct aspeed_sig_expr **pin_exprs_225[] = { sig_exprs_225_ESPID1, sig_exprs_225_LAD1, sig_exprs_225_GPIOAC1, ((void *)0) }; static const struct aspeed_pin_desc pin_225 = { "225", (&pin_exprs_225[0]) };
static const int group_pins_LAD1[] = { 225 }; static const char *func_groups_LAD1[] = { "LAD1" };


static const struct aspeed_sig_desc sig_descs_ESPID2_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPID2_ESPI = { .signal = "ESPID2", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPID2_ESPI) / sizeof((sig_descs_ESPID2_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPID2_ESPI)), typeof(&(sig_descs_ESPID2_ESPI)[0])))); }))), .descs = &(sig_descs_ESPID2_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPID2_ESPI[] = { (&sig_expr_ESPID2_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_226_ESPID2[(sizeof(sig_exprs_ESPID2_ESPI) / sizeof((sig_exprs_ESPID2_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPID2_ESPI)), typeof(&(sig_exprs_ESPID2_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPID2_ESPI")));
static const struct aspeed_sig_desc sig_descs_LAD2_LAD2[] = { { 0, 0xAC, ((((1UL))) << ((2) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LAD2_LAD2 = { .signal = "LAD2", .function = "LAD2", .ndescs = (sizeof(sig_descs_LAD2_LAD2) / sizeof((sig_descs_LAD2_LAD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LAD2_LAD2)), typeof(&(sig_descs_LAD2_LAD2)[0])))); }))), .descs = &(sig_descs_LAD2_LAD2)[0], }; static const struct aspeed_sig_expr *sig_exprs_LAD2_LAD2[] = { (&sig_expr_LAD2_LAD2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_226_LAD2[(sizeof(sig_exprs_LAD2_LAD2) / sizeof((sig_exprs_LAD2_LAD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LAD2_LAD2)), typeof(&(sig_exprs_LAD2_LAD2)[0])))); })))] __attribute__((alias("sig_exprs_LAD2_LAD2")));
static const struct aspeed_sig_desc sig_descs_GPIOAC2_GPIOAC2[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC2_GPIOAC2 = { .signal = "GPIOAC2", .function = "GPIOAC2", .ndescs = (sizeof(sig_descs_GPIOAC2_GPIOAC2) / sizeof((sig_descs_GPIOAC2_GPIOAC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC2_GPIOAC2)), typeof(&(sig_descs_GPIOAC2_GPIOAC2)[0])))); }))), .descs = &(sig_descs_GPIOAC2_GPIOAC2)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC2_GPIOAC2[] = { (&sig_expr_GPIOAC2_GPIOAC2), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_226_GPIOAC2[(sizeof(sig_exprs_GPIOAC2_GPIOAC2) / sizeof((sig_exprs_GPIOAC2_GPIOAC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC2_GPIOAC2)), typeof(&(sig_exprs_GPIOAC2_GPIOAC2)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC2_GPIOAC2"))); static const struct aspeed_sig_expr **pin_exprs_226[] = { sig_exprs_226_ESPID2, sig_exprs_226_LAD2, sig_exprs_226_GPIOAC2, ((void *)0) }; static const struct aspeed_pin_desc pin_226 = { "226", (&pin_exprs_226[0]) };
static const int group_pins_LAD2[] = { 226 }; static const char *func_groups_LAD2[] = { "LAD2" };


static const struct aspeed_sig_desc sig_descs_ESPID3_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPID3_ESPI = { .signal = "ESPID3", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPID3_ESPI) / sizeof((sig_descs_ESPID3_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPID3_ESPI)), typeof(&(sig_descs_ESPID3_ESPI)[0])))); }))), .descs = &(sig_descs_ESPID3_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPID3_ESPI[] = { (&sig_expr_ESPID3_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_227_ESPID3[(sizeof(sig_exprs_ESPID3_ESPI) / sizeof((sig_exprs_ESPID3_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPID3_ESPI)), typeof(&(sig_exprs_ESPID3_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPID3_ESPI")));
static const struct aspeed_sig_desc sig_descs_LAD3_LAD3[] = { { 0, 0xAC, ((((1UL))) << ((3) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LAD3_LAD3 = { .signal = "LAD3", .function = "LAD3", .ndescs = (sizeof(sig_descs_LAD3_LAD3) / sizeof((sig_descs_LAD3_LAD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LAD3_LAD3)), typeof(&(sig_descs_LAD3_LAD3)[0])))); }))), .descs = &(sig_descs_LAD3_LAD3)[0], }; static const struct aspeed_sig_expr *sig_exprs_LAD3_LAD3[] = { (&sig_expr_LAD3_LAD3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_227_LAD3[(sizeof(sig_exprs_LAD3_LAD3) / sizeof((sig_exprs_LAD3_LAD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LAD3_LAD3)), typeof(&(sig_exprs_LAD3_LAD3)[0])))); })))] __attribute__((alias("sig_exprs_LAD3_LAD3")));
static const struct aspeed_sig_desc sig_descs_GPIOAC3_GPIOAC3[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC3_GPIOAC3 = { .signal = "GPIOAC3", .function = "GPIOAC3", .ndescs = (sizeof(sig_descs_GPIOAC3_GPIOAC3) / sizeof((sig_descs_GPIOAC3_GPIOAC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC3_GPIOAC3)), typeof(&(sig_descs_GPIOAC3_GPIOAC3)[0])))); }))), .descs = &(sig_descs_GPIOAC3_GPIOAC3)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC3_GPIOAC3[] = { (&sig_expr_GPIOAC3_GPIOAC3), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_227_GPIOAC3[(sizeof(sig_exprs_GPIOAC3_GPIOAC3) / sizeof((sig_exprs_GPIOAC3_GPIOAC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC3_GPIOAC3)), typeof(&(sig_exprs_GPIOAC3_GPIOAC3)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC3_GPIOAC3"))); static const struct aspeed_sig_expr **pin_exprs_227[] = { sig_exprs_227_ESPID3, sig_exprs_227_LAD3, sig_exprs_227_GPIOAC3, ((void *)0) }; static const struct aspeed_pin_desc pin_227 = { "227", (&pin_exprs_227[0]) };
static const int group_pins_LAD3[] = { 227 }; static const char *func_groups_LAD3[] = { "LAD3" };


static const struct aspeed_sig_desc sig_descs_ESPICK_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPICK_ESPI = { .signal = "ESPICK", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPICK_ESPI) / sizeof((sig_descs_ESPICK_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPICK_ESPI)), typeof(&(sig_descs_ESPICK_ESPI)[0])))); }))), .descs = &(sig_descs_ESPICK_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPICK_ESPI[] = { (&sig_expr_ESPICK_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_228_ESPICK[(sizeof(sig_exprs_ESPICK_ESPI) / sizeof((sig_exprs_ESPICK_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPICK_ESPI)), typeof(&(sig_exprs_ESPICK_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPICK_ESPI")));
static const struct aspeed_sig_desc sig_descs_LCLK_LCLK[] = { { 0, 0xAC, ((((1UL))) << ((4) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LCLK_LCLK = { .signal = "LCLK", .function = "LCLK", .ndescs = (sizeof(sig_descs_LCLK_LCLK) / sizeof((sig_descs_LCLK_LCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LCLK_LCLK)), typeof(&(sig_descs_LCLK_LCLK)[0])))); }))), .descs = &(sig_descs_LCLK_LCLK)[0], }; static const struct aspeed_sig_expr *sig_exprs_LCLK_LCLK[] = { (&sig_expr_LCLK_LCLK), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_228_LCLK[(sizeof(sig_exprs_LCLK_LCLK) / sizeof((sig_exprs_LCLK_LCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LCLK_LCLK)), typeof(&(sig_exprs_LCLK_LCLK)[0])))); })))] __attribute__((alias("sig_exprs_LCLK_LCLK")));
static const struct aspeed_sig_desc sig_descs_GPIOAC4_GPIOAC4[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC4_GPIOAC4 = { .signal = "GPIOAC4", .function = "GPIOAC4", .ndescs = (sizeof(sig_descs_GPIOAC4_GPIOAC4) / sizeof((sig_descs_GPIOAC4_GPIOAC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC4_GPIOAC4)), typeof(&(sig_descs_GPIOAC4_GPIOAC4)[0])))); }))), .descs = &(sig_descs_GPIOAC4_GPIOAC4)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC4_GPIOAC4[] = { (&sig_expr_GPIOAC4_GPIOAC4), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_228_GPIOAC4[(sizeof(sig_exprs_GPIOAC4_GPIOAC4) / sizeof((sig_exprs_GPIOAC4_GPIOAC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC4_GPIOAC4)), typeof(&(sig_exprs_GPIOAC4_GPIOAC4)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC4_GPIOAC4"))); static const struct aspeed_sig_expr **pin_exprs_228[] = { sig_exprs_228_ESPICK, sig_exprs_228_LCLK, sig_exprs_228_GPIOAC4, ((void *)0) }; static const struct aspeed_pin_desc pin_228 = { "228", (&pin_exprs_228[0]) };
static const int group_pins_LCLK[] = { 228 }; static const char *func_groups_LCLK[] = { "LCLK" };


static const struct aspeed_sig_desc sig_descs_ESPICS_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPICS_ESPI = { .signal = "ESPICS", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPICS_ESPI) / sizeof((sig_descs_ESPICS_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPICS_ESPI)), typeof(&(sig_descs_ESPICS_ESPI)[0])))); }))), .descs = &(sig_descs_ESPICS_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPICS_ESPI[] = { (&sig_expr_ESPICS_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_229_ESPICS[(sizeof(sig_exprs_ESPICS_ESPI) / sizeof((sig_exprs_ESPICS_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPICS_ESPI)), typeof(&(sig_exprs_ESPICS_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPICS_ESPI")));
static const struct aspeed_sig_desc sig_descs_LFRAME_LFRAME[] = { { 0, 0xAC, ((((1UL))) << ((5) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LFRAME_LFRAME = { .signal = "LFRAME", .function = "LFRAME", .ndescs = (sizeof(sig_descs_LFRAME_LFRAME) / sizeof((sig_descs_LFRAME_LFRAME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LFRAME_LFRAME)), typeof(&(sig_descs_LFRAME_LFRAME)[0])))); }))), .descs = &(sig_descs_LFRAME_LFRAME)[0], }; static const struct aspeed_sig_expr *sig_exprs_LFRAME_LFRAME[] = { (&sig_expr_LFRAME_LFRAME), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_229_LFRAME[(sizeof(sig_exprs_LFRAME_LFRAME) / sizeof((sig_exprs_LFRAME_LFRAME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LFRAME_LFRAME)), typeof(&(sig_exprs_LFRAME_LFRAME)[0])))); })))] __attribute__((alias("sig_exprs_LFRAME_LFRAME")));
static const struct aspeed_sig_desc sig_descs_GPIOAC5_GPIOAC5[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC5_GPIOAC5 = { .signal = "GPIOAC5", .function = "GPIOAC5", .ndescs = (sizeof(sig_descs_GPIOAC5_GPIOAC5) / sizeof((sig_descs_GPIOAC5_GPIOAC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC5_GPIOAC5)), typeof(&(sig_descs_GPIOAC5_GPIOAC5)[0])))); }))), .descs = &(sig_descs_GPIOAC5_GPIOAC5)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC5_GPIOAC5[] = { (&sig_expr_GPIOAC5_GPIOAC5), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_229_GPIOAC5[(sizeof(sig_exprs_GPIOAC5_GPIOAC5) / sizeof((sig_exprs_GPIOAC5_GPIOAC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC5_GPIOAC5)), typeof(&(sig_exprs_GPIOAC5_GPIOAC5)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC5_GPIOAC5"))); static const struct aspeed_sig_expr **pin_exprs_229[] = { sig_exprs_229_ESPICS, sig_exprs_229_LFRAME, sig_exprs_229_GPIOAC5, ((void *)0) }; static const struct aspeed_pin_desc pin_229 = { "229", (&pin_exprs_229[0]) };
static const int group_pins_LFRAME[] = { 229 }; static const char *func_groups_LFRAME[] = { "LFRAME" };


static const struct aspeed_sig_desc sig_descs_ESPIALT_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPIALT_ESPI = { .signal = "ESPIALT", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPIALT_ESPI) / sizeof((sig_descs_ESPIALT_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPIALT_ESPI)), typeof(&(sig_descs_ESPIALT_ESPI)[0])))); }))), .descs = &(sig_descs_ESPIALT_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPIALT_ESPI[] = { (&sig_expr_ESPIALT_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_230_ESPIALT[(sizeof(sig_exprs_ESPIALT_ESPI) / sizeof((sig_exprs_ESPIALT_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPIALT_ESPI)), typeof(&(sig_exprs_ESPIALT_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPIALT_ESPI")));
static const struct aspeed_sig_desc sig_descs_LSIRQ_LSIRQ[] = { { 0, 0xAC, ((((1UL))) << ((6) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LSIRQ_LSIRQ = { .signal = "LSIRQ", .function = "LSIRQ", .ndescs = (sizeof(sig_descs_LSIRQ_LSIRQ) / sizeof((sig_descs_LSIRQ_LSIRQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LSIRQ_LSIRQ)), typeof(&(sig_descs_LSIRQ_LSIRQ)[0])))); }))), .descs = &(sig_descs_LSIRQ_LSIRQ)[0], }; static const struct aspeed_sig_expr *sig_exprs_LSIRQ_LSIRQ[] = { (&sig_expr_LSIRQ_LSIRQ), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_230_LSIRQ[(sizeof(sig_exprs_LSIRQ_LSIRQ) / sizeof((sig_exprs_LSIRQ_LSIRQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LSIRQ_LSIRQ)), typeof(&(sig_exprs_LSIRQ_LSIRQ)[0])))); })))] __attribute__((alias("sig_exprs_LSIRQ_LSIRQ")));
static const struct aspeed_sig_desc sig_descs_GPIOAC6_GPIOAC6[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC6_GPIOAC6 = { .signal = "GPIOAC6", .function = "GPIOAC6", .ndescs = (sizeof(sig_descs_GPIOAC6_GPIOAC6) / sizeof((sig_descs_GPIOAC6_GPIOAC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC6_GPIOAC6)), typeof(&(sig_descs_GPIOAC6_GPIOAC6)[0])))); }))), .descs = &(sig_descs_GPIOAC6_GPIOAC6)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC6_GPIOAC6[] = { (&sig_expr_GPIOAC6_GPIOAC6), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_230_GPIOAC6[(sizeof(sig_exprs_GPIOAC6_GPIOAC6) / sizeof((sig_exprs_GPIOAC6_GPIOAC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC6_GPIOAC6)), typeof(&(sig_exprs_GPIOAC6_GPIOAC6)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC6_GPIOAC6"))); static const struct aspeed_sig_expr **pin_exprs_230[] = { sig_exprs_230_ESPIALT, sig_exprs_230_LSIRQ, sig_exprs_230_GPIOAC6, ((void *)0) }; static const struct aspeed_pin_desc pin_230 = { "230", (&pin_exprs_230[0]) };
static const int group_pins_LSIRQ[] = { 230 }; static const char *func_groups_LSIRQ[] = { "LSIRQ" };


static const struct aspeed_sig_desc sig_descs_ESPIRST_ESPI[] = { { 0, 0x70, ((((1UL))) << ((25) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_ESPIRST_ESPI = { .signal = "ESPIRST", .function = "ESPI", .ndescs = (sizeof(sig_descs_ESPIRST_ESPI) / sizeof((sig_descs_ESPIRST_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_ESPIRST_ESPI)), typeof(&(sig_descs_ESPIRST_ESPI)[0])))); }))), .descs = &(sig_descs_ESPIRST_ESPI)[0], }; static const struct aspeed_sig_expr *sig_exprs_ESPIRST_ESPI[] = { (&sig_expr_ESPIRST_ESPI), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_231_ESPIRST[(sizeof(sig_exprs_ESPIRST_ESPI) / sizeof((sig_exprs_ESPIRST_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_ESPIRST_ESPI)), typeof(&(sig_exprs_ESPIRST_ESPI)[0])))); })))] __attribute__((alias("sig_exprs_ESPIRST_ESPI")));
static const struct aspeed_sig_desc sig_descs_LPCRST_LPCRST[] = { { 0, 0xAC, ((((1UL))) << ((7) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_LPCRST_LPCRST = { .signal = "LPCRST", .function = "LPCRST", .ndescs = (sizeof(sig_descs_LPCRST_LPCRST) / sizeof((sig_descs_LPCRST_LPCRST)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_LPCRST_LPCRST)), typeof(&(sig_descs_LPCRST_LPCRST)[0])))); }))), .descs = &(sig_descs_LPCRST_LPCRST)[0], }; static const struct aspeed_sig_expr *sig_exprs_LPCRST_LPCRST[] = { (&sig_expr_LPCRST_LPCRST), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_231_LPCRST[(sizeof(sig_exprs_LPCRST_LPCRST) / sizeof((sig_exprs_LPCRST_LPCRST)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_LPCRST_LPCRST)), typeof(&(sig_exprs_LPCRST_LPCRST)[0])))); })))] __attribute__((alias("sig_exprs_LPCRST_LPCRST")));
static const struct aspeed_sig_desc sig_descs_GPIOAC7_GPIOAC7[] = { }; static const struct aspeed_sig_expr sig_expr_GPIOAC7_GPIOAC7 = { .signal = "GPIOAC7", .function = "GPIOAC7", .ndescs = (sizeof(sig_descs_GPIOAC7_GPIOAC7) / sizeof((sig_descs_GPIOAC7_GPIOAC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_GPIOAC7_GPIOAC7)), typeof(&(sig_descs_GPIOAC7_GPIOAC7)[0])))); }))), .descs = &(sig_descs_GPIOAC7_GPIOAC7)[0], }; static const struct aspeed_sig_expr *sig_exprs_GPIOAC7_GPIOAC7[] = { (&sig_expr_GPIOAC7_GPIOAC7), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_231_GPIOAC7[(sizeof(sig_exprs_GPIOAC7_GPIOAC7) / sizeof((sig_exprs_GPIOAC7_GPIOAC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_GPIOAC7_GPIOAC7)), typeof(&(sig_exprs_GPIOAC7_GPIOAC7)[0])))); })))] __attribute__((alias("sig_exprs_GPIOAC7_GPIOAC7"))); static const struct aspeed_sig_expr **pin_exprs_231[] = { sig_exprs_231_ESPIRST, sig_exprs_231_LPCRST, sig_exprs_231_GPIOAC7, ((void *)0) }; static const struct aspeed_pin_desc pin_231 = { "231", (&pin_exprs_231[0]) };
static const int group_pins_LPCRST[] = { 231 }; static const char *func_groups_LPCRST[] = { "LPCRST" };

static const int group_pins_ESPI[] = { 224, 225, 226, 227, 228, 229, 230, 231 }; static const char *func_groups_ESPI[] = { "ESPI" };


static const struct aspeed_sig_desc sig_descs_USB2AHDP_USB2AH[] = { { 0, 0x90, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_USB2AHDP_USB2AH = { .signal = "USB2AHDP", .function = "USB2AH", .ndescs = (sizeof(sig_descs_USB2AHDP_USB2AH) / sizeof((sig_descs_USB2AHDP_USB2AH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2AHDP_USB2AH)), typeof(&(sig_descs_USB2AHDP_USB2AH)[0])))); }))), .descs = &(sig_descs_USB2AHDP_USB2AH)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB2AHDP_USB2AH[] = { (&sig_expr_USB2AHDP_USB2AH), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_232_USB2AHDP[(sizeof(sig_exprs_USB2AHDP_USB2AH) / sizeof((sig_exprs_USB2AHDP_USB2AH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2AHDP_USB2AH)), typeof(&(sig_exprs_USB2AHDP_USB2AH)[0])))); })))] __attribute__((alias("sig_exprs_USB2AHDP_USB2AH")));
static const struct aspeed_sig_desc sig_descs_USB2ADDP_USB2AD[] = { { 0, 0x90, ((((1UL))) << ((29) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_USB2ADDP_USB2AD = { .signal = "USB2ADDP", .function = "USB2AD", .ndescs = (sizeof(sig_descs_USB2ADDP_USB2AD) / sizeof((sig_descs_USB2ADDP_USB2AD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2ADDP_USB2AD)), typeof(&(sig_descs_USB2ADDP_USB2AD)[0])))); }))), .descs = &(sig_descs_USB2ADDP_USB2AD)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB2ADDP_USB2AD[] = { (&sig_expr_USB2ADDP_USB2AD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_232_USB2ADDP[(sizeof(sig_exprs_USB2ADDP_USB2AD) / sizeof((sig_exprs_USB2ADDP_USB2AD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2ADDP_USB2AD)), typeof(&(sig_exprs_USB2ADDP_USB2AD)[0])))); })))] __attribute__((alias("sig_exprs_USB2ADDP_USB2AD")));
static const struct aspeed_sig_expr **pin_exprs_232[] = { sig_exprs_232_USB2AHDP, sig_exprs_232_USB2ADDP, ((void *)0) }; static const struct aspeed_pin_desc pin_232 = { "A7", (&pin_exprs_232[0]) };


static const struct aspeed_sig_desc sig_descs_USB2AHDN_USB2AH[] = { { 0, 0x90, ((((1UL))) << ((29) % 32)), 1, (((1) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_USB2AHDN_USB2AH = { .signal = "USB2AHDN", .function = "USB2AH", .ndescs = (sizeof(sig_descs_USB2AHDN_USB2AH) / sizeof((sig_descs_USB2AHDN_USB2AH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2AHDN_USB2AH)), typeof(&(sig_descs_USB2AHDN_USB2AH)[0])))); }))), .descs = &(sig_descs_USB2AHDN_USB2AH)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB2AHDN_USB2AH[] = { (&sig_expr_USB2AHDN_USB2AH), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_233_USB2AHDN[(sizeof(sig_exprs_USB2AHDN_USB2AH) / sizeof((sig_exprs_USB2AHDN_USB2AH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2AHDN_USB2AH)), typeof(&(sig_exprs_USB2AHDN_USB2AH)[0])))); })))] __attribute__((alias("sig_exprs_USB2AHDN_USB2AH")));
static const struct aspeed_sig_desc sig_descs_USB2ADDN_USB2AD[] = { { 0, 0x90, ((((1UL))) << ((29) % 32)), 0, (((0) + 1) & 1) } }; static const struct aspeed_sig_expr sig_expr_USB2ADDN_USB2AD = { .signal = "USB2ADDN", .function = "USB2AD", .ndescs = (sizeof(sig_descs_USB2ADDN_USB2AD) / sizeof((sig_descs_USB2ADDN_USB2AD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2ADDN_USB2AD)), typeof(&(sig_descs_USB2ADDN_USB2AD)[0])))); }))), .descs = &(sig_descs_USB2ADDN_USB2AD)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB2ADDN_USB2AD[] = { (&sig_expr_USB2ADDN_USB2AD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_233_USB2ADDN[(sizeof(sig_exprs_USB2ADDN_USB2AD) / sizeof((sig_exprs_USB2ADDN_USB2AD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2ADDN_USB2AD)), typeof(&(sig_exprs_USB2ADDN_USB2AD)[0])))); })))] __attribute__((alias("sig_exprs_USB2ADDN_USB2AD")));
static const struct aspeed_sig_expr **pin_exprs_233[] = { sig_exprs_233_USB2AHDN, sig_exprs_233_USB2ADDN, ((void *)0) }; static const struct aspeed_pin_desc pin_233 = { "A8", (&pin_exprs_233[0]) };

static const int group_pins_USB2AH[] = { 232, 233 }; static const char *func_groups_USB2AH[] = { "USB2AH" };
static const int group_pins_USB2AD[] = { 232, 233 }; static const char *func_groups_USB2AD[] = { "USB2AD" };







static const struct aspeed_sig_desc sig_descs_USB11BDP_USB11BHID[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_USB11BDP_USB11BHID = { .signal = "USB11BDP", .function = "USB11BHID", .ndescs = (sizeof(sig_descs_USB11BDP_USB11BHID) / sizeof((sig_descs_USB11BDP_USB11BHID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB11BDP_USB11BHID)), typeof(&(sig_descs_USB11BDP_USB11BHID)[0])))); }))), .descs = &(sig_descs_USB11BDP_USB11BHID)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB11BDP_USB11BHID[] = { (&sig_expr_USB11BDP_USB11BHID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_234_USB11BDP[(sizeof(sig_exprs_USB11BDP_USB11BHID) / sizeof((sig_exprs_USB11BDP_USB11BHID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB11BDP_USB11BHID)), typeof(&(sig_exprs_USB11BDP_USB11BHID)[0])))); })))] __attribute__((alias("sig_exprs_USB11BDP_USB11BHID")));
static const struct aspeed_sig_desc sig_descs_USB2BDDP_USB2BD[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 1, 0 } }; static const struct aspeed_sig_expr sig_expr_USB2BDDP_USB2BD = { .signal = "USB2BDDP", .function = "USB2BD", .ndescs = (sizeof(sig_descs_USB2BDDP_USB2BD) / sizeof((sig_descs_USB2BDDP_USB2BD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2BDDP_USB2BD)), typeof(&(sig_descs_USB2BDDP_USB2BD)[0])))); }))), .descs = &(sig_descs_USB2BDDP_USB2BD)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB2BDDP_USB2BD[] = { (&sig_expr_USB2BDDP_USB2BD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_234_USB2BDDP[(sizeof(sig_exprs_USB2BDDP_USB2BD) / sizeof((sig_exprs_USB2BDDP_USB2BD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2BDDP_USB2BD)), typeof(&(sig_exprs_USB2BDDP_USB2BD)[0])))); })))] __attribute__((alias("sig_exprs_USB2BDDP_USB2BD")));
static const struct aspeed_sig_desc sig_descs_USB2BHDP1_USB2BH[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_USB2BHDP1_USB2BH = { .signal = "USB2BHDP1", .function = "USB2BH", .ndescs = (sizeof(sig_descs_USB2BHDP1_USB2BH) / sizeof((sig_descs_USB2BHDP1_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2BHDP1_USB2BH)), typeof(&(sig_descs_USB2BHDP1_USB2BH)[0])))); }))), .descs = &(sig_descs_USB2BHDP1_USB2BH)[0], };
static const struct aspeed_sig_desc sig_descs_USB2BHDP2_USB2BH[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_USB2BHDP2_USB2BH = { .signal = "USB2BHDP2", .function = "USB2BH", .ndescs = (sizeof(sig_descs_USB2BHDP2_USB2BH) / sizeof((sig_descs_USB2BHDP2_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2BHDP2_USB2BH)), typeof(&(sig_descs_USB2BHDP2_USB2BH)[0])))); }))), .descs = &(sig_descs_USB2BHDP2_USB2BH)[0], };
static const struct aspeed_sig_expr *sig_exprs_USB2BHDP_USB2BH[] = { (&sig_expr_USB2BHDP1_USB2BH), (&sig_expr_USB2BHDP2_USB2BH), ((void *)0) };


static const struct aspeed_sig_expr * sig_exprs_234_USB2BHDP[(sizeof(sig_exprs_USB2BHDP_USB2BH) / sizeof((sig_exprs_USB2BHDP_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2BHDP_USB2BH)), typeof(&(sig_exprs_USB2BHDP_USB2BH)[0])))); })))] __attribute__((alias("sig_exprs_USB2BHDP_USB2BH")));
static const struct aspeed_sig_expr **pin_exprs_234[] = { sig_exprs_234_USB11BDP, sig_exprs_234_USB2BDDP, sig_exprs_234_USB2BHDP, ((void *)0) }; static const struct aspeed_pin_desc pin_234 = { "B6", (&pin_exprs_234[0]) };



static const struct aspeed_sig_desc sig_descs_USB11BDN_USB11BHID[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 0, 0 } }; static const struct aspeed_sig_expr sig_expr_USB11BDN_USB11BHID = { .signal = "USB11BDN", .function = "USB11BHID", .ndescs = (sizeof(sig_descs_USB11BDN_USB11BHID) / sizeof((sig_descs_USB11BDN_USB11BHID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB11BDN_USB11BHID)), typeof(&(sig_descs_USB11BDN_USB11BHID)[0])))); }))), .descs = &(sig_descs_USB11BDN_USB11BHID)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB11BDN_USB11BHID[] = { (&sig_expr_USB11BDN_USB11BHID), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_235_USB11BDN[(sizeof(sig_exprs_USB11BDN_USB11BHID) / sizeof((sig_exprs_USB11BDN_USB11BHID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB11BDN_USB11BHID)), typeof(&(sig_exprs_USB11BDN_USB11BHID)[0])))); })))] __attribute__((alias("sig_exprs_USB11BDN_USB11BHID")));
static const struct aspeed_sig_desc sig_descs_USB2BDN_USB2BD[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 1, 0 } }; static const struct aspeed_sig_expr sig_expr_USB2BDN_USB2BD = { .signal = "USB2BDN", .function = "USB2BD", .ndescs = (sizeof(sig_descs_USB2BDN_USB2BD) / sizeof((sig_descs_USB2BDN_USB2BD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2BDN_USB2BD)), typeof(&(sig_descs_USB2BDN_USB2BD)[0])))); }))), .descs = &(sig_descs_USB2BDN_USB2BD)[0], }; static const struct aspeed_sig_expr *sig_exprs_USB2BDN_USB2BD[] = { (&sig_expr_USB2BDN_USB2BD), ((void *)0) }; static const struct aspeed_sig_expr * sig_exprs_235_USB2BDN[(sizeof(sig_exprs_USB2BDN_USB2BD) / sizeof((sig_exprs_USB2BDN_USB2BD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2BDN_USB2BD)), typeof(&(sig_exprs_USB2BDN_USB2BD)[0])))); })))] __attribute__((alias("sig_exprs_USB2BDN_USB2BD")));
static const struct aspeed_sig_desc sig_descs_USB2BHDN1_USB2BH[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 2, 0 } }; static const struct aspeed_sig_expr sig_expr_USB2BHDN1_USB2BH = { .signal = "USB2BHDN1", .function = "USB2BH", .ndescs = (sizeof(sig_descs_USB2BHDN1_USB2BH) / sizeof((sig_descs_USB2BHDN1_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2BHDN1_USB2BH)), typeof(&(sig_descs_USB2BHDN1_USB2BH)[0])))); }))), .descs = &(sig_descs_USB2BHDN1_USB2BH)[0], };
static const struct aspeed_sig_desc sig_descs_USB2BHDN2_USB2BH[] = { { 0, 0x94, (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (32 - 1 - (14)))), 3, 0 } }; static const struct aspeed_sig_expr sig_expr_USB2BHDN2_USB2BH = { .signal = "USB2BHDN2", .function = "USB2BH", .ndescs = (sizeof(sig_descs_USB2BHDN2_USB2BH) / sizeof((sig_descs_USB2BHDN2_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_descs_USB2BHDN2_USB2BH)), typeof(&(sig_descs_USB2BHDN2_USB2BH)[0])))); }))), .descs = &(sig_descs_USB2BHDN2_USB2BH)[0], };
static const struct aspeed_sig_expr *sig_exprs_USB2BHDN_USB2BH[] = { (&sig_expr_USB2BHDN1_USB2BH), (&sig_expr_USB2BHDN2_USB2BH), ((void *)0) };


static const struct aspeed_sig_expr * sig_exprs_235_USB2BHDN[(sizeof(sig_exprs_USB2BHDN_USB2BH) / sizeof((sig_exprs_USB2BHDN_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sig_exprs_USB2BHDN_USB2BH)), typeof(&(sig_exprs_USB2BHDN_USB2BH)[0])))); })))] __attribute__((alias("sig_exprs_USB2BHDN_USB2BH")));
static const struct aspeed_sig_expr **pin_exprs_235[] = { sig_exprs_235_USB11BDN, sig_exprs_235_USB2BDN, sig_exprs_235_USB2BHDN, ((void *)0) }; static const struct aspeed_pin_desc pin_235 = { "A6", (&pin_exprs_235[0]) };


static const int group_pins_USB11BHID[] = { 234, 235 }; static const char *func_groups_USB11BHID[] = { "USB11BHID" };
static const int group_pins_USB2BD[] = { 234, 235 }; static const char *func_groups_USB2BD[] = { "USB2BD" };
static const int group_pins_USB2BH[] = { 234, 235 }; static const char *func_groups_USB2BH[] = { "USB2BH" };



static struct pinctrl_pin_desc aspeed_g5_pins[236] = {
 [129] = { .number = 129, .name = "A10", .drv_data = (void *) &(pin_129) },
 [128] = { .number = 128, .name = "A11", .drv_data = (void *) &(pin_128) },
 [17] = { .number = 17, .name = "A12", .drv_data = (void *) &(pin_17) },
 [5] = { .number = 5, .name = "A13", .drv_data = (void *) &(pin_5) },
 [70] = { .number = 70, .name = "A14", .drv_data = (void *) &(pin_70) },
 [71] = { .number = 71, .name = "A15", .drv_data = (void *) &(pin_71) },
 [62] = { .number = 62, .name = "A16", .drv_data = (void *) &(pin_62) },
 [60] = { .number = 60, .name = "A17", .drv_data = (void *) &(pin_60) },
 [56] = { .number = 56, .name = "A18", .drv_data = (void *) &(pin_56) },
 [48] = { .number = 48, .name = "A19", .drv_data = (void *) &(pin_48) },
 [160] = { .number = 160, .name = "A2", .drv_data = (void *) &(pin_160) },
 [38] = { .number = 38, .name = "A20", .drv_data = (void *) &(pin_38) },
 [44] = { .number = 44, .name = "A21", .drv_data = (void *) &(pin_44) },
 [166] = { .number = 166, .name = "A3", .drv_data = (void *) &(pin_166) },
 [165] = { .number = 165, .name = "A4", .drv_data = (void *) &(pin_165) },
 [155] = { .number = 155, .name = "A5", .drv_data = (void *) &(pin_155) },
 [235] = { .number = 235, .name = "A6", .drv_data = (void *) &(pin_235) },
 [232] = { .number = 232, .name = "A7", .drv_data = (void *) &(pin_232) },
 [233] = { .number = 233, .name = "A8", .drv_data = (void *) &(pin_233) },
 [130] = { .number = 130, .name = "A9", .drv_data = (void *) &(pin_130) },
 [98] = { .number = 98, .name = "AA1", .drv_data = (void *) &(pin_98) },
 [136] = { .number = 136, .name = "AA19", .drv_data = (void *) &(pin_136) },
 [100] = { .number = 100, .name = "AA2", .drv_data = (void *) &(pin_100) },
 [151] = { .number = 151, .name = "AA20", .drv_data = (void *) &(pin_151) },
 [203] = { .number = 203, .name = "AA21", .drv_data = (void *) &(pin_203) },
 [211] = { .number = 211, .name = "AA22", .drv_data = (void *) &(pin_211) },
 [109] = { .number = 109, .name = "AA3", .drv_data = (void *) &(pin_109) },
 [118] = { .number = 118, .name = "AA4", .drv_data = (void *) &(pin_118) },
 [122] = { .number = 122, .name = "AA5", .drv_data = (void *) &(pin_122) },
 [97] = { .number = 97, .name = "AB2", .drv_data = (void *) &(pin_97) },
 [201] = { .number = 201, .name = "AB20", .drv_data = (void *) &(pin_201) },
 [202] = { .number = 202, .name = "AB21", .drv_data = (void *) &(pin_202) },
 [116] = { .number = 116, .name = "AB3", .drv_data = (void *) &(pin_116) },
 [115] = { .number = 115, .name = "AB4", .drv_data = (void *) &(pin_115) },
 [123] = { .number = 123, .name = "AB5", .drv_data = (void *) &(pin_123) },
 [159] = { .number = 159, .name = "B1", .drv_data = (void *) &(pin_159) },
 [134] = { .number = 134, .name = "B10", .drv_data = (void *) &(pin_134) },
 [23] = { .number = 23, .name = "B11", .drv_data = (void *) &(pin_23) },
 [18] = { .number = 18, .name = "B12", .drv_data = (void *) &(pin_18) },
 [7] = { .number = 7, .name = "B13", .drv_data = (void *) &(pin_7) },
 [0] = { .number = 0, .name = "B14", .drv_data = (void *) &(pin_0) },
 [68] = { .number = 68, .name = "B15", .drv_data = (void *) &(pin_68) },
 [66] = { .number = 66, .name = "B16", .drv_data = (void *) &(pin_66) },
 [61] = { .number = 61, .name = "B17", .drv_data = (void *) &(pin_61) },
 [57] = { .number = 57, .name = "B18", .drv_data = (void *) &(pin_57) },
 [39] = { .number = 39, .name = "B19", .drv_data = (void *) &(pin_39) },
 [158] = { .number = 158, .name = "B2", .drv_data = (void *) &(pin_158) },
 [32] = { .number = 32, .name = "B20", .drv_data = (void *) &(pin_32) },
 [43] = { .number = 43, .name = "B21", .drv_data = (void *) &(pin_43) },
 [42] = { .number = 42, .name = "B22", .drv_data = (void *) &(pin_42) },
 [161] = { .number = 161, .name = "B3", .drv_data = (void *) &(pin_161) },
 [164] = { .number = 164, .name = "B4", .drv_data = (void *) &(pin_164) },
 [152] = { .number = 152, .name = "B5", .drv_data = (void *) &(pin_152) },
 [234] = { .number = 234, .name = "B6", .drv_data = (void *) &(pin_234) },
 [131] = { .number = 131, .name = "B9", .drv_data = (void *) &(pin_131) },
 [171] = { .number = 171, .name = "C1", .drv_data = (void *) &(pin_171) },
 [22] = { .number = 22, .name = "C11", .drv_data = (void *) &(pin_22) },
 [16] = { .number = 16, .name = "C12", .drv_data = (void *) &(pin_16) },
 [6] = { .number = 6, .name = "C13", .drv_data = (void *) &(pin_6) },
 [4] = { .number = 4, .name = "C14", .drv_data = (void *) &(pin_4) },
 [69] = { .number = 69, .name = "C15", .drv_data = (void *) &(pin_69) },
 [67] = { .number = 67, .name = "C16", .drv_data = (void *) &(pin_67) },
 [59] = { .number = 59, .name = "C17", .drv_data = (void *) &(pin_59) },
 [64] = { .number = 64, .name = "C18", .drv_data = (void *) &(pin_64) },
 [50] = { .number = 50, .name = "C19", .drv_data = (void *) &(pin_50) },
 [170] = { .number = 170, .name = "C2", .drv_data = (void *) &(pin_170) },
 [33] = { .number = 33, .name = "C20", .drv_data = (void *) &(pin_33) },
 [31] = { .number = 31, .name = "C21", .drv_data = (void *) &(pin_31) },
 [228] = { .number = 228, .name = "C22", .drv_data = (void *) &(pin_228) },
 [172] = { .number = 172, .name = "C3", .drv_data = (void *) &(pin_172) },
 [169] = { .number = 169, .name = "C4", .drv_data = (void *) &(pin_169) },
 [168] = { .number = 168, .name = "C5", .drv_data = (void *) &(pin_168) },
 [173] = { .number = 173, .name = "D1", .drv_data = (void *) &(pin_173) },
 [20] = { .number = 20, .name = "D10", .drv_data = (void *) &(pin_20) },
 [2] = { .number = 2, .name = "D13", .drv_data = (void *) &(pin_2) },
 [1] = { .number = 1, .name = "D14", .drv_data = (void *) &(pin_1) },
 [54] = { .number = 54, .name = "D15", .drv_data = (void *) &(pin_54) },
 [53] = { .number = 53, .name = "D16", .drv_data = (void *) &(pin_53) },
 [58] = { .number = 58, .name = "D17", .drv_data = (void *) &(pin_58) },
 [63] = { .number = 63, .name = "D18", .drv_data = (void *) &(pin_63) },
 [37] = { .number = 37, .name = "D19", .drv_data = (void *) &(pin_37) },
 [174] = { .number = 174, .name = "D2", .drv_data = (void *) &(pin_174) },
 [27] = { .number = 27, .name = "D20", .drv_data = (void *) &(pin_27) },
 [28] = { .number = 28, .name = "D21", .drv_data = (void *) &(pin_28) },
 [226] = { .number = 226, .name = "D22", .drv_data = (void *) &(pin_226) },
 [163] = { .number = 163, .name = "D4", .drv_data = (void *) &(pin_163) },
 [162] = { .number = 162, .name = "D5", .drv_data = (void *) &(pin_162) },
 [167] = { .number = 167, .name = "D6", .drv_data = (void *) &(pin_167) },
 [157] = { .number = 157, .name = "D7", .drv_data = (void *) &(pin_157) },
 [142] = { .number = 142, .name = "D8", .drv_data = (void *) &(pin_142) },
 [19] = { .number = 19, .name = "D9", .drv_data = (void *) &(pin_19) },
 [179] = { .number = 179, .name = "E1", .drv_data = (void *) &(pin_179) },
 [143] = { .number = 143, .name = "E10", .drv_data = (void *) &(pin_143) },
 [21] = { .number = 21, .name = "E12", .drv_data = (void *) &(pin_21) },
 [3] = { .number = 3, .name = "E13", .drv_data = (void *) &(pin_3) },
 [55] = { .number = 55, .name = "E14", .drv_data = (void *) &(pin_55) },
 [65] = { .number = 65, .name = "E15", .drv_data = (void *) &(pin_65) },
 [51] = { .number = 51, .name = "E16", .drv_data = (void *) &(pin_51) },
 [52] = { .number = 52, .name = "E17", .drv_data = (void *) &(pin_52) },
 [36] = { .number = 36, .name = "E18", .drv_data = (void *) &(pin_36) },
 [49] = { .number = 49, .name = "E19", .drv_data = (void *) &(pin_49) },
 [178] = { .number = 178, .name = "E2", .drv_data = (void *) &(pin_178) },
 [29] = { .number = 29, .name = "E20", .drv_data = (void *) &(pin_29) },
 [25] = { .number = 25, .name = "E21", .drv_data = (void *) &(pin_25) },
 [227] = { .number = 227, .name = "E22", .drv_data = (void *) &(pin_227) },
 [181] = { .number = 181, .name = "E3", .drv_data = (void *) &(pin_181) },
 [175] = { .number = 175, .name = "E6", .drv_data = (void *) &(pin_175) },
 [156] = { .number = 156, .name = "E7", .drv_data = (void *) &(pin_156) },
 [153] = { .number = 153, .name = "E9", .drv_data = (void *) &(pin_153) },
 [187] = { .number = 187, .name = "F1", .drv_data = (void *) &(pin_187) },
 [35] = { .number = 35, .name = "F17", .drv_data = (void *) &(pin_35) },
 [34] = { .number = 34, .name = "F18", .drv_data = (void *) &(pin_34) },
 [24] = { .number = 24, .name = "F19", .drv_data = (void *) &(pin_24) },
 [184] = { .number = 184, .name = "F2", .drv_data = (void *) &(pin_184) },
 [26] = { .number = 26, .name = "F20", .drv_data = (void *) &(pin_26) },
 [229] = { .number = 229, .name = "F21", .drv_data = (void *) &(pin_229) },
 [230] = { .number = 230, .name = "F22", .drv_data = (void *) &(pin_230) },
 [180] = { .number = 180, .name = "F3", .drv_data = (void *) &(pin_180) },
 [176] = { .number = 176, .name = "F4", .drv_data = (void *) &(pin_176) },
 [177] = { .number = 177, .name = "F5", .drv_data = (void *) &(pin_177) },
 [154] = { .number = 154, .name = "F9", .drv_data = (void *) &(pin_154) },
 [189] = { .number = 189, .name = "G1", .drv_data = (void *) &(pin_189) },
 [46] = { .number = 46, .name = "G17", .drv_data = (void *) &(pin_46) },
 [30] = { .number = 30, .name = "G18", .drv_data = (void *) &(pin_30) },
 [186] = { .number = 186, .name = "G2", .drv_data = (void *) &(pin_186) },
 [225] = { .number = 225, .name = "G20", .drv_data = (void *) &(pin_225) },
 [224] = { .number = 224, .name = "G21", .drv_data = (void *) &(pin_224) },
 [231] = { .number = 231, .name = "G22", .drv_data = (void *) &(pin_231) },
 [185] = { .number = 185, .name = "G3", .drv_data = (void *) &(pin_185) },
 [183] = { .number = 183, .name = "G4", .drv_data = (void *) &(pin_183) },
 [182] = { .number = 182, .name = "G5", .drv_data = (void *) &(pin_182) },
 [47] = { .number = 47, .name = "H18", .drv_data = (void *) &(pin_47) },
 [45] = { .number = 45, .name = "H19", .drv_data = (void *) &(pin_45) },
 [15] = { .number = 15, .name = "H20", .drv_data = (void *) &(pin_15) },
 [13] = { .number = 13, .name = "H21", .drv_data = (void *) &(pin_13) },
 [14] = { .number = 14, .name = "H22", .drv_data = (void *) &(pin_14) },
 [190] = { .number = 190, .name = "H3", .drv_data = (void *) &(pin_190) },
 [191] = { .number = 191, .name = "H4", .drv_data = (void *) &(pin_191) },
 [188] = { .number = 188, .name = "H5", .drv_data = (void *) &(pin_188) },
 [41] = { .number = 41, .name = "J18", .drv_data = (void *) &(pin_41) },
 [40] = { .number = 40, .name = "J19", .drv_data = (void *) &(pin_40) },
 [12] = { .number = 12, .name = "J20", .drv_data = (void *) &(pin_12) },
 [11] = { .number = 11, .name = "K18", .drv_data = (void *) &(pin_11) },
 [8] = { .number = 8, .name = "K19", .drv_data = (void *) &(pin_8) },
 [82] = { .number = 82, .name = "L1", .drv_data = (void *) &(pin_82) },
 [10] = { .number = 10, .name = "L18", .drv_data = (void *) &(pin_10) },
 [9] = { .number = 9, .name = "L19", .drv_data = (void *) &(pin_9) },
 [73] = { .number = 73, .name = "L2", .drv_data = (void *) &(pin_73) },
 [80] = { .number = 80, .name = "L3", .drv_data = (void *) &(pin_80) },
 [81] = { .number = 81, .name = "L4", .drv_data = (void *) &(pin_81) },
 [196] = { .number = 196, .name = "M18", .drv_data = (void *) &(pin_196) },
 [197] = { .number = 197, .name = "M19", .drv_data = (void *) &(pin_197) },
 [198] = { .number = 198, .name = "M20", .drv_data = (void *) &(pin_198) },
 [84] = { .number = 84, .name = "N1", .drv_data = (void *) &(pin_84) },
 [214] = { .number = 214, .name = "N18", .drv_data = (void *) &(pin_214) },
 [216] = { .number = 216, .name = "N19", .drv_data = (void *) &(pin_216) },
 [83] = { .number = 83, .name = "N2", .drv_data = (void *) &(pin_83) },
 [135] = { .number = 135, .name = "N20", .drv_data = (void *) &(pin_135) },
 [132] = { .number = 132, .name = "N21", .drv_data = (void *) &(pin_132) },
 [133] = { .number = 133, .name = "N22", .drv_data = (void *) &(pin_133) },
 [74] = { .number = 74, .name = "N3", .drv_data = (void *) &(pin_74) },
 [75] = { .number = 75, .name = "N4", .drv_data = (void *) &(pin_75) },
 [76] = { .number = 76, .name = "N5", .drv_data = (void *) &(pin_76) },
 [85] = { .number = 85, .name = "P1", .drv_data = (void *) &(pin_85) },
 [147] = { .number = 147, .name = "P18", .drv_data = (void *) &(pin_147) },
 [215] = { .number = 215, .name = "P19", .drv_data = (void *) &(pin_215) },
 [86] = { .number = 86, .name = "P2", .drv_data = (void *) &(pin_86) },
 [199] = { .number = 199, .name = "P20", .drv_data = (void *) &(pin_199) },
 [195] = { .number = 195, .name = "P21", .drv_data = (void *) &(pin_195) },
 [194] = { .number = 194, .name = "P22", .drv_data = (void *) &(pin_194) },
 [93] = { .number = 93, .name = "P3", .drv_data = (void *) &(pin_93) },
 [92] = { .number = 92, .name = "P4", .drv_data = (void *) &(pin_92) },
 [101] = { .number = 101, .name = "P5", .drv_data = (void *) &(pin_101) },
 [87] = { .number = 87, .name = "R1", .drv_data = (void *) &(pin_87) },
 [146] = { .number = 146, .name = "R18", .drv_data = (void *) &(pin_146) },
 [148] = { .number = 148, .name = "R19", .drv_data = (void *) &(pin_148) },
 [72] = { .number = 72, .name = "R2", .drv_data = (void *) &(pin_72) },
 [219] = { .number = 219, .name = "R20", .drv_data = (void *) &(pin_219) },
 [193] = { .number = 193, .name = "R21", .drv_data = (void *) &(pin_193) },
 [192] = { .number = 192, .name = "R22", .drv_data = (void *) &(pin_192) },
 [78] = { .number = 78, .name = "R3", .drv_data = (void *) &(pin_78) },
 [77] = { .number = 77, .name = "R4", .drv_data = (void *) &(pin_77) },
 [102] = { .number = 102, .name = "R5", .drv_data = (void *) &(pin_102) },
 [89] = { .number = 89, .name = "T1", .drv_data = (void *) &(pin_89) },
 [138] = { .number = 138, .name = "T17", .drv_data = (void *) &(pin_138) },
 [137] = { .number = 137, .name = "T19", .drv_data = (void *) &(pin_137) },
 [88] = { .number = 88, .name = "T2", .drv_data = (void *) &(pin_88) },
 [213] = { .number = 213, .name = "T20", .drv_data = (void *) &(pin_213) },
 [217] = { .number = 217, .name = "T21", .drv_data = (void *) &(pin_217) },
 [218] = { .number = 218, .name = "T22", .drv_data = (void *) &(pin_218) },
 [79] = { .number = 79, .name = "T3", .drv_data = (void *) &(pin_79) },
 [111] = { .number = 111, .name = "T4", .drv_data = (void *) &(pin_111) },
 [103] = { .number = 103, .name = "T5", .drv_data = (void *) &(pin_103) },
 [90] = { .number = 90, .name = "U1", .drv_data = (void *) &(pin_90) },
 [145] = { .number = 145, .name = "U19", .drv_data = (void *) &(pin_145) },
 [91] = { .number = 91, .name = "U2", .drv_data = (void *) &(pin_91) },
 [150] = { .number = 150, .name = "U20", .drv_data = (void *) &(pin_150) },
 [204] = { .number = 204, .name = "U21", .drv_data = (void *) &(pin_204) },
 [212] = { .number = 212, .name = "U22", .drv_data = (void *) &(pin_212) },
 [107] = { .number = 107, .name = "U3", .drv_data = (void *) &(pin_107) },
 [113] = { .number = 113, .name = "U4", .drv_data = (void *) &(pin_113) },
 [112] = { .number = 112, .name = "U5", .drv_data = (void *) &(pin_112) },
 [94] = { .number = 94, .name = "V1", .drv_data = (void *) &(pin_94) },
 [141] = { .number = 141, .name = "V19", .drv_data = (void *) &(pin_141) },
 [104] = { .number = 104, .name = "V2", .drv_data = (void *) &(pin_104) },
 [144] = { .number = 144, .name = "V20", .drv_data = (void *) &(pin_144) },
 [209] = { .number = 209, .name = "V21", .drv_data = (void *) &(pin_209) },
 [206] = { .number = 206, .name = "V22", .drv_data = (void *) &(pin_206) },
 [106] = { .number = 106, .name = "V3", .drv_data = (void *) &(pin_106) },
 [120] = { .number = 120, .name = "V4", .drv_data = (void *) &(pin_120) },
 [114] = { .number = 114, .name = "V5", .drv_data = (void *) &(pin_114) },
 [127] = { .number = 127, .name = "V6", .drv_data = (void *) &(pin_127) },
 [95] = { .number = 95, .name = "W1", .drv_data = (void *) &(pin_95) },
 [140] = { .number = 140, .name = "W19", .drv_data = (void *) &(pin_140) },
 [105] = { .number = 105, .name = "W2", .drv_data = (void *) &(pin_105) },
 [149] = { .number = 149, .name = "W20", .drv_data = (void *) &(pin_149) },
 [207] = { .number = 207, .name = "W21", .drv_data = (void *) &(pin_207) },
 [205] = { .number = 205, .name = "W22", .drv_data = (void *) &(pin_205) },
 [108] = { .number = 108, .name = "W3", .drv_data = (void *) &(pin_108) },
 [119] = { .number = 119, .name = "W4", .drv_data = (void *) &(pin_119) },
 [121] = { .number = 121, .name = "W5", .drv_data = (void *) &(pin_121) },
 [126] = { .number = 126, .name = "W6", .drv_data = (void *) &(pin_126) },
 [96] = { .number = 96, .name = "Y1", .drv_data = (void *) &(pin_96) },
 [139] = { .number = 139, .name = "Y19", .drv_data = (void *) &(pin_139) },
 [99] = { .number = 99, .name = "Y2", .drv_data = (void *) &(pin_99) },
 [200] = { .number = 200, .name = "Y20", .drv_data = (void *) &(pin_200) },
 [208] = { .number = 208, .name = "Y21", .drv_data = (void *) &(pin_208) },
 [210] = { .number = 210, .name = "Y22", .drv_data = (void *) &(pin_210) },
 [110] = { .number = 110, .name = "Y3", .drv_data = (void *) &(pin_110) },
 [117] = { .number = 117, .name = "Y4", .drv_data = (void *) &(pin_117) },
 [125] = { .number = 125, .name = "Y5", .drv_data = (void *) &(pin_125) },
 [124] = { .number = 124, .name = "Y6", .drv_data = (void *) &(pin_124) },
};

static const struct aspeed_pin_group aspeed_g5_groups[] = {
 { .name = "ACPI", .pins = &(group_pins_ACPI)[0], .npins = (sizeof(group_pins_ACPI) / sizeof((group_pins_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ACPI)), typeof(&(group_pins_ACPI)[0])))); }))), },
 { .name = "ADC0", .pins = &(group_pins_ADC0)[0], .npins = (sizeof(group_pins_ADC0) / sizeof((group_pins_ADC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC0)), typeof(&(group_pins_ADC0)[0])))); }))), },
 { .name = "ADC1", .pins = &(group_pins_ADC1)[0], .npins = (sizeof(group_pins_ADC1) / sizeof((group_pins_ADC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC1)), typeof(&(group_pins_ADC1)[0])))); }))), },
 { .name = "ADC10", .pins = &(group_pins_ADC10)[0], .npins = (sizeof(group_pins_ADC10) / sizeof((group_pins_ADC10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC10)), typeof(&(group_pins_ADC10)[0])))); }))), },
 { .name = "ADC11", .pins = &(group_pins_ADC11)[0], .npins = (sizeof(group_pins_ADC11) / sizeof((group_pins_ADC11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC11)), typeof(&(group_pins_ADC11)[0])))); }))), },
 { .name = "ADC12", .pins = &(group_pins_ADC12)[0], .npins = (sizeof(group_pins_ADC12) / sizeof((group_pins_ADC12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC12)), typeof(&(group_pins_ADC12)[0])))); }))), },
 { .name = "ADC13", .pins = &(group_pins_ADC13)[0], .npins = (sizeof(group_pins_ADC13) / sizeof((group_pins_ADC13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC13)), typeof(&(group_pins_ADC13)[0])))); }))), },
 { .name = "ADC14", .pins = &(group_pins_ADC14)[0], .npins = (sizeof(group_pins_ADC14) / sizeof((group_pins_ADC14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC14)), typeof(&(group_pins_ADC14)[0])))); }))), },
 { .name = "ADC15", .pins = &(group_pins_ADC15)[0], .npins = (sizeof(group_pins_ADC15) / sizeof((group_pins_ADC15)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC15)), typeof(&(group_pins_ADC15)[0])))); }))), },
 { .name = "ADC2", .pins = &(group_pins_ADC2)[0], .npins = (sizeof(group_pins_ADC2) / sizeof((group_pins_ADC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC2)), typeof(&(group_pins_ADC2)[0])))); }))), },
 { .name = "ADC3", .pins = &(group_pins_ADC3)[0], .npins = (sizeof(group_pins_ADC3) / sizeof((group_pins_ADC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC3)), typeof(&(group_pins_ADC3)[0])))); }))), },
 { .name = "ADC4", .pins = &(group_pins_ADC4)[0], .npins = (sizeof(group_pins_ADC4) / sizeof((group_pins_ADC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC4)), typeof(&(group_pins_ADC4)[0])))); }))), },
 { .name = "ADC5", .pins = &(group_pins_ADC5)[0], .npins = (sizeof(group_pins_ADC5) / sizeof((group_pins_ADC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC5)), typeof(&(group_pins_ADC5)[0])))); }))), },
 { .name = "ADC6", .pins = &(group_pins_ADC6)[0], .npins = (sizeof(group_pins_ADC6) / sizeof((group_pins_ADC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC6)), typeof(&(group_pins_ADC6)[0])))); }))), },
 { .name = "ADC7", .pins = &(group_pins_ADC7)[0], .npins = (sizeof(group_pins_ADC7) / sizeof((group_pins_ADC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC7)), typeof(&(group_pins_ADC7)[0])))); }))), },
 { .name = "ADC8", .pins = &(group_pins_ADC8)[0], .npins = (sizeof(group_pins_ADC8) / sizeof((group_pins_ADC8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC8)), typeof(&(group_pins_ADC8)[0])))); }))), },
 { .name = "ADC9", .pins = &(group_pins_ADC9)[0], .npins = (sizeof(group_pins_ADC9) / sizeof((group_pins_ADC9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ADC9)), typeof(&(group_pins_ADC9)[0])))); }))), },
 { .name = "BMCINT", .pins = &(group_pins_BMCINT)[0], .npins = (sizeof(group_pins_BMCINT) / sizeof((group_pins_BMCINT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_BMCINT)), typeof(&(group_pins_BMCINT)[0])))); }))), },
 { .name = "DDCCLK", .pins = &(group_pins_DDCCLK)[0], .npins = (sizeof(group_pins_DDCCLK) / sizeof((group_pins_DDCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_DDCCLK)), typeof(&(group_pins_DDCCLK)[0])))); }))), },
 { .name = "DDCDAT", .pins = &(group_pins_DDCDAT)[0], .npins = (sizeof(group_pins_DDCDAT) / sizeof((group_pins_DDCDAT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_DDCDAT)), typeof(&(group_pins_DDCDAT)[0])))); }))), },
 { .name = "ESPI", .pins = &(group_pins_ESPI)[0], .npins = (sizeof(group_pins_ESPI) / sizeof((group_pins_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_ESPI)), typeof(&(group_pins_ESPI)[0])))); }))), },
 { .name = "FWSPICS1", .pins = &(group_pins_FWSPICS1)[0], .npins = (sizeof(group_pins_FWSPICS1) / sizeof((group_pins_FWSPICS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_FWSPICS1)), typeof(&(group_pins_FWSPICS1)[0])))); }))), },
 { .name = "FWSPICS2", .pins = &(group_pins_FWSPICS2)[0], .npins = (sizeof(group_pins_FWSPICS2) / sizeof((group_pins_FWSPICS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_FWSPICS2)), typeof(&(group_pins_FWSPICS2)[0])))); }))), },
 { .name = "GPID0", .pins = &(group_pins_GPID0)[0], .npins = (sizeof(group_pins_GPID0) / sizeof((group_pins_GPID0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPID0)), typeof(&(group_pins_GPID0)[0])))); }))), },
 { .name = "GPID2", .pins = &(group_pins_GPID2)[0], .npins = (sizeof(group_pins_GPID2) / sizeof((group_pins_GPID2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPID2)), typeof(&(group_pins_GPID2)[0])))); }))), },
 { .name = "GPID4", .pins = &(group_pins_GPID4)[0], .npins = (sizeof(group_pins_GPID4) / sizeof((group_pins_GPID4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPID4)), typeof(&(group_pins_GPID4)[0])))); }))), },
 { .name = "GPID6", .pins = &(group_pins_GPID6)[0], .npins = (sizeof(group_pins_GPID6) / sizeof((group_pins_GPID6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPID6)), typeof(&(group_pins_GPID6)[0])))); }))), },
 { .name = "GPIE0", .pins = &(group_pins_GPIE0)[0], .npins = (sizeof(group_pins_GPIE0) / sizeof((group_pins_GPIE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPIE0)), typeof(&(group_pins_GPIE0)[0])))); }))), },
 { .name = "GPIE2", .pins = &(group_pins_GPIE2)[0], .npins = (sizeof(group_pins_GPIE2) / sizeof((group_pins_GPIE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPIE2)), typeof(&(group_pins_GPIE2)[0])))); }))), },
 { .name = "GPIE4", .pins = &(group_pins_GPIE4)[0], .npins = (sizeof(group_pins_GPIE4) / sizeof((group_pins_GPIE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPIE4)), typeof(&(group_pins_GPIE4)[0])))); }))), },
 { .name = "GPIE6", .pins = &(group_pins_GPIE6)[0], .npins = (sizeof(group_pins_GPIE6) / sizeof((group_pins_GPIE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_GPIE6)), typeof(&(group_pins_GPIE6)[0])))); }))), },
 { .name = "I2C10", .pins = &(group_pins_I2C10)[0], .npins = (sizeof(group_pins_I2C10) / sizeof((group_pins_I2C10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C10)), typeof(&(group_pins_I2C10)[0])))); }))), },
 { .name = "I2C11", .pins = &(group_pins_I2C11)[0], .npins = (sizeof(group_pins_I2C11) / sizeof((group_pins_I2C11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C11)), typeof(&(group_pins_I2C11)[0])))); }))), },
 { .name = "I2C12", .pins = &(group_pins_I2C12)[0], .npins = (sizeof(group_pins_I2C12) / sizeof((group_pins_I2C12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C12)), typeof(&(group_pins_I2C12)[0])))); }))), },
 { .name = "I2C13", .pins = &(group_pins_I2C13)[0], .npins = (sizeof(group_pins_I2C13) / sizeof((group_pins_I2C13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C13)), typeof(&(group_pins_I2C13)[0])))); }))), },
 { .name = "I2C14", .pins = &(group_pins_I2C14)[0], .npins = (sizeof(group_pins_I2C14) / sizeof((group_pins_I2C14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C14)), typeof(&(group_pins_I2C14)[0])))); }))), },
 { .name = "I2C3", .pins = &(group_pins_I2C3)[0], .npins = (sizeof(group_pins_I2C3) / sizeof((group_pins_I2C3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C3)), typeof(&(group_pins_I2C3)[0])))); }))), },
 { .name = "I2C4", .pins = &(group_pins_I2C4)[0], .npins = (sizeof(group_pins_I2C4) / sizeof((group_pins_I2C4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C4)), typeof(&(group_pins_I2C4)[0])))); }))), },
 { .name = "I2C5", .pins = &(group_pins_I2C5)[0], .npins = (sizeof(group_pins_I2C5) / sizeof((group_pins_I2C5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C5)), typeof(&(group_pins_I2C5)[0])))); }))), },
 { .name = "I2C6", .pins = &(group_pins_I2C6)[0], .npins = (sizeof(group_pins_I2C6) / sizeof((group_pins_I2C6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C6)), typeof(&(group_pins_I2C6)[0])))); }))), },
 { .name = "I2C7", .pins = &(group_pins_I2C7)[0], .npins = (sizeof(group_pins_I2C7) / sizeof((group_pins_I2C7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C7)), typeof(&(group_pins_I2C7)[0])))); }))), },
 { .name = "I2C8", .pins = &(group_pins_I2C8)[0], .npins = (sizeof(group_pins_I2C8) / sizeof((group_pins_I2C8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C8)), typeof(&(group_pins_I2C8)[0])))); }))), },
 { .name = "I2C9", .pins = &(group_pins_I2C9)[0], .npins = (sizeof(group_pins_I2C9) / sizeof((group_pins_I2C9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_I2C9)), typeof(&(group_pins_I2C9)[0])))); }))), },
 { .name = "LAD0", .pins = &(group_pins_LAD0)[0], .npins = (sizeof(group_pins_LAD0) / sizeof((group_pins_LAD0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LAD0)), typeof(&(group_pins_LAD0)[0])))); }))), },
 { .name = "LAD1", .pins = &(group_pins_LAD1)[0], .npins = (sizeof(group_pins_LAD1) / sizeof((group_pins_LAD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LAD1)), typeof(&(group_pins_LAD1)[0])))); }))), },
 { .name = "LAD2", .pins = &(group_pins_LAD2)[0], .npins = (sizeof(group_pins_LAD2) / sizeof((group_pins_LAD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LAD2)), typeof(&(group_pins_LAD2)[0])))); }))), },
 { .name = "LAD3", .pins = &(group_pins_LAD3)[0], .npins = (sizeof(group_pins_LAD3) / sizeof((group_pins_LAD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LAD3)), typeof(&(group_pins_LAD3)[0])))); }))), },
 { .name = "LCLK", .pins = &(group_pins_LCLK)[0], .npins = (sizeof(group_pins_LCLK) / sizeof((group_pins_LCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LCLK)), typeof(&(group_pins_LCLK)[0])))); }))), },
 { .name = "LFRAME", .pins = &(group_pins_LFRAME)[0], .npins = (sizeof(group_pins_LFRAME) / sizeof((group_pins_LFRAME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LFRAME)), typeof(&(group_pins_LFRAME)[0])))); }))), },
 { .name = "LPCHC", .pins = &(group_pins_LPCHC)[0], .npins = (sizeof(group_pins_LPCHC) / sizeof((group_pins_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LPCHC)), typeof(&(group_pins_LPCHC)[0])))); }))), },
 { .name = "LPCPD", .pins = &(group_pins_LPCPD)[0], .npins = (sizeof(group_pins_LPCPD) / sizeof((group_pins_LPCPD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LPCPD)), typeof(&(group_pins_LPCPD)[0])))); }))), },
 { .name = "LPCPLUS", .pins = &(group_pins_LPCPLUS)[0], .npins = (sizeof(group_pins_LPCPLUS) / sizeof((group_pins_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LPCPLUS)), typeof(&(group_pins_LPCPLUS)[0])))); }))), },
 { .name = "LPCPME", .pins = &(group_pins_LPCPME)[0], .npins = (sizeof(group_pins_LPCPME) / sizeof((group_pins_LPCPME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LPCPME)), typeof(&(group_pins_LPCPME)[0])))); }))), },
 { .name = "LPCRST", .pins = &(group_pins_LPCRST)[0], .npins = (sizeof(group_pins_LPCRST) / sizeof((group_pins_LPCRST)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LPCRST)), typeof(&(group_pins_LPCRST)[0])))); }))), },
 { .name = "LPCSMI", .pins = &(group_pins_LPCSMI)[0], .npins = (sizeof(group_pins_LPCSMI) / sizeof((group_pins_LPCSMI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LPCSMI)), typeof(&(group_pins_LPCSMI)[0])))); }))), },
 { .name = "LSIRQ", .pins = &(group_pins_LSIRQ)[0], .npins = (sizeof(group_pins_LSIRQ) / sizeof((group_pins_LSIRQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_LSIRQ)), typeof(&(group_pins_LSIRQ)[0])))); }))), },
 { .name = "MAC1LINK", .pins = &(group_pins_MAC1LINK)[0], .npins = (sizeof(group_pins_MAC1LINK) / sizeof((group_pins_MAC1LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_MAC1LINK)), typeof(&(group_pins_MAC1LINK)[0])))); }))), },
 { .name = "MAC2LINK", .pins = &(group_pins_MAC2LINK)[0], .npins = (sizeof(group_pins_MAC2LINK) / sizeof((group_pins_MAC2LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_MAC2LINK)), typeof(&(group_pins_MAC2LINK)[0])))); }))), },
 { .name = "MDIO1", .pins = &(group_pins_MDIO1)[0], .npins = (sizeof(group_pins_MDIO1) / sizeof((group_pins_MDIO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_MDIO1)), typeof(&(group_pins_MDIO1)[0])))); }))), },
 { .name = "MDIO2", .pins = &(group_pins_MDIO2)[0], .npins = (sizeof(group_pins_MDIO2) / sizeof((group_pins_MDIO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_MDIO2)), typeof(&(group_pins_MDIO2)[0])))); }))), },
 { .name = "NCTS1", .pins = &(group_pins_NCTS1)[0], .npins = (sizeof(group_pins_NCTS1) / sizeof((group_pins_NCTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NCTS1)), typeof(&(group_pins_NCTS1)[0])))); }))), },
 { .name = "NCTS2", .pins = &(group_pins_NCTS2)[0], .npins = (sizeof(group_pins_NCTS2) / sizeof((group_pins_NCTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NCTS2)), typeof(&(group_pins_NCTS2)[0])))); }))), },
 { .name = "NCTS3", .pins = &(group_pins_NCTS3)[0], .npins = (sizeof(group_pins_NCTS3) / sizeof((group_pins_NCTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NCTS3)), typeof(&(group_pins_NCTS3)[0])))); }))), },
 { .name = "NCTS4", .pins = &(group_pins_NCTS4)[0], .npins = (sizeof(group_pins_NCTS4) / sizeof((group_pins_NCTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NCTS4)), typeof(&(group_pins_NCTS4)[0])))); }))), },
 { .name = "NDCD1", .pins = &(group_pins_NDCD1)[0], .npins = (sizeof(group_pins_NDCD1) / sizeof((group_pins_NDCD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDCD1)), typeof(&(group_pins_NDCD1)[0])))); }))), },
 { .name = "NDCD2", .pins = &(group_pins_NDCD2)[0], .npins = (sizeof(group_pins_NDCD2) / sizeof((group_pins_NDCD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDCD2)), typeof(&(group_pins_NDCD2)[0])))); }))), },
 { .name = "NDCD3", .pins = &(group_pins_NDCD3)[0], .npins = (sizeof(group_pins_NDCD3) / sizeof((group_pins_NDCD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDCD3)), typeof(&(group_pins_NDCD3)[0])))); }))), },
 { .name = "NDCD4", .pins = &(group_pins_NDCD4)[0], .npins = (sizeof(group_pins_NDCD4) / sizeof((group_pins_NDCD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDCD4)), typeof(&(group_pins_NDCD4)[0])))); }))), },
 { .name = "NDSR1", .pins = &(group_pins_NDSR1)[0], .npins = (sizeof(group_pins_NDSR1) / sizeof((group_pins_NDSR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDSR1)), typeof(&(group_pins_NDSR1)[0])))); }))), },
 { .name = "NDSR2", .pins = &(group_pins_NDSR2)[0], .npins = (sizeof(group_pins_NDSR2) / sizeof((group_pins_NDSR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDSR2)), typeof(&(group_pins_NDSR2)[0])))); }))), },
 { .name = "NDSR3", .pins = &(group_pins_NDSR3)[0], .npins = (sizeof(group_pins_NDSR3) / sizeof((group_pins_NDSR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDSR3)), typeof(&(group_pins_NDSR3)[0])))); }))), },
 { .name = "NDSR4", .pins = &(group_pins_NDSR4)[0], .npins = (sizeof(group_pins_NDSR4) / sizeof((group_pins_NDSR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDSR4)), typeof(&(group_pins_NDSR4)[0])))); }))), },
 { .name = "NDTR1", .pins = &(group_pins_NDTR1)[0], .npins = (sizeof(group_pins_NDTR1) / sizeof((group_pins_NDTR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDTR1)), typeof(&(group_pins_NDTR1)[0])))); }))), },
 { .name = "NDTR2", .pins = &(group_pins_NDTR2)[0], .npins = (sizeof(group_pins_NDTR2) / sizeof((group_pins_NDTR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDTR2)), typeof(&(group_pins_NDTR2)[0])))); }))), },
 { .name = "NDTR3", .pins = &(group_pins_NDTR3)[0], .npins = (sizeof(group_pins_NDTR3) / sizeof((group_pins_NDTR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDTR3)), typeof(&(group_pins_NDTR3)[0])))); }))), },
 { .name = "NDTR4", .pins = &(group_pins_NDTR4)[0], .npins = (sizeof(group_pins_NDTR4) / sizeof((group_pins_NDTR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NDTR4)), typeof(&(group_pins_NDTR4)[0])))); }))), },
 { .name = "NRI1", .pins = &(group_pins_NRI1)[0], .npins = (sizeof(group_pins_NRI1) / sizeof((group_pins_NRI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRI1)), typeof(&(group_pins_NRI1)[0])))); }))), },
 { .name = "NRI2", .pins = &(group_pins_NRI2)[0], .npins = (sizeof(group_pins_NRI2) / sizeof((group_pins_NRI2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRI2)), typeof(&(group_pins_NRI2)[0])))); }))), },
 { .name = "NRI3", .pins = &(group_pins_NRI3)[0], .npins = (sizeof(group_pins_NRI3) / sizeof((group_pins_NRI3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRI3)), typeof(&(group_pins_NRI3)[0])))); }))), },
 { .name = "NRI4", .pins = &(group_pins_NRI4)[0], .npins = (sizeof(group_pins_NRI4) / sizeof((group_pins_NRI4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRI4)), typeof(&(group_pins_NRI4)[0])))); }))), },
 { .name = "NRTS1", .pins = &(group_pins_NRTS1)[0], .npins = (sizeof(group_pins_NRTS1) / sizeof((group_pins_NRTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRTS1)), typeof(&(group_pins_NRTS1)[0])))); }))), },
 { .name = "NRTS2", .pins = &(group_pins_NRTS2)[0], .npins = (sizeof(group_pins_NRTS2) / sizeof((group_pins_NRTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRTS2)), typeof(&(group_pins_NRTS2)[0])))); }))), },
 { .name = "NRTS3", .pins = &(group_pins_NRTS3)[0], .npins = (sizeof(group_pins_NRTS3) / sizeof((group_pins_NRTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRTS3)), typeof(&(group_pins_NRTS3)[0])))); }))), },
 { .name = "NRTS4", .pins = &(group_pins_NRTS4)[0], .npins = (sizeof(group_pins_NRTS4) / sizeof((group_pins_NRTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_NRTS4)), typeof(&(group_pins_NRTS4)[0])))); }))), },
 { .name = "OSCCLK", .pins = &(group_pins_OSCCLK)[0], .npins = (sizeof(group_pins_OSCCLK) / sizeof((group_pins_OSCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_OSCCLK)), typeof(&(group_pins_OSCCLK)[0])))); }))), },
 { .name = "PEWAKE", .pins = &(group_pins_PEWAKE)[0], .npins = (sizeof(group_pins_PEWAKE) / sizeof((group_pins_PEWAKE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PEWAKE)), typeof(&(group_pins_PEWAKE)[0])))); }))), },
 { .name = "PNOR", .pins = &(group_pins_PNOR)[0], .npins = (sizeof(group_pins_PNOR) / sizeof((group_pins_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PNOR)), typeof(&(group_pins_PNOR)[0])))); }))), },
 { .name = "PWM0", .pins = &(group_pins_PWM0)[0], .npins = (sizeof(group_pins_PWM0) / sizeof((group_pins_PWM0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM0)), typeof(&(group_pins_PWM0)[0])))); }))), },
 { .name = "PWM1", .pins = &(group_pins_PWM1)[0], .npins = (sizeof(group_pins_PWM1) / sizeof((group_pins_PWM1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM1)), typeof(&(group_pins_PWM1)[0])))); }))), },
 { .name = "PWM2", .pins = &(group_pins_PWM2)[0], .npins = (sizeof(group_pins_PWM2) / sizeof((group_pins_PWM2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM2)), typeof(&(group_pins_PWM2)[0])))); }))), },
 { .name = "PWM3", .pins = &(group_pins_PWM3)[0], .npins = (sizeof(group_pins_PWM3) / sizeof((group_pins_PWM3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM3)), typeof(&(group_pins_PWM3)[0])))); }))), },
 { .name = "PWM4", .pins = &(group_pins_PWM4)[0], .npins = (sizeof(group_pins_PWM4) / sizeof((group_pins_PWM4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM4)), typeof(&(group_pins_PWM4)[0])))); }))), },
 { .name = "PWM5", .pins = &(group_pins_PWM5)[0], .npins = (sizeof(group_pins_PWM5) / sizeof((group_pins_PWM5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM5)), typeof(&(group_pins_PWM5)[0])))); }))), },
 { .name = "PWM6", .pins = &(group_pins_PWM6)[0], .npins = (sizeof(group_pins_PWM6) / sizeof((group_pins_PWM6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM6)), typeof(&(group_pins_PWM6)[0])))); }))), },
 { .name = "PWM7", .pins = &(group_pins_PWM7)[0], .npins = (sizeof(group_pins_PWM7) / sizeof((group_pins_PWM7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_PWM7)), typeof(&(group_pins_PWM7)[0])))); }))), },
 { .name = "RGMII1", .pins = &(group_pins_RGMII1)[0], .npins = (sizeof(group_pins_RGMII1) / sizeof((group_pins_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RGMII1)), typeof(&(group_pins_RGMII1)[0])))); }))), },
 { .name = "RGMII2", .pins = &(group_pins_RGMII2)[0], .npins = (sizeof(group_pins_RGMII2) / sizeof((group_pins_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RGMII2)), typeof(&(group_pins_RGMII2)[0])))); }))), },
 { .name = "RMII1", .pins = &(group_pins_RMII1)[0], .npins = (sizeof(group_pins_RMII1) / sizeof((group_pins_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RMII1)), typeof(&(group_pins_RMII1)[0])))); }))), },
 { .name = "RMII2", .pins = &(group_pins_RMII2)[0], .npins = (sizeof(group_pins_RMII2) / sizeof((group_pins_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RMII2)), typeof(&(group_pins_RMII2)[0])))); }))), },
 { .name = "RXD1", .pins = &(group_pins_RXD1)[0], .npins = (sizeof(group_pins_RXD1) / sizeof((group_pins_RXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RXD1)), typeof(&(group_pins_RXD1)[0])))); }))), },
 { .name = "RXD2", .pins = &(group_pins_RXD2)[0], .npins = (sizeof(group_pins_RXD2) / sizeof((group_pins_RXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RXD2)), typeof(&(group_pins_RXD2)[0])))); }))), },
 { .name = "RXD3", .pins = &(group_pins_RXD3)[0], .npins = (sizeof(group_pins_RXD3) / sizeof((group_pins_RXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RXD3)), typeof(&(group_pins_RXD3)[0])))); }))), },
 { .name = "RXD4", .pins = &(group_pins_RXD4)[0], .npins = (sizeof(group_pins_RXD4) / sizeof((group_pins_RXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_RXD4)), typeof(&(group_pins_RXD4)[0])))); }))), },
 { .name = "SALT1", .pins = &(group_pins_SALT1)[0], .npins = (sizeof(group_pins_SALT1) / sizeof((group_pins_SALT1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT1)), typeof(&(group_pins_SALT1)[0])))); }))), },
 { .name = "SALT10", .pins = &(group_pins_SALT10)[0], .npins = (sizeof(group_pins_SALT10) / sizeof((group_pins_SALT10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT10)), typeof(&(group_pins_SALT10)[0])))); }))), },
 { .name = "SALT11", .pins = &(group_pins_SALT11)[0], .npins = (sizeof(group_pins_SALT11) / sizeof((group_pins_SALT11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT11)), typeof(&(group_pins_SALT11)[0])))); }))), },
 { .name = "SALT12", .pins = &(group_pins_SALT12)[0], .npins = (sizeof(group_pins_SALT12) / sizeof((group_pins_SALT12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT12)), typeof(&(group_pins_SALT12)[0])))); }))), },
 { .name = "SALT13", .pins = &(group_pins_SALT13)[0], .npins = (sizeof(group_pins_SALT13) / sizeof((group_pins_SALT13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT13)), typeof(&(group_pins_SALT13)[0])))); }))), },
 { .name = "SALT14", .pins = &(group_pins_SALT14)[0], .npins = (sizeof(group_pins_SALT14) / sizeof((group_pins_SALT14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT14)), typeof(&(group_pins_SALT14)[0])))); }))), },
 { .name = "SALT2", .pins = &(group_pins_SALT2)[0], .npins = (sizeof(group_pins_SALT2) / sizeof((group_pins_SALT2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT2)), typeof(&(group_pins_SALT2)[0])))); }))), },
 { .name = "SALT3", .pins = &(group_pins_SALT3)[0], .npins = (sizeof(group_pins_SALT3) / sizeof((group_pins_SALT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT3)), typeof(&(group_pins_SALT3)[0])))); }))), },
 { .name = "SALT4", .pins = &(group_pins_SALT4)[0], .npins = (sizeof(group_pins_SALT4) / sizeof((group_pins_SALT4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT4)), typeof(&(group_pins_SALT4)[0])))); }))), },
 { .name = "SALT5", .pins = &(group_pins_SALT5)[0], .npins = (sizeof(group_pins_SALT5) / sizeof((group_pins_SALT5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT5)), typeof(&(group_pins_SALT5)[0])))); }))), },
 { .name = "SALT6", .pins = &(group_pins_SALT6)[0], .npins = (sizeof(group_pins_SALT6) / sizeof((group_pins_SALT6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT6)), typeof(&(group_pins_SALT6)[0])))); }))), },
 { .name = "SALT7", .pins = &(group_pins_SALT7)[0], .npins = (sizeof(group_pins_SALT7) / sizeof((group_pins_SALT7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT7)), typeof(&(group_pins_SALT7)[0])))); }))), },
 { .name = "SALT8", .pins = &(group_pins_SALT8)[0], .npins = (sizeof(group_pins_SALT8) / sizeof((group_pins_SALT8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT8)), typeof(&(group_pins_SALT8)[0])))); }))), },
 { .name = "SALT9", .pins = &(group_pins_SALT9)[0], .npins = (sizeof(group_pins_SALT9) / sizeof((group_pins_SALT9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SALT9)), typeof(&(group_pins_SALT9)[0])))); }))), },
 { .name = "SCL1", .pins = &(group_pins_SCL1)[0], .npins = (sizeof(group_pins_SCL1) / sizeof((group_pins_SCL1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SCL1)), typeof(&(group_pins_SCL1)[0])))); }))), },
 { .name = "SCL2", .pins = &(group_pins_SCL2)[0], .npins = (sizeof(group_pins_SCL2) / sizeof((group_pins_SCL2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SCL2)), typeof(&(group_pins_SCL2)[0])))); }))), },
 { .name = "SD1", .pins = &(group_pins_SD1)[0], .npins = (sizeof(group_pins_SD1) / sizeof((group_pins_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SD1)), typeof(&(group_pins_SD1)[0])))); }))), },
 { .name = "SD2", .pins = &(group_pins_SD2)[0], .npins = (sizeof(group_pins_SD2) / sizeof((group_pins_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SD2)), typeof(&(group_pins_SD2)[0])))); }))), },
 { .name = "SDA1", .pins = &(group_pins_SDA1)[0], .npins = (sizeof(group_pins_SDA1) / sizeof((group_pins_SDA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SDA1)), typeof(&(group_pins_SDA1)[0])))); }))), },
 { .name = "SDA2", .pins = &(group_pins_SDA2)[0], .npins = (sizeof(group_pins_SDA2) / sizeof((group_pins_SDA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SDA2)), typeof(&(group_pins_SDA2)[0])))); }))), },
 { .name = "SGPM", .pins = &(group_pins_SGPM)[0], .npins = (sizeof(group_pins_SGPM) / sizeof((group_pins_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SGPM)), typeof(&(group_pins_SGPM)[0])))); }))), },
 { .name = "SGPS1", .pins = &(group_pins_SGPS1)[0], .npins = (sizeof(group_pins_SGPS1) / sizeof((group_pins_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SGPS1)), typeof(&(group_pins_SGPS1)[0])))); }))), },
 { .name = "SGPS2", .pins = &(group_pins_SGPS2)[0], .npins = (sizeof(group_pins_SGPS2) / sizeof((group_pins_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SGPS2)), typeof(&(group_pins_SGPS2)[0])))); }))), },
 { .name = "SIOONCTRL", .pins = &(group_pins_SIOONCTRL)[0], .npins = (sizeof(group_pins_SIOONCTRL) / sizeof((group_pins_SIOONCTRL)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOONCTRL)), typeof(&(group_pins_SIOONCTRL)[0])))); }))), },
 { .name = "SIOPBI", .pins = &(group_pins_SIOPBI)[0], .npins = (sizeof(group_pins_SIOPBI) / sizeof((group_pins_SIOPBI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOPBI)), typeof(&(group_pins_SIOPBI)[0])))); }))), },
 { .name = "SIOPBO", .pins = &(group_pins_SIOPBO)[0], .npins = (sizeof(group_pins_SIOPBO) / sizeof((group_pins_SIOPBO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOPBO)), typeof(&(group_pins_SIOPBO)[0])))); }))), },
 { .name = "SIOPWREQ", .pins = &(group_pins_SIOPWREQ)[0], .npins = (sizeof(group_pins_SIOPWREQ) / sizeof((group_pins_SIOPWREQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOPWREQ)), typeof(&(group_pins_SIOPWREQ)[0])))); }))), },
 { .name = "SIOPWRGD", .pins = &(group_pins_SIOPWRGD)[0], .npins = (sizeof(group_pins_SIOPWRGD) / sizeof((group_pins_SIOPWRGD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOPWRGD)), typeof(&(group_pins_SIOPWRGD)[0])))); }))), },
 { .name = "SIOS3", .pins = &(group_pins_SIOS3)[0], .npins = (sizeof(group_pins_SIOS3) / sizeof((group_pins_SIOS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOS3)), typeof(&(group_pins_SIOS3)[0])))); }))), },
 { .name = "SIOS5", .pins = &(group_pins_SIOS5)[0], .npins = (sizeof(group_pins_SIOS5) / sizeof((group_pins_SIOS5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOS5)), typeof(&(group_pins_SIOS5)[0])))); }))), },
 { .name = "SIOSCI", .pins = &(group_pins_SIOSCI)[0], .npins = (sizeof(group_pins_SIOSCI) / sizeof((group_pins_SIOSCI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SIOSCI)), typeof(&(group_pins_SIOSCI)[0])))); }))), },
 { .name = "SPI1", .pins = &(group_pins_SPI1)[0], .npins = (sizeof(group_pins_SPI1) / sizeof((group_pins_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI1)), typeof(&(group_pins_SPI1)[0])))); }))), },
 { .name = "SPI1CS1", .pins = &(group_pins_SPI1CS1)[0], .npins = (sizeof(group_pins_SPI1CS1) / sizeof((group_pins_SPI1CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI1CS1)), typeof(&(group_pins_SPI1CS1)[0])))); }))), },
 { .name = "SPI1DEBUG", .pins = &(group_pins_SPI1DEBUG)[0], .npins = (sizeof(group_pins_SPI1DEBUG) / sizeof((group_pins_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI1DEBUG)), typeof(&(group_pins_SPI1DEBUG)[0])))); }))), },
 { .name = "SPI1PASSTHRU", .pins = &(group_pins_SPI1PASSTHRU)[0], .npins = (sizeof(group_pins_SPI1PASSTHRU) / sizeof((group_pins_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI1PASSTHRU)), typeof(&(group_pins_SPI1PASSTHRU)[0])))); }))), },
 { .name = "SPI2CK", .pins = &(group_pins_SPI2CK)[0], .npins = (sizeof(group_pins_SPI2CK) / sizeof((group_pins_SPI2CK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI2CK)), typeof(&(group_pins_SPI2CK)[0])))); }))), },
 { .name = "SPI2CS0", .pins = &(group_pins_SPI2CS0)[0], .npins = (sizeof(group_pins_SPI2CS0) / sizeof((group_pins_SPI2CS0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI2CS0)), typeof(&(group_pins_SPI2CS0)[0])))); }))), },
 { .name = "SPI2CS1", .pins = &(group_pins_SPI2CS1)[0], .npins = (sizeof(group_pins_SPI2CS1) / sizeof((group_pins_SPI2CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI2CS1)), typeof(&(group_pins_SPI2CS1)[0])))); }))), },
 { .name = "SPI2MISO", .pins = &(group_pins_SPI2MISO)[0], .npins = (sizeof(group_pins_SPI2MISO) / sizeof((group_pins_SPI2MISO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI2MISO)), typeof(&(group_pins_SPI2MISO)[0])))); }))), },
 { .name = "SPI2MOSI", .pins = &(group_pins_SPI2MOSI)[0], .npins = (sizeof(group_pins_SPI2MOSI) / sizeof((group_pins_SPI2MOSI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_SPI2MOSI)), typeof(&(group_pins_SPI2MOSI)[0])))); }))), },
 { .name = "TIMER3", .pins = &(group_pins_TIMER3)[0], .npins = (sizeof(group_pins_TIMER3) / sizeof((group_pins_TIMER3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TIMER3)), typeof(&(group_pins_TIMER3)[0])))); }))), },
 { .name = "TIMER4", .pins = &(group_pins_TIMER4)[0], .npins = (sizeof(group_pins_TIMER4) / sizeof((group_pins_TIMER4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TIMER4)), typeof(&(group_pins_TIMER4)[0])))); }))), },
 { .name = "TIMER5", .pins = &(group_pins_TIMER5)[0], .npins = (sizeof(group_pins_TIMER5) / sizeof((group_pins_TIMER5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TIMER5)), typeof(&(group_pins_TIMER5)[0])))); }))), },
 { .name = "TIMER6", .pins = &(group_pins_TIMER6)[0], .npins = (sizeof(group_pins_TIMER6) / sizeof((group_pins_TIMER6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TIMER6)), typeof(&(group_pins_TIMER6)[0])))); }))), },
 { .name = "TIMER7", .pins = &(group_pins_TIMER7)[0], .npins = (sizeof(group_pins_TIMER7) / sizeof((group_pins_TIMER7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TIMER7)), typeof(&(group_pins_TIMER7)[0])))); }))), },
 { .name = "TIMER8", .pins = &(group_pins_TIMER8)[0], .npins = (sizeof(group_pins_TIMER8) / sizeof((group_pins_TIMER8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TIMER8)), typeof(&(group_pins_TIMER8)[0])))); }))), },
 { .name = "TXD1", .pins = &(group_pins_TXD1)[0], .npins = (sizeof(group_pins_TXD1) / sizeof((group_pins_TXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TXD1)), typeof(&(group_pins_TXD1)[0])))); }))), },
 { .name = "TXD2", .pins = &(group_pins_TXD2)[0], .npins = (sizeof(group_pins_TXD2) / sizeof((group_pins_TXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TXD2)), typeof(&(group_pins_TXD2)[0])))); }))), },
 { .name = "TXD3", .pins = &(group_pins_TXD3)[0], .npins = (sizeof(group_pins_TXD3) / sizeof((group_pins_TXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TXD3)), typeof(&(group_pins_TXD3)[0])))); }))), },
 { .name = "TXD4", .pins = &(group_pins_TXD4)[0], .npins = (sizeof(group_pins_TXD4) / sizeof((group_pins_TXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_TXD4)), typeof(&(group_pins_TXD4)[0])))); }))), },
 { .name = "UART6", .pins = &(group_pins_UART6)[0], .npins = (sizeof(group_pins_UART6) / sizeof((group_pins_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_UART6)), typeof(&(group_pins_UART6)[0])))); }))), },
 { .name = "USB11BHID", .pins = &(group_pins_USB11BHID)[0], .npins = (sizeof(group_pins_USB11BHID) / sizeof((group_pins_USB11BHID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_USB11BHID)), typeof(&(group_pins_USB11BHID)[0])))); }))), },
 { .name = "USB2AD", .pins = &(group_pins_USB2AD)[0], .npins = (sizeof(group_pins_USB2AD) / sizeof((group_pins_USB2AD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_USB2AD)), typeof(&(group_pins_USB2AD)[0])))); }))), },
 { .name = "USB2AH", .pins = &(group_pins_USB2AH)[0], .npins = (sizeof(group_pins_USB2AH) / sizeof((group_pins_USB2AH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_USB2AH)), typeof(&(group_pins_USB2AH)[0])))); }))), },
 { .name = "USB2BD", .pins = &(group_pins_USB2BD)[0], .npins = (sizeof(group_pins_USB2BD) / sizeof((group_pins_USB2BD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_USB2BD)), typeof(&(group_pins_USB2BD)[0])))); }))), },
 { .name = "USB2BH", .pins = &(group_pins_USB2BH)[0], .npins = (sizeof(group_pins_USB2BH) / sizeof((group_pins_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_USB2BH)), typeof(&(group_pins_USB2BH)[0])))); }))), },
 { .name = "USBCKI", .pins = &(group_pins_USBCKI)[0], .npins = (sizeof(group_pins_USBCKI) / sizeof((group_pins_USBCKI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_USBCKI)), typeof(&(group_pins_USBCKI)[0])))); }))), },
 { .name = "VGABIOSROM", .pins = &(group_pins_VGABIOSROM)[0], .npins = (sizeof(group_pins_VGABIOSROM) / sizeof((group_pins_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_VGABIOSROM)), typeof(&(group_pins_VGABIOSROM)[0])))); }))), },
 { .name = "VGAHS", .pins = &(group_pins_VGAHS)[0], .npins = (sizeof(group_pins_VGAHS) / sizeof((group_pins_VGAHS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_VGAHS)), typeof(&(group_pins_VGAHS)[0])))); }))), },
 { .name = "VGAVS", .pins = &(group_pins_VGAVS)[0], .npins = (sizeof(group_pins_VGAVS) / sizeof((group_pins_VGAVS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_VGAVS)), typeof(&(group_pins_VGAVS)[0])))); }))), },
 { .name = "VPI24", .pins = &(group_pins_VPI24)[0], .npins = (sizeof(group_pins_VPI24) / sizeof((group_pins_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_VPI24)), typeof(&(group_pins_VPI24)[0])))); }))), },
 { .name = "VPO", .pins = &(group_pins_VPO)[0], .npins = (sizeof(group_pins_VPO) / sizeof((group_pins_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_VPO)), typeof(&(group_pins_VPO)[0])))); }))), },
 { .name = "WDTRST1", .pins = &(group_pins_WDTRST1)[0], .npins = (sizeof(group_pins_WDTRST1) / sizeof((group_pins_WDTRST1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_WDTRST1)), typeof(&(group_pins_WDTRST1)[0])))); }))), },
 { .name = "WDTRST2", .pins = &(group_pins_WDTRST2)[0], .npins = (sizeof(group_pins_WDTRST2) / sizeof((group_pins_WDTRST2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((group_pins_WDTRST2)), typeof(&(group_pins_WDTRST2)[0])))); }))), },
};

static const struct aspeed_pin_function aspeed_g5_functions[] = {
 { .name = "ACPI", .groups = &func_groups_ACPI[0], .ngroups = (sizeof(func_groups_ACPI) / sizeof((func_groups_ACPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ACPI)), typeof(&(func_groups_ACPI)[0])))); }))), },
 { .name = "ADC0", .groups = &func_groups_ADC0[0], .ngroups = (sizeof(func_groups_ADC0) / sizeof((func_groups_ADC0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC0)), typeof(&(func_groups_ADC0)[0])))); }))), },
 { .name = "ADC1", .groups = &func_groups_ADC1[0], .ngroups = (sizeof(func_groups_ADC1) / sizeof((func_groups_ADC1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC1)), typeof(&(func_groups_ADC1)[0])))); }))), },
 { .name = "ADC10", .groups = &func_groups_ADC10[0], .ngroups = (sizeof(func_groups_ADC10) / sizeof((func_groups_ADC10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC10)), typeof(&(func_groups_ADC10)[0])))); }))), },
 { .name = "ADC11", .groups = &func_groups_ADC11[0], .ngroups = (sizeof(func_groups_ADC11) / sizeof((func_groups_ADC11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC11)), typeof(&(func_groups_ADC11)[0])))); }))), },
 { .name = "ADC12", .groups = &func_groups_ADC12[0], .ngroups = (sizeof(func_groups_ADC12) / sizeof((func_groups_ADC12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC12)), typeof(&(func_groups_ADC12)[0])))); }))), },
 { .name = "ADC13", .groups = &func_groups_ADC13[0], .ngroups = (sizeof(func_groups_ADC13) / sizeof((func_groups_ADC13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC13)), typeof(&(func_groups_ADC13)[0])))); }))), },
 { .name = "ADC14", .groups = &func_groups_ADC14[0], .ngroups = (sizeof(func_groups_ADC14) / sizeof((func_groups_ADC14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC14)), typeof(&(func_groups_ADC14)[0])))); }))), },
 { .name = "ADC15", .groups = &func_groups_ADC15[0], .ngroups = (sizeof(func_groups_ADC15) / sizeof((func_groups_ADC15)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC15)), typeof(&(func_groups_ADC15)[0])))); }))), },
 { .name = "ADC2", .groups = &func_groups_ADC2[0], .ngroups = (sizeof(func_groups_ADC2) / sizeof((func_groups_ADC2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC2)), typeof(&(func_groups_ADC2)[0])))); }))), },
 { .name = "ADC3", .groups = &func_groups_ADC3[0], .ngroups = (sizeof(func_groups_ADC3) / sizeof((func_groups_ADC3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC3)), typeof(&(func_groups_ADC3)[0])))); }))), },
 { .name = "ADC4", .groups = &func_groups_ADC4[0], .ngroups = (sizeof(func_groups_ADC4) / sizeof((func_groups_ADC4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC4)), typeof(&(func_groups_ADC4)[0])))); }))), },
 { .name = "ADC5", .groups = &func_groups_ADC5[0], .ngroups = (sizeof(func_groups_ADC5) / sizeof((func_groups_ADC5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC5)), typeof(&(func_groups_ADC5)[0])))); }))), },
 { .name = "ADC6", .groups = &func_groups_ADC6[0], .ngroups = (sizeof(func_groups_ADC6) / sizeof((func_groups_ADC6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC6)), typeof(&(func_groups_ADC6)[0])))); }))), },
 { .name = "ADC7", .groups = &func_groups_ADC7[0], .ngroups = (sizeof(func_groups_ADC7) / sizeof((func_groups_ADC7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC7)), typeof(&(func_groups_ADC7)[0])))); }))), },
 { .name = "ADC8", .groups = &func_groups_ADC8[0], .ngroups = (sizeof(func_groups_ADC8) / sizeof((func_groups_ADC8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC8)), typeof(&(func_groups_ADC8)[0])))); }))), },
 { .name = "ADC9", .groups = &func_groups_ADC9[0], .ngroups = (sizeof(func_groups_ADC9) / sizeof((func_groups_ADC9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ADC9)), typeof(&(func_groups_ADC9)[0])))); }))), },
 { .name = "BMCINT", .groups = &func_groups_BMCINT[0], .ngroups = (sizeof(func_groups_BMCINT) / sizeof((func_groups_BMCINT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_BMCINT)), typeof(&(func_groups_BMCINT)[0])))); }))), },
 { .name = "DDCCLK", .groups = &func_groups_DDCCLK[0], .ngroups = (sizeof(func_groups_DDCCLK) / sizeof((func_groups_DDCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_DDCCLK)), typeof(&(func_groups_DDCCLK)[0])))); }))), },
 { .name = "DDCDAT", .groups = &func_groups_DDCDAT[0], .ngroups = (sizeof(func_groups_DDCDAT) / sizeof((func_groups_DDCDAT)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_DDCDAT)), typeof(&(func_groups_DDCDAT)[0])))); }))), },
 { .name = "ESPI", .groups = &func_groups_ESPI[0], .ngroups = (sizeof(func_groups_ESPI) / sizeof((func_groups_ESPI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_ESPI)), typeof(&(func_groups_ESPI)[0])))); }))), },
 { .name = "FWSPICS1", .groups = &func_groups_FWSPICS1[0], .ngroups = (sizeof(func_groups_FWSPICS1) / sizeof((func_groups_FWSPICS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_FWSPICS1)), typeof(&(func_groups_FWSPICS1)[0])))); }))), },
 { .name = "FWSPICS2", .groups = &func_groups_FWSPICS2[0], .ngroups = (sizeof(func_groups_FWSPICS2) / sizeof((func_groups_FWSPICS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_FWSPICS2)), typeof(&(func_groups_FWSPICS2)[0])))); }))), },
 { .name = "GPID0", .groups = &func_groups_GPID0[0], .ngroups = (sizeof(func_groups_GPID0) / sizeof((func_groups_GPID0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPID0)), typeof(&(func_groups_GPID0)[0])))); }))), },
 { .name = "GPID2", .groups = &func_groups_GPID2[0], .ngroups = (sizeof(func_groups_GPID2) / sizeof((func_groups_GPID2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPID2)), typeof(&(func_groups_GPID2)[0])))); }))), },
 { .name = "GPID4", .groups = &func_groups_GPID4[0], .ngroups = (sizeof(func_groups_GPID4) / sizeof((func_groups_GPID4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPID4)), typeof(&(func_groups_GPID4)[0])))); }))), },
 { .name = "GPID6", .groups = &func_groups_GPID6[0], .ngroups = (sizeof(func_groups_GPID6) / sizeof((func_groups_GPID6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPID6)), typeof(&(func_groups_GPID6)[0])))); }))), },
 { .name = "GPIE0", .groups = &func_groups_GPIE0[0], .ngroups = (sizeof(func_groups_GPIE0) / sizeof((func_groups_GPIE0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPIE0)), typeof(&(func_groups_GPIE0)[0])))); }))), },
 { .name = "GPIE2", .groups = &func_groups_GPIE2[0], .ngroups = (sizeof(func_groups_GPIE2) / sizeof((func_groups_GPIE2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPIE2)), typeof(&(func_groups_GPIE2)[0])))); }))), },
 { .name = "GPIE4", .groups = &func_groups_GPIE4[0], .ngroups = (sizeof(func_groups_GPIE4) / sizeof((func_groups_GPIE4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPIE4)), typeof(&(func_groups_GPIE4)[0])))); }))), },
 { .name = "GPIE6", .groups = &func_groups_GPIE6[0], .ngroups = (sizeof(func_groups_GPIE6) / sizeof((func_groups_GPIE6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_GPIE6)), typeof(&(func_groups_GPIE6)[0])))); }))), },
 { .name = "I2C10", .groups = &func_groups_I2C10[0], .ngroups = (sizeof(func_groups_I2C10) / sizeof((func_groups_I2C10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C10)), typeof(&(func_groups_I2C10)[0])))); }))), },
 { .name = "I2C11", .groups = &func_groups_I2C11[0], .ngroups = (sizeof(func_groups_I2C11) / sizeof((func_groups_I2C11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C11)), typeof(&(func_groups_I2C11)[0])))); }))), },
 { .name = "I2C12", .groups = &func_groups_I2C12[0], .ngroups = (sizeof(func_groups_I2C12) / sizeof((func_groups_I2C12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C12)), typeof(&(func_groups_I2C12)[0])))); }))), },
 { .name = "I2C13", .groups = &func_groups_I2C13[0], .ngroups = (sizeof(func_groups_I2C13) / sizeof((func_groups_I2C13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C13)), typeof(&(func_groups_I2C13)[0])))); }))), },
 { .name = "I2C14", .groups = &func_groups_I2C14[0], .ngroups = (sizeof(func_groups_I2C14) / sizeof((func_groups_I2C14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C14)), typeof(&(func_groups_I2C14)[0])))); }))), },
 { .name = "I2C3", .groups = &func_groups_I2C3[0], .ngroups = (sizeof(func_groups_I2C3) / sizeof((func_groups_I2C3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C3)), typeof(&(func_groups_I2C3)[0])))); }))), },
 { .name = "I2C4", .groups = &func_groups_I2C4[0], .ngroups = (sizeof(func_groups_I2C4) / sizeof((func_groups_I2C4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C4)), typeof(&(func_groups_I2C4)[0])))); }))), },
 { .name = "I2C5", .groups = &func_groups_I2C5[0], .ngroups = (sizeof(func_groups_I2C5) / sizeof((func_groups_I2C5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C5)), typeof(&(func_groups_I2C5)[0])))); }))), },
 { .name = "I2C6", .groups = &func_groups_I2C6[0], .ngroups = (sizeof(func_groups_I2C6) / sizeof((func_groups_I2C6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C6)), typeof(&(func_groups_I2C6)[0])))); }))), },
 { .name = "I2C7", .groups = &func_groups_I2C7[0], .ngroups = (sizeof(func_groups_I2C7) / sizeof((func_groups_I2C7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C7)), typeof(&(func_groups_I2C7)[0])))); }))), },
 { .name = "I2C8", .groups = &func_groups_I2C8[0], .ngroups = (sizeof(func_groups_I2C8) / sizeof((func_groups_I2C8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C8)), typeof(&(func_groups_I2C8)[0])))); }))), },
 { .name = "I2C9", .groups = &func_groups_I2C9[0], .ngroups = (sizeof(func_groups_I2C9) / sizeof((func_groups_I2C9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_I2C9)), typeof(&(func_groups_I2C9)[0])))); }))), },
 { .name = "LAD0", .groups = &func_groups_LAD0[0], .ngroups = (sizeof(func_groups_LAD0) / sizeof((func_groups_LAD0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LAD0)), typeof(&(func_groups_LAD0)[0])))); }))), },
 { .name = "LAD1", .groups = &func_groups_LAD1[0], .ngroups = (sizeof(func_groups_LAD1) / sizeof((func_groups_LAD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LAD1)), typeof(&(func_groups_LAD1)[0])))); }))), },
 { .name = "LAD2", .groups = &func_groups_LAD2[0], .ngroups = (sizeof(func_groups_LAD2) / sizeof((func_groups_LAD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LAD2)), typeof(&(func_groups_LAD2)[0])))); }))), },
 { .name = "LAD3", .groups = &func_groups_LAD3[0], .ngroups = (sizeof(func_groups_LAD3) / sizeof((func_groups_LAD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LAD3)), typeof(&(func_groups_LAD3)[0])))); }))), },
 { .name = "LCLK", .groups = &func_groups_LCLK[0], .ngroups = (sizeof(func_groups_LCLK) / sizeof((func_groups_LCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LCLK)), typeof(&(func_groups_LCLK)[0])))); }))), },
 { .name = "LFRAME", .groups = &func_groups_LFRAME[0], .ngroups = (sizeof(func_groups_LFRAME) / sizeof((func_groups_LFRAME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LFRAME)), typeof(&(func_groups_LFRAME)[0])))); }))), },
 { .name = "LPCHC", .groups = &func_groups_LPCHC[0], .ngroups = (sizeof(func_groups_LPCHC) / sizeof((func_groups_LPCHC)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LPCHC)), typeof(&(func_groups_LPCHC)[0])))); }))), },
 { .name = "LPCPD", .groups = &func_groups_LPCPD[0], .ngroups = (sizeof(func_groups_LPCPD) / sizeof((func_groups_LPCPD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LPCPD)), typeof(&(func_groups_LPCPD)[0])))); }))), },
 { .name = "LPCPLUS", .groups = &func_groups_LPCPLUS[0], .ngroups = (sizeof(func_groups_LPCPLUS) / sizeof((func_groups_LPCPLUS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LPCPLUS)), typeof(&(func_groups_LPCPLUS)[0])))); }))), },
 { .name = "LPCPME", .groups = &func_groups_LPCPME[0], .ngroups = (sizeof(func_groups_LPCPME) / sizeof((func_groups_LPCPME)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LPCPME)), typeof(&(func_groups_LPCPME)[0])))); }))), },
 { .name = "LPCRST", .groups = &func_groups_LPCRST[0], .ngroups = (sizeof(func_groups_LPCRST) / sizeof((func_groups_LPCRST)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LPCRST)), typeof(&(func_groups_LPCRST)[0])))); }))), },
 { .name = "LPCSMI", .groups = &func_groups_LPCSMI[0], .ngroups = (sizeof(func_groups_LPCSMI) / sizeof((func_groups_LPCSMI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LPCSMI)), typeof(&(func_groups_LPCSMI)[0])))); }))), },
 { .name = "LSIRQ", .groups = &func_groups_LSIRQ[0], .ngroups = (sizeof(func_groups_LSIRQ) / sizeof((func_groups_LSIRQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_LSIRQ)), typeof(&(func_groups_LSIRQ)[0])))); }))), },
 { .name = "MAC1LINK", .groups = &func_groups_MAC1LINK[0], .ngroups = (sizeof(func_groups_MAC1LINK) / sizeof((func_groups_MAC1LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_MAC1LINK)), typeof(&(func_groups_MAC1LINK)[0])))); }))), },
 { .name = "MAC2LINK", .groups = &func_groups_MAC2LINK[0], .ngroups = (sizeof(func_groups_MAC2LINK) / sizeof((func_groups_MAC2LINK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_MAC2LINK)), typeof(&(func_groups_MAC2LINK)[0])))); }))), },
 { .name = "MDIO1", .groups = &func_groups_MDIO1[0], .ngroups = (sizeof(func_groups_MDIO1) / sizeof((func_groups_MDIO1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_MDIO1)), typeof(&(func_groups_MDIO1)[0])))); }))), },
 { .name = "MDIO2", .groups = &func_groups_MDIO2[0], .ngroups = (sizeof(func_groups_MDIO2) / sizeof((func_groups_MDIO2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_MDIO2)), typeof(&(func_groups_MDIO2)[0])))); }))), },
 { .name = "NCTS1", .groups = &func_groups_NCTS1[0], .ngroups = (sizeof(func_groups_NCTS1) / sizeof((func_groups_NCTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NCTS1)), typeof(&(func_groups_NCTS1)[0])))); }))), },
 { .name = "NCTS2", .groups = &func_groups_NCTS2[0], .ngroups = (sizeof(func_groups_NCTS2) / sizeof((func_groups_NCTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NCTS2)), typeof(&(func_groups_NCTS2)[0])))); }))), },
 { .name = "NCTS3", .groups = &func_groups_NCTS3[0], .ngroups = (sizeof(func_groups_NCTS3) / sizeof((func_groups_NCTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NCTS3)), typeof(&(func_groups_NCTS3)[0])))); }))), },
 { .name = "NCTS4", .groups = &func_groups_NCTS4[0], .ngroups = (sizeof(func_groups_NCTS4) / sizeof((func_groups_NCTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NCTS4)), typeof(&(func_groups_NCTS4)[0])))); }))), },
 { .name = "NDCD1", .groups = &func_groups_NDCD1[0], .ngroups = (sizeof(func_groups_NDCD1) / sizeof((func_groups_NDCD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDCD1)), typeof(&(func_groups_NDCD1)[0])))); }))), },
 { .name = "NDCD2", .groups = &func_groups_NDCD2[0], .ngroups = (sizeof(func_groups_NDCD2) / sizeof((func_groups_NDCD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDCD2)), typeof(&(func_groups_NDCD2)[0])))); }))), },
 { .name = "NDCD3", .groups = &func_groups_NDCD3[0], .ngroups = (sizeof(func_groups_NDCD3) / sizeof((func_groups_NDCD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDCD3)), typeof(&(func_groups_NDCD3)[0])))); }))), },
 { .name = "NDCD4", .groups = &func_groups_NDCD4[0], .ngroups = (sizeof(func_groups_NDCD4) / sizeof((func_groups_NDCD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDCD4)), typeof(&(func_groups_NDCD4)[0])))); }))), },
 { .name = "NDSR1", .groups = &func_groups_NDSR1[0], .ngroups = (sizeof(func_groups_NDSR1) / sizeof((func_groups_NDSR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDSR1)), typeof(&(func_groups_NDSR1)[0])))); }))), },
 { .name = "NDSR2", .groups = &func_groups_NDSR2[0], .ngroups = (sizeof(func_groups_NDSR2) / sizeof((func_groups_NDSR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDSR2)), typeof(&(func_groups_NDSR2)[0])))); }))), },
 { .name = "NDSR3", .groups = &func_groups_NDSR3[0], .ngroups = (sizeof(func_groups_NDSR3) / sizeof((func_groups_NDSR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDSR3)), typeof(&(func_groups_NDSR3)[0])))); }))), },
 { .name = "NDSR4", .groups = &func_groups_NDSR4[0], .ngroups = (sizeof(func_groups_NDSR4) / sizeof((func_groups_NDSR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDSR4)), typeof(&(func_groups_NDSR4)[0])))); }))), },
 { .name = "NDTR1", .groups = &func_groups_NDTR1[0], .ngroups = (sizeof(func_groups_NDTR1) / sizeof((func_groups_NDTR1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDTR1)), typeof(&(func_groups_NDTR1)[0])))); }))), },
 { .name = "NDTR2", .groups = &func_groups_NDTR2[0], .ngroups = (sizeof(func_groups_NDTR2) / sizeof((func_groups_NDTR2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDTR2)), typeof(&(func_groups_NDTR2)[0])))); }))), },
 { .name = "NDTR3", .groups = &func_groups_NDTR3[0], .ngroups = (sizeof(func_groups_NDTR3) / sizeof((func_groups_NDTR3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDTR3)), typeof(&(func_groups_NDTR3)[0])))); }))), },
 { .name = "NDTR4", .groups = &func_groups_NDTR4[0], .ngroups = (sizeof(func_groups_NDTR4) / sizeof((func_groups_NDTR4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NDTR4)), typeof(&(func_groups_NDTR4)[0])))); }))), },
 { .name = "NRI1", .groups = &func_groups_NRI1[0], .ngroups = (sizeof(func_groups_NRI1) / sizeof((func_groups_NRI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRI1)), typeof(&(func_groups_NRI1)[0])))); }))), },
 { .name = "NRI2", .groups = &func_groups_NRI2[0], .ngroups = (sizeof(func_groups_NRI2) / sizeof((func_groups_NRI2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRI2)), typeof(&(func_groups_NRI2)[0])))); }))), },
 { .name = "NRI3", .groups = &func_groups_NRI3[0], .ngroups = (sizeof(func_groups_NRI3) / sizeof((func_groups_NRI3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRI3)), typeof(&(func_groups_NRI3)[0])))); }))), },
 { .name = "NRI4", .groups = &func_groups_NRI4[0], .ngroups = (sizeof(func_groups_NRI4) / sizeof((func_groups_NRI4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRI4)), typeof(&(func_groups_NRI4)[0])))); }))), },
 { .name = "NRTS1", .groups = &func_groups_NRTS1[0], .ngroups = (sizeof(func_groups_NRTS1) / sizeof((func_groups_NRTS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRTS1)), typeof(&(func_groups_NRTS1)[0])))); }))), },
 { .name = "NRTS2", .groups = &func_groups_NRTS2[0], .ngroups = (sizeof(func_groups_NRTS2) / sizeof((func_groups_NRTS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRTS2)), typeof(&(func_groups_NRTS2)[0])))); }))), },
 { .name = "NRTS3", .groups = &func_groups_NRTS3[0], .ngroups = (sizeof(func_groups_NRTS3) / sizeof((func_groups_NRTS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRTS3)), typeof(&(func_groups_NRTS3)[0])))); }))), },
 { .name = "NRTS4", .groups = &func_groups_NRTS4[0], .ngroups = (sizeof(func_groups_NRTS4) / sizeof((func_groups_NRTS4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_NRTS4)), typeof(&(func_groups_NRTS4)[0])))); }))), },
 { .name = "OSCCLK", .groups = &func_groups_OSCCLK[0], .ngroups = (sizeof(func_groups_OSCCLK) / sizeof((func_groups_OSCCLK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_OSCCLK)), typeof(&(func_groups_OSCCLK)[0])))); }))), },
 { .name = "PEWAKE", .groups = &func_groups_PEWAKE[0], .ngroups = (sizeof(func_groups_PEWAKE) / sizeof((func_groups_PEWAKE)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PEWAKE)), typeof(&(func_groups_PEWAKE)[0])))); }))), },
 { .name = "PNOR", .groups = &func_groups_PNOR[0], .ngroups = (sizeof(func_groups_PNOR) / sizeof((func_groups_PNOR)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PNOR)), typeof(&(func_groups_PNOR)[0])))); }))), },
 { .name = "PWM0", .groups = &func_groups_PWM0[0], .ngroups = (sizeof(func_groups_PWM0) / sizeof((func_groups_PWM0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM0)), typeof(&(func_groups_PWM0)[0])))); }))), },
 { .name = "PWM1", .groups = &func_groups_PWM1[0], .ngroups = (sizeof(func_groups_PWM1) / sizeof((func_groups_PWM1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM1)), typeof(&(func_groups_PWM1)[0])))); }))), },
 { .name = "PWM2", .groups = &func_groups_PWM2[0], .ngroups = (sizeof(func_groups_PWM2) / sizeof((func_groups_PWM2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM2)), typeof(&(func_groups_PWM2)[0])))); }))), },
 { .name = "PWM3", .groups = &func_groups_PWM3[0], .ngroups = (sizeof(func_groups_PWM3) / sizeof((func_groups_PWM3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM3)), typeof(&(func_groups_PWM3)[0])))); }))), },
 { .name = "PWM4", .groups = &func_groups_PWM4[0], .ngroups = (sizeof(func_groups_PWM4) / sizeof((func_groups_PWM4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM4)), typeof(&(func_groups_PWM4)[0])))); }))), },
 { .name = "PWM5", .groups = &func_groups_PWM5[0], .ngroups = (sizeof(func_groups_PWM5) / sizeof((func_groups_PWM5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM5)), typeof(&(func_groups_PWM5)[0])))); }))), },
 { .name = "PWM6", .groups = &func_groups_PWM6[0], .ngroups = (sizeof(func_groups_PWM6) / sizeof((func_groups_PWM6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM6)), typeof(&(func_groups_PWM6)[0])))); }))), },
 { .name = "PWM7", .groups = &func_groups_PWM7[0], .ngroups = (sizeof(func_groups_PWM7) / sizeof((func_groups_PWM7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_PWM7)), typeof(&(func_groups_PWM7)[0])))); }))), },
 { .name = "RGMII1", .groups = &func_groups_RGMII1[0], .ngroups = (sizeof(func_groups_RGMII1) / sizeof((func_groups_RGMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RGMII1)), typeof(&(func_groups_RGMII1)[0])))); }))), },
 { .name = "RGMII2", .groups = &func_groups_RGMII2[0], .ngroups = (sizeof(func_groups_RGMII2) / sizeof((func_groups_RGMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RGMII2)), typeof(&(func_groups_RGMII2)[0])))); }))), },
 { .name = "RMII1", .groups = &func_groups_RMII1[0], .ngroups = (sizeof(func_groups_RMII1) / sizeof((func_groups_RMII1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RMII1)), typeof(&(func_groups_RMII1)[0])))); }))), },
 { .name = "RMII2", .groups = &func_groups_RMII2[0], .ngroups = (sizeof(func_groups_RMII2) / sizeof((func_groups_RMII2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RMII2)), typeof(&(func_groups_RMII2)[0])))); }))), },
 { .name = "RXD1", .groups = &func_groups_RXD1[0], .ngroups = (sizeof(func_groups_RXD1) / sizeof((func_groups_RXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RXD1)), typeof(&(func_groups_RXD1)[0])))); }))), },
 { .name = "RXD2", .groups = &func_groups_RXD2[0], .ngroups = (sizeof(func_groups_RXD2) / sizeof((func_groups_RXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RXD2)), typeof(&(func_groups_RXD2)[0])))); }))), },
 { .name = "RXD3", .groups = &func_groups_RXD3[0], .ngroups = (sizeof(func_groups_RXD3) / sizeof((func_groups_RXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RXD3)), typeof(&(func_groups_RXD3)[0])))); }))), },
 { .name = "RXD4", .groups = &func_groups_RXD4[0], .ngroups = (sizeof(func_groups_RXD4) / sizeof((func_groups_RXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_RXD4)), typeof(&(func_groups_RXD4)[0])))); }))), },
 { .name = "SALT1", .groups = &func_groups_SALT1[0], .ngroups = (sizeof(func_groups_SALT1) / sizeof((func_groups_SALT1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT1)), typeof(&(func_groups_SALT1)[0])))); }))), },
 { .name = "SALT10", .groups = &func_groups_SALT10[0], .ngroups = (sizeof(func_groups_SALT10) / sizeof((func_groups_SALT10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT10)), typeof(&(func_groups_SALT10)[0])))); }))), },
 { .name = "SALT11", .groups = &func_groups_SALT11[0], .ngroups = (sizeof(func_groups_SALT11) / sizeof((func_groups_SALT11)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT11)), typeof(&(func_groups_SALT11)[0])))); }))), },
 { .name = "SALT12", .groups = &func_groups_SALT12[0], .ngroups = (sizeof(func_groups_SALT12) / sizeof((func_groups_SALT12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT12)), typeof(&(func_groups_SALT12)[0])))); }))), },
 { .name = "SALT13", .groups = &func_groups_SALT13[0], .ngroups = (sizeof(func_groups_SALT13) / sizeof((func_groups_SALT13)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT13)), typeof(&(func_groups_SALT13)[0])))); }))), },
 { .name = "SALT14", .groups = &func_groups_SALT14[0], .ngroups = (sizeof(func_groups_SALT14) / sizeof((func_groups_SALT14)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT14)), typeof(&(func_groups_SALT14)[0])))); }))), },
 { .name = "SALT2", .groups = &func_groups_SALT2[0], .ngroups = (sizeof(func_groups_SALT2) / sizeof((func_groups_SALT2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT2)), typeof(&(func_groups_SALT2)[0])))); }))), },
 { .name = "SALT3", .groups = &func_groups_SALT3[0], .ngroups = (sizeof(func_groups_SALT3) / sizeof((func_groups_SALT3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT3)), typeof(&(func_groups_SALT3)[0])))); }))), },
 { .name = "SALT4", .groups = &func_groups_SALT4[0], .ngroups = (sizeof(func_groups_SALT4) / sizeof((func_groups_SALT4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT4)), typeof(&(func_groups_SALT4)[0])))); }))), },
 { .name = "SALT5", .groups = &func_groups_SALT5[0], .ngroups = (sizeof(func_groups_SALT5) / sizeof((func_groups_SALT5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT5)), typeof(&(func_groups_SALT5)[0])))); }))), },
 { .name = "SALT6", .groups = &func_groups_SALT6[0], .ngroups = (sizeof(func_groups_SALT6) / sizeof((func_groups_SALT6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT6)), typeof(&(func_groups_SALT6)[0])))); }))), },
 { .name = "SALT7", .groups = &func_groups_SALT7[0], .ngroups = (sizeof(func_groups_SALT7) / sizeof((func_groups_SALT7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT7)), typeof(&(func_groups_SALT7)[0])))); }))), },
 { .name = "SALT8", .groups = &func_groups_SALT8[0], .ngroups = (sizeof(func_groups_SALT8) / sizeof((func_groups_SALT8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT8)), typeof(&(func_groups_SALT8)[0])))); }))), },
 { .name = "SALT9", .groups = &func_groups_SALT9[0], .ngroups = (sizeof(func_groups_SALT9) / sizeof((func_groups_SALT9)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SALT9)), typeof(&(func_groups_SALT9)[0])))); }))), },
 { .name = "SCL1", .groups = &func_groups_SCL1[0], .ngroups = (sizeof(func_groups_SCL1) / sizeof((func_groups_SCL1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SCL1)), typeof(&(func_groups_SCL1)[0])))); }))), },
 { .name = "SCL2", .groups = &func_groups_SCL2[0], .ngroups = (sizeof(func_groups_SCL2) / sizeof((func_groups_SCL2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SCL2)), typeof(&(func_groups_SCL2)[0])))); }))), },
 { .name = "SD1", .groups = &func_groups_SD1[0], .ngroups = (sizeof(func_groups_SD1) / sizeof((func_groups_SD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SD1)), typeof(&(func_groups_SD1)[0])))); }))), },
 { .name = "SD2", .groups = &func_groups_SD2[0], .ngroups = (sizeof(func_groups_SD2) / sizeof((func_groups_SD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SD2)), typeof(&(func_groups_SD2)[0])))); }))), },
 { .name = "SDA1", .groups = &func_groups_SDA1[0], .ngroups = (sizeof(func_groups_SDA1) / sizeof((func_groups_SDA1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SDA1)), typeof(&(func_groups_SDA1)[0])))); }))), },
 { .name = "SDA2", .groups = &func_groups_SDA2[0], .ngroups = (sizeof(func_groups_SDA2) / sizeof((func_groups_SDA2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SDA2)), typeof(&(func_groups_SDA2)[0])))); }))), },
 { .name = "SGPM", .groups = &func_groups_SGPM[0], .ngroups = (sizeof(func_groups_SGPM) / sizeof((func_groups_SGPM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SGPM)), typeof(&(func_groups_SGPM)[0])))); }))), },
 { .name = "SGPS1", .groups = &func_groups_SGPS1[0], .ngroups = (sizeof(func_groups_SGPS1) / sizeof((func_groups_SGPS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SGPS1)), typeof(&(func_groups_SGPS1)[0])))); }))), },
 { .name = "SGPS2", .groups = &func_groups_SGPS2[0], .ngroups = (sizeof(func_groups_SGPS2) / sizeof((func_groups_SGPS2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SGPS2)), typeof(&(func_groups_SGPS2)[0])))); }))), },
 { .name = "SIOONCTRL", .groups = &func_groups_SIOONCTRL[0], .ngroups = (sizeof(func_groups_SIOONCTRL) / sizeof((func_groups_SIOONCTRL)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOONCTRL)), typeof(&(func_groups_SIOONCTRL)[0])))); }))), },
 { .name = "SIOPBI", .groups = &func_groups_SIOPBI[0], .ngroups = (sizeof(func_groups_SIOPBI) / sizeof((func_groups_SIOPBI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOPBI)), typeof(&(func_groups_SIOPBI)[0])))); }))), },
 { .name = "SIOPBO", .groups = &func_groups_SIOPBO[0], .ngroups = (sizeof(func_groups_SIOPBO) / sizeof((func_groups_SIOPBO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOPBO)), typeof(&(func_groups_SIOPBO)[0])))); }))), },
 { .name = "SIOPWREQ", .groups = &func_groups_SIOPWREQ[0], .ngroups = (sizeof(func_groups_SIOPWREQ) / sizeof((func_groups_SIOPWREQ)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOPWREQ)), typeof(&(func_groups_SIOPWREQ)[0])))); }))), },
 { .name = "SIOPWRGD", .groups = &func_groups_SIOPWRGD[0], .ngroups = (sizeof(func_groups_SIOPWRGD) / sizeof((func_groups_SIOPWRGD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOPWRGD)), typeof(&(func_groups_SIOPWRGD)[0])))); }))), },
 { .name = "SIOS3", .groups = &func_groups_SIOS3[0], .ngroups = (sizeof(func_groups_SIOS3) / sizeof((func_groups_SIOS3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOS3)), typeof(&(func_groups_SIOS3)[0])))); }))), },
 { .name = "SIOS5", .groups = &func_groups_SIOS5[0], .ngroups = (sizeof(func_groups_SIOS5) / sizeof((func_groups_SIOS5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOS5)), typeof(&(func_groups_SIOS5)[0])))); }))), },
 { .name = "SIOSCI", .groups = &func_groups_SIOSCI[0], .ngroups = (sizeof(func_groups_SIOSCI) / sizeof((func_groups_SIOSCI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SIOSCI)), typeof(&(func_groups_SIOSCI)[0])))); }))), },
 { .name = "SPI1", .groups = &func_groups_SPI1[0], .ngroups = (sizeof(func_groups_SPI1) / sizeof((func_groups_SPI1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI1)), typeof(&(func_groups_SPI1)[0])))); }))), },
 { .name = "SPI1CS1", .groups = &func_groups_SPI1CS1[0], .ngroups = (sizeof(func_groups_SPI1CS1) / sizeof((func_groups_SPI1CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI1CS1)), typeof(&(func_groups_SPI1CS1)[0])))); }))), },
 { .name = "SPI1DEBUG", .groups = &func_groups_SPI1DEBUG[0], .ngroups = (sizeof(func_groups_SPI1DEBUG) / sizeof((func_groups_SPI1DEBUG)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI1DEBUG)), typeof(&(func_groups_SPI1DEBUG)[0])))); }))), },
 { .name = "SPI1PASSTHRU", .groups = &func_groups_SPI1PASSTHRU[0], .ngroups = (sizeof(func_groups_SPI1PASSTHRU) / sizeof((func_groups_SPI1PASSTHRU)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI1PASSTHRU)), typeof(&(func_groups_SPI1PASSTHRU)[0])))); }))), },
 { .name = "SPI2CK", .groups = &func_groups_SPI2CK[0], .ngroups = (sizeof(func_groups_SPI2CK) / sizeof((func_groups_SPI2CK)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI2CK)), typeof(&(func_groups_SPI2CK)[0])))); }))), },
 { .name = "SPI2CS0", .groups = &func_groups_SPI2CS0[0], .ngroups = (sizeof(func_groups_SPI2CS0) / sizeof((func_groups_SPI2CS0)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI2CS0)), typeof(&(func_groups_SPI2CS0)[0])))); }))), },
 { .name = "SPI2CS1", .groups = &func_groups_SPI2CS1[0], .ngroups = (sizeof(func_groups_SPI2CS1) / sizeof((func_groups_SPI2CS1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI2CS1)), typeof(&(func_groups_SPI2CS1)[0])))); }))), },
 { .name = "SPI2MISO", .groups = &func_groups_SPI2MISO[0], .ngroups = (sizeof(func_groups_SPI2MISO) / sizeof((func_groups_SPI2MISO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI2MISO)), typeof(&(func_groups_SPI2MISO)[0])))); }))), },
 { .name = "SPI2MOSI", .groups = &func_groups_SPI2MOSI[0], .ngroups = (sizeof(func_groups_SPI2MOSI) / sizeof((func_groups_SPI2MOSI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_SPI2MOSI)), typeof(&(func_groups_SPI2MOSI)[0])))); }))), },
 { .name = "TIMER3", .groups = &func_groups_TIMER3[0], .ngroups = (sizeof(func_groups_TIMER3) / sizeof((func_groups_TIMER3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TIMER3)), typeof(&(func_groups_TIMER3)[0])))); }))), },
 { .name = "TIMER4", .groups = &func_groups_TIMER4[0], .ngroups = (sizeof(func_groups_TIMER4) / sizeof((func_groups_TIMER4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TIMER4)), typeof(&(func_groups_TIMER4)[0])))); }))), },
 { .name = "TIMER5", .groups = &func_groups_TIMER5[0], .ngroups = (sizeof(func_groups_TIMER5) / sizeof((func_groups_TIMER5)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TIMER5)), typeof(&(func_groups_TIMER5)[0])))); }))), },
 { .name = "TIMER6", .groups = &func_groups_TIMER6[0], .ngroups = (sizeof(func_groups_TIMER6) / sizeof((func_groups_TIMER6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TIMER6)), typeof(&(func_groups_TIMER6)[0])))); }))), },
 { .name = "TIMER7", .groups = &func_groups_TIMER7[0], .ngroups = (sizeof(func_groups_TIMER7) / sizeof((func_groups_TIMER7)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TIMER7)), typeof(&(func_groups_TIMER7)[0])))); }))), },
 { .name = "TIMER8", .groups = &func_groups_TIMER8[0], .ngroups = (sizeof(func_groups_TIMER8) / sizeof((func_groups_TIMER8)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TIMER8)), typeof(&(func_groups_TIMER8)[0])))); }))), },
 { .name = "TXD1", .groups = &func_groups_TXD1[0], .ngroups = (sizeof(func_groups_TXD1) / sizeof((func_groups_TXD1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TXD1)), typeof(&(func_groups_TXD1)[0])))); }))), },
 { .name = "TXD2", .groups = &func_groups_TXD2[0], .ngroups = (sizeof(func_groups_TXD2) / sizeof((func_groups_TXD2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TXD2)), typeof(&(func_groups_TXD2)[0])))); }))), },
 { .name = "TXD3", .groups = &func_groups_TXD3[0], .ngroups = (sizeof(func_groups_TXD3) / sizeof((func_groups_TXD3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TXD3)), typeof(&(func_groups_TXD3)[0])))); }))), },
 { .name = "TXD4", .groups = &func_groups_TXD4[0], .ngroups = (sizeof(func_groups_TXD4) / sizeof((func_groups_TXD4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_TXD4)), typeof(&(func_groups_TXD4)[0])))); }))), },
 { .name = "UART6", .groups = &func_groups_UART6[0], .ngroups = (sizeof(func_groups_UART6) / sizeof((func_groups_UART6)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_UART6)), typeof(&(func_groups_UART6)[0])))); }))), },
 { .name = "USB11BHID", .groups = &func_groups_USB11BHID[0], .ngroups = (sizeof(func_groups_USB11BHID) / sizeof((func_groups_USB11BHID)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_USB11BHID)), typeof(&(func_groups_USB11BHID)[0])))); }))), },
 { .name = "USB2AD", .groups = &func_groups_USB2AD[0], .ngroups = (sizeof(func_groups_USB2AD) / sizeof((func_groups_USB2AD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_USB2AD)), typeof(&(func_groups_USB2AD)[0])))); }))), },
 { .name = "USB2AH", .groups = &func_groups_USB2AH[0], .ngroups = (sizeof(func_groups_USB2AH) / sizeof((func_groups_USB2AH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_USB2AH)), typeof(&(func_groups_USB2AH)[0])))); }))), },
 { .name = "USB2BD", .groups = &func_groups_USB2BD[0], .ngroups = (sizeof(func_groups_USB2BD) / sizeof((func_groups_USB2BD)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_USB2BD)), typeof(&(func_groups_USB2BD)[0])))); }))), },
 { .name = "USB2BH", .groups = &func_groups_USB2BH[0], .ngroups = (sizeof(func_groups_USB2BH) / sizeof((func_groups_USB2BH)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_USB2BH)), typeof(&(func_groups_USB2BH)[0])))); }))), },
 { .name = "USBCKI", .groups = &func_groups_USBCKI[0], .ngroups = (sizeof(func_groups_USBCKI) / sizeof((func_groups_USBCKI)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_USBCKI)), typeof(&(func_groups_USBCKI)[0])))); }))), },
 { .name = "VGABIOSROM", .groups = &func_groups_VGABIOSROM[0], .ngroups = (sizeof(func_groups_VGABIOSROM) / sizeof((func_groups_VGABIOSROM)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_VGABIOSROM)), typeof(&(func_groups_VGABIOSROM)[0])))); }))), },
 { .name = "VGAHS", .groups = &func_groups_VGAHS[0], .ngroups = (sizeof(func_groups_VGAHS) / sizeof((func_groups_VGAHS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_VGAHS)), typeof(&(func_groups_VGAHS)[0])))); }))), },
 { .name = "VGAVS", .groups = &func_groups_VGAVS[0], .ngroups = (sizeof(func_groups_VGAVS) / sizeof((func_groups_VGAVS)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_VGAVS)), typeof(&(func_groups_VGAVS)[0])))); }))), },
 { .name = "VPI24", .groups = &func_groups_VPI24[0], .ngroups = (sizeof(func_groups_VPI24) / sizeof((func_groups_VPI24)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_VPI24)), typeof(&(func_groups_VPI24)[0])))); }))), },
 { .name = "VPO", .groups = &func_groups_VPO[0], .ngroups = (sizeof(func_groups_VPO) / sizeof((func_groups_VPO)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_VPO)), typeof(&(func_groups_VPO)[0])))); }))), },
 { .name = "WDTRST1", .groups = &func_groups_WDTRST1[0], .ngroups = (sizeof(func_groups_WDTRST1) / sizeof((func_groups_WDTRST1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_WDTRST1)), typeof(&(func_groups_WDTRST1)[0])))); }))), },
 { .name = "WDTRST2", .groups = &func_groups_WDTRST2[0], .ngroups = (sizeof(func_groups_WDTRST2) / sizeof((func_groups_WDTRST2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((func_groups_WDTRST2)), typeof(&(func_groups_WDTRST2)[0])))); }))), },
};

static struct aspeed_pin_config aspeed_g5_configs[] = {

 { PIN_CONFIG_BIAS_PULL_DOWN, { 0, 7 }, 0x8C, 16 },
 { PIN_CONFIG_BIAS_DISABLE, { 0, 7 }, 0x8C, 16 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 128, 135 }, 0x8C, 16 },
 { PIN_CONFIG_BIAS_DISABLE, { 128, 135 }, 0x8C, 16 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 8, 15 }, 0x8C, 17 },
 { PIN_CONFIG_BIAS_DISABLE, { 8, 15 }, 0x8C, 17 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 136, 143 }, 0x8C, 17 },
 { PIN_CONFIG_BIAS_DISABLE, { 136, 143 }, 0x8C, 17 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 16, 23 }, 0x8C, 18 },
 { PIN_CONFIG_BIAS_DISABLE, { 16, 23 }, 0x8C, 18 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 144, 151 }, 0x8C, 18 },
 { PIN_CONFIG_BIAS_DISABLE, { 144, 151 }, 0x8C, 18 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 24, 31 }, 0x8C, 19 },
 { PIN_CONFIG_BIAS_DISABLE, { 24, 31 }, 0x8C, 19 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 192, 199 }, 0x8C, 19 },
 { PIN_CONFIG_BIAS_DISABLE, { 192, 199 }, 0x8C, 19 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 32, 39 }, 0x8C, 20 },
 { PIN_CONFIG_BIAS_DISABLE, { 32, 39 }, 0x8C, 20 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 200, 207 }, 0x8C, 20 },
 { PIN_CONFIG_BIAS_DISABLE, { 200, 207 }, 0x8C, 20 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 40, 47 }, 0x8C, 21 },
 { PIN_CONFIG_BIAS_DISABLE, { 40, 47 }, 0x8C, 21 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 208, 215 }, 0x8C, 21 },
 { PIN_CONFIG_BIAS_DISABLE, { 208, 215 }, 0x8C, 21 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 48, 55 }, 0x8C, 22 },
 { PIN_CONFIG_BIAS_DISABLE, { 48, 55 }, 0x8C, 22 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 216, 219 }, 0x8C, 22 },
 { PIN_CONFIG_BIAS_DISABLE, { 216, 219 }, 0x8C, 22 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 56, 63 }, 0x8C, 23 },
 { PIN_CONFIG_BIAS_DISABLE, { 56, 63 }, 0x8C, 23 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 224, 231 }, 0x8C, 23 },
 { PIN_CONFIG_BIAS_DISABLE, { 224, 231 }, 0x8C, 23 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 64, 71 }, 0x8C, 24 },
 { PIN_CONFIG_BIAS_DISABLE, { 64, 71 }, 0x8C, 24 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 72, 79 }, 0x8C, 25 },
 { PIN_CONFIG_BIAS_DISABLE, { 72, 79 }, 0x8C, 25 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 80, 87 }, 0x8C, 26 },
 { PIN_CONFIG_BIAS_DISABLE, { 80, 87 }, 0x8C, 26 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 88, 95 }, 0x8C, 27 },
 { PIN_CONFIG_BIAS_DISABLE, { 88, 95 }, 0x8C, 27 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 96, 103 }, 0x8C, 28 },
 { PIN_CONFIG_BIAS_DISABLE, { 96, 103 }, 0x8C, 28 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 104, 111 }, 0x8C, 29 },
 { PIN_CONFIG_BIAS_DISABLE, { 104, 111 }, 0x8C, 29 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 112, 119 }, 0x8C, 30 },
 { PIN_CONFIG_BIAS_DISABLE, { 112, 119 }, 0x8C, 30 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 120, 127 }, 0x8C, 31 },
 { PIN_CONFIG_BIAS_DISABLE, { 120, 127 }, 0x8C, 31 },


 { PIN_CONFIG_DRIVE_STRENGTH, { 152, 152 }, 0x90, 8 },
 { PIN_CONFIG_DRIVE_STRENGTH, { 153, 155 }, 0x90, 9 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 152, 157 }, 0x90, 12 },
 { PIN_CONFIG_BIAS_DISABLE, { 152, 157 }, 0x90, 12 },


 { PIN_CONFIG_DRIVE_STRENGTH, { 158, 158 }, 0x90, 10 },
 { PIN_CONFIG_DRIVE_STRENGTH, { 159, 161 }, 0x90, 11 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 158, 163 }, 0x90, 14 },
 { PIN_CONFIG_BIAS_DISABLE, { 158, 163 }, 0x90, 14 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 164, 169 }, 0x90, 13 },
 { PIN_CONFIG_BIAS_DISABLE, { 164, 169 }, 0x90, 13 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 170, 175 }, 0x90, 15 },
 { PIN_CONFIG_BIAS_DISABLE, { 170, 175 }, 0x90, 15 },


 { PIN_CONFIG_BIAS_PULL_DOWN, { 176, 176 }, 0xA8, 4 },
 { PIN_CONFIG_BIAS_DISABLE, { 176, 176 }, 0xA8, 4 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 177, 177 }, 0xA8, 5 },
 { PIN_CONFIG_BIAS_DISABLE, { 177, 177 }, 0xA8, 5 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 178, 178 }, 0xA8, 6 },
 { PIN_CONFIG_BIAS_DISABLE, { 178, 178 }, 0xA8, 6 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 179, 179 }, 0xA8, 7 },
 { PIN_CONFIG_BIAS_DISABLE, { 179, 179 }, 0xA8, 7 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 180, 180 }, 0xA8, 8 },
 { PIN_CONFIG_BIAS_DISABLE, { 180, 180 }, 0xA8, 8 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 181, 181 }, 0xA8, 9 },
 { PIN_CONFIG_BIAS_DISABLE, { 181, 181 }, 0xA8, 9 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 182, 182 }, 0xA8, 10 },
 { PIN_CONFIG_BIAS_DISABLE, { 182, 182 }, 0xA8, 10 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 183, 183 }, 0xA8, 11 },
 { PIN_CONFIG_BIAS_DISABLE, { 183, 183 }, 0xA8, 11 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 184, 184 }, 0xA8, 12 },
 { PIN_CONFIG_BIAS_DISABLE, { 184, 184 }, 0xA8, 12 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 185, 185 }, 0xA8, 13 },
 { PIN_CONFIG_BIAS_DISABLE, { 185, 185 }, 0xA8, 13 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 186, 186 }, 0xA8, 14 },
 { PIN_CONFIG_BIAS_DISABLE, { 186, 186 }, 0xA8, 14 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 187, 187 }, 0xA8, 15 },
 { PIN_CONFIG_BIAS_DISABLE, { 187, 187 }, 0xA8, 15 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 188, 188 }, 0xA8, 16 },
 { PIN_CONFIG_BIAS_DISABLE, { 188, 188 }, 0xA8, 16 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 189, 189 }, 0xA8, 17 },
 { PIN_CONFIG_BIAS_DISABLE, { 189, 189 }, 0xA8, 17 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 190, 190 }, 0xA8, 18 },
 { PIN_CONFIG_BIAS_DISABLE, { 190, 190 }, 0xA8, 18 },
 { PIN_CONFIG_BIAS_PULL_DOWN, { 191, 191 }, 0xA8, 19 },
 { PIN_CONFIG_BIAS_DISABLE, { 191, 191 }, 0xA8, 19 },
# 2607 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
 { PIN_CONFIG_INPUT_DEBOUNCE, { 24, 25 }, 0xA8, 20 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 26, 27 }, 0xA8, 21 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 28, 29 }, 0xA8, 22 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 30, 31 }, 0xA8, 23 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 32, 33 }, 0xA8, 24 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 34, 35 }, 0xA8, 25 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 36, 37 }, 0xA8, 26 },
 { PIN_CONFIG_INPUT_DEBOUNCE, { 38, 39 }, 0xA8, 27 },
};
# 2630 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
static int aspeed_g5_sig_expr_set(const struct aspeed_pinmux_data *ctx,
      const struct aspeed_sig_expr *expr,
      _Bool enable)
{
 int ret;
 int i;

 for (i = 0; i < expr->ndescs; i++) {
  const struct aspeed_sig_desc *desc = &expr->descs[i];
  u32 pattern = enable ? desc->enable : desc->disable;
  u32 val = (pattern << __ffs(desc->mask));

  if (!ctx->maps[desc->ip])
   return -19;
# 2659 "../drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c"
  if (desc->ip == 0 && desc->reg == 0x70 &&
      !(desc->mask & (((((1UL))) << (21)) | ((((1UL))) << (22)))))
   continue;

  if (desc->ip == 0 && desc->reg == 0xD0)
   continue;


  if (desc->ip == 0 && desc->reg == 0x70) {
   u32 value = ~val & desc->mask;

   if (value) {
    ret = regmap_write(ctx->maps[desc->ip],
         0x7C, value);
    if (ret < 0)
     return ret;
   }
  }

  ret = regmap_update_bits_base(ctx->maps[desc->ip], desc->reg, desc->mask, val, ((void *)0), 0, 0);


  if (ret)
   return ret;
 }

 ret = aspeed_sig_expr_eval(ctx, expr, enable);
 if (ret < 0)
  return ret;

 if (!ret)
  return -1;

 return 0;
}

static const struct aspeed_pinmux_ops aspeed_g5_ops = {
 .set = aspeed_g5_sig_expr_set,
};

static struct aspeed_pinctrl_data aspeed_g5_pinctrl_data = {
 .pins = aspeed_g5_pins,
 .npins = (sizeof(aspeed_g5_pins) / sizeof((aspeed_g5_pins)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((aspeed_g5_pins)), typeof(&(aspeed_g5_pins)[0])))); }))),
 .pinmux = {
  .ops = &aspeed_g5_ops,
  .groups = aspeed_g5_groups,
  .ngroups = (sizeof(aspeed_g5_groups) / sizeof((aspeed_g5_groups)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((aspeed_g5_groups)), typeof(&(aspeed_g5_groups)[0])))); }))),
  .functions = aspeed_g5_functions,
  .nfunctions = (sizeof(aspeed_g5_functions) / sizeof((aspeed_g5_functions)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((aspeed_g5_functions)), typeof(&(aspeed_g5_functions)[0])))); }))),
 },
 .configs = aspeed_g5_configs,
 .nconfigs = (sizeof(aspeed_g5_configs) / sizeof((aspeed_g5_configs)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((aspeed_g5_configs)), typeof(&(aspeed_g5_configs)[0])))); }))),
};

static const struct pinmux_ops aspeed_g5_pinmux_ops = {
 .get_functions_count = aspeed_pinmux_get_fn_count,
 .get_function_name = aspeed_pinmux_get_fn_name,
 .get_function_groups = aspeed_pinmux_get_fn_groups,
 .set_mux = aspeed_pinmux_set_mux,
 .gpio_request_enable = aspeed_gpio_request_enable,
 .strict = 1,
};

static const struct pinctrl_ops aspeed_g5_pinctrl_ops = {
 .get_groups_count = aspeed_pinctrl_get_groups_count,
 .get_group_name = aspeed_pinctrl_get_group_name,
 .get_group_pins = aspeed_pinctrl_get_group_pins,
 .pin_dbg_show = aspeed_pinctrl_pin_dbg_show,
 .dt_node_to_map = pinconf_generic_dt_node_to_map_all,
 .dt_free_map = pinctrl_utils_free_map,
};

static const struct pinconf_ops aspeed_g5_conf_ops = {
 .is_generic = 1,
 .pin_config_get = aspeed_pin_config_get,
 .pin_config_set = aspeed_pin_config_set,
 .pin_config_group_get = aspeed_pin_config_group_get,
 .pin_config_group_set = aspeed_pin_config_group_set,
};

static struct pinctrl_desc aspeed_g5_pinctrl_desc = {
 .name = "aspeed-g5-pinctrl",
 .pins = aspeed_g5_pins,
 .npins = (sizeof(aspeed_g5_pins) / sizeof((aspeed_g5_pins)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((aspeed_g5_pins)), typeof(&(aspeed_g5_pins)[0])))); }))),
 .pctlops = &aspeed_g5_pinctrl_ops,
 .pmxops = &aspeed_g5_pinmux_ops,
 .confops = &aspeed_g5_conf_ops,
};

static int aspeed_g5_pinctrl_probe(struct platform_device *pdev)
{
 int i;
 struct regmap *map;
 struct device_node *node;

 for (i = 0; i < (sizeof(aspeed_g5_pins) / sizeof((aspeed_g5_pins)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((aspeed_g5_pins)), typeof(&(aspeed_g5_pins)[0])))); }))); i++)
  aspeed_g5_pins[i].number = i;

 node = of_parse_phandle(pdev->dev.of_node, "aspeed,external-nodes", 0);
 map = syscon_node_to_regmap(node);
 of_node_put(node);
 if (IS_ERR(map)) {
  _dev_warn(&pdev->dev, "No GFX phandle found, some mux configurations may fail\n");
  map = ((void *)0);
 }
 aspeed_g5_pinctrl_data.pinmux.maps[1] = map;

 node = of_parse_phandle(pdev->dev.of_node, "aspeed,external-nodes", 1);
 if (node) {
  map = syscon_node_to_regmap(node->parent);
  if (IS_ERR(map)) {
   _dev_warn(&pdev->dev, "LHC parent is not a syscon, some mux configurations may fail\n");
   map = ((void *)0);
  }
 } else {
  _dev_warn(&pdev->dev, "No LHC phandle found, some mux configurations may fail\n");
  map = ((void *)0);
 }
 of_node_put(node);
 aspeed_g5_pinctrl_data.pinmux.maps[2] = map;

 return aspeed_pinctrl_probe(pdev, &aspeed_g5_pinctrl_desc,
   &aspeed_g5_pinctrl_data);
}

static const struct of_device_id aspeed_g5_pinctrl_of_match[] = {
 { .compatible = "aspeed,ast2500-pinctrl", },
 { .compatible = "aspeed,g5-pinctrl", },
 { },
};

static struct platform_driver aspeed_g5_pinctrl_driver = {
 .probe = aspeed_g5_pinctrl_probe,
 .driver = {
  .name = "aspeed-g5-pinctrl",
  .of_match_table = aspeed_g5_pinctrl_of_match,
 },
};

static int aspeed_g5_pinctrl_init(void)
{
 return __platform_driver_register(&aspeed_g5_pinctrl_driver, ((struct module *)0));
}

static initcall_t __initcall_aspeed_g5_pinctrl_init3 __attribute__((__used__)) __attribute__((__section__(".initcall3" ".init"))) = aspeed_g5_pinctrl_init;;
