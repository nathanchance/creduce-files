# 1 "arch/mips/kvm/tlb.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 345 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "././include/linux/compiler-version.h" 1
# 2 "<built-in>" 2
# 1 "././include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "././include/linux/kconfig.h" 2
# 3 "<built-in>" 2
# 1 "././include/linux/compiler_types.h" 1
# 65 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler_attributes.h" 1
# 66 "././include/linux/compiler_types.h" 2
# 80 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler-clang.h" 1
# 81 "././include/linux/compiler_types.h" 2
# 99 "././include/linux/compiler_types.h"
# 1 "./arch/mips/include/asm/compiler.h" 1
# 100 "././include/linux/compiler_types.h" 2


struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 4 "<built-in>" 2
# 1 "arch/mips/kvm/tlb.c" 2
# 13 "arch/mips/kvm/tlb.c"
# 1 "./include/linux/sched.h" 1
# 10 "./include/linux/sched.h"
# 1 "./include/uapi/linux/sched.h" 1




# 1 "./include/linux/types.h" 1





# 1 "./include/uapi/linux/types.h" 1




# 1 "./arch/mips/include/asm/types.h" 1
# 14 "./arch/mips/include/asm/types.h"
# 1 "./include/asm-generic/int-ll64.h" 1
# 11 "./include/asm-generic/int-ll64.h"
# 1 "./include/uapi/asm-generic/int-ll64.h" 1
# 12 "./include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/mips/include/uapi/asm/bitsperlong.h" 1






# 1 "./include/asm-generic/bitsperlong.h" 1




# 1 "./include/uapi/asm-generic/bitsperlong.h" 1
# 6 "./include/asm-generic/bitsperlong.h" 2
# 8 "./arch/mips/include/uapi/asm/bitsperlong.h" 2
# 13 "./include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "./include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 15 "./arch/mips/include/asm/types.h" 2
# 6 "./include/uapi/linux/types.h" 2








# 1 "./include/uapi/linux/posix_types.h" 1




# 1 "./include/linux/stddef.h" 1




# 1 "./include/uapi/linux/stddef.h" 1
# 6 "./include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "./include/uapi/linux/posix_types.h" 2
# 25 "./include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "./arch/mips/include/uapi/asm/posix_types.h" 1
# 13 "./arch/mips/include/uapi/asm/posix_types.h"
# 1 "./arch/mips/include/uapi/asm/sgidefs.h" 1
# 14 "./arch/mips/include/uapi/asm/posix_types.h" 2







typedef long __kernel_daddr_t;


# 1 "./include/uapi/asm-generic/posix_types.h" 1
# 15 "./include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;







typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;



typedef __kernel_uid_t __kernel_old_uid_t;
typedef __kernel_gid_t __kernel_old_gid_t;



typedef unsigned int __kernel_old_dev_t;
# 72 "./include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;



typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 25 "./arch/mips/include/uapi/asm/posix_types.h" 2
# 37 "./include/uapi/linux/posix_types.h" 2
# 15 "./include/uapi/linux/types.h" 2
# 29 "./include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "./include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "./include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ulong_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;
# 46 "./include/linux/types.h"
typedef __kernel_loff_t loff_t;
# 55 "./include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 125 "./include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 143 "./include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;




typedef struct {
 s64 counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;



 unsigned long f_tinode;

 char f_fname[6];
 char f_fpack[6];
};
# 220 "./include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);

typedef void (*swap_func_t)(void *a, void *b, int size);

typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
typedef int (*cmp_func_t)(const void *a, const void *b);
# 6 "./include/uapi/linux/sched.h" 2
# 92 "./include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
 __u64 __attribute__((aligned(8))) set_tid;
 __u64 __attribute__((aligned(8))) set_tid_size;
 __u64 __attribute__((aligned(8))) cgroup;
};
# 11 "./include/linux/sched.h" 2

# 1 "./arch/mips/include/generated/asm/current.h" 1
# 1 "./include/asm-generic/current.h" 1




# 1 "./include/linux/thread_info.h" 1
# 12 "./include/linux/thread_info.h"
# 1 "./include/linux/limits.h" 1




# 1 "./include/uapi/linux/limits.h" 1
# 6 "./include/linux/limits.h" 2

# 1 "./include/vdso/limits.h" 1
# 8 "./include/linux/limits.h" 2
# 13 "./include/linux/thread_info.h" 2
# 1 "./include/linux/bug.h" 1




# 1 "./arch/mips/include/asm/bug.h" 1




# 1 "./include/linux/compiler.h" 1
# 250 "./include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 266 "./include/linux/compiler.h"
# 1 "./arch/mips/include/generated/asm/rwonce.h" 1
# 1 "./include/asm-generic/rwonce.h" 1
# 26 "./include/asm-generic/rwonce.h"
# 1 "./include/linux/kasan-checks.h" 1
# 22 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 40 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 27 "./include/asm-generic/rwonce.h" 2
# 1 "./include/linux/kcsan-checks.h" 1
# 151 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_check_access(const volatile void *ptr, size_t size,
     int type) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_disable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current_nowarn(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_atomic_next(int n) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_set_access_mask(unsigned long mask) { }

struct kcsan_scoped_access { };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kcsan_scoped_access *
kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
     struct kcsan_scoped_access *sa) { return sa; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
# 187 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_check_access(const volatile void *ptr, size_t size,
          int type) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_disable_current(void) { }
# 28 "./include/asm-generic/rwonce.h" 2
# 64 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __read_once_word_nocheck(const void *addr)
{
 return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
}
# 82 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 2 "./arch/mips/include/generated/asm/rwonce.h" 2
# 267 "./include/linux/compiler.h" 2
# 6 "./arch/mips/include/asm/bug.h" 2




# 1 "./arch/mips/include/asm/break.h" 1
# 15 "./arch/mips/include/asm/break.h"
# 1 "./arch/mips/include/uapi/asm/break.h" 1
# 16 "./arch/mips/include/asm/break.h" 2
# 11 "./arch/mips/include/asm/bug.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__noreturn__)) BUG(void)
{
 __asm__ __volatile__("break %0" : : "i" (12));
 do { ; __builtin_unreachable(); } while (0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __BUG_ON(unsigned long condition)
{
 if (__builtin_constant_p(condition)) {
  if (condition)
   BUG();
  else
   return;
 }
 __asm__ __volatile__("tne $0, %0, %1"
        : : "r" (condition), "i" (12));
}
# 42 "./arch/mips/include/asm/bug.h"
# 1 "./include/asm-generic/bug.h" 1





# 1 "./include/linux/instrumentation.h" 1
# 7 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/once_lite.h" 1
# 8 "./include/asm-generic/bug.h" 2
# 21 "./include/asm-generic/bug.h"
# 1 "./include/linux/panic.h" 1







struct pt_regs;

extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
extern bool oops_may_print(void);


extern unsigned int sysctl_oops_all_cpu_backtrace;




extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;

extern unsigned long panic_on_taint;
extern bool panic_on_taint_nousertaint;

extern int sysctl_panic_on_rcu_stall;
extern int sysctl_max_rcu_stall_to_panic;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
# 80 "./include/linux/panic.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE,
};

extern const char *print_tainted(void);
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
# 22 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/printk.h" 1




# 1 "./include/linux/stdarg.h" 1




typedef __builtin_va_list va_list;
# 6 "./include/linux/printk.h" 2
# 1 "./include/linux/init.h" 1
# 116 "./include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);
# 127 "./include/linux/init.h"
typedef initcall_t initcall_entry_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return *entry;
}


extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;
# 161 "./include/linux/init.h"
extern void (*late_time_init)(void);

extern bool initcall_debug;
# 303 "./include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 352 "./include/linux/init.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_param(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_options(char *cmdline);
# 7 "./include/linux/printk.h" 2
# 1 "./include/linux/kern_levels.h" 1
# 8 "./include/linux/printk.h" 2
# 1 "./include/linux/linkage.h" 1





# 1 "./include/linux/stringify.h" 1
# 7 "./include/linux/linkage.h" 2
# 1 "./include/linux/export.h" 1
# 72 "./include/linux/export.h"
struct kernel_symbol {
 unsigned long value;
 const char *name;
 const char *namespace;
};
# 8 "./include/linux/linkage.h" 2
# 1 "./arch/mips/include/asm/linkage.h" 1
# 9 "./include/linux/linkage.h" 2
# 9 "./include/linux/printk.h" 2
# 1 "./include/linux/cache.h" 1




# 1 "./include/uapi/linux/kernel.h" 1




# 1 "./include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "./include/uapi/linux/kernel.h" 2
# 1 "./include/linux/const.h" 1



# 1 "./include/vdso/const.h" 1




# 1 "./include/uapi/linux/const.h" 1
# 6 "./include/vdso/const.h" 2
# 5 "./include/linux/const.h" 2
# 7 "./include/uapi/linux/kernel.h" 2
# 6 "./include/linux/cache.h" 2
# 1 "./arch/mips/include/asm/cache.h" 1
# 12 "./arch/mips/include/asm/cache.h"
# 1 "./arch/mips/include/asm/mach-generic/kmalloc.h" 1
# 13 "./arch/mips/include/asm/cache.h" 2
# 7 "./include/linux/cache.h" 2
# 10 "./include/linux/printk.h" 2
# 1 "./include/linux/ratelimit_types.h" 1




# 1 "./include/linux/bits.h" 1





# 1 "./include/vdso/bits.h" 1
# 7 "./include/linux/bits.h" 2
# 22 "./include/linux/bits.h"
# 1 "./include/linux/build_bug.h" 1
# 23 "./include/linux/bits.h" 2
# 6 "./include/linux/ratelimit_types.h" 2
# 1 "./include/uapi/linux/param.h" 1




# 1 "./arch/mips/include/uapi/asm/param.h" 1
# 15 "./arch/mips/include/uapi/asm/param.h"
# 1 "./include/asm-generic/param.h" 1




# 1 "./include/uapi/asm-generic/param.h" 1
# 6 "./include/asm-generic/param.h" 2
# 16 "./arch/mips/include/uapi/asm/param.h" 2
# 6 "./include/uapi/linux/param.h" 2
# 7 "./include/linux/ratelimit_types.h" 2
# 1 "./include/linux/spinlock_types.h" 1
# 12 "./include/linux/spinlock_types.h"
# 1 "./include/linux/spinlock_types_raw.h" 1






# 1 "./arch/mips/include/asm/spinlock_types.h" 1




# 1 "./include/asm-generic/qspinlock_types.h" 1
# 14 "./include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 union {
  atomic_t val;







  struct {
   u8 locked;
   u8 pending;
  };
  struct {
   u16 locked_pending;
   u16 tail;
  };
# 43 "./include/asm-generic/qspinlock_types.h"
 };
} arch_spinlock_t;
# 6 "./arch/mips/include/asm/spinlock_types.h" 2
# 1 "./include/asm-generic/qrwlock_types.h" 1





# 1 "./arch/mips/include/uapi/asm/byteorder.h" 1
# 15 "./arch/mips/include/uapi/asm/byteorder.h"
# 1 "./include/linux/byteorder/little_endian.h" 1




# 1 "./include/uapi/linux/byteorder/little_endian.h" 1
# 13 "./include/uapi/linux/byteorder/little_endian.h"
# 1 "./include/linux/swab.h" 1




# 1 "./include/uapi/linux/swab.h" 1







# 1 "./arch/mips/include/uapi/asm/swab.h" 1
# 21 "./arch/mips/include/uapi/asm/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __arch_swab16(__u16 x)
{
 __asm__(
 "	.set	push			\n"
 "	.set	arch=mips32r2		\n"
 "	wsbh	%0, %1			\n"
 "	.set	pop			\n"
 : "=r" (x)
 : "r" (x));

 return x;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __arch_swab32(__u32 x)
{
 __asm__(
 "	.set	push			\n"
 "	.set	arch=mips32r2		\n"
 "	wsbh	%0, %1			\n"
 "	rotr	%0, %0, 16		\n"
 "	.set	pop			\n"
 : "=r" (x)
 : "r" (x));

 return x;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __arch_swab64(__u64 x)
{
 __asm__(
 "	.set	push			\n"
 "	.set	arch=mips64r2		\n"
 "	dsbh	%0, %1			\n"
 "	dshd	%0, %0			\n"
 "	.set	pop			\n"
 : "=r" (x)
 : "r" (x));

 return x;
}
# 9 "./include/uapi/linux/swab.h" 2
# 48 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{

 return __arch_swab16(val);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return __arch_swab32(val);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{

 return __arch_swab64(val);







}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__u64)__builtin_bswap64((__u64)(y));



}
# 171 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__u16)__builtin_bswap16((__u16)(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__u32)__builtin_bswap32((__u32)(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__u64)__builtin_bswap64((__u64)(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "./include/linux/swab.h" 2
# 14 "./include/uapi/linux/byteorder/little_endian.h" 2
# 44 "./include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "./include/linux/byteorder/little_endian.h" 2





# 1 "./include/linux/byteorder/generic.h" 1
# 144 "./include/linux/byteorder/generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__u16)__builtin_bswap16((__u16)(((__u16)__builtin_bswap16((__u16)(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__u32)__builtin_bswap32((__u32)(((__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__u64)__builtin_bswap64((__u64)(((__u64)__builtin_bswap64((__u64)(( __u64)(__be64)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__u32)__builtin_bswap32((__u32)((src[i]))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(src[i])));
}
# 12 "./include/linux/byteorder/little_endian.h" 2
# 16 "./arch/mips/include/uapi/asm/byteorder.h" 2
# 7 "./include/asm-generic/qrwlock_types.h" 2
# 1 "./arch/mips/include/asm/spinlock_types.h" 1
# 8 "./include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 union {
  atomic_t cnts;
  struct {

   u8 wlocked;
   u8 __lstate[3];




  };
 };
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 7 "./arch/mips/include/asm/spinlock_types.h" 2
# 8 "./include/linux/spinlock_types_raw.h" 2




# 1 "./include/linux/lockdep_types.h" 1
# 17 "./include/linux/lockdep_types.h"
enum lockdep_wait_type {
 LD_WAIT_INV = 0,

 LD_WAIT_FREE,
 LD_WAIT_SPIN,




 LD_WAIT_CONFIG = LD_WAIT_SPIN,

 LD_WAIT_SLEEP,

 LD_WAIT_MAX,
};

enum lockdep_lock_type {
 LD_LOCK_NORMAL = 0,
 LD_LOCK_PERCPU,
 LD_LOCK_MAX,
};
# 197 "./include/linux/lockdep_types.h"
struct lock_class_key { };




struct lockdep_map { };

struct pin_cookie { };
# 13 "./include/linux/spinlock_types_raw.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;







} raw_spinlock_t;
# 13 "./include/linux/spinlock_types.h" 2




typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 28 "./include/linux/spinlock_types.h"
 };
} spinlock_t;
# 74 "./include/linux/spinlock_types.h"
# 1 "./include/linux/rwlock_types.h" 1
# 25 "./include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;







} rwlock_t;
# 75 "./include/linux/spinlock_types.h" 2
# 8 "./include/linux/ratelimit_types.h" 2







struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "./include/linux/ratelimit_types.h"
extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 11 "./include/linux/printk.h" 2


extern const char linux_banner[];
extern const char linux_proc_banner[];

extern int oops_in_progress;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 66 "./include/linux/printk.h"
extern int console_printk[];






extern void console_verbose(void);



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 137 "./include/linux/printk.h"
extern __attribute__((__format__(printf, 1, 2)))
void early_printk(const char *fmt, ...);





struct dev_printk_info;


           __attribute__((__format__(printf, 4, 0)))
int vprintk_emit(int facility, int level,
   const struct dev_printk_info *dev_info,
   const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int _printk(const char *fmt, ...);




__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int _printk_deferred(const char *fmt, ...);

extern void __printk_safe_enter(void);
extern void __printk_safe_exit(void);
# 178 "./include/linux/printk.h"
extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_log_buf(int early);
__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void dump_stack_lvl(const char *log_lvl) __attribute__((__cold__));
extern void dump_stack(void) __attribute__((__cold__));
void printk_trigger_flush(void);
# 284 "./include/linux/printk.h"
extern int __printk_cpu_trylock(void);
extern void __printk_wait_on_cpu_lock(void);
extern void __printk_cpu_unlock(void);
# 324 "./include/linux/printk.h"
extern int kptr_restrict;
# 343 "./include/linux/printk.h"
struct module;
# 697 "./include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);
# 736 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 23 "./include/asm-generic/bug.h" 2
# 85 "./include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 4, 5)))
void warn_slowpath_fmt(const char *file, const int line, unsigned taint,
         const char *fmt, ...);
# 113 "./include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 43 "./arch/mips/include/asm/bug.h" 2
# 6 "./include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 53 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *find_bug(unsigned long bugaddr)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum bug_trap_type report_bug(unsigned long bug_addr,
         struct pt_regs *regs)
{
 return BUG_TRAP_TYPE_BUG;
}

struct bug_entry;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bug_get_file_line(struct bug_entry *bug, const char **file,
         unsigned int *line)
{
 *file = ((void *)0);
 *line = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void generic_bug_clear_once(void) {}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 14 "./include/linux/thread_info.h" 2
# 1 "./include/linux/restart_block.h" 1
# 10 "./include/linux/restart_block.h"
# 1 "./include/linux/time64.h" 1




# 1 "./include/linux/math64.h" 1





# 1 "./include/linux/math.h" 1




# 1 "./arch/mips/include/asm/div64.h" 1
# 89 "./arch/mips/include/asm/div64.h"
# 1 "./include/asm-generic/div64.h" 1
# 90 "./arch/mips/include/asm/div64.h" 2
# 6 "./include/linux/math.h" 2
# 160 "./include/linux/math.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 int_sqrt64(u64 x)
{
 return (u32)int_sqrt(x);
}
# 7 "./include/linux/math64.h" 2
# 1 "./include/vdso/math64.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 8 "./include/linux/math64.h" 2
# 26 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 40 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 54 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 67 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
# 79 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 125 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 138 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}
# 176 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 u32 ah, al;
 u64 ret;

 al = a;
 ah = a >> 32;

 ret = mul_u32_u32(al, mul) >> shift;
 if (ah)
  ret += mul_u32_u32(ah, mul) << (32 - shift);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u64_shr(u64 a, u64 b, unsigned int shift)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } rl, rm, rn, rh, a0, b0;
 u64 c;

 a0.ll = a;
 b0.ll = b;

 rl.ll = mul_u32_u32(a0.l.low, b0.l.low);
 rm.ll = mul_u32_u32(a0.l.low, b0.l.high);
 rn.ll = mul_u32_u32(a0.l.high, b0.l.low);
 rh.ll = mul_u32_u32(a0.l.high, b0.l.high);






 rl.l.high = c = (u64)rl.l.high + rm.l.low + rn.l.low;
 rh.l.low = c = (c >> 32) + rm.l.high + rn.l.high + rh.l.low;
 rh.l.high = (c >> 32) + rh.l.high;





 if (shift == 0)
  return rl.ll;
 if (shift < 64)
  return (rl.ll >> shift) | (rh.ll << (64 - shift));
 return rh.ll >> (shift & 63);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_s64_u64_shr(s64 a, u64 b, unsigned int shift)
{
 u64 ret;





 ret = mul_u64_u64_shr(__builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long long) || __builtin_types_compatible_p(typeof(a), unsigned long long), ({ signed long long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long) || __builtin_types_compatible_p(typeof(a), unsigned long), ({ signed long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed int) || __builtin_types_compatible_p(typeof(a), unsigned int), ({ signed int __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed short) || __builtin_types_compatible_p(typeof(a), unsigned short), ({ signed short __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed char) || __builtin_types_compatible_p(typeof(a), unsigned char), ({ signed char __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), char), (char)({ signed char __x = (a); __x<0?-__x:__x; }), ((void)0))))))), b, shift);

 if (a < 0)
  ret = -((s64) ret);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}


u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
# 6 "./include/linux/time64.h" 2
# 1 "./include/vdso/time64.h" 1
# 7 "./include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;

# 1 "./include/uapi/linux/time.h" 1





# 1 "./include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "./include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_old_timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};

struct __kernel_old_itimerval {
 struct __kernel_old_timeval it_interval;
 struct __kernel_old_timeval it_value;
};

struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "./include/uapi/linux/time.h" 2
# 33 "./include/uapi/linux/time.h"
struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 12 "./include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 43 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 127 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec64_to_ns(const struct timespec64 *ts)
{

 if (ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return ((s64)~((u64)1 << 63));

 if (ts->tv_sec <= ((-((s64)~((u64)1 << 63)) - 1) / 1000000000L))
  return (-((s64)~((u64)1 << 63)) - 1);

 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 155 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 11 "./include/linux/restart_block.h" 2

struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 unsigned long arch_data;
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 15 "./include/linux/thread_info.h" 2
# 1 "./include/linux/errno.h" 1




# 1 "./include/uapi/linux/errno.h" 1
# 1 "./arch/mips/include/asm/errno.h" 1
# 11 "./arch/mips/include/asm/errno.h"
# 1 "./arch/mips/include/uapi/asm/errno.h" 1
# 16 "./arch/mips/include/uapi/asm/errno.h"
# 1 "./include/uapi/asm-generic/errno-base.h" 1
# 17 "./arch/mips/include/uapi/asm/errno.h" 2
# 12 "./arch/mips/include/asm/errno.h" 2
# 2 "./include/uapi/linux/errno.h" 2
# 6 "./include/linux/errno.h" 2
# 16 "./include/linux/thread_info.h" 2
# 27 "./include/linux/thread_info.h"
# 1 "./include/linux/bitops.h" 1






# 1 "./include/linux/typecheck.h" 1
# 8 "./include/linux/bitops.h" 2
# 24 "./include/linux/bitops.h"
extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "./arch/mips/include/asm/bitops.h" 1
# 19 "./arch/mips/include/asm/bitops.h"
# 1 "./arch/mips/include/asm/barrier.h" 1
# 11 "./arch/mips/include/asm/barrier.h"
# 1 "./arch/mips/include/asm/addrspace.h" 1
# 13 "./arch/mips/include/asm/addrspace.h"
# 1 "./arch/mips/include/asm/mach-loongson64/spaces.h" 1
# 16 "./arch/mips/include/asm/mach-loongson64/spaces.h"
# 1 "./arch/mips/include/asm/mach-generic/spaces.h" 1
# 15 "./arch/mips/include/asm/mach-generic/spaces.h"
# 1 "./arch/mips/include/asm/mipsregs.h" 1
# 18 "./arch/mips/include/asm/mipsregs.h"
# 1 "./arch/mips/include/asm/hazards.h" 1
# 418 "./arch/mips/include/asm/hazards.h"
extern void mips_ihb(void);
# 19 "./arch/mips/include/asm/mipsregs.h" 2
# 1 "./arch/mips/include/asm/isa-rev.h" 1
# 20 "./arch/mips/include/asm/mipsregs.h" 2
# 1 "./arch/mips/include/asm/war.h" 1
# 21 "./arch/mips/include/asm/mipsregs.h" 2
# 1239 "./arch/mips/include/asm/mipsregs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_insn_16bit(u16 insn)
{
 u16 opcode = (insn >> 10) & 0x7;

 return (opcode >= 1 && opcode <= 3) ? 1 : 0;
}
# 1368 "./arch/mips/include/asm/mipsregs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlbinvf(void)
{
 __asm__ __volatile__(
  ".set push\n\t"
  ".set noreorder\n\t"
  "# tlbinvf\n\t"
  ".insn\n\t" ".word (" "0x42000004" ")\n\t"

  ".set pop");
}
# 2761 "./arch/mips/include/asm/mipsregs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_probe(void)
{
 __asm__ __volatile__(
  ".set noreorder\n\t"
  "tlbp\n\t"
  ".set reorder");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_read(void)
{
# 2788 "./arch/mips/include/asm/mipsregs.h"
 __asm__ __volatile__(
  ".set noreorder\n\t"
  "tlbr\n\t"
  ".set reorder");
# 2804 "./arch/mips/include/asm/mipsregs.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_write_indexed(void)
{
 __asm__ __volatile__(
  ".set noreorder\n\t"
  "tlbwi\n\t"
  ".set reorder");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_write_random(void)
{
 __asm__ __volatile__(
  ".set noreorder\n\t"
  "tlbwr\n\t"
  ".set reorder");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guest_tlb_probe(void)
{
 __asm__ __volatile__(
  ".set push\n\t"
  ".set noreorder\n\t"
  ".set\tvirt\n\t" "tlbgp\n\t"
  ".set pop");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guest_tlb_read(void)
{
 __asm__ __volatile__(
  ".set push\n\t"
  ".set noreorder\n\t"
  ".set\tvirt\n\t" "tlbgr\n\t"
  ".set pop");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guest_tlb_write_indexed(void)
{
 __asm__ __volatile__(
  ".set push\n\t"
  ".set noreorder\n\t"
  ".set\tvirt\n\t" "tlbgwi\n\t"
  ".set pop");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guest_tlb_write_random(void)
{
 __asm__ __volatile__(
  ".set push\n\t"
  ".set noreorder\n\t"
  ".set\tvirt\n\t" "tlbgwr\n\t"
  ".set pop");
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guest_tlbinvf(void)
{
 __asm__ __volatile__(
  ".set push\n\t"
  ".set noreorder\n\t"
  ".set\tvirt\n\t" "tlbginvf\n\t"
  ".set pop");
}
# 2921 "./arch/mips/include/asm/mipsregs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_status(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_status(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_status(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_cause(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$13" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$13" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$13" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$13" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_cause(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$13" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$13" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$13" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$13" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_cause(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$13" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$13" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$13" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$13" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_config(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_config(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_config(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_config5(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_config5(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_config5(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_config6(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_config6(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_config6(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_config7(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (7 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "7" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (7 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "7" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_config7(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (7 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "7" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (7 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "7" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_config7(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (7 == 0) __asm__ __volatile__( "mfc0\t%0, " "$16" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$16" ", " "7" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (7 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$16" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$16" ", " "7" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_diag(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_diag(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_diag(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_intcontrol(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; __asm__ __volatile__( "cfc0\t%0, " "$20" "\n\t" : "=r" (__res)); __res; }); new = res | set; do { __asm__ __volatile__( "ctc0\t%z0, " "$20" "\n\t" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_intcontrol(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; __asm__ __volatile__( "cfc0\t%0, " "$20" "\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { __asm__ __volatile__( "ctc0\t%z0, " "$20" "\n\t" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_intcontrol(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; __asm__ __volatile__( "cfc0\t%0, " "$20" "\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { __asm__ __volatile__( "ctc0\t%z0, " "$20" "\n\t" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_intctl(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_intctl(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_intctl(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_srsmap(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (3 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "3" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (3 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "3" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_srsmap(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (3 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "3" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (3 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "3" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_srsmap(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (3 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "3" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (3 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "3" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_pagegrain(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$5" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$5" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$5" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$5" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_pagegrain(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$5" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$5" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$5" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$5" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_pagegrain(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$5" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$5" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$5" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$5" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_guestctl0(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_guestctl0(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_guestctl0(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$12" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$12" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$12" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$12" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_guestctl0ext(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$11" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$11" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$11" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$11" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_guestctl0ext(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$11" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$11" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$11" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$11" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_guestctl0ext(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$11" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$11" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$11" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$11" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_guestctl1(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_guestctl1(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_guestctl1(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_guestctl2(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_guestctl2(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_guestctl2(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_guestctl3(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_guestctl3(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_guestctl3(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_config_0(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_config_0(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_config_0(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_bus_pll(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_bus_pll(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_bus_pll(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_reset(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_reset(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_reset(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_cmt_intr(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_cmt_intr(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_cmt_intr(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_cmt_ctrl(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (2 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "2" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (2 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "2" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_cmt_ctrl(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (2 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "2" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (2 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "2" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_cmt_ctrl(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (2 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "2" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (2 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "2" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_config(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_config(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_config(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_brcm_mode(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_brcm_mode(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_brcm_mode(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$22" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$22" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$22" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$22" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_gc0_wired(unsigned int set) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res | set; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_gc0_wired(unsigned int clear) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res & ~clear; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_gc0_wired(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res & ~change; new |= (val & change); do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_gc0_status(unsigned int set) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res | set; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_gc0_status(unsigned int clear) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res & ~clear; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_gc0_status(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res & ~change; new |= (val & change); do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_gc0_cause(unsigned int set) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$13" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res | set; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$13" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_gc0_cause(unsigned int clear) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$13" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res & ~clear; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$13" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_gc0_cause(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$13" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); new = res & ~change; new |= (val & change); do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$13" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (0)); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_gc0_ebase(unsigned int set) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$15" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); new = res | set; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$15" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (1)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_gc0_ebase(unsigned int clear) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$15" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); new = res & ~clear; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$15" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (1)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_gc0_ebase(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$15" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); new = res & ~change; new |= (val & change); do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$15" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (1)); } while (0); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_gc0_config1(unsigned int set) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); new = res | set; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (1)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_gc0_config1(unsigned int clear) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); new = res & ~clear; do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (1)); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_gc0_config1(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); new = res & ~change; new |= (val & change); do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new)), "i" (1)); } while (0); return res; }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int get_ebase_cpunum(void)
{
 return ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$15" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$15" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ((unsigned long)(0x3ff) << 0);
}
# 16 "./arch/mips/include/asm/mach-generic/spaces.h" 2
# 17 "./arch/mips/include/asm/mach-loongson64/spaces.h" 2
# 14 "./arch/mips/include/asm/addrspace.h" 2
# 12 "./arch/mips/include/asm/barrier.h" 2
# 1 "./arch/mips/include/asm/sync.h" 1
# 13 "./arch/mips/include/asm/barrier.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sync(void)
{
 asm volatile(".if (( 0x00 ) != -1) && ( (1 << 0) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" ::: "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rmb(void)
{
 asm volatile(".if (( 0x00 ) != -1) && ( (1 << 0) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" ::: "memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wmb(void)
{
 asm volatile(".if (( 0x00 ) != -1) && ( (1 << 0) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" ::: "memory");
}
# 69 "./arch/mips/include/asm/barrier.h"
# 1 "./arch/mips/include/asm/wbflush.h" 1
# 17 "./arch/mips/include/asm/wbflush.h"
extern void (*__wbflush)(void);
extern void wbflush_setup(void);
# 70 "./arch/mips/include/asm/barrier.h" 2
# 135 "./arch/mips/include/asm/barrier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sync_ginv(void)
{
 asm volatile(".if (( 0x14 ) != -1) && ( (1 << 0) ); .set push; .set mips64r2; .rept 1; sync 0x14; .endr; .set pop; .else; ; .endif");
}

# 1 "./include/asm-generic/barrier.h" 1
# 17 "./include/asm-generic/barrier.h"
# 1 "./arch/mips/include/generated/asm/rwonce.h" 1
# 18 "./include/asm-generic/barrier.h" 2
# 141 "./arch/mips/include/asm/barrier.h" 2
# 20 "./arch/mips/include/asm/bitops.h" 2


# 1 "./arch/mips/include/asm/cpu-features.h" 1
# 12 "./arch/mips/include/asm/cpu-features.h"
# 1 "./arch/mips/include/asm/cpu.h" 1
# 293 "./arch/mips/include/asm/cpu.h"
enum cpu_type_enum {
 CPU_UNKNOWN,




 CPU_R2000, CPU_R3000, CPU_R3000A, CPU_R3041, CPU_R3051, CPU_R3052,
 CPU_R3081, CPU_R3081E,




 CPU_R4000PC, CPU_R4000SC, CPU_R4000MC, CPU_R4200, CPU_R4300, CPU_R4310,
 CPU_R4400PC, CPU_R4400SC, CPU_R4400MC, CPU_R4600, CPU_R4640, CPU_R4650,
 CPU_R4700, CPU_R5000, CPU_R5500, CPU_NEVADA, CPU_R10000,
 CPU_R12000, CPU_R14000, CPU_R16000, CPU_VR41XX, CPU_VR4111, CPU_VR4121,
 CPU_VR4122, CPU_VR4131, CPU_VR4133, CPU_VR4181, CPU_VR4181A, CPU_RM7000,
 CPU_SR71000, CPU_TX49XX,




 CPU_TX3912, CPU_TX3922, CPU_TX3927,




 CPU_4KC, CPU_4KEC, CPU_4KSC, CPU_24K, CPU_34K, CPU_1004K, CPU_74K,
 CPU_ALCHEMY, CPU_PR4450, CPU_BMIPS32, CPU_BMIPS3300, CPU_BMIPS4350,
 CPU_BMIPS4380, CPU_BMIPS5000, CPU_XBURST, CPU_LOONGSON32, CPU_M14KC,
 CPU_M14KEC, CPU_INTERAPTIV, CPU_P5600, CPU_PROAPTIV, CPU_1074K,
 CPU_M5150, CPU_I6400, CPU_P6600, CPU_M6250,




 CPU_5KC, CPU_5KE, CPU_20KC, CPU_25KF, CPU_SB1, CPU_SB1A, CPU_LOONGSON2EF,
 CPU_LOONGSON64, CPU_CAVIUM_OCTEON, CPU_CAVIUM_OCTEON_PLUS,
 CPU_CAVIUM_OCTEON2, CPU_CAVIUM_OCTEON3, CPU_I6500,

 CPU_QEMU_GENERIC,

 CPU_LAST
};
# 13 "./arch/mips/include/asm/cpu-features.h" 2
# 1 "./arch/mips/include/asm/cpu-info.h" 1
# 23 "./arch/mips/include/asm/cpu-info.h"
struct cache_desc {
 unsigned int waysize;
 unsigned short sets;
 unsigned char ways;
 unsigned char linesz;
 unsigned char waybit;
 unsigned char flags;
};

struct guest_info {
 unsigned long ases;
 unsigned long ases_dyn;
 unsigned long long options;
 unsigned long long options_dyn;
 int tlbsize;
 u8 conf;
 u8 kscratch_mask;
};
# 52 "./arch/mips/include/asm/cpu-info.h"
struct cpuinfo_mips {
 u64 asid_cache;

 unsigned long asid_mask;





 unsigned long ases;
 unsigned long long options;
 unsigned int udelay_val;
 unsigned int processor_id;
 unsigned int fpu_id;
 unsigned int fpu_csr31;
 unsigned int fpu_msk31;
 unsigned int msa_id;
 unsigned int cputype;
 int isa_level;
 int tlbsize;
 int tlbsizevtlb;
 int tlbsizeftlbsets;
 int tlbsizeftlbways;
 struct cache_desc icache;
 struct cache_desc dcache;
 struct cache_desc vcache;
 struct cache_desc scache;
 struct cache_desc tcache;
 int srsets;
 int package;
 unsigned int globalnumber;

 int vmbits;

 void *data;
 unsigned int watch_reg_count;
 unsigned int watch_reg_use_cnt;

 u16 watch_reg_masks[4];
 unsigned int kscratch_mask;




 unsigned int writecombine;




 unsigned int htw_seq;


 struct guest_info guest;
 unsigned int gtoffset_mask;
 unsigned int guestid_mask;
 unsigned int guestid_cache;







 u32 loongson3_cpucfg_data[3];

} __attribute__((aligned((1 << 6))));

extern struct cpuinfo_mips cpu_data[];




extern void cpu_probe(void);
extern void cpu_report(void);

extern const char *__cpu_name[];


struct seq_file;
struct notifier_block;

extern int register_proc_cpuinfo_notifier(struct notifier_block *nb);
extern int proc_cpuinfo_notifier_call_chain(unsigned long val, void *v);
# 146 "./arch/mips/include/asm/cpu-info.h"
struct proc_cpuinfo_notifier_args {
 struct seq_file *m;
 unsigned long n;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpu_cluster(struct cpuinfo_mips *cpuinfo)
{

 if (!0 && !0)
  return 0;

 return (cpuinfo->globalnumber & ((unsigned long)(0xf) << 16)) >>
  16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpu_core(struct cpuinfo_mips *cpuinfo)
{
 return (cpuinfo->globalnumber & ((unsigned long)(0xff) << 8)) >>
  8;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpu_vpe_id(struct cpuinfo_mips *cpuinfo)
{

 if (!0 && !0)
  return 0;

 return (cpuinfo->globalnumber & ((unsigned long)(0xff) << 0)) >>
  0;
}

extern void cpu_set_cluster(struct cpuinfo_mips *cpuinfo, unsigned int cluster);
extern void cpu_set_core(struct cpuinfo_mips *cpuinfo, unsigned int core);
extern void cpu_set_vpe_id(struct cpuinfo_mips *cpuinfo, unsigned int vpe);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpus_are_siblings(int cpua, int cpub)
{
 struct cpuinfo_mips *infoa = &cpu_data[cpua];
 struct cpuinfo_mips *infob = &cpu_data[cpub];
 unsigned int gnuma, gnumb;

 if (infoa->package != infob->package)
  return false;

 gnuma = infoa->globalnumber & ~((unsigned long)(0xff) << 0);
 gnumb = infob->globalnumber & ~((unsigned long)(0xff) << 0);
 if (gnuma != gnumb)
  return false;

 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long cpu_asid_inc(void)
{
 return 1 << 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long cpu_asid_mask(struct cpuinfo_mips *cpuinfo)
{

 return cpuinfo->asid_mask;

 return ((1 << 0) - 1) << 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_asid_mask(struct cpuinfo_mips *cpuinfo,
         unsigned long asid_mask)
{

 cpuinfo->asid_mask = asid_mask;

}
# 14 "./arch/mips/include/asm/cpu-features.h" 2

# 1 "./arch/mips/include/asm/mach-loongson64/cpu-feature-overrides.h" 1
# 16 "./arch/mips/include/asm/cpu-features.h" 2
# 23 "./arch/mips/include/asm/bitops.h" 2

# 1 "./arch/mips/include/asm/llsc.h" 1
# 25 "./arch/mips/include/asm/bitops.h" 2
# 69 "./arch/mips/include/asm/bitops.h"
void __mips_set_bit(unsigned long nr, volatile unsigned long *addr);
void __mips_clear_bit(unsigned long nr, volatile unsigned long *addr);
void __mips_change_bit(unsigned long nr, volatile unsigned long *addr);
int __mips_test_and_set_bit_lock(unsigned long nr,
     volatile unsigned long *addr);
int __mips_test_and_clear_bit(unsigned long nr,
         volatile unsigned long *addr);
int __mips_test_and_change_bit(unsigned long nr,
          volatile unsigned long *addr);
# 90 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit(unsigned long nr, volatile unsigned long *addr)
{
 volatile unsigned long *m = &addr[((nr) / 64)];
 int bit = nr % 64;

 if (!1) {
  __mips_set_bit(nr, addr);
  return;
 }

 if ((2 >= 2) && __builtin_constant_p(bit) && (bit >= 16)) {
  do { unsigned long __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0, %1			\n" "	" "dins	" "%0, %3, %2, 1" "			\n" "	" "scd	" "%0, %1			\n" "	" "beqz	" "%0, 1b			\n" "	.set		pop			\n" : "=&r"(__temp), "+" "ZC"(*m) : "i"(bit), "r"(~0) : ); } while (0);
  return;
 }

 do { unsigned long __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0, %1			\n" "	" "or\t%0, %2" "			\n" "	" "scd	" "%0, %1			\n" "	" "beqz	" "%0, 1b			\n" "	.set		pop			\n" : "=&r"(__temp), "+" "ZC"(*m) : "ir"(((((1UL))) << (bit))) : ); } while (0);
}
# 118 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit(unsigned long nr, volatile unsigned long *addr)
{
 volatile unsigned long *m = &addr[((nr) / 64)];
 int bit = nr % 64;

 if (!1) {
  __mips_clear_bit(nr, addr);
  return;
 }

 if ((2 >= 2) && __builtin_constant_p(bit)) {
  do { unsigned long __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0, %1			\n" "	" "dins	" "%0, $0, %2, 1" "			\n" "	" "scd	" "%0, %1			\n" "	" "beqz	" "%0, 1b			\n" "	.set		pop			\n" : "=&r"(__temp), "+" "ZC"(*m) : "i"(bit) : ); } while (0);
  return;
 }

 do { unsigned long __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0, %1			\n" "	" "and\t%0, %2" "			\n" "	" "scd	" "%0, %1			\n" "	" "beqz	" "%0, 1b			\n" "	.set		pop			\n" : "=&r"(__temp), "+" "ZC"(*m) : "ir"(~((((1UL))) << (bit))) : ); } while (0);
}
# 144 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_unlock(unsigned long nr, volatile unsigned long *addr)
{
                        ;
 clear_bit(nr, addr);
}
# 159 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_bit(unsigned long nr, volatile unsigned long *addr)
{
 volatile unsigned long *m = &addr[((nr) / 64)];
 int bit = nr % 64;

 if (!1) {
  __mips_change_bit(nr, addr);
  return;
 }

 do { unsigned long __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0, %1			\n" "	" "xor\t%0, %2" "			\n" "	" "scd	" "%0, %1			\n" "	" "beqz	" "%0, 1b			\n" "	.set		pop			\n" : "=&r"(__temp), "+" "ZC"(*m) : "ir"(((((1UL))) << (bit))) : ); } while (0);
}
# 180 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_lock(unsigned long nr,
 volatile unsigned long *addr)
{
 volatile unsigned long *m = &addr[((nr) / 64)];
 int bit = nr % 64;
 unsigned long res, orig;

 if (!1) {
  res = __mips_test_and_set_bit_lock(nr, addr);
 } else {
  orig = ({ unsigned long __orig, __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0" ", %2		\n" "	" "or\t%1, %0, %3" "			\n" "	" "scd	" "%1, %2			\n" "	" "beqz	" "%1, 1b			\n" "	.set		pop			\n" : "=&r"(__orig), "=&r"(__temp), "+" "ZC"(*m) : "ir"(((((1UL))) << (bit))) : ); __orig; });


  res = (orig & ((((1UL))) << (bit))) != 0;
 }

 __asm__ __volatile__("sync" : : :"memory");

 return res;
}
# 209 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit(unsigned long nr,
 volatile unsigned long *addr)
{
                        ;
 return test_and_set_bit_lock(nr, addr);
}
# 224 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit(unsigned long nr,
 volatile unsigned long *addr)
{
 volatile unsigned long *m = &addr[((nr) / 64)];
 int bit = nr % 64;
 unsigned long res, orig;

                        ;

 if (!1) {
  res = __mips_test_and_clear_bit(nr, addr);
 } else if ((2 >= 2) && __builtin_constant_p(nr)) {
  res = ({ unsigned long __orig, __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%1" ", %2		\n" "	" "dext	" "%0, %1, %3, 1;" "dins	" "%1, $0, %3, 1" "			\n" "	" "scd	" "%1, %2			\n" "	" "beqz	" "%1, 1b			\n" "	.set		pop			\n" : "=&r"(__orig), "=&r"(__temp), "+" "ZC"(*m) : "i"(bit) : ); __orig; });



 } else {
  orig = ({ unsigned long __orig, __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0" ", %2		\n" "	" "or\t%1, %0, %3;" "xor\t%1, %1, %3" "			\n" "	" "scd	" "%1, %2			\n" "	" "beqz	" "%1, 1b			\n" "	.set		pop			\n" : "=&r"(__orig), "=&r"(__temp), "+" "ZC"(*m) : "ir"(((((1UL))) << (bit))) : ); __orig; });



  res = (orig & ((((1UL))) << (bit))) != 0;
 }

 __asm__ __volatile__("sync" : : :"memory");

 return res;
}
# 261 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_change_bit(unsigned long nr,
 volatile unsigned long *addr)
{
 volatile unsigned long *m = &addr[((nr) / 64)];
 int bit = nr % 64;
 unsigned long res, orig;

                        ;

 if (!1) {
  res = __mips_test_and_change_bit(nr, addr);
 } else {
  orig = ({ unsigned long __orig, __temp; asm volatile( "	.set		push			\n" "	.set		" "mips64r2" "	\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld	" "%0" ", %2		\n" "	" "xor\t%1, %0, %3" "			\n" "	" "scd	" "%1, %2			\n" "	" "beqz	" "%1, 1b			\n" "	.set		pop			\n" : "=&r"(__orig), "=&r"(__temp), "+" "ZC"(*m) : "ir"(((((1UL))) << (bit))) : ); __orig; });


  res = (orig & ((((1UL))) << (bit))) != 0;
 }

 __asm__ __volatile__("sync" : : :"memory");

 return res;
}




# 1 "./include/asm-generic/bitops/non-atomic.h" 1
# 16 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p |= mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p &= ~mask;
}
# 45 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch___change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p ^= mask;
}
# 64 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 85 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_bit(unsigned int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 64)] >> (nr & (64 -1)));
}
# 288 "./arch/mips/include/asm/bitops.h" 2
# 298 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_unlock(unsigned long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("sync" : : :"memory");
 arch___clear_bit(nr, addr);
 do { __sync(); __wbflush(); } while (0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 int num;

 if (64 == 32 && !__builtin_constant_p(word) &&
     __builtin_constant_p(((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) && ((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) {
  __asm__(
  "	.set	push					\n"
  "	.set	""mips64r2""			\n"
  "	clz	%0, %1					\n"
  "	.set	pop					\n"
  : "=r" (num)
  : "r" (word));

  return 31 - num;
 }

 if (64 == 64 && !__builtin_constant_p(word) &&
     __builtin_constant_p(((1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) && ((1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) {
  __asm__(
  "	.set	push					\n"
  "	.set	""mips64r2""			\n"
  "	dclz	%0, %1					\n"
  "	.set	pop					\n"
  : "=r" (num)
  : "r" (word));

  return 63 - num;
 }

 num = 64 - 1;


 if (!(word & (~0ul << 32))) {
  num -= 32;
  word <<= 32;
 }

 if (!(word & (~0ul << (64 -16)))) {
  num -= 16;
  word <<= 16;
 }
 if (!(word & (~0ul << (64 -8)))) {
  num -= 8;
  word <<= 8;
 }
 if (!(word & (~0ul << (64 -4)))) {
  num -= 4;
  word <<= 4;
 }
 if (!(word & (~0ul << (64 -2)))) {
  num -= 2;
  word <<= 2;
 }
 if (!(word & (~0ul << (64 -1))))
  num -= 1;
 return num;
}
# 375 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 return __fls(word & -word);
}
# 387 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fls(unsigned int x)
{
 int r;

 if (!__builtin_constant_p(x) &&
     __builtin_constant_p(((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) && ((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) {
  __asm__(
  "	.set	push					\n"
  "	.set	""mips64r2""			\n"
  "	clz	%0, %1					\n"
  "	.set	pop					\n"
  : "=r" (x)
  : "r" (x));

  return 32 - x;
 }

 r = 32;
 if (!x)
  return 0;
 if (!(x & 0xffff0000u)) {
  x <<= 16;
  r -= 16;
 }
 if (!(x & 0xff000000u)) {
  x <<= 8;
  r -= 8;
 }
 if (!(x & 0xf0000000u)) {
  x <<= 4;
  r -= 4;
 }
 if (!(x & 0xc0000000u)) {
  x <<= 2;
  r -= 2;
 }
 if (!(x & 0x80000000u)) {
  x <<= 1;
  r -= 1;
 }
 return r;
}

# 1 "./include/asm-generic/bitops/fls64.h" 1
# 27 "./include/asm-generic/bitops/fls64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}
# 431 "./arch/mips/include/asm/bitops.h" 2
# 440 "./arch/mips/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ffs(int word)
{
 if (!word)
  return 0;

 return fls(word & -word);
}

# 1 "./include/asm-generic/bitops/ffz.h" 1
# 449 "./arch/mips/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/find.h" 1




extern unsigned long _find_next_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long nbits,
  unsigned long start, unsigned long invert, unsigned long le);
extern unsigned long _find_first_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_first_zero_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_last_bit(const unsigned long *addr, unsigned long size);
# 22 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
       unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 0);
}
# 51 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr1, addr2, size, offset, 0UL, 0);
}
# 80 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 0);
}
# 108 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __ffs(val) : size;
 }

 return _find_first_bit(addr, size);
}
# 128 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_zero_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_first_zero_bit(addr, size);
}
# 158 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_last_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __fls(val) : size;
 }

 return _find_last_bit(addr, size);
}
# 181 "./include/asm-generic/bitops/find.h"
extern unsigned long find_next_clump8(unsigned long *clump,
          const unsigned long *addr,
          unsigned long size, unsigned long offset);
# 450 "./arch/mips/include/asm/bitops.h" 2



# 1 "./include/asm-generic/bitops/sched.h" 1
# 13 "./include/asm-generic/bitops/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "./include/asm-generic/bitops/sched.h"
}
# 454 "./arch/mips/include/asm/bitops.h" 2

# 1 "./arch/mips/include/asm/arch_hweight.h" 1
# 35 "./arch/mips/include/asm/arch_hweight.h"
# 1 "./include/asm-generic/bitops/arch_hweight.h" 1






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 36 "./arch/mips/include/asm/arch_hweight.h" 2
# 456 "./arch/mips/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/const_hweight.h" 1
# 457 "./arch/mips/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/le.h" 1
# 14 "./include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_first_zero_bit(addr, size);
}
# 83 "./include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit_le(int nr, const void *addr)
{
 return arch_test_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit_le(int nr, void *addr)
{
 arch___set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_le(int nr, void *addr)
{
 arch___clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit_le(int nr, void *addr)
{
 return arch___test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return arch___test_and_clear_bit(nr ^ 0, addr);
}
# 459 "./arch/mips/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/ext2-atomic.h" 1
# 460 "./arch/mips/include/asm/bitops.h" 2
# 34 "./include/linux/bitops.h" 2
# 69 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 169 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order(unsigned int count)
{
 if (count == 0)
  return -1;

 return fls(--count);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 return (int)fls_long(--l);
}
# 222 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  arch___set_bit(nr, addr);
 else
  arch___clear_bit(nr, addr);
}
# 28 "./include/linux/thread_info.h" 2





enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};
# 60 "./include/linux/thread_info.h"
# 1 "./arch/mips/include/asm/thread_info.h" 1
# 16 "./arch/mips/include/asm/thread_info.h"
# 1 "./arch/mips/include/asm/processor.h" 1
# 14 "./arch/mips/include/asm/processor.h"
# 1 "./include/linux/atomic.h" 1






# 1 "./arch/mips/include/asm/atomic.h" 1
# 17 "./arch/mips/include/asm/atomic.h"
# 1 "./include/linux/irqflags.h" 1
# 16 "./include/linux/irqflags.h"
# 1 "./arch/mips/include/asm/irqflags.h" 1
# 94 "./arch/mips/include/asm/irqflags.h"
void arch_local_irq_disable(void);
unsigned long arch_local_irq_save(void);
void arch_local_irq_restore(unsigned long flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_enable(void)
{
 __asm__ __volatile__(
 "	.set	push						\n"
 "	.set	reorder						\n"
 "	.set	noat						\n"



 "	mfc0	$1,$12						\n"
 "	ori	$1,0x1f						\n"
 "	xori	$1,0x1e						\n"
 "	mtc0	$1,$12						\n"

 "	" "" "			\n"
 "	.set	pop						\n"
 :
 :
 : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_save_flags(void)
{
 unsigned long flags;

 asm __volatile__(
 "	.set	push						\n"
 "	.set	reorder						\n"
 "	mfc0	%[flags], $12					\n"
 "	.set	pop						\n"
 : [flags] "=r" (flags));

 return flags;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled(void)
{
 return arch_irqs_disabled_flags(arch_local_save_flags());
}
# 17 "./include/linux/irqflags.h" 2
# 1 "./arch/mips/include/generated/asm/percpu.h" 1
# 1 "./include/asm-generic/percpu.h" 1





# 1 "./include/linux/threads.h" 1
# 7 "./include/asm-generic/percpu.h" 2
# 1 "./include/linux/percpu-defs.h" 1
# 308 "./include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __this_cpu_preempt_check(const char *op) { }
# 8 "./include/asm-generic/percpu.h" 2
# 19 "./include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[16];
# 48 "./include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 2 "./arch/mips/include/generated/asm/percpu.h" 2
# 18 "./include/linux/irqflags.h" 2
# 27 "./include/linux/irqflags.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_off(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on_prepare(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_off(unsigned long ip) { }
# 18 "./arch/mips/include/asm/atomic.h" 2




# 1 "./arch/mips/include/asm/cmpxchg.h" 1
# 28 "./arch/mips/include/asm/cmpxchg.h"
extern unsigned long __cmpxchg_called_with_bad_pointer(void)
 __attribute__((__error__("Bad argument size for cmpxchg")));
extern unsigned long __cmpxchg64_unsupported(void)
 __attribute__((__error__("cmpxchg64 not available; cpu_has_64bits may be false")));
extern unsigned long __xchg_called_with_bad_pointer(void)
 __attribute__((__error__("Bad argument size for xchg")));
# 68 "./arch/mips/include/asm/cmpxchg.h"
extern unsigned long __xchg_small(volatile void *ptr, unsigned long val,
      unsigned int size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __xchg(volatile void *ptr, unsigned long x, int size)
{
 switch (size) {
 case 1:
 case 2:
  return __xchg_small(ptr, x, size);

 case 4:
  return ({ __typeof(*((volatile u32 *)ptr)) __ret; if (1) { __asm__ __volatile__( "	.set	push				\n" "	.set	noat				\n" "	.set	push				\n" "	.set	" "arch=r4000" "		\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "ll" "	%0, %2		# __xchg_asm	\n" "	.set	pop				\n" "	move	$1, %z3				\n" "	.set	" "arch=r4000" "		\n" "	" "sc" "	$1, %1				\n" "\t" "beqz	" "$1, 1b				\n" "	.set	pop				\n" : "=&r" (__ret), "=" "ZC" (*(volatile u32 *)ptr) : "ZC" (*(volatile u32 *)ptr), "Jr" (x) : ); } else { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); __ret = *(volatile u32 *)ptr; *(volatile u32 *)ptr = x; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } __ret; });

 case 8:
  if (!1)
   return __xchg_called_with_bad_pointer();

  return ({ __typeof(*((volatile u64 *)ptr)) __ret; if (1) { __asm__ __volatile__( "	.set	push				\n" "	.set	noat				\n" "	.set	push				\n" "	.set	" "arch=r4000" "		\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld" "	%0, %2		# __xchg_asm	\n" "	.set	pop				\n" "	move	$1, %z3				\n" "	.set	" "arch=r4000" "		\n" "	" "scd" "	$1, %1				\n" "\t" "beqz	" "$1, 1b				\n" "	.set	pop				\n" : "=&r" (__ret), "=" "ZC" (*(volatile u64 *)ptr) : "ZC" (*(volatile u64 *)ptr), "Jr" (x) : ); } else { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); __ret = *(volatile u64 *)ptr; *(volatile u64 *)ptr = x; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } __ret; });

 default:
  return __xchg_called_with_bad_pointer();
 }
}
# 149 "./arch/mips/include/asm/cmpxchg.h"
extern unsigned long __cmpxchg_small(volatile void *ptr, unsigned long old,
         unsigned long new, unsigned int size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __cmpxchg(volatile void *ptr, unsigned long old,
   unsigned long new, unsigned int size)
{
 switch (size) {
 case 1:
 case 2:
  return __cmpxchg_small(ptr, old, new, size);

 case 4:
  return ({ __typeof(*((volatile u32 *)ptr)) __ret; if (1) { __asm__ __volatile__( "	.set	push				\n" "	.set	noat				\n" "	.set	push				\n" "	.set	""arch=r4000""		\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "ll" "	%0, %2		# __cmpxchg_asm \n" "	bne	%0, %z3, 2f			\n" "	.set	pop				\n" "	move	$1, %z4				\n" "	.set	""arch=r4000""		\n" "	" "sc" "	$1, %1				\n" "\t" "beqz	" "$1, 1b				\n" "	.set	pop				\n" "2:	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" : "=&r" (__ret), "=" "ZC" (*(volatile u32 *)ptr) : "ZC" (*(volatile u32 *)ptr), "Jr" ((u32)old), "Jr" (new) : ); } else { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); __ret = *(volatile u32 *)ptr; if (__ret == (u32)old) *(volatile u32 *)ptr = new; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } __ret; });


 case 8:

  if (!1)
   return __cmpxchg_called_with_bad_pointer();

  return ({ __typeof(*((volatile u64 *)ptr)) __ret; if (1) { __asm__ __volatile__( "	.set	push				\n" "	.set	noat				\n" "	.set	push				\n" "	.set	""arch=r4000""		\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" "1:	" "lld" "	%0, %2		# __cmpxchg_asm \n" "	bne	%0, %z3, 2f			\n" "	.set	pop				\n" "	move	$1, %z4				\n" "	.set	""arch=r4000""		\n" "	" "scd" "	$1, %1				\n" "\t" "beqz	" "$1, 1b				\n" "	.set	pop				\n" "2:	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "		\n" : "=&r" (__ret), "=" "ZC" (*(volatile u64 *)ptr) : "ZC" (*(volatile u64 *)ptr), "Jr" ((u64)old), "Jr" (new) : ); } else { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); __ret = *(volatile u64 *)ptr; if (__ret == (u64)old) *(volatile u64 *)ptr = new; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } __ret; });


 default:
  return __cmpxchg_called_with_bad_pointer();
 }
}
# 23 "./arch/mips/include/asm/atomic.h" 2
# 49 "./arch/mips/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_read(const atomic_t *v) { return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_0(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_0(); } while (0); (*(const volatile typeof( _Generic((v->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (v->counter))) *)&(v->counter)); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_set(atomic_t *v, int i) { do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_1(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_1(); } while (0); do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg(atomic_t *v, int o, int n) { return ({ __typeof__(*(&v->counter)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = ((__typeof__(*((&v->counter)))) __cmpxchg(((&v->counter)), (unsigned long)(__typeof__(*((&v->counter))))((o)), (unsigned long)(__typeof__(*((&v->counter))))((n)), sizeof(*((&v->counter))))); if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_xchg(atomic_t *v, int n) { return ({ __typeof__(*(&v->counter)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = (__typeof__(*(&v->counter))) __xchg((&v->counter), (unsigned long)(n), sizeof(*(&v->counter))); __asm__ __volatile__("sync" : : :"memory"); __res; }); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_read(const atomic64_t *v) { return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_2(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_2(); } while (0); (*(const volatile typeof( _Generic((v->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (v->counter))) *)&(v->counter)); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_set(atomic64_t *v, s64 i) { do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_3(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_3(); } while (0); do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_cmpxchg(atomic64_t *v, s64 o, s64 n) { return ({ __typeof__(*(&v->counter)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = ((__typeof__(*((&v->counter)))) __cmpxchg(((&v->counter)), (unsigned long)(__typeof__(*((&v->counter))))((o)), (unsigned long)(__typeof__(*((&v->counter))))((n)), sizeof(*((&v->counter))))); if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_xchg(atomic64_t *v, s64 n) { return ({ __typeof__(*(&v->counter)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = (__typeof__(*(&v->counter))) __xchg((&v->counter), (unsigned long)(n), sizeof(*(&v->counter))); __asm__ __volatile__("sync" : : :"memory"); __res; }); }
# 156 "./arch/mips/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_add(int i, atomic_t * v) { int temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter += i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%0, %1		# " "atomic" "_" "add" "	\n" "	" "addu" " %0, %2				\n" "	" "sc" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_add_return_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; result += i; v->counter = result; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_" "add" "_return\n" "	" "addu" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	" "addu" " %0, %1, %3				\n" "	.set	pop					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter += i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_fetch_" "add" "\n" "	" "addu" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_sub(int i, atomic_t * v) { int temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter -= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%0, %1		# " "atomic" "_" "sub" "	\n" "	" "subu" " %0, %2				\n" "	" "sc" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_return_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; result -= i; v->counter = result; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_" "sub" "_return\n" "	" "subu" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	" "subu" " %0, %1, %3				\n" "	.set	pop					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_sub_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter -= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_fetch_" "sub" "\n" "	" "subu" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_add(s64 i, atomic64_t * v) { s64 temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter += i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%0, %1		# " "atomic64" "_" "add" "	\n" "	" "daddu" " %0, %2				\n" "	" "scd" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_add_return_relaxed(s64 i, atomic64_t * v) { s64 temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; result += i; v->counter = result; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_" "add" "_return\n" "	" "daddu" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	" "daddu" " %0, %1, %3				\n" "	.set	pop					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_add_relaxed(s64 i, atomic64_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter += i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_fetch_" "add" "\n" "	" "daddu" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_sub(s64 i, atomic64_t * v) { s64 temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter -= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%0, %1		# " "atomic64" "_" "sub" "	\n" "	" "dsubu" " %0, %2				\n" "	" "scd" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_sub_return_relaxed(s64 i, atomic64_t * v) { s64 temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; result -= i; v->counter = result; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_" "sub" "_return\n" "	" "dsubu" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	" "dsubu" " %0, %1, %3				\n" "	.set	pop					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_sub_relaxed(s64 i, atomic64_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter -= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_fetch_" "sub" "\n" "	" "dsubu" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
# 178 "./arch/mips/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_and(int i, atomic_t * v) { int temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter &= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%0, %1		# " "atomic" "_" "and" "	\n" "	" "and" " %0, %2				\n" "	" "sc" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_and_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter &= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_fetch_" "and" "\n" "	" "and" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_or(int i, atomic_t * v) { int temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter |= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%0, %1		# " "atomic" "_" "or" "	\n" "	" "or" " %0, %2				\n" "	" "sc" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_or_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter |= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_fetch_" "or" "\n" "	" "or" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_xor(int i, atomic_t * v) { int temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter ^= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%0, %1		# " "atomic" "_" "xor" "	\n" "	" "xor" " %0, %2				\n" "	" "sc" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_xor_relaxed(int i, atomic_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter ^= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# " "atomic" "_fetch_" "xor" "\n" "	" "xor" " %0, %1, %3				\n" "	" "sc" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_and(s64 i, atomic64_t * v) { s64 temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter &= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%0, %1		# " "atomic64" "_" "and" "	\n" "	" "and" " %0, %2				\n" "	" "scd" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_and_relaxed(s64 i, atomic64_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter &= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_fetch_" "and" "\n" "	" "and" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_or(s64 i, atomic64_t * v) { s64 temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter |= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%0, %1		# " "atomic64" "_" "or" "	\n" "	" "or" " %0, %2				\n" "	" "scd" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_or_relaxed(s64 i, atomic64_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter |= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_fetch_" "or" "\n" "	" "or" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_xor(s64 i, atomic64_t * v) { s64 temp; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); v->counter ^= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%0, %1		# " "atomic64" "_" "xor" "	\n" "	" "xor" " %0, %2				\n" "	" "scd" "	%0, %1					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" : "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_xor_relaxed(s64 i, atomic64_t * v) { int temp, result; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; v->counter ^= i; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# " "atomic64" "_fetch_" "xor" "\n" "	" "xor" " %0, %1, %3				\n" "	" "scd" "	%0, %2					\n" "\t" "beqz	" "%0, 1b					\n" "	.set	pop					\n" "	move	%0, %1					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); return result; }
# 260 "./arch/mips/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_if_positive(int i, atomic_t * v) { int temp, result; ; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; result -= i; if (result >= 0) v->counter = result; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); __asm__ __volatile__("sync" : : :"memory"); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "ll" "	%1, %2		# atomic_sub_if_positive\n" "	.set	pop					\n" "	" "subu" "	%0, %1, %3				\n" "	move	%1, %0					\n" "	bltz	%0, 2f					\n" "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" "sc" "	%1, %2					\n" "	" "beqz	" "%1, 1b				\n" "2:	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "	.set	pop					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); return result; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_sub_if_positive(s64 i, atomic64_t * v) { s64 temp, result; ; if (!1) { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); result = v->counter; result -= i; if (result >= 0) v->counter = result; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); __asm__ __volatile__("sync" : : :"memory"); return result; } __asm__ __volatile__( "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "1:	" "lld" "	%1, %2		# atomic_sub_if_positive\n" "	.set	pop					\n" "	" "dsubu" "	%0, %1, %3				\n" "	move	%1, %0					\n" "	bltz	%0, 2f					\n" "	.set	push					\n" "	.set	" "mips64r2" "			\n" "	" "scd" "	%1, %2					\n" "	" "beqz	" "%1, 1b				\n" "2:	" ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n" "	.set	pop					\n" : "=&r" (result), "=&r" (temp), "+" "ZC" (v->counter) : "Ir" (i) : ); if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); return result; }
# 8 "./include/linux/atomic.h" 2
# 80 "./include/linux/atomic.h"
# 1 "./include/linux/atomic/atomic-arch-fallback.h" 1
# 151 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_read_acquire(const atomic_t *v)
{
 return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_4(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_4(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_5(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_5(); } while (0); __sync(); (typeof(*&(v)->counter))___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_set_release(atomic_t *v, int i)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_6(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_6(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_7(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_7(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 175 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_add_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_add_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_add_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 217 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_fetch_add_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 259 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_sub_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 301 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_inc(atomic_t *v)
{
 arch_atomic_add(1, v);
}
# 353 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_acquire(atomic_t *v)
{
 return arch_atomic_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_release(atomic_t *v)
{
 return arch_atomic_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_relaxed(atomic_t *v)
{
 return arch_atomic_add_return_relaxed(1, v);
}
# 434 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_acquire(atomic_t *v)
{
 return arch_atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_release(atomic_t *v)
{
 return arch_atomic_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_add_relaxed(1, v);
}
# 508 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_dec(atomic_t *v)
{
 arch_atomic_sub(1, v);
}
# 524 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_acquire(atomic_t *v)
{
 return arch_atomic_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_release(atomic_t *v)
{
 return arch_atomic_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_relaxed(atomic_t *v)
{
 return arch_atomic_sub_return_relaxed(1, v);
}
# 605 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_acquire(atomic_t *v)
{
 return arch_atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_release(atomic_t *v)
{
 return arch_atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_sub_relaxed(1, v);
}
# 685 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_fetch_and_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_andnot(int i, atomic_t *v)
{
 arch_atomic_and(~i, v);
}
# 737 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_acquire(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_release(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_release(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_relaxed(~i, v);
}
# 817 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_fetch_or_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 859 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor_release(int i, atomic_t *v)
{
                         ;
 return arch_atomic_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor(int i, atomic_t *v)
{
 int ret;
                          ;
 ret = arch_atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 986 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 1085 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_sub_and_test(int i, atomic_t *v)
{
 return arch_atomic_sub_return(i, v) == 0;
}
# 1102 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_and_test(atomic_t *v)
{
 return arch_atomic_dec_return(v) == 0;
}
# 1119 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_and_test(atomic_t *v)
{
 return arch_atomic_inc_return(v) == 0;
}
# 1137 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_negative(int i, atomic_t *v)
{
 return arch_atomic_add_return(i, v) < 0;
}
# 1155 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + a));

 return c;
}
# 1180 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 return arch_atomic_fetch_add_unless(v, a, u) != u;
}
# 1196 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_not_zero(atomic_t *v)
{
 return arch_atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_unless_negative(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_unless_positive(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 1258 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_read_acquire(const atomic64_t *v)
{
 return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_8(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_8(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_9(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_9(); } while (0); __sync(); (typeof(*&(v)->counter))___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_set_release(atomic64_t *v, s64 i)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_10(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_10(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_11(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_11(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 1282 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_add_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_add_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_add_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 1324 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_add_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_fetch_add_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_fetch_add_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 1366 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_sub_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_sub_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_sub_return_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 1408 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_inc(atomic64_t *v)
{
 arch_atomic64_add(1, v);
}
# 1460 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_acquire(atomic64_t *v)
{
 return arch_atomic64_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_release(atomic64_t *v)
{
 return arch_atomic64_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_add_return_relaxed(1, v);
}
# 1541 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_release(atomic64_t *v)
{
 return arch_atomic64_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_add_relaxed(1, v);
}
# 1615 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_dec(atomic64_t *v)
{
 arch_atomic64_sub(1, v);
}
# 1631 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_acquire(atomic64_t *v)
{
 return arch_atomic64_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_release(atomic64_t *v)
{
 return arch_atomic64_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_sub_return_relaxed(1, v);
}
# 1712 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_release(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(1, v);
}
# 1792 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_and_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_fetch_and_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_fetch_and_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_andnot(s64 i, atomic64_t *v)
{
 arch_atomic64_and(~i, v);
}
# 1844 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_acquire(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_release(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_relaxed(~i, v);
}
# 1924 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_or_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_fetch_or_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_fetch_or_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 1966 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
                         ;
 return arch_atomic64_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 s64 ret;
                          ;
 ret = arch_atomic64_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("sync" : : :"memory");
 return ret;
}
# 2093 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 2192 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return arch_atomic64_sub_return(i, v) == 0;
}
# 2209 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_and_test(atomic64_t *v)
{
 return arch_atomic64_dec_return(v) == 0;
}
# 2226 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_and_test(atomic64_t *v)
{
 return arch_atomic64_inc_return(v) == 0;
}
# 2244 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_negative(s64 i, atomic64_t *v)
{
 return arch_atomic64_add_return(i, v) < 0;
}
# 2262 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + a));

 return c;
}
# 2287 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return arch_atomic64_fetch_add_unless(v, a, u) != u;
}
# 2303 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_not_zero(atomic64_t *v)
{
 return arch_atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 81 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-long.h" 1
# 13 "./include/linux/atomic/atomic-long.h"
typedef atomic64_t atomic_long_t;
# 26 "./include/linux/atomic/atomic-long.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read(const atomic_long_t *v)
{
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read_acquire(const atomic_long_t *v)
{
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set(atomic_long_t *v, long i)
{
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set_release(atomic_long_t *v, long i)
{
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_add(long i, atomic_long_t *v)
{
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_sub(long i, atomic_long_t *v)
{
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_inc(atomic_long_t *v)
{
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return(atomic_long_t *v)
{
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_release(atomic_long_t *v)
{
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_dec(atomic_long_t *v)
{
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return(atomic_long_t *v)
{
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_release(atomic_long_t *v)
{
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_and(long i, atomic_long_t *v)
{
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_andnot(long i, atomic_long_t *v)
{
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_or(long i, atomic_long_t *v)
{
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_xor(long i, atomic_long_t *v)
{
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_acquire(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_release(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_relaxed(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_and_test(atomic_long_t *v)
{
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_and_test(atomic_long_t *v)
{
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_negative(long i, atomic_long_t *v)
{
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_not_zero(atomic_long_t *v)
{
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_if_positive(atomic_long_t *v)
{
 return arch_atomic64_sub_if_positive(1, v);
}
# 82 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-instrumented.h" 1
# 22 "./include/linux/atomic/atomic-instrumented.h"
# 1 "./include/linux/instrumented.h" 1
# 24 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, 0);
}
# 39 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 0));
}
# 54 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 1) | (1 << 0));
}
# 69 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, (1 << 2));
}
# 84 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0));
}
# 99 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
}
# 115 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_to_user(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 kcsan_check_access(from, n, 0);
}
# 132 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_from_user(const void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 kcsan_check_access(to, n, (1 << 0));
}
# 23 "./include/linux/atomic/atomic-instrumented.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read_acquire(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set_release(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_if_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_if_positive(1, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_if_positive(1, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_relaxed(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_if_positive(v);
}
# 83 "./include/linux/atomic.h" 2
# 15 "./arch/mips/include/asm/processor.h" 2
# 1 "./include/linux/cpumask.h" 1
# 10 "./include/linux/cpumask.h"
# 1 "./include/linux/kernel.h" 1





# 1 "./include/linux/align.h" 1
# 7 "./include/linux/kernel.h" 2





# 1 "./include/linux/container_of.h" 1





# 1 "./include/linux/err.h" 1
# 24 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 7 "./include/linux/container_of.h" 2
# 13 "./include/linux/kernel.h" 2

# 1 "./include/linux/kstrtox.h" 1








int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 30 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 58 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}
# 145 "./include/linux/kstrtox.h"
extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}
# 15 "./include/linux/kernel.h" 2
# 1 "./include/linux/log2.h" 1
# 21 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 198 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 225 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 16 "./include/linux/kernel.h" 2

# 1 "./include/linux/minmax.h" 1
# 18 "./include/linux/kernel.h" 2




# 1 "./include/linux/static_call_types.h" 1
# 32 "./include/linux/static_call_types.h"
struct static_call_site {
 s32 addr;
 s32 key;
};
# 94 "./include/linux/static_call_types.h"
struct static_call_key {
 void *func;
};
# 23 "./include/linux/kernel.h" 2
# 1 "./include/linux/instruction_pointer.h" 1
# 24 "./include/linux/kernel.h" 2
# 85 "./include/linux/kernel.h"
struct completion;
struct user;
# 168 "./include/linux/kernel.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __might_resched(const char *file, int line,
         unsigned int offsets) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __might_sleep(const char *file, int line) { }
# 186 "./include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_fault(void) { }


void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int no_hash_pointers_enable(char *str);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

extern void bust_spinlocks(int yes);

extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_FREEING_INITMEM,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;

extern const char hex_asc[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 301 "./include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 380 "./include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((__format__(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 421 "./include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 443 "./include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 11 "./include/linux/cpumask.h" 2

# 1 "./include/linux/bitmap.h" 1
# 10 "./include/linux/bitmap.h"
# 1 "./include/linux/string.h" 1
# 10 "./include/linux/string.h"
# 1 "./include/uapi/linux/string.h" 1
# 11 "./include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "./arch/mips/include/asm/string.h" 1
# 14 "./arch/mips/include/asm/string.h"
extern void *memset(void *__s, int __c, size_t __count);


extern void *memcpy(void *__to, __const__ void *__from, size_t __n);


extern void *memmove(void *__dest, __const__ void *__src, size_t __n);
# 21 "./include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);


extern int strncmp(const char *,const char *,__kernel_size_t);


extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);


extern char * strchr(const char *,int);


extern char * strchrnul(const char *,int);

extern char * strnchrnul(const char *, size_t, int);

extern char * strnchr(const char *, size_t, int);


extern char * strrchr(const char *,int);

extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);



extern void *memset32(uint32_t *, uint32_t, __kernel_size_t);



extern void *memset64(uint64_t *, uint64_t, __kernel_size_t);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 153 "./include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp(const void *,const void *,__kernel_size_t);


extern int bcmp(const void *,const void *,__kernel_size_t);


extern void * memchr(const void *,int,__kernel_size_t);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
}


void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 199 "./include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((__format__(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);

int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
# 235 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_explicit(void *s, size_t count)
{
 memset(s, 0, count);
 __asm__ __volatile__("": :"r"(s) :"memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}





void memcpy_and_pad(void *dest, size_t dest_len, const void *src, size_t count,
      int pad);
# 309 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 11 "./include/linux/bitmap.h" 2


struct device;
# 124 "./include/linux/bitmap.h"
unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_alloc_node(unsigned int nbits, gfp_t flags, int node);
unsigned long *bitmap_zalloc_node(unsigned int nbits, gfp_t flags, int node);
void bitmap_free(const unsigned long *bitmap);


unsigned long *devm_bitmap_alloc(struct device *dev,
     unsigned int nbits, gfp_t flags);
unsigned long *devm_bitmap_zalloc(struct device *dev,
      unsigned int nbits, gfp_t flags);





int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
void __bitmap_complement(unsigned long *dst, const unsigned long *src,
    unsigned int nbits);
void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
     unsigned int shift, unsigned int nbits);
void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
void bitmap_cut(unsigned long *dst, const unsigned long *src,
  unsigned int first, unsigned int cut, unsigned int nbits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
    const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_replace(unsigned long *dst,
        const unsigned long *old, const unsigned long *new,
        const unsigned long *mask, unsigned int nbits);
int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_subset(const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
void __bitmap_set(unsigned long *map, unsigned int start, int len);
void __bitmap_clear(unsigned long *map, unsigned int start, int len);

unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 192 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *dst, int nbits);
int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);






unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);

extern int bitmap_print_bitmask_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);

extern int bitmap_print_list_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 64)
  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
}






void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
       unsigned int nbits);
void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
       unsigned int nbits);
# 289 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 339 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 359 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_replace(unsigned long *dst,
      const unsigned long *old,
      const unsigned long *new,
      const unsigned long *mask,
      unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*old & ~(*mask)) | (*new & *mask);
 else
  __bitmap_replace(dst, old, new, mask, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_clear_region(unsigned long *bitmap,
         unsigned int *rs, unsigned int *re,
         unsigned int end)
{
 *rs = find_next_zero_bit(bitmap, end, *rs);
 *re = find_next_bit(bitmap, end, *rs + 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_set_region(unsigned long *bitmap,
       unsigned int *rs, unsigned int *re,
       unsigned int end)
{
 *rs = find_next_bit(bitmap, end, *rs);
 *re = find_next_zero_bit(bitmap, end, *rs + 1);
}
# 547 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 563 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long bitmap_get_value8(const unsigned long *map,
           unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 return (map[index] >> offset) & 0xFF;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_set_value8(unsigned long *map, unsigned long value,
         unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 map[index] &= ~(0xFFUL << offset);
 map[index] |= value << offset;
}
# 13 "./include/linux/cpumask.h" 2




typedef struct cpumask { unsigned long bits[(((16) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 39 "./include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 90 "./include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_dying_mask;






extern atomic_t __num_online_cpus;

extern cpumask_t cpus_booted_once_mask;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{



}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)16));
 return cpu;
}
# 193 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_first_bit(((srcp)->bits), ((unsigned int)16));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), ((unsigned int)16));
}

unsigned int __attribute__((__pure__)) cpumask_next(int n, const struct cpumask *srcp);
# 218 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)16), n+1);
}

int __attribute__((__pure__)) cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int __attribute__((__pure__)) cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
int cpumask_any_and_distribute(const struct cpumask *src1p,
          const struct cpumask *src2p);
int cpumask_any_distribute(const struct cpumask *srcp);
# 257 "./include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 309 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 arch___set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 arch___clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 342 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return arch_test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 356 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 370 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)16));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)16));
}
# 401 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)16));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)16));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)16));
}
# 444 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)16));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)16));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)16));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)16));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)16));
}
# 509 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)16));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)16));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)16));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)16));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)16));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)16));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)16));
}
# 620 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)16));
}
# 634 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)16));
}
# 648 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)16));
}
# 660 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)16));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_size(void)
{
 return (((((unsigned int)16)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 733 "./include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((16) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 793 "./include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_dying(unsigned int cpu, bool dying)
{
 if (dying)
  cpumask_set_cpu(cpu, &__cpu_dying_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_dying_mask);
}
# 854 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 866 "./include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((16) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 885 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int num_online_cpus(void)
{
 return atomic_read(&__num_online_cpus);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_online(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_online_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_possible(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_possible_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_present(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_present_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_active(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_active_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_dying(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_dying_mask));
}
# 979 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 1002 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_bitmask_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_bitmask_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count) - 1;
}
# 1017 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_list_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_list_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count) - 1;
}
# 16 "./arch/mips/include/asm/processor.h" 2
# 1 "./include/linux/sizes.h" 1
# 17 "./arch/mips/include/asm/processor.h" 2


# 1 "./arch/mips/include/uapi/asm/cachectl.h" 1
# 20 "./arch/mips/include/asm/processor.h" 2


# 1 "./arch/mips/include/asm/dsemul.h" 1
# 11 "./arch/mips/include/asm/dsemul.h"
# 1 "./arch/mips/include/asm/inst.h" 1
# 14 "./arch/mips/include/asm/inst.h"
# 1 "./arch/mips/include/uapi/asm/inst.h" 1
# 17 "./arch/mips/include/uapi/asm/inst.h"
# 1 "./arch/mips/include/uapi/asm/bitfield.h" 1
# 18 "./arch/mips/include/uapi/asm/inst.h" 2




enum major_op {
 spec_op, bcond_op, j_op, jal_op,
 beq_op, bne_op, blez_op, bgtz_op,
 addi_op, pop10_op = addi_op, addiu_op, slti_op, sltiu_op,
 andi_op, ori_op, xori_op, lui_op,
 cop0_op, cop1_op, cop2_op, cop1x_op,
 beql_op, bnel_op, blezl_op, bgtzl_op,
 daddi_op, pop30_op = daddi_op, daddiu_op, ldl_op, ldr_op,
 spec2_op, jalx_op, mdmx_op, msa_op = mdmx_op, spec3_op,
 lb_op, lh_op, lwl_op, lw_op,
 lbu_op, lhu_op, lwr_op, lwu_op,
 sb_op, sh_op, swl_op, sw_op,
 sdl_op, sdr_op, swr_op, cache_op,
 ll_op, lwc1_op, lwc2_op, bc6_op = lwc2_op, pref_op,
 lld_op, ldc1_op, ldc2_op, pop66_op = ldc2_op, ld_op,
 sc_op, swc1_op, swc2_op, balc6_op = swc2_op, major_3b_op,
 scd_op, sdc1_op, sdc2_op, pop76_op = sdc2_op, sd_op
};




enum spec_op {
 sll_op, movc_op, srl_op, sra_op,
 sllv_op, pmon_op, srlv_op, srav_op,
 jr_op, jalr_op, movz_op, movn_op,
 syscall_op, break_op, spim_op, sync_op,
 mfhi_op, mthi_op, mflo_op, mtlo_op,
 dsllv_op, spec2_unused_op, dsrlv_op, dsrav_op,
 mult_op, multu_op, div_op, divu_op,
 dmult_op, dmultu_op, ddiv_op, ddivu_op,
 add_op, addu_op, sub_op, subu_op,
 and_op, or_op, xor_op, nor_op,
 spec3_unused_op, spec4_unused_op, slt_op, sltu_op,
 dadd_op, daddu_op, dsub_op, dsubu_op,
 tge_op, tgeu_op, tlt_op, tltu_op,
 teq_op, seleqz_op, tne_op, selnez_op,
 dsll_op, spec5_unused_op, dsrl_op, dsra_op,
 dsll32_op, spec6_unused_op, dsrl32_op, dsra32_op
};




enum spec2_op {
 madd_op, maddu_op, mul_op, spec2_3_unused_op,
 msub_op, msubu_op,
 clz_op = 0x20, clo_op,
 dclz_op = 0x24, dclo_op,
 sdbpp_op = 0x3f
};




enum spec3_op {
 ext_op, dextm_op, dextu_op, dext_op,
 ins_op, dinsm_op, dinsu_op, dins_op,
 yield_op = 0x09, lx_op = 0x0a,
 lwle_op = 0x19, lwre_op = 0x1a,
 cachee_op = 0x1b, sbe_op = 0x1c,
 she_op = 0x1d, sce_op = 0x1e,
 swe_op = 0x1f, bshfl_op = 0x20,
 swle_op = 0x21, swre_op = 0x22,
 prefe_op = 0x23, dbshfl_op = 0x24,
 cache6_op = 0x25, sc6_op = 0x26,
 scd6_op = 0x27, lbue_op = 0x28,
 lhue_op = 0x29, lbe_op = 0x2c,
 lhe_op = 0x2d, lle_op = 0x2e,
 lwe_op = 0x2f, pref6_op = 0x35,
 ll6_op = 0x36, lld6_op = 0x37,
 rdhwr_op = 0x3b
};




enum mult_op {
 mult_mult_op = 0x0,
 mult_mul_op = 0x2,
 mult_muh_op = 0x3,
};
enum multu_op {
 multu_multu_op = 0x0,
 multu_mulu_op = 0x2,
 multu_muhu_op = 0x3,
};
enum div_op {
 div_div_op = 0x0,
 div_div6_op = 0x2,
 div_mod_op = 0x3,
};
enum divu_op {
 divu_divu_op = 0x0,
 divu_divu6_op = 0x2,
 divu_modu_op = 0x3,
};
enum dmult_op {
 dmult_dmult_op = 0x0,
 dmult_dmul_op = 0x2,
 dmult_dmuh_op = 0x3,
};
enum dmultu_op {
 dmultu_dmultu_op = 0x0,
 dmultu_dmulu_op = 0x2,
 dmultu_dmuhu_op = 0x3,
};
enum ddiv_op {
 ddiv_ddiv_op = 0x0,
 ddiv_ddiv6_op = 0x2,
 ddiv_dmod_op = 0x3,
};
enum ddivu_op {
 ddivu_ddivu_op = 0x0,
 ddivu_ddivu6_op = 0x2,
 ddivu_dmodu_op = 0x3,
};




enum rt_op {
 bltz_op, bgez_op, bltzl_op, bgezl_op,
 spimi_op, unused_rt_op_0x05, unused_rt_op_0x06, unused_rt_op_0x07,
 tgei_op, tgeiu_op, tlti_op, tltiu_op,
 teqi_op, unused_0x0d_rt_op, tnei_op, unused_0x0f_rt_op,
 bltzal_op, bgezal_op, bltzall_op, bgezall_op,
 rt_op_0x14, rt_op_0x15, rt_op_0x16, rt_op_0x17,
 rt_op_0x18, rt_op_0x19, rt_op_0x1a, rt_op_0x1b,
 bposge32_op, rt_op_0x1d, rt_op_0x1e, synci_op
};




enum cop_op {
 mfc_op = 0x00, dmfc_op = 0x01,
 cfc_op = 0x02, mfhc0_op = 0x02,
 mfhc_op = 0x03, mtc_op = 0x04,
 dmtc_op = 0x05, ctc_op = 0x06,
 mthc0_op = 0x06, mthc_op = 0x07,
 bc_op = 0x08, bc1eqz_op = 0x09,
 mfmc0_op = 0x0b, bc1nez_op = 0x0d,
 wrpgpr_op = 0x0e, cop_op = 0x10,
 copm_op = 0x18
};




enum bcop_op {
 bcf_op, bct_op, bcfl_op, bctl_op
};




enum cop0_coi_func {
 tlbr_op = 0x01, tlbwi_op = 0x02,
 tlbwr_op = 0x06, tlbp_op = 0x08,
 rfe_op = 0x10, eret_op = 0x18,
 wait_op = 0x20, hypcall_op = 0x28
};




enum cop0_com_func {
 tlbr1_op = 0x01, tlbw_op = 0x02,
 tlbp1_op = 0x08, dctr_op = 0x09,
 dctw_op = 0x0a
};




enum cop1_fmt {
 s_fmt, d_fmt, e_fmt, q_fmt,
 w_fmt, l_fmt
};




enum cop1_sdw_func {
 fadd_op = 0x00, fsub_op = 0x01,
 fmul_op = 0x02, fdiv_op = 0x03,
 fsqrt_op = 0x04, fabs_op = 0x05,
 fmov_op = 0x06, fneg_op = 0x07,
 froundl_op = 0x08, ftruncl_op = 0x09,
 fceill_op = 0x0a, ffloorl_op = 0x0b,
 fround_op = 0x0c, ftrunc_op = 0x0d,
 fceil_op = 0x0e, ffloor_op = 0x0f,
 fsel_op = 0x10,
 fmovc_op = 0x11, fmovz_op = 0x12,
 fmovn_op = 0x13, fseleqz_op = 0x14,
 frecip_op = 0x15, frsqrt_op = 0x16,
 fselnez_op = 0x17, fmaddf_op = 0x18,
 fmsubf_op = 0x19, frint_op = 0x1a,
 fclass_op = 0x1b, fmin_op = 0x1c,
 fmina_op = 0x1d, fmax_op = 0x1e,
 fmaxa_op = 0x1f, fcvts_op = 0x20,
 fcvtd_op = 0x21, fcvte_op = 0x22,
 fcvtw_op = 0x24, fcvtl_op = 0x25,
 fcmp_op = 0x30
};




enum cop1x_func {
 lwxc1_op = 0x00, ldxc1_op = 0x01,
 swxc1_op = 0x08, sdxc1_op = 0x09,
 pfetch_op = 0x0f, madd_s_op = 0x20,
 madd_d_op = 0x21, madd_e_op = 0x22,
 msub_s_op = 0x28, msub_d_op = 0x29,
 msub_e_op = 0x2a, nmadd_s_op = 0x30,
 nmadd_d_op = 0x31, nmadd_e_op = 0x32,
 nmsub_s_op = 0x38, nmsub_d_op = 0x39,
 nmsub_e_op = 0x3a
};




enum mad_func {
 madd_fp_op = 0x08, msub_fp_op = 0x0a,
 nmadd_fp_op = 0x0c, nmsub_fp_op = 0x0e
};




enum ptw_func {
 lwdir_op = 0x00,
 lwpte_op = 0x01,
 lddir_op = 0x02,
 ldpte_op = 0x03,
};




enum lx_func {
 lwx_op = 0x00,
 lhx_op = 0x04,
 lbux_op = 0x06,
 ldx_op = 0x08,
 lwux_op = 0x10,
 lhux_op = 0x14,
 lbx_op = 0x16,
};




enum bshfl_func {
 wsbh_op = 0x2,
 seb_op = 0x10,
 seh_op = 0x18,
};




enum dbshfl_func {
 dsbh_op = 0x2,
 dshd_op = 0x5,
};




enum msa_func {
 msa_elm_op = 0x19,
};




enum msa_elm {
 msa_ctc_op = 0x3e,
 msa_cfc_op = 0x7e,
};




enum msa_mi10_func {
 msa_ld_op = 8,
 msa_st_op = 9,
};




enum msa_2b_fmt {
 msa_fmt_b = 0,
 msa_fmt_h = 1,
 msa_fmt_w = 2,
 msa_fmt_d = 3,
};




enum mm_major_op {
 mm_pool32a_op, mm_pool16a_op, mm_lbu16_op, mm_move16_op,
 mm_addi32_op, mm_lbu32_op, mm_sb32_op, mm_lb32_op,
 mm_pool32b_op, mm_pool16b_op, mm_lhu16_op, mm_andi16_op,
 mm_addiu32_op, mm_lhu32_op, mm_sh32_op, mm_lh32_op,
 mm_pool32i_op, mm_pool16c_op, mm_lwsp16_op, mm_pool16d_op,
 mm_ori32_op, mm_pool32f_op, mm_pool32s_op, mm_reserved2_op,
 mm_pool32c_op, mm_lwgp16_op, mm_lw16_op, mm_pool16e_op,
 mm_xori32_op, mm_jals32_op, mm_addiupc_op, mm_reserved3_op,
 mm_reserved4_op, mm_pool16f_op, mm_sb16_op, mm_beqz16_op,
 mm_slti32_op, mm_beq32_op, mm_swc132_op, mm_lwc132_op,
 mm_reserved5_op, mm_reserved6_op, mm_sh16_op, mm_bnez16_op,
 mm_sltiu32_op, mm_bne32_op, mm_sdc132_op, mm_ldc132_op,
 mm_reserved7_op, mm_reserved8_op, mm_swsp16_op, mm_b16_op,
 mm_andi32_op, mm_j32_op, mm_sd32_op, mm_ld32_op,
 mm_reserved11_op, mm_reserved12_op, mm_sw16_op, mm_li16_op,
 mm_jalx32_op, mm_jal32_op, mm_sw32_op, mm_lw32_op,
};




enum mm_32i_minor_op {
 mm_bltz_op, mm_bltzal_op, mm_bgez_op, mm_bgezal_op,
 mm_blez_op, mm_bnezc_op, mm_bgtz_op, mm_beqzc_op,
 mm_tlti_op, mm_tgei_op, mm_tltiu_op, mm_tgeiu_op,
 mm_tnei_op, mm_lui_op, mm_teqi_op, mm_reserved13_op,
 mm_synci_op, mm_bltzals_op, mm_reserved14_op, mm_bgezals_op,
 mm_bc2f_op, mm_bc2t_op, mm_reserved15_op, mm_reserved16_op,
 mm_reserved17_op, mm_reserved18_op, mm_bposge64_op, mm_bposge32_op,
 mm_bc1f_op, mm_bc1t_op, mm_reserved19_op, mm_reserved20_op,
 mm_bc1any2f_op, mm_bc1any2t_op, mm_bc1any4f_op, mm_bc1any4t_op,
};




enum mm_32a_minor_op {
 mm_sll32_op = 0x000,
 mm_ins_op = 0x00c,
 mm_sllv32_op = 0x010,
 mm_ext_op = 0x02c,
 mm_pool32axf_op = 0x03c,
 mm_srl32_op = 0x040,
 mm_srlv32_op = 0x050,
 mm_sra_op = 0x080,
 mm_srav_op = 0x090,
 mm_rotr_op = 0x0c0,
 mm_lwxs_op = 0x118,
 mm_addu32_op = 0x150,
 mm_subu32_op = 0x1d0,
 mm_wsbh_op = 0x1ec,
 mm_mul_op = 0x210,
 mm_and_op = 0x250,
 mm_or32_op = 0x290,
 mm_xor32_op = 0x310,
 mm_slt_op = 0x350,
 mm_sltu_op = 0x390,
};




enum mm_32b_func {
 mm_lwc2_func = 0x0,
 mm_lwp_func = 0x1,
 mm_ldc2_func = 0x2,
 mm_ldp_func = 0x4,
 mm_lwm32_func = 0x5,
 mm_cache_func = 0x6,
 mm_ldm_func = 0x7,
 mm_swc2_func = 0x8,
 mm_swp_func = 0x9,
 mm_sdc2_func = 0xa,
 mm_sdp_func = 0xc,
 mm_swm32_func = 0xd,
 mm_sdm_func = 0xf,
};




enum mm_32c_func {
 mm_pref_func = 0x2,
 mm_ll_func = 0x3,
 mm_swr_func = 0x9,
 mm_sc_func = 0xb,
 mm_lwu_func = 0xe,
};




enum mm_32axf_minor_op {
 mm_mfc0_op = 0x003,
 mm_mtc0_op = 0x00b,
 mm_tlbp_op = 0x00d,
 mm_mfhi32_op = 0x035,
 mm_jalr_op = 0x03c,
 mm_tlbr_op = 0x04d,
 mm_mflo32_op = 0x075,
 mm_jalrhb_op = 0x07c,
 mm_tlbwi_op = 0x08d,
 mm_mthi32_op = 0x0b5,
 mm_tlbwr_op = 0x0cd,
 mm_mtlo32_op = 0x0f5,
 mm_di_op = 0x11d,
 mm_jalrs_op = 0x13c,
 mm_jalrshb_op = 0x17c,
 mm_sync_op = 0x1ad,
 mm_syscall_op = 0x22d,
 mm_wait_op = 0x24d,
 mm_eret_op = 0x3cd,
 mm_divu_op = 0x5dc,
};




enum mm_32f_minor_op {
 mm_32f_00_op = 0x00,
 mm_32f_01_op = 0x01,
 mm_32f_02_op = 0x02,
 mm_32f_10_op = 0x08,
 mm_32f_11_op = 0x09,
 mm_32f_12_op = 0x0a,
 mm_32f_20_op = 0x10,
 mm_32f_30_op = 0x18,
 mm_32f_40_op = 0x20,
 mm_32f_41_op = 0x21,
 mm_32f_42_op = 0x22,
 mm_32f_50_op = 0x28,
 mm_32f_51_op = 0x29,
 mm_32f_52_op = 0x2a,
 mm_32f_60_op = 0x30,
 mm_32f_70_op = 0x38,
 mm_32f_73_op = 0x3b,
 mm_32f_74_op = 0x3c,
};




enum mm_32f_10_minor_op {
 mm_lwxc1_op = 0x1,
 mm_swxc1_op,
 mm_ldxc1_op,
 mm_sdxc1_op,
 mm_luxc1_op,
 mm_suxc1_op,
};

enum mm_32f_func {
 mm_lwxc1_func = 0x048,
 mm_swxc1_func = 0x088,
 mm_ldxc1_func = 0x0c8,
 mm_sdxc1_func = 0x108,
};




enum mm_32f_40_minor_op {
 mm_fmovf_op,
 mm_fmovt_op,
};




enum mm_32f_60_minor_op {
 mm_fadd_op,
 mm_fsub_op,
 mm_fmul_op,
 mm_fdiv_op,
};




enum mm_32f_70_minor_op {
 mm_fmovn_op,
 mm_fmovz_op,
};




enum mm_32f_73_minor_op {
 mm_fmov0_op = 0x01,
 mm_fcvtl_op = 0x04,
 mm_movf0_op = 0x05,
 mm_frsqrt_op = 0x08,
 mm_ffloorl_op = 0x0c,
 mm_fabs0_op = 0x0d,
 mm_fcvtw_op = 0x24,
 mm_movt0_op = 0x25,
 mm_fsqrt_op = 0x28,
 mm_ffloorw_op = 0x2c,
 mm_fneg0_op = 0x2d,
 mm_cfc1_op = 0x40,
 mm_frecip_op = 0x48,
 mm_fceill_op = 0x4c,
 mm_fcvtd0_op = 0x4d,
 mm_ctc1_op = 0x60,
 mm_fceilw_op = 0x6c,
 mm_fcvts0_op = 0x6d,
 mm_mfc1_op = 0x80,
 mm_fmov1_op = 0x81,
 mm_movf1_op = 0x85,
 mm_ftruncl_op = 0x8c,
 mm_fabs1_op = 0x8d,
 mm_mtc1_op = 0xa0,
 mm_movt1_op = 0xa5,
 mm_ftruncw_op = 0xac,
 mm_fneg1_op = 0xad,
 mm_mfhc1_op = 0xc0,
 mm_froundl_op = 0xcc,
 mm_fcvtd1_op = 0xcd,
 mm_mthc1_op = 0xe0,
 mm_froundw_op = 0xec,
 mm_fcvts1_op = 0xed,
};




enum mm_32s_minor_op {
 mm_32s_elm_op = 0x16,
};




enum mm_16c_minor_op {
 mm_lwm16_op = 0x04,
 mm_swm16_op = 0x05,
 mm_jr16_op = 0x0c,
 mm_jrc_op = 0x0d,
 mm_jalr16_op = 0x0e,
 mm_jalrs16_op = 0x0f,
 mm_jraddiusp_op = 0x18,
};




enum mm_16d_minor_op {
 mm_addius5_func,
 mm_addiusp_func,
};




enum MIPS16e_ops {
 MIPS16e_jal_op = 003,
 MIPS16e_ld_op = 007,
 MIPS16e_i8_op = 014,
 MIPS16e_sd_op = 017,
 MIPS16e_lb_op = 020,
 MIPS16e_lh_op = 021,
 MIPS16e_lwsp_op = 022,
 MIPS16e_lw_op = 023,
 MIPS16e_lbu_op = 024,
 MIPS16e_lhu_op = 025,
 MIPS16e_lwpc_op = 026,
 MIPS16e_lwu_op = 027,
 MIPS16e_sb_op = 030,
 MIPS16e_sh_op = 031,
 MIPS16e_swsp_op = 032,
 MIPS16e_sw_op = 033,
 MIPS16e_rr_op = 035,
 MIPS16e_extend_op = 036,
 MIPS16e_i64_op = 037,
};

enum MIPS16e_i64_func {
 MIPS16e_ldsp_func,
 MIPS16e_sdsp_func,
 MIPS16e_sdrasp_func,
 MIPS16e_dadjsp_func,
 MIPS16e_ldpc_func,
};

enum MIPS16e_rr_func {
 MIPS16e_jr_func,
};

enum MIPS6e_i8_func {
 MIPS16e_swrasp_func = 02,
};






struct j_format {
 ; unsigned int target : 26; unsigned int opcode : 6;


};

struct i_format {
 ; signed int simmediate : 16; unsigned int rt : 5; unsigned int rs : 5; unsigned int opcode : 6;




};

struct u_format {
 ; unsigned int uimmediate : 16; unsigned int rt : 5; unsigned int rs : 5; unsigned int opcode : 6;




};

struct c_format {
 ; unsigned int simmediate : 16; unsigned int cache : 2; unsigned int c_op : 3; unsigned int rs : 5; unsigned int opcode : 6;





};

struct r_format {
 ; unsigned int func : 6; unsigned int re : 5; unsigned int rd : 5; unsigned int rt : 5; unsigned int rs : 5; unsigned int opcode : 6;






};

struct c0r_format {
 ; unsigned int sel : 3; unsigned int z: 8; unsigned int rd : 5; unsigned int rt : 5; unsigned int rs : 5; unsigned int opcode : 6;






};

struct mfmc0_format {
 ; unsigned int sel : 3; unsigned int : 2; unsigned int sc : 1; unsigned int re : 5; unsigned int rd : 5; unsigned int rt : 5; unsigned int rs : 5; unsigned int opcode : 6;
# 687 "./arch/mips/include/uapi/asm/inst.h"
};

struct co_format {
 ; unsigned int func : 6; unsigned int code : 19; unsigned int co : 1; unsigned int opcode : 6;




};

struct p_format {
 ; unsigned int func : 6; unsigned int re : 5; unsigned int rd : 5; unsigned int rt : 5; unsigned int rs : 5; unsigned int opcode : 6;






};

struct f_format {
 ; unsigned int func : 6; unsigned int re : 5; unsigned int rd : 5; unsigned int rt : 5; unsigned int fmt : 4; unsigned int : 1; unsigned int opcode : 6;







};

struct ma_format {
 ; unsigned int fmt : 2; unsigned int func : 4; unsigned int fd : 5; unsigned int fs : 5; unsigned int ft : 5; unsigned int fr : 5; unsigned int opcode : 6;







};

struct b_format {
 ; unsigned int func : 6; unsigned int code : 20; unsigned int opcode : 6;



};

struct ps_format {
 ; unsigned int func : 6; unsigned int fd : 5; unsigned int fs : 5; unsigned int ft : 5; unsigned int rs : 5; unsigned int opcode : 6;






};

struct v_format {
 ; unsigned int func : 6; unsigned int vd : 5; unsigned int vs : 5; unsigned int vt : 5; unsigned int fmt : 1; unsigned int sel : 4; unsigned int opcode : 6;







};

struct msa_mi10_format {
 ; unsigned int df : 2; unsigned int func : 4; unsigned int wd : 5; unsigned int rs : 5; signed int s10 : 10; unsigned int opcode : 6;






};

struct dsp_format {
 ; unsigned int func : 6; unsigned int op : 5; unsigned int rd : 5; unsigned int index : 5; unsigned int base : 5; unsigned int opcode : 6;






};

struct spec3_format {
 ; unsigned int func:7; signed int simmediate:9; unsigned int rt:5; unsigned int rs:5; unsigned int opcode:6;





};
# 793 "./arch/mips/include/uapi/asm/inst.h"
struct fb_format {
 ; signed int simmediate : 16; unsigned int flag : 2; unsigned int cc : 3; unsigned int bc : 5; unsigned int opcode : 6;





};

struct fp0_format {
 ; unsigned int func : 6; unsigned int fd : 5; unsigned int fs : 5; unsigned int ft : 5; unsigned int fmt : 5; unsigned int opcode : 6;






};

struct mm_fp0_format {
 ; unsigned int func : 6; unsigned int op : 2; unsigned int fmt : 3; unsigned int fd : 5; unsigned int fs : 5; unsigned int ft : 5; unsigned int opcode : 6;







};

struct fp1_format {
 ; unsigned int func : 6; unsigned int fd : 5; unsigned int fs : 5; unsigned int rt : 5; unsigned int op : 5; unsigned int opcode : 6;






};

struct mm_fp1_format {
 ; unsigned int func : 6; unsigned int op : 8; unsigned int fmt : 2; unsigned int fs : 5; unsigned int rt : 5; unsigned int opcode : 6;






};

struct mm_fp2_format {
 ; unsigned int func : 6; unsigned int op : 3; unsigned int fmt : 2; unsigned int zero : 2; unsigned int cc : 3; unsigned int fs : 5; unsigned int fd : 5; unsigned int opcode : 6;
# 853 "./arch/mips/include/uapi/asm/inst.h"
};

struct mm_fp3_format {
 ; unsigned int func : 6; unsigned int op : 7; unsigned int fmt : 3; unsigned int fs : 5; unsigned int rt : 5; unsigned int opcode : 6;






};

struct mm_fp4_format {
 ; unsigned int func : 6; unsigned int cond : 4; unsigned int fmt : 3; unsigned int cc : 3; unsigned int fs : 5; unsigned int rt : 5; unsigned int opcode : 6;







};

struct mm_fp5_format {
 ; unsigned int func : 6; unsigned int op : 5; unsigned int fd : 5; unsigned int base : 5; unsigned int index : 5; unsigned int opcode : 6;






};

struct fp6_format {
 ; unsigned int func : 6; unsigned int fd : 5; unsigned int fs : 5; unsigned int ft : 5; unsigned int fr : 5; unsigned int opcode : 6;






};

struct mm_fp6_format {
 ; unsigned int func : 6; unsigned int fr : 5; unsigned int fd : 5; unsigned int fs : 5; unsigned int ft : 5; unsigned int opcode : 6;






};

struct mm_i_format {
 ; signed int simmediate : 16; unsigned int rs : 5; unsigned int rt : 5; unsigned int opcode : 6;




};

struct mm_m_format {
 ; signed int simmediate : 12; unsigned int func : 4; unsigned int base : 5; unsigned int rd : 5; unsigned int opcode : 6;





};

struct mm_x_format {
 ; unsigned int func : 11; unsigned int rd : 5; unsigned int base : 5; unsigned int index : 5; unsigned int opcode : 6;





};

struct mm_a_format {
 ; signed int simmediate : 23; unsigned int rs : 3; unsigned int opcode : 6;



};




struct mm_b0_format {
 ; unsigned int : 16; signed int simmediate : 10; unsigned int opcode : 6;



};

struct mm_b1_format {
 ; unsigned int : 16; signed int simmediate : 7; unsigned int rs : 3; unsigned int opcode : 6;




};

struct mm16_m_format {
 ; unsigned int : 16; unsigned int imm : 4; unsigned int rlist : 2; unsigned int func : 4; unsigned int opcode : 6;





};

struct mm16_rb_format {
 ; unsigned int : 16; signed int simmediate : 4; unsigned int base : 3; unsigned int rt : 3; unsigned int opcode : 6;





};

struct mm16_r3_format {
 ; unsigned int : 16; signed int simmediate : 7; unsigned int rt : 3; unsigned int opcode : 6;




};

struct mm16_r5_format {
 ; unsigned int : 16; unsigned int imm : 5; unsigned int rt : 5; unsigned int opcode : 6;




};




struct loongson3_lswc2_format {
 ; unsigned int rq : 5; unsigned int ls : 1; unsigned int offset : 9; unsigned int fr : 1; unsigned int rt : 5; unsigned int base : 5; unsigned int opcode : 6;







};

struct loongson3_lsdc2_format {
 ; unsigned int opcode1 : 3; unsigned int offset : 8; unsigned int index : 5; unsigned int rt : 5; unsigned int base : 5; unsigned int opcode : 6;






};

struct loongson3_lscsr_format {
 ; unsigned int func : 6; unsigned int fd : 5; unsigned int rd : 5; unsigned int fr : 5; unsigned int rs : 5; unsigned int opcode : 6;






};




struct m16e_rr {
 ; unsigned int func : 5; unsigned int ra : 1; unsigned int l : 1; unsigned int nd : 1; unsigned int rx : 3; unsigned int opcode : 5;






};

struct m16e_jal {
 ; signed int imm25_21 : 5; unsigned int imm20_16 : 5; unsigned int x : 1; unsigned int opcode : 5;




};

struct m16e_i64 {
 ; unsigned int imm : 8; unsigned int func : 3; unsigned int opcode : 5;



};

struct m16e_ri64 {
 ; unsigned int imm : 5; unsigned int ry : 3; unsigned int func : 3; unsigned int opcode : 5;




};

struct m16e_ri {
 ; unsigned int imm : 8; unsigned int rx : 3; unsigned int opcode : 5;



};

struct m16e_rri {
 ; unsigned int imm : 5; unsigned int ry : 3; unsigned int rx : 3; unsigned int opcode : 5;




};

struct m16e_i8 {
 ; unsigned int imm : 8; unsigned int func : 3; unsigned int opcode : 5;



};

union mips_instruction {
 unsigned int word;
 unsigned short halfword[2];
 unsigned char byte[4];
 struct j_format j_format;
 struct i_format i_format;
 struct u_format u_format;
 struct c_format c_format;
 struct r_format r_format;
 struct c0r_format c0r_format;
 struct mfmc0_format mfmc0_format;
 struct co_format co_format;
 struct p_format p_format;
 struct f_format f_format;
 struct ma_format ma_format;
 struct msa_mi10_format msa_mi10_format;
 struct b_format b_format;
 struct ps_format ps_format;
 struct v_format v_format;
 struct dsp_format dsp_format;
 struct spec3_format spec3_format;
 struct fb_format fb_format;
 struct fp0_format fp0_format;
 struct mm_fp0_format mm_fp0_format;
 struct fp1_format fp1_format;
 struct mm_fp1_format mm_fp1_format;
 struct mm_fp2_format mm_fp2_format;
 struct mm_fp3_format mm_fp3_format;
 struct mm_fp4_format mm_fp4_format;
 struct mm_fp5_format mm_fp5_format;
 struct fp6_format fp6_format;
 struct mm_fp6_format mm_fp6_format;
 struct mm_i_format mm_i_format;
 struct mm_m_format mm_m_format;
 struct mm_x_format mm_x_format;
 struct mm_a_format mm_a_format;
 struct mm_b0_format mm_b0_format;
 struct mm_b1_format mm_b1_format;
 struct mm16_m_format mm16_m_format ;
 struct mm16_rb_format mm16_rb_format;
 struct mm16_r3_format mm16_r3_format;
 struct mm16_r5_format mm16_r5_format;
 struct loongson3_lswc2_format loongson3_lswc2_format;
 struct loongson3_lsdc2_format loongson3_lsdc2_format;
 struct loongson3_lscsr_format loongson3_lscsr_format;
};

union mips16e_instruction {
 unsigned int full : 16;
 struct m16e_rr rr;
 struct m16e_jal jal;
 struct m16e_i64 i64;
 struct m16e_ri64 ri64;
 struct m16e_ri ri;
 struct m16e_rri rri;
 struct m16e_i8 i8;
};
# 15 "./arch/mips/include/asm/inst.h" 2
# 74 "./arch/mips/include/asm/inst.h"
typedef unsigned int mips_instruction;


struct mm_decoded_insn {
 mips_instruction insn;
 mips_instruction next_insn;
 int pc_inc;
 int next_pc_inc;
 int micro_mips_mode;
};


extern const int reg16to32[];
# 12 "./arch/mips/include/asm/dsemul.h" 2







struct mm_struct;
struct pt_regs;
struct task_struct;
# 37 "./arch/mips/include/asm/dsemul.h"
extern int mips_dsemul(struct pt_regs *regs, mips_instruction ir,
         unsigned long branch_pc, unsigned long cont_pc);
# 52 "./arch/mips/include/asm/dsemul.h"
extern bool do_dsemulret(struct pt_regs *xcp);
# 70 "./arch/mips/include/asm/dsemul.h"
extern bool dsemul_thread_cleanup(struct task_struct *tsk);
# 90 "./arch/mips/include/asm/dsemul.h"
extern bool dsemul_thread_rollback(struct pt_regs *regs);
# 107 "./arch/mips/include/asm/dsemul.h"
extern void dsemul_mm_cleanup(struct mm_struct *mm);
# 23 "./arch/mips/include/asm/processor.h" 2

# 1 "./arch/mips/include/asm/prefetch.h" 1
# 25 "./arch/mips/include/asm/processor.h" 2
# 1 "./arch/mips/include/asm/vdso/processor.h" 1
# 26 "./arch/mips/include/asm/processor.h" 2





extern unsigned int vced_count, vcei_count;
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
# 73 "./arch/mips/include/asm/processor.h"
extern unsigned long mips_stack_top(void);
# 91 "./arch/mips/include/asm/processor.h"
union fpureg {
 __u32 val32[128 / 32];
 __u64 val64[128 / 64];
};
# 114 "./arch/mips/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 get_fpr32(union fpureg *fpr, unsigned idx) { return fpr->val32[(idx)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_fpr32(union fpureg *fpr, unsigned idx, u32 val) { fpr->val32[(idx)] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_fpr64(union fpureg *fpr, unsigned idx) { return fpr->val64[(idx)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_fpr64(union fpureg *fpr, unsigned idx, u64 val) { fpr->val64[(idx)] = val; }







struct mips_fpu_struct {
 union fpureg fpr[32];
 unsigned int fcr31;
 unsigned int msacsr;
};



typedef unsigned long dspreg_t;

struct mips_dsp_state {
 dspreg_t dspr[6];
 unsigned int dspcontrol;
};





struct mips3264_watch_reg_state {



 unsigned long watchlo[4];

 u16 watchhi[4];
};

union mips_watch_reg_state {
 struct mips3264_watch_reg_state mips3264;
};
# 222 "./arch/mips/include/asm/processor.h"
struct mips_abi;




struct thread_struct {

 unsigned long reg16;
 unsigned long reg17, reg18, reg19, reg20, reg21, reg22, reg23;
 unsigned long reg29, reg30, reg31;


 unsigned long cp0_status;



 struct mips_fpu_struct fpu __attribute__((__aligned__(16)));

 atomic_t bd_emu_frame;

 unsigned long bd_emu_branch_pc;

 unsigned long bd_emu_cont_pc;
# 254 "./arch/mips/include/asm/processor.h"
 struct mips_dsp_state dsp;


 union mips_watch_reg_state watch;


 unsigned long cp0_badvaddr;
 unsigned long cp0_baduaddr;
 unsigned long error_code;
 unsigned long trap_nr;




 struct mips_abi *abi;
};
# 345 "./arch/mips/include/asm/processor.h"
struct task_struct;







extern void start_thread(struct pt_regs * regs, unsigned long pc, unsigned long sp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_thread(void)
{
}

unsigned long __get_wchan(struct task_struct *p);
# 396 "./arch/mips/include/asm/processor.h"
extern int mips_get_process_fp_mode(struct task_struct *task);
extern int mips_set_process_fp_mode(struct task_struct *task,
        unsigned int value);
# 17 "./arch/mips/include/asm/thread_info.h" 2








struct thread_info {
 struct task_struct *task;
 unsigned long flags;
 unsigned long tp_value;
 __u32 cpu;
 int preempt_count;
 struct pt_regs *regs;
 long syscall;
};
# 64 "./arch/mips/include/asm/thread_info.h"
register struct thread_info *__current_thread_info __asm__("$28");


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct thread_info *current_thread_info(void)
{
 return __current_thread_info;
}
# 61 "./include/linux/thread_info.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long set_restart_fn(struct restart_block *restart,
     long (*fn)(struct restart_block *))
{
 restart->fn = fn;
 do { } while (0);
 return -516;
}
# 87 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return arch_test_bit(flag, (unsigned long *)&ti->flags);
}
# 169 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}
# 188 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_object_size(const void *ptr, unsigned long n,
         bool to_user)
{ }


extern void __attribute__((__error__("copy source size is too small")))
__bad_copy_from(void);
extern void __attribute__((__error__("copy destination size is too small")))
__bad_copy_to(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/thread_info.h", 200, 9, "Buffer overflow detected (%d < %lu)!\n", size, count); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = __builtin_object_size(addr, 0);
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(bytes > ((int)(~0U >> 1))); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/thread_info.h", 216, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); }))
  return false;
 check_object_size(addr, bytes, is_source);
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_setup_new_exec(void) { }
# 6 "./include/asm-generic/current.h" 2
# 2 "./arch/mips/include/generated/asm/current.h" 2
# 13 "./include/linux/sched.h" 2

# 1 "./include/linux/pid.h" 1




# 1 "./include/linux/rculist.h" 1
# 10 "./include/linux/rculist.h"
# 1 "./include/linux/list.h" 1







# 1 "./include/linux/poison.h" 1
# 9 "./include/linux/list.h" 2
# 35 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD(struct list_head *list)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_12(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_12(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 list->prev = list;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_add_valid(struct list_head *new,
    struct list_head *prev,
    struct list_head *next)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_del_entry_valid(struct list_head *entry)
{
 return true;
}
# 65 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_13(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_13(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
}
# 86 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 100 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 112 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_14(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_14(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 126 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + 0);
 entry->prev = ((void *) 0x122 + 0);
}
# 160 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}
# 176 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_init(struct list_head *old,
         struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 242 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty(const struct list_head *head)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_15(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_15(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
}
# 298 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init_careful(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = entry;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_16(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)))) __compiletime_assert_16(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_17(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)) || sizeof(*&entry->next) == sizeof(long long))) __compiletime_assert_17(); } while (0); do { *(volatile typeof(*&entry->next) *)&(*&entry->next) = (entry); } while (0); } while (0); } while (0);
}
# 318 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = ({ typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_18(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)) || sizeof(*&head->next) == sizeof(long long))) __compiletime_assert_18(); } while (0); (*(const volatile typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) *)&(*&head->next)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_19(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)))) __compiletime_assert_19(); } while (0); __sync(); (typeof(*&head->next))___p1; });
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 345 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 391 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 419 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 480 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 497 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 794 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}
# 808 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}
# 821 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed_lockless(const struct hlist_node *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_20(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_20(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_empty(const struct hlist_head *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_21(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_21(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_22(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_22(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_23(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_23(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}
# 852 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}
# 881 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_24(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_24(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
 if (first)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_25(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_25(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_26(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_26(); } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_27(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_27(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before(struct hlist_node *n,
        struct hlist_node *next)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_28(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_28(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_29(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_29(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_30(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_30(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_31(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(n->pprev)) == sizeof(char) || sizeof(*(n->pprev)) == sizeof(short) || sizeof(*(n->pprev)) == sizeof(int) || sizeof(*(n->pprev)) == sizeof(long)) || sizeof(*(n->pprev)) == sizeof(long long))) __compiletime_assert_31(); } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_32(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_32(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_33(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_33(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_34(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_34(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);

 if (n->next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_35(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_35(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 929 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}
# 951 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}
# 965 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 11 "./include/linux/rculist.h" 2
# 1 "./include/linux/rcupdate.h" 1
# 27 "./include/linux/rcupdate.h"
# 1 "./include/linux/preempt.h" 1
# 78 "./include/linux/preempt.h"
# 1 "./arch/mips/include/generated/asm/preempt.h" 1
# 1 "./include/asm-generic/preempt.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int preempt_count(void)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_36(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(current_thread_info()->preempt_count) == sizeof(char) || sizeof(current_thread_info()->preempt_count) == sizeof(short) || sizeof(current_thread_info()->preempt_count) == sizeof(int) || sizeof(current_thread_info()->preempt_count) == sizeof(long)) || sizeof(current_thread_info()->preempt_count) == sizeof(long long))) __compiletime_assert_36(); } while (0); (*(const volatile typeof( _Generic((current_thread_info()->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (current_thread_info()->preempt_count))) *)&(current_thread_info()->preempt_count)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) volatile int *preempt_count_ptr(void)
{
 return &current_thread_info()->preempt_count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void preempt_count_set(int pc)
{
 *preempt_count_ptr() = pc;
}
# 35 "./include/asm-generic/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool test_preempt_need_resched(void)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_add(int val)
{
 *preempt_count_ptr() += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_sub(int val)
{
 *preempt_count_ptr() -= val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __preempt_count_dec_and_test(void)
{





 return !--*preempt_count_ptr() && test_ti_thread_flag(current_thread_info(), 2);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(preempt_count() == preempt_offset && test_ti_thread_flag(current_thread_info(), 2)), 0);

}


extern void preempt_schedule(void);

extern void preempt_schedule_notrace(void);
# 2 "./arch/mips/include/generated/asm/preempt.h" 2
# 79 "./include/linux/preempt.h" 2
# 89 "./include/linux/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned char interrupt_context_level(void)
{
 unsigned long pc = preempt_count();
 unsigned char level = 0;

 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4))));
 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8))));
 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8)) | (1UL << (0 + 8))));

 return level;
}
# 309 "./include/linux/preempt.h"
struct preempt_notifier;
# 325 "./include/linux/preempt.h"
struct preempt_ops {
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);
};
# 338 "./include/linux/preempt.h"
struct preempt_notifier {
 struct hlist_node link;
 struct preempt_ops *ops;
};

void preempt_notifier_inc(void);
void preempt_notifier_dec(void);
void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}
# 414 "./include/linux/preempt.h"
extern void migrate_disable(void);
extern void migrate_enable(void);
# 28 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/bottom_half.h" 1
# 11 "./include/linux/bottom_half.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool local_bh_blocked(void) { return false; }
# 29 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/lockdep.h" 1
# 14 "./include/linux/lockdep.h"
# 1 "./include/linux/smp.h" 1
# 15 "./include/linux/smp.h"
# 1 "./include/linux/smp_types.h" 1




# 1 "./include/linux/llist.h" 1
# 56 "./include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 71 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 189 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_empty(const struct llist_head *head)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_37(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->first) == sizeof(char) || sizeof(head->first) == sizeof(short) || sizeof(head->first) == sizeof(int) || sizeof(head->first) == sizeof(long)) || sizeof(head->first) == sizeof(long long))) __compiletime_assert_37(); } while (0); (*(const volatile typeof( _Generic((head->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->first))) *)&(head->first)); }) == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __llist_add_batch(struct llist_node *new_first,
         struct llist_node *new_last,
         struct llist_head *head)
{
 new_last->next = head->first;
 head->first = new_first;
 return new_last->next == ((void *)0);
}
# 219 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __llist_add(struct llist_node *new, struct llist_head *head)
{
 return __llist_add_batch(new, new, head);
}
# 237 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = (__typeof__(*(__ai_ptr))) __xchg((__ai_ptr), (unsigned long)(((void *)0)), sizeof(*(__ai_ptr))); __asm__ __volatile__("sync" : : :"memory"); __res; }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *__llist_del_all(struct llist_head *head)
{
 struct llist_node *first = head->first;

 head->first = ((void *)0);
 return first;
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 6 "./include/linux/smp_types.h" 2

enum {
 CSD_FLAG_LOCK = 0x01,

 IRQ_WORK_PENDING = 0x01,
 IRQ_WORK_BUSY = 0x02,
 IRQ_WORK_LAZY = 0x04,
 IRQ_WORK_HARD_IRQ = 0x08,

 IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),

 CSD_TYPE_ASYNC = 0x00,
 CSD_TYPE_SYNC = 0x10,
 CSD_TYPE_IRQ_WORK = 0x20,
 CSD_TYPE_TTWU = 0x30,

 CSD_FLAG_TYPE_MASK = 0xF0,
};
# 58 "./include/linux/smp_types.h"
struct __call_single_node {
 struct llist_node llist;
 union {
  unsigned int u_flags;
  atomic_t a_flags;
 };

 u16 src, dst;

};
# 16 "./include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
typedef bool (*smp_cond_func_t)(int cpu, void *info);




struct __call_single_data {
 struct __call_single_node node;
 smp_call_func_t func;
 void *info;
};





typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));
# 45 "./include/linux/smp.h"
extern void __smp_call_single_queue(int cpu, struct llist_node *node);


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);

void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
      void *info, bool wait, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, struct __call_single_data *csd);





void panic_smp_self_stop(void);
void nmi_panic_self_stop(struct pt_regs *regs);
void crash_smp_send_stop(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu(smp_call_func_t func, void *info, int wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 90 "./include/linux/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_mask(const struct cpumask *mask,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, mask);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_cond(smp_cond_func_t cond_func,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(cond_func, func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}






# 1 "./arch/mips/include/asm/smp.h" 1
# 16 "./arch/mips/include/asm/smp.h"
# 1 "./include/linux/smp.h" 1
# 17 "./arch/mips/include/asm/smp.h" 2




# 1 "./arch/mips/include/asm/smp-ops.h" 1
# 16 "./arch/mips/include/asm/smp-ops.h"
# 1 "./arch/mips/include/asm/mips-cps.h" 1
# 10 "./arch/mips/include/asm/mips-cps.h"
# 1 "./include/linux/io.h" 1
# 13 "./include/linux/io.h"
# 1 "./arch/mips/include/asm/io.h" 1
# 28 "./arch/mips/include/asm/io.h"
# 1 "./include/asm-generic/iomap.h" 1
# 29 "./include/asm-generic/iomap.h"
extern unsigned int ioread8(const void *);
extern unsigned int ioread16(const void *);
extern unsigned int ioread16be(const void *);
extern unsigned int ioread32(const void *);
extern unsigned int ioread32be(const void *);

extern u64 ioread64(const void *);
extern u64 ioread64be(const void *);
# 50 "./include/asm-generic/iomap.h"
extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);

extern void iowrite64(u64, void *);
extern void iowrite64be(u64, void *);
# 82 "./include/asm-generic/iomap.h"
extern void ioread8_rep(const void *port, void *buf, unsigned long count);
extern void ioread16_rep(const void *port, void *buf, unsigned long count);
extern void ioread32_rep(const void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, const void *buf, unsigned long count);
extern void iowrite16_rep(void *port, const void *buf, unsigned long count);
extern void iowrite32_rep(void *port, const void *buf, unsigned long count);



extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);
# 107 "./include/asm-generic/iomap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap_np(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}


# 1 "./include/asm-generic/pci_iomap.h" 1
# 10 "./include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
extern void pci_iounmap(struct pci_dev *dev, void *);
# 114 "./include/asm-generic/iomap.h" 2
# 29 "./arch/mips/include/asm/io.h" 2
# 1 "./arch/mips/include/asm/page.h" 1
# 42 "./arch/mips/include/asm/page.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int page_size_ftlb(unsigned int mmuextdef)
{
 switch (mmuextdef) {
 case ((unsigned long)(2) << 14):
  if (((1UL) << 14) == (1 << 30))
   return 5;
  if (((1UL) << 14) == (1llu << 32))
   return 6;
  if (((1UL) << 14) > (256 << 10))
   return 7;
  __attribute__((__fallthrough__));
 case ((unsigned long)(3) << 14):
  return (14 - 10) / 2;
 default:
  panic("Invalid FTLB configuration with Conf4_mmuextdef=%d value\n",
        mmuextdef >> 14);
 }
}
# 73 "./arch/mips/include/asm/page.h"
# 1 "./include/linux/pfn.h" 1
# 13 "./include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 74 "./arch/mips/include/asm/page.h" 2

extern void build_clear_page(void);
extern void build_copy_page(void);
# 90 "./arch/mips/include/asm/page.h"
extern void clear_page(void * page);
extern void copy_page(void * to, void * from);

extern unsigned long shm_align_mask;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pages_do_alias(unsigned long addr1,
 unsigned long addr2)
{
 return (addr1 ^ addr2) & shm_align_mask;
}

struct page;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_user_page(void *addr, unsigned long vaddr,
 struct page *page)
{
 extern void (*flush_data_cache_page)(unsigned long addr);

 clear_page(addr);
 if (pages_do_alias((unsigned long) addr, vaddr & (~((1 << 14) - 1))))
  flush_data_cache_page((unsigned long)addr);
}

struct vm_area_struct;
extern void copy_user_highpage(struct page *to, struct page *from,
 unsigned long vaddr, struct vm_area_struct *vma);
# 128 "./arch/mips/include/asm/page.h"
     typedef struct { unsigned long long pte; } pte_t;
# 137 "./arch/mips/include/asm/page.h"
typedef struct page *pgtable_t;
# 147 "./arch/mips/include/asm/page.h"
typedef struct { unsigned long pgd; } pgd_t;






typedef struct { unsigned long pgprot; } pgprot_t;
# 171 "./arch/mips/include/asm/page.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ___pa(unsigned long x)
{
 if (1) {





  return x < 0xffffffff80000000L ? (((__s64)(x)) & 0x0000ffffffffffffL) : (((long int)(int)(x)) & 0x1fffffff);
 }

 if (!0) {






  return (((long int)(int)(x)) & 0x1fffffff);
 }





 return x - ((0x9800000000000000UL) + (0UL)) + (0UL);
}


# 1 "./arch/mips/include/asm/io.h" 1
# 201 "./arch/mips/include/asm/page.h" 2
# 258 "./arch/mips/include/asm/page.h"
extern bool __virt_addr_valid(const volatile void *kaddr);





extern unsigned long __kaslr_offset;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kaslr_offset(void)
{
 return __kaslr_offset;
}

# 1 "./include/asm-generic/memory_model.h" 1
# 271 "./arch/mips/include/asm/page.h" 2
# 1 "./include/asm-generic/getorder.h" 1
# 29 "./include/asm-generic/getorder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 14;

  if (size < (1UL << 14))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 14 + 1;
 }

 size--;
 size >>= 14;



 return fls64(size);

}
# 272 "./arch/mips/include/asm/page.h" 2
# 30 "./arch/mips/include/asm/io.h" 2
# 1 "./arch/mips/include/asm/pgtable-bits.h" 1
# 122 "./arch/mips/include/asm/pgtable-bits.h"
enum pgtable_bits {

 _PAGE_PRESENT_SHIFT,



 _PAGE_WRITE_SHIFT,
 _PAGE_ACCESSED_SHIFT,
 _PAGE_MODIFIED_SHIFT,




 _PAGE_SPECIAL_SHIFT,






 _PAGE_NO_EXEC_SHIFT,
 _PAGE_NO_READ_SHIFT,

 _PAGE_GLOBAL_SHIFT,
 _PAGE_VALID_SHIFT,
 _PAGE_DIRTY_SHIFT,
 _CACHE_SHIFT,
};
# 214 "./arch/mips/include/asm/pgtable-bits.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t pte_to_entrylo(unsigned long pte_val)
{

 if (((2 >= (6)) || (cpu_data[0].options & (((((1ULL))) << (23)))))) {
  int sa;



  sa = 63 - _PAGE_NO_READ_SHIFT;






  return (pte_val >> _PAGE_GLOBAL_SHIFT) |
   ((pte_val & ((((2 >= (6)) || (cpu_data[0].options & (((((1ULL))) << (23))))) ? (1 << _PAGE_NO_EXEC_SHIFT) : 0) | (1 << _PAGE_NO_READ_SHIFT))) << sa);
 }


 return pte_val >> _PAGE_GLOBAL_SHIFT;
}
# 31 "./arch/mips/include/asm/io.h" 2


# 1 "./arch/mips/include/asm/mach-generic/mangle-port.h" 1
# 34 "./arch/mips/include/asm/io.h" 2
# 62 "./arch/mips/include/asm/io.h"
extern unsigned long mips_io_port_base;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_io_port_base(unsigned long base)
{
 mips_io_port_base = base;
}
# 103 "./arch/mips/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __virt_to_phys_nodebug(volatile const void *address)
{
 return ___pa((unsigned long)(address));
}
# 115 "./arch/mips/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t virt_to_phys(const volatile void *x)
{
 return __virt_to_phys_nodebug(x);
}
# 132 "./arch/mips/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * phys_to_virt(unsigned long address)
{
 return (void *)(address + ((0x9800000000000000UL) + (0UL)) - (0UL));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long isa_virt_to_bus(volatile void *address)
{
 return virt_to_phys(address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *isa_bus_to_virt(unsigned long address)
{
 return phys_to_virt(address);
}
# 164 "./arch/mips/include/asm/io.h"
void *ioremap_prot(phys_addr_t offset, unsigned long size,
  unsigned long prot_val);
void iounmap(const volatile void *addr);
# 362 "./arch/mips/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeb(u8 val, volatile void *mem) { volatile u8 *__mem; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u8 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __raw_readb(const volatile void *mem) { volatile u8 *__mem; u8 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __relaxed_writeb(u8 val, volatile void *mem) { volatile u8 *__mem; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u8 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __relaxed_readb(const volatile void *mem) { volatile u8 *__mem; u8 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!1) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_writeb(u8 val, volatile void *mem) { volatile u8 *__mem; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u8 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __mem_readb(const volatile void *mem) { volatile u8 *__mem; u8 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writeb(u8 val, volatile void *mem) { volatile u8 *__mem; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u8 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 readb(const volatile void *mem) { volatile u8 *__mem; u8 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u8) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writew(u16 val, volatile void *mem) { volatile u16 *__mem; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u16 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __raw_readw(const volatile void *mem) { volatile u16 *__mem; u16 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __relaxed_writew(u16 val, volatile void *mem) { volatile u16 *__mem; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u16 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __relaxed_readw(const volatile void *mem) { volatile u16 *__mem; u16 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!1) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_writew(u16 val, volatile void *mem) { volatile u16 *__mem; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (( u16)(( __le16)(__u16)(val))); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u16 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __mem_readw(const volatile void *mem) { volatile u16 *__mem; u16 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (( u16)(( __le16)(__u16)(__val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writew(u16 val, volatile void *mem) { volatile u16 *__mem; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u16 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 readw(const volatile void *mem) { volatile u16 *__mem; u16 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u16) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writel(u32 val, volatile void *mem) { volatile u32 *__mem; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u32 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __raw_readl(const volatile void *mem) { volatile u32 *__mem; u32 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __relaxed_writel(u32 val, volatile void *mem) { volatile u32 *__mem; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u32 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __relaxed_readl(const volatile void *mem) { volatile u32 *__mem; u32 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!1) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_writel(u32 val, volatile void *mem) { volatile u32 *__mem; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (( u32)(( __le32)(__u32)(val))); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u32 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __mem_readl(const volatile void *mem) { volatile u32 *__mem; u32 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (( u32)(( __le32)(__u32)(__val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writel(u32 val, volatile void *mem) { volatile u32 *__mem; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u32 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 readl(const volatile void *mem) { volatile u32 *__mem; u32 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u32) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeq(u64 val, volatile void *mem) { volatile u64 *__mem; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u64 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __raw_readq(const volatile void *mem) { volatile u64 *__mem; u64 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __relaxed_writeq(u64 val, volatile void *mem) { volatile u64 *__mem; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u64 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __relaxed_readq(const volatile void *mem) { volatile u64 *__mem; u64 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!1) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_writeq(u64 val, volatile void *mem) { volatile u64 *__mem; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (( u64)(( __le64)(__u64)(val))); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u64 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __mem_readq(const volatile void *mem) { volatile u64 *__mem; u64 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (( u64)(( __le64)(__u64)(__val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writeq(u64 val, volatile void *mem) { volatile u64 *__mem; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u64 __tmp; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 readq(const volatile void *mem) { volatile u64 *__mem; u64 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (1) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); }
# 380 "./arch/mips/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outb(u8 val, unsigned long port) { volatile u8 *__addr; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_38(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_38(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 inb(unsigned long port) { volatile u8 *__addr; u8 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_39(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_39(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outb_p(u8 val, unsigned long port) { volatile u8 *__addr; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_40(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_40(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 inb_p(unsigned long port) { volatile u8 *__addr; u8 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_41(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_41(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outb(u8 val, unsigned long port) { volatile u8 *__addr; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_42(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_42(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __mem_inb(unsigned long port) { volatile u8 *__addr; u8 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_43(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_43(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outb_p(u8 val, unsigned long port) { volatile u8 *__addr; u8 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_44(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_44(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __mem_inb_p(unsigned long port) { volatile u8 *__addr; u8 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_45(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u8) > sizeof(unsigned long)"))); if (!(!(sizeof(u8) > sizeof(unsigned long)))) __compiletime_assert_45(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outw(u16 val, unsigned long port) { volatile u16 *__addr; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_46(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_46(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 inw(unsigned long port) { volatile u16 *__addr; u16 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_47(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_47(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outw_p(u16 val, unsigned long port) { volatile u16 *__addr; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_48(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_48(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 inw_p(unsigned long port) { volatile u16 *__addr; u16 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_49(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_49(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outw(u16 val, unsigned long port) { volatile u16 *__addr; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (( u16)(( __le16)(__u16)(val))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_50(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_50(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __mem_inw(unsigned long port) { volatile u16 *__addr; u16 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_51(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_51(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (( u16)(( __le16)(__u16)(__val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outw_p(u16 val, unsigned long port) { volatile u16 *__addr; u16 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (( u16)(( __le16)(__u16)(val))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_52(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_52(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __mem_inw_p(unsigned long port) { volatile u16 *__addr; u16 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_53(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u16) > sizeof(unsigned long)"))); if (!(!(sizeof(u16) > sizeof(unsigned long)))) __compiletime_assert_53(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (( u16)(( __le16)(__u16)(__val))); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outl(u32 val, unsigned long port) { volatile u32 *__addr; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_54(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_54(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 inl(unsigned long port) { volatile u32 *__addr; u32 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_55(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_55(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outl_p(u32 val, unsigned long port) { volatile u32 *__addr; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_56(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_56(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 inl_p(unsigned long port) { volatile u32 *__addr; u32 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_57(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_57(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outl(u32 val, unsigned long port) { volatile u32 *__addr; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (( u32)(( __le32)(__u32)(val))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_58(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_58(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __mem_inl(unsigned long port) { volatile u32 *__addr; u32 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_59(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_59(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (( u32)(( __le32)(__u32)(__val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outl_p(u32 val, unsigned long port) { volatile u32 *__addr; u32 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (( u32)(( __le32)(__u32)(val))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_60(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_60(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __mem_inl_p(unsigned long port) { volatile u32 *__addr; u32 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_61(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u32) > sizeof(unsigned long)"))); if (!(!(sizeof(u32) > sizeof(unsigned long)))) __compiletime_assert_61(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (( u32)(( __le32)(__u32)(__val))); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outq(u64 val, unsigned long port) { volatile u64 *__addr; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_62(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_62(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 inq(unsigned long port) { volatile u64 *__addr; u64 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_63(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_63(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outq_p(u64 val, unsigned long port) { volatile u64 *__addr; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (val); do { __attribute__((__noreturn__)) extern void __compiletime_assert_64(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_64(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 inq_p(unsigned long port) { volatile u64 *__addr; u64 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_65(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_65(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (__val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outq(u64 val, unsigned long port) { volatile u64 *__addr; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (( u64)(( __le64)(__u64)(val))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_66(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_66(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __mem_inq(unsigned long port) { volatile u64 *__addr; u64 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_67(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_67(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (( u64)(( __le64)(__u64)(__val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mem_outq_p(u64 val, unsigned long port) { volatile u64 *__addr; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __addr = (void *)(mips_io_port_base + port); __val = (( u64)(( __le64)(__u64)(val))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_68(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_68(); } while (0); *__addr = __val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __mem_inq_p(unsigned long port) { volatile u64 *__addr; u64 __val; __addr = (void *)(mips_io_port_base + port); do { __attribute__((__noreturn__)) extern void __compiletime_assert_69(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(u64) > sizeof(unsigned long)"))); if (!(!(sizeof(u64) > sizeof(unsigned long)))) __compiletime_assert_69(); } while (0); if (1) do { __sync(); __wbflush(); } while (0); __val = *__addr; if (!0) rmb(); return (( u64)(( __le64)(__u64)(__val))); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ____raw_writeq(u64 val, volatile void *mem) { volatile u64 *__mem; u64 __val; if (1) do { __sync(); __wbflush(); } while (0); else wmb(); __mem = (void *)((unsigned long)(mem)); __val = (val); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) *__mem = __val; else if (1) { unsigned long __flags; u64 __tmp; if (0) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __writeq""\n\t" ".set	arch=r4000" "\n\t" "dsll32 %L0, %L0, 0" "\n\t" "dsrl32 %L0, %L0, 0" "\n\t" "dsll32 %M0, %M0, 0" "\n\t" "or	%L0, %L0, %M0" "\n\t" "sd	%L0, %2" "\n\t" ".set	pop" "\n" : "=r" (__tmp) : "0" (__val), "m" (*__mem)); if (0) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else BUG(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ____raw_readq(const volatile void *mem) { volatile u64 *__mem; u64 __val; __mem = (void *)((unsigned long)(mem)); if (1) do { __sync(); __wbflush(); } while (0); if (sizeof(u64) != sizeof(u64) || sizeof(u64) == sizeof(long)) __val = *__mem; else if (1) { unsigned long __flags; if (0) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); __asm__ __volatile__( ".set	push" "\t\t# __readq" "\n\t" ".set	arch=r4000" "\n\t" "ld	%L0, %1" "\n\t" "dsra32 %M0, %L0, 0" "\n\t" "sll	%L0, %L0, 0" "\n\t" ".set	pop" "\n" : "=r" (__val) : "m" (*__mem)); if (0) do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } else { __val = 0; BUG(); } if (!0) rmb(); return (__val); }
# 486 "./arch/mips/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesb(volatile void *mem, const void *addr, unsigned int count) { const volatile u8 *__addr = addr; while (count--) { __mem_writeb(*__addr, mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsb(volatile void *mem, void *addr, unsigned int count) { volatile u8 *__addr = addr; while (count--) { *__addr = __mem_readb(mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsb(unsigned long port, const void *addr, unsigned int count) { const volatile u8 *__addr = addr; while (count--) { __mem_outb(*__addr, port); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insb(unsigned long port, void *addr, unsigned int count) { volatile u8 *__addr = addr; while (count--) { *__addr = __mem_inb(port); __addr++; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesw(volatile void *mem, const void *addr, unsigned int count) { const volatile u16 *__addr = addr; while (count--) { __mem_writew(*__addr, mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsw(volatile void *mem, void *addr, unsigned int count) { volatile u16 *__addr = addr; while (count--) { *__addr = __mem_readw(mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsw(unsigned long port, const void *addr, unsigned int count) { const volatile u16 *__addr = addr; while (count--) { __mem_outw(*__addr, port); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insw(unsigned long port, void *addr, unsigned int count) { volatile u16 *__addr = addr; while (count--) { *__addr = __mem_inw(port); __addr++; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesl(volatile void *mem, const void *addr, unsigned int count) { const volatile u32 *__addr = addr; while (count--) { __mem_writel(*__addr, mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsl(volatile void *mem, void *addr, unsigned int count) { volatile u32 *__addr = addr; while (count--) { *__addr = __mem_readl(mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsl(unsigned long port, const void *addr, unsigned int count) { const volatile u32 *__addr = addr; while (count--) { __mem_outl(*__addr, port); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insl(unsigned long port, void *addr, unsigned int count) { volatile u32 *__addr = addr; while (count--) { *__addr = __mem_inl(port); __addr++; } }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesq(volatile void *mem, const void *addr, unsigned int count) { const volatile u64 *__addr = addr; while (count--) { __mem_writeq(*__addr, mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsq(volatile void *mem, void *addr, unsigned int count) { volatile u64 *__addr = addr; while (count--) { *__addr = __mem_readq(mem); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsq(unsigned long port, const void *addr, unsigned int count) { const volatile u64 *__addr = addr; while (count--) { __mem_outq(*__addr, port); __addr++; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insq(unsigned long port, void *addr, unsigned int count) { volatile u64 *__addr = addr; while (count--) { *__addr = __mem_inq(port); __addr++; } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_io(volatile void *addr, unsigned char val, int count)
{
 memset((void *) addr, val, count);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_fromio(void *dst, const volatile void *src, int count)
{
 memcpy(dst, (void *) src, count);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_toio(volatile void *dst, const void *src, int count)
{
 memcpy((void *) dst, src, count);
}
# 567 "./arch/mips/include/asm/io.h"
void __ioread64_copy(void *to, const void *from, size_t count);
# 14 "./include/linux/io.h" 2


struct device;
struct resource;

          void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 38 "./include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 56 "./include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_uc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_np(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);
# 86 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_remap_cfgspace(phys_addr_t offset,
            size_t size)
{
 return ioremap_np(offset, size) ?: ioremap_prot((offset), (size), (2<<_CACHE_SHIFT));
}
# 115 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_phys_wc_del(int handle)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_phys_wc_index(int handle)
{
 return -1;
}




int devm_arch_phys_wc_add(struct device *dev, unsigned long base, unsigned long size);

enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 159 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_io_reserve_memtype_wc(resource_size_t base,
          resource_size_t size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_io_free_memtype_wc(resource_size_t base,
        resource_size_t size)
{
}


int devm_arch_io_reserve_memtype_wc(struct device *dev, resource_size_t start,
        resource_size_t size);
# 11 "./arch/mips/include/asm/mips-cps.h" 2


extern unsigned long __cps_access_bad_size(void)
 __attribute__((__error__("Bad size for CPS accessor")));
# 104 "./arch/mips/include/asm/mips-cps.h"
# 1 "./arch/mips/include/asm/mips-cm.h" 1
# 14 "./arch/mips/include/asm/mips-cm.h"
# 1 "./include/linux/bitfield.h" 1
# 112 "./include/linux/bitfield.h"
extern void __attribute__((__error__("value doesn't fit into mask")))
__field_overflow(void);
extern void __attribute__((__error__("bad bitfield mask")))
__bad_mask(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 field_multiplier(u64 field)
{
 if ((field | (field - 1)) & ((field | (field - 1)) + 1))
  __bad_mask();
 return field & -field;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 field_mask(u64 field)
{
 return field / field_multiplier(field);
}
# 152 "./include/linux/bitfield.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u8 u8_encode_bits(u8 v, u8 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u8 u8_replace_bits(__u8 old, u8 val, u8 field) { return (old & ~(field)) | u8_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u8p_replace_bits(__u8 *p, u8 val, u8 field) { *p = (*p & ~(field)) | u8_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u8 u8_get_bits(__u8 v, u8 field) { return ((v) & field)/field_multiplier(field); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 le16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le16)(__u16)((v & field_mask(field)) * field_multiplier(field))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 le16_replace_bits(__le16 old, u16 val, u16 field) { return (old & ~(( __le16)(__u16)(field))) | le16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void le16p_replace_bits(__le16 *p, u16 val, u16 field) { *p = (*p & ~(( __le16)(__u16)(field))) | le16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 le16_get_bits(__le16 v, u16 field) { return ((( __u16)(__le16)(v)) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 be16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be16)(__u16)__builtin_bswap16((__u16)(((v & field_mask(field)) * field_multiplier(field))))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 be16_replace_bits(__be16 old, u16 val, u16 field) { return (old & ~(( __be16)(__u16)__builtin_bswap16((__u16)((field))))) | be16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void be16p_replace_bits(__be16 *p, u16 val, u16 field) { *p = (*p & ~(( __be16)(__u16)__builtin_bswap16((__u16)((field))))) | be16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 be16_get_bits(__be16 v, u16 field) { return ((__u16)__builtin_bswap16((__u16)(( __u16)(__be16)(v))) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 u16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 u16_replace_bits(__u16 old, u16 val, u16 field) { return (old & ~(field)) | u16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u16p_replace_bits(__u16 *p, u16 val, u16 field) { *p = (*p & ~(field)) | u16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 u16_get_bits(__u16 v, u16 field) { return ((v) & field)/field_multiplier(field); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 le32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le32)(__u32)((v & field_mask(field)) * field_multiplier(field))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 le32_replace_bits(__le32 old, u32 val, u32 field) { return (old & ~(( __le32)(__u32)(field))) | le32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void le32p_replace_bits(__le32 *p, u32 val, u32 field) { *p = (*p & ~(( __le32)(__u32)(field))) | le32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 le32_get_bits(__le32 v, u32 field) { return ((( __u32)(__le32)(v)) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 be32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be32)(__u32)__builtin_bswap32((__u32)(((v & field_mask(field)) * field_multiplier(field))))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 be32_replace_bits(__be32 old, u32 val, u32 field) { return (old & ~(( __be32)(__u32)__builtin_bswap32((__u32)((field))))) | be32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void be32p_replace_bits(__be32 *p, u32 val, u32 field) { *p = (*p & ~(( __be32)(__u32)__builtin_bswap32((__u32)((field))))) | be32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 be32_get_bits(__be32 v, u32 field) { return ((__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(v))) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 u32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 u32_replace_bits(__u32 old, u32 val, u32 field) { return (old & ~(field)) | u32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u32p_replace_bits(__u32 *p, u32 val, u32 field) { *p = (*p & ~(field)) | u32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 u32_get_bits(__u32 v, u32 field) { return ((v) & field)/field_multiplier(field); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 le64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le64)(__u64)((v & field_mask(field)) * field_multiplier(field))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 le64_replace_bits(__le64 old, u64 val, u64 field) { return (old & ~(( __le64)(__u64)(field))) | le64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void le64p_replace_bits(__le64 *p, u64 val, u64 field) { *p = (*p & ~(( __le64)(__u64)(field))) | le64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 le64_get_bits(__le64 v, u64 field) { return ((( __u64)(__le64)(v)) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 be64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be64)(__u64)__builtin_bswap64((__u64)(((v & field_mask(field)) * field_multiplier(field))))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 be64_replace_bits(__be64 old, u64 val, u64 field) { return (old & ~(( __be64)(__u64)__builtin_bswap64((__u64)((field))))) | be64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void be64p_replace_bits(__be64 *p, u64 val, u64 field) { *p = (*p & ~(( __be64)(__u64)__builtin_bswap64((__u64)((field))))) | be64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 be64_get_bits(__be64 v, u64 field) { return ((__u64)__builtin_bswap64((__u64)(( __u64)(__be64)(v))) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 u64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 u64_replace_bits(__u64 old, u64 val, u64 field) { return (old & ~(field)) | u64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u64p_replace_bits(__u64 *p, u64 val, u64 field) { *p = (*p & ~(field)) | u64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 u64_get_bits(__u64 v, u64 field) { return ((v) & field)/field_multiplier(field); }
# 15 "./arch/mips/include/asm/mips-cm.h" 2




extern void *mips_gcr_base;


extern void *mips_cm_l2sync_base;
# 34 "./arch/mips/include/asm/mips-cm.h"
extern phys_addr_t __mips_cm_phys_base(void);
# 48 "./arch/mips/include/asm/mips-cm.h"
extern int mips_cm_is64;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mips_cm_error_report(void) {}
# 68 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mips_cm_probe(void)
{
 return -19;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mips_cm_present(void)
{



 return false;

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mips_cm_has_l2sync(void)
{



 return false;

}
# 131 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_config(void) { return mips_gcr_base + (0x0000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_config(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_config()); val64 = __raw_readl(addr_gcr_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_config(void) { return mips_gcr_base + (0x4000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_config(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_config()); val64 = __raw_readl(addr_gcr_redir_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_config()); return val64; default: return __cps_access_bad_size(); } }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_base(void) { return mips_gcr_base + (0x0000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_base()); val64 = __raw_readl(addr_gcr_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_base() + 4); __raw_writel(val, addr_gcr_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_base(); reg_val &= ~mask; reg_val |= val; write_gcr_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_base(uint64_t val) { change_gcr_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_base(uint64_t val) { change_gcr_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_base(void) { return mips_gcr_base + (0x4000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_base()); val64 = __raw_readl(addr_gcr_redir_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_base() + 4); __raw_writel(val, addr_gcr_redir_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_base(uint64_t val) { change_gcr_redir_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_base(uint64_t val) { change_gcr_redir_base(val, 0); }
# 148 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_access(void) { return mips_gcr_base + (0x0000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_access(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_access()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_access()); val64 = __raw_readl(addr_gcr_access() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_access()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_access(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_access()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_access()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_access() + 4); __raw_writel(val, addr_gcr_access()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_access(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_access(); reg_val &= ~mask; reg_val |= val; write_gcr_access(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_access(uint32_t val) { change_gcr_access(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_access(uint32_t val) { change_gcr_access(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_access(void) { return mips_gcr_base + (0x4000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_access(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_access()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_access()); val64 = __raw_readl(addr_gcr_redir_access() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_access()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_access(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_redir_access()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_access()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_access() + 4); __raw_writel(val, addr_gcr_redir_access()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_access(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_redir_access(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_access(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_access(uint32_t val) { change_gcr_redir_access(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_access(uint32_t val) { change_gcr_redir_access(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_rev(void) { return mips_gcr_base + (0x0000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_rev(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_rev()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_rev()); val64 = __raw_readl(addr_gcr_rev() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_rev()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_rev(void) { return mips_gcr_base + (0x4000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_rev(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_rev()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_rev()); val64 = __raw_readl(addr_gcr_redir_rev() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_rev()); return val64; default: return __cps_access_bad_size(); } }
# 166 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_err_control(void) { return mips_gcr_base + (0x0000 + 0x038); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_err_control(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_err_control()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_err_control()); val64 = __raw_readl(addr_gcr_err_control() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_err_control()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_err_control(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_err_control()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_err_control()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_err_control() + 4); __raw_writel(val, addr_gcr_err_control()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_err_control(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_err_control(); reg_val &= ~mask; reg_val |= val; write_gcr_err_control(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_err_control(uint32_t val) { change_gcr_err_control(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_err_control(uint32_t val) { change_gcr_err_control(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_err_control(void) { return mips_gcr_base + (0x4000 + 0x038); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_err_control(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_err_control()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_err_control()); val64 = __raw_readl(addr_gcr_redir_err_control() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_err_control()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_err_control(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_redir_err_control()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_err_control()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_err_control() + 4); __raw_writel(val, addr_gcr_redir_err_control()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_err_control(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_redir_err_control(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_err_control(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_err_control(uint32_t val) { change_gcr_redir_err_control(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_err_control(uint32_t val) { change_gcr_redir_err_control(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_error_mask(void) { return mips_gcr_base + (0x0000 + 0x040); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_error_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_error_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_error_mask()); val64 = __raw_readl(addr_gcr_error_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_error_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_error_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_error_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_error_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_error_mask() + 4); __raw_writel(val, addr_gcr_error_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_error_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_error_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_error_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_error_mask(uint64_t val) { change_gcr_error_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_error_mask(uint64_t val) { change_gcr_error_mask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_error_mask(void) { return mips_gcr_base + (0x4000 + 0x040); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_error_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_error_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_error_mask()); val64 = __raw_readl(addr_gcr_redir_error_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_error_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_error_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_error_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_error_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_error_mask() + 4); __raw_writel(val, addr_gcr_redir_error_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_error_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_error_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_error_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_error_mask(uint64_t val) { change_gcr_redir_error_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_error_mask(uint64_t val) { change_gcr_redir_error_mask(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_error_cause(void) { return mips_gcr_base + (0x0000 + 0x048); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_error_cause(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_error_cause()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_error_cause()); val64 = __raw_readl(addr_gcr_error_cause() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_error_cause()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_error_cause(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_error_cause()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_error_cause()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_error_cause() + 4); __raw_writel(val, addr_gcr_error_cause()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_error_cause(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_error_cause(); reg_val &= ~mask; reg_val |= val; write_gcr_error_cause(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_error_cause(uint64_t val) { change_gcr_error_cause(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_error_cause(uint64_t val) { change_gcr_error_cause(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_error_cause(void) { return mips_gcr_base + (0x4000 + 0x048); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_error_cause(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_error_cause()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_error_cause()); val64 = __raw_readl(addr_gcr_redir_error_cause() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_error_cause()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_error_cause(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_error_cause()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_error_cause()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_error_cause() + 4); __raw_writel(val, addr_gcr_redir_error_cause()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_error_cause(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_error_cause(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_error_cause(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_error_cause(uint64_t val) { change_gcr_redir_error_cause(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_error_cause(uint64_t val) { change_gcr_redir_error_cause(val, 0); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_error_addr(void) { return mips_gcr_base + (0x0000 + 0x050); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_error_addr(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_error_addr()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_error_addr()); val64 = __raw_readl(addr_gcr_error_addr() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_error_addr()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_error_addr(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_error_addr()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_error_addr()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_error_addr() + 4); __raw_writel(val, addr_gcr_error_addr()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_error_addr(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_error_addr(); reg_val &= ~mask; reg_val |= val; write_gcr_error_addr(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_error_addr(uint64_t val) { change_gcr_error_addr(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_error_addr(uint64_t val) { change_gcr_error_addr(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_error_addr(void) { return mips_gcr_base + (0x4000 + 0x050); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_error_addr(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_error_addr()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_error_addr()); val64 = __raw_readl(addr_gcr_redir_error_addr() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_error_addr()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_error_addr(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_error_addr()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_error_addr()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_error_addr() + 4); __raw_writel(val, addr_gcr_redir_error_addr()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_error_addr(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_error_addr(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_error_addr(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_error_addr(uint64_t val) { change_gcr_redir_error_addr(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_error_addr(uint64_t val) { change_gcr_redir_error_addr(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_error_mult(void) { return mips_gcr_base + (0x0000 + 0x058); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_error_mult(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_error_mult()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_error_mult()); val64 = __raw_readl(addr_gcr_error_mult() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_error_mult()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_error_mult(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_error_mult()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_error_mult()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_error_mult() + 4); __raw_writel(val, addr_gcr_error_mult()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_error_mult(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_error_mult(); reg_val &= ~mask; reg_val |= val; write_gcr_error_mult(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_error_mult(uint64_t val) { change_gcr_error_mult(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_error_mult(uint64_t val) { change_gcr_error_mult(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_error_mult(void) { return mips_gcr_base + (0x4000 + 0x058); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_error_mult(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_error_mult()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_error_mult()); val64 = __raw_readl(addr_gcr_redir_error_mult() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_error_mult()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_error_mult(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_error_mult()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_error_mult()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_error_mult() + 4); __raw_writel(val, addr_gcr_redir_error_mult()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_error_mult(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_error_mult(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_error_mult(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_error_mult(uint64_t val) { change_gcr_redir_error_mult(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_error_mult(uint64_t val) { change_gcr_redir_error_mult(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_l2_only_sync_base(void) { return mips_gcr_base + (0x0000 + 0x070); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_l2_only_sync_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_l2_only_sync_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_l2_only_sync_base()); val64 = __raw_readl(addr_gcr_l2_only_sync_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_l2_only_sync_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_l2_only_sync_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_l2_only_sync_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_l2_only_sync_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_l2_only_sync_base() + 4); __raw_writel(val, addr_gcr_l2_only_sync_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_l2_only_sync_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_l2_only_sync_base(); reg_val &= ~mask; reg_val |= val; write_gcr_l2_only_sync_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_l2_only_sync_base(uint64_t val) { change_gcr_l2_only_sync_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_l2_only_sync_base(uint64_t val) { change_gcr_l2_only_sync_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_l2_only_sync_base(void) { return mips_gcr_base + (0x4000 + 0x070); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_l2_only_sync_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_l2_only_sync_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_l2_only_sync_base()); val64 = __raw_readl(addr_gcr_redir_l2_only_sync_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_l2_only_sync_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_l2_only_sync_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_l2_only_sync_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_l2_only_sync_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_l2_only_sync_base() + 4); __raw_writel(val, addr_gcr_redir_l2_only_sync_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_l2_only_sync_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_l2_only_sync_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_l2_only_sync_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_l2_only_sync_base(uint64_t val) { change_gcr_redir_l2_only_sync_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_l2_only_sync_base(uint64_t val) { change_gcr_redir_l2_only_sync_base(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_gic_base(void) { return mips_gcr_base + (0x0000 + 0x080); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_gic_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_gic_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_gic_base()); val64 = __raw_readl(addr_gcr_gic_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_gic_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_gic_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_gic_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_gic_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_gic_base() + 4); __raw_writel(val, addr_gcr_gic_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_gic_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_gic_base(); reg_val &= ~mask; reg_val |= val; write_gcr_gic_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_gic_base(uint64_t val) { change_gcr_gic_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_gic_base(uint64_t val) { change_gcr_gic_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_gic_base(void) { return mips_gcr_base + (0x4000 + 0x080); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_gic_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_gic_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_gic_base()); val64 = __raw_readl(addr_gcr_redir_gic_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_gic_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_gic_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_gic_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_gic_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_gic_base() + 4); __raw_writel(val, addr_gcr_redir_gic_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_gic_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_gic_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_gic_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_gic_base(uint64_t val) { change_gcr_redir_gic_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_gic_base(uint64_t val) { change_gcr_redir_gic_base(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cpc_base(void) { return mips_gcr_base + (0x0000 + 0x088); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_cpc_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_cpc_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cpc_base()); val64 = __raw_readl(addr_gcr_cpc_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cpc_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_cpc_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_cpc_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_cpc_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_cpc_base() + 4); __raw_writel(val, addr_gcr_cpc_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_cpc_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_cpc_base(); reg_val &= ~mask; reg_val |= val; write_gcr_cpc_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_cpc_base(uint64_t val) { change_gcr_cpc_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_cpc_base(uint64_t val) { change_gcr_cpc_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_cpc_base(void) { return mips_gcr_base + (0x4000 + 0x088); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_cpc_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_cpc_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_cpc_base()); val64 = __raw_readl(addr_gcr_redir_cpc_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_cpc_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_cpc_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_cpc_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_cpc_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_cpc_base() + 4); __raw_writel(val, addr_gcr_redir_cpc_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_cpc_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_cpc_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_cpc_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_cpc_base(uint64_t val) { change_gcr_redir_cpc_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_cpc_base(uint64_t val) { change_gcr_redir_cpc_base(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg0_base(void) { return mips_gcr_base + (0x0000 + 0x090); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg0_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg0_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg0_base()); val64 = __raw_readl(addr_gcr_reg0_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg0_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg0_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg0_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg0_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg0_base() + 4); __raw_writel(val, addr_gcr_reg0_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg0_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg0_base(); reg_val &= ~mask; reg_val |= val; write_gcr_reg0_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg0_base(uint64_t val) { change_gcr_reg0_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg0_base(uint64_t val) { change_gcr_reg0_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg0_base(void) { return mips_gcr_base + (0x4000 + 0x090); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg0_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg0_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg0_base()); val64 = __raw_readl(addr_gcr_redir_reg0_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg0_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg0_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg0_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg0_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg0_base() + 4); __raw_writel(val, addr_gcr_redir_reg0_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg0_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg0_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg0_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg0_base(uint64_t val) { change_gcr_redir_reg0_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg0_base(uint64_t val) { change_gcr_redir_reg0_base(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg1_base(void) { return mips_gcr_base + (0x0000 + 0x0a0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg1_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg1_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg1_base()); val64 = __raw_readl(addr_gcr_reg1_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg1_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg1_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg1_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg1_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg1_base() + 4); __raw_writel(val, addr_gcr_reg1_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg1_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg1_base(); reg_val &= ~mask; reg_val |= val; write_gcr_reg1_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg1_base(uint64_t val) { change_gcr_reg1_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg1_base(uint64_t val) { change_gcr_reg1_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg1_base(void) { return mips_gcr_base + (0x4000 + 0x0a0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg1_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg1_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg1_base()); val64 = __raw_readl(addr_gcr_redir_reg1_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg1_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg1_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg1_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg1_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg1_base() + 4); __raw_writel(val, addr_gcr_redir_reg1_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg1_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg1_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg1_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg1_base(uint64_t val) { change_gcr_redir_reg1_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg1_base(uint64_t val) { change_gcr_redir_reg1_base(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg2_base(void) { return mips_gcr_base + (0x0000 + 0x0b0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg2_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg2_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg2_base()); val64 = __raw_readl(addr_gcr_reg2_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg2_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg2_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg2_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg2_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg2_base() + 4); __raw_writel(val, addr_gcr_reg2_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg2_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg2_base(); reg_val &= ~mask; reg_val |= val; write_gcr_reg2_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg2_base(uint64_t val) { change_gcr_reg2_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg2_base(uint64_t val) { change_gcr_reg2_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg2_base(void) { return mips_gcr_base + (0x4000 + 0x0b0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg2_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg2_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg2_base()); val64 = __raw_readl(addr_gcr_redir_reg2_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg2_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg2_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg2_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg2_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg2_base() + 4); __raw_writel(val, addr_gcr_redir_reg2_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg2_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg2_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg2_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg2_base(uint64_t val) { change_gcr_redir_reg2_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg2_base(uint64_t val) { change_gcr_redir_reg2_base(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg3_base(void) { return mips_gcr_base + (0x0000 + 0x0c0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg3_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg3_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg3_base()); val64 = __raw_readl(addr_gcr_reg3_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg3_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg3_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg3_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg3_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg3_base() + 4); __raw_writel(val, addr_gcr_reg3_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg3_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg3_base(); reg_val &= ~mask; reg_val |= val; write_gcr_reg3_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg3_base(uint64_t val) { change_gcr_reg3_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg3_base(uint64_t val) { change_gcr_reg3_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg3_base(void) { return mips_gcr_base + (0x4000 + 0x0c0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg3_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg3_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg3_base()); val64 = __raw_readl(addr_gcr_redir_reg3_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg3_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg3_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg3_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg3_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg3_base() + 4); __raw_writel(val, addr_gcr_redir_reg3_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg3_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg3_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg3_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg3_base(uint64_t val) { change_gcr_redir_reg3_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg3_base(uint64_t val) { change_gcr_redir_reg3_base(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg0_mask(void) { return mips_gcr_base + (0x0000 + 0x098); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg0_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg0_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg0_mask()); val64 = __raw_readl(addr_gcr_reg0_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg0_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg0_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg0_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg0_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg0_mask() + 4); __raw_writel(val, addr_gcr_reg0_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg0_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg0_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_reg0_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg0_mask(uint64_t val) { change_gcr_reg0_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg0_mask(uint64_t val) { change_gcr_reg0_mask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg0_mask(void) { return mips_gcr_base + (0x4000 + 0x098); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg0_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg0_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg0_mask()); val64 = __raw_readl(addr_gcr_redir_reg0_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg0_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg0_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg0_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg0_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg0_mask() + 4); __raw_writel(val, addr_gcr_redir_reg0_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg0_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg0_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg0_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg0_mask(uint64_t val) { change_gcr_redir_reg0_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg0_mask(uint64_t val) { change_gcr_redir_reg0_mask(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg1_mask(void) { return mips_gcr_base + (0x0000 + 0x0a8); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg1_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg1_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg1_mask()); val64 = __raw_readl(addr_gcr_reg1_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg1_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg1_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg1_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg1_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg1_mask() + 4); __raw_writel(val, addr_gcr_reg1_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg1_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg1_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_reg1_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg1_mask(uint64_t val) { change_gcr_reg1_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg1_mask(uint64_t val) { change_gcr_reg1_mask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg1_mask(void) { return mips_gcr_base + (0x4000 + 0x0a8); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg1_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg1_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg1_mask()); val64 = __raw_readl(addr_gcr_redir_reg1_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg1_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg1_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg1_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg1_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg1_mask() + 4); __raw_writel(val, addr_gcr_redir_reg1_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg1_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg1_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg1_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg1_mask(uint64_t val) { change_gcr_redir_reg1_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg1_mask(uint64_t val) { change_gcr_redir_reg1_mask(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg2_mask(void) { return mips_gcr_base + (0x0000 + 0x0b8); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg2_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg2_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg2_mask()); val64 = __raw_readl(addr_gcr_reg2_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg2_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg2_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg2_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg2_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg2_mask() + 4); __raw_writel(val, addr_gcr_reg2_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg2_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg2_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_reg2_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg2_mask(uint64_t val) { change_gcr_reg2_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg2_mask(uint64_t val) { change_gcr_reg2_mask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg2_mask(void) { return mips_gcr_base + (0x4000 + 0x0b8); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg2_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg2_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg2_mask()); val64 = __raw_readl(addr_gcr_redir_reg2_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg2_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg2_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg2_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg2_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg2_mask() + 4); __raw_writel(val, addr_gcr_redir_reg2_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg2_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg2_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg2_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg2_mask(uint64_t val) { change_gcr_redir_reg2_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg2_mask(uint64_t val) { change_gcr_redir_reg2_mask(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_reg3_mask(void) { return mips_gcr_base + (0x0000 + 0x0c8); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_reg3_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_reg3_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_reg3_mask()); val64 = __raw_readl(addr_gcr_reg3_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_reg3_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_reg3_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_reg3_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_reg3_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_reg3_mask() + 4); __raw_writel(val, addr_gcr_reg3_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_reg3_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_reg3_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_reg3_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_reg3_mask(uint64_t val) { change_gcr_reg3_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_reg3_mask(uint64_t val) { change_gcr_reg3_mask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_reg3_mask(void) { return mips_gcr_base + (0x4000 + 0x0c8); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_reg3_mask(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_reg3_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_reg3_mask()); val64 = __raw_readl(addr_gcr_redir_reg3_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_reg3_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_reg3_mask(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_reg3_mask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_reg3_mask()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_reg3_mask() + 4); __raw_writel(val, addr_gcr_redir_reg3_mask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_reg3_mask(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_reg3_mask(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_reg3_mask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_reg3_mask(uint64_t val) { change_gcr_redir_reg3_mask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_reg3_mask(uint64_t val) { change_gcr_redir_reg3_mask(val, 0); }
# 224 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_gic_status(void) { return mips_gcr_base + (0x0000 + 0x0d0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_gic_status(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_gic_status()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_gic_status()); val64 = __raw_readl(addr_gcr_gic_status() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_gic_status()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_gic_status(void) { return mips_gcr_base + (0x4000 + 0x0d0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_gic_status(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_gic_status()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_gic_status()); val64 = __raw_readl(addr_gcr_redir_gic_status() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_gic_status()); return val64; default: return __cps_access_bad_size(); } }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cpc_status(void) { return mips_gcr_base + (0x0000 + 0x0f0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cpc_status(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cpc_status()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cpc_status()); val64 = __raw_readl(addr_gcr_cpc_status() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cpc_status()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_cpc_status(void) { return mips_gcr_base + (0x4000 + 0x0f0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_cpc_status(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_cpc_status()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_cpc_status()); val64 = __raw_readl(addr_gcr_redir_cpc_status() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_cpc_status()); return val64; default: return __cps_access_bad_size(); } }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_l2_config(void) { return mips_gcr_base + (0x0000 + 0x130); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_l2_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_l2_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_l2_config()); val64 = __raw_readl(addr_gcr_l2_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_l2_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_l2_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_l2_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_l2_config()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_l2_config() + 4); __raw_writel(val, addr_gcr_l2_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_l2_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_l2_config(); reg_val &= ~mask; reg_val |= val; write_gcr_l2_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_l2_config(uint32_t val) { change_gcr_l2_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_l2_config(uint32_t val) { change_gcr_l2_config(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_l2_config(void) { return mips_gcr_base + (0x4000 + 0x130); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_l2_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_l2_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_l2_config()); val64 = __raw_readl(addr_gcr_redir_l2_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_l2_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_l2_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_redir_l2_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_l2_config()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_l2_config() + 4); __raw_writel(val, addr_gcr_redir_l2_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_l2_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_redir_l2_config(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_l2_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_l2_config(uint32_t val) { change_gcr_redir_l2_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_l2_config(uint32_t val) { change_gcr_redir_l2_config(val, 0); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_sys_config2(void) { return mips_gcr_base + (0x0000 + 0x150); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_sys_config2(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_sys_config2()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_sys_config2()); val64 = __raw_readl(addr_gcr_sys_config2() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_sys_config2()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_sys_config2(void) { return mips_gcr_base + (0x4000 + 0x150); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_sys_config2(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_sys_config2()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_sys_config2()); val64 = __raw_readl(addr_gcr_redir_sys_config2() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_sys_config2()); return val64; default: return __cps_access_bad_size(); } }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_l2_pft_control(void) { return mips_gcr_base + (0x0000 + 0x300); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_l2_pft_control(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_l2_pft_control()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_l2_pft_control()); val64 = __raw_readl(addr_gcr_l2_pft_control() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_l2_pft_control()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_l2_pft_control(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_l2_pft_control()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_l2_pft_control()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_l2_pft_control() + 4); __raw_writel(val, addr_gcr_l2_pft_control()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_l2_pft_control(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_l2_pft_control(); reg_val &= ~mask; reg_val |= val; write_gcr_l2_pft_control(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_l2_pft_control(uint32_t val) { change_gcr_l2_pft_control(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_l2_pft_control(uint32_t val) { change_gcr_l2_pft_control(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_l2_pft_control(void) { return mips_gcr_base + (0x4000 + 0x300); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_l2_pft_control(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_l2_pft_control()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_l2_pft_control()); val64 = __raw_readl(addr_gcr_redir_l2_pft_control() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_l2_pft_control()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_l2_pft_control(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_redir_l2_pft_control()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_l2_pft_control()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_l2_pft_control() + 4); __raw_writel(val, addr_gcr_redir_l2_pft_control()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_l2_pft_control(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_redir_l2_pft_control(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_l2_pft_control(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_l2_pft_control(uint32_t val) { change_gcr_redir_l2_pft_control(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_l2_pft_control(uint32_t val) { change_gcr_redir_l2_pft_control(val, 0); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_l2_pft_control_b(void) { return mips_gcr_base + (0x0000 + 0x308); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_l2_pft_control_b(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_l2_pft_control_b()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_l2_pft_control_b()); val64 = __raw_readl(addr_gcr_l2_pft_control_b() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_l2_pft_control_b()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_l2_pft_control_b(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_l2_pft_control_b()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_l2_pft_control_b()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_l2_pft_control_b() + 4); __raw_writel(val, addr_gcr_l2_pft_control_b()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_l2_pft_control_b(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_l2_pft_control_b(); reg_val &= ~mask; reg_val |= val; write_gcr_l2_pft_control_b(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_l2_pft_control_b(uint32_t val) { change_gcr_l2_pft_control_b(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_l2_pft_control_b(uint32_t val) { change_gcr_l2_pft_control_b(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_l2_pft_control_b(void) { return mips_gcr_base + (0x4000 + 0x308); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_l2_pft_control_b(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_l2_pft_control_b()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_l2_pft_control_b()); val64 = __raw_readl(addr_gcr_redir_l2_pft_control_b() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_l2_pft_control_b()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_l2_pft_control_b(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_redir_l2_pft_control_b()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_l2_pft_control_b()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_l2_pft_control_b() + 4); __raw_writel(val, addr_gcr_redir_l2_pft_control_b()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_l2_pft_control_b(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_redir_l2_pft_control_b(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_l2_pft_control_b(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_l2_pft_control_b(uint32_t val) { change_gcr_redir_l2_pft_control_b(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_l2_pft_control_b(uint32_t val) { change_gcr_redir_l2_pft_control_b(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_l2sm_cop(void) { return mips_gcr_base + (0x0000 + 0x620); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_l2sm_cop(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_l2sm_cop()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_l2sm_cop()); val64 = __raw_readl(addr_gcr_l2sm_cop() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_l2sm_cop()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_l2sm_cop(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_l2sm_cop()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_l2sm_cop()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_l2sm_cop() + 4); __raw_writel(val, addr_gcr_l2sm_cop()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_l2sm_cop(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_l2sm_cop(); reg_val &= ~mask; reg_val |= val; write_gcr_l2sm_cop(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_l2sm_cop(uint32_t val) { change_gcr_l2sm_cop(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_l2sm_cop(uint32_t val) { change_gcr_l2sm_cop(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_l2sm_cop(void) { return mips_gcr_base + (0x4000 + 0x620); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_redir_l2sm_cop(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_redir_l2sm_cop()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_l2sm_cop()); val64 = __raw_readl(addr_gcr_redir_l2sm_cop() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_l2sm_cop()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_l2sm_cop(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_redir_l2sm_cop()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_l2sm_cop()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_l2sm_cop() + 4); __raw_writel(val, addr_gcr_redir_l2sm_cop()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_l2sm_cop(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_redir_l2sm_cop(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_l2sm_cop(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_l2sm_cop(uint32_t val) { change_gcr_redir_l2sm_cop(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_l2sm_cop(uint32_t val) { change_gcr_redir_l2sm_cop(val, 0); }
# 276 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_l2sm_tag_addr_cop(void) { return mips_gcr_base + (0x0000 + 0x628); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_l2sm_tag_addr_cop(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_l2sm_tag_addr_cop()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_l2sm_tag_addr_cop()); val64 = __raw_readl(addr_gcr_l2sm_tag_addr_cop() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_l2sm_tag_addr_cop()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_l2sm_tag_addr_cop(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_l2sm_tag_addr_cop()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_l2sm_tag_addr_cop()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_l2sm_tag_addr_cop() + 4); __raw_writel(val, addr_gcr_l2sm_tag_addr_cop()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_l2sm_tag_addr_cop(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_l2sm_tag_addr_cop(); reg_val &= ~mask; reg_val |= val; write_gcr_l2sm_tag_addr_cop(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_l2sm_tag_addr_cop(uint64_t val) { change_gcr_l2sm_tag_addr_cop(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_l2sm_tag_addr_cop(uint64_t val) { change_gcr_l2sm_tag_addr_cop(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_l2sm_tag_addr_cop(void) { return mips_gcr_base + (0x4000 + 0x628); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_l2sm_tag_addr_cop(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_l2sm_tag_addr_cop()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_l2sm_tag_addr_cop()); val64 = __raw_readl(addr_gcr_redir_l2sm_tag_addr_cop() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_l2sm_tag_addr_cop()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_l2sm_tag_addr_cop(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_l2sm_tag_addr_cop()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_l2sm_tag_addr_cop()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_l2sm_tag_addr_cop() + 4); __raw_writel(val, addr_gcr_redir_l2sm_tag_addr_cop()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_l2sm_tag_addr_cop(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_l2sm_tag_addr_cop(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_l2sm_tag_addr_cop(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_l2sm_tag_addr_cop(uint64_t val) { change_gcr_redir_l2sm_tag_addr_cop(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_l2sm_tag_addr_cop(uint64_t val) { change_gcr_redir_l2sm_tag_addr_cop(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_bev_base(void) { return mips_gcr_base + (0x0000 + 0x680); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_bev_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_bev_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_bev_base()); val64 = __raw_readl(addr_gcr_bev_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_bev_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_bev_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_bev_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_bev_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_bev_base() + 4); __raw_writel(val, addr_gcr_bev_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_bev_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_bev_base(); reg_val &= ~mask; reg_val |= val; write_gcr_bev_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_bev_base(uint64_t val) { change_gcr_bev_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_bev_base(uint64_t val) { change_gcr_bev_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_redir_bev_base(void) { return mips_gcr_base + (0x4000 + 0x680); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gcr_redir_bev_base(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gcr_redir_bev_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_redir_bev_base()); val64 = __raw_readl(addr_gcr_redir_bev_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_redir_bev_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_redir_bev_base(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gcr_redir_bev_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_redir_bev_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_redir_bev_base() + 4); __raw_writel(val, addr_gcr_redir_bev_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_redir_bev_base(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gcr_redir_bev_base(); reg_val &= ~mask; reg_val |= val; write_gcr_redir_bev_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_redir_bev_base(uint64_t val) { change_gcr_redir_bev_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_redir_bev_base(uint64_t val) { change_gcr_redir_bev_base(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_reset_release(void) { return mips_gcr_base + (0x2000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_reset_release(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_reset_release()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_reset_release()); val64 = __raw_readl(addr_gcr_cl_reset_release() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_reset_release()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_cl_reset_release(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_cl_reset_release()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_cl_reset_release()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_cl_reset_release() + 4); __raw_writel(val, addr_gcr_cl_reset_release()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_cl_reset_release(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_cl_reset_release(); reg_val &= ~mask; reg_val |= val; write_gcr_cl_reset_release(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_cl_reset_release(uint32_t val) { change_gcr_cl_reset_release(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_cl_reset_release(uint32_t val) { change_gcr_cl_reset_release(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_reset_release(void) { return mips_gcr_base + (0x4000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_reset_release(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_reset_release()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_reset_release()); val64 = __raw_readl(addr_gcr_co_reset_release() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_reset_release()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_co_reset_release(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_co_reset_release()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_co_reset_release()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_co_reset_release() + 4); __raw_writel(val, addr_gcr_co_reset_release()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_co_reset_release(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_co_reset_release(); reg_val &= ~mask; reg_val |= val; write_gcr_co_reset_release(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_co_reset_release(uint32_t val) { change_gcr_co_reset_release(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_co_reset_release(uint32_t val) { change_gcr_co_reset_release(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_coherence(void) { return mips_gcr_base + (0x2000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_coherence(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_coherence()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_coherence()); val64 = __raw_readl(addr_gcr_cl_coherence() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_coherence()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_cl_coherence(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_cl_coherence()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_cl_coherence()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_cl_coherence() + 4); __raw_writel(val, addr_gcr_cl_coherence()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_cl_coherence(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_cl_coherence(); reg_val &= ~mask; reg_val |= val; write_gcr_cl_coherence(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_cl_coherence(uint32_t val) { change_gcr_cl_coherence(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_cl_coherence(uint32_t val) { change_gcr_cl_coherence(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_coherence(void) { return mips_gcr_base + (0x4000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_coherence(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_coherence()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_coherence()); val64 = __raw_readl(addr_gcr_co_coherence() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_coherence()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_co_coherence(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_co_coherence()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_co_coherence()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_co_coherence() + 4); __raw_writel(val, addr_gcr_co_coherence()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_co_coherence(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_co_coherence(); reg_val &= ~mask; reg_val |= val; write_gcr_co_coherence(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_co_coherence(uint32_t val) { change_gcr_co_coherence(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_co_coherence(uint32_t val) { change_gcr_co_coherence(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_config(void) { return mips_gcr_base + (0x2000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_config()); val64 = __raw_readl(addr_gcr_cl_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_config(void) { return mips_gcr_base + (0x4000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_config()); val64 = __raw_readl(addr_gcr_co_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_config()); return val64; default: return __cps_access_bad_size(); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_other(void) { return mips_gcr_base + (0x2000 + 0x018); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_other(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_other()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_other()); val64 = __raw_readl(addr_gcr_cl_other() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_other()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_cl_other(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_cl_other()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_cl_other()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_cl_other() + 4); __raw_writel(val, addr_gcr_cl_other()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_cl_other(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_cl_other(); reg_val &= ~mask; reg_val |= val; write_gcr_cl_other(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_cl_other(uint32_t val) { change_gcr_cl_other(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_cl_other(uint32_t val) { change_gcr_cl_other(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_other(void) { return mips_gcr_base + (0x4000 + 0x018); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_other(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_other()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_other()); val64 = __raw_readl(addr_gcr_co_other() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_other()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_co_other(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_co_other()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_co_other()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_co_other() + 4); __raw_writel(val, addr_gcr_co_other()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_co_other(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_co_other(); reg_val &= ~mask; reg_val |= val; write_gcr_co_other(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_co_other(uint32_t val) { change_gcr_co_other(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_co_other(uint32_t val) { change_gcr_co_other(val, 0); }
# 312 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_reset_base(void) { return mips_gcr_base + (0x2000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_reset_base(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_reset_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_reset_base()); val64 = __raw_readl(addr_gcr_cl_reset_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_reset_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_cl_reset_base(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_cl_reset_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_cl_reset_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_cl_reset_base() + 4); __raw_writel(val, addr_gcr_cl_reset_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_cl_reset_base(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_cl_reset_base(); reg_val &= ~mask; reg_val |= val; write_gcr_cl_reset_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_cl_reset_base(uint32_t val) { change_gcr_cl_reset_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_cl_reset_base(uint32_t val) { change_gcr_cl_reset_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_reset_base(void) { return mips_gcr_base + (0x4000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_reset_base(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_reset_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_reset_base()); val64 = __raw_readl(addr_gcr_co_reset_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_reset_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_co_reset_base(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_co_reset_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_co_reset_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_co_reset_base() + 4); __raw_writel(val, addr_gcr_co_reset_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_co_reset_base(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_co_reset_base(); reg_val &= ~mask; reg_val |= val; write_gcr_co_reset_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_co_reset_base(uint32_t val) { change_gcr_co_reset_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_co_reset_base(uint32_t val) { change_gcr_co_reset_base(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_id(void) { return mips_gcr_base + (0x2000 + 0x028); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_id(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_id()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_id()); val64 = __raw_readl(addr_gcr_cl_id() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_id()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_id(void) { return mips_gcr_base + (0x4000 + 0x028); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_id(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_id()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_id()); val64 = __raw_readl(addr_gcr_co_id() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_id()); return val64; default: return __cps_access_bad_size(); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_cl_reset_ext_base(void) { return mips_gcr_base + (0x2000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_cl_reset_ext_base(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_cl_reset_ext_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_cl_reset_ext_base()); val64 = __raw_readl(addr_gcr_cl_reset_ext_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_cl_reset_ext_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_cl_reset_ext_base(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_cl_reset_ext_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_cl_reset_ext_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_cl_reset_ext_base() + 4); __raw_writel(val, addr_gcr_cl_reset_ext_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_cl_reset_ext_base(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_cl_reset_ext_base(); reg_val &= ~mask; reg_val |= val; write_gcr_cl_reset_ext_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_cl_reset_ext_base(uint32_t val) { change_gcr_cl_reset_ext_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_cl_reset_ext_base(uint32_t val) { change_gcr_cl_reset_ext_base(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gcr_co_reset_ext_base(void) { return mips_gcr_base + (0x4000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gcr_co_reset_ext_base(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gcr_co_reset_ext_base()); case 64: if (mips_cm_is64) return __raw_readq(addr_gcr_co_reset_ext_base()); val64 = __raw_readl(addr_gcr_co_reset_ext_base() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gcr_co_reset_ext_base()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gcr_co_reset_ext_base(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gcr_co_reset_ext_base()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gcr_co_reset_ext_base()); break; } __raw_writel((uint64_t)val >> 32, addr_gcr_co_reset_ext_base() + 4); __raw_writel(val, addr_gcr_co_reset_ext_base()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gcr_co_reset_ext_base(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gcr_co_reset_ext_base(); reg_val &= ~mask; reg_val |= val; write_gcr_co_reset_ext_base(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gcr_co_reset_ext_base(uint32_t val) { change_gcr_co_reset_ext_base(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gcr_co_reset_ext_base(uint32_t val) { change_gcr_co_reset_ext_base(val, 0); }
# 334 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mips_cm_l2sync(void)
{
 if (!mips_cm_has_l2sync())
  return -19;

 writel(0, mips_cm_l2sync_base);
 return 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mips_cm_revision(void)
{
 if (!mips_cm_present())
  return 0;

 return read_gcr_rev();
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mips_cm_max_vp_width(void)
{
 extern int smp_num_siblings;

 if (mips_cm_revision() >= (({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_70(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15))))))))) __compiletime_assert_70(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_71(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) == 0))) __compiletime_assert_71(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_72(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(8) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (8) : 0))) __compiletime_assert_72(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_73(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_73(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_74(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0))) __compiletime_assert_74(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))))(8) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))); }) | ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_75(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))))))) __compiletime_assert_75(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_76(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) == 0))) __compiletime_assert_76(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_77(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(0) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (0) : 0))) __compiletime_assert_77(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_78(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_78(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_79(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0))) __compiletime_assert_79(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))))(0) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))); })))
  return ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_80(void) __attribute__((__error__("FIELD_GET: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3))))))))) __compiletime_assert_80(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_81(void) __attribute__((__error__("FIELD_GET: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) == 0))) __compiletime_assert_81(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_82(void) __attribute__((__error__("FIELD_GET: " "value too large for the field"))); if (!(!(__builtin_constant_p(0U) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) - 1)) & (0U) : 0))) __compiletime_assert_82(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_83(void) __attribute__((__error__("FIELD_GET: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) > (typeof(read_gcr_sys_config2()))~0ull))) __compiletime_assert_83(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_84(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) - 1))) - 1)) != 0))) __compiletime_assert_84(); } while (0); }); (typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))))(((read_gcr_sys_config2()) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3))))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (3)) * 0l)) : (int *)8))), (0) > (3), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (3)))))) - 1)); });


 if (mips_cm_present()) {





  return ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_85(void) __attribute__((__error__("FIELD_GET: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9))))))))) __compiletime_assert_85(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_86(void) __attribute__((__error__("FIELD_GET: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) == 0))) __compiletime_assert_86(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_87(void) __attribute__((__error__("FIELD_GET: " "value too large for the field"))); if (!(!(__builtin_constant_p(0U) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) - 1)) & (0U) : 0))) __compiletime_assert_87(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_88(void) __attribute__((__error__("FIELD_GET: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) > (typeof(read_gcr_cl_config()))~0ull))) __compiletime_assert_88(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_89(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) - 1))) - 1)) != 0))) __compiletime_assert_89(); } while (0); }); (typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))))(((read_gcr_cl_config()) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9))))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) - 1)); }) + 1;
 }

 if (1)
  return smp_num_siblings;

 return 1;
}
# 396 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mips_cm_vp_id(unsigned int cpu)
{
 unsigned int core = cpu_core(&cpu_data[cpu]);
 unsigned int vp = cpu_vpe_id(&cpu_data[cpu]);

 return (core * mips_cm_max_vp_width()) + vp;
}
# 437 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mips_cm_lock_other(unsigned int cluster, unsigned int core,
          unsigned int vp, unsigned int block) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mips_cm_unlock_other(void) { }
# 452 "./arch/mips/include/asm/mips-cm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mips_cm_lock_other_cpu(unsigned int cpu, unsigned int block)
{
 struct cpuinfo_mips *d = &cpu_data[cpu];

 mips_cm_lock_other(cpu_cluster(d), cpu_core(d), cpu_vpe_id(d), block);
}
# 105 "./arch/mips/include/asm/mips-cps.h" 2
# 1 "./arch/mips/include/asm/mips-cpc.h" 1
# 18 "./arch/mips/include/asm/mips-cpc.h"
extern void *mips_cpc_base;
# 28 "./arch/mips/include/asm/mips-cpc.h"
extern phys_addr_t mips_cpc_default_phys_base(void);
# 39 "./arch/mips/include/asm/mips-cpc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mips_cpc_probe(void)
{
 return -19;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mips_cpc_present(void)
{



 return false;

}
# 81 "./arch/mips/include/asm/mips-cpc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_access(void) { return mips_cpc_base + (0x0000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_access(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_access()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_access()); val64 = __raw_readl(addr_cpc_access() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_access()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_access(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_access()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_access()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_access() + 4); __raw_writel(val, addr_cpc_access()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_access(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_access(); reg_val &= ~mask; reg_val |= val; write_cpc_access(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_access(uint32_t val) { change_cpc_access(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_access(uint32_t val) { change_cpc_access(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_access(void) { return mips_cpc_base + (0x4000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_access(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_access()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_access()); val64 = __raw_readl(addr_cpc_redir_access() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_access()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_access(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_redir_access()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_access()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_access() + 4); __raw_writel(val, addr_cpc_redir_access()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_access(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_redir_access(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_access(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_access(uint32_t val) { change_cpc_redir_access(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_access(uint32_t val) { change_cpc_redir_access(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_seqdel(void) { return mips_cpc_base + (0x0000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_seqdel(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_seqdel()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_seqdel()); val64 = __raw_readl(addr_cpc_seqdel() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_seqdel()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_seqdel(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_seqdel()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_seqdel()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_seqdel() + 4); __raw_writel(val, addr_cpc_seqdel()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_seqdel(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_seqdel(); reg_val &= ~mask; reg_val |= val; write_cpc_seqdel(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_seqdel(uint32_t val) { change_cpc_seqdel(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_seqdel(uint32_t val) { change_cpc_seqdel(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_seqdel(void) { return mips_cpc_base + (0x4000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_seqdel(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_seqdel()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_seqdel()); val64 = __raw_readl(addr_cpc_redir_seqdel() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_seqdel()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_seqdel(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_redir_seqdel()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_seqdel()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_seqdel() + 4); __raw_writel(val, addr_cpc_redir_seqdel()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_seqdel(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_redir_seqdel(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_seqdel(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_seqdel(uint32_t val) { change_cpc_redir_seqdel(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_seqdel(uint32_t val) { change_cpc_redir_seqdel(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_rail(void) { return mips_cpc_base + (0x0000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_rail(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_rail()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_rail()); val64 = __raw_readl(addr_cpc_rail() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_rail()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_rail(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_rail()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_rail()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_rail() + 4); __raw_writel(val, addr_cpc_rail()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_rail(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_rail(); reg_val &= ~mask; reg_val |= val; write_cpc_rail(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_rail(uint32_t val) { change_cpc_rail(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_rail(uint32_t val) { change_cpc_rail(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_rail(void) { return mips_cpc_base + (0x4000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_rail(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_rail()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_rail()); val64 = __raw_readl(addr_cpc_redir_rail() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_rail()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_rail(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_redir_rail()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_rail()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_rail() + 4); __raw_writel(val, addr_cpc_redir_rail()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_rail(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_redir_rail(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_rail(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_rail(uint32_t val) { change_cpc_redir_rail(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_rail(uint32_t val) { change_cpc_redir_rail(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_resetlen(void) { return mips_cpc_base + (0x0000 + 0x018); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_resetlen(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_resetlen()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_resetlen()); val64 = __raw_readl(addr_cpc_resetlen() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_resetlen()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_resetlen(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_resetlen()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_resetlen()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_resetlen() + 4); __raw_writel(val, addr_cpc_resetlen()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_resetlen(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_resetlen(); reg_val &= ~mask; reg_val |= val; write_cpc_resetlen(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_resetlen(uint32_t val) { change_cpc_resetlen(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_resetlen(uint32_t val) { change_cpc_resetlen(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_resetlen(void) { return mips_cpc_base + (0x4000 + 0x018); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_resetlen(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_resetlen()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_resetlen()); val64 = __raw_readl(addr_cpc_redir_resetlen() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_resetlen()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_resetlen(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_redir_resetlen()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_resetlen()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_resetlen() + 4); __raw_writel(val, addr_cpc_redir_resetlen()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_resetlen(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_redir_resetlen(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_resetlen(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_resetlen(uint32_t val) { change_cpc_redir_resetlen(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_resetlen(uint32_t val) { change_cpc_redir_resetlen(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_revision(void) { return mips_cpc_base + (0x0000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_revision(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_revision()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_revision()); val64 = __raw_readl(addr_cpc_revision() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_revision()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_revision(void) { return mips_cpc_base + (0x4000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_revision(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_revision()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_revision()); val64 = __raw_readl(addr_cpc_redir_revision() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_revision()); return val64; default: return __cps_access_bad_size(); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_pwrup_ctl(void) { return mips_cpc_base + (0x0000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_pwrup_ctl(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_pwrup_ctl()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_pwrup_ctl()); val64 = __raw_readl(addr_cpc_pwrup_ctl() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_pwrup_ctl()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_pwrup_ctl(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_pwrup_ctl()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_pwrup_ctl()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_pwrup_ctl() + 4); __raw_writel(val, addr_cpc_pwrup_ctl()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_pwrup_ctl(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_pwrup_ctl(); reg_val &= ~mask; reg_val |= val; write_cpc_pwrup_ctl(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_pwrup_ctl(uint32_t val) { change_cpc_pwrup_ctl(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_pwrup_ctl(uint32_t val) { change_cpc_pwrup_ctl(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_pwrup_ctl(void) { return mips_cpc_base + (0x4000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_pwrup_ctl(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_pwrup_ctl()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_pwrup_ctl()); val64 = __raw_readl(addr_cpc_redir_pwrup_ctl() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_pwrup_ctl()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_pwrup_ctl(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_redir_pwrup_ctl()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_pwrup_ctl()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_pwrup_ctl() + 4); __raw_writel(val, addr_cpc_redir_pwrup_ctl()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_pwrup_ctl(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_redir_pwrup_ctl(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_pwrup_ctl(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_pwrup_ctl(uint32_t val) { change_cpc_redir_pwrup_ctl(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_pwrup_ctl(uint32_t val) { change_cpc_redir_pwrup_ctl(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_config(void) { return mips_cpc_base + (0x0000 + 0x138); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_cpc_config(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_cpc_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_config()); val64 = __raw_readl(addr_cpc_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_config(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_cpc_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_config()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_config() + 4); __raw_writel(val, addr_cpc_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_config(uint64_t mask, uint64_t val) { uint64_t reg_val = read_cpc_config(); reg_val &= ~mask; reg_val |= val; write_cpc_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_config(uint64_t val) { change_cpc_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_config(uint64_t val) { change_cpc_config(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_config(void) { return mips_cpc_base + (0x4000 + 0x138); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_cpc_redir_config(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_cpc_redir_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_config()); val64 = __raw_readl(addr_cpc_redir_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_config(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_cpc_redir_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_config()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_config() + 4); __raw_writel(val, addr_cpc_redir_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_config(uint64_t mask, uint64_t val) { uint64_t reg_val = read_cpc_redir_config(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_config(uint64_t val) { change_cpc_redir_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_config(uint64_t val) { change_cpc_redir_config(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_sys_config(void) { return mips_cpc_base + (0x0000 + 0x140); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_sys_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_sys_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_sys_config()); val64 = __raw_readl(addr_cpc_sys_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_sys_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_sys_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_sys_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_sys_config()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_sys_config() + 4); __raw_writel(val, addr_cpc_sys_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_sys_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_sys_config(); reg_val &= ~mask; reg_val |= val; write_cpc_sys_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_sys_config(uint32_t val) { change_cpc_sys_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_sys_config(uint32_t val) { change_cpc_sys_config(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_redir_sys_config(void) { return mips_cpc_base + (0x4000 + 0x140); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_redir_sys_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_redir_sys_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_redir_sys_config()); val64 = __raw_readl(addr_cpc_redir_sys_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_redir_sys_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_redir_sys_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_redir_sys_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_redir_sys_config()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_redir_sys_config() + 4); __raw_writel(val, addr_cpc_redir_sys_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_redir_sys_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_redir_sys_config(); reg_val &= ~mask; reg_val |= val; write_cpc_redir_sys_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_redir_sys_config(uint32_t val) { change_cpc_redir_sys_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_redir_sys_config(uint32_t val) { change_cpc_redir_sys_config(val, 0); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_cmd(void) { return mips_cpc_base + (0x2000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_cmd(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_cmd()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_cmd()); val64 = __raw_readl(addr_cpc_cl_cmd() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_cmd()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_cmd(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_cmd()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_cmd()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_cmd() + 4); __raw_writel(val, addr_cpc_cl_cmd()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_cmd(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_cmd(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_cmd(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_cmd(uint32_t val) { change_cpc_cl_cmd(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_cmd(uint32_t val) { change_cpc_cl_cmd(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_cmd(void) { return mips_cpc_base + (0x4000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_cmd(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_cmd()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_cmd()); val64 = __raw_readl(addr_cpc_co_cmd() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_cmd()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_cmd(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_cmd()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_cmd()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_cmd() + 4); __raw_writel(val, addr_cpc_co_cmd()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_cmd(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_cmd(); reg_val &= ~mask; reg_val |= val; write_cpc_co_cmd(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_cmd(uint32_t val) { change_cpc_co_cmd(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_cmd(uint32_t val) { change_cpc_co_cmd(val, 0); }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_stat_conf(void) { return mips_cpc_base + (0x2000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_stat_conf(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_stat_conf()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_stat_conf()); val64 = __raw_readl(addr_cpc_cl_stat_conf() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_stat_conf()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_stat_conf(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_stat_conf()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_stat_conf()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_stat_conf() + 4); __raw_writel(val, addr_cpc_cl_stat_conf()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_stat_conf(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_stat_conf(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_stat_conf(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_stat_conf(uint32_t val) { change_cpc_cl_stat_conf(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_stat_conf(uint32_t val) { change_cpc_cl_stat_conf(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_stat_conf(void) { return mips_cpc_base + (0x4000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_stat_conf(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_stat_conf()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_stat_conf()); val64 = __raw_readl(addr_cpc_co_stat_conf() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_stat_conf()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_stat_conf(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_stat_conf()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_stat_conf()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_stat_conf() + 4); __raw_writel(val, addr_cpc_co_stat_conf()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_stat_conf(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_stat_conf(); reg_val &= ~mask; reg_val |= val; write_cpc_co_stat_conf(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_stat_conf(uint32_t val) { change_cpc_co_stat_conf(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_stat_conf(uint32_t val) { change_cpc_co_stat_conf(val, 0); }
# 136 "./arch/mips/include/asm/mips-cpc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_other(void) { return mips_cpc_base + (0x2000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_other(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_other()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_other()); val64 = __raw_readl(addr_cpc_cl_other() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_other()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_other(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_other()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_other()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_other() + 4); __raw_writel(val, addr_cpc_cl_other()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_other(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_other(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_other(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_other(uint32_t val) { change_cpc_cl_other(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_other(uint32_t val) { change_cpc_cl_other(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_other(void) { return mips_cpc_base + (0x4000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_other(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_other()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_other()); val64 = __raw_readl(addr_cpc_co_other() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_other()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_other(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_other()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_other()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_other() + 4); __raw_writel(val, addr_cpc_co_other()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_other(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_other(); reg_val &= ~mask; reg_val |= val; write_cpc_co_other(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_other(uint32_t val) { change_cpc_co_other(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_other(uint32_t val) { change_cpc_co_other(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_vp_stop(void) { return mips_cpc_base + (0x2000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_vp_stop(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_vp_stop()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_vp_stop()); val64 = __raw_readl(addr_cpc_cl_vp_stop() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_vp_stop()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_vp_stop(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_vp_stop()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_vp_stop()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_vp_stop() + 4); __raw_writel(val, addr_cpc_cl_vp_stop()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_vp_stop(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_vp_stop(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_vp_stop(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_vp_stop(uint32_t val) { change_cpc_cl_vp_stop(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_vp_stop(uint32_t val) { change_cpc_cl_vp_stop(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_vp_stop(void) { return mips_cpc_base + (0x4000 + 0x020); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_vp_stop(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_vp_stop()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_vp_stop()); val64 = __raw_readl(addr_cpc_co_vp_stop() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_vp_stop()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_vp_stop(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_vp_stop()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_vp_stop()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_vp_stop() + 4); __raw_writel(val, addr_cpc_co_vp_stop()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_vp_stop(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_vp_stop(); reg_val &= ~mask; reg_val |= val; write_cpc_co_vp_stop(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_vp_stop(uint32_t val) { change_cpc_co_vp_stop(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_vp_stop(uint32_t val) { change_cpc_co_vp_stop(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_vp_run(void) { return mips_cpc_base + (0x2000 + 0x028); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_vp_run(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_vp_run()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_vp_run()); val64 = __raw_readl(addr_cpc_cl_vp_run() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_vp_run()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_vp_run(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_vp_run()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_vp_run()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_vp_run() + 4); __raw_writel(val, addr_cpc_cl_vp_run()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_vp_run(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_vp_run(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_vp_run(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_vp_run(uint32_t val) { change_cpc_cl_vp_run(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_vp_run(uint32_t val) { change_cpc_cl_vp_run(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_vp_run(void) { return mips_cpc_base + (0x4000 + 0x028); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_vp_run(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_vp_run()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_vp_run()); val64 = __raw_readl(addr_cpc_co_vp_run() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_vp_run()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_vp_run(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_vp_run()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_vp_run()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_vp_run() + 4); __raw_writel(val, addr_cpc_co_vp_run()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_vp_run(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_vp_run(); reg_val &= ~mask; reg_val |= val; write_cpc_co_vp_run(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_vp_run(uint32_t val) { change_cpc_co_vp_run(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_vp_run(uint32_t val) { change_cpc_co_vp_run(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_vp_running(void) { return mips_cpc_base + (0x2000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_vp_running(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_vp_running()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_vp_running()); val64 = __raw_readl(addr_cpc_cl_vp_running() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_vp_running()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_vp_running(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_vp_running()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_vp_running()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_vp_running() + 4); __raw_writel(val, addr_cpc_cl_vp_running()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_vp_running(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_vp_running(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_vp_running(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_vp_running(uint32_t val) { change_cpc_cl_vp_running(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_vp_running(uint32_t val) { change_cpc_cl_vp_running(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_vp_running(void) { return mips_cpc_base + (0x4000 + 0x030); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_vp_running(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_vp_running()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_vp_running()); val64 = __raw_readl(addr_cpc_co_vp_running() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_vp_running()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_vp_running(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_vp_running()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_vp_running()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_vp_running() + 4); __raw_writel(val, addr_cpc_co_vp_running()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_vp_running(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_vp_running(); reg_val &= ~mask; reg_val |= val; write_cpc_co_vp_running(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_vp_running(uint32_t val) { change_cpc_co_vp_running(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_vp_running(uint32_t val) { change_cpc_co_vp_running(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_cl_config(void) { return mips_cpc_base + (0x2000 + 0x090); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_cl_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_cl_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_cl_config()); val64 = __raw_readl(addr_cpc_cl_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_cl_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_cl_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_cl_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_cl_config()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_cl_config() + 4); __raw_writel(val, addr_cpc_cl_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_cl_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_cl_config(); reg_val &= ~mask; reg_val |= val; write_cpc_cl_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_cl_config(uint32_t val) { change_cpc_cl_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_cl_config(uint32_t val) { change_cpc_cl_config(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_cpc_co_config(void) { return mips_cpc_base + (0x4000 + 0x090); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_cpc_co_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_cpc_co_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_cpc_co_config()); val64 = __raw_readl(addr_cpc_co_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_cpc_co_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_cpc_co_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_cpc_co_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_cpc_co_config()); break; } __raw_writel((uint64_t)val >> 32, addr_cpc_co_config() + 4); __raw_writel(val, addr_cpc_co_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_cpc_co_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_cpc_co_config(); reg_val &= ~mask; reg_val |= val; write_cpc_co_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpc_co_config(uint32_t val) { change_cpc_co_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_cpc_co_config(uint32_t val) { change_cpc_co_config(val, 0); }
# 174 "./arch/mips/include/asm/mips-cpc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mips_cpc_lock_other(unsigned int core) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mips_cpc_unlock_other(void) { }
# 106 "./arch/mips/include/asm/mips-cps.h" 2
# 1 "./arch/mips/include/asm/mips-gic.h" 1
# 17 "./arch/mips/include/asm/mips-gic.h"
extern void *mips_gic_base;
# 164 "./arch/mips/include/asm/mips-gic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_config(void) { return mips_gic_base + (0x00000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_config(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_config()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_config()); val64 = __raw_readl(addr_gic_config() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_config()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_config(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_config()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_config()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_config() + 4); __raw_writel(val, addr_gic_config()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_config(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_config(); reg_val &= ~mask; reg_val |= val; write_gic_config(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_config(uint32_t val) { change_gic_config(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_config(uint32_t val) { change_gic_config(val, 0); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_counter(void) { return mips_gic_base + (0x00000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gic_counter(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gic_counter()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_counter()); val64 = __raw_readl(addr_gic_counter() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_counter()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_counter(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gic_counter()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_counter()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_counter() + 4); __raw_writel(val, addr_gic_counter()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_counter(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gic_counter(); reg_val &= ~mask; reg_val |= val; write_gic_counter(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_counter(uint64_t val) { change_gic_counter(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_counter(uint64_t val) { change_gic_counter(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_counter_32l(void) { return mips_gic_base + (0x00000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_counter_32l(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_counter_32l()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_counter_32l()); val64 = __raw_readl(addr_gic_counter_32l() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_counter_32l()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_counter_32l(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_counter_32l()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_counter_32l()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_counter_32l() + 4); __raw_writel(val, addr_gic_counter_32l()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_counter_32l(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_counter_32l(); reg_val &= ~mask; reg_val |= val; write_gic_counter_32l(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_counter_32l(uint32_t val) { change_gic_counter_32l(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_counter_32l(uint32_t val) { change_gic_counter_32l(val, 0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_counter_32h(void) { return mips_gic_base + (0x00000 + 0x014); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_counter_32h(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_counter_32h()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_counter_32h()); val64 = __raw_readl(addr_gic_counter_32h() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_counter_32h()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_counter_32h(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_counter_32h()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_counter_32h()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_counter_32h() + 4); __raw_writel(val, addr_gic_counter_32h()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_counter_32h(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_counter_32h(); reg_val &= ~mask; reg_val |= val; write_gic_counter_32h(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_counter_32h(uint32_t val) { change_gic_counter_32h(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_counter_32h(uint32_t val) { change_gic_counter_32h(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_pol(void) { return mips_gic_base + (0x100); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_pol(unsigned int intr) { void *addr = addr_gic_pol(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_pol(unsigned int intr) { void *addr = addr_gic_pol(); if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); __raw_writeq(((((1UL))) << (intr % 64)), addr); } else { addr += (intr / 32) * sizeof(uint32_t); __raw_writel(((((1UL))) << (intr % 32)), addr); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_pol(unsigned int intr, unsigned int val) { void *addr = addr_gic_pol(); if (mips_cm_is64) { uint64_t _val; addr += (intr / 64) * sizeof(uint64_t); _val = __raw_readq(addr); _val &= ~((((1ULL))) << (intr % 64)); _val |= (uint64_t)val << (intr % 64); __raw_writeq(_val, addr); } else { uint32_t _val; addr += (intr / 32) * sizeof(uint32_t); _val = __raw_readl(addr); _val &= ~((((1UL))) << (intr % 32)); _val |= val << (intr % 32); __raw_writel(_val, addr); } }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_trig(void) { return mips_gic_base + (0x180); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_trig(unsigned int intr) { void *addr = addr_gic_trig(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_trig(unsigned int intr) { void *addr = addr_gic_trig(); if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); __raw_writeq(((((1UL))) << (intr % 64)), addr); } else { addr += (intr / 32) * sizeof(uint32_t); __raw_writel(((((1UL))) << (intr % 32)), addr); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_trig(unsigned int intr, unsigned int val) { void *addr = addr_gic_trig(); if (mips_cm_is64) { uint64_t _val; addr += (intr / 64) * sizeof(uint64_t); _val = __raw_readq(addr); _val &= ~((((1ULL))) << (intr % 64)); _val |= (uint64_t)val << (intr % 64); __raw_writeq(_val, addr); } else { uint32_t _val; addr += (intr / 32) * sizeof(uint32_t); _val = __raw_readl(addr); _val &= ~((((1UL))) << (intr % 32)); _val |= val << (intr % 32); __raw_writel(_val, addr); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_dual(void) { return mips_gic_base + (0x200); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_dual(unsigned int intr) { void *addr = addr_gic_dual(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_dual(unsigned int intr) { void *addr = addr_gic_dual(); if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); __raw_writeq(((((1UL))) << (intr % 64)), addr); } else { addr += (intr / 32) * sizeof(uint32_t); __raw_writel(((((1UL))) << (intr % 32)), addr); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_dual(unsigned int intr, unsigned int val) { void *addr = addr_gic_dual(); if (mips_cm_is64) { uint64_t _val; addr += (intr / 64) * sizeof(uint64_t); _val = __raw_readq(addr); _val &= ~((((1ULL))) << (intr % 64)); _val |= (uint64_t)val << (intr % 64); __raw_writeq(_val, addr); } else { uint32_t _val; addr += (intr / 32) * sizeof(uint32_t); _val = __raw_readl(addr); _val &= ~((((1UL))) << (intr % 32)); _val |= val << (intr % 32); __raw_writel(_val, addr); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_wedge(void) { return mips_gic_base + (0x00000 + 0x280); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_wedge(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_wedge()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_wedge()); val64 = __raw_readl(addr_gic_wedge() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_wedge()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_wedge(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_wedge()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_wedge()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_wedge() + 4); __raw_writel(val, addr_gic_wedge()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_wedge(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_wedge(); reg_val &= ~mask; reg_val |= val; write_gic_wedge(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_wedge(uint32_t val) { change_gic_wedge(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_wedge(uint32_t val) { change_gic_wedge(val, 0); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_rmask(void) { return mips_gic_base + (0x300); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_rmask(unsigned int intr) { void *addr = addr_gic_rmask(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_rmask(unsigned int intr) { void *addr = addr_gic_rmask(); if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); __raw_writeq(((((1UL))) << (intr % 64)), addr); } else { addr += (intr / 32) * sizeof(uint32_t); __raw_writel(((((1UL))) << (intr % 32)), addr); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_rmask(unsigned int intr, unsigned int val) { void *addr = addr_gic_rmask(); if (mips_cm_is64) { uint64_t _val; addr += (intr / 64) * sizeof(uint64_t); _val = __raw_readq(addr); _val &= ~((((1ULL))) << (intr % 64)); _val |= (uint64_t)val << (intr % 64); __raw_writeq(_val, addr); } else { uint32_t _val; addr += (intr / 32) * sizeof(uint32_t); _val = __raw_readl(addr); _val &= ~((((1UL))) << (intr % 32)); _val |= val << (intr % 32); __raw_writel(_val, addr); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_smask(void) { return mips_gic_base + (0x380); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_smask(unsigned int intr) { void *addr = addr_gic_smask(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_smask(unsigned int intr) { void *addr = addr_gic_smask(); if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); __raw_writeq(((((1UL))) << (intr % 64)), addr); } else { addr += (intr / 32) * sizeof(uint32_t); __raw_writel(((((1UL))) << (intr % 32)), addr); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_smask(unsigned int intr, unsigned int val) { void *addr = addr_gic_smask(); if (mips_cm_is64) { uint64_t _val; addr += (intr / 64) * sizeof(uint64_t); _val = __raw_readq(addr); _val &= ~((((1ULL))) << (intr % 64)); _val |= (uint64_t)val << (intr % 64); __raw_writeq(_val, addr); } else { uint32_t _val; addr += (intr / 32) * sizeof(uint32_t); _val = __raw_readl(addr); _val &= ~((((1UL))) << (intr % 32)); _val |= val << (intr % 32); __raw_writel(_val, addr); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_mask(void) { return mips_gic_base + (0x400); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_mask(unsigned int intr) { void *addr = addr_gic_mask(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_pend(void) { return mips_gic_base + (0x480); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_pend(unsigned int intr) { void *addr = addr_gic_pend(); unsigned int val; if (mips_cm_is64) { addr += (intr / 64) * sizeof(uint64_t); val = __raw_readq(addr) >> intr % 64; } else { addr += (intr / 32) * sizeof(uint32_t); val = __raw_readl(addr) >> intr % 32; } return val & 0x1; }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_map_pin(unsigned int intr) { return mips_gic_base + (0x500) + (intr * (0x4)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_map_pin(unsigned int intr) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_90(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_90(); } while (0); return __raw_readl(addr_gic_map_pin(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_map_pin(unsigned int intr, unsigned int val) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_91(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_91(); } while (0); __raw_writel(val, addr_gic_map_pin(intr)); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_map_vp(unsigned int intr) { return mips_gic_base + (0x2000) + (intr * (0x20)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_map_vp(unsigned int intr) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_92(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_92(); } while (0); return __raw_readl(addr_gic_map_vp(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_map_vp(unsigned int intr, unsigned int val) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_93(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_93(); } while (0); __raw_writel(val, addr_gic_map_vp(intr)); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_ctl(void) { return mips_gic_base + (0x08000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_ctl(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_ctl()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_ctl()); val64 = __raw_readl(addr_gic_vl_ctl() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_ctl()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_ctl(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_ctl()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_ctl()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_ctl() + 4); __raw_writel(val, addr_gic_vl_ctl()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_ctl(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_ctl(); reg_val &= ~mask; reg_val |= val; write_gic_vl_ctl(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_ctl(uint32_t val) { change_gic_vl_ctl(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_ctl(uint32_t val) { change_gic_vl_ctl(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_ctl(void) { return mips_gic_base + (0x0c000 + 0x000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_ctl(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_ctl()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_ctl()); val64 = __raw_readl(addr_gic_vo_ctl() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_ctl()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_ctl(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_ctl()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_ctl()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_ctl() + 4); __raw_writel(val, addr_gic_vo_ctl()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_ctl(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_ctl(); reg_val &= ~mask; reg_val |= val; write_gic_vo_ctl(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_ctl(uint32_t val) { change_gic_vo_ctl(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_ctl(uint32_t val) { change_gic_vo_ctl(val, 0); }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_pend(void) { return mips_gic_base + (0x08000 + 0x004); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_pend(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_pend()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_pend()); val64 = __raw_readl(addr_gic_vl_pend() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_pend()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_pend(void) { return mips_gic_base + (0x0c000 + 0x004); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_pend(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_pend()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_pend()); val64 = __raw_readl(addr_gic_vo_pend() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_pend()); return val64; default: return __cps_access_bad_size(); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_mask(void) { return mips_gic_base + (0x08000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_mask(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_mask()); val64 = __raw_readl(addr_gic_vl_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_mask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_mask(void) { return mips_gic_base + (0x0c000 + 0x008); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_mask(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_mask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_mask()); val64 = __raw_readl(addr_gic_vo_mask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_mask()); return val64; default: return __cps_access_bad_size(); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_rmask(void) { return mips_gic_base + (0x08000 + 0x00c); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_rmask(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_rmask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_rmask()); val64 = __raw_readl(addr_gic_vl_rmask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_rmask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_rmask(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_rmask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_rmask()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_rmask() + 4); __raw_writel(val, addr_gic_vl_rmask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_rmask(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_rmask(); reg_val &= ~mask; reg_val |= val; write_gic_vl_rmask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_rmask(uint32_t val) { change_gic_vl_rmask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_rmask(uint32_t val) { change_gic_vl_rmask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_rmask(void) { return mips_gic_base + (0x0c000 + 0x00c); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_rmask(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_rmask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_rmask()); val64 = __raw_readl(addr_gic_vo_rmask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_rmask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_rmask(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_rmask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_rmask()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_rmask() + 4); __raw_writel(val, addr_gic_vo_rmask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_rmask(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_rmask(); reg_val &= ~mask; reg_val |= val; write_gic_vo_rmask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_rmask(uint32_t val) { change_gic_vo_rmask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_rmask(uint32_t val) { change_gic_vo_rmask(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_smask(void) { return mips_gic_base + (0x08000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_smask(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_smask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_smask()); val64 = __raw_readl(addr_gic_vl_smask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_smask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_smask(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_smask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_smask()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_smask() + 4); __raw_writel(val, addr_gic_vl_smask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_smask(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_smask(); reg_val &= ~mask; reg_val |= val; write_gic_vl_smask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_smask(uint32_t val) { change_gic_vl_smask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_smask(uint32_t val) { change_gic_vl_smask(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_smask(void) { return mips_gic_base + (0x0c000 + 0x010); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_smask(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_smask()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_smask()); val64 = __raw_readl(addr_gic_vo_smask() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_smask()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_smask(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_smask()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_smask()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_smask() + 4); __raw_writel(val, addr_gic_vo_smask()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_smask(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_smask(); reg_val &= ~mask; reg_val |= val; write_gic_vo_smask(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_smask(uint32_t val) { change_gic_vo_smask(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_smask(uint32_t val) { change_gic_vo_smask(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_map(unsigned int intr) { return mips_gic_base + (0x08000 + 0x040) + (intr * (0x4)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_vl_map(unsigned int intr) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_94(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_94(); } while (0); return __raw_readl(addr_gic_vl_map(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_map(unsigned int intr, unsigned int val) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_95(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_95(); } while (0); __raw_writel(val, addr_gic_vl_map(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_map(unsigned int intr) { return mips_gic_base + (0x0c000 + 0x040) + (intr * (0x4)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_vo_map(unsigned int intr) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_96(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_96(); } while (0); return __raw_readl(addr_gic_vo_map(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_map(unsigned int intr, unsigned int val) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_97(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_97(); } while (0); __raw_writel(val, addr_gic_vo_map(intr)); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_wd_map(void) { return mips_gic_base + (0x08000 + 0x040); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_wd_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_wd_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_wd_map()); val64 = __raw_readl(addr_gic_vl_wd_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_wd_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_wd_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_wd_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_wd_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_wd_map() + 4); __raw_writel(val, addr_gic_vl_wd_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_wd_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_wd_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_wd_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_wd_map(uint32_t val) { change_gic_vl_wd_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_wd_map(uint32_t val) { change_gic_vl_wd_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_wd_map(void) { return mips_gic_base + (0x0c000 + 0x040); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_wd_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_wd_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_wd_map()); val64 = __raw_readl(addr_gic_vo_wd_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_wd_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_wd_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_wd_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_wd_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_wd_map() + 4); __raw_writel(val, addr_gic_vo_wd_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_wd_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_wd_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_wd_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_wd_map(uint32_t val) { change_gic_vo_wd_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_wd_map(uint32_t val) { change_gic_vo_wd_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_compare_map(void) { return mips_gic_base + (0x08000 + 0x044); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_compare_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_compare_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_compare_map()); val64 = __raw_readl(addr_gic_vl_compare_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_compare_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_compare_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_compare_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_compare_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_compare_map() + 4); __raw_writel(val, addr_gic_vl_compare_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_compare_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_compare_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_compare_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_compare_map(uint32_t val) { change_gic_vl_compare_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_compare_map(uint32_t val) { change_gic_vl_compare_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_compare_map(void) { return mips_gic_base + (0x0c000 + 0x044); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_compare_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_compare_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_compare_map()); val64 = __raw_readl(addr_gic_vo_compare_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_compare_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_compare_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_compare_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_compare_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_compare_map() + 4); __raw_writel(val, addr_gic_vo_compare_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_compare_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_compare_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_compare_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_compare_map(uint32_t val) { change_gic_vo_compare_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_compare_map(uint32_t val) { change_gic_vo_compare_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_timer_map(void) { return mips_gic_base + (0x08000 + 0x048); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_timer_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_timer_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_timer_map()); val64 = __raw_readl(addr_gic_vl_timer_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_timer_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_timer_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_timer_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_timer_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_timer_map() + 4); __raw_writel(val, addr_gic_vl_timer_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_timer_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_timer_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_timer_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_timer_map(uint32_t val) { change_gic_vl_timer_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_timer_map(uint32_t val) { change_gic_vl_timer_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_timer_map(void) { return mips_gic_base + (0x0c000 + 0x048); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_timer_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_timer_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_timer_map()); val64 = __raw_readl(addr_gic_vo_timer_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_timer_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_timer_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_timer_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_timer_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_timer_map() + 4); __raw_writel(val, addr_gic_vo_timer_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_timer_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_timer_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_timer_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_timer_map(uint32_t val) { change_gic_vo_timer_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_timer_map(uint32_t val) { change_gic_vo_timer_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_fdc_map(void) { return mips_gic_base + (0x08000 + 0x04c); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_fdc_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_fdc_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_fdc_map()); val64 = __raw_readl(addr_gic_vl_fdc_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_fdc_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_fdc_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_fdc_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_fdc_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_fdc_map() + 4); __raw_writel(val, addr_gic_vl_fdc_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_fdc_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_fdc_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_fdc_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_fdc_map(uint32_t val) { change_gic_vl_fdc_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_fdc_map(uint32_t val) { change_gic_vl_fdc_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_fdc_map(void) { return mips_gic_base + (0x0c000 + 0x04c); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_fdc_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_fdc_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_fdc_map()); val64 = __raw_readl(addr_gic_vo_fdc_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_fdc_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_fdc_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_fdc_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_fdc_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_fdc_map() + 4); __raw_writel(val, addr_gic_vo_fdc_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_fdc_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_fdc_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_fdc_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_fdc_map(uint32_t val) { change_gic_vo_fdc_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_fdc_map(uint32_t val) { change_gic_vo_fdc_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_perfctr_map(void) { return mips_gic_base + (0x08000 + 0x050); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_perfctr_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_perfctr_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_perfctr_map()); val64 = __raw_readl(addr_gic_vl_perfctr_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_perfctr_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_perfctr_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_perfctr_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_perfctr_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_perfctr_map() + 4); __raw_writel(val, addr_gic_vl_perfctr_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_perfctr_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_perfctr_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_perfctr_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_perfctr_map(uint32_t val) { change_gic_vl_perfctr_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_perfctr_map(uint32_t val) { change_gic_vl_perfctr_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_perfctr_map(void) { return mips_gic_base + (0x0c000 + 0x050); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_perfctr_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_perfctr_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_perfctr_map()); val64 = __raw_readl(addr_gic_vo_perfctr_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_perfctr_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_perfctr_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_perfctr_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_perfctr_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_perfctr_map() + 4); __raw_writel(val, addr_gic_vo_perfctr_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_perfctr_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_perfctr_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_perfctr_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_perfctr_map(uint32_t val) { change_gic_vo_perfctr_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_perfctr_map(uint32_t val) { change_gic_vo_perfctr_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_swint0_map(void) { return mips_gic_base + (0x08000 + 0x054); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_swint0_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_swint0_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_swint0_map()); val64 = __raw_readl(addr_gic_vl_swint0_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_swint0_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_swint0_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_swint0_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_swint0_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_swint0_map() + 4); __raw_writel(val, addr_gic_vl_swint0_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_swint0_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_swint0_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_swint0_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_swint0_map(uint32_t val) { change_gic_vl_swint0_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_swint0_map(uint32_t val) { change_gic_vl_swint0_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_swint0_map(void) { return mips_gic_base + (0x0c000 + 0x054); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_swint0_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_swint0_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_swint0_map()); val64 = __raw_readl(addr_gic_vo_swint0_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_swint0_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_swint0_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_swint0_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_swint0_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_swint0_map() + 4); __raw_writel(val, addr_gic_vo_swint0_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_swint0_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_swint0_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_swint0_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_swint0_map(uint32_t val) { change_gic_vo_swint0_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_swint0_map(uint32_t val) { change_gic_vo_swint0_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_swint1_map(void) { return mips_gic_base + (0x08000 + 0x058); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_swint1_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_swint1_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_swint1_map()); val64 = __raw_readl(addr_gic_vl_swint1_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_swint1_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_swint1_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_swint1_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_swint1_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_swint1_map() + 4); __raw_writel(val, addr_gic_vl_swint1_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_swint1_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_swint1_map(); reg_val &= ~mask; reg_val |= val; write_gic_vl_swint1_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_swint1_map(uint32_t val) { change_gic_vl_swint1_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_swint1_map(uint32_t val) { change_gic_vl_swint1_map(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_swint1_map(void) { return mips_gic_base + (0x0c000 + 0x058); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_swint1_map(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_swint1_map()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_swint1_map()); val64 = __raw_readl(addr_gic_vo_swint1_map() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_swint1_map()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_swint1_map(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_swint1_map()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_swint1_map()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_swint1_map() + 4); __raw_writel(val, addr_gic_vo_swint1_map()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_swint1_map(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_swint1_map(); reg_val &= ~mask; reg_val |= val; write_gic_vo_swint1_map(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_swint1_map(uint32_t val) { change_gic_vo_swint1_map(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_swint1_map(uint32_t val) { change_gic_vo_swint1_map(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_other(void) { return mips_gic_base + (0x08000 + 0x080); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_other(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_other()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_other()); val64 = __raw_readl(addr_gic_vl_other() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_other()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_other(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vl_other()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_other()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_other() + 4); __raw_writel(val, addr_gic_vl_other()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_other(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vl_other(); reg_val &= ~mask; reg_val |= val; write_gic_vl_other(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_other(uint32_t val) { change_gic_vl_other(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_other(uint32_t val) { change_gic_vl_other(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_other(void) { return mips_gic_base + (0x0c000 + 0x080); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_other(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_other()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_other()); val64 = __raw_readl(addr_gic_vo_other() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_other()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_other(uint32_t val) { switch (32) { case 32: __raw_writel(val, addr_gic_vo_other()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_other()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_other() + 4); __raw_writel(val, addr_gic_vo_other()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_other(uint32_t mask, uint32_t val) { uint32_t reg_val = read_gic_vo_other(); reg_val &= ~mask; reg_val |= val; write_gic_vo_other(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_other(uint32_t val) { change_gic_vo_other(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_other(uint32_t val) { change_gic_vo_other(val, 0); }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_ident(void) { return mips_gic_base + (0x08000 + 0x088); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vl_ident(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vl_ident()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_ident()); val64 = __raw_readl(addr_gic_vl_ident() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_ident()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_ident(void) { return mips_gic_base + (0x0c000 + 0x088); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t read_gic_vo_ident(void) { uint64_t val64; switch (32) { case 32: return __raw_readl(addr_gic_vo_ident()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_ident()); val64 = __raw_readl(addr_gic_vo_ident() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_ident()); return val64; default: return __cps_access_bad_size(); } }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_compare(void) { return mips_gic_base + (0x08000 + 0x0a0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gic_vl_compare(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gic_vl_compare()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vl_compare()); val64 = __raw_readl(addr_gic_vl_compare() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vl_compare()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_compare(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gic_vl_compare()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vl_compare()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vl_compare() + 4); __raw_writel(val, addr_gic_vl_compare()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vl_compare(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gic_vl_compare(); reg_val &= ~mask; reg_val |= val; write_gic_vl_compare(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vl_compare(uint64_t val) { change_gic_vl_compare(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vl_compare(uint64_t val) { change_gic_vl_compare(val, 0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_compare(void) { return mips_gic_base + (0x0c000 + 0x0a0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t read_gic_vo_compare(void) { uint64_t val64; switch (64) { case 32: return __raw_readl(addr_gic_vo_compare()); case 64: if (mips_cm_is64) return __raw_readq(addr_gic_vo_compare()); val64 = __raw_readl(addr_gic_vo_compare() + 4); val64 <<= 32; val64 |= __raw_readl(addr_gic_vo_compare()); return val64; default: return __cps_access_bad_size(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_compare(uint64_t val) { switch (64) { case 32: __raw_writel(val, addr_gic_vo_compare()); break; case 64: if (mips_cm_is64) { __raw_writeq(val, addr_gic_vo_compare()); break; } __raw_writel((uint64_t)val >> 32, addr_gic_vo_compare() + 4); __raw_writel(val, addr_gic_vo_compare()); break; default: __cps_access_bad_size(); break; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_gic_vo_compare(uint64_t mask, uint64_t val) { uint64_t reg_val = read_gic_vo_compare(); reg_val &= ~mask; reg_val |= val; write_gic_vo_compare(reg_val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_gic_vo_compare(uint64_t val) { change_gic_vo_compare(val, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_gic_vo_compare(uint64_t val) { change_gic_vo_compare(val, 0); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vl_eic_shadow_set(unsigned int intr) { return mips_gic_base + (0x08000 + 0x100) + (intr * (0x4)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_vl_eic_shadow_set(unsigned int intr) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_98(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_98(); } while (0); return __raw_readl(addr_gic_vl_eic_shadow_set(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vl_eic_shadow_set(unsigned int intr, unsigned int val) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_99(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_99(); } while (0); __raw_writel(val, addr_gic_vl_eic_shadow_set(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *addr_gic_vo_eic_shadow_set(unsigned int intr) { return mips_gic_base + (0x0c000 + 0x100) + (intr * (0x4)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int read_gic_vo_eic_shadow_set(unsigned int intr) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_100(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_100(); } while (0); return __raw_readl(addr_gic_vo_eic_shadow_set(intr)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_gic_vo_eic_shadow_set(unsigned int intr, unsigned int val) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_101(void) __attribute__((__error__("BUILD_BUG_ON failed: " "32 != 32"))); if (!(!(32 != 32))) __compiletime_assert_101(); } while (0); __raw_writel(val, addr_gic_vo_eic_shadow_set(intr)); }
# 289 "./arch/mips/include/asm/mips-gic.h"
enum mips_gic_local_interrupt {
 GIC_LOCAL_INT_WD,
 GIC_LOCAL_INT_COMPARE,
 GIC_LOCAL_INT_TIMER,
 GIC_LOCAL_INT_PERFCTR,
 GIC_LOCAL_INT_SWINT0,
 GIC_LOCAL_INT_SWINT1,
 GIC_LOCAL_INT_FDC,
 GIC_NUM_LOCAL_INTRS
};
# 308 "./arch/mips/include/asm/mips-gic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mips_gic_present(void)
{
 return 0 && mips_gic_base;
}
# 328 "./arch/mips/include/asm/mips-gic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int
mips_gic_vx_map_reg(enum mips_gic_local_interrupt intr)
{

 if (intr <= GIC_LOCAL_INT_TIMER)
  return intr;


 if (intr == GIC_LOCAL_INT_FDC)
  return GIC_LOCAL_INT_TIMER + 1;


 return intr + 1;
}
# 351 "./arch/mips/include/asm/mips-gic.h"
extern int gic_get_c0_compare_int(void);
# 361 "./arch/mips/include/asm/mips-gic.h"
extern int gic_get_c0_perfcount_int(void);
# 371 "./arch/mips/include/asm/mips-gic.h"
extern int gic_get_c0_fdc_int(void);
# 107 "./arch/mips/include/asm/mips-cps.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mips_cps_numclusters(void)
{
 unsigned int num_clusters;

 if (mips_cm_revision() < (({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_102(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15))))))))) __compiletime_assert_102(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_103(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) == 0))) __compiletime_assert_103(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_104(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(9) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (9) : 0))) __compiletime_assert_104(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_105(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_105(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_106(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0))) __compiletime_assert_106(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))))(9) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))); }) | ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_107(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))))))) __compiletime_assert_107(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_108(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) == 0))) __compiletime_assert_108(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_109(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(0) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (0) : 0))) __compiletime_assert_109(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_110(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_110(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_111(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0))) __compiletime_assert_111(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))))(0) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))); })))
  return 1;

 num_clusters = read_gcr_config() & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((23) > (29)) * 0l)) : (int *)8))), (23) > (29), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (23)) + 1) & (~(((0UL))) >> (64 - 1 - (29)))));
 num_clusters >>= __ffs(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((23) > (29)) * 0l)) : (int *)8))), (23) > (29), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (23)) + 1) & (~(((0UL))) >> (64 - 1 - (29))))));
 return num_clusters;
}
# 133 "./arch/mips/include/asm/mips-cps.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t mips_cps_cluster_config(unsigned int cluster)
{
 uint64_t config;

 if (mips_cm_revision() < (({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_112(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15))))))))) __compiletime_assert_112(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_113(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) == 0))) __compiletime_assert_113(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_114(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(9) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (9) : 0))) __compiletime_assert_114(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_115(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_115(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_116(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0))) __compiletime_assert_116(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))))(9) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))); }) | ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_117(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))))))) __compiletime_assert_117(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_118(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) == 0))) __compiletime_assert_118(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_119(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(0) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (0) : 0))) __compiletime_assert_119(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_120(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_120(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_121(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0))) __compiletime_assert_121(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))))(0) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))); }))) {





  ({ int __ret_warn_on = !!(cluster != 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("arch/mips/include/asm/mips-cps.h", 143, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
  config = read_gcr_config();
 } else {





  mips_cm_lock_other(cluster, 0, 0, 1);
  config = read_cpc_redir_config();
  mips_cm_unlock_other();
 }

 return config;
}
# 166 "./arch/mips/include/asm/mips-cps.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mips_cps_numcores(unsigned int cluster)
{
 if (!mips_cm_present())
  return 0;


 return (mips_cps_cluster_config(cluster) + 1) & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))));
}
# 182 "./arch/mips/include/asm/mips-cps.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mips_cps_numiocu(unsigned int cluster)
{
 unsigned int num_iocu;

 if (!mips_cm_present())
  return 0;

 num_iocu = mips_cps_cluster_config(cluster) & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))));
 num_iocu >>= __ffs(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15))))));
 return num_iocu;
}
# 203 "./arch/mips/include/asm/mips-cps.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mips_cps_numvps(unsigned int cluster, unsigned int core)
{
 unsigned int cfg;

 if (!mips_cm_present())
  return 1;

 if ((!0 || !0)
  && (!0 || !((2 >= (6)) && (cpu_data[0].options & (((((1ULL))) << (40)))))))
  return 1;

 mips_cm_lock_other(cluster, core, 0, 0);

 if (mips_cm_revision() < (({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_122(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15))))))))) __compiletime_assert_122(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_123(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) == 0))) __compiletime_assert_123(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_124(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(9) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (9) : 0))) __compiletime_assert_124(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_125(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_125(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_126(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1))) - 1)) != 0))) __compiletime_assert_126(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))))(9) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((8) > (15)) * 0l)) : (int *)8))), (8) > (15), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (8)) + 1) & (~(((0UL))) >> (64 - 1 - (15)))))); }) | ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_127(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))))))) __compiletime_assert_127(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_128(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) == 0))) __compiletime_assert_128(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_129(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(0) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (0) : 0))) __compiletime_assert_129(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_130(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_130(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_131(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1))) - 1)) != 0))) __compiletime_assert_131(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))))(0) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7)))))); }))) {




  cfg = read_gcr_co_config();
 } else {





  cfg = read_cpc_co_config();
 }

 mips_cm_unlock_other();

 return (cfg + 1) & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (9)) * 0l)) : (int *)8))), (0) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))));
}
# 17 "./arch/mips/include/asm/smp-ops.h" 2





struct task_struct;

struct plat_smp_ops {
 void (*send_ipi_single)(int cpu, unsigned int action);
 void (*send_ipi_mask)(const struct cpumask *mask, unsigned int action);
 void (*init_secondary)(void);
 void (*smp_finish)(void);
 int (*boot_secondary)(int cpu, struct task_struct *idle);
 void (*smp_setup)(void);
 void (*prepare_cpus)(unsigned int max_cpus);
 void (*prepare_boot_cpu)(void);

 int (*cpu_disable)(void);
 void (*cpu_die)(unsigned int cpu);


 void (*kexec_nonboot_cpu)(void);

};

extern void register_smp_ops(const struct plat_smp_ops *ops);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void plat_smp_setup(void)
{
 extern const struct plat_smp_ops *mp_ops;

 mp_ops->smp_setup();
}

extern void mips_smp_send_ipi_single(int cpu, unsigned int action);
extern void mips_smp_send_ipi_mask(const struct cpumask *mask,
          unsigned int action);
# 70 "./arch/mips/include/asm/smp-ops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_up_smp_ops(void)
{







 return -19;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_cmp_smp_ops(void)
{
# 95 "./arch/mips/include/asm/smp-ops.h"
 return -19;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_vsmp_smp_ops(void)
{







 return -19;

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_cps_smp_ops(void)
{
 return -19;
}
# 22 "./arch/mips/include/asm/smp.h" 2

extern int smp_num_siblings;
extern cpumask_t cpu_sibling_map[];
extern cpumask_t cpu_core_map[];
extern cpumask_t cpu_foreign_map[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int raw_smp_processor_id(void)
{





 return current_thread_info()->cpu;

}




extern int __cpu_number_map[16];



extern int __cpu_logical_map[16];
# 58 "./arch/mips/include/asm/smp.h"
extern cpumask_t cpu_coherent_mask;

extern void smp_bootstrap(void);

extern void calculate_cpu_foreign_map(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_send_reschedule(int cpu)
{
 extern const struct plat_smp_ops *mp_ops;

 mp_ops->send_ipi_single(cpu, 0x1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __cpu_disable(void)
{
 extern const struct plat_smp_ops *mp_ops;

 return mp_ops->cpu_disable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpu_die(unsigned int cpu)
{
 extern const struct plat_smp_ops *mp_ops;

 mp_ops->cpu_die(cpu);
}

extern void play_dead(void);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kexec_nonboot_cpu(void)
{
 extern const struct plat_smp_ops *mp_ops;

 return mp_ops->kexec_nonboot_cpu();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kexec_nonboot_cpu_func(void)
{
 extern const struct plat_smp_ops *mp_ops;

 return mp_ops->kexec_nonboot_cpu;
}







int mips_smp_ipi_allocate(const struct cpumask *mask);






int mips_smp_ipi_free(const struct cpumask *mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_send_call_function_single_ipi(int cpu)
{
 extern const struct plat_smp_ops *mp_ops;

 mp_ops->send_ipi_single(cpu, 0x2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_send_call_function_ipi_mask(const struct cpumask *mask)
{
 extern const struct plat_smp_ops *mp_ops;

 mp_ops->send_ipi_mask(mask, 0x2);
}
# 114 "./include/linux/smp.h" 2
# 123 "./include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_nr_cpu_ids(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 274 "./include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_thaw_secondary_cpus_begin(void);
extern void arch_thaw_secondary_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 15 "./include/linux/lockdep.h" 2
# 1 "./arch/mips/include/generated/asm/percpu.h" 1
# 16 "./include/linux/lockdep.h" 2

struct task_struct;


extern int prove_locking;
extern int lock_stat;
# 341 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_init_task(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_off(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_on(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_set_selftest_task(struct task_struct *task)
{
}
# 390 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_register_key(struct lock_class_key *key)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_unregister_key(struct lock_class_key *key)
{
}







extern int lock_is_held(const void *);
extern int lockdep_is_held(const void *);
# 428 "./include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 442 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_free_task(struct task_struct *task) {}
# 487 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 655 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 30 "./include/linux/rcupdate.h" 2
# 40 "./include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void rcu_barrier_tasks_rude(void);
void synchronize_rcu(void);



void __rcu_read_lock(void);
void __rcu_read_unlock(void);
# 86 "./include/linux/rcupdate.h"
void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_init_tasks_generic(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 110 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_exit(void) { }
# 120 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_init_nohz(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_offload(int cpu) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_nocb_flush_deferred_wakeup(void) { }
# 163 "./include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
# 191 "./include/linux/rcupdate.h"
void call_rcu_tasks_rude(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks_rude(void);



void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 226 "./include/linux/rcupdate.h"
# 1 "./include/linux/rcutree.h" 1
# 20 "./include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
void rcu_momentary_dyntick_idle(void);
void kfree_rcu_scheduler_running(void);
bool rcu_gp_might_be_stalled(void);
unsigned long get_state_synchronize_rcu(void);
unsigned long start_poll_synchronize_rcu(void);
bool poll_state_synchronize_rcu(unsigned long oldstate);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_is_idle_cpu(int cpu);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_irq_exit_check_preempt(void) { }


void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_inkernel_boot_has_ended(void);
bool rcu_is_watching(void);





int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 227 "./include/linux/rcupdate.h" 2
# 247 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_lockdep_current_cpu_online(void) { return true; }


extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;
# 287 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_sched_held(void)
{
 return !(preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_any_held(void)
{
 return !(preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}
# 684 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}
# 715 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock(void)
{
 do { } while (0 && (!rcu_is_watching()));

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 738 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_bh(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 776 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0);
}
# 976 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 994 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_132(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rhp->func) == sizeof(char) || sizeof(rhp->func) == sizeof(short) || sizeof(rhp->func) == sizeof(int) || sizeof(rhp->func) == sizeof(long)) || sizeof(rhp->func) == sizeof(long long))) __compiletime_assert_132(); } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });

 if (func == f)
  return true;
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/rcupdate.h", 1001, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 return false;
}


extern int rcu_expedited;
extern int rcu_normal;
# 12 "./include/linux/rculist.h" 2
# 22 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_133(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_133(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_134(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->prev) == sizeof(char) || sizeof(list->prev) == sizeof(short) || sizeof(list->prev) == sizeof(int) || sizeof(list->prev) == sizeof(long)) || sizeof(list->prev) == sizeof(long long))) __compiletime_assert_134(); } while (0); do { *(volatile typeof(list->prev) *)&(list->prev) = (list); } while (0); } while (0);
}
# 76 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_135(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_135(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_136(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_136(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_137(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_137(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 next->prev = new;
}
# 104 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 125 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 155 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + 0);
}
# 181 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_138(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_138(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *)0)); } while (0); } while (0);
 }
}
# 197 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_139(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long long))) __compiletime_assert_139(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(new->prev)->next))))) *)&(((*((struct list_head **)(&(new->prev)->next))))) = ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_140(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_140(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_141(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long long))) __compiletime_assert_141(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(new->prev)->next)))) *)&(*&(*((struct list_head **)(&(new->prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + 0);
}
# 226 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 249 "./include/linux/rculist.h"
 sync();
 __kcsan_check_access(&(*first), sizeof(*first), (1 << 0) | (1 << 3));
 __kcsan_check_access(&(*last), sizeof(*last), (1 << 0) | (1 << 3));
# 261 "./include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_142(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_142(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_143(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_143(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_144(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_144(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 274 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 289 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 511 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_145(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_145(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + 0)); } while (0); } while (0);
}
# 524 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_146(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->pprev) == sizeof(char) || sizeof(new->pprev) == sizeof(short) || sizeof(new->pprev) == sizeof(int) || sizeof(new->pprev) == sizeof(long)) || sizeof(new->pprev) == sizeof(long long))) __compiletime_assert_146(); } while (0); do { *(volatile typeof(new->pprev) *)&(new->pprev) = (old->pprev); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_147(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*(struct hlist_node **)new->pprev)) == sizeof(char) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(short) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(int) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long)) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long long))) __compiletime_assert_147(); } while (0); do { *(volatile typeof((*(struct hlist_node **)new->pprev)) *)&((*(struct hlist_node **)new->pprev)) = ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_148(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_148(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_149(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long long))) __compiletime_assert_149(); } while (0); do { *(volatile typeof(*&*(struct hlist_node **)new->pprev) *)&(*&*(struct hlist_node **)new->pprev) = ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_150(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->next->pprev) == sizeof(char) || sizeof(new->next->pprev) == sizeof(short) || sizeof(new->next->pprev) == sizeof(int) || sizeof(new->next->pprev) == sizeof(long)) || sizeof(new->next->pprev) == sizeof(long long))) __compiletime_assert_150(); } while (0); do { *(volatile typeof(new->next->pprev) *)&(new->next->pprev) = (&new->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_151(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(old->pprev) == sizeof(char) || sizeof(old->pprev) == sizeof(short) || sizeof(old->pprev) == sizeof(int) || sizeof(old->pprev) == sizeof(long)) || sizeof(old->pprev) == sizeof(long long))) __compiletime_assert_151(); } while (0); do { *(volatile typeof(old->pprev) *)&(old->pprev) = (((void *) 0x122 + 0)); } while (0); } while (0);
}
# 547 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlists_swap_heads_rcu(struct hlist_head *left, struct hlist_head *right)
{
 struct hlist_node *node1 = left->first;
 struct hlist_node *node2 = right->first;

 do { uintptr_t _r_a_p__v = (uintptr_t)(node2); ; if (__builtin_constant_p(node2) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_152(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((left->first)) == sizeof(char) || sizeof((left->first)) == sizeof(short) || sizeof((left->first)) == sizeof(int) || sizeof((left->first)) == sizeof(long)) || sizeof((left->first)) == sizeof(long long))) __compiletime_assert_152(); } while (0); do { *(volatile typeof((left->first)) *)&((left->first)) = ((typeof(left->first))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_153(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)))) __compiletime_assert_153(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_154(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)) || sizeof(*&left->first) == sizeof(long long))) __compiletime_assert_154(); } while (0); do { *(volatile typeof(*&left->first) *)&(*&left->first) = ((typeof(*((typeof(left->first))_r_a_p__v)) *)((typeof(left->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(node1); ; if (__builtin_constant_p(node1) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_155(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((right->first)) == sizeof(char) || sizeof((right->first)) == sizeof(short) || sizeof((right->first)) == sizeof(int) || sizeof((right->first)) == sizeof(long)) || sizeof((right->first)) == sizeof(long long))) __compiletime_assert_155(); } while (0); do { *(volatile typeof((right->first)) *)&((right->first)) = ((typeof(right->first))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_156(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)))) __compiletime_assert_156(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_157(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)) || sizeof(*&right->first) == sizeof(long long))) __compiletime_assert_157(); } while (0); do { *(volatile typeof(*&right->first) *)&(*&right->first) = ((typeof(*((typeof(right->first))_r_a_p__v)) *)((typeof(right->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_158(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node2->pprev) == sizeof(char) || sizeof(node2->pprev) == sizeof(short) || sizeof(node2->pprev) == sizeof(int) || sizeof(node2->pprev) == sizeof(long)) || sizeof(node2->pprev) == sizeof(long long))) __compiletime_assert_158(); } while (0); do { *(volatile typeof(node2->pprev) *)&(node2->pprev) = (&left->first); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_159(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node1->pprev) == sizeof(char) || sizeof(node1->pprev) == sizeof(short) || sizeof(node1->pprev) == sizeof(int) || sizeof(node1->pprev) == sizeof(long)) || sizeof(node1->pprev) == sizeof(long long))) __compiletime_assert_159(); } while (0); do { *(volatile typeof(node1->pprev) *)&(node1->pprev) = (&right->first); } while (0); } while (0);
}
# 584 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_160(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_160(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_161(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long long))) __compiletime_assert_161(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(h)->first))))) *)&(((*((struct hlist_node **)(&(h)->first))))) = ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_162(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_162(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_163(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long long))) __compiletime_assert_163(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(h)->first)))) *)&(*&(*((struct hlist_node **)(&(h)->first)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (first)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_164(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_164(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
}
# 615 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_165(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_165(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&last->next); } while (0); } while (0);
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_166(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long long))) __compiletime_assert_166(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(last)->next))))) *)&(((*((struct hlist_node **)(&(last)->next))))) = ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_167(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_167(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_168(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long long))) __compiletime_assert_168(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(last)->next)))) *)&(*&(*((struct hlist_node **)(&(last)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 651 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_169(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_169(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_170(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(char) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(short) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(int) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long long))) __compiletime_assert_170(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)((n)->pprev))))) *)&(((*((struct hlist_node **)((n)->pprev))))) = ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_171(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_171(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_172(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long long))) __compiletime_assert_172(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)((n)->pprev)))) *)&(*&(*((struct hlist_node **)((n)->pprev)))) = ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_173(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_173(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
}
# 678 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_174(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_174(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_175(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_175(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(prev)->next))))) *)&(((*((struct hlist_node **)(&(prev)->next))))) = ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_176(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_176(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_177(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_177(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(prev)->next)))) *)&(*&(*((struct hlist_node **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (n->next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_178(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_178(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 6 "./include/linux/pid.h" 2
# 1 "./include/linux/wait.h" 1








# 1 "./include/linux/spinlock.h" 1
# 64 "./include/linux/spinlock.h"
# 1 "./arch/mips/include/asm/mmiowb.h" 1








# 1 "./include/asm-generic/mmiowb.h" 1
# 10 "./arch/mips/include/asm/mmiowb.h" 2
# 65 "./include/linux/spinlock.h" 2
# 93 "./include/linux/spinlock.h"
# 1 "./arch/mips/include/asm/spinlock.h" 1
# 21 "./arch/mips/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_spin_unlock(struct qspinlock *lock)
{

 wmb();
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_179(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long)))) __compiletime_assert_179(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_180(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long)) || sizeof(*&lock->locked) == sizeof(long long))) __compiletime_assert_180(); } while (0); do { *(volatile typeof(*&lock->locked) *)&(*&lock->locked) = (0); } while (0); } while (0); } while (0);
}

# 1 "./arch/mips/include/generated/asm/qspinlock.h" 1
# 1 "./include/asm-generic/qspinlock.h" 1
# 22 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_locked(struct qspinlock *lock)
{




 return atomic_read(&lock->val);
}
# 42 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_trylock(struct qspinlock *lock)
{
 int val = atomic_read(&lock->val);

 if (__builtin_expect(!!(val), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1);
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_lock(struct qspinlock *lock)
{
 int val = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1))
  return;

 queued_spin_lock_slowpath(lock, val);
}
# 104 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool virt_spin_lock(struct qspinlock *lock)
{
 return false;
}
# 2 "./arch/mips/include/generated/asm/qspinlock.h" 2
# 29 "./arch/mips/include/asm/spinlock.h" 2
# 1 "./arch/mips/include/generated/asm/qrwlock.h" 1
# 1 "./include/asm-generic/qrwlock.h" 1
# 32 "./include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock);
extern void queued_write_lock_slowpath(struct qrwlock *lock);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_read_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1)) {
  cnts = (u32)atomic_add_return_acquire((1U << 9), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
   return 1;
  atomic_sub((1U << 9), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_write_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_lock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_add_return_acquire((1U << 9), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
  return;


 queued_read_lock_slowpath(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_lock(struct qrwlock *lock)
{
 int cnts = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1))
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return_release((1U << 9), &lock->cnts);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_unlock(struct qrwlock *lock)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_181(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long)))) __compiletime_assert_181(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_182(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long)) || sizeof(*&lock->wlocked) == sizeof(long long))) __compiletime_assert_182(); } while (0); do { *(volatile typeof(*&lock->wlocked) *)&(*&lock->wlocked) = (0); } while (0); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_rwlock_is_contended(struct qrwlock *lock)
{
 return queued_spin_is_locked(&lock->wait_lock);
}
# 2 "./arch/mips/include/generated/asm/qrwlock.h" 2
# 30 "./arch/mips/include/asm/spinlock.h" 2
# 94 "./include/linux/spinlock.h" 2
# 182 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 do { } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 int ret = queued_spin_trylock(&(lock)->raw_lock);

 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 303 "./include/linux/spinlock.h"
# 1 "./include/linux/rwlock.h" 1
# 304 "./include/linux/spinlock.h" 2






# 1 "./include/linux/spinlock_api_smp.h" 1
# 18 "./include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}
# 104 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}



# 1 "./include/linux/rwlock_api_smp.h" 1
# 18 "./include/linux/rwlock_api_smp.h"
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((__section__(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_read_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { if (0) do { } while (0); else do { } while (0); } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_write_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}
# 146 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 184 "./include/linux/spinlock_api_smp.h" 2
# 311 "./include/linux/spinlock.h" 2
# 322 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}
# 347 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 372 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 387 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 440 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&(&lock->rlock)->raw_lock);
}
# 469 "./include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 493 "./include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 10 "./include/linux/wait.h" 2

# 1 "./arch/mips/include/generated/asm/current.h" 1
# 12 "./include/linux/wait.h" 2
# 1 "./include/uapi/linux/wait.h" 1
# 13 "./include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 30 "./include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 64 "./include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 82 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 127 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 140 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
{
 return list_is_singular(&wq_head->head);
}
# 153 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 __sync();
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_priority(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 struct list_head *head = &wq_head->head;
 struct wait_queue_entry *wq;

 for (wq = ({ void *__mptr = (void *)((&wq_head->head)->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(((typeof(*wq) *)0)->entry)) || __builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*wq) *)(__mptr - __builtin_offsetof(typeof(*wq), entry))); }); !(&wq->entry == (&wq_head->head)); wq = ({ void *__mptr = (void *)((wq)->entry.next); _Static_assert(__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(((typeof(*(wq)) *)0)->entry)) || __builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(wq)) *)(__mptr - __builtin_offsetof(typeof(*(wq)), entry))); })) {
  if (!(wq->flags & 0x20))
   break;
  head = &wq->entry;
 }
 list_add(&wq_entry->entry, head);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode);
# 260 "./include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 744 "./include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1138 "./include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
bool prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 1163 "./include/linux/wait.h"
typedef int (*task_call_f)(struct task_struct *p, void *arg);
extern int task_call_func(struct task_struct *p, task_call_f func, void *arg);
# 7 "./include/linux/pid.h" 2
# 1 "./include/linux/refcount.h" 1
# 101 "./include/linux/refcount.h"
struct mutex;
# 111 "./include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;





enum refcount_saturation_type {
 REFCOUNT_ADD_NOT_ZERO_OVF,
 REFCOUNT_ADD_OVF,
 REFCOUNT_ADD_UAF,
 REFCOUNT_SUB_UAF,
 REFCOUNT_DEC_LEAK,
};

void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_set(refcount_t *r, int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
{
 int old = refcount_read(r);

 do {
  if (!old)
   break;
 } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);

 return old;
}
# 186 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
{
 return __refcount_add_not_zero(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_add(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_add_relaxed(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(!old), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
 else if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
}
# 220 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_add(int i, refcount_t *r)
{
 __refcount_add(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
{
 return __refcount_add_not_zero(1, r, oldp);
}
# 243 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
{
 return __refcount_inc_not_zero(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_inc(refcount_t *r, int *oldp)
{
 __refcount_add(1, r, oldp);
}
# 265 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_inc(refcount_t *r)
{
 __refcount_inc(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (old == i) {
  rmb();
  return true;
 }

 if (__builtin_expect(!!(old < 0 || old - i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);

 return false;
}
# 308 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
{
 return __refcount_sub_and_test(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
{
 return __refcount_sub_and_test(1, r, oldp);
}
# 331 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
{
 return __refcount_dec_and_test(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_dec(refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(1, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old <= 1), 0))
  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
}
# 357 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_dec(refcount_t *r)
{
 __refcount_dec(r, ((void *)0));
}

extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 8 "./include/linux/pid.h" 2

enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "./include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;
 spinlock_t lock;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct hlist_head inodes;

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

struct file;

extern struct pid *pidfd_pid(const struct file *file);
struct pid *pidfd_get_pid(unsigned int fd, unsigned int *flags);
struct task_struct *pidfd_get_task(int pidfd, unsigned int *flags);
int pidfd_create(struct pid *pid, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pid_has_task(struct pid *pid, enum pid_type type)
{
 return !hlist_empty(&pid->tasks[type]);
}
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void exchange_tids(struct task_struct *task, struct task_struct *old);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;

extern int pid_max;
extern int pid_max_min, pid_max_max;
# 127 "./include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
        size_t set_tid_size);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 151 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 181 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "./include/linux/sched.h" 2
# 1 "./include/linux/sem.h" 1




# 1 "./include/uapi/linux/sem.h" 1




# 1 "./include/linux/ipc.h" 1





# 1 "./include/linux/uidgid.h" 1
# 16 "./include/linux/uidgid.h"
# 1 "./include/linux/highuid.h" 1
# 35 "./include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "./include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "./include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 7 "./include/linux/ipc.h" 2
# 1 "./include/linux/rhashtable-types.h" 1
# 14 "./include/linux/rhashtable-types.h"
# 1 "./include/linux/mutex.h" 1
# 14 "./include/linux/mutex.h"
# 1 "./arch/mips/include/generated/asm/current.h" 1
# 15 "./include/linux/mutex.h" 2





# 1 "./include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 21 "./include/linux/mutex.h" 2
# 1 "./include/linux/debug_locks.h" 1







struct task_struct;

extern int debug_locks __attribute__((__section__(".data..read_mostly")));
extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = (__typeof__(*(__ai_ptr))) __xchg((__ai_ptr), (unsigned long)(0), sizeof(*(__ai_ptr))); __asm__ __volatile__("sync" : : :"memory"); __res; }); });
}




extern int debug_locks_off(void);
# 56 "./include/linux/debug_locks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_all_locks(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_held(void)
{
}
# 22 "./include/linux/mutex.h" 2
# 63 "./include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 raw_spinlock_t wait_lock;



 struct list_head wait_list;






};
# 89 "./include/linux/mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mutex_destroy(struct mutex *lock) {}
# 118 "./include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 199 "./include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 217 "./include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 15 "./include/linux/rhashtable-types.h" 2
# 1 "./include/linux/workqueue.h" 1








# 1 "./include/linux/timer.h" 1





# 1 "./include/linux/ktime.h" 1
# 24 "./include/linux/ktime.h"
# 1 "./include/linux/time.h" 1








extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);


extern void clear_itimer(void);




extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);

# 1 "./include/linux/time32.h" 1
# 13 "./include/linux/time32.h"
# 1 "./include/linux/timex.h" 1
# 56 "./include/linux/timex.h"
# 1 "./include/uapi/linux/timex.h" 1
# 56 "./include/uapi/linux/timex.h"
# 1 "./include/linux/time.h" 1
# 57 "./include/uapi/linux/timex.h" 2
# 97 "./include/uapi/linux/timex.h"
struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "./include/linux/timex.h" 2








# 1 "./arch/mips/include/asm/timex.h" 1
# 19 "./arch/mips/include/asm/timex.h"
# 1 "./arch/mips/include/asm/cpu-type.h" 1
# 15 "./arch/mips/include/asm/cpu-type.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__pure__)) __get_cpu_type(const int cpu_type)
{
 switch (cpu_type) {






 case CPU_LOONGSON64:
# 198 "./arch/mips/include/asm/cpu-type.h"
  break;
 default:
  do { ; __builtin_unreachable(); } while (0);
 }

 return cpu_type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__pure__)) current_cpu_type(void)
{
 const int cpu_type = cpu_data[raw_smp_processor_id()].cputype;

 return __get_cpu_type(cpu_type);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__pure__)) boot_cpu_type(void)
{
 const int cpu_type = cpu_data[0].cputype;

 return __get_cpu_type(cpu_type);
}
# 20 "./arch/mips/include/asm/timex.h" 2
# 40 "./arch/mips/include/asm/timex.h"
typedef unsigned int cycles_t;
# 52 "./arch/mips/include/asm/timex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int can_use_mips_counter(unsigned int prid)
{
 int comp = (prid & 0xff0000) != 0x000000;

 if (__builtin_constant_p(1) && !1)
  return 0;
 else if (__builtin_constant_p(((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) && ((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800)))))
  return 1;
 else if (__builtin_expect(!!(!__builtin_constant_p(((((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000010)))) | (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000020)))) | (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000100)))) | ((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | (1 && (((2 >= (1)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000040))))) | (1 && (((2 >= (2)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000080))))) | (1 && (((2 >= (5)) && (2 < (6))) || ((2 < (6)) && (cpu_data[0].isa_level & (0x00000200))))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800))))) && comp), 1))
  return 1;

 if (!__builtin_constant_p(1))
  asm volatile("" : "=m" (cpu_data[0].options));
 if (__builtin_expect(!!(1 && prid >= (0x0400 | ((5) << 4 | (0)))), 1))

  return 1;
 else
  return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cycles_t get_cycles(void)
{
 if (can_use_mips_counter(({ unsigned int __res; if (0 == 0) __asm__ ( "mfc0\t%0, " "$15" "\n\t" : "=r" (__res)); else __asm__ ( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$15" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; })))
  return ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$9" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$9" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
 else
  return 0;
}
# 87 "./arch/mips/include/asm/timex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long random_get_entropy(void)
{
 unsigned int prid = ({ unsigned int __res; if (0 == 0) __asm__ ( "mfc0\t%0, " "$15" "\n\t" : "=r" (__res)); else __asm__ ( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$15" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
 unsigned int imp = prid & 0xff00;

 if (can_use_mips_counter(prid))
  return ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$9" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$9" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
 else if (__builtin_expect(!!(imp != 0x0300 && imp != 0x0600), 1))
  return ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$1" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$1" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
 else
  return 0;
}
# 66 "./include/linux/timex.h" 2
# 139 "./include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "./include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
# 14 "./include/linux/time32.h" 2

# 1 "./include/vdso/time32.h" 1




typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};
# 16 "./include/linux/time32.h" 2

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);







extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 61 "./include/linux/time.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 100 "./include/linux/time.h"
# 1 "./include/vdso/time.h" 1






struct timens_offset {
 s64 sec;
 u64 nsec;
};
# 101 "./include/linux/time.h" 2
# 25 "./include/linux/ktime.h" 2
# 1 "./include/linux/jiffies.h" 1
# 12 "./include/linux/jiffies.h"
# 1 "./include/vdso/jiffies.h" 1
# 13 "./include/linux/jiffies.h" 2

# 1 "./include/generated/timeconst.h" 1
# 15 "./include/linux/jiffies.h" 2
# 62 "./include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 79 "./include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << 6)), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << 6)), __section__(".data..cacheline_aligned"))) jiffies;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 189 "./include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 290 "./include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);
# 330 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 if (256 > 1000L && m > jiffies_to_msecs(((((long)(~0UL >> 1)) >> 1)-1)))
  return ((((long)(~0UL >> 1)) >> 1)-1);

 return (0x83126E98ULL * m + 0x1FBE76C8BULL) >> 33;
}
# 363 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (0x8637BD06ULL * u + 0x7FFDE7210BEULL)
  >> 43;
}
# 410 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x183 = (0L); typeof(delta) __UNIQUE_ID___y184 = (delta); ((__UNIQUE_ID___x183) > (__UNIQUE_ID___y184) ? (__UNIQUE_ID___x183) : (__UNIQUE_ID___y184)); })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x185 = (0L); typeof(delta) __UNIQUE_ID___y186 = (delta); ((__UNIQUE_ID___x185) > (__UNIQUE_ID___y186) ? (__UNIQUE_ID___x185) : (__UNIQUE_ID___y186)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "./include/linux/ktime.h" 2



typedef s64 ktime_t;
# 38 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 71 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 95 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 111 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 123 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 148 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/ktime.h", 154, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 209 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}

# 1 "./include/vdso/ktime.h" 1
# 221 "./include/linux/ktime.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "./include/linux/timekeeping.h" 1





# 1 "./include/linux/clocksource_ids.h" 1





enum clocksource_ids {
 CSID_GENERIC = 0,
 CSID_ARM_ARCH_COUNTER,
 CSID_MAX,
};
# 7 "./include/linux/timekeeping.h" 2



void timekeeping_init(void);
extern int timekeeping_suspended;


extern void legacy_timer_tick(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "./include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);







struct ktime_timestamps {
 u64 mono;
 u64 boot;
 u64 real;
};
# 246 "./include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 enum clocksource_ids cs_id;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 262 "./include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 275 "./include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);


extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);

extern int update_persistent_clock64(struct timespec64 now);
# 233 "./include/linux/ktime.h" 2
# 7 "./include/linux/timer.h" 2

# 1 "./include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "./include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 const struct debug_obj_descr *descr;
};
# 55 "./include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "./include/linux/debugobjects.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
debug_object_activate (void *addr, const struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_deactivate(void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_destroy (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_free (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_assert_init(void *addr, const struct debug_obj_descr *descr) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_early_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_mem_init(void) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "./include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;




};
# 91 "./include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags,
        const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, func, flags, name, key);
}
# 150 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_timer_on_stack(struct timer_list *timer) { }
# 166 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timer_pending(const struct timer_list * timer)
{
 return !hlist_unhashed_lockless(&timer->entry);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp, loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "./include/linux/workqueue.h" 2








struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_INACTIVE_BIT= 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_INACTIVE = 1 << WORK_STRUCT_INACTIVE_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,


 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS),


 WORK_CPU_UNBOUND = 16,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 150 "./include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 210 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int work_static(struct work_struct *work) { return 0; }
# 303 "./include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 336 "./include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 380 "./include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 402 "./include/linux/workqueue.h"
__attribute__((__format__(printf, 1, 4))) struct workqueue_struct *
alloc_workqueue(const char *fmt, unsigned int flags, int max_active, ...);
# 430 "./include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_all_workqueues(void);
extern void show_one_workqueue(struct workqueue_struct *wq);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 499 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 513 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 528 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 542 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 561 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 590 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 604 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 618 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 634 "./include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 654 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init_early(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init(void);
# 16 "./include/linux/rhashtable-types.h" 2

struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "./include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "./include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "./include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "./include/linux/ipc.h" 2
# 1 "./include/uapi/linux/ipc.h" 1
# 10 "./include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "./arch/mips/include/generated/uapi/asm/ipcbuf.h" 1
# 1 "./include/uapi/asm-generic/ipcbuf.h" 1
# 22 "./include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "./arch/mips/include/generated/uapi/asm/ipcbuf.h" 2
# 23 "./include/uapi/linux/ipc.h" 2
# 58 "./include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "./include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << 6)))) ;
# 6 "./include/uapi/linux/sem.h" 2
# 25 "./include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_old_time_t sem_otime;
 __kernel_old_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "./arch/mips/include/uapi/asm/sembuf.h" 1




# 1 "./arch/mips/include/generated/uapi/asm/ipcbuf.h" 1
# 6 "./arch/mips/include/uapi/asm/sembuf.h" 2
# 17 "./arch/mips/include/uapi/asm/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;
 long sem_otime;
 long sem_ctime;
 unsigned long sem_nsems;
 unsigned long __unused1;
 unsigned long __unused2;
};
# 38 "./include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "./include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 16 "./include/linux/sched.h" 2
# 1 "./include/linux/shm.h" 1






# 1 "./include/uapi/linux/shm.h" 1






# 1 "./include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "./include/uapi/linux/shm.h" 2
# 28 "./include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_old_time_t shm_atime;
 __kernel_old_time_t shm_dtime;
 __kernel_old_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "./arch/mips/include/uapi/asm/shmbuf.h" 1
# 17 "./arch/mips/include/uapi/asm/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;
 long shm_atime;
 long shm_dtime;
 long shm_ctime;
 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused1;
 unsigned long __unused2;
};
# 46 "./arch/mips/include/uapi/asm/shmbuf.h"
struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 44 "./include/uapi/linux/shm.h" 2
# 93 "./include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "./include/linux/shm.h" 2
# 1 "./arch/mips/include/asm/shmparam.h" 1
# 9 "./include/linux/shm.h" 2

struct file;


struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 17 "./include/linux/sched.h" 2

# 1 "./include/linux/plist.h" 1
# 82 "./include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 124 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 213 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 283 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); _Static_assert(__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) || __builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); _Static_assert(__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) || __builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void)), "pointer type mismatch in container_of()"); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 19 "./include/linux/sched.h" 2
# 1 "./include/linux/hrtimer.h" 1
# 15 "./include/linux/hrtimer.h"
# 1 "./include/linux/hrtimer_defs.h" 1
# 16 "./include/linux/hrtimer.h" 2
# 1 "./include/linux/rbtree.h" 1
# 20 "./include/linux/rbtree.h"
# 1 "./include/linux/rbtree_types.h" 1




struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 26 "./include/linux/rbtree_types.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 21 "./include/linux/rbtree.h" 2
# 39 "./include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_187(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*rb_link)) == sizeof(char) || sizeof((*rb_link)) == sizeof(short) || sizeof((*rb_link)) == sizeof(int) || sizeof((*rb_link)) == sizeof(long)) || sizeof((*rb_link)) == sizeof(long long))) __compiletime_assert_187(); } while (0); do { *(volatile typeof((*rb_link)) *)&((*rb_link)) = ((typeof(*rb_link))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_188(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_188(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_189(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)) || sizeof(*&*rb_link) == sizeof(long long))) __compiletime_assert_189(); } while (0); do { *(volatile typeof(*&*rb_link) *)&(*&*rb_link) = ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}
# 108 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rb_node *
rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
{
 struct rb_node *leftmost = ((void *)0);

 if (root->rb_leftmost == node)
  leftmost = root->rb_leftmost = rb_next(node);

 rb_erase(node, &root->rb_root);

 return leftmost;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 164 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_root.rb_node;
 struct rb_node *parent = ((void *)0);
 bool leftmost = true;

 while (*link) {
  parent = *link;
  if (less(node, parent)) {
   link = &parent->rb_left;
  } else {
   link = &parent->rb_right;
   leftmost = false;
  }
 }

 rb_link_node(node, parent, link);
 rb_insert_color_cached(node, tree, leftmost);

 return leftmost ? node : ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
rb_add(struct rb_node *node, struct rb_root *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);

 while (*link) {
  parent = *link;
  if (less(node, parent))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
}
# 222 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_add(struct rb_node *node, struct rb_root *tree,
     int (*cmp)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);
 int c;

 while (*link) {
  parent = *link;
  c = cmp(node, parent);

  if (c < 0)
   link = &parent->rb_left;
  else if (c > 0)
   link = &parent->rb_right;
  else
   return parent;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
 return ((void *)0);
}
# 255 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find(const void *key, const struct rb_root *tree,
 int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;

 while (node) {
  int c = cmp(key, node);

  if (c < 0)
   node = node->rb_left;
  else if (c > 0)
   node = node->rb_right;
  else
   return node;
 }

 return ((void *)0);
}
# 283 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_first(const void *key, const struct rb_root *tree,
       int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;
 struct rb_node *match = ((void *)0);

 while (node) {
  int c = cmp(key, node);

  if (c <= 0) {
   if (!c)
    match = node;
   node = node->rb_left;
  } else if (c > 0) {
   node = node->rb_right;
  }
 }

 return match;
}
# 313 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_next_match(const void *key, struct rb_node *node,
       int (*cmp)(const void *key, const struct rb_node *))
{
 node = rb_next(node);
 if (node && cmp(key, node))
  node = ((void *)0);
 return node;
}
# 17 "./include/linux/hrtimer.h" 2


# 1 "./include/linux/percpu.h" 1




# 1 "./include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

void dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 6 "./include/linux/percpu.h" 2






# 1 "./arch/mips/include/generated/asm/percpu.h" 1
# 13 "./include/linux/percpu.h" 2
# 64 "./include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);
# 125 "./include/linux/percpu.h"
extern void *__alloc_reserved_percpu(size_t size, size_t align) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);





extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__alloc_percpu(size_t size, size_t align) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 145 "./include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 20 "./include/linux/hrtimer.h" 2
# 1 "./include/linux/seqlock.h" 1
# 20 "./include/linux/seqlock.h"
# 1 "./include/linux/ww_mutex.h" 1
# 21 "./include/linux/ww_mutex.h"
# 1 "./include/linux/rtmutex.h" 1
# 21 "./include/linux/rtmutex.h"
extern int max_lock_depth;

struct rt_mutex_base {
 raw_spinlock_t wait_lock;
 struct rb_root_cached waiters;
 struct task_struct *owner;
};
# 42 "./include/linux/rtmutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rt_mutex_base_is_locked(struct rt_mutex_base *lock)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_190(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(lock->owner) == sizeof(char) || sizeof(lock->owner) == sizeof(short) || sizeof(lock->owner) == sizeof(int) || sizeof(lock->owner) == sizeof(long)) || sizeof(lock->owner) == sizeof(long long))) __compiletime_assert_190(); } while (0); (*(const volatile typeof( _Generic((lock->owner), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (lock->owner))) *)&(lock->owner)); }) != ((void *)0);
}

extern void rt_mutex_base_init(struct rt_mutex_base *rtb);
# 57 "./include/linux/rtmutex.h"
struct rt_mutex {
 struct rt_mutex_base rtmutex;



};

struct rt_mutex_waiter;
struct hrtimer_sleeper;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rt_mutex_debug_task_free(struct task_struct *tsk) { }
# 98 "./include/linux/rtmutex.h"
extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock_class_key *key);





extern void rt_mutex_lock(struct rt_mutex *lock);



extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 22 "./include/linux/ww_mutex.h" 2
# 38 "./include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;



};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;
# 73 "./include/linux/ww_mutex.h"
};
# 98 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base,ww_class->mutex_name,&ww_class->mutex_key);
 lock->ctx = ((void *)0);



}
# 132 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = (current_thread_info()->task);
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;
# 155 "./include/linux/ww_mutex.h"
}
# 168 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
{






}
# 185 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{
# 203 "./include/linux/ww_mutex.h"
}
# 234 "./include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 266 "./include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 292 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;



 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 328 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{



 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);

extern int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock,
      struct ww_acquire_ctx *ctx);
# 351 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_destroy(struct ww_mutex *lock)
{

 mutex_destroy(&lock->base);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked((&lock->base));
}
# 21 "./include/linux/seqlock.h" 2
# 65 "./include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 254 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) seqcount_t *__seqprop_ptr(seqcount_t *s)
{
 return s;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __seqprop_sequence(const seqcount_t *s)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_191(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_191(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __seqprop_preemptible(const seqcount_t *s)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqprop_assert(const seqcount_t *s)
{
 do { } while (0);
}



typedef struct seqcount_raw_spinlock { seqcount_t seqcount; ; } seqcount_raw_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_192(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_192(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_193(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_193(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { ; }
typedef struct seqcount_spinlock { seqcount_t seqcount; ; } seqcount_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_194(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_194(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_195(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_195(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { ; }
typedef struct seqcount_rwlock { seqcount_t seqcount; ; } seqcount_rwlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_196(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_196(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_197(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_197(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { ; }
typedef struct seqcount_mutex { seqcount_t seqcount; ; } seqcount_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_198(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_198(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_199(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_199(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_mutex_assert(const seqcount_mutex_t *s) { ; }
typedef struct seqcount_ww_mutex { seqcount_t seqcount; ; } seqcount_ww_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_200(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_200(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_201(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_201(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { ; }
# 430 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 kcsan_atomic_next(0);
 return __builtin_expect(!!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_202(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_202(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start), 0);
}
# 450 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 rmb();
 return do___read_seqcount_retry(s, start);
}
# 470 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_begin(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 wmb();
}
# 491 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_end(seqcount_t *s)
{
 wmb();
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 517 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 do_raw_write_seqcount_begin(s);
 do { } while (0);
}
# 543 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin(seqcount_t *s)
{
 do_write_seqcount_begin_nested(s, 0);
}
# 563 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 do_raw_write_seqcount_end(s);
}
# 613 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_barrier(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 wmb();
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 633 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_invalidate(seqcount_t *s)
{
 wmb();
 kcsan_nestable_atomic_begin();
 s->sequence+=2;
 kcsan_nestable_atomic_end();
}
# 651 "./include/linux/seqlock.h"
typedef struct {
 seqcount_t seqcount;
} seqcount_latch_t;
# 680 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
{




 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_203(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_203(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
}
# 696 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
{
 return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
}
# 783 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_latch(seqcount_latch_t *s)
{
 wmb();
 s->seqcount.sequence++;
 wmb();
}
# 800 "./include/linux/seqlock.h"
typedef struct {




 seqcount_spinlock_t seqcount;
 spinlock_t lock;
} seqlock_t;
# 838 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqbegin(const seqlock_t *sl)
{
 unsigned ret = ({ ; ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) __sync(); kcsan_atomic_next(1000); __seq; }); rmb(); _seq; }); });

 kcsan_atomic_next(0);
 kcsan_flat_atomic_begin();
 return ret;
}
# 858 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{




 kcsan_flat_atomic_end();

 return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
}
# 888 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 901 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock(&sl->lock);
}
# 914 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 928 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_bh(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_bh(&sl->lock);
}
# 941 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 954 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_irq(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
 return flags;
}
# 991 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1014 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 1037 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}
# 1061 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}
# 1104 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1141 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}
# 1156 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}
# 1169 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}
# 1195 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}
# 1220 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 21 "./include/linux/hrtimer.h" 2

# 1 "./include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 33 "./include/linux/timerqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;

 return ({ void *__mptr = (void *)(leftmost); _Static_assert(__builtin_types_compatible_p(typeof(*(leftmost)), typeof(((struct timerqueue_node *)0)->node)) || __builtin_types_compatible_p(typeof(*(leftmost)), typeof(void)), "pointer type mismatch in container_of()"); ((struct timerqueue_node *)(__mptr - __builtin_offsetof(struct timerqueue_node, node))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_queued(struct timerqueue_node *node)
{
 return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_expires(struct timerqueue_node *node)
{
 return node->expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->rb_root = (struct rb_root_cached) { {((void *)0), }, ((void *)0) };
}
# 23 "./include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 39 "./include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 118 "./include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 136 "./include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 159 "./include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_raw_spinlock_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__((1 << 6))));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 214 "./include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;





 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << 6))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern unsigned int hrtimer_resolution;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}


extern void timerfd_clock_was_set(void);
extern void timerfd_resume(void);





extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_cancel_wait_running(struct hrtimer *timer)
{
 __sync();
}





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);
extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
     enum hrtimer_mode mode);
# 386 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
       clockid_t clock_id,
       enum hrtimer_mode mode)
{
 hrtimer_init_sleeper(sl, clock_id, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 415 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
       enum hrtimer_mode mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 468 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_204(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(timer->state) == sizeof(char) || sizeof(timer->state) == sizeof(short) || sizeof(timer->state) == sizeof(int) || sizeof(timer->state) == sizeof(long)) || sizeof(timer->state) == sizeof(long long))) __compiletime_assert_204(); } while (0); (*(const volatile typeof( _Generic((timer->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (timer->state))) *)&(timer->state)); }) & 0x01);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 503 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
         const clockid_t clockid);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
        const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 20 "./include/linux/sched.h" 2

# 1 "./include/linux/seccomp.h" 1




# 1 "./include/uapi/linux/seccomp.h" 1
# 60 "./include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};
# 109 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 128 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_addfd {
 __u64 id;
 __u32 flags;
 __u32 srcfd;
 __u32 newfd;
 __u32 newfd_flags;
};
# 6 "./include/linux/seccomp.h" 2
# 21 "./include/linux/seccomp.h"
# 1 "./arch/mips/include/asm/seccomp.h" 1



# 1 "./include/uapi/linux/unistd.h" 1







# 1 "./arch/mips/include/asm/unistd.h" 1
# 15 "./arch/mips/include/asm/unistd.h"
# 1 "./arch/mips/include/uapi/asm/unistd.h" 1
# 28 "./arch/mips/include/uapi/asm/unistd.h"
# 1 "./arch/mips/include/generated/uapi/asm/unistd_n64.h" 1
# 29 "./arch/mips/include/uapi/asm/unistd.h" 2
# 16 "./arch/mips/include/asm/unistd.h" 2
# 1 "./arch/mips/include/generated/asm/unistd_nr_n32.h" 1
# 17 "./arch/mips/include/asm/unistd.h" 2
# 1 "./arch/mips/include/generated/asm/unistd_nr_n64.h" 1
# 18 "./arch/mips/include/asm/unistd.h" 2
# 1 "./arch/mips/include/generated/asm/unistd_nr_o32.h" 1
# 19 "./arch/mips/include/asm/unistd.h" 2
# 9 "./include/uapi/linux/unistd.h" 2
# 5 "./arch/mips/include/asm/seccomp.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const int *get_compat_mode1_syscalls(void)
{
 static const int syscalls_O32[] = {
  4000 + 3, 4000 + 4,
  4000 + 1, 4000 + 193,
  -1,
 };
 static const int syscalls_N32[] = {
  6000 + 0, 6000 + 1,
  6000 + 58, 6000 + 211,
  -1,
 };

 if (0 && test_ti_thread_flag(current_thread_info(), 22))
  return syscalls_O32;

 if (1)
  return syscalls_N32;

 BUG();
}





# 1 "./include/asm-generic/seccomp.h" 1
# 34 "./arch/mips/include/asm/seccomp.h" 2
# 22 "./include/linux/seccomp.h" 2

struct seccomp_filter;
# 35 "./include/linux/seccomp.h"
struct seccomp {
 int mode;
 atomic_t filter_count;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int secure_computing(void)
{
 if (__builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 4)), 0))
  return __secure_computing(((void *)0));
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 93 "./include/linux/seccomp.h"
extern void seccomp_filter_release(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 112 "./include/linux/seccomp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off,
     void *data)
{
 return -22;
}
# 22 "./include/linux/sched.h" 2
# 1 "./include/linux/nodemask.h" 1
# 96 "./include/linux/nodemask.h"
# 1 "./include/linux/numa.h" 1
# 25 "./include/linux/numa.h"
# 1 "./arch/mips/include/asm/sparsemem.h" 1
# 26 "./include/linux/numa.h" 2


int numa_map_to_online_node(int node);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memory_add_physaddr_to_nid(u64 start)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(true); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ do {} while (0); _printk("\001" "6" "Unknown online node for memory at 0x%llx, assuming node 0\n", start); }); } __builtin_expect(!!(__ret_do_once), 0); });

 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int phys_to_target_node(u64 start)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(true); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ do {} while (0); _printk("\001" "6" "Unknown target node for memory at 0x%llx, assuming node 0\n", start); }); } __builtin_expect(!!(__ret_do_once), 0); });

 return 0;
}
# 97 "./include/linux/nodemask.h" 2

typedef struct { unsigned long bits[((((1 << 6)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 6) : 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 128 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 6))) *)1 == (typeof((int)(find_first_bit(srcp->bits, (1 << 6)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 6))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_bit(srcp->bits, (1 << 6)))) * 0l)) : (int *)8))))), (((int)((1 << 6))) < ((int)(find_first_bit(srcp->bits, (1 << 6)))) ? ((int)((1 << 6))) : ((int)(find_first_bit(srcp->bits, (1 << 6))))), ({ typeof((int)((1 << 6))) __UNIQUE_ID___x205 = ((int)((1 << 6))); typeof((int)(find_first_bit(srcp->bits, (1 << 6)))) __UNIQUE_ID___y206 = ((int)(find_first_bit(srcp->bits, (1 << 6)))); ((__UNIQUE_ID___x205) < (__UNIQUE_ID___y206) ? (__UNIQUE_ID___x205) : (__UNIQUE_ID___y206)); }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 6))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 6))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 6))) < ((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) ? ((int)((1 << 6))) : ((int)(find_next_bit(srcp->bits, (1 << 6), n+1)))), ({ typeof((int)((1 << 6))) __UNIQUE_ID___x207 = ((int)((1 << 6))); typeof((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) __UNIQUE_ID___y208 = ((int)(find_next_bit(srcp->bits, (1 << 6), n+1))); ((__UNIQUE_ID___x207) < (__UNIQUE_ID___y208) ? (__UNIQUE_ID___x207) : (__UNIQUE_ID___y208)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 6));
 __node_set((node), &(*mask));
}
# 299 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 6))) *)1 == (typeof((int)(find_first_zero_bit(maskp->bits, (1 << 6)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 6))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_zero_bit(maskp->bits, (1 << 6)))) * 0l)) : (int *)8))))), (((int)((1 << 6))) < ((int)(find_first_zero_bit(maskp->bits, (1 << 6)))) ? ((int)((1 << 6))) : ((int)(find_first_zero_bit(maskp->bits, (1 << 6))))), ({ typeof((int)((1 << 6))) __UNIQUE_ID___x209 = ((int)((1 << 6))); typeof((int)(find_first_zero_bit(maskp->bits, (1 << 6)))) __UNIQUE_ID___y210 = ((int)(find_first_zero_bit(maskp->bits, (1 << 6)))); ((__UNIQUE_ID___x209) < (__UNIQUE_ID___y210) ? (__UNIQUE_ID___x209) : (__UNIQUE_ID___y210)); }));

}
# 333 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "./include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 N_GENERIC_INITIATOR,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_state(int node, enum node_states state)
{
 return arch_test_bit((node), (node_states[state]).bits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 6));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_online_node(int nid)
{
 return __next_node((nid), &(node_states[N_ONLINE]));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_memory_node(int nid)
{
 return __next_node((nid), &(node_states[N_MEMORY]));
}

extern unsigned int nr_node_ids;
extern unsigned int nr_online_nodes;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
# 498 "./include/linux/nodemask.h"
extern int node_random(const nodemask_t *maskp);
# 532 "./include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 23 "./include/linux/sched.h" 2


# 1 "./include/linux/resource.h" 1




# 1 "./include/uapi/linux/resource.h" 1
# 24 "./include/uapi/linux/resource.h"
struct rusage {
 struct __kernel_old_timeval ru_utime;
 struct __kernel_old_timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "./include/uapi/linux/resource.h"
# 1 "./arch/mips/include/uapi/asm/resource.h" 1
# 34 "./arch/mips/include/uapi/asm/resource.h"
# 1 "./include/asm-generic/resource.h" 1




# 1 "./include/uapi/asm-generic/resource.h" 1
# 6 "./include/asm-generic/resource.h" 2
# 35 "./arch/mips/include/uapi/asm/resource.h" 2
# 79 "./include/uapi/linux/resource.h" 2
# 6 "./include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "./include/linux/sched.h" 2
# 1 "./include/linux/latencytop.h" 1
# 14 "./include/linux/latencytop.h"
struct task_struct;
# 46 "./include/linux/latencytop.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 27 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/prio.h" 1
# 32 "./include/linux/sched/prio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/types.h" 1
# 17 "./include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 29 "./include/linux/sched.h" 2
# 1 "./include/linux/signal_types.h" 1
# 10 "./include/linux/signal_types.h"
# 1 "./include/uapi/linux/signal.h" 1




# 1 "./arch/mips/include/asm/signal.h" 1
# 12 "./arch/mips/include/asm/signal.h"
# 1 "./arch/mips/include/uapi/asm/signal.h" 1
# 19 "./arch/mips/include/uapi/asm/signal.h"
typedef struct {
 unsigned long sig[(128 / (sizeof(unsigned long) * 8))];
} sigset_t;

typedef unsigned long old_sigset_t;
# 90 "./arch/mips/include/uapi/asm/signal.h"
# 1 "./include/uapi/asm-generic/signal-defs.h" 1
# 82 "./include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 91 "./arch/mips/include/uapi/asm/signal.h" 2
# 101 "./arch/mips/include/uapi/asm/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 size_t ss_size;
 int ss_flags;
} stack_t;
# 13 "./arch/mips/include/asm/signal.h" 2
# 27 "./arch/mips/include/asm/signal.h"
# 1 "./arch/mips/include/asm/sigcontext.h" 1
# 12 "./arch/mips/include/asm/sigcontext.h"
# 1 "./arch/mips/include/uapi/asm/sigcontext.h" 1
# 70 "./arch/mips/include/uapi/asm/sigcontext.h"
struct sigcontext {
 __u64 sc_regs[32];
 __u64 sc_fpregs[32];
 __u64 sc_mdhi;
 __u64 sc_hi1;
 __u64 sc_hi2;
 __u64 sc_hi3;
 __u64 sc_mdlo;
 __u64 sc_lo1;
 __u64 sc_lo2;
 __u64 sc_lo3;
 __u64 sc_pc;
 __u32 sc_fpc_csr;
 __u32 sc_used_math;
 __u32 sc_dsp;
 __u32 sc_reserved;
};
# 13 "./arch/mips/include/asm/sigcontext.h" 2



struct sigcontext32 {
 __u32 sc_regmask;
 __u32 sc_status;
 __u64 sc_pc;
 __u64 sc_regs[32];
 __u64 sc_fpregs[32];
 __u32 sc_acx;
 __u32 sc_fpc_csr;
 __u32 sc_fpc_eir;
 __u32 sc_used_math;
 __u32 sc_dsp;
 __u64 sc_mdhi;
 __u64 sc_mdlo;
 __u32 sc_hi1;
 __u32 sc_lo1;
 __u32 sc_hi2;
 __u32 sc_lo2;
 __u32 sc_hi3;
 __u32 sc_lo3;
};
# 28 "./arch/mips/include/asm/signal.h" 2
# 1 "./arch/mips/include/uapi/asm/siginfo.h" 1
# 17 "./arch/mips/include/uapi/asm/siginfo.h"
# 1 "./include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 37 "./include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 79 "./include/uapi/asm-generic/siginfo.h"
  union {

   int _trapno;




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;

   struct {
    unsigned long _data;
    __u32 _type;
   } _perf;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 138 "./include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_code; int si_errno; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 333 "./include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(long) + 2*sizeof(int))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 18 "./arch/mips/include/uapi/asm/siginfo.h" 2
# 29 "./arch/mips/include/asm/signal.h" 2



extern int protected_save_fp_context(void *sc);
extern int protected_restore_fp_context(void *sc);
# 6 "./include/uapi/linux/signal.h" 2
# 11 "./include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_code; int si_errno; union __sifields _sifields; };
} kernel_siginfo_t;

struct ucounts;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct ucounts *ucounts;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {




 unsigned int sa_flags;
 __sighandler_t sa_handler;




 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 67 "./include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 30 "./include/linux/sched.h" 2
# 1 "./include/linux/syscall_user_dispatch.h" 1
# 26 "./include/linux/syscall_user_dispatch.h"
struct syscall_user_dispatch {};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
         unsigned long len, char *selector)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_syscall_work_syscall_user_dispatch(struct task_struct *tsk)
{
}
# 31 "./include/linux/sched.h" 2
# 1 "./include/linux/mm_types_task.h" 1
# 34 "./include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};





enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 97 "./include/linux/mm_types_task.h"
};
# 32 "./include/linux/sched.h" 2
# 1 "./include/linux/task_io_accounting.h" 1
# 12 "./include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
# 44 "./include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 33 "./include/linux/sched.h" 2
# 1 "./include/linux/posix-timers.h" 1






# 1 "./include/linux/alarmtimer.h" 1








struct rtc_device;

enum alarmtimer_type {
 ALARM_REALTIME,
 ALARM_BOOTTIME,


 ALARM_NUMTYPE,


 ALARM_REALTIME_FREEZER,
 ALARM_BOOTTIME_FREEZER,
};

enum alarmtimer_restart {
 ALARMTIMER_NORESTART,
 ALARMTIMER_RESTART,
};
# 42 "./include/linux/alarmtimer.h"
struct alarm {
 struct timerqueue_node node;
 struct hrtimer timer;
 enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
 enum alarmtimer_type type;
 int state;
 void *data;
};

void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
void alarm_start(struct alarm *alarm, ktime_t start);
void alarm_start_relative(struct alarm *alarm, ktime_t start);
void alarm_restart(struct alarm *alarm);
int alarm_try_to_cancel(struct alarm *alarm);
int alarm_cancel(struct alarm *alarm);

u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
ktime_t alarm_expires_remaining(const struct alarm *alarm);



struct rtc_device *alarmtimer_get_rtcdev(void);
# 8 "./include/linux/posix-timers.h" 2

# 1 "./include/linux/task_work.h" 1





# 1 "./include/linux/sched.h" 1
# 7 "./include/linux/task_work.h" 2

typedef void (*task_work_func_t)(struct callback_head *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_task_work(struct callback_head *twork, task_work_func_t func)
{
 twork->func = func;
}

enum task_work_notify_mode {
 TWA_NONE,
 TWA_RESUME,
 TWA_SIGNAL,
};

int task_work_add(struct task_struct *task, struct callback_head *twork,
   enum task_work_notify_mode mode);

struct callback_head *task_work_cancel_match(struct task_struct *task,
 bool (*match)(struct callback_head *, void *data), void *data);
struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
void task_work_run(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_task_work(struct task_struct *task)
{
 task_work_run();
}
# 10 "./include/linux/posix-timers.h" 2

struct kernel_siginfo;
struct task_struct;
# 39 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_process_cpuclock(const unsigned int pid,
  const clockid_t clock)
{
 return ((~pid) << 3) | clock;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_thread_cpuclock(const unsigned int tid,
  const clockid_t clock)
{
 return make_process_cpuclock(tid, clock | 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t fd_to_clockid(const int fd)
{
 return make_process_cpuclock((unsigned int) fd, 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int clockid_to_fd(const clockid_t clk)
{
 return ~(clk >> 3);
}
# 70 "./include/linux/posix-timers.h"
struct cpu_timer {
 struct timerqueue_node node;
 struct timerqueue_head *head;
 struct pid *pid;
 struct list_head elist;
 int firing;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_enqueue(struct timerqueue_head *head,
         struct cpu_timer *ctmr)
{
 ctmr->head = head;
 return timerqueue_add(head, &ctmr->node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_queued(struct cpu_timer *ctmr)
{
 return !!ctmr->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_dequeue(struct cpu_timer *ctmr)
{
 if (cpu_timer_queued(ctmr)) {
  timerqueue_del(ctmr->head, &ctmr->node);
  ctmr->head = ((void *)0);
  return true;
 }
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cpu_timer_getexpires(struct cpu_timer *ctmr)
{
 return ctmr->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_timer_setexpires(struct cpu_timer *ctmr, u64 exp)
{
 ctmr->node.expires = exp;
}






struct posix_cputimer_base {
 u64 nextevt;
 struct timerqueue_head tqhead;
};
# 130 "./include/linux/posix-timers.h"
struct posix_cputimers {
 struct posix_cputimer_base bases[3];
 unsigned int timers_active;
 unsigned int expiry_active;
};






struct posix_cputimers_work {
 struct callback_head work;
 unsigned int scheduled;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init(struct posix_cputimers *pct)
{
 memset(pct, 0, sizeof(*pct));
 pct->bases[0].nextevt = ((u64)~0ULL);
 pct->bases[1].nextevt = ((u64)~0ULL);
 pct->bases[2].nextevt = ((u64)~0ULL);
}

void posix_cputimers_group_init(struct posix_cputimers *pct, u64 cpu_limit);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_rt_watchdog(struct posix_cputimers *pct,
            u64 runtime)
{
 pct->bases[2].nextevt = runtime;
}
# 190 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_posix_cputimers_work(struct task_struct *p) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init_work(void) { }
# 219 "./include/linux/posix-timers.h"
struct k_itimer {
 struct list_head list;
 struct hlist_node t_hash;
 spinlock_t it_lock;
 const struct k_clock *kclock;
 clockid_t it_clock;
 timer_t it_id;
 int it_active;
 s64 it_overrun;
 s64 it_overrun_last;
 int it_requeue_pending;
 int it_sigev_notify;
 ktime_t it_interval;
 struct signal_struct *it_signal;
 union {
  struct pid *it_pid;
  struct task_struct *it_process;
 };
 struct sigqueue *sigq;
 union {
  struct {
   struct hrtimer timer;
  } real;
  struct cpu_timer cpu;
  struct {
   struct alarm alarmtimer;
  } alarm;
 } it;
 struct callback_head rcu;
};

void run_posix_cpu_timers(void);
void posix_cpu_timers_exit(struct task_struct *task);
void posix_cpu_timers_exit_group(struct task_struct *task);
void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
      u64 *newval, u64 *oldval);

void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);

void posixtimer_rearm(struct kernel_siginfo *info);
# 34 "./include/linux/sched.h" 2
# 1 "./include/uapi/linux/rseq.h" 1
# 16 "./include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "./include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "./include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "./include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;

  __u64 ptr;
# 124 "./include/uapi/linux/rseq.h"
 } rseq_cs;
# 144 "./include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 35 "./include/linux/sched.h" 2

# 1 "./include/linux/kcsan.h" 1
# 62 "./include/linux/kcsan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_init(void) { }
# 37 "./include/linux/sched.h" 2
# 1 "./arch/mips/include/generated/asm/kmap_size.h" 1
# 1 "./include/asm-generic/kmap_size.h" 1
# 2 "./arch/mips/include/generated/asm/kmap_size.h" 2
# 38 "./include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct bpf_local_storage;
struct bpf_run_ctx;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct io_uring_task;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 280 "./include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);
           void preempt_schedule_irq(void);




extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 310 "./include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};

enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_IDLE,

 VTIME_SYS,

 VTIME_USER,

 VTIME_GUEST,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 unsigned int cpu;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};


extern struct root_domain def_root_domain;
extern struct mutex sched_domains_mutex;


struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 393 "./include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 427 "./include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;


} __attribute__((__aligned__(sizeof(u64))));
# 479 "./include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << 6))));

struct sched_statistics {
# 527 "./include/linux/sched.h"
} __attribute__((__aligned__((1 << 6))));

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;

 unsigned long runnable_weight;
# 561 "./include/linux/sched.h"
 struct sched_avg avg;

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 630 "./include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 648 "./include/linux/sched.h"
 struct hrtimer inactive_timer;







 struct sched_dl_entity *pi_se;

};
# 695 "./include/linux/sched.h"
union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 need_mb;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct kmap_ctrl {




};

struct task_struct {







 unsigned int __state;
# 744 "./include/linux/sched.h"
 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;


 int on_cpu;
 struct __call_single_node wake_entry;
 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;
# 764 "./include/linux/sched.h"
 int recent_used_cpu;
 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 struct sched_entity se;
 struct sched_rt_entity rt;
 struct sched_dl_entity dl;
 const struct sched_class *sched_class;
# 786 "./include/linux/sched.h"
 struct task_group *sched_task_group;
# 802 "./include/linux/sched.h"
 struct sched_statistics stats;



 struct hlist_head preempt_notifiers;






 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t *user_cpus_ptr;
 cpumask_t cpus_mask;
 void *migration_pending;

 unsigned short migration_disabled;

 unsigned short migration_flags;


 int rcu_read_lock_nesting;
 union rcu_special rcu_read_unlock_special;
 struct list_head rcu_node_entry;
 struct rcu_node *rcu_blocked_node;



 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;



 int trc_reader_nesting;
 int trc_ipi_to_cpu;
 union rcu_special trc_reader_special;
 bool trc_reader_checked;
 struct list_head trc_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;





 unsigned :0;
# 901 "./include/linux/sched.h"
 unsigned sched_remote_wakeup:1;


 unsigned in_execve:1;
 unsigned in_iowait:1;




 unsigned in_user_fault:1;


 unsigned brk_randomized:1;



 unsigned no_cgroup_migration:1;

 unsigned frozen:1;


 unsigned use_memdelay:1;
# 934 "./include/linux/sched.h"
 unsigned in_eventfd_signal:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 955 "./include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;


 void *pf_io_worker;

 u64 utime;
 u64 stime;




 u64 gtime;
 struct prev_cputime prev_cputime;
# 1009 "./include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 start_boottime;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct posix_cputimers posix_cputimers;
# 1032 "./include/linux/sched.h"
 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 1052 "./include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;






 struct fs_struct *fs;


 struct files_struct *files;


 struct io_uring_task *io_uring;



 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;





 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;
 struct syscall_user_dispatch syscall_dispatch;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 1156 "./include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;


 struct blk_plug *plug;


 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;






 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_spinlock_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 struct mutex futex_exit_mutex;
 unsigned int futex_state;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;






 struct mempolicy *mempolicy;
 short il_prev;
 short pref_node_fork;
# 1284 "./include/linux/sched.h"
 struct rseq *rseq;
 u32 rseq_sig;




 unsigned long rseq_event_mask;


 struct tlbflush_unmap_batch tlb_ubc;

 union {
  refcount_t rcu_users;
  struct callback_head rcu;
 };


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
# 1317 "./include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1330 "./include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1350 "./include/linux/sched.h"
 int curr_ret_stack;
 int curr_ret_depth;


 struct ftrace_ret_stack *ret_stack;


 unsigned long long ftrace_timestamp;





 atomic_t trace_overrun;


 atomic_t tracing_graph_pause;




 unsigned long trace;


 unsigned long trace_recursion;
# 1403 "./include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;



 struct request_queue *throttle_queue;



 struct uprobe_task *utask;





 struct kmap_ctrl kmap_ctrl;






 int pagefault_disabled;

 struct task_struct *oom_reaper_list;
# 1448 "./include/linux/sched.h"
 void *security;



 struct bpf_local_storage *bpf_storage;

 struct bpf_run_ctx *bpf_ctx;
# 1474 "./include/linux/sched.h"
 struct llist_head kretprobe_instances;
# 1494 "./include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1520 "./include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1553 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_211(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_211(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_212(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(tsk->__state) == sizeof(char) || sizeof(tsk->__state) == sizeof(short) || sizeof(tsk->__state) == sizeof(int) || sizeof(tsk->__state) == sizeof(long)) || sizeof(tsk->__state) == sizeof(long long))) __compiletime_assert_212(); } while (0); (*(const volatile typeof( _Generic((tsk->__state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tsk->__state))) *)&(tsk->__state)); });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_213(void) __attribute__((__error__("BUILD_BUG_ON failed: " "((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)"))); if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_213(); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_214(void) __attribute__((__error__("BUILD_BUG_ON failed: " "1 + ilog2(TASK_REPORT_MAX) != sizeof(state_char) - 1"))); if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : 63 - __builtin_clzll((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1))) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_214(); } while (0);

 return state_char[state];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1651 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1720 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_percpu_thread(void)
{

 return ((current_thread_info()->task)->flags & 0x04000000) &&
  ((current_thread_info()->task)->nr_cpus_allowed == 1);



}
# 1752 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_no_new_privs(struct task_struct *p) { return arch_test_bit(0, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_page(struct task_struct *p) { return arch_test_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_slab(struct task_struct *p) { return arch_test_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_disable(struct task_struct *p) { return arch_test_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_noexec(struct task_struct *p) { return arch_test_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_force_disable(struct task_struct *p) { return arch_test_bit(4, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_disable(struct task_struct *p) { return arch_test_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_force_disable(struct task_struct *p) { return arch_test_bit(6, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 (current_thread_info()->task)->flags &= ~flags;
 (current_thread_info()->task)->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
extern int dup_user_cpus_ptr(struct task_struct *dst, struct task_struct *src, int node);
extern void release_user_cpus_ptr(struct task_struct *p);
extern int dl_task_check_affinity(struct task_struct *p, const struct cpumask *mask);
extern void force_compatible_cpus_allowed_ptr(struct task_struct *p);
extern void relax_compatible_cpus_allowed_ptr(struct task_struct *p);
# 1825 "./include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern void sched_set_fifo(struct task_struct *p);
extern void sched_set_fifo_low(struct task_struct *p);
extern void sched_set_normal(struct task_struct *p, int nice);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;


 struct thread_info thread_info;

 unsigned long stack[(((1UL) << 14) << (0))/sizeof(long)];
};


extern struct thread_info init_thread_info;


extern unsigned long init_stack[(((1UL) << 14) << (0)) / sizeof(unsigned long)];
# 1902 "./include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void scheduler_ipi(void)
{





 do { if (test_ti_thread_flag(current_thread_info(), 2)) set_preempt_need_resched(); } while (0);
}
extern unsigned long wait_task_inactive(struct task_struct *, unsigned int match_state);
# 1956 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,2)), 0);
}
# 2031 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int _cond_resched(void) { return 0; }
# 2040 "./include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_rwlock_read(rwlock_t *lock);
extern int __cond_resched_rwlock_write(rwlock_t *lock);
# 2078 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cond_resched_rcu(void)
{





}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spin_needbreak(spinlock_t *lock)
{

 return spin_is_contended(lock);



}
# 2109 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwlock_needbreak(rwlock_t *lock)
{

 return queued_rwlock_is_contended(&(lock)->raw_lock);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 2)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_cpu(const struct task_struct *p)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_215(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((struct thread_info *)(p)->stack)->cpu) == sizeof(char) || sizeof(((struct thread_info *)(p)->stack)->cpu) == sizeof(short) || sizeof(((struct thread_info *)(p)->stack)->cpu) == sizeof(int) || sizeof(((struct thread_info *)(p)->stack)->cpu) == sizeof(long)) || sizeof(((struct thread_info *)(p)->stack)->cpu) == sizeof(long long))) __compiletime_assert_215(); } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)(p)->stack)->cpu), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)(p)->stack)->cpu))) *)&(((struct thread_info *)(p)->stack)->cpu)); });
}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 2148 "./include/linux/sched.h"
extern bool sched_task_on_rq(struct task_struct *p);
extern unsigned long get_wchan(struct task_struct *p);
# 2160 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vcpu_is_preempted(int cpu)
{
 return false;
}


extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);







unsigned long sched_cpu_util(int cpu, unsigned long max);
# 2184 "./include/linux/sched.h"
enum rseq_event_mask_bits {
 RSEQ_EVENT_PREEMPT_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT,
 RSEQ_EVENT_SIGNAL_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT,
 RSEQ_EVENT_MIGRATE_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT,
};

enum rseq_event_mask {
 RSEQ_EVENT_PREEMPT = (1U << RSEQ_EVENT_PREEMPT_BIT),
 RSEQ_EVENT_SIGNAL = (1U << RSEQ_EVENT_SIGNAL_BIT),
 RSEQ_EVENT_MIGRATE = (1U << RSEQ_EVENT_MIGRATE_BIT),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_set_notify_resume(struct task_struct *t)
{
 if (t->rseq)
  set_tsk_thread_flag(t, 5);
}

void __rseq_handle_notify_resume(struct ksignal *sig, struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
 if ((current_thread_info()->task)->rseq)
  __rseq_handle_notify_resume(ksig, regs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 arch___set_bit(RSEQ_EVENT_SIGNAL_BIT, &(current_thread_info()->task)->rseq_event_mask);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 rseq_handle_notify_resume(ksig, regs);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_preempt(struct task_struct *t)
{
 arch___set_bit(RSEQ_EVENT_PREEMPT_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_migrate(struct task_struct *t)
{
 arch___set_bit(RSEQ_EVENT_MIGRATE_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
 if (clone_flags & 0x00000100) {
  t->rseq = ((void *)0);
  t->rseq_sig = 0;
  t->rseq_event_mask = 0;
 } else {
  t->rseq = (current_thread_info()->task)->rseq;
  t->rseq_sig = (current_thread_info()->task)->rseq_sig;
  t->rseq_event_mask = (current_thread_info()->task)->rseq_event_mask;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_execve(struct task_struct *t)
{
 t->rseq = ((void *)0);
 t->rseq_sig = 0;
 t->rseq_event_mask = 0;
}
# 2292 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_syscall(struct pt_regs *regs)
{
}



const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);
int sched_trace_rq_cpu_capacity(struct rq *rq);
int sched_trace_rq_nr_running(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_core_free(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_core_fork(struct task_struct *p) { }
# 14 "arch/mips/kvm/tlb.c" 2

# 1 "./include/linux/mm.h" 1
# 10 "./include/linux/mm.h"
# 1 "./include/linux/gfp.h" 1





# 1 "./include/linux/mmzone.h" 1
# 18 "./include/linux/mmzone.h"
# 1 "./include/linux/pageblock-flags.h" 1
# 18 "./include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 55 "./include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(const struct page *page,
    unsigned long pfn,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long mask);
# 19 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags-layout.h" 1





# 1 "./include/generated/bounds.h" 1
# 7 "./include/linux/page-flags-layout.h" 2
# 20 "./include/linux/mmzone.h" 2

# 1 "./include/linux/mm_types.h" 1






# 1 "./include/linux/auxvec.h" 1




# 1 "./include/uapi/linux/auxvec.h" 1




# 1 "./arch/mips/include/uapi/asm/auxvec.h" 1
# 6 "./include/uapi/linux/auxvec.h" 2
# 6 "./include/linux/auxvec.h" 2
# 8 "./include/linux/mm_types.h" 2



# 1 "./include/linux/rwsem.h" 1
# 47 "./include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;



 raw_spinlock_t wait_lock;
 struct list_head wait_list;






};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 103 "./include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 119 "./include/linux/rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}
# 174 "./include/linux/rwsem.h"
extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 12 "./include/linux/mm_types.h" 2
# 1 "./include/linux/completion.h" 1
# 12 "./include/linux/completion.h"
# 1 "./include/linux/swait.h" 1








# 1 "./arch/mips/include/generated/asm/current.h" 1
# 10 "./include/linux/swait.h" 2
# 41 "./include/linux/swait.h"
struct task_struct;

struct swait_queue_head {
 raw_spinlock_t lock;
 struct list_head task_list;
};

struct swait_queue {
 struct task_struct *task;
 struct list_head task_list;
};
# 69 "./include/linux/swait.h"
extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
        struct lock_class_key *key);
# 121 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int swait_active(struct swait_queue_head *wq)
{
 return !list_empty(&wq->task_list);
}
# 134 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool swq_has_sleeper(struct swait_queue_head *wq)
{







 __sync();
 return swait_active(wq);
}

extern void swake_up_one(struct swait_queue_head *q);
extern void swake_up_all(struct swait_queue_head *q);
extern void swake_up_locked(struct swait_queue_head *q);

extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);

extern void __finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
extern void finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
# 13 "./include/linux/completion.h" 2
# 26 "./include/linux/completion.h"
struct completion {
 unsigned int done;
 struct swait_queue_head wait;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_release(struct completion *x) {}
# 84 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 97 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "./include/linux/mm_types.h" 2

# 1 "./include/linux/uprobes.h" 1
# 19 "./include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};


# 1 "./arch/mips/include/asm/uprobes.h" 1








# 1 "./include/linux/notifier.h" 1
# 16 "./include/linux/notifier.h"
# 1 "./include/linux/srcu.h" 1
# 22 "./include/linux/srcu.h"
# 1 "./include/linux/rcu_segcblist.h" 1
# 21 "./include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
};
# 183 "./include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long seglen[4];
 u8 flags;
};
# 23 "./include/linux/srcu.h" 2

struct srcu_struct;
# 41 "./include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *ssp);







# 1 "./include/linux/srcutree.h" 1
# 14 "./include/linux/srcutree.h"
# 1 "./include/linux/rcu_node_tree.h" 1
# 15 "./include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock __attribute__((__aligned__(1 << (6))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[1];
 struct srcu_node *level[1 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;
 struct lockdep_map dep_map;
};
# 135 "./include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "./include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);


void srcu_init(void);
# 100 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 return 1;
}
# 159 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 do { } while (0);
 return retval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 185 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/srcu.h", 188, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 do { } while (0);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 209 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "./include/linux/notifier.h" 2
# 49 "./include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "./include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 144 "./include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);

extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
# 187 "./include/linux/notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 231 "./include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 10 "./arch/mips/include/asm/uprobes.h" 2
# 19 "./arch/mips/include/asm/uprobes.h"
typedef u32 uprobe_opcode_t;
# 35 "./arch/mips/include/asm/uprobes.h"
struct arch_uprobe {
 unsigned long resume_epc;
 u32 insn[2];
 u32 ixol[2];
};

struct arch_uprobe_task {
 unsigned long saved_trap_nr;
};
# 50 "./include/linux/uprobes.h" 2

enum uprobe_task_state {
 UTASK_RUNNING,
 UTASK_SSTEP,
 UTASK_SSTEP_ACK,
 UTASK_SSTEP_TRAPPED,
};




struct uprobe_task {
 enum uprobe_task_state state;

 union {
  struct {
   struct arch_uprobe_task autask;
   unsigned long vaddr;
  };

  struct {
   struct callback_head dup_xol_work;
   unsigned long dup_xol_addr;
  };
 };

 struct uprobe *active_uprobe;
 unsigned long xol_vaddr;

 struct return_instance *return_instances;
 unsigned int depth;
};

struct return_instance {
 struct uprobe *uprobe;
 unsigned long func;
 unsigned long stack;
 unsigned long orig_ret_vaddr;
 bool chained;

 struct return_instance *next;
};

enum rp_check {
 RP_CHECK_CALL,
 RP_CHECK_CHAIN_CALL,
 RP_CHECK_RET,
};

struct xol_area;

struct uprobes_state {
 struct xol_area *xol_area;
};

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) uprobes_init(void);
extern int set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern int set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern bool is_swbp_insn(uprobe_opcode_t *insn);
extern bool is_trap_insn(uprobe_opcode_t *insn);
extern unsigned long uprobe_get_swbp_addr(struct pt_regs *regs);
extern unsigned long uprobe_get_trap_addr(struct pt_regs *regs);
extern int uprobe_write_opcode(struct arch_uprobe *auprobe, struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc);
extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_mmap(struct vm_area_struct *vma);
extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
extern void uprobe_start_dup_mmap(void);
extern void uprobe_end_dup_mmap(void);
extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void uprobe_free_utask(struct task_struct *t);
extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
extern void uprobe_notify_resume(struct pt_regs *regs);
extern bool uprobe_deny_signal(void);
extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
extern void uprobe_clear_state(struct mm_struct *mm);
extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
extern bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx, struct pt_regs *regs);
extern bool arch_uprobe_ignore(struct arch_uprobe *aup, struct pt_regs *regs);
extern void arch_uprobe_copy_ixol(struct page *page, unsigned long vaddr,
      void *src, unsigned long len);
# 15 "./include/linux/mm_types.h" 2





# 1 "./arch/mips/include/asm/mmu.h" 1








typedef struct {
 union {
  u64 asid[16];
  atomic64_t mmid;
 };

 void *vdso;


 spinlock_t bd_emupage_lock;

 unsigned long *bd_emupage_allocmap;

 wait_queue_head_t bd_emupage_queue;
} mm_context_t;
# 21 "./include/linux/mm_types.h" 2








struct address_space;
struct mem_cgroup;
# 71 "./include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   unsigned long pp_magic;
   struct page_pool *pp;
   unsigned long _pp_mapping_pad;
   unsigned long dma_addr;
   union {




    unsigned long dma_addr_upper;




    atomic_long_t pp_frag_count;
   };
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;



    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
   unsigned int compound_nr;
  };
  struct {
   unsigned long _compound_pad_1;
   atomic_t hpage_pinned_refcount;

   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };



   spinlock_t ptl;

  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 189 "./include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 unsigned long memcg_data;
# 239 "./include/linux/mm_types.h"
} ;
# 265 "./include/linux/mm_types.h"
struct folio {

 union {
  struct {

   unsigned long flags;
   struct list_head lru;
   struct address_space *mapping;
   unsigned long index;
   void *private;
   atomic_t _mapcount;
   atomic_t _refcount;

   unsigned long memcg_data;


  };
  struct page page;
 };
};

_Static_assert(sizeof(struct page) == sizeof(struct folio), "sizeof(struct page) == sizeof(struct folio)");


_Static_assert(__builtin_offsetof(struct page, flags) == __builtin_offsetof(struct folio, flags), "offsetof(struct page, flags) == offsetof(struct folio, flags)");
_Static_assert(__builtin_offsetof(struct page, lru) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, lru) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, compound_head) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, compound_head) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, index) == __builtin_offsetof(struct folio, index), "offsetof(struct page, index) == offsetof(struct folio, index)");
_Static_assert(__builtin_offsetof(struct page, private) == __builtin_offsetof(struct folio, private), "offsetof(struct page, private) == offsetof(struct folio, private)");
_Static_assert(__builtin_offsetof(struct page, _mapcount) == __builtin_offsetof(struct folio, _mapcount), "offsetof(struct page, _mapcount) == offsetof(struct folio, _mapcount)");
_Static_assert(__builtin_offsetof(struct page, _refcount) == __builtin_offsetof(struct folio, _refcount), "offsetof(struct page, _refcount) == offsetof(struct folio, _refcount)");

_Static_assert(__builtin_offsetof(struct page, memcg_data) == __builtin_offsetof(struct folio, memcg_data), "offsetof(struct page, memcg_data) == offsetof(struct folio, memcg_data)");



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *folio_mapcount_ptr(struct folio *folio)
{
 struct page *tail = &folio->page + 1;
 return &tail->compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_pincount_ptr(struct page *page)
{
 return &page[2].hpage_pinned_refcount;
}
# 333 "./include/linux/mm_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_private(struct page *page, unsigned long private)
{
 page->private = private;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *folio_get_private(struct folio *folio)
{
 return folio->private;
}

struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 386 "./include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 395 "./include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;





 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;





 struct mempolicy *vm_policy;

 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 495 "./include/linux/mm_types.h"
  atomic_t membarrier_state;
# 507 "./include/linux/mm_types.h"
  atomic_t mm_users;
# 516 "./include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;
# 538 "./include/linux/mm_types.h"
  struct rw_semaphore mmap_lock;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;






  seqcount_t write_protect_seq;

  spinlock_t arg_lock;

  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(1 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 601 "./include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_subscriptions *notifier_subscriptions;
# 632 "./include/linux/mm_types.h"
  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;






  struct work_struct async_put_work;


  u32 pasid;

 } ;





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_gather_mmu_fullmm(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_finish_mmu(struct mmu_gather *tlb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 724 "./include/linux/mm_types.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 736 "./include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 749 "./include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 798 "./include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 838 "./include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags.h" 1
# 103 "./include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,
# 139 "./include/linux/page-flags.h"
 PG_arch_2,




 __NR_PAGEFLAGS,

 PG_readahead = PG_reclaim,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_workingset,
# 186 "./include/linux/page-flags.h"
 PG_isolated = PG_reclaim,


 PG_reported = PG_uptodate,
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _compound_head(const struct page *page)
{
 unsigned long head = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_216(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_216(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });

 if (__builtin_expect(!!(head & 1), 0))
  return head - 1;
 return (unsigned long)page;
}
# 235 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_217(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_217(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return arch_test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PagePoisoned(const struct page *page)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_218(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->flags) == sizeof(char) || sizeof(page->flags) == sizeof(short) || sizeof(page->flags) == sizeof(int) || sizeof(page->flags) == sizeof(long)) || sizeof(page->flags) == sizeof(long long))) __compiletime_assert_218(); } while (0); (*(const volatile typeof( _Generic((page->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->flags))) *)&(page->flags)); }) == -1l;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_init_poison(struct page *page, size_t size)
{
}


static unsigned long *folio_flags(struct folio *folio, unsigned n)
{
 struct page *page = &folio->page;

 ((void)(sizeof(( long)(PageTail(page)))));
 ((void)(sizeof(( long)(n > 0 && !arch_test_bit(PG_head, &page->flags)))));
 return &page[n].flags;
}
# 417 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_locked(struct folio *folio) { return arch_test_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return arch_test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_locked(struct folio *folio) { arch___set_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { arch___set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_locked(struct folio *folio) { arch___clear_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { arch___clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_waiters(struct folio *folio) { return arch_test_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return arch_test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_waiters(struct folio *folio) { set_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_waiters(struct folio *folio) { clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_waiters(struct folio *folio) { arch___clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { arch___clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_error(struct folio *folio) { return arch_test_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageError(struct page *page) { return arch_test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_error(struct folio *folio) { set_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_error(struct folio *folio) { clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_error(struct folio *folio) { return test_and_clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_referenced(struct folio *folio) { return arch_test_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return arch_test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_referenced(struct folio *folio) { set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_referenced(struct folio *folio) { clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_referenced(struct folio *folio) { return test_and_clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_referenced(struct folio *folio) { arch___set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { arch___set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_dirty(struct folio *folio) { return arch_test_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return arch_test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_dirty(struct folio *folio) { set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_dirty(struct folio *folio) { clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_dirty(struct folio *folio) { return test_and_set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_dirty(struct folio *folio) { return test_and_clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_dirty(struct folio *folio) { arch___clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { arch___clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_lru(struct folio *folio) { return arch_test_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return arch_test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_lru(struct folio *folio) { set_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_lru(struct folio *folio) { clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_lru(struct folio *folio) { arch___clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { arch___clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_lru(struct folio *folio) { return test_and_clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_active(struct folio *folio) { return arch_test_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return arch_test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_active(struct folio *folio) { set_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_active(struct folio *folio) { clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_active(struct folio *folio) { arch___clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { arch___clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_active(struct folio *folio) { return test_and_clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_workingset(struct folio *folio) { return arch_test_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return arch_test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_workingset(struct folio *folio) { set_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_workingset(struct folio *folio) { clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_workingset(struct folio *folio) { return test_and_clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_slab(struct folio *folio) { return arch_test_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return arch_test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_slab(struct folio *folio) { arch___set_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { arch___set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_slab(struct folio *folio) { arch___clear_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { arch___clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_slob_free(struct folio *folio) { return arch_test_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return arch_test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_slob_free(struct folio *folio) { arch___set_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { arch___set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_slob_free(struct folio *folio) { arch___clear_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { arch___clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_checked(struct folio *folio) { return arch_test_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return arch_test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_checked(struct folio *folio) { set_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_checked(struct folio *folio) { clear_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_pinned(struct folio *folio) { return arch_test_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return arch_test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_pinned(struct folio *folio) { set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_pinned(struct folio *folio) { clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_pinned(struct folio *folio) { return test_and_set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_pinned(struct folio *folio) { return test_and_clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_savepinned(struct folio *folio) { return arch_test_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return arch_test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_savepinned(struct folio *folio) { set_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_savepinned(struct folio *folio) { clear_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_foreign(struct folio *folio) { return arch_test_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return arch_test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_foreign(struct folio *folio) { set_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_foreign(struct folio *folio) { clear_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_xen_remapped(struct folio *folio) { return arch_test_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return arch_test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_xen_remapped(struct folio *folio) { set_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_xen_remapped(struct folio *folio) { clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_xen_remapped(struct folio *folio) { return test_and_clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reserved(struct folio *folio) { return arch_test_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return arch_test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_reserved(struct folio *folio) { set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_reserved(struct folio *folio) { clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_reserved(struct folio *folio) { arch___clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { arch___clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_reserved(struct folio *folio) { arch___set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { arch___set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_swapbacked(struct folio *folio) { return arch_test_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return arch_test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_swapbacked(struct folio *folio) { set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_swapbacked(struct folio *folio) { clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_swapbacked(struct folio *folio) { arch___clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { arch___clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_swapbacked(struct folio *folio) { arch___set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { arch___set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_private(struct folio *folio) { return arch_test_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return arch_test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_private(struct folio *folio) { set_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_private(struct folio *folio) { clear_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_private_2(struct folio *folio) { return arch_test_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return arch_test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_private_2(struct folio *folio) { set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_private_2(struct folio *folio) { clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_private_2(struct folio *folio) { return test_and_set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_private_2(struct folio *folio) { return test_and_clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_owner_priv_1(struct folio *folio) { return arch_test_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return arch_test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_owner_priv_1(struct folio *folio) { set_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_owner_priv_1(struct folio *folio) { clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_owner_priv_1(struct folio *folio) { return test_and_clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_writeback(struct folio *folio) { return arch_test_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return arch_test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_writeback(struct folio *folio) { return test_and_set_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_writeback(struct folio *folio) { return test_and_clear_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_mappedtodisk(struct folio *folio) { return arch_test_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return arch_test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_mappedtodisk(struct folio *folio) { set_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_mappedtodisk(struct folio *folio) { clear_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reclaim(struct folio *folio) { return arch_test_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return arch_test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_reclaim(struct folio *folio) { set_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_reclaim(struct folio *folio) { clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_reclaim(struct folio *folio) { return test_and_clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_readahead(struct folio *folio) { return arch_test_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return arch_test_bit(PG_readahead, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_readahead(struct folio *folio) { set_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_readahead(struct folio *folio) { clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_readahead(struct folio *folio) { return test_and_clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 481 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_highmem(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_swapcache(struct folio *folio)
{
 return folio_test_swapbacked(folio) &&
   arch_test_bit(PG_swapcache, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageSwapCache(struct page *page)
{
 return folio_test_swapcache((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_swapcache(struct folio *folio) { set_bit(PG_swapcache, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_swapcache(struct folio *folio) { clear_bit(PG_swapcache, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_unevictable(struct folio *folio) { return arch_test_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return arch_test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_unevictable(struct folio *folio) { set_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_unevictable(struct folio *folio) { clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_unevictable(struct folio *folio) { arch___clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { arch___clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_unevictable(struct folio *folio) { return test_and_clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_mlocked(struct folio *folio) { return arch_test_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return arch_test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_mlocked(struct folio *folio) { set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_mlocked(struct folio *folio) { clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_mlocked(struct folio *folio) { arch___clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { arch___clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_mlocked(struct folio *folio) { return test_and_set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_mlocked(struct folio *folio) { return test_and_clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
# 518 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_uncached(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_uncached(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageUncached(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_uncached(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageUncached(struct page *page) { }
# 527 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_hwpoison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_hwpoison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_hwpoison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHWPoison(struct page *page) { }
# 541 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_skip_kasan_poison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSkipKASanPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSkipKASanPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSkipKASanPoison(struct page *page) { }
# 550 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reported(struct folio *folio) { return arch_test_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReported(struct page *page) { return arch_test_bit(PG_reported, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_reported(struct folio *folio) { arch___set_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReported(struct page *page) { arch___set_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_reported(struct folio *folio) { arch___clear_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReported(struct page *page) { arch___clear_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 574 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_anon(struct folio *folio)
{
 return ((unsigned long)folio->mapping & 0x1) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageAnon(struct page *page)
{
 return folio_test_anon((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 602 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_ksm(struct folio *folio)
{
 return ((unsigned long)folio->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageKsm(struct page *page)
{
 return folio_test_ksm((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}




u64 stable_page_flags(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_uptodate(struct folio *folio)
{
 bool ret = arch_test_bit(PG_uptodate, folio_flags(folio, 0));
# 629 "./include/linux/page-flags.h"
 if (ret)
  rmb();

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUptodate(struct page *page)
{
 return folio_test_uptodate((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_mark_uptodate(struct folio *folio)
{
 wmb();
 arch___set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_mark_uptodate(struct folio *folio)
{





 wmb();
 set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 __folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_uptodate(struct folio *folio) { clear_bit(PG_uptodate, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }

bool __folio_start_writeback(struct folio *folio, bool keep_write);
bool set_page_writeback(struct page *page);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback_keepwrite(struct page *page)
{
 __folio_start_writeback((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_set_page_writeback(struct page *page)
{
 return set_page_writeback(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_head(struct folio *folio) { return arch_test_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return arch_test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_head(struct folio *folio) { arch___set_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { arch___set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_head(struct folio *folio) { arch___clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { arch___clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_head(struct folio *folio) { clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_large(struct folio *folio)
{
 return folio_test_head(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_219(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_219(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_220(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_220(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
}
# 728 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_hugetlb(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_headhuge(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHeadHuge(const struct page *page) { return 0; }
# 788 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_transhuge(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_transcompound(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompound(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_transcompoundmap(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompoundMap(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_transtail(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransTail(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_double_map(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageDoubleMap(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_double_map(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageDoubleMap(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_double_map(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageDoubleMap(struct page *page) { }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_set_double_map(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestSetPageDoubleMap(struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_clear_double_map(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestClearPageDoubleMap(struct page *page) { return 0; }
# 806 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_has_hwpoisoned(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHasHWPoisoned(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_has_hwpoisoned(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHasHWPoisoned(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_has_hwpoisoned(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHasHWPoisoned(struct page *page) { }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_set_has_hwpoisoned(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestSetPageHasHWPoisoned(struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_clear_has_hwpoisoned(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestClearPageHasHWPoisoned(struct page *page) { return 0; }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_page_hwpoison(struct page *page)
{
 if (PageHWPoison(page))
  return true;
 return PageHuge(page) && PageHWPoison(((typeof(page))_compound_head(page)));
}
# 842 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 867 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); page->page_type |= 0x00000080; }
# 891 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { ((void)(sizeof(( long)(!PageOffline(page))))); page->page_type |= 0x00000100; }

extern void page_offline_freeze(void);
extern void page_offline_thaw(void);
extern void page_offline_begin(void);
extern void page_offline_end(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { ((void)(sizeof(( long)(!PageTable(page))))); page->page_type |= 0x00000200; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { ((void)(sizeof(( long)(!PageGuard(page))))); page->page_type |= 0x00000400; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_isolated(struct folio *folio) { return arch_test_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return arch_test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_isolated(struct folio *folio) { arch___set_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { arch___set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_isolated(struct folio *folio) { arch___clear_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { arch___clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __PageSlabPfmemalloc(struct page *page)
{
 return PageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 986 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_has_private(struct folio *folio)
{
 return page_has_private(&folio->page);
}
# 23 "./include/linux/mmzone.h" 2
# 1 "./include/linux/local_lock.h" 1




# 1 "./include/linux/local_lock_internal.h" 1
# 11 "./include/linux/local_lock_internal.h"
typedef struct {




} local_lock_t;
# 47 "./include/linux/local_lock_internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_acquire(local_lock_t *l) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_release(local_lock_t *l) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_debug_init(local_lock_t *l) { }
# 6 "./include/linux/local_lock.h" 2
# 24 "./include/linux/mmzone.h" 2
# 42 "./include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 67 "./include/linux/mmzone.h"
 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 81 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_migrate_movable(int mt)
{
 return false || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;






struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_221(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head__->next) == sizeof(char) || sizeof(head__->next) == sizeof(short) || sizeof(head__->next) == sizeof(int) || sizeof(head__->next) == sizeof(long)) || sizeof(head__->next) == sizeof(long long))) __compiletime_assert_221(); } while (0); (*(const volatile typeof( _Generic((head__->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head__->next))) *)&(head__->next)); }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); _Static_assert(__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) || __builtin_types_compatible_p(typeof(*(pos__)), typeof(void)), "pointer type mismatch in container_of()"); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;







struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (6))));






enum numa_stat_item {
 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,
 NR_VM_NUMA_EVENT_ITEMS
};




enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,

 NR_BOUNCE,



 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE_B,
 NR_SLAB_UNRECLAIMABLE_B,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_FILE,
 WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_FILE,
 WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_FILE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_FILE_THPS,
 NR_FILE_PMDMAPPED,
 NR_ANON_THPS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_THROTTLED_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_FOLL_PIN_ACQUIRED,
 NR_FOLL_PIN_RELEASED,
 NR_KERNEL_STACK_KB,



 NR_PAGETABLE,

 NR_SWAPCACHE,

 NR_VM_NODE_STAT_ITEMS
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_print_in_thp(enum node_stat_item item)
{
 if (!0)
  return false;

 return item == NR_ANON_THPS ||
        item == NR_FILE_THPS ||
        item == NR_SHMEM_THPS ||
        item == NR_SHMEM_PMDMAPPED ||
        item == NR_FILE_PMDMAPPED;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_in_bytes(int idx)
{
# 250 "./include/linux/mmzone.h"
 return (idx == NR_SLAB_RECLAIMABLE_B ||
  idx == NR_SLAB_UNRECLAIMABLE_B);
}
# 267 "./include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};

enum vmscan_throttle_state {
 VMSCAN_THROTTLE_WRITEBACK,
 VMSCAN_THROTTLE_ISOLATED,
 VMSCAN_THROTTLE_NOPROGRESS,
 NR_VMSCAN_THROTTLE,
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}



enum lruvec_flags {
 LRUVEC_CONGESTED,


};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];

 spinlock_t lru_lock;





 unsigned long anon_cost;
 unsigned long file_cost;

 atomic_long_t nonresident_age;

 unsigned long refaults[2];

 unsigned long flags;

 struct pglist_data *pgdat;

};
# 335 "./include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};
# 368 "./include/linux/mmzone.h"
struct per_cpu_pages {
 int count;
 int high;
 int batch;
 short free_factor;

 short expire;



 struct list_head lists[(MIGRATE_PCPTYPES * (3 + 1 + 0))];
};

struct per_cpu_zonestat {

 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];
 s8 stat_threshold;







 unsigned long vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 418 "./include/linux/mmzone.h"
 ZONE_DMA32,






 ZONE_NORMAL,
# 486 "./include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};





struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 516 "./include/linux/mmzone.h"
 long lowmem_reserve[3];


 int node;

 struct pglist_data *zone_pgdat;
 struct per_cpu_pages *per_cpu_pageset;
 struct per_cpu_zonestat *per_cpu_zonestats;




 int pageset_high;
 int pageset_batch;
# 540 "./include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 584 "./include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;







 const char *name;
# 610 "./include/linux/mmzone.h"
 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 650 "./include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];
} __attribute__((__aligned__(1 << (6))));

enum pgdat_flags {
 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


 ZONE_RECLAIM_ACTIVE,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_cma_pages(struct zone *zone)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 746 "./include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,





 ZONELIST_NOFALLBACK,

 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 781 "./include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 6) * 3) + 1];
};






extern struct page *mem_map;
# 808 "./include/linux/mmzone.h"
typedef struct pglist_data {





 struct zone node_zones[3];






 struct zonelist node_zonelists[MAX_ZONELISTS];

 int nr_zones;
# 845 "./include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;


 wait_queue_head_t reclaim_wait[NR_VMSCAN_THROTTLE];

 atomic_t nr_writeback_throttled;
 unsigned long nr_reclaim_start;

 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_highest_zoneidx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_highest_zoneidx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
 bool proactive_compact_trigger;





 unsigned long totalreserve_pages;





 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;



 struct zone_padding _pad1_;
# 909 "./include/linux/mmzone.h"
 struct lruvec __lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 932 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

# 1 "./include/linux/memory_hotplug.h" 1




# 1 "./include/linux/mmzone.h" 1
# 6 "./include/linux/memory_hotplug.h" 2




struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct memory_group;
struct resource;
struct vmem_altmap;
# 232 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_online_mems(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_online_mems(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_hotplug_begin(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_hotplug_done(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool movable_node_is_enabled(void)
{
 return false;
}







struct range arch_get_mappable_range(void);
# 291 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_init(struct pglist_data *pgdat) {}
# 306 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void try_offline_node(int nid) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages,
    struct memory_group *group)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int remove_memory(u64 start, u64 size)
{
 return -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __remove_memory(u64 start, u64 size) {}


extern void set_zone_contiguous(struct zone *zone);
extern void clear_zone_contiguous(struct zone *zone);
# 943 "./include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type highest_zoneidx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int highest_zoneidx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx);




enum meminit_context {
 MEMINIT_EARLY,
 MEMINIT_HOTPLUG,
};

extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int local_memory_node(int node_id) { return node_id; };
# 995 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_zone_device(struct zone *zone)
{
 return false;
}
# 1007 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_to_nid(struct zone *zone)
{
 return zone->node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_set_nid(struct zone *zone, int nid)
{
 zone->node = nid;
}
# 1037 "./include/linux/mmzone.h"
extern int movable_zone;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}
# 1056 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;

int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[3];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int numa_zonelist_order_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
extern int percpu_pagelist_high_fraction;
extern char numa_zonelist_order[];
# 1098 "./include/linux/mmzone.h"
# 1 "./arch/mips/include/asm/mmzone.h" 1
# 12 "./arch/mips/include/asm/mmzone.h"
# 1 "./arch/mips/include/asm/mach-loongson64/mmzone.h" 1
# 17 "./arch/mips/include/asm/mach-loongson64/mmzone.h"
extern struct pglist_data *__node_data[];



extern void setup_zero_pages(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) prom_init_numa_memory(void);
# 13 "./arch/mips/include/asm/mmzone.h" 2
# 1099 "./include/linux/mmzone.h" 2



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 1134 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1168 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1194 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1239 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool movable_only_nodes(nodemask_t *nodes)
{
 struct zonelist *zonelist;
 struct zoneref *z;
 int nid;

 if (__nodes_empty(&(*nodes), (1 << 6)))
  return false;






 nid = __first_node(&(*nodes));
 zonelist = &(__node_data[nid])->node_zonelists[ZONELIST_FALLBACK];
 z = first_zones_zonelist(zonelist, ZONE_NORMAL, nodes);
 return (!z->zone) ? true : false;
}
# 1289 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (28 - 14);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (28 - 14);
}
# 1317 "./include/linux/mmzone.h"
struct mem_section_usage {




 unsigned long pageblock_flags[0];
};

void subsection_map_init(unsigned long pfn, unsigned long nr_pages);

struct page;
struct page_ext;
struct mem_section {
# 1342 "./include/linux/mmzone.h"
 unsigned long section_mem_map;

 struct mem_section_usage *usage;
# 1357 "./include/linux/mmzone.h"
};
# 1372 "./include/linux/mmzone.h"
extern struct mem_section mem_section[((((1UL << (48 - 28))) + (1) - 1) / (1))][1];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *section_to_usemap(struct mem_section *ms)
{
 return ms->usage->pageblock_flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_section *__nr_to_section(unsigned long nr)
{




 if (!mem_section[((nr) / 1)])
  return ((void *)0);
 return &mem_section[((nr) / 1)][nr & (1 - 1)];
}
extern size_t mem_section_usage_size(void);
# 1414 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<5)-1));
 return (struct page *)map;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<3)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_device_section(struct mem_section *section)
{
 unsigned long flags = (1UL<<2) | (1UL<<4);

 return section && ((section->section_mem_map & flags) == flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern unsigned long __highest_present_section_nr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int subsection_map_index(unsigned long pfn)
{
 return (pfn & ~((~((1UL << (28 - 14))-1)))) / (1UL << (21 - 14));
}
# 1488 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
{
 return 1;
}
# 1506 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_valid(unsigned long pfn)
{
 struct mem_section *ms;







 if (((unsigned long)((((phys_addr_t)(pfn) << 14)) >> 14)) != pfn)
  return 0;

 if (pfn_to_section_nr(pfn) >= (1UL << (48 - 28)))
  return 0;
 ms = __pfn_to_section(pfn);
 if (!valid_section(ms))
  return 0;




 return early_section(ms) || pfn_section_valid(ms, pfn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_in_present_section(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (48 - 28)))
  return 0;
 return present_section(__pfn_to_section(pfn));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long next_present_section_nr(unsigned long section_nr)
{
 while (++section_nr <= __highest_present_section_nr) {
  if (present_section_nr(section_nr))
   return section_nr;
 }

 return -1;
}
# 1564 "./include/linux/mmzone.h"
void sparse_init(void);
# 7 "./include/linux/gfp.h" 2


# 1 "./include/linux/topology.h" 1
# 30 "./include/linux/topology.h"
# 1 "./include/linux/arch_topology.h" 1
# 11 "./include/linux/arch_topology.h"
void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_scale)))) *)((&(cpu_scale)))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) arch_freq_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(arch_freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale)))); (typeof((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
        unsigned long max_freq);
bool topology_scale_freq_invariant(void);

enum scale_freq_source {
 SCALE_FREQ_SOURCE_CPUFREQ = 0,
 SCALE_FREQ_SOURCE_ARCH,
 SCALE_FREQ_SOURCE_CPPC,
};

struct scale_freq_data {
 enum scale_freq_source source;
 void (*set_freq_scale)(void);
};

void topology_scale_freq_tick(void);
void topology_set_scale_freq_source(struct scale_freq_data *data, const struct cpumask *cpus);
void topology_clear_scale_freq_source(enum scale_freq_source source, const struct cpumask *cpus);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) thermal_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_thermal_pressure(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure)))); (typeof((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_thermal_pressure(const struct cpumask *cpus,
       unsigned long th_pressure);

struct cpu_topology {
 int thread_id;
 int core_id;
 int cluster_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t cluster_sibling;
 cpumask_t llc_sibling;
};
# 31 "./include/linux/topology.h" 2





# 1 "./arch/mips/include/asm/topology.h" 1
# 11 "./arch/mips/include/asm/topology.h"
# 1 "./arch/mips/include/asm/mach-loongson64/topology.h" 1








extern cpumask_t __node_cpumask[];


struct pci_bus;
extern int pcibus_to_node(struct pci_bus *);



extern unsigned char __node_distances[(1 << 6)][(1 << 6)];





# 1 "./include/asm-generic/topology.h" 1
# 24 "./arch/mips/include/asm/mach-loongson64/topology.h" 2
# 12 "./arch/mips/include/asm/topology.h" 2
# 37 "./include/linux/topology.h" 2
# 46 "./include/linux/topology.h"
int arch_update_cpu_topology(void);
# 76 "./include/linux/topology.h"
extern int __attribute__((__section__(".data..read_mostly"))) node_reclaim_distance;
# 118 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_node_id(void)
{
 return (__cpu_logical_map[raw_smp_processor_id()] >> 2);
}
# 168 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_mem(int cpu)
{
 return (__cpu_logical_map[cpu] >> 2);
}
# 222 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return (&__node_cpumask[(__cpu_logical_map[cpu] >> 2)]);
}
# 10 "./include/linux/gfp.h" 2
# 25 "./include/linux/gfp.h"
struct vm_area_struct;
# 343 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_222(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(1UL << GFP_MOVABLE_SHIFT) != ___GFP_MOVABLE"))); if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_222(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_223(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(___GFP_MOVABLE >> GFP_MOVABLE_SHIFT) != MIGRATE_MOVABLE"))); if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_223(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 380 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
  (( gfp_t)0x400u);
}
# 476 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_NORMAL << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_NORMAL << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 494 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_zonelist(gfp_t flags)
{

 if (__builtin_expect(!!(flags & (( gfp_t)0x200000u)), 0))
  return ZONELIST_NOFALLBACK;

 return ZONELIST_FALLBACK;
}
# 512 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (__node_data[nid])->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_alloc_page(struct page *page, int order) { }


struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);
struct folio *__folio_alloc(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);

unsigned long __alloc_pages_bulk(gfp_t gfp, int preferred_nid,
    nodemask_t *nodemask, int nr_pages,
    struct list_head *page_list,
    struct page **page_array);

unsigned long alloc_pages_bulk_array_mempolicy(gfp_t gfp,
    unsigned long nr_pages,
    struct page **page_array);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_list(gfp_t gfp, unsigned long nr_pages, struct list_head *list)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, list, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array(gfp_t gfp, unsigned long nr_pages, struct page **page_array)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, ((void *)0), page_array);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_bulk(gfp, nid, ((void *)0), nr_pages, ((void *)0), page_array);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 6)))));
 ((void)(sizeof(( long)((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct folio *__folio_alloc_node(gfp_t gfp, unsigned int order, int nid)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 6)))));
 ((void)(sizeof(( long)((gfp & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __folio_alloc(gfp, order, nid, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}


struct page *alloc_pages(gfp_t gfp, unsigned int order);
struct folio *folio_alloc(gfp_t gfp, unsigned order);
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node, bool hugepage);
# 622 "./include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void free_pages_exact(void *virt, size_t size);
__attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) void *alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc_align(struct page_frag_cache *nc,
       unsigned int fragsz, gfp_t gfp_mask,
       unsigned int align_mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask)
{
 return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
}

extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 669 "./include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);

extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);


extern bool pm_suspended_storage(void);
# 695 "./include/linux/gfp.h"
void free_contig_range(unsigned long pfn, unsigned long nr_pages);
# 11 "./include/linux/mm.h" 2







# 1 "./include/linux/mmap_lock.h" 1







# 1 "./include/linux/tracepoint-defs.h" 1
# 12 "./include/linux/tracepoint-defs.h"
# 1 "./include/linux/static_key.h" 1
# 1 "./include/linux/jump_label.h" 1
# 79 "./include/linux/jump_label.h"
extern bool static_key_initialized;
# 110 "./include/linux/jump_label.h"
struct static_key {
 atomic_t enabled;
};
# 196 "./include/linux/jump_label.h"
enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 264 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int static_key_count(struct static_key *key)
{
 return atomic_read(&key->enabled);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void jump_label_init(void)
{
 static_key_initialized = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 if (__builtin_expect(!!(static_key_count(key) > 0), 0))
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 if (__builtin_expect(!!(static_key_count(key) > 0), 1))
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void static_key_slow_inc(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/jump_label.h", 290, 9, "%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_inc(&key->enabled);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void static_key_slow_dec(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/jump_label.h", 296, 9, "%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_dec(&key->enabled);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int jump_label_text_reserved(void *start, void *end)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_label_lock(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_label_unlock(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int jump_label_apply_nops(struct module *mod)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void static_key_enable(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/jump_label.h", 318, 9, "%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (atomic_read(&key->enabled) != 0) {
  ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(atomic_read(&key->enabled) != 1); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/jump_label.h", 321, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
  return;
 }
 atomic_set(&key->enabled, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void static_key_disable(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/jump_label.h", 329, 9, "%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (atomic_read(&key->enabled) != 1) {
  ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(atomic_read(&key->enabled) != 0); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/jump_label.h", 332, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
  return;
 }
 atomic_set(&key->enabled, 0);
}
# 358 "./include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 412 "./include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 2 "./include/linux/static_key.h" 2
# 13 "./include/linux/tracepoint-defs.h" 2

struct static_call_key;

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 struct static_call_key *static_call_key;
 void *static_call_tramp;
 void *iterator;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};




typedef struct tracepoint * const tracepoint_ptr_t;


struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 9 "./include/linux/mmap_lock.h" 2





extern struct tracepoint __tracepoint_mmap_lock_start_locking;
extern struct tracepoint __tracepoint_mmap_lock_acquire_returned;
extern struct tracepoint __tracepoint_mmap_lock_released;



void __mmap_lock_do_trace_start_locking(struct mm_struct *mm, bool write);
void __mmap_lock_do_trace_acquire_returned(struct mm_struct *mm, bool write,
        bool success);
void __mmap_lock_do_trace_released(struct mm_struct *mm, bool write);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_start_locking(struct mm_struct *mm,
         bool write)
{
 if (static_key_false(&(__tracepoint_mmap_lock_start_locking).key))
  __mmap_lock_do_trace_start_locking(mm, write);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_acquire_returned(struct mm_struct *mm,
            bool write, bool success)
{
 if (static_key_false(&(__tracepoint_mmap_lock_acquire_returned).key))
  __mmap_lock_do_trace_acquire_returned(mm, write, success);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_released(struct mm_struct *mm, bool write)
{
 if (static_key_false(&(__tracepoint_mmap_lock_released).key))
  __mmap_lock_do_trace_released(mm, write);
}
# 63 "./include/linux/mmap_lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_init_lock(struct mm_struct *mm)
{
 do { static struct lock_class_key __key; __init_rwsem((&mm->mmap_lock), "&mm->mmap_lock", &__key); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_lock_nested(struct mm_struct *mm, int subclass)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_write_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_write_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, true, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_unlock(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, true);
 up_write(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_downgrade(struct mm_struct *mm)
{
 __mmap_lock_trace_acquire_returned(mm, false, true);
 downgrade_write(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, false);
 down_read(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_read_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_read_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, false, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_unlock(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, false);
 up_read(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_unlock_non_owner(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, false);
 up_read(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_assert_locked(struct mm_struct *mm)
{
 do { (void)(&mm->mmap_lock); } while (0);
 ((void)(sizeof(( long)(!rwsem_is_locked(&mm->mmap_lock)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_assert_write_locked(struct mm_struct *mm)
{
 do { (void)(&mm->mmap_lock); } while (0);
 ((void)(sizeof(( long)(!rwsem_is_locked(&mm->mmap_lock)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_lock_is_contended(struct mm_struct *mm)
{
 return rwsem_is_contended(&mm->mmap_lock);
}
# 19 "./include/linux/mm.h" 2
# 1 "./include/linux/range.h" 1





struct range {
 u64 start;
 u64 end;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 range_len(const struct range *range)
{
 return range->end - range->start + 1;
}

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 20 "./include/linux/mm.h" 2

# 1 "./include/linux/percpu-refcount.h" 1
# 59 "./include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {







 PERCPU_REF_INIT_ATOMIC = 1 << 0,






 PERCPU_REF_INIT_DEAD = 1 << 1,




 PERCPU_REF_ALLOW_REINIT = 1 << 2,
};

struct percpu_ref_data {
 atomic_long_t count;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 bool allow_reinit:1;
 struct callback_head rcu;
 struct percpu_ref *ref;
};

struct percpu_ref {




 unsigned long percpu_count_ptr;







 struct percpu_ref_data *data;
};

int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_resurrect(struct percpu_ref *ref);
void percpu_ref_reinit(struct percpu_ref *ref);
bool percpu_ref_is_zero(struct percpu_ref *ref);
# 147 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 174 "./include/linux/percpu-refcount.h"
 percpu_ptr = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_224(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ref->percpu_count_ptr) == sizeof(char) || sizeof(ref->percpu_count_ptr) == sizeof(short) || sizeof(ref->percpu_count_ptr) == sizeof(int) || sizeof(ref->percpu_count_ptr) == sizeof(long)) || sizeof(ref->percpu_count_ptr) == sizeof(long long))) __compiletime_assert_224(); } while (0); (*(const volatile typeof( _Generic((ref->percpu_count_ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ref->percpu_count_ptr))) *)&(ref->percpu_count_ptr)); });







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 198 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->data->count);

 rcu_read_unlock();
}
# 220 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 235 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_many(struct percpu_ref *ref,
       unsigned long nr)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic_long_add_unless(&ref->data->count, nr, 0);
 }

 rcu_read_unlock();

 return ret;
}
# 264 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 return percpu_ref_tryget_many(ref, 1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_live_rcu(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!rcu_read_lock_held()); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/percpu-refcount.h", 280, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });

 if (__builtin_expect(!!(__ref_is_percpu(ref, &percpu_count)), 1)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic_long_inc_not_zero(&ref->data->count);
 }
 return ret;
}
# 306 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 bool ret = false;

 rcu_read_lock();
 ret = percpu_ref_tryget_live_rcu(ref);
 rcu_read_unlock();
 return ret;
}
# 326 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->data->count)), 0))
  ref->data->release(ref);

 rcu_read_unlock();
}
# 349 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 363 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 22 "./include/linux/mm.h" 2
# 1 "./include/linux/bit_spinlock.h" 1
# 16 "./include/linux/bit_spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
  do {
   __sync();
  } while (arch_test_bit(bitnum, addr));
  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 }

 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return arch_test_bit(bitnum, addr);





}
# 23 "./include/linux/mm.h" 2
# 1 "./include/linux/shrinker.h" 1
# 12 "./include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "./include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};
# 91 "./include/linux/shrinker.h"
extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
extern void synchronize_shrinkers(void);
# 24 "./include/linux/mm.h" 2

# 1 "./include/linux/page_ext.h" 1





# 1 "./include/linux/stacktrace.h" 1







struct task_struct;
struct pt_regs;


void stack_trace_print(const unsigned long *trace, unsigned int nr_entries,
         int spaces);
int stack_trace_snprint(char *buf, size_t size, const unsigned long *entries,
   unsigned int nr_entries, int spaces);
unsigned int stack_trace_save(unsigned long *store, unsigned int size,
         unsigned int skipnr);
unsigned int stack_trace_save_tsk(struct task_struct *task,
      unsigned long *store, unsigned int size,
      unsigned int skipnr);
unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
       unsigned int size, unsigned int skipnr);
unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries);
# 81 "./include/linux/stacktrace.h"
struct stack_trace {
 unsigned int nr_entries, max_entries;
 unsigned long *entries;
 unsigned int skip;
};

extern void save_stack_trace(struct stack_trace *trace);
extern void save_stack_trace_regs(struct pt_regs *regs,
      struct stack_trace *trace);
extern void save_stack_trace_tsk(struct task_struct *tsk,
    struct stack_trace *trace);
extern int save_stack_trace_tsk_reliable(struct task_struct *tsk,
      struct stack_trace *trace);
extern void save_stack_trace_user(struct stack_trace *trace);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_trace_save_tsk_reliable(struct task_struct *tsk,
      unsigned long *store,
      unsigned int size)
{
 return -89;
}
# 7 "./include/linux/page_ext.h" 2
# 1 "./include/linux/stackdepot.h" 1
# 16 "./include/linux/stackdepot.h"
typedef u32 depot_stack_handle_t;

depot_stack_handle_t __stack_depot_save(unsigned long *entries,
     unsigned int nr_entries,
     gfp_t gfp_flags, bool can_alloc);

depot_stack_handle_t stack_depot_save(unsigned long *entries,
          unsigned int nr_entries, gfp_t gfp_flags);

unsigned int stack_depot_fetch(depot_stack_handle_t handle,
          unsigned long **entries);

int stack_depot_snprint(depot_stack_handle_t handle, char *buf, size_t size,
         int spaces);

void stack_depot_print(depot_stack_handle_t stack);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_depot_init(void)
{
 return 0;
}
# 8 "./include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 68 "./include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page_ext *lookup_page_ext(const struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem_late(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem(void)
{
}
# 26 "./include/linux/mm.h" 2


# 1 "./include/linux/page_ref.h" 1
# 10 "./include/linux/page_ref.h"
extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 41 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_count(const struct page *page)
{
 return atomic_read(&page->_refcount);
}
# 87 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_count(const struct folio *folio)
{
 return page_ref_count(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_count(const struct page *page)
{
 return folio_ref_count((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_count(struct folio *folio, int v)
{
 set_page_count(&folio->page, v);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_add(struct folio *folio, int nr)
{
 page_ref_add(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_sub(struct folio *folio, int nr)
{
 page_ref_sub(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_return(struct page *page, int nr)
{
 int ret = atomic_sub_return(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_sub_return(struct folio *folio, int nr)
{
 return page_ref_sub_return(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_inc(struct folio *folio)
{
 page_ref_inc(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_dec(struct folio *folio)
{
 page_ref_dec(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_sub_and_test(struct folio *folio, int nr)
{
 return page_ref_sub_and_test(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_inc_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_inc_return(struct folio *folio)
{
 return page_ref_inc_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_dec_and_test(struct folio *folio)
{
 return page_ref_dec_and_test(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_dec_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_dec_return(struct folio *folio)
{
 return page_ref_dec_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_ref_add_unless(struct page *page, int nr, int u)
{
 bool ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_ref_add_unless(struct folio *folio, int nr, int u)
{
 return page_ref_add_unless(&folio->page, nr, u);
}
# 261 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_try_get(struct folio *folio)
{
 return folio_ref_add_unless(folio, 1, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_ref_try_add_rcu(struct folio *folio, int count)
{
# 280 "./include/linux/page_ref.h"
 if (__builtin_expect(!!(!folio_ref_add_unless(folio, count, 0)), 0)) {

  return false;
 }

 return true;
}
# 311 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_try_get_rcu(struct folio *folio)
{
 return folio_ref_try_add_rcu(folio, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_freeze(struct folio *folio, int count)
{
 return page_ref_freeze(&folio->page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_unfreeze(struct page *page, int count)
{
 ((void)(sizeof(( long)(page_count(page) != 0))));
 ((void)(sizeof(( long)(count == 0))));

 atomic_set_release(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_unfreeze(struct folio *folio, int count)
{
 page_ref_unfreeze(&folio->page, count);
}
# 29 "./include/linux/mm.h" 2
# 1 "./include/linux/memremap.h" 1




# 1 "./include/linux/ioport.h" 1
# 21 "./include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 134 "./include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
 IORES_DESC_SOFT_RESERVED = 8,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 185 "./include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return r1->start <= r2->end && r1->end >= r2->start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
resource_intersection(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) > (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x225 = (r1->start); typeof(r2->start) __UNIQUE_ID___y226 = (r2->start); ((__UNIQUE_ID___x225) > (__UNIQUE_ID___y226) ? (__UNIQUE_ID___x225) : (__UNIQUE_ID___y226)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) < (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x227 = (r1->end); typeof(r2->end) __UNIQUE_ID___y228 = (r2->end); ((__UNIQUE_ID___x227) < (__UNIQUE_ID___y228) ? (__UNIQUE_ID___x227) : (__UNIQUE_ID___y228)); }));
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
resource_union(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) < (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x229 = (r1->start); typeof(r2->start) __UNIQUE_ID___y230 = (r2->start); ((__UNIQUE_ID___x229) < (__UNIQUE_ID___y230) ? (__UNIQUE_ID___x229) : (__UNIQUE_ID___y230)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) > (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x231 = (r1->end); typeof(r2->end) __UNIQUE_ID___y232 = (r2->end); ((__UNIQUE_ID___x231) > (__UNIQUE_ID___y232) ? (__UNIQUE_ID___x231) : (__UNIQUE_ID___y232)); }));
 return true;
}
# 269 "./include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);
# 288 "./include/linux/ioport.h"
struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
struct resource *request_free_mem_region(struct resource *base,
  unsigned long size, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqresource_disabled(struct resource *res, u32 irq)
{
 res->start = irq;
 res->end = irq;
 res->flags |= 0x00000400 | 0x10000000 | 0x20000000;
}

extern struct address_space *iomem_get_mapping(void);
# 6 "./include/linux/memremap.h" 2


struct resource;
struct device;
# 19 "./include/linux/memremap.h"
struct vmem_altmap {
 unsigned long base_pfn;
 const unsigned long end_pfn;
 const unsigned long reserve;
 unsigned long free;
 unsigned long align;
 unsigned long alloc;
};
# 59 "./include/linux/memremap.h"
enum memory_type {

 MEMORY_DEVICE_PRIVATE = 1,
 MEMORY_DEVICE_FS_DAX,
 MEMORY_DEVICE_GENERIC,
 MEMORY_DEVICE_PCI_P2PDMA,
};

struct dev_pagemap_ops {





 void (*page_free)(struct page *page);




 void (*kill)(struct dev_pagemap *pgmap);




 void (*cleanup)(struct dev_pagemap *pgmap);





 vm_fault_t (*migrate_to_ram)(struct vm_fault *vmf);
};
# 110 "./include/linux/memremap.h"
struct dev_pagemap {
 struct vmem_altmap altmap;
 struct percpu_ref *ref;
 struct percpu_ref internal_ref;
 struct completion done;
 enum memory_type type;
 unsigned int flags;
 const struct dev_pagemap_ops *ops;
 void *owner;
 int nr_range;
 union {
  struct range range;
  struct range ranges[0];
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vmem_altmap *pgmap_altmap(struct dev_pagemap *pgmap)
{
 if (pgmap->flags & (1 << 0))
  return &pgmap->altmap;
 return ((void *)0);
}
# 146 "./include/linux/memremap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_memremap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{





 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(1); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/memremap.h", 154, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 return ERR_PTR(-6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void devm_memunmap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dev_pagemap *get_dev_pagemap(unsigned long pfn,
  struct dev_pagemap *pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgmap_pfn_valid(struct dev_pagemap *pgmap, unsigned long pfn)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmem_altmap_free(struct vmem_altmap *altmap,
  unsigned long nr_pfns)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memremap_compat_align(void)
{
 return ((1UL) << 14);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_dev_pagemap(struct dev_pagemap *pgmap)
{
 if (pgmap)
  percpu_ref_put(pgmap->ref);
}
# 30 "./include/linux/mm.h" 2
# 1 "./include/linux/overflow.h" 1
# 49 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
{
 return __builtin_expect(!!(overflow), 0);
}
# 131 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 153 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 31 "./include/linux/mm.h" 2


# 1 "./include/linux/pgtable.h" 1





# 1 "./arch/mips/include/asm/pgtable.h" 1
# 17 "./arch/mips/include/asm/pgtable.h"
# 1 "./arch/mips/include/asm/pgtable-64.h" 1
# 18 "./arch/mips/include/asm/pgtable-64.h"
# 1 "./arch/mips/include/asm/fixmap.h" 1
# 48 "./arch/mips/include/asm/fixmap.h"
enum fixed_addresses {

 FIX_CMAP_BEGIN,
 FIX_CMAP_END = FIX_CMAP_BEGIN + (8 * 2),





 __end_of_fixed_addresses
};
# 70 "./arch/mips/include/asm/fixmap.h"
# 1 "./include/asm-generic/fixmap.h" 1
# 30 "./include/asm-generic/fixmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_233(void) __attribute__((__error__("BUILD_BUG_ON failed: " "idx >= __end_of_fixed_addresses"))); if (!(!(idx >= __end_of_fixed_addresses))) __compiletime_assert_233(); } while (0);
 return (((unsigned long)(long)(int)0xfffe0000) - ((idx) << 14));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 __BUG_ON((unsigned long)(vaddr >= ((unsigned long)(long)(int)0xfffe0000) || vaddr < (((unsigned long)(long)(int)0xfffe0000) - (__end_of_fixed_addresses << 14))));
 return ((((unsigned long)(long)(int)0xfffe0000) - ((vaddr)&(~((1 << 14) - 1)))) >> 14);
}
# 71 "./arch/mips/include/asm/fixmap.h" 2




extern void fixrange_init(unsigned long start, unsigned long end,
 pgd_t *pgd_base);
# 19 "./arch/mips/include/asm/pgtable-64.h" 2




# 1 "./include/asm-generic/pgtable-nopud.h" 1






# 1 "./include/asm-generic/pgtable-nop4d.h" 1








typedef struct { pgd_t pgd; } p4d_t;
# 21 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgd_clear(pgd_t *pgd) { }
# 35 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 return (p4d_t *)pgd;
}
# 8 "./include/asm-generic/pgtable-nopud.h" 2








typedef struct { p4d_t p4d; } pud_t;
# 28 "./include/asm-generic/pgtable-nopud.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none(p4d_t p4d) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_bad(p4d_t p4d) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_present(p4d_t p4d) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void p4d_clear(p4d_t *p4d) { }
# 42 "./include/asm-generic/pgtable-nopud.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_offset(p4d_t *p4d, unsigned long address)
{
 return (pud_t *)p4d;
}
# 24 "./arch/mips/include/asm/pgtable-64.h" 2
# 172 "./arch/mips/include/asm/pgtable-64.h"
extern pte_t invalid_pte_table[((((1UL) << 14) << 0) / sizeof(pte_t))];
# 234 "./arch/mips/include/asm/pgtable-64.h"
typedef struct { unsigned long pmd; } pmd_t;




extern pmd_t invalid_pmd_table[((((1UL) << 14) << 0) / sizeof(pmd_t))];





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none(pmd_t pmd)
{
 return ((pmd).pmd) == (unsigned long) invalid_pte_table;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_bad(pmd_t pmd)
{






 if (__builtin_expect(!!(((pmd).pmd) & ~(~((1 << 14) - 1))), 0))
  return 1;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_present(pmd_t pmd)
{





 return ((pmd).pmd) != (unsigned long) invalid_pte_table;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_clear(pmd_t *pmdp)
{
 ((*pmdp).pmd) = ((unsigned long) invalid_pte_table);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none(pud_t pud)
{
 return ((((((pud).p4d).pgd).pgd))) == (unsigned long) invalid_pmd_table;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_bad(pud_t pud)
{
 return ((((((pud).p4d).pgd).pgd))) & ~(~((1 << 14) - 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_present(pud_t pud)
{
 return ((((((pud).p4d).pgd).pgd))) != (unsigned long) invalid_pmd_table;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pud_clear(pud_t *pudp)
{
 ((((((*pudp).p4d).pgd).pgd))) = ((unsigned long) invalid_pmd_table);
}
# 316 "./arch/mips/include/asm/pgtable-64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pud_pgtable(pud_t pud)
{
 return (pmd_t *)((((((pud).p4d).pgd).pgd)));
}
# 328 "./arch/mips/include/asm/pgtable-64.h"
extern void pgd_init(unsigned long page);
extern void pud_init(unsigned long page, unsigned long pagetable);
extern void pmd_init(unsigned long page, unsigned long pagetable);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t mk_swap_pte(unsigned long type, unsigned long offset)
{ pte_t pte; ((pte).pte) = (type << 16) | (offset << 24); return pte; }
# 18 "./arch/mips/include/asm/pgtable.h" 2







struct mm_struct;
struct vm_area_struct;
# 66 "./arch/mips/include/asm/pgtable.h"
extern unsigned long _page_cachable_default;
extern void __update_cache(unsigned long address, pte_t pte);






extern unsigned long empty_zero_page;
extern unsigned long zero_page_mask;





extern void paging_init(void);
# 125 "./arch/mips/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pteval);
# 191 "./arch/mips/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte(pte_t *ptep, pte_t pteval)
{
 *ptep = pteval;

 if (((pteval).pte) & (1 << _PAGE_GLOBAL_SHIFT)) {
  pte_t *buddy = ((pte_t *)((unsigned long)(ptep) ^ sizeof(pte_t)));





  ({ typeof(&buddy->pte) __ai_ptr = (&buddy->pte); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_234(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(*(__ai_ptr)) != 8"))); if (!(!(sizeof(*(__ai_ptr)) != 8))) __compiletime_assert_234(); } while (0); ({ __typeof__(*((__ai_ptr))) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = ((__typeof__(*(((__ai_ptr))))) __cmpxchg((((__ai_ptr))), (unsigned long)(__typeof__(*(((__ai_ptr)))))(((0))), (unsigned long)(__typeof__(*(((__ai_ptr)))))((((1 << _PAGE_GLOBAL_SHIFT)))), sizeof(*(((__ai_ptr)))))); if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res; }); }); });



 }

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear(struct mm_struct *mm, unsigned long addr, pte_t *ptep)
{
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);


 if (((*((pte_t *)((unsigned long)(ptep) ^ sizeof(pte_t)))).pte) & (1 << _PAGE_GLOBAL_SHIFT))
  set_pte_at(mm, addr, ptep, ((pte_t) { ((1 << _PAGE_GLOBAL_SHIFT)) } ));
 else

  set_pte_at(mm, addr, ptep, ((pte_t) { (0) } ));
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pteval)
{

 if (!(((pteval).pte) & (1 << _PAGE_PRESENT_SHIFT)))
  goto cache_sync_done;

 if ((((*ptep).pte) & (1 << _PAGE_PRESENT_SHIFT)) && (((unsigned long)((*ptep).pte >> (14 - 12 + _CACHE_SHIFT + 3))) == ((unsigned long)((pteval).pte >> (14 - 12 + _CACHE_SHIFT + 3)))))
  goto cache_sync_done;

 __update_cache(addr, pteval);
cache_sync_done:
 set_pte(ptep, pteval);
}
# 261 "./arch/mips/include/asm/pgtable.h"
extern pgd_t swapper_pg_dir[];
# 280 "./arch/mips/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_special(pte_t pte)
{
 return ((pte).pte) & (1 << _PAGE_SPECIAL_SHIFT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkspecial(pte_t pte)
{
 ((pte).pte) |= (1 << _PAGE_SPECIAL_SHIFT);
 return pte;
}
# 362 "./arch/mips/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_write(pte_t pte) { return ((pte).pte) & (1 << _PAGE_WRITE_SHIFT); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_dirty(pte_t pte) { return ((pte).pte) & (1 << _PAGE_MODIFIED_SHIFT); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_young(pte_t pte) { return ((pte).pte) & (1 << _PAGE_ACCESSED_SHIFT); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_wrprotect(pte_t pte)
{
 ((pte).pte) &= ~((1 << _PAGE_WRITE_SHIFT) | (1 << _PAGE_DIRTY_SHIFT));
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkclean(pte_t pte)
{
 ((pte).pte) &= ~((1 << _PAGE_MODIFIED_SHIFT) | (1 << _PAGE_DIRTY_SHIFT));
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkold(pte_t pte)
{
 ((pte).pte) &= ~((1 << _PAGE_ACCESSED_SHIFT) | (1 << _PAGE_VALID_SHIFT));
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkwrite(pte_t pte)
{
 ((pte).pte) |= (1 << _PAGE_WRITE_SHIFT);
 if (((pte).pte) & (1 << _PAGE_MODIFIED_SHIFT))
  ((pte).pte) |= (1 << _PAGE_DIRTY_SHIFT);
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdirty(pte_t pte)
{
 ((pte).pte) |= (1 << _PAGE_MODIFIED_SHIFT) | 0;
 if (((pte).pte) & (1 << _PAGE_WRITE_SHIFT))
  ((pte).pte) |= (1 << _PAGE_DIRTY_SHIFT);
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkyoung(pte_t pte)
{
 ((pte).pte) |= (1 << _PAGE_ACCESSED_SHIFT);
 if (!(((pte).pte) & (1 << _PAGE_NO_READ_SHIFT)))
  ((pte).pte) |= (1 << _PAGE_VALID_SHIFT);
 return pte;
}
# 472 "./arch/mips/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_noncached(pgprot_t _prot)
{
 unsigned long prot = ((_prot).pgprot);

 prot = (prot & ~(7 << _CACHE_SHIFT)) | (2<<_CACHE_SHIFT);

 return ((pgprot_t) { (prot) } );
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_writecombine(pgprot_t _prot)
{
 unsigned long prot = ((_prot).pgprot);


 prot = (prot & ~(7 << _CACHE_SHIFT)) | cpu_data[0].writecombine;

 return ((pgprot_t) { (prot) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_fix_spurious_fault(struct vm_area_struct *vma,
      unsigned long address)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_same(pte_t pte_a, pte_t pte_b)
{
 return ((pte_a).pte) == ((pte_b).pte);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty)
{
 if (!pte_same(*ptep, entry))
  set_pte_at(vma->vm_mm, address, ptep, entry);




 return true;
}
# 543 "./arch/mips/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 ((pte).pte) &= ((1 << _PAGE_ACCESSED_SHIFT) | (1 << _PAGE_MODIFIED_SHIFT) | 0 | (~((1 << ((14 - 12 + _CACHE_SHIFT + 3))) - 1)) | (7 << _CACHE_SHIFT));
 ((pte).pte) |= ((newprot).pgprot) & ~((1 << _PAGE_ACCESSED_SHIFT) | (1 << _PAGE_MODIFIED_SHIFT) | 0 | (~((1 << ((14 - 12 + _CACHE_SHIFT + 3))) - 1)) | (7 << _CACHE_SHIFT));
 if ((((pte).pte) & (1 << _PAGE_ACCESSED_SHIFT)) && !(((pte).pte) & (1 << _PAGE_NO_READ_SHIFT)))
  ((pte).pte) |= (1 << _PAGE_VALID_SHIFT);
 return pte;
}



extern void __update_tlb(struct vm_area_struct *vma, unsigned long address,
 pte_t pte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache(struct vm_area_struct *vma,
 unsigned long address, pte_t *ptep)
{
 pte_t pte = *ptep;
 __update_tlb(vma, address, pte);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
 unsigned long address, pmd_t *pmdp)
{
 pte_t pte = *(pte_t *)pmdp;

 __update_tlb(vma, address, pte);
}
# 7 "./include/linux/pgtable.h" 2







# 1 "./include/asm-generic/pgtable_uffd.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pte_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pmd_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pmd_t pmd_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pmd_t pmd_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_swp_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pte_swp_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_swp_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_swp_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}
# 15 "./include/linux/pgtable.h" 2
# 61 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_index(unsigned long address)
{
 return (address >> 14) & (((((1UL) << 14) << 0) / sizeof(pte_t)) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_index(unsigned long address)
{
 return (address >> (14 + (14 + 0 - 3))) & (((((1UL) << 14) << 0) / sizeof(pmd_t)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pud_index(unsigned long address)
{
 return (address >> ((14 + (14 + 0 - 3)) + (14 + 0 - 3))) & (1 - 1);
}
# 88 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)((*pmd).pmd) + pte_index(address);
}
# 107 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return pud_pgtable(*pud) + pmd_index(address);
}
# 122 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
{
 return (pgd + (((address) >> ((14 + (14 + 0 - 3)) + (14 + 0 - 3))) & (((((1UL) << 14) << 0) / sizeof(pgd_t)) - 1)));
};
# 149 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_off(struct mm_struct *mm, unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((mm)->pgd, (va)), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_off_k(unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((&init_mm)->pgd, ((va))), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *virt_to_kpte(unsigned long vaddr)
{
 pmd_t *pmd = pmd_off_k(vaddr);

 return pmd_none(*pmd) ? ((void *)0) : pte_offset_kernel(pmd, vaddr);
}
# 181 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_235(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_235(); } while (0);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pudp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pud_t *pudp,
     pud_t entry, int dirty)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_236(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_236(); } while (0);
 return 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep)
{
 pte_t pte = *ptep;
 int r = 1;
 if (!pte_young(pte))
  r = 0;
 else
  set_pte_at(vma->vm_mm, address, ptep, pte_mkold(pte));
 return r;
}
# 228 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_237(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_237(); } while (0);
 return 0;
}




int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);
# 252 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_238(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_238(); } while (0);
 return 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep)
{
 pte_t pte = *ptep;
 pte_clear(mm, address, ptep);
 return pte;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get(pte_t *ptep)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_239(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_239(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
}
# 328 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_lockless(pte_t *ptep)
{
 return ptep_get(ptep);
}
# 379 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pte_t *ptep,
         int full)
{
 pte_t pte;
 pte = ptep_get_and_clear(mm, address, ptep);
 return pte;
}
# 412 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);



struct mm_struct;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_set_wrprotect(struct mm_struct *mm, unsigned long address, pte_t *ptep)
{
 pte_t old_pte = *ptep;
 set_pte_at(mm, address, ptep, pte_wrprotect(old_pte));
}
# 494 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pmd_t *pmdp)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_240(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_240(); } while (0);
}
# 511 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_241(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_241(); } while (0);
}
# 524 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address,
     pmd_t *pmdp)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_242(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_242(); } while (0);
 return *pmdp;
}





extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 560 "./include/linux/pgtable.h"
extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);
# 578 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_unused(pte_t pte)
{
 return 0;
}
# 610 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return ((pmd_a).pmd) == ((pmd_b).pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_same(pud_t pud_a, pud_t pud_b)
{
 return ((((((pud_a).p4d).pgd).pgd))) == ((((((pud_b).p4d).pgd).pgd)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_same(p4d_t p4d_a, p4d_t p4d_b)
{
 return ((((p4d_a).pgd).pgd)) == ((((p4d_b).pgd).pgd));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
{
 return ((pgd_a).pgd) == ((pgd_b).pgd);
}
# 682 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_do_swap_page(struct mm_struct *mm,
         struct vm_area_struct *vma,
         unsigned long addr,
         pte_t pte, pte_t oldpte)
{

}
# 700 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_unmap_one(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long addr,
      pte_t orig_pte)
{
 return 0;
}
# 715 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_prepare_to_swap(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_page(int type, unsigned long offset)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_area(int type)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_restore(swp_entry_t entry, struct page *page)
{
}
# 790 "./include/linux/pgtable.h"
void pgd_clear_bad(pgd_t *);
# 804 "./include/linux/pgtable.h"
void pmd_clear_bad(pmd_t *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none_or_clear_bad(p4d_t *p4d)
{
 if (p4d_none(*p4d))
  return 1;
 if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(vma->vm_mm, addr, ptep);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ptep_modify_prot_commit(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 888 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_modify_prot_start(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(vma, addr, ptep);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_modify_prot_commit(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep, pte_t old_pte, pte_t pte)
{
 __ptep_modify_prot_commit(vma, addr, ptep, pte);
}
# 940 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 if (((oldprot).pgprot) == ((pgprot_noncached(oldprot)).pgprot))
  newprot = pgprot_noncached(newprot);
 if (((oldprot).pgprot) == ((pgprot_writecombine(oldprot)).pgprot))
  newprot = pgprot_writecombine(newprot);
 if (((oldprot).pgprot) == ((pgprot_noncached(oldprot)).pgprot))
  newprot = pgprot_noncached(newprot);
 return newprot;
}
# 1015 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_swp_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 1087 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn)
{
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_copy(struct vm_area_struct *vma)
{
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn(struct vm_area_struct *vma,
          unsigned long pfn, unsigned long size)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn_moved(struct vm_area_struct *vma)
{
}
# 1142 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 unsigned long offset_from_zero_pfn = pfn - zero_pfn;
 return offset_from_zero_pfn <= (zero_page_mask >> 14);
}
# 1179 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_huge(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_write(pmd_t pmd)
{
 BUG();
 return 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_write(pud_t pud)
{
 BUG();
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_devmap(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_devmap(pud_t pud)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_trans_huge_or_dev_or_clear_bad(pud_t *pud)
{
 pud_t pudval = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_243(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pud) == sizeof(char) || sizeof(*pud) == sizeof(short) || sizeof(*pud) == sizeof(int) || sizeof(*pud) == sizeof(long)) || sizeof(*pud) == sizeof(long long))) __compiletime_assert_243(); } while (0); (*(const volatile typeof( _Generic((*pud), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*pud))) *)&(*pud)); });

 if (pud_none(pudval) || pud_trans_huge(pudval) || pud_devmap(pudval))
  return 1;
 if (__builtin_expect(!!(pud_bad(pudval)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_unstable(pud_t *pud)
{




 return 0;

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 1285 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 1320 "./include/linux/pgtable.h"
 if (pmd_none(pmdval) || pmd_trans_huge(pmdval) ||
  (0 && !pmd_present(pmdval)))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 1342 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_unstable(pmd_t *pmd)
{



 return 0;

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_devmap_trans_unstable(pmd_t *pmd)
{
 return pmd_devmap(*pmd) || pmd_trans_unstable(pmd);
}
# 1371 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_protnone(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_protnone(pmd_t pmd)
{
 return 0;
}
# 1408 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_clear_huge(p4d_t *p4d)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_clear_huge(pud_t *pud)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_clear_huge(pmd_t *pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_free_pud_page(p4d_t *p4d, unsigned long addr)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_free_pmd_page(pud_t *pud, unsigned long addr)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_free_pte_page(pmd_t *pmd, unsigned long addr)
{
 return 0;
}
# 1465 "./include/linux/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_espfix_bsp(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pgtable_cache_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_has_pfn_modify_check(void)
{
 return false;
}
# 1526 "./include/linux/pgtable.h"
typedef unsigned int pgtbl_mod_mask;
# 34 "./include/linux/mm.h" 2
# 1 "./include/linux/kasan.h" 1






# 1 "./include/linux/static_key.h" 1
# 8 "./include/linux/kasan.h" 2


struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 70 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_enable_current(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_disable_current(void) {}
# 102 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_enabled(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_hw_tags_enabled(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_alloc_pages(struct page *page,
           unsigned int order, gfp_t flags)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_244(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_244(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_free_pages(struct page *page,
          unsigned int order)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_245(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_245(); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_has_integrated_init(void)
{
 return kasan_hw_tags_enabled();
}
# 311 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) slab_flags_t kasan_never_merge(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_range(const void *address, size_t size) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_pages(struct page *page, unsigned int order,
          bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_pages(struct page *page, unsigned int order,
     bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create_kmalloc(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_slab_free(struct kmem_cache *s, void *object, bool init)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_kfree_large(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_slab_free_mempool(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags, bool init)
{
 return object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
{
 return (void *)ptr;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_byte(const void *address)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_task_stack(struct task_struct *task) {}
# 382 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_record_aux_stack(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_record_aux_stack_noalloc(void *ptr) {}
# 408 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 424 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_sw_tags(void) { }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags_cpu(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags(void) { }
# 448 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_populate_vmalloc(unsigned long start,
     unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_release_vmalloc(unsigned long start,
      unsigned long end,
      unsigned long free_region_start,
      unsigned long free_region_end) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_populate_early_vm_area_shadow(void *start,
             unsigned long size)
{ }
# 482 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_free_shadow(const struct vm_struct *vm) {}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_non_canonical_hook(unsigned long addr) { }
# 35 "./include/linux/mm.h" 2

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct user_struct;
struct pt_regs;

extern int sysctl_page_lock_unfairness;

void init_mm_internals(void);
# 54 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_max_mapnr(unsigned long limit) { }


extern atomic_long_t _totalram_pages;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalram_pages(void)
{
 return (unsigned long)atomic_long_read(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_inc(void)
{
 atomic_long_inc(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_dec(void)
{
 atomic_long_dec(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_add(long count)
{
 atomic_long_add(count, &_totalram_pages);
}

extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));


extern const int mmap_rnd_compat_bits_min;
extern const int mmap_rnd_compat_bits_max;
extern int mmap_rnd_compat_bits __attribute__((__section__(".data..read_mostly")));
# 149 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mm_zero_struct_page(struct page *page)
{
 unsigned long *_pp = (void *)page;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_246(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) & 7"))); if (!(!(sizeof(struct page) & 7))) __compiletime_assert_246(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_247(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) < 56"))); if (!(!(sizeof(struct page) < 56))) __compiletime_assert_247(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_248(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) > 80"))); if (!(!(sizeof(struct page) > 80))) __compiletime_assert_248(); } while (0);

 switch (sizeof(struct page)) {
 case 80:
  _pp[9] = 0;
  __attribute__((__fallthrough__));
 case 72:
  _pp[8] = 0;
  __attribute__((__fallthrough__));
 case 64:
  _pp[7] = 0;
  __attribute__((__fallthrough__));
 case 56:
  _pp[6] = 0;
  _pp[5] = 0;
  _pp[4] = 0;
  _pp[3] = 0;
  _pp[2] = 0;
  _pp[1] = 0;
  _pp[0] = 0;
 }
}
# 201 "./include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
# 231 "./include/linux/mm.h"
void setup_initial_init_mm(void *start_code, void *end_code,
      void *end_data, void *brk);
# 243 "./include/linux/mm.h"
struct vm_area_struct *vm_area_alloc(struct mm_struct *);
struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
void vm_area_free(struct vm_area_struct *);
# 425 "./include/linux/mm.h"
extern pgprot_t protection_map[16];
# 459 "./include/linux/mm.h"
enum fault_flag {
 FAULT_FLAG_WRITE = 1 << 0,
 FAULT_FLAG_MKWRITE = 1 << 1,
 FAULT_FLAG_ALLOW_RETRY = 1 << 2,
 FAULT_FLAG_RETRY_NOWAIT = 1 << 3,
 FAULT_FLAG_KILLABLE = 1 << 4,
 FAULT_FLAG_TRIED = 1 << 5,
 FAULT_FLAG_USER = 1 << 6,
 FAULT_FLAG_REMOTE = 1 << 7,
 FAULT_FLAG_INSTRUCTION = 1 << 8,
 FAULT_FLAG_INTERRUPTIBLE = 1 << 9,
};
# 493 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_flag_allow_retry_first(enum fault_flag flags)
{
 return (flags & FAULT_FLAG_ALLOW_RETRY) &&
     (!(flags & FAULT_FLAG_TRIED));
}
# 521 "./include/linux/mm.h"
struct vm_fault {
 const struct {
  struct vm_area_struct *vma;
  gfp_t gfp_mask;
  unsigned long pgoff;
  unsigned long address;
 };
 enum fault_flag flags;

 pmd_t *pmd;

 pud_t *pud;


 union {
  pte_t orig_pte;
  pmd_t orig_pmd;


 };

 struct page *cow_page;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;






};


enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);

 int (*may_split)(struct vm_area_struct *area, unsigned long addr);
 int (*mremap)(struct vm_area_struct *area);





 int (*mprotect)(struct vm_area_struct *vma, unsigned long start,
   unsigned long end, unsigned long newflags);
 vm_fault_t (*fault)(struct vm_fault *vmf);
 vm_fault_t (*huge_fault)(struct vm_fault *vmf,
   enum page_entry_size pe_size);
 vm_fault_t (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);
 unsigned long (*pagesize)(struct vm_area_struct * area);



 vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);


 vm_fault_t (*pfn_mkwrite)(struct vm_fault *vmf);





 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 625 "./include/linux/mm.h"
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
# 637 "./include/linux/mm.h"
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);






 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
{
 static const struct vm_operations_struct dummy_vm_ops = {};

 memset(vma, 0, sizeof(*vma));
 vma->vm_mm = mm;
 vma->vm_ops = &dummy_vm_ops;
 INIT_LIST_HEAD(&vma->anon_vma_chain);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_set_anonymous(struct vm_area_struct *vma)
{
 vma->vm_ops = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_temporary_stack(struct vm_area_struct *vma)
{
 int maybe_stack = vma->vm_flags & (0x00000100 | 0x00000000);

 if (!maybe_stack)
  return false;

 if ((vma->vm_flags & (0x00010000 | 0x00008000)) ==
      (0x00010000 | 0x00008000))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_foreign(struct vm_area_struct *vma)
{
 if (!(current_thread_info()->task)->mm)
  return true;

 if ((current_thread_info()->task)->mm != vma->vm_mm)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_accessible(struct vm_area_struct *vma)
{
 return vma->vm_flags & (0x00000001 | 0x00000002 | 0x00000004);
}






bool vma_is_shmem(struct vm_area_struct *vma);




int vma_is_stack_for_current(struct vm_area_struct *vma);




struct mmu_gather;
struct inode;

# 1 "./include/linux/huge_mm.h" 1




# 1 "./include/linux/sched/coredump.h" 1
# 17 "./include/linux/sched/coredump.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 6 "./include/linux/huge_mm.h" 2


# 1 "./include/linux/fs.h" 1





# 1 "./include/linux/wait_bit.h" 1
# 10 "./include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "./include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 __asm__ __volatile__("sync" : : :"memory");
 wake_up_bit(word, bit);
}
# 7 "./include/linux/fs.h" 2
# 1 "./include/linux/kdev_t.h" 1




# 1 "./include/uapi/linux/kdev_t.h" 1
# 6 "./include/linux/kdev_t.h" 2
# 24 "./include/linux/kdev_t.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "./include/linux/fs.h" 2
# 1 "./include/linux/dcache.h" 1








# 1 "./include/linux/rculist_bl.h" 1







# 1 "./include/linux/list_bl.h" 1
# 34 "./include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_249(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_249(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }) & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_250(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_250(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))); } while (0); } while (0);


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

                                                    ;


 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_251(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_251(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))); } while (0); } while (0);



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "./include/linux/rculist_bl.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_252(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_252(); } while (0); do { *(volatile typeof((h->first)) *)&((h->first)) = ((typeof(h->first))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_253(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_253(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_254(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)) || sizeof(*&h->first) == sizeof(long long))) __compiletime_assert_254(); } while (0); do { *(volatile typeof(*&h->first) *)&(*&h->first) = ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_255(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_255(); } while (0); (*(const volatile typeof( _Generic(((h->first)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((h->first)))) *)&((h->first))); }); do { } while (0 && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 46 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + 0);
}
# 71 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 10 "./include/linux/dcache.h" 2




# 1 "./include/linux/lockref.h" 1
# 25 "./include/linux/lockref.h"
struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 15 "./include/linux/dcache.h" 2
# 1 "./include/linux/stringhash.h" 1






# 1 "./include/linux/hash.h" 1
# 60 "./include/linux/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "./include/linux/stringhash.h" 2
# 42 "./include/linux/stringhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "./include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "./include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 16 "./include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 48 "./include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;
extern const struct qstr dotdot_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 91 "./include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_spinlock_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << 6))));
# 225 "./include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);

extern struct dentry *d_find_alias_rcu(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(const struct dentry *, char *, int);
extern char *dentry_path(const struct dentry *, char *, int);
# 317 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_flags_negative(unsigned flags)
{
 return (flags & 0x00700000) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 474 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 492 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 524 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 536 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_256(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dentry->d_inode) == sizeof(char) || sizeof(dentry->d_inode) == sizeof(short) || sizeof(dentry->d_inode) == sizeof(int) || sizeof(dentry->d_inode) == sizeof(long)) || sizeof(dentry->d_inode) == sizeof(long long))) __compiletime_assert_256(); } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
}
# 551 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 568 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 599 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "./include/linux/fs.h" 2
# 1 "./include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "./include/linux/fs.h" 2
# 1 "./include/linux/stat.h" 1





# 1 "./arch/mips/include/uapi/asm/stat.h" 1
# 93 "./arch/mips/include/uapi/asm/stat.h"
struct stat {
 unsigned int st_dev;
 unsigned int st_pad0[3];

 unsigned long st_ino;

 mode_t st_mode;
 __u32 st_nlink;

 uid_t st_uid;
 gid_t st_gid;

 unsigned int st_rdev;
 unsigned int st_pad1[3];

 long st_size;





 unsigned int st_atime;
 unsigned int st_atime_nsec;

 unsigned int st_mtime;
 unsigned int st_mtime_nsec;

 unsigned int st_ctime;
 unsigned int st_ctime_nsec;

 unsigned int st_blksize;
 unsigned int st_pad2;

 unsigned long st_blocks;
};
# 7 "./include/linux/stat.h" 2
# 1 "./include/uapi/linux/stat.h" 1
# 56 "./include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "./include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 8 "./include/linux/stat.h" 2
# 22 "./include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 41 "./include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
 u64 mnt_id;
};
# 11 "./include/linux/fs.h" 2


# 1 "./include/linux/list_lru.h" 1
# 15 "./include/linux/list_lru.h"
struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} __attribute__((__aligned__((1 << 6))));

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 int shrinker_id;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "./include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "./include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "./include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "./include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY]))))
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY])))) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "./include/linux/fs.h" 2

# 1 "./include/linux/radix-tree.h" 1
# 21 "./include/linux/radix-tree.h"
# 1 "./include/linux/xarray.h" 1
# 52 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_value(unsigned long v)
{
 ({ int __ret_warn_on = !!((long)v < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/xarray.h", 54, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return (void *)((v << 1) | 1);
}
# 65 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_zero(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
}
# 199 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_err(const void *entry)
{
 return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0);

}
# 217 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 237 "./include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};







typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 294 "./include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 349 "./include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 376 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { spinlock_check(&xa->xa_lock); *(&xa->xa_lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 391 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 416 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (25 + 0)) << ( unsigned)(mark)));
}
# 556 "./include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 583 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 609 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 634 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 658 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 711 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 738 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 767 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 796 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 825 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 854 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 883 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 912 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 945 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 978 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 1011 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1041 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1059 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1077 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1092 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
}
# 1124 "./include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1164 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_257(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((xa->xa_head)) == sizeof(char) || sizeof((xa->xa_head)) == sizeof(short) || sizeof((xa->xa_head)) == sizeof(int) || sizeof((xa->xa_head)) == sizeof(long)) || sizeof((xa->xa_head)) == sizeof(long long))) __compiletime_assert_257(); } while (0); (*(const volatile typeof( _Generic(((xa->xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((xa->xa_head)))) *)&((xa->xa_head))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(xa->xa_head)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_258(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->slots[offset])) == sizeof(char) || sizeof((node->slots[offset])) == sizeof(short) || sizeof((node->slots[offset])) == sizeof(int) || sizeof((node->slots[offset])) == sizeof(long)) || sizeof((node->slots[offset])) == sizeof(long long))) __compiletime_assert_258(); } while (0); (*(const volatile typeof( _Generic(((node->slots[offset])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->slots[offset])))) *)&((node->slots[offset]))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->slots[offset])) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_259(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->parent)) == sizeof(char) || sizeof((node->parent)) == sizeof(short) || sizeof((node->parent)) == sizeof(int) || sizeof((node->parent)) == sizeof(long)) || sizeof((node->parent)) == sizeof(long long))) __compiletime_assert_259(); } while (0); (*(const volatile typeof( _Generic(((node->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->parent)))) *)&((node->parent))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->parent)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->parent)) *)((node->parent))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_sibling(const void *entry)
{
 return 0 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1261 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_retry(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1289 "./include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);

void xa_delete_node(struct xa_node *, xa_update_node_t);
# 1310 "./include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1389 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1469 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1486 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_get_order(struct xarray *xa, unsigned long index)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_split(struct xa_state *xas, void *entry,
  unsigned int order)
{
 xas_store(xas, entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_split_alloc(struct xa_state *xas, void *entry,
  unsigned int order, gfp_t gfp)
{
}
# 1548 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 char offset;

 if (!node)
  return xa_head(xas->xa);
 if (0) {
  offset = (xas->xa_index >> node->shift) & ((1UL << (0 ? 4 : 6)) - 1);
  entry = xa_entry(xas->xa, node, offset);
  if (!xa_is_sibling(entry))
   return entry;
  offset = xa_to_sibling(entry);
 } else {
  offset = xas->xa_offset;
 }
 return xa_entry(xas->xa, node, offset);
}
# 1577 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{






 __BUG_ON((unsigned long)(order > 0));
 xas_set(xas, index);

}
# 1611 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1627 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))), 0))

  return xas_find(xas, max);

 do {
  if (__builtin_expect(!!(xas->xa_index >= max), 0))
   return xas_find(xas, max);
  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 64) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return find_next_bit(addr, (1UL << (0 ? 4 : 6)), offset);
}
# 1684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 unsigned int offset;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return ((void *)0);
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 entry = xa_entry(xas->xa, node, offset);
 if (!entry)
  return xas_find_marked(xas, max, mark);
 return entry;
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1764 "./include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1783 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0))

  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1812 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))

  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 22 "./include/linux/radix-tree.h" 2






struct radix_tree_preload {
 local_lock_t lock;
 unsigned nr;

 struct xa_node *nodes;
};
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct radix_tree_preload) radix_tree_preloads;
# 55 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 86 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == ((void *)0);
}
# 106 "./include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 177 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_260(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*slot)) == sizeof(char) || sizeof((*slot)) == sizeof(short) || sizeof((*slot)) == sizeof(int) || sizeof((*slot)) == sizeof(long)) || sizeof((*slot)) == sizeof(long long))) __compiletime_assert_260(); } while (0); (*(const volatile typeof( _Generic(((*slot)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*slot)))) *)&((*slot))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 191 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0 && (!((lockdep_is_held(treelock))))); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 204 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radix_tree_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock)); (typeof((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); } while (0);
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 280 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 291 "./include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 309 "./include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 322 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 339 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 363 "./include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 397 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 return slot;
}
# 16 "./include/linux/fs.h" 2








# 1 "./include/linux/capability.h" 1
# 16 "./include/linux/capability.h"
# 1 "./include/uapi/linux/capability.h" 1
# 39 "./include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "./include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "./include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
extern bool ns_capable_setid(struct user_namespace *ns, int cap);
# 250 "./include/linux/capability.h"
bool privileged_wrt_inode_uidgid(struct user_namespace *ns,
     struct user_namespace *mnt_userns,
     const struct inode *inode);
bool capable_wrt_inode_uidgid(struct user_namespace *mnt_userns,
         const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool perfmon_capable(void)
{
 return capable(38) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_capable(void)
{
 return capable(39) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool checkpoint_restore_ns_capable(struct user_namespace *ns)
{
 return ns_capable(ns, 40) ||
  ns_capable(ns, 21);
}


int get_vfs_caps_from_disk(struct user_namespace *mnt_userns,
      const struct dentry *dentry,
      struct cpu_vfs_cap_data *cpu_caps);

int cap_convert_nscap(struct user_namespace *mnt_userns, struct dentry *dentry,
        const void **ivalue, size_t size);
# 25 "./include/linux/fs.h" 2
# 1 "./include/linux/semaphore.h" 1
# 15 "./include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "./include/linux/semaphore.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "./include/linux/fs.h" 2
# 1 "./include/linux/fcntl.h" 1





# 1 "./include/uapi/linux/fcntl.h" 1




# 1 "./arch/mips/include/uapi/asm/fcntl.h" 1
# 78 "./arch/mips/include/uapi/asm/fcntl.h"
# 1 "./include/uapi/asm-generic/fcntl.h" 1
# 156 "./include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 200 "./include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 79 "./arch/mips/include/uapi/asm/fcntl.h" 2
# 6 "./include/uapi/linux/fcntl.h" 2
# 1 "./include/uapi/linux/openat2.h" 1
# 19 "./include/uapi/linux/openat2.h"
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 7 "./include/uapi/linux/fcntl.h" 2
# 7 "./include/linux/fcntl.h" 2
# 27 "./include/linux/fs.h" 2



# 1 "./include/linux/migrate_mode.h" 1
# 15 "./include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};

enum migrate_reason {
 MR_COMPACTION,
 MR_MEMORY_FAILURE,
 MR_MEMORY_HOTPLUG,
 MR_SYSCALL,
 MR_MEMPOLICY_MBIND,
 MR_NUMA_MISPLACED,
 MR_CONTIG_RANGE,
 MR_LONGTERM_PIN,
 MR_DEMOTION,
 MR_TYPES
};
# 31 "./include/linux/fs.h" 2


# 1 "./include/linux/percpu-rwsem.h" 1






# 1 "./include/linux/rcuwait.h" 1





# 1 "./include/linux/sched/signal.h" 1





# 1 "./include/linux/signal.h" 1








struct task_struct;


extern int print_fatal_signals;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo(kernel_siginfo_t *to,
    const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*to));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_siginfo(kernel_siginfo_t *info)
{
 memset(info, 0, sizeof(*info));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo_to_external(siginfo_t *to,
         const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*from));
 memset(((char *)to) + sizeof(struct kernel_siginfo), 0,
  (sizeof(struct siginfo) - sizeof(struct kernel_siginfo)));
}

int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);

enum siginfo_layout {
 SIL_KILL,
 SIL_TIMER,
 SIL_POLL,
 SIL_FAULT,
 SIL_FAULT_TRAPNO,
 SIL_FAULT_MCEERR,
 SIL_FAULT_BNDERR,
 SIL_FAULT_PKUERR,
 SIL_FAULT_PERF_EVENT,
 SIL_CHLD,
 SIL_RT,
 SIL_SYS,
};

enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
# 64 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((128 / (sizeof(unsigned long) * 8)) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / (sizeof(unsigned long) * 8)] |= 1UL << (sig % (sizeof(unsigned long) * 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((128 / (sizeof(unsigned long) * 8)) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / (sizeof(unsigned long) * 8)] &= ~(1UL << (sig % (sizeof(unsigned long) * 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((128 / (sizeof(unsigned long) * 8)) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / (sizeof(unsigned long) * 8)] >> (sig % (sizeof(unsigned long) * 8)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigisemptyset(sigset_t *set)
{
 switch ((128 / (sizeof(unsigned long) * 8))) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { __attribute__((__noreturn__)) extern void __compiletime_assert_261(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_261(); } while (0);
  return 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigequalsets(const sigset_t *set1, const sigset_t *set2)
{
 switch ((128 / (sizeof(unsigned long) * 8))) {
 case 4:
  return (set1->sig[3] == set2->sig[3]) &&
   (set1->sig[2] == set2->sig[2]) &&
   (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 2:
  return (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 1:
  return set1->sig[0] == set2->sig[0];
 }
 return 0;
}
# 156 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((128 / (sizeof(unsigned long) * 8))) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_262(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_262(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((128 / (sizeof(unsigned long) * 8))) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_263(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_263(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((128 / (sizeof(unsigned long) * 8))) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_264(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_264(); } while (0); } }
# 186 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signotset(sigset_t *set) { switch ((128 / (sizeof(unsigned long) * 8))) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); __attribute__((__fallthrough__)); case 2: set->sig[1] = (~(set->sig[1])); __attribute__((__fallthrough__)); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_265(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_265(); } while (0); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigemptyset(sigset_t *set)
{
 switch ((128 / (sizeof(unsigned long) * 8))) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigfillset(sigset_t *set)
{
 switch ((128 / (sizeof(unsigned long) * 8))) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((128 / (sizeof(unsigned long) * 8))) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((128 / (sizeof(unsigned long) * 8))-1));
  break;
 case 2: set->sig[1] = 0;
  break;
 case 1: ;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((128 / (sizeof(unsigned long) * 8))) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((128 / (sizeof(unsigned long) * 8))-1));
  break;
 case 2: set->sig[1] = -1;
  break;
 case 1: ;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_signal(unsigned long sig)
{
 return sig <= 128 ? 1 : 0;
}

struct timespec;
struct pt_regs;
enum pid_type;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
    struct task_struct *p, enum pid_type type);
extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
          struct task_struct *p, enum pid_type type);
extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

extern bool get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_kernel_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)3));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

extern bool unhandled_signal(struct task_struct *tsk, int sig);
# 453 "./include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 469 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sigaltstack_size_valid(size_t size) { return true; }



struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 483 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *arch_untagged_si_addr(void *addr,
       unsigned long sig,
       unsigned long si_code)
{
 return addr;
}
# 7 "./include/linux/sched/signal.h" 2

# 1 "./include/linux/sched/jobctl.h" 1






struct task_struct;
# 35 "./include/linux/sched/jobctl.h"
extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
# 9 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/sched/task.h" 1
# 11 "./include/linux/sched/task.h"
# 1 "./include/linux/uaccess.h" 1




# 1 "./include/linux/fault-inject-usercopy.h" 1
# 18 "./include/linux/fault-inject-usercopy.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool should_fail_usercopy(void) { return false; }
# 6 "./include/linux/uaccess.h" 2





# 1 "./arch/mips/include/asm/uaccess.h" 1
# 16 "./arch/mips/include/asm/uaccess.h"
# 1 "./arch/mips/include/asm/asm-eva.h" 1
# 17 "./arch/mips/include/asm/uaccess.h" 2
# 1 "./arch/mips/include/asm/extable.h" 1




struct exception_table_entry
{
 unsigned long insn;
 unsigned long nextinsn;
};

struct pt_regs;
extern int fixup_exception(struct pt_regs *regs);
# 18 "./arch/mips/include/asm/uaccess.h" 2
# 33 "./arch/mips/include/asm/uaccess.h"
extern u64 __ua_limit;
# 79 "./arch/mips/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __access_ok(const void *p, unsigned long size)
{
 unsigned long addr = (unsigned long)p;
 unsigned long end = addr + size - !!size;

 return (__ua_limit & (addr | end | ((__builtin_constant_p(size) && (signed long) (size) > 0) ? 0 : (size)))) == 0;
}
# 236 "./arch/mips/include/asm/uaccess.h"
struct __large_struct { unsigned long buf[100]; };
# 429 "./arch/mips/include/asm/uaccess.h"
extern size_t __raw_copy_from_user(void *__to, const void *__from, size_t __n);
extern size_t __raw_copy_to_user(void *__to, const void *__from, size_t __n);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
raw_copy_from_user(void *to, const void *from, unsigned long n)
{
 register void *__cu_to_r __asm__("$4");
 register const void *__cu_from_r __asm__("$5");
 register long __cu_len_r __asm__("$6");

 __cu_to_r = to;
 __cu_from_r = from;
 __cu_len_r = n;

 __asm__ __volatile__(
  ".set\tnoreorder\n\t"
  "jal\t" "__raw_copy_from_user" "\n\t"
  ".set\tnoat\n\t"
  "daddu" "\t$1, %1, %2\n\t"
  ".set\tat\n\t"
  ".set\treorder"
  : "+r" (__cu_to_r), "+r" (__cu_from_r), "+r" (__cu_len_r)
  :
  : "$8", "$9", "$10", "$11", "$12", "$14", "$15", "$24", "$31",
    "$0", "memory");

 return __cu_len_r;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
raw_copy_to_user(void *to, const void *from, unsigned long n)
{
 register void *__cu_to_r __asm__("$4");
 register const void *__cu_from_r __asm__("$5");
 register long __cu_len_r __asm__("$6");

 __cu_to_r = (to);
 __cu_from_r = (from);
 __cu_len_r = (n);

 __asm__ __volatile__(
  "jal\t" "__raw_copy_to_user" "\n\t"
  : "+r" (__cu_to_r), "+r" (__cu_from_r), "+r" (__cu_len_r)
  :
  : "$8", "$9", "$10", "$11", "$12", "$14", "$15", "$24", "$31",
    "$0", "memory");

 return __cu_len_r;
}




extern __kernel_size_t __bzero(void *addr, __kernel_size_t size);
# 495 "./arch/mips/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __kernel_size_t
__clear_user(void *addr, __kernel_size_t size)
{
 __kernel_size_t res;
# 507 "./arch/mips/include/asm/uaccess.h"
 might_fault();
 __asm__ __volatile__(
  "move\t$4, %1\n\t"
  "move\t$5, $0\n\t"
  "move\t$6, %2\n\t"
  "jal\t" "__bzero" "\n\t"
  "move\t%0, $6"
  : "=r" (res)
  : "r" (addr), "r" (size)
  : "$4", "$5", "$6", "$12", "$13", "$31");

 return res;
}
# 530 "./arch/mips/include/asm/uaccess.h"
extern long __strncpy_from_user_asm(char *__to, const char *__from, long __len);
# 550 "./arch/mips/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
strncpy_from_user(char *__to, const char *__from, long __len)
{
 long res;

 if (!__builtin_expect(!!(__access_ok((__from), (__len))), 1))
  return -14;

 might_fault();
 __asm__ __volatile__(
  "move\t$4, %1\n\t"
  "move\t$5, %2\n\t"
  "move\t$6, %3\n\t"
  "jal\t" "__strncpy_from_user_asm" "\n\t"
  "move\t%0, $2"
  : "=r" (res)
  : "r" (__to), "r" (__from), "r" (__len)
  : "$2", "$3", "$4", "$5", "$6", "$12", "$31", "memory");

 return res;
}

extern long __strnlen_user_asm(const char *s, long n);
# 587 "./arch/mips/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strnlen_user(const char *s, long n)
{
 long res;

 if (!__builtin_expect(!!(__access_ok((s), (1))), 1))
  return 0;

 might_fault();
 __asm__ __volatile__(
  "move\t$4, %1\n\t"
  "move\t$5, %2\n\t"
  "jal\t" "__strnlen_user_asm" "\n\t"
  "move\t%0, $2"
  : "=r" (res)
  : "r" (s), "r" (n)
  : "$2", "$4", "$5", "$12", "$31");

 return res;
}
# 12 "./include/linux/uaccess.h" 2
# 32 "./include/linux/uaccess.h"
typedef struct {

} mm_segment_t;
# 43 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mm_segment_t force_uaccess_begin(void)
{
 return (mm_segment_t) { };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void force_uaccess_end(mm_segment_t oldfs)
{
}
# 98 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}
# 130 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
_copy_from_user(void *to, const void *from, unsigned long n)
{
 unsigned long res = n;
 might_fault();
 if (!should_fail_usercopy() && __builtin_expect(!!(__builtin_expect(!!(__access_ok((from), (n))), 1)), 1)) {
  instrument_copy_from_user(to, from, n);
  res = raw_copy_from_user(to, from, n);
 }
 if (__builtin_expect(!!(res), 0))
  memset(to + (n - res), 0, res);
 return res;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
_copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 if (__builtin_expect(!!(__access_ok((to), (n))), 1)) {
  instrument_copy_to_user(to, from, n);
  n = raw_copy_to_user(to, from, n);
 }
 return n;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_kernel(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_inc(void)
{
 (current_thread_info()->task)->pagefault_disabled++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_dec(void)
{
 (current_thread_info()->task)->pagefault_disabled--;
}
# 234 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 pagefault_disabled_dec();
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pagefault_disabled(void)
{
 return (current_thread_info()->task)->pagefault_disabled != 0;
}
# 276 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic_nocache(void *to, const void *from,
      unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}



extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
# 334 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) int
copy_struct_from_user(void *dst, size_t ksize, const void *src,
        size_t usize)
{
 size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x266 = (ksize); typeof(usize) __UNIQUE_ID___y267 = (usize); ((__UNIQUE_ID___x266) < (__UNIQUE_ID___y267) ? (__UNIQUE_ID___x266) : (__UNIQUE_ID___y267)); }));
 size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x268 = (ksize); typeof(usize) __UNIQUE_ID___y269 = (usize); ((__UNIQUE_ID___x268) > (__UNIQUE_ID___y269) ? (__UNIQUE_ID___x268) : (__UNIQUE_ID___y269)); })) - size;


 if (usize < ksize) {
  memset(dst + size, 0, rest);
 } else if (usize > ksize) {
  int ret = check_zeroed_user(src + size, rest);
  if (ret <= 0)
   return ret ?: -7;
 }

 if (copy_from_user(dst, src, size))
  return -14;
 return 0;
}

bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);

long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_kernel_nofault(void *dst, const void *src, size_t size);

long copy_from_user_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_user_nofault(void *dst, const void *src,
  size_t size);

long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
  long count);

long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
  long count);
long strnlen_user_nofault(const void *unsafe_addr, long count);
# 391 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_access_save(void) { return 0UL; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_access_restore(unsigned long flags) { }
# 12 "./include/linux/sched/task.h" 2

struct task_struct;
struct rusage;
union thread_union;
struct css_set;




struct kernel_clone_args {
 u64 flags;
 int *pidfd;
 int *child_tid;
 int *parent_tid;
 int exit_signal;
 unsigned long stack;
 unsigned long stack_size;
 unsigned long tls;
 pid_t *set_tid;

 size_t set_tid_size;
 int cgroup;
 int io_thread;
 struct cgroup *cgrp;
 struct css_set *cset;
};







extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern int lockdep_tasklist_lock_is_held(void);

extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);

extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_post_fork(struct task_struct *p,
       struct kernel_clone_args *kargs);
extern void sched_dead(struct task_struct *p);

void __attribute__((__noreturn__)) do_task_dead(void);

extern void proc_caches_init(void);

extern void fork_init(void);

extern void release_task(struct task_struct * p);

extern int copy_thread(unsigned long, unsigned long, unsigned long,
         struct task_struct *, unsigned long);

extern void flush_thread(void);


extern void exit_thread(struct task_struct *tsk);





extern void do_group_exit(int);

extern void exit_files(struct task_struct *);
extern void exit_itimers(struct signal_struct *);

extern pid_t kernel_clone(struct kernel_clone_args *kargs);
struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node);
struct task_struct *fork_idle(int);
struct mm_struct *copy_init_mm(void);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
extern long kernel_wait4(pid_t, int *, int, struct rusage *);
int kernel_wait(pid_t pid, int *stat);

extern void free_task(struct task_struct *tsk);



extern void sched_exec(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *get_task_struct(struct task_struct *t)
{
 refcount_inc(&t->usage);
 return t;
}

extern void __put_task_struct(struct task_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct(struct task_struct *t)
{
 if (refcount_dec_and_test(&t->usage))
  __put_task_struct(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct_many(struct task_struct *t, int nr)
{
 if (refcount_sub_and_test(nr, &t->usage))
  __put_task_struct(t);
}

void put_task_struct_rcu_user(struct task_struct *task);
# 136 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{
 *offset = 0;

 *size = (sizeof(struct task_struct)) - __builtin_offsetof(struct task_struct, thread);
}
# 151 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return ((void *)0);
}
# 167 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}
# 10 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/cred.h" 1
# 13 "./include/linux/cred.h"
# 1 "./include/linux/key.h" 1
# 17 "./include/linux/key.h"
# 1 "./include/linux/sysctl.h" 1
# 30 "./include/linux/sysctl.h"
# 1 "./include/uapi/linux/sysctl.h" 1
# 35 "./include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
 NET_IPV4_CONF_ARP_EVICT_NOCARRIER=23,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "./include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
  size_t *lenp, loff_t *ppos);

int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dobool(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dou8vec_minmax(struct ctl_table *table, int write, void *buffer,
   size_t *lenp, loff_t *ppos);
int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
  size_t *, loff_t *);
int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 98 "./include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 116 "./include/linux/sysctl.h"
struct ctl_table {
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header {
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);
void do_sysctl_args(void);

extern int pwrsw_enabled;
extern int unaligned_enabled;
extern int unaligned_dump_stack;
extern int no_unaligned_warning;

extern struct ctl_table sysctl_mount_point[];
extern struct ctl_table random_table[];
extern struct ctl_table firmware_config_table[];
extern struct ctl_table epoll_table[];
# 246 "./include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 18 "./include/linux/key.h" 2


# 1 "./include/linux/assoc_array.h" 1
# 22 "./include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "./include/linux/key.h" 2







typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct net;
# 77 "./include/linux/key.h"
enum key_need_perm {
 KEY_NEED_UNSPECIFIED,
 KEY_NEED_VIEW,
 KEY_NEED_READ,
 KEY_NEED_WRITE,
 KEY_NEED_SEARCH,
 KEY_NEED_LINK,
 KEY_NEED_SETATTR,
 KEY_NEED_UNLINK,
 KEY_SYSADMIN_OVERRIDE,
 KEY_AUTHTOKEN_OVERRIDE,
 KEY_DEFER_PERM_CHECK,
};

struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct key_tag;
struct keyring_list;
struct keyring_name;

struct key_tag {
 struct callback_head rcu;
 refcount_t usage;
 bool removed;
};

struct keyring_index_key {

 unsigned long hash;
 union {
  struct {

   u16 desc_len;
   char desc[sizeof(long) - 2];




  };
  unsigned long x;
 };
 struct key_type *type;
 struct key_tag *domain_tag;
 const char *description;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 147 "./include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 189 "./include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };



 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time64_t expiry;
  time64_t revoked_at;
 };
 time64_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 239 "./include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   unsigned long hash;
   unsigned long len_desc;
   struct key_type *type;
   struct key_tag *domain_tag;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 274 "./include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 294 "./include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);
extern bool key_put_tag(struct key_tag *tag);
extern void key_remove_domain(struct key_tag *domain_tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *__key_get(struct key *key)
{
 refcount_inc(&key->usage);
 return key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key_tag(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag,
       const char *callout_info);

extern struct key *request_key_rcu(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         struct key_tag *domain_tag,
         const void *callout_info,
         size_t callout_len,
         void *aux);
# 340 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info)
{
 return request_key_tag(type, description, ((void *)0), callout_info);
}
# 379 "./include/linux/key.h"
extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_move(struct key *key,
      struct key *from_keyring,
      struct key *to_keyring,
      unsigned int flags);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description,
    bool recurse);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     enum key_need_perm need_perm);
extern void key_free_user_ns(struct user_namespace *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) short key_read_state(const struct key *key)
{

 return ({ typeof( _Generic((*&key->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&key->state))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_270(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)) || sizeof(*&key->state) == sizeof(long long))) __compiletime_assert_270(); } while (0); (*(const volatile typeof( _Generic((*&key->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&key->state))) *)&(*&key->state)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_271(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)))) __compiletime_assert_271(); } while (0); __sync(); (typeof(*&key->state))___p1; });
}
# 457 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 480 "./include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct cred *new_cred);
extern void key_fsgid_changed(struct cred *new_cred);
extern void key_init(void);
# 14 "./include/linux/cred.h" 2



# 1 "./include/linux/sched/user.h" 1






# 1 "./include/linux/percpu_counter.h" 1
# 20 "./include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "./include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);
void percpu_counter_sync(struct percpu_counter *fbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{

 s64 ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_272(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(fbc->count) == sizeof(char) || sizeof(fbc->count) == sizeof(short) || sizeof(fbc->count) == sizeof(int) || sizeof(fbc->count) == sizeof(long)) || sizeof(fbc->count) == sizeof(long long))) __compiletime_assert_272(); } while (0); (*(const volatile typeof( _Generic((fbc->count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (fbc->count))) *)&(fbc->count)); });

 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 181 "./include/linux/percpu_counter.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 8 "./include/linux/sched/user.h" 2

# 1 "./include/linux/ratelimit.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { *(&rs->lock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 256),
     10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  ({ do {} while (0); _printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", (current_thread_info()->task)->comm, rs->missed); });

  rs->missed = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;
# 10 "./include/linux/sched/user.h" 2




struct user_struct {
 refcount_t __count;

 struct percpu_counter epoll_watches;

 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;






 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "./include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[];
} ;
# 40 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 57 "./include/linux/cred.h"
extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
extern int groups_search(const struct group_info *, kgid_t);

extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 110 "./include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) cred_init(void);
extern int set_cred_ucounts(struct cred *);
# 204 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds(const struct cred *cred)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_process_creds(void)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 229 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 248 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return ((void *)0);
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return ((void *)0);
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return cred;
}
# 281 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  validate_creds(cred);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 393 "./include/linux/cred.h"
extern struct user_namespace init_user_ns;
# 11 "./include/linux/sched/signal.h" 2



# 1 "./arch/mips/include/asm/ptrace.h" 1
# 16 "./arch/mips/include/asm/ptrace.h"
# 1 "./arch/mips/include/asm/isadep.h" 1
# 17 "./arch/mips/include/asm/ptrace.h" 2


# 1 "./arch/mips/include/uapi/asm/ptrace.h" 1
# 34 "./arch/mips/include/uapi/asm/ptrace.h"
struct user_pt_regs {




 __u64 regs[32];


 __u64 lo;
 __u64 hi;
 __u64 cp0_epc;
 __u64 cp0_badvaddr;
 __u64 cp0_status;
 __u64 cp0_cause;
} __attribute__ ((aligned (8)));
# 71 "./arch/mips/include/uapi/asm/ptrace.h"
enum pt_watch_style {
 pt_watch_style_mips32,
 pt_watch_style_mips64
};
struct mips32_watch_regs {
 unsigned int watchlo[8];

 unsigned short watchhi[8];






 unsigned short watch_masks[8];

 unsigned int num_valid;
} __attribute__((aligned(8)));

struct mips64_watch_regs {
 unsigned long long watchlo[8];
 unsigned short watchhi[8];
 unsigned short watch_masks[8];
 unsigned int num_valid;
} __attribute__((aligned(8)));

struct pt_watch_regs {
 enum pt_watch_style style;
 union {
  struct mips32_watch_regs mips32;
  struct mips64_watch_regs mips64;
 };
};
# 20 "./arch/mips/include/asm/ptrace.h" 2








struct pt_regs {






 unsigned long regs[32];


 unsigned long cp0_status;
 unsigned long hi;
 unsigned long lo;



 unsigned long cp0_badvaddr;
 unsigned long cp0_cause;
 unsigned long cp0_epc;




 unsigned long __last[0];
} __attribute__((__aligned__(8)));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->regs[29];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void instruction_pointer_set(struct pt_regs *regs,
                                           unsigned long val)
{
 regs->cp0_epc = val;
}


extern int regs_query_register_offset(const char *name);
# 78 "./arch/mips/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_register(struct pt_regs *regs,
                                              unsigned int offset)
{
 if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, __last))), 0))
  return 0;

 return *(unsigned long *)((unsigned long)regs + offset);
}
# 95 "./arch/mips/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regs_within_kernel_stack(struct pt_regs *regs,
                                           unsigned long addr)
{
 return ((addr & ~((((1UL) << 14) << (0)) - 1)) ==
  (kernel_stack_pointer(regs) & ~((((1UL) << 14) << (0)) - 1)));
}
# 111 "./arch/mips/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
                                                      unsigned int n)
{
 unsigned long *addr = (unsigned long *)kernel_stack_pointer(regs);

 addr += n;
 if (regs_within_kernel_stack(regs, (unsigned long)addr))
  return *addr;
 else
  return 0;
}

struct task_struct;

extern int ptrace_getregs(struct task_struct *child,
 struct user_pt_regs *data);
extern int ptrace_setregs(struct task_struct *child,
 struct user_pt_regs *data);

extern int ptrace_getfpregs(struct task_struct *child, __u32 *data);
extern int ptrace_setfpregs(struct task_struct *child, __u32 *data);

extern int ptrace_get_watch_regs(struct task_struct *child,
 struct pt_watch_regs *addr);
extern int ptrace_set_watch_regs(struct task_struct *child,
 struct pt_watch_regs *addr);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_syscall_success(struct pt_regs *regs)
{
 return !regs->regs[7];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long regs_return_value(struct pt_regs *regs)
{
 if (is_syscall_success(regs) || !(((regs)->cp0_status & 0x18) == 0x10))
  return regs->regs[2];
 else
  return -regs->regs[2];
}




extern long syscall_trace_enter(struct pt_regs *regs, long syscall);
extern void syscall_trace_leave(struct pt_regs *regs);

extern void die(const char *, struct pt_regs *) __attribute__((__noreturn__));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void die_if_kernel(const char *str, struct pt_regs *regs)
{
 if (__builtin_expect(!!(!(((regs)->cp0_status & 0x18) == 0x10)), 0))
  die(str, regs);
}
# 178 "./arch/mips/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return regs->regs[29];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_stack_pointer_set(struct pt_regs *regs,
 unsigned long val)
{
 regs->regs[29] = val;
}
# 15 "./include/linux/sched/signal.h" 2





struct sighand_struct {
 spinlock_t siglock;
 refcount_t count;
 wait_queue_head_t signalfd_wqh;
 struct k_sigaction action[128];
};




struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 u64 ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 u64 expires;
 u64 incr;
};





struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 66 "./include/linux/sched/signal.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
};

struct multiprocess_signals {
 sigset_t signal;
 struct hlist_node node;
};

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};
# 93 "./include/linux/sched/signal.h"
struct signal_struct {
 refcount_t sigcnt;
 atomic_t live;
 int nr_threads;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 struct hlist_head multiprocess;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;

 struct core_state *core_state;
# 135 "./include/linux/sched/signal.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;




 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;



 struct posix_cputimers posix_cputimers;


 struct pid *pids[PIDTYPE_MAX];





 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;


 struct autogroup *autogroup;







 seqlock_t stats_lock;
 u64 utime, stime, cutime, cstime;
 u64 gtime;
 u64 cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 216 "./include/linux/sched/signal.h"
 struct rlimit rlim[16];


 struct pacct_struct pacct;


 struct taskstats *stats;


 unsigned audit_tty;
 struct tty_audit_buf *tty_audit_buf;






 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;

 struct mm_struct *oom_mm;


 struct mutex cred_guard_mutex;





 struct rw_semaphore exec_update_lock;




} ;
# 272 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_set_stop_flags(struct signal_struct *sig,
      unsigned int flags)
{
 ({ int __ret_warn_on = !!(sig->flags & (0x00000004|0x00000008)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/sched/signal.h", 275, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != ((void *)0));
}

extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *task,
     sigset_t *mask, kernel_siginfo_t *info);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernel_dequeue_signal(void)
{
 struct task_struct *task = (current_thread_info()->task);
 kernel_siginfo_t __info;
 int ret;

 spin_lock_irq(&task->sighand->siglock);
 ret = dequeue_signal(task, &task->blocked, &__info);
 spin_unlock_irq(&task->sighand->siglock);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_signal_stop(void)
{
 spin_lock_irq(&(current_thread_info()->task)->sighand->siglock);
 if ((current_thread_info()->task)->jobctl & (1UL << 16))
  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(&(current_thread_info()->task)->pi_lock); } while (0); do { } while (0); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_273(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((current_thread_info()->task)->__state) == sizeof(char) || sizeof((current_thread_info()->task)->__state) == sizeof(short) || sizeof((current_thread_info()->task)->__state) == sizeof(int) || sizeof((current_thread_info()->task)->__state) == sizeof(long)) || sizeof((current_thread_info()->task)->__state) == sizeof(long long))) __compiletime_assert_273(); } while (0); do { *(volatile typeof((current_thread_info()->task)->__state) *)&((current_thread_info()->task)->__state) = (((0x0100 | 0x0004))); } while (0); } while (0); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&(current_thread_info()->task)->pi_lock, flags); } while (0); } while (0);
 spin_unlock_irq(&(current_thread_info()->task)->sighand->siglock);

 schedule();
}






int force_sig_fault_to_task(int sig, int code, void *addr

 , struct task_struct *t);
int force_sig_fault(int sig, int code, void *addr
                                                                );
int send_sig_fault(int sig, int code, void *addr

 , struct task_struct *t);

int force_sig_mceerr(int code, void *, short);
int send_sig_mceerr(int code, void *, short, struct task_struct *);

int force_sig_bnderr(void *addr, void *lower, void *upper);
int force_sig_pkuerr(void *addr, u32 pkey);
int force_sig_perf(void *addr, u32 type, u64 sig_data);

int force_sig_ptrace_errno_trap(int errno, void *addr);
int force_sig_fault_trapno(int sig, int code, void *addr, int trapno);
int send_sig_fault_trapno(int sig, int code, void *addr, int trapno,
   struct task_struct *t);
int force_sig_seccomp(int syscall, int reason, bool force_coredump);

extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern void force_sigsegv(int sig);
extern int force_sig_info(struct kernel_siginfo *);
extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
    const struct cred *);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int);
extern void force_fatal_sig(int);
extern void force_exit_sig(int);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int restart_syscall(void)
{
 set_tsk_thread_flag((current_thread_info()->task), 1);
 return -513;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_sigpending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,1)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending(struct task_struct *p)
{





 if (__builtin_expect(!!(test_tsk_thread_flag(p, 7)), 0))
  return 1;
 return task_sigpending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fatal_signal_pending(struct task_struct *p)
{
 return task_sigpending(p) && __fatal_signal_pending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending_state(unsigned int state, struct task_struct *p)
{
 if (!(state & (0x0001 | 0x0100)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 0x0001) || __fatal_signal_pending(p);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_signal_pending(vm_fault_t fault_flags,
     struct pt_regs *regs)
{
 return __builtin_expect(!!((fault_flags & VM_FAULT_RETRY) && (fatal_signal_pending((current_thread_info()->task)) || ((((regs)->cp0_status & 0x18) == 0x10) && signal_pending((current_thread_info()->task))))), 0);


}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);
extern void calculate_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0100 : 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0008 : 0);
}

void task_join_group_stop(struct task_struct *task);
# 460 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_restore_sigmask(void)
{
 set_ti_thread_flag(current_thread_info(), 9);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_restore_sigmask(struct task_struct *task)
{
 clear_tsk_thread_flag(task, 9);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_restore_sigmask(void)
{
 clear_ti_thread_flag(current_thread_info(), 9);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_tsk_restore_sigmask(struct task_struct *task)
{
 return test_tsk_thread_flag(task, 9);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_restore_sigmask(void)
{
 return test_ti_thread_flag(current_thread_info(), 9);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_clear_restore_sigmask(void)
{
 return test_and_clear_ti_thread_flag(current_thread_info(), 9);
}
# 519 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&(current_thread_info()->task)->saved_sigmask);
}

extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask_unless(bool interrupted)
{
 if (interrupted)
  ({ int __ret_warn_on = !!(!signal_pending((current_thread_info()->task))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/sched/signal.h", 530, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 else
  restore_saved_sigmask();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &(current_thread_info()->task)->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &(current_thread_info()->task)->saved_sigmask;
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __on_sig_stack(unsigned long sp)
{




 return sp > (current_thread_info()->task)->sas_ss_sp &&
  sp - (current_thread_info()->task)->sas_ss_sp <= (current_thread_info()->task)->sas_ss_size;

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int on_sig_stack(unsigned long sp)
{
# 577 "./include/linux/sched/signal.h"
 if ((current_thread_info()->task)->sas_ss_flags & (1U << 31))
  return 0;

 return __on_sig_stack(sp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sas_ss_flags(unsigned long sp)
{
 if (!(current_thread_info()->task)->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000)), 0) && ! sas_ss_flags(sp))



  return (current_thread_info()->task)->sas_ss_sp + (current_thread_info()->task)->sas_ss_size;

 return sp;
}

extern void __cleanup_sighand(struct sighand_struct *);
extern void flush_itimer_signals(void);
# 621 "./include/linux/sched/signal.h"
extern bool current_is_single_threaded(void);
# 643 "./include/linux/sched/signal.h"
typedef int (*proc_visitor)(struct task_struct *p, void *data);
void walk_process_tree(struct task_struct *top, proc_visitor, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
{
 struct pid *pid;
 if (type == PIDTYPE_PID)
  pid = task_pid(task);
 else
  pid = task->signal->pids[type];
 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_tgid(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_TGID];
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_PGID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_session(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_SID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_nr_threads(struct task_struct *task)
{
 return task->signal->nr_threads;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *next_thread(const struct task_struct *p)
{
 return ({ void *__mptr = (void *)(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_274(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_274(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); })); _Static_assert(__builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_274(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_274(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(((struct task_struct *)0)->thread_group)) || __builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_274(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_274(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(void)), "pointer type mismatch in container_of()"); ((struct task_struct *)(__mptr - __builtin_offsetof(struct task_struct, thread_group))); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}




extern bool thread_group_exited(struct pid *pid);

extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
       unsigned long *flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sighand_struct *lock_task_sighand(struct task_struct *task,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(task, flags);
 (void)(ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_task_sighand(struct task_struct *task,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&task->sighand->siglock, *flags);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_assert_task_sighand_held(struct task_struct *task) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_275(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long long))) __compiletime_assert_275(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_cur), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_cur))) *)&(task->signal->rlim[limit].rlim_cur)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit_max(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_276(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_max) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long long))) __compiletime_assert_276(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_max), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_max))) *)&(task->signal->rlim[limit].rlim_max)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit(unsigned int limit)
{
 return task_rlimit((current_thread_info()->task), limit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max((current_thread_info()->task), limit);
}
# 7 "./include/linux/rcuwait.h" 2
# 16 "./include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcuwait_active(struct rcuwait *w)
{
 return !!({ typeof(*(w->task)) *_________p1 = (typeof(*(w->task)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_277(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_277(); } while (0); (*(const volatile typeof( _Generic(((w->task)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((w->task)))) *)&((w->task))); }); ; ((typeof(*(w->task)) *)(_________p1)); });
}

extern int rcuwait_wake_up(struct rcuwait *w);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prepare_to_rcuwait(struct rcuwait *w)
{
 do { uintptr_t _r_a_p__v = (uintptr_t)((current_thread_info()->task)); ; if (__builtin_constant_p((current_thread_info()->task)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_278(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_278(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_279(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_279(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_280(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_280(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void finish_rcuwait(struct rcuwait *w)
{
        do { uintptr_t _r_a_p__v = (uintptr_t)(((void *)0)); ; if (__builtin_constant_p(((void *)0)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_281(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_281(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_282(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_282(); } while (0); __sync(); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_283(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_283(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { } while (0); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_284(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((current_thread_info()->task)->__state) == sizeof(char) || sizeof((current_thread_info()->task)->__state) == sizeof(short) || sizeof((current_thread_info()->task)->__state) == sizeof(int) || sizeof((current_thread_info()->task)->__state) == sizeof(long)) || sizeof((current_thread_info()->task)->__state) == sizeof(long long))) __compiletime_assert_284(); } while (0); do { *(volatile typeof((current_thread_info()->task)->__state) *)&((current_thread_info()->task)->__state) = ((0x0000)); } while (0); } while (0); } while (0);
}
# 8 "./include/linux/percpu-rwsem.h" 2

# 1 "./include/linux/rcu_sync.h" 1
# 17 "./include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "./include/linux/rcu_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { } while (0 && (!rcu_read_lock_any_held()));

 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_285(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rsp->gp_state) == sizeof(char) || sizeof(rsp->gp_state) == sizeof(short) || sizeof(rsp->gp_state) == sizeof(int) || sizeof(rsp->gp_state) == sizeof(long)) || sizeof(rsp->gp_state) == sizeof(long long))) __compiletime_assert_285(); } while (0); (*(const volatile typeof( _Generic((rsp->gp_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rsp->gp_state))) *)&(rsp->gp_state)); });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "./include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rcuwait writer;
 wait_queue_head_t waiters;
 atomic_t block;



};
# 45 "./include/linux/percpu-rwsem.h"
extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { do { } while (0); } while (0);

 do { } while (0);

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
# 62 "./include/linux/percpu-rwsem.h"
 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  __percpu_down_read(sem, false);




 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 bool ret = true;

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ret = __percpu_down_read(sem, true);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);





 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { } while (0);

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1)) {
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {




  __sync();





  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  rcuwait_wake_up(&sem->writer);
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 141 "./include/linux/percpu-rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}
# 34 "./include/linux/fs.h" 2

# 1 "./include/linux/delayed_call.h" 1
# 10 "./include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 36 "./include/linux/fs.h" 2
# 1 "./include/linux/uuid.h" 1
# 11 "./include/linux/uuid.h"
# 1 "./include/uapi/linux/uuid.h" 1
# 23 "./include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "./include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "./include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "./include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void import_guid(guid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void export_guid(__u8 *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void import_uuid(uuid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void export_uuid(__u8 *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);
void generate_random_guid(unsigned char guid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 37 "./include/linux/fs.h" 2
# 1 "./include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "./include/linux/fs.h" 2
# 1 "./include/linux/ioprio.h" 1





# 1 "./include/linux/sched/rt.h" 1






struct task_struct;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != ((void *)0);
}
# 58 "./include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "./include/linux/ioprio.h" 2
# 1 "./include/linux/iocontext.h" 1








enum {
 ICQ_EXITED = 1 << 2,
 ICQ_DESTROYED = 1 << 3,
};
# 73 "./include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 124 "./include/linux/iocontext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_io_context_active(struct io_context *ioc)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(atomic_long_read(&ioc->refcount) <= 0); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/iocontext.h", 126, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(atomic_read(&ioc->active_ref) <= 0); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/iocontext.h", 127, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(atomic_read(&ioc->nr_tasks) <= 0); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/iocontext.h", 136, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;

void put_io_context(struct io_context *ioc);
void put_io_context_active(struct io_context *ioc);
void exit_io_context(struct task_struct *task);
struct io_context *get_task_io_context(struct task_struct *task,
           gfp_t gfp_flags, int node);
# 8 "./include/linux/ioprio.h" 2

# 1 "./include/uapi/linux/ioprio.h" 1
# 27 "./include/uapi/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};







enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 10 "./include/linux/ioprio.h" 2
# 19 "./include/linux/ioprio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ioprio_valid(unsigned short ioprio)
{
 unsigned short class = (((ioprio) >> 13) & 0x07);

 return class > IOPRIO_CLASS_NONE && class <= IOPRIO_CLASS_IDLE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_current_ioprio(void)
{
 struct io_context *ioc = (current_thread_info()->task)->io_context;

 if (ioc)
  return ioc->ioprio;
 return ((((IOPRIO_CLASS_BE) & 0x07) << 13) | ((4) & ((1UL << 13) - 1)));
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);


extern int ioprio_check_cap(int ioprio);
# 39 "./include/linux/fs.h" 2
# 1 "./include/linux/fs_types.h" 1
# 71 "./include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 40 "./include/linux/fs.h" 2


# 1 "./include/linux/mount.h" 1
# 20 "./include/linux/mount.h"
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct fs_context;
# 71 "./include/linux/mount.h"
struct vfsmount {
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;
 struct user_namespace *mnt_userns;
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
{

 return ({ typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_286(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)) || sizeof(*&mnt->mnt_userns) == sizeof(long long))) __compiletime_assert_286(); } while (0); (*(const volatile typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) *)&(*&mnt->mnt_userns)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_287(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)))) __compiletime_assert_287(); } while (0); __sync(); (typeof(*&mnt->mnt_userns))___p1; });
}

struct file;
struct path;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern struct vfsmount *mnt_clone_internal(const struct path *path);
extern bool __mnt_is_readonly(struct vfsmount *mnt);
extern bool mnt_may_suid(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(const struct path *path);
extern int __mnt_want_write(struct vfsmount *);
extern void __mnt_drop_write(struct vfsmount *);

struct file_system_type;
extern struct vfsmount *fc_mount(struct fs_context *fc);
extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, const char *name,
          void *data);
extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
         struct file_system_type *type,
         const char *name, void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(const char *name);

extern unsigned int sysctl_mount_max;

extern bool path_is_mountpoint(const struct path *path);

extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
# 43 "./include/linux/fs.h" 2



# 1 "./include/uapi/linux/fs.h" 1
# 14 "./include/uapi/linux/fs.h"
# 1 "./include/uapi/linux/ioctl.h" 1




# 1 "./arch/mips/include/uapi/asm/ioctl.h" 1
# 26 "./arch/mips/include/uapi/asm/ioctl.h"
# 1 "./include/asm-generic/ioctl.h" 1




# 1 "./include/uapi/asm-generic/ioctl.h" 1
# 6 "./include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 27 "./arch/mips/include/uapi/asm/ioctl.h" 2
# 6 "./include/uapi/linux/ioctl.h" 2
# 15 "./include/uapi/linux/fs.h" 2
# 54 "./include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 287 "./include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 47 "./include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct io_comp_batch;
struct export_operations;
struct fiemap_extent_info;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_spec;
struct fileattr;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 223 "./include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};




# 1 "./include/linux/quota.h" 1
# 42 "./include/linux/quota.h"
# 1 "./include/uapi/linux/dqblk_xfs.h" 1
# 53 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;


 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s8 d_itimer_hi;
 __s8 d_btimer_hi;
 __s8 d_rtbtimer_hi;
 __s8 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 159 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 202 "./include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u16 qs_rtbwarnlimit;
 __u16 qs_pad3;
 __u32 qs_pad4;
 __u64 qs_pad2[7];
};
# 43 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v1.h" 1
# 44 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v2.h" 1








# 1 "./include/linux/dqblk_qtree.h" 1
# 18 "./include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "./include/linux/dqblk_v2.h" 2
# 45 "./include/linux/quota.h" 2



# 1 "./include/linux/projid.h" 1
# 17 "./include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 49 "./include/linux/quota.h" 2
# 1 "./include/uapi/linux/quota.h" 1
# 90 "./include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "./include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "./include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "./include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "./include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  BUG();
 }
 return kqid;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  BUG();
 }
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "./include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int info_dirty(struct mem_dqinfo *info)
{
 return arch_test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "./include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "./include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 464 "./include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 491 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_288(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(flag) == 0 || (((flag) & ((flag) - 1)) != 0)"))); if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_288(); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype)
{
 return;
}


struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 245 "./include/linux/fs.h" 2
# 278 "./include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 291 "./include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;
struct readahead_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 326 "./include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 struct wait_page_queue *ki_waitq;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 356 "./include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);
 void (*readahead)(struct readahead_control *);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 456 "./include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 struct rw_semaphore invalidate_lock;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;




 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;
# 491 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i_mmap_trylock_write(struct address_space *mapping)
{
 return down_write_trylock(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_write_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_289(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(char) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(short) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(int) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long)) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long long))) __compiletime_assert_289(); } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == ((void *)0));
}
# 548 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 586 "./include/linux/fs.h"
struct posix_acl;
# 595 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;

 struct bdi_writeback *i_wb;


 int i_wb_frn_winner;
 u16 i_wb_frn_avg_time;
 u16 i_wb_frn_history;

 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;
# 729 "./include/linux/fs.h"
 void *i_private;
} ;

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 771 "./include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock(struct address_space *mapping)
{
 down_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock(struct address_space *mapping)
{
 up_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock_shared(struct address_space *mapping)
{
 down_read(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_invalidate_trylock_shared(
     struct address_space *mapping)
{
 return down_read_trylock(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock_shared(
     struct address_space *mapping)
{
 up_read(&mapping->invalidate_lock);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);

void filemap_invalidate_lock_two(struct address_space *mapping1,
     struct address_space *mapping2);
void filemap_invalidate_unlock_two(struct address_space *mapping1,
       struct address_space *mapping2);
# 872 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t i_size_read(const struct inode *inode)
{
# 891 "./include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 913 "./include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};
# 944 "./include/linux/fs.h"
struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;
 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct hlist_head *f_ep;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
 errseq_t f_sb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1053 "./include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
 bool (*lm_breaker_owns_lease)(struct file_lock *);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);


# 1 "./include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1090 "./include/linux/fs.h" 2
# 1108 "./include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1160 "./include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);

struct notifier_block;
extern int lease_register_notifier(struct notifier_block *);
extern void lease_unregister_notifier(struct notifier_block *);

struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1345 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1446 "./include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;
# 1496 "./include/linux/fs.h"
 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;





 atomic_long_t s_fsnotify_connectors;


 int s_readonly_remount;


 errseq_t s_wb_err;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << 6))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}
# 1635 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return make_kuid(mnt_userns, __kuid_val(kuid));
}
# 1649 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return make_kgid(mnt_userns, __kgid_val(kgid));
}
# 1663 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kuid_into_mnt(mnt_userns, inode->i_uid);
}
# 1677 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kgid_into_mnt(mnt_userns, inode->i_gid);
}
# 1691 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return (kuid_t){ from_kuid(mnt_userns, kuid) };
}
# 1705 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return (kgid_t){ from_kgid(mnt_userns, kgid) };
}
# 1723 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t mapped_fsuid(struct user_namespace *mnt_userns)
{
 return kuid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*((current_thread_info()->task)->cred)) *)(((current_thread_info()->task)->cred))); })->fsuid; })));
}
# 1740 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t mapped_fsgid(struct user_namespace *mnt_userns)
{
 return kgid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*((current_thread_info()->task)->cred)) *)(((current_thread_info()->task)->cred))); })->fsgid; })));
}
# 1753 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsuid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_uid = mapped_fsuid(mnt_userns);
}
# 1767 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsgid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_gid = mapped_fsgid(mnt_userns);
}
# 1784 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fsuidgid_has_mapping(struct super_block *sb,
     struct user_namespace *mnt_userns)
{
 struct user_namespace *s_user_ns = sb->s_user_ns;

 return kuid_has_mapping(s_user_ns, mapped_fsuid(mnt_userns)) &&
        kgid_has_mapping(s_user_ns, mapped_fsgid(mnt_userns));
}

extern struct timespec64 current_time(struct inode *inode);
# 1803 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sb_end_write(struct super_block *sb, int level)
{
 percpu_up_read(sb->s_writers.rw_sem + level-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sb_start_write(struct super_block *sb, int level)
{
 percpu_down_read(sb->s_writers.rw_sem + level - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __sb_start_write_trylock(struct super_block *sb, int level)
{
 return percpu_down_read_trylock(sb->s_writers.rw_sem + level - 1);
}
# 1830 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1842 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1854 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1878 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_WRITE);
}
# 1907 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1925 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_FS);
}

bool inode_owner_or_capable(struct user_namespace *mnt_userns,
       const struct inode *inode);




int vfs_create(struct user_namespace *, struct inode *,
        struct dentry *, umode_t, bool);
int vfs_mkdir(struct user_namespace *, struct inode *,
       struct dentry *, umode_t);
int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
              umode_t, dev_t);
int vfs_symlink(struct user_namespace *, struct inode *,
  struct dentry *, const char *);
int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
      struct dentry *, struct inode **);
int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
        struct inode **);
# 1966 "./include/linux/fs.h"
struct renamedata {
 struct user_namespace *old_mnt_userns;
 struct inode *old_dir;
 struct dentry *old_dentry;
 struct user_namespace *new_mnt_userns;
 struct inode *new_dir;
 struct dentry *new_dentry;
 struct inode **delegated_inode;
 unsigned int flags;
} ;

int vfs_rename(struct renamedata *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_whiteout(struct user_namespace *mnt_userns,
          struct inode *dir, struct dentry *dentry)
{
 return vfs_mknod(mnt_userns, dir, dentry, 0020000 | 0,
    0);
}

struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
      struct dentry *dentry, umode_t mode, int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

int vfs_fchown(struct file *file, uid_t user, gid_t group);
int vfs_fchmod(struct file *file, umode_t mode);
int vfs_utimes(const struct path *path, struct timespec64 *times);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);


extern long compat_ptr_ioctl(struct file *file, unsigned int cmd,
     unsigned long arg);







void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
        const struct inode *dir, umode_t mode);
extern bool may_open_dev(const struct path *path);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};
# 2067 "./include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, struct io_comp_batch *,
   unsigned int flags);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct user_namespace *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int, bool);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct user_namespace *, struct inode *,struct dentry *,
         umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
   const char *);
 int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t,dev_t);
 int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct user_namespace *, struct dentry *,
   struct iattr *);
 int (*getattr) (struct user_namespace *, const struct path *,
   struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct user_namespace *, struct inode *,
   struct dentry *, umode_t);
 int (*set_acl)(struct user_namespace *, struct inode *,
         struct posix_acl *, int);
 int (*fileattr_set)(struct user_namespace *mnt_userns,
       struct dentry *dentry, struct fileattr *fa);
 int (*fileattr_get)(struct dentry *dentry, struct fileattr *fa);
} __attribute__((__aligned__((1 << 6))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 2268 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2298 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
       struct inode *inode)
{
 return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src,
          struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = kiocb_src->ki_flags,
  .ki_hint = kiocb_src->ki_hint,
  .ki_ioprio = kiocb_src->ki_ioprio,
  .ki_pos = kiocb_src->ki_pos,
 };
}
# 2448 "./include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}
# 2468 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_dirtytime_only(struct inode *inode)
{
 return (inode->i_state & ((1 << 11) | (1 << 3) |
      (1 << 5) | (1 << 4))) == (1 << 11);
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
int inode_update_time(struct inode *inode, struct timespec64 *time, int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;







 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_spec *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key invalidate_lock_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2589 "./include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_lease(struct inode *inode, unsigned int mode)
{






 __sync();
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg(struct inode *inode, unsigned int mode)
{






 __sync();
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|0x0080);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_layout(struct inode *inode, bool wait)
{
 __sync();
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 0x0080,
    2048);
 return 0;
}
# 2713 "./include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *file_mnt_user_ns(struct file *file)
{
 return mnt_user_ns(file->f_path.mnt);
}
extern long vfs_truncate(const struct path *, loff_t);
int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
  unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(const struct path *,
       const char *, int, umode_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_open_root_mnt(struct vfsmount *mnt,
       const char *name, int flags, umode_t mode)
{
 return file_open_root(&(struct path){.mnt = mnt, .dentry = mnt->mnt_root},
         name, flags, mode);
}
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname_uflags(const char *, int);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;




extern struct super_block *blockdev_superblock;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return 1 && sb == blockdev_superblock;
}

void emergency_thaw_all(void);
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;
# 2791 "./include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}

extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

void invalidate_mapping_pagevec(struct address_space *mapping,
    unsigned long start, unsigned long end,
    unsigned long *nr_pagevec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern bool filemap_range_needs_writeback(struct address_space *,
       loff_t lstart, loff_t lend);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);
int filemap_fdatawrite_wbc(struct address_space *mapping,
      struct writeback_control *wbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_write_and_wait(struct address_space *mapping)
{
 return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2893 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2910 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2923 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}
# 2935 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t file_sample_sb_err(struct file *file)
{
 return errseq_sample(&file->f_path.dentry->d_sb->s_wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);


extern int bmap(struct inode *inode, sector_t *block);







int notify_change(struct user_namespace *, struct dentry *,
    struct iattr *, struct inode **);
int inode_permission(struct user_namespace *, struct inode *, int);
int generic_permission(struct user_namespace *, struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_permission(struct file *file, int mask)
{
 return inode_permission(file_mnt_user_ns(file),
    file_inode(file), mask);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_permission(const struct path *path, int mask)
{
 return inode_permission(mnt_user_ns(path->mnt),
    d_inode(path->dentry), mask);
}
int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
     struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_wrong_type(const struct inode *inode, umode_t mode)
{
 return (inode->i_mode ^ mode) & 00170000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 sb_start_write(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return sb_start_write_trylock(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 3046 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_dec(struct inode *inode)
{
 __BUG_ON((unsigned long)(!atomic_read(&inode->i_readcount)));
 atomic_dec(&inode->i_readcount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 3089 "./include/linux/fs.h"
extern int do_pipe_flags(int *, int);

extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}
extern void d_mark_dontcache(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
        int (*)(struct inode *, void *), void *);
extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);
# 3166 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zero_ino(ino_t ino)
{
 return (u32)ino == 0;
}

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);
extern void inode_add_lru(struct inode *inode);

extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_write_check_limits(struct file *file, loff_t pos,
  loff_t *count);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
  ssize_t already_read);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
      struct iov_iter *iter);
ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
       struct iov_iter *iter);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3287 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3299 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}




void dio_warn_stale_pagecache(struct file *filp);

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
void generic_fill_statx_attr(struct inode *inode, struct kstat *stat);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
  int flags);
int vfs_fstat(int fd, struct kstat *stat);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_fstatat(-100, filename, stat, 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_fstatat(-100, name, stat, 0x100);
}

extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct user_namespace *, struct dentry *,
     struct iattr *);
extern int simple_getattr(struct user_namespace *, const struct path *,
     struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename_exchange(struct inode *old_dir, struct dentry *old_dentry,
      struct inode *new_dir, struct dentry *new_dentry);
extern int simple_rename(struct user_namespace *, struct inode *,
    struct dentry *, struct inode *, struct dentry *,
    unsigned int);
extern void simple_recursive_removal(struct dentry *,
                              void (*callback)(struct dentry *));
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern const struct address_space_operations ram_aops;
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);

extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





int may_setattr(struct user_namespace *mnt_userns, struct inode *inode,
  unsigned int ia_valid);
int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
void setattr_copy(struct user_namespace *, struct inode *inode,
    const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_dax(const struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!0 || !vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 0x0008)
  res |= ( int) (( __kernel_rwf_t)0x00000010);
 if (file->f_flags & 0x8000)
  res |= (1 << 17);
 if ((file->f_flags & 0x0010) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & (1 << 0))))
  res |= ( int) (( __kernel_rwf_t)0x00000002);
 if (file->f_flags & 0x4000)
  res |= ( int) (( __kernel_rwf_t)0x00000004);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 int kiocb_flags = 0;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_290(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(__force int) RWF_SUPPORTED & IOCB_EVENTFD"))); if (!(!(( int) ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)) & (1 << 16)))) __compiletime_assert_290(); } while (0);

 if (!flags)
  return 0;
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -122;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -122;
  kiocb_flags |= (1 << 20);
 }
 kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
 if (flags & (( __kernel_rwf_t)0x00000004))
  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);

 ki->ki_flags |= kiocb_flags;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3578 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) list_bdev_fs_names(char *buf, size_t size);
# 3609 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_sticky(struct user_namespace *mnt_userns,
          struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(mnt_userns, dir, inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= (1 << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & (1 << 4));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & (1 << 4));
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 9 "./include/linux/huge_mm.h" 2

vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
void huge_pmd_set_accessed(struct vm_fault *vmf);
int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
    struct vm_area_struct *vma);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)
{
}


vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf);
struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr, pmd_t *pmd,
       unsigned int flags);
bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
      pmd_t *pmd, unsigned long addr, unsigned long next);
int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr);
int zap_huge_pud(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud,
   unsigned long addr);
bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
     unsigned long new_addr, pmd_t *old_pmd, pmd_t *new_pmd);
int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr,
      pgprot_t newprot, unsigned long cp_flags);
vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 55 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_pfn_pmd(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pmd_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}
vm_fault_t vmf_insert_pfn_pud_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 74 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_pfn_pud(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pud_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}

enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_NEVER_DAX,
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,
};

struct kobject;
struct kobj_attribute;

ssize_t single_hugepage_flag_store(struct kobject *kobj,
       struct kobj_attribute *attr,
       const char *buf, size_t count,
       enum transparent_hugepage_flag flag);
ssize_t single_hugepage_flag_show(struct kobject *kobj,
      struct kobj_attribute *attr, char *buf,
      enum transparent_hugepage_flag flag);
extern struct kobj_attribute shmem_enabled_attr;
# 330 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int thp_order(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thp_nr_pages(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transparent_hugepage_active(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_suitable(struct vm_area_struct *vma,
  unsigned long haddr)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_enabled(struct vm_area_struct *vma,
       unsigned long vm_flags)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prep_transhuge_page(struct page *page) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_transparent_hugepage(struct page *page)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
can_split_huge_page(struct page *page, int *pextra_pins)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_291(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_291(); } while (0);
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
split_huge_page_to_list(struct page *page, struct list_head *list)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int split_huge_page(struct page *page)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void deferred_split_huge_page(struct page *page) {}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
  unsigned long address, bool freeze, struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void split_huge_pmd_address(struct vm_area_struct *vma,
  unsigned long address, bool freeze, struct page *page) {}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice)
{
 BUG();
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_adjust_trans_huge(struct vm_area_struct *vma,
      unsigned long start,
      unsigned long end,
      long adjust_next)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_swap_pmd(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t do_huge_pmd_numa_page(struct vm_fault *vmf)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_page(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pmd(pmd_t pmd)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pud(pud_t pud)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_put_huge_zero_page(struct mm_struct *mm)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *follow_devmap_pmd(struct vm_area_struct *vma,
 unsigned long addr, pmd_t *pmd, int flags, struct dev_pagemap **pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *follow_devmap_pud(struct vm_area_struct *vma,
 unsigned long addr, pud_t *pud, int flags, struct dev_pagemap **pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_migration_supported(void)
{
 return false;
}
# 478 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long thp_size(struct page *page)
{
 return ((1UL) << 14) << thp_order(page);
}
# 718 "./include/linux/mm.h" 2
# 735 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int put_page_testzero(struct page *page)
{
 ((void)(sizeof(( long)(page_ref_count(page) == 0))));
 return page_ref_dec_and_test(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_put_testzero(struct folio *folio)
{
 return put_page_testzero(&folio->page);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);
# 784 "./include/linux/mm.h"
extern bool is_vmalloc_addr(const void *x);
extern int is_vmalloc_or_module_addr(const void *x);
# 797 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_mapcount(struct page *head)
{
 return atomic_read(compound_mapcount_ptr(head)) + 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(!PageCompound(page)))));
 page = ((typeof(page))_compound_head(page));
 return head_compound_mapcount(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);
# 834 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mapcount(struct page *page)
{
 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int total_mapcount(struct page *page)
{
 return page_mapcount(page);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_trans_huge_mapcount(struct page *page,
        int *total_mapcount)
{
 int mapcount = page_mapcount(page);
 if (total_mapcount)
  *total_mapcount = mapcount;
 return mapcount;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = ({ unsigned long __pfn = (((virt_to_phys((void *)(x))) >> 14)); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; });

 return ((typeof(page))_compound_head(page));
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
void folio_copy(struct folio *dst, struct folio *src);

unsigned long nr_free_buffer_pages(void);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,






 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[NR_COMPOUND_DTORS];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 ((void)(sizeof(( long)(compound_dtor >= NR_COMPOUND_DTORS))));
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_compound_page(struct page *page)
{
 ((void)(sizeof(( long)(page[1].compound_dtor >= NR_COMPOUND_DTORS))));
 compound_page_dtors[page[1].compound_dtor](page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}
# 925 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int folio_order(struct folio *folio)
{
 return compound_order(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hpage_pincount_available(struct page *page)
{





 page = ((typeof(page))_compound_head(page));
 return PageCompound(page) && compound_order(page) > 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_pincount(struct page *head)
{
 return atomic_read(compound_pincount_ptr(head));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_pincount(struct page *page)
{
 ((void)(sizeof(( long)(!hpage_pincount_available(page)))));
 page = ((typeof(page))_compound_head(page));
 return head_compound_pincount(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
 page[1].compound_nr = 1U << order;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long compound_nr(struct page *page)
{
 if (!PageHead(page))
  return 1;
 return page[1].compound_nr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_size(struct page *page)
{
 return ((1UL) << 14) << compound_order(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int page_shift(struct page *page)
{
 return 14 + compound_order(page);
}

void free_compound_page(struct page *page);
# 988 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(vma->vm_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

vm_fault_t do_set_pmd(struct vm_fault *vmf, struct page *page);
void do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr);

vm_fault_t finish_fault(struct vm_fault *vmf);
vm_fault_t finish_mkwrite_fault(struct vm_fault *vmf);
# 1105 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type page_zonenum(const struct page *page)
{
 do { kcsan_set_access_mask(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - (48 - 28)) - 6) - 2) * (2 != 0))); __kcsan_check_access(&(page->flags), sizeof(page->flags), (1 << 3)); kcsan_set_access_mask(0); kcsan_atomic_next(1); } while (0);
 return (page->flags >> (((((sizeof(unsigned long)*8) - (48 - 28)) - 6) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type folio_zonenum(const struct folio *folio)
{
 return page_zonenum(&folio->page);
}
# 1124 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_device_page(const struct page *page)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_movable_page(const struct page *page)
{
 return page_zonenum(page) == ZONE_MOVABLE;
}
# 1158 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_devmap_managed(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_devmap_managed_page(struct page *page)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_device_private_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PRIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pci_p2pdma_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PCI_P2PDMA;
}
# 1196 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_get(struct folio *folio)
{
 ((void)(sizeof(( long)(((unsigned int) folio_ref_count(folio) + 127u <= 127u)))));
 folio_ref_inc(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_page(struct page *page)
{
 folio_get((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

bool __attribute__((__warn_unused_result__)) try_grab_page(struct page *page, unsigned int flags);
struct page *try_grab_compound_head(struct page *page, int refs,
        unsigned int flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool try_get_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(page_ref_count(page) <= 0); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/mm.h", 1215, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); }))
  return false;
 page_ref_inc(page);
 return true;
}
# 1234 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_put(struct folio *folio)
{
 if (folio_put_testzero(folio))
  __put_page(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_page(struct page *page)
{
 struct folio *folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));







 if (page_is_devmap_managed(&folio->page)) {
  put_devmap_managed_page(&folio->page);
  return;
 }

 folio_put(folio);
}
# 1291 "./include/linux/mm.h"
void unpin_user_page(struct page *page);
void unpin_user_pages_dirty_lock(struct page **pages, unsigned long npages,
     bool make_dirty);
void unpin_user_page_range_dirty_lock(struct page *page, unsigned long npages,
          bool make_dirty);
void unpin_user_pages(struct page **pages, unsigned long npages);
# 1324 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_maybe_dma_pinned(struct page *page)
{
 if (hpage_pincount_available(page))
  return compound_pincount(page) > 0;
# 1337 "./include/linux/mm.h"
 return ((unsigned int)page_ref_count(((typeof(page))_compound_head(page)))) >=
  (1U << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_cow_mapping(vm_flags_t flags)
{
 return (flags & (0x00000008 | 0x00000020)) == 0x00000020;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_needs_cow_for_dma(struct vm_area_struct *vma,
       struct page *page)
{
 if (!is_cow_mapping(vma->vm_flags))
  return false;

 if (!arch_test_bit(28, &vma->vm_mm->flags))
  return false;

 return page_maybe_dma_pinned(page);
}
# 1374 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - (48 - 28)) - 6) < ((((sizeof(unsigned long)*8) - (48 - 28)) - 6) - 2))? (((sizeof(unsigned long)*8) - (48 - 28)) - 6) : ((((sizeof(unsigned long)*8) - (48 - 28)) - 6) - 2)) * ((6 + 2) != 0))) & ((1UL << (6 + 2)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_to_nid(const struct page *page)
{
 struct page *p = (struct page *)page;

 return (({ ((void)(sizeof(( long)(PagePoisoned(p))))); p; })->flags >> ((((sizeof(unsigned long)*8) - (48 - 28)) - 6) * (6 != 0))) & ((1UL << 6) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_nid(const struct folio *folio)
{
 return page_to_nid(&folio->page);
}
# 1460 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_xchg_last(struct page *page, int cpupid)
{
 return page_to_nid(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_last(struct page *page)
{
 return page_to_nid(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_nid(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_pid(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_cpu(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_pid_to_cpupid(int nid, int pid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_pid_unset(int cpupid)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_cpupid_reset_last(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_match_pid(struct task_struct *task, int cpupid)
{
 return false;
}
# 1542 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_reset(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *page_zone(const struct page *page)
{
 return &(__node_data[page_to_nid(page)])->node_zones[page_zonenum(page)];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *page_pgdat(const struct page *page)
{
 return (__node_data[page_to_nid(page)]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *folio_zone(const struct folio *folio)
{
 return page_zone(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *folio_pgdat(const struct folio *folio)
{
 return page_pgdat(&folio->page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_section(struct page *page, unsigned long section)
{
 page->flags &= ~(((1UL << (48 - 28)) - 1) << (((sizeof(unsigned long)*8) - (48 - 28)) * ((48 - 28) != 0)));
 page->flags |= (section & ((1UL << (48 - 28)) - 1)) << (((sizeof(unsigned long)*8) - (48 - 28)) * ((48 - 28) != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_section(const struct page *page)
{
 return (page->flags >> (((sizeof(unsigned long)*8) - (48 - 28)) * ((48 - 28) != 0))) & ((1UL << (48 - 28)) - 1);
}
# 1594 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long folio_pfn(struct folio *folio)
{
 return ({ const struct page *__pg = (&folio->page); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pinnable_page(struct page *page)
{
 return !(is_zone_movable_page(page) || false) ||
  is_zero_pfn(({ const struct page *__pg = (page); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); }));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - (48 - 28)) - 6) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - (48 - 28)) - 6) - 2) * (2 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 6) - 1) << ((((sizeof(unsigned long)*8) - (48 - 28)) - 6) * (6 != 0)));
 page->flags |= (node & ((1UL << 6) - 1)) << ((((sizeof(unsigned long)*8) - (48 - 28)) - 6) * (6 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);

 set_page_section(page, pfn_to_section_nr(pfn));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long folio_nr_pages(struct folio *folio)
{
 return compound_nr(&folio->page);
}
# 1660 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *folio_next(struct folio *folio)
{
 return (struct folio *)({ unsigned long __pfn = (({ const struct page *__pg = ((&(folio)->page)); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); }) + (folio_nr_pages(folio))); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; });
}
# 1677 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int folio_shift(struct folio *folio)
{
 return 14 + folio_order(folio);
}
# 1690 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t folio_size(struct folio *folio)
{
 return ((1UL) << 14) << folio_order(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_make_page_accessible(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_make_folio_accessible(struct folio *folio)
{
 int ret;
 long i, nr = folio_nr_pages(folio);

 for (i = 0; i < nr; i++) {
  ret = arch_make_page_accessible(({ unsigned long __pfn = (({ const struct page *__pg = ((&(folio)->page)); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); }) + (i)); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; }));
  if (ret)
   break;
 }

 return ret;
}





# 1 "./include/linux/vmstat.h" 1







# 1 "./include/linux/vm_event_item.h" 1
# 25 "./include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA32, PGALLOC_NORMAL, PGALLOC_MOVABLE,
  ALLOCSTALL_DMA32, ALLOCSTALL_NORMAL, ALLOCSTALL_MOVABLE,
  PGSCAN_SKIP_DMA32, PGSCAN_SKIP_NORMAL, PGSCAN_SKIP_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL,
  PGREUSE,
  PGSTEAL_KSWAPD,
  PGSTEAL_DIRECT,
  PGDEMOTE_KSWAPD,
  PGDEMOTE_DIRECT,
  PGSCAN_KSWAPD,
  PGSCAN_DIRECT,
  PGSCAN_DIRECT_THROTTLE,
  PGSCAN_ANON,
  PGSCAN_FILE,
  PGSTEAL_ANON,
  PGSTEAL_FILE,

  PGSCAN_ZONE_RECLAIM_FAILED,

  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
  OOM_KILL,
# 61 "./include/linux/vm_event_item.h"
  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,
  THP_MIGRATION_SUCCESS,
  THP_MIGRATION_FAIL,
  THP_MIGRATION_SPLIT,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,
  KCOMPACTD_WAKE,
  KCOMPACTD_MIGRATE_SCANNED, KCOMPACTD_FREE_SCANNED,
# 80 "./include/linux/vm_event_item.h"
  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,
# 110 "./include/linux/vm_event_item.h"
  BALLOON_INFLATE,
  BALLOON_DEFLATE,

  BALLOON_MIGRATE,
# 127 "./include/linux/vm_event_item.h"
  SWAP_RA,
  SWAP_RA_HIT,





  NR_VM_EVENT_ITEMS
};
# 9 "./include/linux/vmstat.h" 2

# 1 "./include/linux/static_key.h" 1
# 11 "./include/linux/vmstat.h" 2


extern int sysctl_stat_interval;




extern int sysctl_vm_numa_stat;
extern struct static_key_true vm_numa_stat_key;
int sysctl_vm_numa_stat_handler(struct ctl_table *table, int write,
  void *buffer, size_t *length, loff_t *ppos);


struct reclaim_stat {
 unsigned nr_dirty;
 unsigned nr_unqueued_dirty;
 unsigned nr_congested;
 unsigned nr_writeback;
 unsigned nr_immediate;
 unsigned nr_pageout;
 unsigned nr_activate[2];
 unsigned nr_ref_keep;
 unsigned nr_unmap_fail;
 unsigned nr_lazyfree_fail;
};

enum writeback_stat_item {
 NR_DIRTY_THRESHOLD,
 NR_DIRTY_BG_THRESHOLD,
 NR_VM_WRITEBACK_STAT_ITEMS,
};
# 54 "./include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 140 "./include/linux/vmstat.h"
extern atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];
extern atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS];
extern atomic_long_t vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_numa_event_add(long x, struct zone *zone,
    enum numa_stat_item item)
{
 atomic_long_add(x, &zone->vm_numa_event[item]);
 atomic_long_add(x, &vm_numa_event[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_numa_event_state(struct zone *zone,
     enum numa_stat_item item)
{
 return atomic_long_read(&zone->vm_numa_event[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
global_numa_event_state(enum numa_stat_item item)
{
 return atomic_long_read(&vm_numa_event[item]);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_zone_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_page_state_add(long x, struct pglist_data *pgdat,
     enum node_stat_item item)
{
 atomic_long_add(x, &pgdat->vm_stat[item]);
 atomic_long_add(x, &vm_node_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_zone_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_zone_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long global_node_page_state_pages(enum node_stat_item item)
{
 long x = atomic_long_read(&vm_node_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_node_page_state(enum node_stat_item item)
{
 ((void)(sizeof(( long)(vmstat_item_in_bytes(item)))));

 return global_node_page_state_pages(item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->per_cpu_zonestats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((zone->per_cpu_zonestats))) *)((zone->per_cpu_zonestats))); (typeof((typeof(*((zone->per_cpu_zonestats))) *)((zone->per_cpu_zonestats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__count_numa_event(struct zone *zone, enum numa_stat_item item)
{
 struct per_cpu_zonestat *pzstats = zone->per_cpu_zonestats;

 do { do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(pzstats->vm_numa_event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__count_numa_events(struct zone *zone, enum numa_stat_item item, long delta)
{
 struct per_cpu_zonestat *pzstats = zone->per_cpu_zonestats;

 do { do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(pzstats->vm_numa_event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern unsigned long sum_zone_node_page_state(int node,
           enum zone_stat_item item);
extern unsigned long sum_zone_numa_event_state(int node, enum numa_stat_item item);
extern unsigned long node_page_state(struct pglist_data *pgdat,
      enum node_stat_item item);
extern unsigned long node_page_state_pages(struct pglist_data *pgdat,
        enum node_stat_item item);
extern void fold_vm_numa_events(void);
# 276 "./include/linux/vmstat.h"
void __mod_zone_page_state(struct zone *, enum zone_stat_item item, long);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void __mod_node_page_state(struct pglist_data *, enum node_stat_item item, long);
void __inc_node_page_state(struct page *, enum node_stat_item);
void __dec_node_page_state(struct page *, enum node_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
void inc_node_page_state(struct page *, enum node_stat_item);
void dec_node_page_state(struct page *, enum node_stat_item);

extern void inc_node_state(struct pglist_data *, enum node_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_node_state(struct pglist_data *, enum node_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_node_state(struct pglist_data *, enum node_stat_item);

void quiet_vmstat(void);
void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

struct ctl_table;
int vmstat_refresh(struct ctl_table *, int write, void *buffer, size_t *lenp,
  loff_t *ppos);

void drain_zonestat(struct zone *zone, struct per_cpu_zonestat *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
# 418 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __zone_stat_mod_folio(struct folio *folio,
  enum zone_stat_item item, long nr)
{
 __mod_zone_page_state(folio_zone(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __zone_stat_add_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __zone_stat_sub_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_stat_mod_folio(struct folio *folio,
  enum zone_stat_item item, long nr)
{
 mod_zone_page_state(folio_zone(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_stat_add_folio(struct folio *folio,
  enum zone_stat_item item)
{
 mod_zone_page_state(folio_zone(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_stat_sub_folio(struct folio *folio,
  enum zone_stat_item item)
{
 mod_zone_page_state(folio_zone(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_stat_mod_folio(struct folio *folio,
  enum node_stat_item item, long nr)
{
 __mod_node_page_state(folio_pgdat(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_stat_add_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_stat_sub_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_stat_mod_folio(struct folio *folio,
  enum node_stat_item item, long nr)
{
 mod_node_page_state(folio_pgdat(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_stat_add_folio(struct folio *folio,
  enum node_stat_item item)
{
 mod_node_page_state(folio_pgdat(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_stat_sub_folio(struct folio *folio,
  enum node_stat_item item)
{
 mod_node_page_state(folio_pgdat(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (false)
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *zone_stat_name(enum zone_stat_item item)
{
 return vmstat_text[item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *numa_stat_name(enum numa_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *node_stat_name(enum node_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      NR_VM_NUMA_EVENT_ITEMS +
      item];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *lru_list_name(enum lru_list lru)
{
 return node_stat_name(NR_LRU_BASE + lru) + 3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *writeback_stat_name(enum writeback_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      NR_VM_NUMA_EVENT_ITEMS +
      NR_VM_NODE_STAT_ITEMS +
      item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *vm_event_name(enum vm_event_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      NR_VM_NUMA_EVENT_ITEMS +
      NR_VM_NODE_STAT_ITEMS +
      NR_VM_WRITEBACK_STAT_ITEMS +
      item];
}




void __mod_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
   int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_state(struct lruvec *lruvec,
        enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_state(lruvec, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

void __mod_lruvec_page_state(struct page *page,
        enum node_stat_item idx, int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_page_state(struct page *page,
      enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_page_state(page, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 600 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __inc_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dec_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lruvec_stat_mod_folio(struct folio *folio,
        enum node_stat_item idx, int val)
{
 __mod_lruvec_page_state(&folio->page, idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lruvec_stat_add_folio(struct folio *folio,
        enum node_stat_item idx)
{
 __lruvec_stat_mod_folio(folio, idx, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lruvec_stat_sub_folio(struct folio *folio,
        enum node_stat_item idx)
{
 __lruvec_stat_mod_folio(folio, idx, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_stat_mod_folio(struct folio *folio,
      enum node_stat_item idx, int val)
{
 mod_lruvec_page_state(&folio->page, idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_stat_add_folio(struct folio *folio,
      enum node_stat_item idx)
{
 lruvec_stat_mod_folio(folio, idx, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_stat_sub_folio(struct folio *folio,
      enum node_stat_item idx)
{
 lruvec_stat_mod_folio(folio, idx, -folio_nr_pages(folio));
}
# 1722 "./include/linux/mm.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *lowmem_page_address(const struct page *page)
{
 return ((void *)((unsigned long)(((phys_addr_t)(({ const struct page *__pg = (page); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); })) << 14)) + ((0x9800000000000000UL) + (0UL)) - (0UL)));
}
# 1756 "./include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
bool folio_mapped(struct folio *folio);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_pfmemalloc(const struct page *page)
{





 return (uintptr_t)page->lru.next & ((((1UL))) << (1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_pfmemalloc(struct page *page)
{
 page->lru.next = (void *)((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_page_pfmemalloc(struct page *page)
{
 page->lru.next = ((void *)0);
}




extern void pagefault_out_of_memory(void);
# 1818 "./include/linux/mm.h"
extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);


extern bool can_do_mlock(void);



extern int user_shm_lock(size_t, struct ucounts *);
extern void user_shm_unlock(size_t, struct ucounts *);




struct zap_details {
 struct address_space *zap_mapping;
 struct page *single_page;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
zap_skip_check_mapping(struct zap_details *details, struct page *page)
{
 if (!details || !page)
  return false;

 return details->zap_mapping &&
     (details->zap_mapping != page_rmapping(page));
}

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
        pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
    unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
      unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);

struct mmu_notifier_range;

void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int
copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
int follow_invalidate_pte(struct mm_struct *mm, unsigned long address,
     struct mmu_notifier_range *range, pte_t **ptepp,
     pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pte(struct mm_struct *mm, unsigned long address,
        pte_t **ptepp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern vm_fault_t handle_mm_fault(struct vm_area_struct *vma,
      unsigned long address, unsigned int flags,
      struct pt_regs *regs);
extern int fixup_user_fault(struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
void unmap_mapping_page(struct page *page);
void unmap_mapping_pages(struct address_space *mapping,
  unsigned long start, unsigned long nr, bool even_cows);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
# 1923 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct mm_struct *mm, unsigned long addr,
         void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long pin_user_pages_remote(struct mm_struct *mm,
      unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long pin_user_pages(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);
long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);

int get_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);

int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc);
int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
   struct task_struct *task, bool bypass_rlim);

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

bool folio_mark_dirty(struct folio *folio);
bool set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
# 2004 "./include/linux/mm.h"
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         unsigned long cp_flags);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int get_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_user_page_fast_only(unsigned long addr,
   unsigned int gup_flags, struct page **pagep)
{
 return get_user_pages_fast_only(addr, 1, gup_flags, pagep) == 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

void mm_trace_rss_stat(struct mm_struct *mm, int member, long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 long count = atomic_long_add_return(value, &mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_inc_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_dec_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_rss) *)1 == (typeof(get_mm_rss(mm)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_rss) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(get_mm_rss(mm)) * 0l)) : (int *)8))))), ((mm->hiwater_rss) > (get_mm_rss(mm)) ? (mm->hiwater_rss) : (get_mm_rss(mm))), ({ typeof(mm->hiwater_rss) __UNIQUE_ID___x292 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID___y293 = (get_mm_rss(mm)); ((__UNIQUE_ID___x292) > (__UNIQUE_ID___y293) ? (__UNIQUE_ID___x292) : (__UNIQUE_ID___y293)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_vm) *)1 == (typeof(mm->total_vm) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_vm) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->total_vm) * 0l)) : (int *)8))))), ((mm->hiwater_vm) > (mm->total_vm) ? (mm->hiwater_vm) : (mm->total_vm)), ({ typeof(mm->hiwater_vm) __UNIQUE_ID___x294 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID___y295 = (mm->total_vm); ((__UNIQUE_ID___x294) > (__UNIQUE_ID___y295) ? (__UNIQUE_ID___x294) : (__UNIQUE_ID___y295)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);
# 2146 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_devmap(pte_t pte)
{
 return 0;
}


int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
      unsigned long address)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __pud_alloc(struct mm_struct *mm, p4d_t *p4d,
      unsigned long address)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_puds(struct mm_struct *mm) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_puds(struct mm_struct *mm) {}
# 2212 "./include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add(((((1UL) << 14) << 0) / sizeof(pmd_t)) * sizeof(pmd_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub(((((1UL) << 14) << 0) / sizeof(pmd_t)) * sizeof(pmd_t), &mm->pgtables_bytes);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_pgtables_bytes_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->pgtables_bytes, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mm_pgtables_bytes(const struct mm_struct *mm)
{
 return atomic_long_read(&mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_ptes(struct mm_struct *mm)
{
 atomic_long_add(((((1UL) << 14) << 0) / sizeof(pte_t)) * sizeof(pte_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_ptes(struct mm_struct *mm)
{
 atomic_long_sub(((((1UL) << 14) << 0) / sizeof(pte_t)) * sizeof(pte_t), &mm->pgtables_bytes);
}
# 2261 "./include/linux/mm.h"
int __pte_alloc(struct mm_struct *mm, pmd_t *pmd);
int __pte_alloc_kernel(pmd_t *pmd);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
  unsigned long address)
{
 return (__builtin_expect(!!(pgd_none(*pgd)), 0) && __p4d_alloc(mm, pgd, address)) ?
  ((void *)0) : p4d_offset(pgd, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_alloc(struct mm_struct *mm, p4d_t *p4d,
  unsigned long address)
{
 return (__builtin_expect(!!(p4d_none(*p4d)), 0) && __pud_alloc(mm, p4d, address)) ?
  ((void *)0) : pud_offset(p4d, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!(pud_none(*pud)), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): pmd_offset(pud, address);
}
# 2298 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptlock_cache_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_alloc(struct page *page)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptlock_free(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *ptlock_ptr(struct page *page)
{
 return &page->ptl;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr((({ unsigned long __pfn = (virt_to_phys((void *)((*pmd).pmd)) >> 14); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_init(struct page *page)
{







 ((void)(sizeof(( long)(*(unsigned long *)&page->ptl))));
 if (!ptlock_alloc(page))
  return false;
 do { spinlock_check(ptlock_ptr(page)); *(ptlock_ptr(page)) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 return true;
}
# 2351 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_init(void)
{
 ptlock_cache_init();
 pgtable_cache_init();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pte_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pte_page_dtor(struct page *page)
{
 ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}
# 2433 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pmd_ptlock_init(struct page *page) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_ptlock_free(struct page *page) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pmd_page_ctor(struct page *page)
{
 if (!pmd_ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pmd_page_dtor(struct page *page)
{
 pmd_ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lockptr(struct mm_struct *mm, pud_t *pud)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lock(struct mm_struct *mm, pud_t *pud)
{
 spinlock_t *ptl = pud_lockptr(mm, pud);

 spin_lock(ptl);
 return ptl;
}

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pagecache_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) free_area_init_memoryless_node(int nid);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, const char *s);

extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(void);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
 adjust_managed_page_count(page, 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel image (initmem)");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for (((nid)) = __first_node(&(node_states[N_ONLINE])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_ONLINE]))))
  phys_pages += ((__node_data[nid])->node_present_pages);

 return phys_pages;
}
# 2562 "./include/linux/mm.h"
void free_area_init(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
# 2579 "./include/linux/mm.h"
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) early_pfn_to_nid(unsigned long pfn);


extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_range(unsigned long, int, unsigned long,
  unsigned long, unsigned long, enum meminit_context,
  struct vmem_altmap *, int migratetype);
extern void setup_per_zone_wmarks(void);
extern void calculate_min_free_kbytes(void);
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((__format__(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);


extern int min_free_kbytes;
extern int watermark_boost_factor;
extern int watermark_scale_factor;
extern bool arch_has_descending_max_zone_pfns(void);


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 2649 "./include/linux/mm.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0));
}
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern int set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern int replace_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern struct file *get_task_exe_file(struct task_struct *task);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

unsigned long randomize_stack_top(unsigned long stack_top);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate, struct list_head *uf);
extern int __do_munmap(struct mm_struct *, unsigned long, size_t,
         struct list_head *uf, bool downgrade);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);
extern int do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior);


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((__warn_unused_result__)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((__warn_unused_result__)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((__warn_unused_result__)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long vm_unmapped_area(struct vm_unmapped_area_info *info);


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern vm_fault_t filemap_fault(struct vm_fault *vmf);
extern vm_fault_t filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);
# 2799 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *find_vma_intersection(struct mm_struct *mm,
          unsigned long start_addr,
          unsigned long end_addr)
{
 struct vm_area_struct *vma = find_vma(mm, start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}
# 2818 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *vma_lookup(struct mm_struct *mm, unsigned long addr)
{
 struct vm_area_struct *vma = find_vma(mm, addr);

 if (vma && addr < vma->vm_start)
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;

 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;

 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -((1UL) << 14);
 }
 return vm_end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 14;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2890 "./include/linux/mm.h"
void vma_set_file(struct vm_area_struct *vma, struct file *file);






struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int remap_pfn_range_notrack(struct vm_area_struct *vma, unsigned long addr,
  unsigned long pfn, unsigned long size, pgprot_t prot);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pages(struct vm_area_struct *vma, unsigned long addr,
   struct page **pages, unsigned long *num);
int vm_map_pages(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,
  unsigned long addr, pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_page(struct vm_area_struct *vma,
    unsigned long addr, struct page *page)
{
 int err = vm_insert_page(vma, addr, page);

 if (err == -12)
  return VM_FAULT_OOM;
 if (err < 0 && err != -16)
  return VM_FAULT_SIGBUS;

 return VM_FAULT_NOPAGE;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int io_remap_pfn_range(struct vm_area_struct *vma,
         unsigned long addr, unsigned long pfn,
         unsigned long size, pgprot_t prot)
{
 return remap_pfn_range(vma, addr, pfn, size, (prot));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_error(int err)
{
 if (err == -12)
  return VM_FAULT_OOM;
 return VM_FAULT_SIGBUS;
}

struct page *follow_page(struct vm_area_struct *vma, unsigned long address,
    unsigned int foll_flags);
# 3031 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
{
 if (vm_fault & VM_FAULT_OOM)
  return -12;
 if (vm_fault & (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))
  return (foll_flags & 0x100) ? -168 : -14;
 if (vm_fault & (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, unsigned long addr, void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);
extern int apply_to_existing_page_range(struct mm_struct *mm,
       unsigned long address, unsigned long size,
       pte_fn_t fn, void *data);

extern void init_mem_debugging_and_hardening(void);
# 3078 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled_static(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kernel_poison_pages(struct page *page, int nunmpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_poison_pages(struct page *page, int numpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_unpoison_pages(struct page *page, int numpages) { }


extern struct static_key_false init_on_alloc;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_alloc(gfp_t flags)
{
 if ((0 ? __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_alloc)->key) > 0; })), 1) : __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_alloc)->key) > 0; })), 0)))

  return true;
 return flags & (( gfp_t)0x100u);
}

extern struct static_key_false init_on_free;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_free(void)
{
 return (0 ? __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_free)->key) > 0; })), 1) : __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_free)->key) > 0; })), 0));

}

extern bool _debug_pagealloc_enabled_early;
extern struct static_key_false _debug_pagealloc_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled(void)
{
 return 0 &&
  _debug_pagealloc_enabled_early;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled_static(void)
{
 if (!0)
  return false;

 return __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&_debug_pagealloc_enabled)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&_debug_pagealloc_enabled)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&_debug_pagealloc_enabled)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&_debug_pagealloc_enabled)->key) > 0; })), 0);
}
# 3141 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_map_pages(struct page *page, int numpages) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_unmap_pages(struct page *page, int numpages) {}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area_no_mm(unsigned long addr) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area(struct mm_struct *mm, unsigned long addr)
{
 return 0;
}


extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);

void print_vma_addr(char *prefix, unsigned long rip);






int vmemmap_remap_free(unsigned long start, unsigned long end,
         unsigned long reuse);
int vmemmap_remap_alloc(unsigned long start, unsigned long end,
   unsigned long reuse, gfp_t gfp_mask);

void *sparse_buffer_alloc(unsigned long size);
struct page * __populate_section_memmap(unsigned long pfn,
  unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
p4d_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(p4d_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node,
       struct vmem_altmap *altmap);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *vmemmap_alloc_block_buf(unsigned long size, int node,
         struct vmem_altmap *altmap);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node, struct vmem_altmap *altmap);
int vmemmap_populate(unsigned long start, unsigned long end, int node,
  struct vmem_altmap *altmap);
void vmemmap_populate_print_last(void);




void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int flags);
extern void memory_failure_queue(unsigned long pfn, int flags);
extern void memory_failure_queue_kick(int cpu);
extern int unpoison_memory(unsigned long pfn);
extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p);
extern atomic_long_t num_poisoned_pages __attribute__((__section__(".data..read_mostly")));
extern int soft_offline_page(unsigned long pfn, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_DAX,
 MF_MSG_UNSPLIT_THP,
 MF_MSG_UNKNOWN,
};
# 3324 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int debug_guardpage_minorder(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_guardpage_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_guard(struct page *page) { return false; }



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_nr_node_ids(void);




extern int memcmp_pages(struct page *page1, struct page *page2);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pages_identical(struct page *page1, struct page *page2)
{
 return !memcmp_pages(page1, page2);
}
# 3354 "./include/linux/mm.h"
extern int sysctl_nr_trim_pages;


void mem_dump_obj(void *object);
# 3370 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seal_check_future_write(int seals, struct vm_area_struct *vma)
{
 if (seals & 0x0010) {




  if ((vma->vm_flags & 0x00000008) && (vma->vm_flags & 0x00000002))
   return -1;
# 3387 "./include/linux/mm.h"
  if (vma->vm_flags & 0x00000008)
   vma->vm_flags &= ~(0x00000020);
 }

 return 0;
}
# 16 "arch/mips/kvm/tlb.c" 2
# 1 "./include/linux/delay.h" 1
# 24 "./include/linux/delay.h"
extern unsigned long loops_per_jiffy;

# 1 "./arch/mips/include/asm/delay.h" 1
# 16 "./arch/mips/include/asm/delay.h"
extern void __delay(unsigned long loops);
extern void __ndelay(unsigned long ns);
extern void __udelay(unsigned long us);
# 27 "./include/linux/delay.h" 2
# 56 "./include/linux/delay.h"
extern unsigned long lpj_fine;
void calibrate_delay(void);
void __attribute__((weak)) calibration_delay_done(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fsleep(unsigned long usecs)
{
 if (usecs <= 10)
  __udelay(usecs);
 else if (usecs <= 20000)
  usleep_range(usecs, 2 * usecs);
 else
  msleep((((usecs) + (1000) - 1) / (1000)));
}
# 17 "arch/mips/kvm/tlb.c" 2

# 1 "./include/linux/kvm_host.h" 1






# 1 "./include/linux/hardirq.h" 1




# 1 "./include/linux/context_tracking_state.h" 1





# 1 "./include/linux/static_key.h" 1
# 7 "./include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 49 "./include/linux/context_tracking_state.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled_cpu(int cpu) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled_this_cpu(void) { return false; }
# 6 "./include/linux/hardirq.h" 2


# 1 "./include/linux/ftrace_irq.h" 1
# 15 "./include/linux/ftrace_irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_enter(void)
{
# 25 "./include/linux/ftrace_irq.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_exit(void)
{
# 37 "./include/linux/ftrace_irq.h"
}
# 9 "./include/linux/hardirq.h" 2

# 1 "./include/linux/vtime.h" 1
# 28 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }
# 41 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_irq(struct task_struct *tsk, unsigned int offset) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_softirq(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_hardirq(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_flush(struct task_struct *tsk) { }
# 116 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vtime_accounting_enabled_this_cpu(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_task_switch(struct task_struct *prev) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void vtime_account_guest_enter(void)
{
 (current_thread_info()->task)->flags |= 0x00000001;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void vtime_account_guest_exit(void)
{
 (current_thread_info()->task)->flags &= ~0x00000001;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqtime_account_irq(struct task_struct *tsk, unsigned int offset) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_softirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << (0 + 8)));
 irqtime_account_irq(tsk, (1UL << (0 + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_softirq_exit(struct task_struct *tsk)
{
 vtime_account_softirq(tsk);
 irqtime_account_irq(tsk, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_hardirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
 irqtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_hardirq_exit(struct task_struct *tsk)
{
 vtime_account_hardirq(tsk);
 irqtime_account_irq(tsk, 0);
}
# 11 "./include/linux/hardirq.h" 2
# 1 "./arch/mips/include/asm/hardirq.h" 1
# 13 "./arch/mips/include/asm/hardirq.h"
extern void ack_bad_irq(unsigned int irq);


# 1 "./include/asm-generic/hardirq.h" 1







typedef struct {
 unsigned int __softirq_pending;



} __attribute__((__aligned__((1 << 6)))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << 6))));

# 1 "./include/linux/irq.h" 1
# 16 "./include/linux/irq.h"
# 1 "./include/linux/irqhandler.h" 1
# 10 "./include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
# 17 "./include/linux/irq.h" 2
# 1 "./include/linux/irqreturn.h" 1
# 11 "./include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 18 "./include/linux/irq.h" 2
# 1 "./include/linux/irqnr.h" 1




# 1 "./include/uapi/linux/irqnr.h" 1
# 6 "./include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 19 "./include/linux/irq.h" 2


# 1 "./include/linux/slab.h" 1
# 138 "./include/linux/slab.h"
struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init(void);
bool slab_is_available(void);

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *s);
int kmem_cache_shrink(struct kmem_cache *s);
# 182 "./include/linux/slab.h"
void * __attribute__((__warn_unused_result__)) krealloc(const void *objp, size_t new_size, gfp_t flags) __attribute__((__alloc_size__(2))) __attribute__((__malloc__));
void kfree(const void *objp);
void kfree_sensitive(const void *objp);
size_t __ksize(const void *objp);
size_t ksize(const void *objp);

bool kmem_valid_obj(void *object);
void kmem_dump_obj(void *object);



void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
   bool to_user);
# 311 "./include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,

 KMALLOC_DMA = KMALLOC_NORMAL,




 KMALLOC_CGROUP,

 KMALLOC_RECLAIM,



 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][(14 + 1) + 1];
# 340 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{




 if (__builtin_expect(!!((flags & ((( gfp_t)0x10u) | (0 ? (( gfp_t)0x01u) : 0) | (1 ? (( gfp_t)0x400000u) : 0))) == 0), 1))
  return KMALLOC_NORMAL;
# 356 "./include/linux/slab.h"
 if (0 && (flags & (( gfp_t)0x01u)))
  return KMALLOC_DMA;
 if (!1 || (flags & (( gfp_t)0x10u)))
  return KMALLOC_RECLAIM;
 else
  return KMALLOC_CGROUP;
}
# 377 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int __kmalloc_index(size_t size,
          bool size_is_constant)
{
 if (!size)
  return 0;

 if (size <= (1 << 3))
  return 3;

 if ((1 << 3) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 3) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;

 if ((0 || 140000 >= 110000)
     && !0 && size_is_constant)
  do { __attribute__((__noreturn__)) extern void __compiletime_assert_296(void) __attribute__((__error__("unexpected size in kmalloc_index()"))); if (!(!(1))) __compiletime_assert_296(); } while (0);
 else
  BUG();


 return -1;
}



void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *s, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *s, void *objp);
# 437 "./include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *s, size_t size, void **p);
int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size, void **p);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}


void *__kmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__assume_aligned__(__alignof__(unsigned long long))))
        __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node) __attribute__((__assume_aligned__(__alignof__(unsigned long long))))
          __attribute__((__malloc__));
# 467 "./include/linux/slab.h"
extern void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t flags, size_t size)
       __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__alloc_size__(3))) __attribute__((__malloc__));


extern void *kmem_cache_alloc_node_trace(struct kmem_cache *s, gfp_t gfpflags,
      int node, size_t size) __attribute__((__assume_aligned__(__alignof__(unsigned long long))))
        __attribute__((__alloc_size__(4))) __attribute__((__malloc__));
# 502 "./include/linux/slab.h"
extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 14))))
          __attribute__((__alloc_size__(1))) __attribute__((__malloc__));


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
    __attribute__((__assume_aligned__(((1UL) << 14)))) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
# 516 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 576 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << (14 + 1)))
   return kmalloc_large(size, flags);

  index = __kmalloc_index(size, true);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (14 + 1))) {
  unsigned int i = __kmalloc_index(size, true);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}
# 640 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(2, 3))) __attribute__((__malloc__)) void * __attribute__((__warn_unused_result__)) krealloc_array(void *p,
            size_t new_n,
            size_t new_size,
            gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return krealloc(p, bytes, flags);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 672 "./include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)
       __attribute__((__alloc_size__(1))) __attribute__((__malloc__));



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
         int node)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}



extern void *__kmalloc_node_track_caller(size_t size, gfp_t flags, int node,
      unsigned long caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
# 712 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

extern void *kvmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kvmalloc(size_t size, gfp_t flags)
{
 return kvmalloc_node(size, flags, (-1));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kvzalloc_node(size_t size, gfp_t flags, int node)
{
 return kvmalloc_node(size, flags | (( gfp_t)0x100u), node);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kvzalloc(size_t size, gfp_t flags)
{
 return kvmalloc(size, flags | (( gfp_t)0x100u));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return kvmalloc(bytes, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kvcalloc(size_t n, size_t size, gfp_t flags)
{
 return kvmalloc_array(n, size, flags | (( gfp_t)0x100u));
}

extern void *kvrealloc(const void *p, size_t oldsize, size_t newsize, gfp_t flags)
        __attribute__((__alloc_size__(3))) __attribute__((__malloc__));
extern void kvfree(const void *addr);
extern void kvfree_sensitive(const void *addr, size_t len);

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init_late(void);
# 22 "./include/linux/irq.h" 2

# 1 "./arch/mips/include/asm/irq.h" 1
# 15 "./arch/mips/include/asm/irq.h"
# 1 "./arch/mips/include/asm/mipsmtregs.h" 1
# 182 "./arch/mips/include/asm/mipsmtregs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned core_nvpes(void)
{
 unsigned conf0;

 if (!0)
  return 1;

 conf0 = ({ unsigned int __res; if (2 == 0) __asm__ __volatile__( "mfc0\t%0, " "$0" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$0" ", " "2" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
 return ((conf0 & ( (unsigned long)(0xf) << 10)) >> 10) + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dvpe(void)
{
 int res = 0;

 __asm__ __volatile__(
 "	.set	push						\n"
 "	.set	noreorder					\n"
 "	.set	noat						\n"
 "	.set	mips32r2					\n"
 "	.word	0x41610001		# dvpe $1		\n"
 "	move	%0, $1						\n"
 "	ehb							\n"
 "	.set	pop						\n"
 : "=r" (res));

 do { } while (0);

 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_evpe(void)
{
 __asm__ __volatile__(
 "	.set	push						\n"
 "	.set	noreorder					\n"
 "	.set	noat						\n"
 "	.set	mips32r2					\n"
 "	.word	0x41600021		# evpe			\n"
 "	ehb							\n"
 "	.set	pop						\n");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void evpe(int previous)
{
 if ((previous & ((unsigned long)(1))))
  __raw_evpe();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dmt(void)
{
 int res;

 __asm__ __volatile__(
 "	.set	push						\n"
 "	.set	mips32r2					\n"
 "	.set	noat						\n"
 "	.word	0x41610BC1			# dmt $1	\n"
 "	ehb							\n"
 "	move	%0, $1						\n"
 "	.set	pop						\n"
 : "=r" (res));

 do { } while (0);

 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_emt(void)
{
 __asm__ __volatile__(
 "	.set	push						\n"
 "	.set	noreorder					\n"
 "	.set	mips32r2					\n"
 "	.word	0x41600be1			# emt		\n"
 "	ehb							\n"
 "	.set	pop");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void emt(int previous)
{
 if ((previous & ((unsigned long)(1) << 15)))
  __raw_emt();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ehb(void)
{
 __asm__ __volatile__(
 "	.set	push					\n"
 "	.set	mips32r2				\n"
 "	ehb						\n"
 "	.set	pop					\n");
}
# 419 "./arch/mips/include/asm/mipsmtregs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int set_c0_mvpcontrol(unsigned int set) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$0" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$0" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res | set; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$0" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$0" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int clear_c0_mvpcontrol(unsigned int clear) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$0" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$0" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~clear; do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$0" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$0" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int change_c0_mvpcontrol(unsigned int change, unsigned int val) { unsigned int res, new; res = ({ unsigned int __res; if (1 == 0) __asm__ __volatile__( "mfc0\t%0, " "$0" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$0" ", " "1" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }); new = res & ~change; new |= (val & change); do { if (1 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$0" "\n\t" : : "Jr" ((unsigned int)(new))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$0" ", " "1" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(new))); } while (0); return res; }
# 16 "./arch/mips/include/asm/irq.h" 2

# 1 "./arch/mips/include/asm/mach-loongson64/irq.h" 1
# 13 "./arch/mips/include/asm/mach-loongson64/irq.h"
# 1 "./arch/mips/include/asm/mach-generic/irq.h" 1
# 14 "./arch/mips/include/asm/mach-loongson64/irq.h" 2
# 18 "./arch/mips/include/asm/irq.h" 2




extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_IRQ(void);
extern void *irq_stack[16];
# 39 "./arch/mips/include/asm/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool on_irq_stack(int cpu, unsigned long sp)
{
 unsigned long low = (unsigned long)irq_stack[cpu];
 unsigned long high = low + (((1UL) << 14) << (0));

 return (low <= sp && sp <= high);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_canonicalize(int irq)
{
 return ((irq == 0 + 2) ? 0 + 9 : irq);
}




           void plat_irq_dispatch(void);

extern void do_IRQ(unsigned int irq);

struct irq_domain;
extern void do_domain_IRQ(struct irq_domain *domain, unsigned int irq);

extern void arch_init_irq(void);
extern void spurious_interrupt(void);

extern int allocate_irqno(void);
extern void alloc_legacy_irqno(void);
extern void free_irqno(unsigned int irq);
# 77 "./arch/mips/include/asm/irq.h"
extern int cp0_compare_irq;
extern int cp0_compare_irq_shift;
extern int cp0_perfcount_irq;
extern int cp0_fdc_irq;

extern int get_c0_fdc_int(void);

void arch_trigger_cpumask_backtrace(const struct cpumask *mask,
        bool exclude_self);
# 24 "./include/linux/irq.h" 2

# 1 "./arch/mips/include/asm/irq_regs.h" 1
# 13 "./arch/mips/include/asm/irq_regs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pt_regs *get_irq_regs(void)
{
 return current_thread_info()->regs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = get_irq_regs();
 current_thread_info()->regs = new_regs;

 return old_regs;
}
# 26 "./include/linux/irq.h" 2

struct seq_file;
struct module;
struct msi_msg;
struct irq_affinity_desc;
enum irqchip_irq_state;
# 77 "./include/linux/irq.h"
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
 IRQ_DISABLE_UNLAZY = (1 << 19),
 IRQ_HIDDEN = (1 << 20),
 IRQ_NO_DEBUG = (1 << 21),
};
# 123 "./include/linux/irq.h"
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
 IRQ_SET_MASK_OK_DONE,
};

struct msi_desc;
struct irq_domain;
# 147 "./include/linux/irq.h"
struct irq_common_data {
 unsigned int state_use_accessors;

 unsigned int node;

 void *handler_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;

 cpumask_var_t effective_affinity;




};
# 177 "./include/linux/irq.h"
struct irq_data {
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 struct irq_common_data *common;
 struct irq_chip *chip;
 struct irq_domain *domain;

 struct irq_data *parent_data;

 void *chip_data;
};
# 225 "./include/linux/irq.h"
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_ACTIVATED = (1 << 9),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
 IRQD_WAKEUP_ARMED = (1 << 19),
 IRQD_FORWARDED_TO_VCPU = (1 << 20),
 IRQD_AFFINITY_MANAGED = (1 << 21),
 IRQD_IRQ_STARTED = (1 << 22),
 IRQD_MANAGED_SHUTDOWN = (1 << 23),
 IRQD_SINGLE_TARGET = (1 << 24),
 IRQD_DEFAULT_TRIGGER_SET = (1 << 25),
 IRQD_CAN_RESERVE = (1 << 26),
 IRQD_MSI_NOMASK_QUIRK = (1 << 27),
 IRQD_HANDLE_ENFORCE_IRQCTX = (1 << 28),
 IRQD_AFFINITY_ON_ACTIVATE = (1 << 29),
 IRQD_IRQ_ENABLED_ON_SUSPEND = (1 << 30),
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_PENDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_per_cpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_PER_CPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_balance(struct irq_data *d)
{
 return !((((d)->common)->state_use_accessors) & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_mark_affinity_was_set(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_trigger_type_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irqd_get_trigger_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_TRIGGER_MASK;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= type & IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_level_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_LEVEL;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_single_target(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_single_target(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_handle_enforce_irqctx(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_handle_enforce_irqctx(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_enabled_on_suspend(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_ENABLED_ON_SUSPEND;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_wakeup_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_STATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MOVE_PCNTXT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_disabled(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_DISABLED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_masked(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_MASKED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_inprogress(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_INPROGRESS;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_wakeup_armed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_ARMED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_forwarded_to_vcpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_is_managed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_MANAGED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_activated(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_started(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_STARTED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_managed_and_shutdown(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MANAGED_SHUTDOWN;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_reserve(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_msi_nomask_quirk(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_affinity_on_activate(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_ON_ACTIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_on_activate(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_ON_ACTIVATE;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
# 505 "./include/linux/irq.h"
struct irq_chip {
 struct device *parent_device;
 const char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);





 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);
 int (*irq_request_resources)(struct irq_data *data);
 void (*irq_release_resources)(struct irq_data *data);

 void (*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
 void (*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

 int (*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
 int (*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

 int (*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

 void (*ipi_send_single)(struct irq_data *data, unsigned int cpu);
 void (*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

 int (*irq_nmi_setup)(struct irq_data *data);
 void (*irq_nmi_teardown)(struct irq_data *data);

 unsigned long flags;
};
# 575 "./include/linux/irq.h"
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
 IRQCHIP_EOI_THREADED = (1 << 6),
 IRQCHIP_SUPPORTS_LEVEL_MSI = (1 << 7),
 IRQCHIP_SUPPORTS_NMI = (1 << 8),
 IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND = (1 << 9),
 IRQCHIP_AFFINITY_PRE_STARTUP = (1 << 10),
};

# 1 "./include/linux/irqdesc.h" 1





# 1 "./include/linux/kobject.h" 1
# 20 "./include/linux/kobject.h"
# 1 "./include/linux/sysfs.h" 1
# 16 "./include/linux/sysfs.h"
# 1 "./include/linux/kernfs.h" 1
# 13 "./include/linux/kernfs.h"
# 1 "./include/linux/idr.h" 1
# 19 "./include/linux/idr.h"
struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_297(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_297(); } while (0); (*(const volatile typeof( _Generic((idr->idr_next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (idr->idr_next))) *)&(idr->idr_next)); });
}
# 79 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_298(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_298(); } while (0); do { *(volatile typeof(idr->idr_next) *)&(idr->idr_next) = (val); } while (0); } while (0);
}
# 112 "./include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((25 + 0)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock)); (typeof((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); } while (0);
}
# 240 "./include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "./include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 271 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 289 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 307 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (25 + 0)) << ( unsigned)((( xa_mark_t)0U)))))));
}
# 325 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 14 "./include/linux/kernfs.h" 2






struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};






enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 76 "./include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,




 KERNFS_ROOT_SUPPORT_USER_XATTR = 0x0008,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;




 unsigned long rev;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};
# 128 "./include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 140 "./include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;





 u64 id;

 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 173 "./include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_id_lowbits;
 u32 id_highbits;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 241 "./include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 257 "./include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);
};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_id_ino(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return id;
 else
  return (u32)id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kernfs_id_gen(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return 1;
 else
  return id >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_ino(struct kernfs_node *kn)
{
 return kernfs_id_ino(kn->id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_gen(struct kernfs_node *kn)
{
 return kernfs_id_gen(kn->id);
}
# 329 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/kernfs.h", 331, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_299(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&kn->dir.children)->rb_node) == sizeof(char) || sizeof((&kn->dir.children)->rb_node) == sizeof(short) || sizeof((&kn->dir.children)->rb_node) == sizeof(int) || sizeof((&kn->dir.children)->rb_node) == sizeof(long)) || sizeof((&kn->dir.children)->rb_node) == sizeof(long long))) __compiletime_assert_299(); } while (0); (*(const volatile typeof( _Generic(((&kn->dir.children)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&kn->dir.children)->rb_node))) *)&((&kn->dir.children)->rb_node)); }) == ((void *)0))); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/kernfs.h", 332, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *root,
         u64 id);
# 541 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}
# 17 "./include/linux/sysfs.h" 2




# 1 "./include/linux/kobject_ns.h" 1
# 19 "./include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "./include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "./include/linux/sysfs.h" 2



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "./include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 171 "./include/linux/sysfs.h"
struct file;
struct vm_area_struct;
struct address_space;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 struct address_space *(*f_mapping)(void);
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 238 "./include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
      struct kobject *target_kobj,
      const char *target_name,
      const char *symlink_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}

int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
       kgid_t kgid);
int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
       const char *name, kuid_t kuid, kgid_t kgid);
int sysfs_groups_change_owner(struct kobject *kobj,
         const struct attribute_group **groups,
         kuid_t kuid, kgid_t kgid);
int sysfs_group_change_owner(struct kobject *kobj,
        const struct attribute_group *groups, kuid_t kuid,
        kgid_t kgid);
__attribute__((__format__(printf, 2, 3)))
int sysfs_emit(char *buf, const char *fmt, ...);
__attribute__((__format__(printf, 3, 4)))
int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
# 604 "./include/linux/sysfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "./include/linux/kobject.h" 2


# 1 "./include/linux/kref.h" 1
# 19 "./include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 62 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 24 "./include/linux/kobject.h" 2
# 41 "./include/linux/kobject.h"
extern u64 uevent_seqnum;
# 53 "./include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 130 "./include/linux/kobject.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kobject_has_children(struct kobject *kobj)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/kobject.h", 132, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[64];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 191 "./include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); _Static_assert(__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) || __builtin_types_compatible_p(typeof(*(kobj)), typeof(void)), "pointer type mismatch in container_of()"); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 7 "./include/linux/irqdesc.h" 2






struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_domain;
struct pt_regs;
# 55 "./include/linux/irqdesc.h"
struct irq_desc {
 struct irq_common_data irq_common_data;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;
 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int tot_count;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 atomic_t threads_handled;
 int threads_handled_last;
 raw_spinlock_t lock;
 struct cpumask *percpu_enabled;
 const struct cpumask *percpu_affinity;

 const struct cpumask *affinity_hint;
 struct irq_affinity_notify *affinity_notify;




 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;

 unsigned int nr_actions;
 unsigned int no_suspend_depth;
 unsigned int cond_suspend_depth;
 unsigned int force_resume_depth;


 struct proc_dir_entry *dir;
# 101 "./include/linux/irqdesc.h"
 struct mutex request_mutex;
 int parent_irq;
 struct module *owner;
 const char *name;
} __attribute__((__aligned__(1 << (6))));





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_lock_sparse(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_unlock_sparse(void) { }
extern struct irq_desc irq_desc[(16 + 8 + 40 + 256)];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_desc_kstat_cpu(struct irq_desc *desc,
           unsigned int cpu)
{
 return desc->kstat_irqs ? *({ do { const void *__vpp_verify = (typeof((desc->kstat_irqs) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs))); (typeof((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_desc *irq_data_to_desc(struct irq_data *data)
{
 return ({ void *__mptr = (void *)(data->common); _Static_assert(__builtin_types_compatible_p(typeof(*(data->common)), typeof(((struct irq_desc *)0)->irq_common_data)) || __builtin_types_compatible_p(typeof(*(data->common)), typeof(void)), "pointer type mismatch in container_of()"); ((struct irq_desc *)(__mptr - __builtin_offsetof(struct irq_desc, irq_common_data))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_desc_get_irq(struct irq_desc *desc)
{
 return desc->irq_data.irq;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return desc->irq_data.chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return desc->irq_data.chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return desc->irq_common_data.handler_data;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void generic_handle_irq_desc(struct irq_desc *desc)
{
 desc->handle_irq(desc);
}

int handle_irq_desc(struct irq_desc *desc);
int generic_handle_irq(unsigned int irq);







int generic_handle_domain_irq(struct irq_domain *domain, unsigned int hwirq);
int generic_handle_domain_nmi(struct irq_domain *domain, unsigned int hwirq);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_desc_has_action(struct irq_desc *desc)
{
 return desc && desc->action != ((void *)0);
}
# 190 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_handler_locked(struct irq_data *data,
       irq_flow_handler_t handler)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
}
# 210 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_chip_handler_name_locked(struct irq_data *data, struct irq_chip *chip,
     irq_flow_handler_t handler, const char *name)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
 desc->name = name;
 data->chip = chip;
}

bool irq_check_status_bit(unsigned int irq, unsigned int bitmask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_balancing_disabled(unsigned int irq)
{
 return irq_check_status_bit(irq, (IRQ_PER_CPU | IRQ_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_is_percpu(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_is_percpu_devid(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU_DEVID);
}

void __irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class)
{
 if (0)
  __irq_set_lockdep_class(irq, lock_class, request_class);
}
# 590 "./include/linux/irq.h" 2




# 1 "./arch/mips/include/asm/hw_irq.h" 1
# 13 "./arch/mips/include/asm/hw_irq.h"
extern atomic_t irq_err_count;
# 595 "./include/linux/irq.h" 2
# 606 "./include/linux/irq.h"
struct irqaction;
extern int setup_percpu_irq(unsigned int irq, struct irqaction *new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);





extern int irq_set_affinity_locked(struct irq_data *data,
       const struct cpumask *cpumask, bool force);
extern int irq_set_vcpu_affinity(unsigned int irq, void *vcpu_info);
# 635 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_move_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_move_masked_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_force_complete_move(struct irq_desc *desc) { }


extern int no_irq_affinity;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_set_parent(int irq, int parent_irq)
{
 return 0;
}






extern void handle_level_irq(struct irq_desc *desc);
extern void handle_fasteoi_irq(struct irq_desc *desc);
extern void handle_edge_irq(struct irq_desc *desc);
extern void handle_edge_eoi_irq(struct irq_desc *desc);
extern void handle_simple_irq(struct irq_desc *desc);
extern void handle_untracked_irq(struct irq_desc *desc);
extern void handle_percpu_irq(struct irq_desc *desc);
extern void handle_percpu_devid_irq(struct irq_desc *desc);
extern void handle_bad_irq(struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);

extern void handle_fasteoi_nmi(struct irq_desc *desc);
extern void handle_percpu_devid_fasteoi_nmi(struct irq_desc *desc);

extern int irq_chip_compose_msi_msg(struct irq_data *data, struct msi_msg *msg);
extern int irq_chip_pm_get(struct irq_data *data);
extern int irq_chip_pm_put(struct irq_data *data);

extern void handle_fasteoi_ack_irq(struct irq_desc *desc);
extern void handle_fasteoi_mask_irq(struct irq_desc *desc);
extern int irq_chip_set_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool val);
extern int irq_chip_get_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool *state);
extern void irq_chip_enable_parent(struct irq_data *data);
extern void irq_chip_disable_parent(struct irq_data *data);
extern void irq_chip_ack_parent(struct irq_data *data);
extern int irq_chip_retrigger_hierarchy(struct irq_data *data);
extern void irq_chip_mask_parent(struct irq_data *data);
extern void irq_chip_mask_ack_parent(struct irq_data *data);
extern void irq_chip_unmask_parent(struct irq_data *data);
extern void irq_chip_eoi_parent(struct irq_data *data);
extern int irq_chip_set_affinity_parent(struct irq_data *data,
     const struct cpumask *dest,
     bool force);
extern int irq_chip_set_wake_parent(struct irq_data *data, unsigned int on);
extern int irq_chip_set_vcpu_affinity_parent(struct irq_data *data,
          void *vcpu_info);
extern int irq_chip_set_type_parent(struct irq_data *data, unsigned int type);
extern int irq_chip_request_resources_parent(struct irq_data *data);
extern void irq_chip_release_resources_parent(struct irq_data *data);



extern void note_interrupt(struct irq_desc *desc, irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, ((void *)0));
}

extern int irq_set_percpu_devid(unsigned int irq);
extern int irq_set_percpu_devid_partition(unsigned int irq,
       const struct cpumask *affinity);
extern int irq_get_percpu_devid_partition(unsigned int irq,
       struct cpumask *affinity);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, ((void *)0));
}






void
irq_set_chained_handler_and_data(unsigned int irq, irq_flow_handler_t handle,
     void *data);

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->handler_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->common->handler_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->msi_desc : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct msi_desc *irq_data_get_msi_desc(struct irq_data *d)
{
 return d->common->msi_desc;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_common_data_get_node(struct irq_common_data *d)
{

 return d->node;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_data_get_node(struct irq_data *d)
{
 return irq_common_data_get_node(d->common);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_get_affinity_mask(int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? d->common->affinity : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_data_get_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct cpumask *irq_data_get_effective_affinity_mask(struct irq_data *d)
{
 return d->common->effective_affinity;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_data_update_effective_affinity(struct irq_data *d,
            const struct cpumask *m)
{
 cpumask_copy(d->common->effective_affinity, m);
}
# 916 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_get_effective_affinity_mask(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? irq_data_get_effective_affinity_mask(d) : ((void *)0);
}

unsigned int arch_dynirq_lower_bound(unsigned int from);

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
        struct module *owner,
        const struct irq_affinity_desc *affinity);

int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
      unsigned int cnt, int node, struct module *owner,
      const struct irq_affinity_desc *affinity);
# 964 "./include/linux/irq.h"
void irq_free_descs(unsigned int irq, unsigned int cnt);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}
# 984 "./include/linux/irq.h"
struct irq_chip_regs {
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;
};
# 1007 "./include/linux/irq.h"
struct irq_chip_type {
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;
};
# 1049 "./include/linux/irq.h"
struct irq_chip_generic {
 raw_spinlock_t lock;
 void *reg_base;
 u32 (*reg_readl)(void *addr);
 void (*reg_writel)(u32 val, void *addr);
 void (*suspend)(struct irq_chip_generic *gc);
 void (*resume)(struct irq_chip_generic *gc);
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[];
};
# 1082 "./include/linux/irq.h"
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
 IRQ_GC_BE_IO = 1 << 4,
};
# 1099 "./include/linux/irq.h"
struct irq_domain_chip_generic {
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[];
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_and_ack_set(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


int irq_map_generic_chip(struct irq_domain *d, unsigned int virq,
    irq_hw_number_t hw_irq);
struct irq_chip_generic *
irq_alloc_generic_chip(const char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *
devm_irq_alloc_generic_chip(struct device *dev, const char *name, int num_ct,
       unsigned int irq_base, void *reg_base,
       irq_flow_handler_t handler);
int devm_irq_setup_generic_chip(struct device *dev, struct irq_chip_generic *gc,
    u32 msk, enum irq_gc_flags flags,
    unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);

int __irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
         int num_ct, const char *name,
         irq_flow_handler_t handler,
         unsigned int clr, unsigned int set,
         enum irq_gc_flags flags);
# 1157 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_free_generic_chip(struct irq_chip_generic *gc)
{
 kfree(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_destroy_generic_chip(struct irq_chip_generic *gc,
         u32 msk, unsigned int clr,
         unsigned int set)
{
 irq_remove_generic_chip(gc, msk, clr, set);
 irq_free_generic_chip(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ void *__mptr = (void *)(d->chip); _Static_assert(__builtin_types_compatible_p(typeof(*(d->chip)), typeof(((struct irq_chip_type *)0)->chip)) || __builtin_types_compatible_p(typeof(*(d->chip)), typeof(void)), "pointer type mismatch in container_of()"); ((struct irq_chip_type *)(__mptr - __builtin_offsetof(struct irq_chip_type, chip))); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_gc_lock(struct irq_chip_generic *gc)
{
 _raw_spin_lock(&gc->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_gc_unlock(struct irq_chip_generic *gc)
{
 _raw_spin_unlock(&gc->lock);
}
# 1202 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_reg_writel(struct irq_chip_generic *gc,
      u32 val, int reg_offset)
{
 if (gc->reg_writel)
  gc->reg_writel(val, gc->reg_base + reg_offset);
 else
  writel(val, gc->reg_base + reg_offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irq_reg_readl(struct irq_chip_generic *gc,
    int reg_offset)
{
 if (gc->reg_readl)
  return gc->reg_readl(gc->reg_base + reg_offset);
 else
  return readl(gc->reg_base + reg_offset);
}

struct irq_matrix;
struct irq_matrix *irq_alloc_matrix(unsigned int matrix_bits,
        unsigned int alloc_start,
        unsigned int alloc_end);
void irq_matrix_online(struct irq_matrix *m);
void irq_matrix_offline(struct irq_matrix *m);
void irq_matrix_assign_system(struct irq_matrix *m, unsigned int bit, bool replace);
int irq_matrix_reserve_managed(struct irq_matrix *m, const struct cpumask *msk);
void irq_matrix_remove_managed(struct irq_matrix *m, const struct cpumask *msk);
int irq_matrix_alloc_managed(struct irq_matrix *m, const struct cpumask *msk,
    unsigned int *mapped_cpu);
void irq_matrix_reserve(struct irq_matrix *m);
void irq_matrix_remove_reserved(struct irq_matrix *m);
int irq_matrix_alloc(struct irq_matrix *m, const struct cpumask *msk,
       bool reserved, unsigned int *mapped_cpu);
void irq_matrix_free(struct irq_matrix *m, unsigned int cpu,
       unsigned int bit, bool managed);
void irq_matrix_assign(struct irq_matrix *m, unsigned int bit);
unsigned int irq_matrix_available(struct irq_matrix *m, bool cpudown);
unsigned int irq_matrix_allocated(struct irq_matrix *m);
unsigned int irq_matrix_reserved(struct irq_matrix *m);
void irq_matrix_debug_show(struct seq_file *sf, struct irq_matrix *m, int ind);



irq_hw_number_t ipi_get_hwirq(unsigned int irq, unsigned int cpu);
int __ipi_send_single(struct irq_desc *desc, unsigned int cpu);
int __ipi_send_mask(struct irq_desc *desc, const struct cpumask *dest);
int ipi_send_single(unsigned int virq, unsigned int cpu);
int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
# 18 "./include/asm-generic/hardirq.h" 2
# 17 "./arch/mips/include/asm/hardirq.h" 2
# 12 "./include/linux/hardirq.h" 2

extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_irq_enter_check_tick(void) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_irq_enter_check_tick(void)
{
 if (context_tracking_enabled())
  __rcu_irq_enter_check_tick();
}
# 55 "./include/linux/hardirq.h"
void irq_enter(void);



void irq_enter_rcu(void);
# 83 "./include/linux/hardirq.h"
void irq_exit(void);




void irq_exit_rcu(void);
# 99 "./include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 8 "./include/linux/kvm_host.h" 2





# 1 "./include/linux/sched/stat.h" 1
# 16 "./include/linux/sched/stat.h"
extern unsigned long total_forks;
extern int nr_threads;
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) process_counts;
extern int nr_processes(void);
extern unsigned int nr_running(void);
extern bool single_task_running(void);
extern unsigned int nr_iowait(void);
extern unsigned int nr_iowait_cpu(int cpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_info_on(void)
{
 return 1;
}
# 14 "./include/linux/kvm_host.h" 2



# 1 "./include/linux/mmu_notifier.h" 1
# 10 "./include/linux/mmu_notifier.h"
# 1 "./include/linux/interval_tree.h" 1






struct interval_tree_node {
 struct rb_node rb;
 unsigned long start;
 unsigned long last;
 unsigned long __subtree_last;
};

extern void
interval_tree_insert(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern void
interval_tree_remove(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern struct interval_tree_node *
interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);

extern struct interval_tree_node *
interval_tree_iter_next(struct interval_tree_node *node,
   unsigned long start, unsigned long last);
# 11 "./include/linux/mmu_notifier.h" 2

struct mmu_notifier_subscriptions;
struct mmu_notifier;
struct mmu_notifier_range;
struct mmu_interval_notifier;
# 51 "./include/linux/mmu_notifier.h"
enum mmu_notifier_event {
 MMU_NOTIFY_UNMAP = 0,
 MMU_NOTIFY_CLEAR,
 MMU_NOTIFY_PROTECTION_VMA,
 MMU_NOTIFY_PROTECTION_PAGE,
 MMU_NOTIFY_SOFT_DIRTY,
 MMU_NOTIFY_RELEASE,
 MMU_NOTIFY_MIGRATE,
 MMU_NOTIFY_EXCLUSIVE,
};



struct mmu_notifier_ops {
# 88 "./include/linux/mmu_notifier.h"
 void (*release)(struct mmu_notifier *subscription,
   struct mm_struct *mm);
# 100 "./include/linux/mmu_notifier.h"
 int (*clear_flush_young)(struct mmu_notifier *subscription,
     struct mm_struct *mm,
     unsigned long start,
     unsigned long end);






 int (*clear_young)(struct mmu_notifier *subscription,
      struct mm_struct *mm,
      unsigned long start,
      unsigned long end);







 int (*test_young)(struct mmu_notifier *subscription,
     struct mm_struct *mm,
     unsigned long address);





 void (*change_pte)(struct mmu_notifier *subscription,
      struct mm_struct *mm,
      unsigned long address,
      pte_t pte);
# 184 "./include/linux/mmu_notifier.h"
 int (*invalidate_range_start)(struct mmu_notifier *subscription,
          const struct mmu_notifier_range *range);
 void (*invalidate_range_end)(struct mmu_notifier *subscription,
         const struct mmu_notifier_range *range);
# 207 "./include/linux/mmu_notifier.h"
 void (*invalidate_range)(struct mmu_notifier *subscription,
     struct mm_struct *mm,
     unsigned long start,
     unsigned long end);
# 222 "./include/linux/mmu_notifier.h"
 struct mmu_notifier *(*alloc_notifier)(struct mm_struct *mm);
 void (*free_notifier)(struct mmu_notifier *subscription);
};
# 237 "./include/linux/mmu_notifier.h"
struct mmu_notifier {
 struct hlist_node hlist;
 const struct mmu_notifier_ops *ops;
 struct mm_struct *mm;
 struct callback_head rcu;
 unsigned int users;
};







struct mmu_interval_notifier_ops {
 bool (*invalidate)(struct mmu_interval_notifier *interval_sub,
      const struct mmu_notifier_range *range,
      unsigned long cur_seq);
};

struct mmu_interval_notifier {
 struct interval_tree_node interval_tree;
 const struct mmu_interval_notifier_ops *ops;
 struct mm_struct *mm;
 struct hlist_node deferred_item;
 unsigned long invalidate_seq;
};







struct mmu_notifier_range {
 struct vm_area_struct *vma;
 struct mm_struct *mm;
 unsigned long start;
 unsigned long end;
 unsigned flags;
 enum mmu_notifier_event event;
 void *owner;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_has_notifiers(struct mm_struct *mm)
{
 return __builtin_expect(!!(mm->notifier_subscriptions), 0);
}

struct mmu_notifier *mmu_notifier_get_locked(const struct mmu_notifier_ops *ops,
          struct mm_struct *mm);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mmu_notifier *
mmu_notifier_get(const struct mmu_notifier_ops *ops, struct mm_struct *mm)
{
 struct mmu_notifier *ret;

 mmap_write_lock(mm);
 ret = mmu_notifier_get_locked(ops, mm);
 mmap_write_unlock(mm);
 return ret;
}
void mmu_notifier_put(struct mmu_notifier *subscription);
void mmu_notifier_synchronize(void);

extern int mmu_notifier_register(struct mmu_notifier *subscription,
     struct mm_struct *mm);
extern int __mmu_notifier_register(struct mmu_notifier *subscription,
       struct mm_struct *mm);
extern void mmu_notifier_unregister(struct mmu_notifier *subscription,
        struct mm_struct *mm);

unsigned long
mmu_interval_read_begin(struct mmu_interval_notifier *interval_sub);
int mmu_interval_notifier_insert(struct mmu_interval_notifier *interval_sub,
     struct mm_struct *mm, unsigned long start,
     unsigned long length,
     const struct mmu_interval_notifier_ops *ops);
int mmu_interval_notifier_insert_locked(
 struct mmu_interval_notifier *interval_sub, struct mm_struct *mm,
 unsigned long start, unsigned long length,
 const struct mmu_interval_notifier_ops *ops);
void mmu_interval_notifier_remove(struct mmu_interval_notifier *interval_sub);
# 333 "./include/linux/mmu_notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_interval_set_seq(struct mmu_interval_notifier *interval_sub,
       unsigned long cur_seq)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_300(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(interval_sub->invalidate_seq) == sizeof(char) || sizeof(interval_sub->invalidate_seq) == sizeof(short) || sizeof(interval_sub->invalidate_seq) == sizeof(int) || sizeof(interval_sub->invalidate_seq) == sizeof(long)) || sizeof(interval_sub->invalidate_seq) == sizeof(long long))) __compiletime_assert_300(); } while (0); do { *(volatile typeof(interval_sub->invalidate_seq) *)&(interval_sub->invalidate_seq) = (cur_seq); } while (0); } while (0);
}
# 354 "./include/linux/mmu_notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
mmu_interval_read_retry(struct mmu_interval_notifier *interval_sub,
   unsigned long seq)
{
 return interval_sub->invalidate_seq != seq;
}
# 378 "./include/linux/mmu_notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
mmu_interval_check_retry(struct mmu_interval_notifier *interval_sub,
    unsigned long seq)
{

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_301(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(interval_sub->invalidate_seq) == sizeof(char) || sizeof(interval_sub->invalidate_seq) == sizeof(short) || sizeof(interval_sub->invalidate_seq) == sizeof(int) || sizeof(interval_sub->invalidate_seq) == sizeof(long)) || sizeof(interval_sub->invalidate_seq) == sizeof(long long))) __compiletime_assert_301(); } while (0); (*(const volatile typeof( _Generic((interval_sub->invalidate_seq), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (interval_sub->invalidate_seq))) *)&(interval_sub->invalidate_seq)); }) != seq;
}

extern void __mmu_notifier_subscriptions_destroy(struct mm_struct *mm);
extern void __mmu_notifier_release(struct mm_struct *mm);
extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
       unsigned long start,
       unsigned long end);
extern int __mmu_notifier_clear_young(struct mm_struct *mm,
          unsigned long start,
          unsigned long end);
extern int __mmu_notifier_test_young(struct mm_struct *mm,
         unsigned long address);
extern void __mmu_notifier_change_pte(struct mm_struct *mm,
          unsigned long address, pte_t pte);
extern int __mmu_notifier_invalidate_range_start(struct mmu_notifier_range *r);
extern void __mmu_notifier_invalidate_range_end(struct mmu_notifier_range *r,
      bool only_end);
extern void __mmu_notifier_invalidate_range(struct mm_struct *mm,
      unsigned long start, unsigned long end);
extern bool
mmu_notifier_range_update_to_read_only(const struct mmu_notifier_range *range);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
mmu_notifier_range_blockable(const struct mmu_notifier_range *range)
{
 return (range->flags & (1 << 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_release(struct mm_struct *mm)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_release(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_clear_flush_young(struct mm_struct *mm,
       unsigned long start,
       unsigned long end)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_clear_flush_young(mm, start, end);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_clear_young(struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_clear_young(mm, start, end);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_test_young(struct mm_struct *mm,
       unsigned long address)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_test_young(mm, address);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_change_pte(struct mm_struct *mm,
        unsigned long address, pte_t pte)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_change_pte(mm, address, pte);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_notifier_invalidate_range_start(struct mmu_notifier_range *range)
{
 do { do { } while (0); } while (0);

 do { } while (0);
 if (mm_has_notifiers(range->mm)) {
  range->flags |= (1 << 0);
  __mmu_notifier_invalidate_range_start(range);
 }
 do { } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
mmu_notifier_invalidate_range_start_nonblock(struct mmu_notifier_range *range)
{
 int ret = 0;

 do { } while (0);
 if (mm_has_notifiers(range->mm)) {
  range->flags &= ~(1 << 0);
  ret = __mmu_notifier_invalidate_range_start(range);
 }
 do { } while (0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_notifier_invalidate_range_end(struct mmu_notifier_range *range)
{
 if (mmu_notifier_range_blockable(range))
  do { do { } while (0); } while (0);

 if (mm_has_notifiers(range->mm))
  __mmu_notifier_invalidate_range_end(range, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_notifier_invalidate_range_only_end(struct mmu_notifier_range *range)
{
 if (mm_has_notifiers(range->mm))
  __mmu_notifier_invalidate_range_end(range, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_invalidate_range(struct mm_struct *mm,
      unsigned long start, unsigned long end)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_invalidate_range(mm, start, end);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_subscriptions_init(struct mm_struct *mm)
{
 mm->notifier_subscriptions = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_subscriptions_destroy(struct mm_struct *mm)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_subscriptions_destroy(mm);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_range_init(struct mmu_notifier_range *range,
        enum mmu_notifier_event event,
        unsigned flags,
        struct vm_area_struct *vma,
        struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 range->vma = vma;
 range->event = event;
 range->mm = mm;
 range->start = start;
 range->end = end;
 range->flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_range_init_owner(
   struct mmu_notifier_range *range,
   enum mmu_notifier_event event, unsigned int flags,
   struct vm_area_struct *vma, struct mm_struct *mm,
   unsigned long start, unsigned long end, void *owner)
{
 mmu_notifier_range_init(range, event, flags, vma, mm, start, end);
 range->owner = owner;
}
# 18 "./include/linux/kvm_host.h" 2

# 1 "./include/linux/msi.h" 1






# 1 "./arch/mips/include/generated/asm/msi.h" 1
# 1 "./include/asm-generic/msi.h" 1
# 13 "./include/asm-generic/msi.h"
struct msi_desc;
# 24 "./include/asm-generic/msi.h"
typedef struct msi_alloc_info {
 struct msi_desc *desc;
 irq_hw_number_t hwirq;
 unsigned long flags;
 union {
  unsigned long ul;
  void *ptr;
 } scratchpad[2];
} msi_alloc_info_t;
# 2 "./arch/mips/include/generated/asm/msi.h" 2
# 8 "./include/linux/msi.h" 2



typedef struct arch_msi_msg_addr_lo {
 u32 address_lo;
} __attribute__ ((packed)) arch_msi_msg_addr_lo_t;



typedef struct arch_msi_msg_addr_hi {
 u32 address_hi;
} __attribute__ ((packed)) arch_msi_msg_addr_hi_t;



typedef struct arch_msi_msg_data {
 u32 data;
} __attribute__ ((packed)) arch_msi_msg_data_t;
# 38 "./include/linux/msi.h"
struct msi_msg {
 union {
  u32 address_lo;
  arch_msi_msg_addr_lo_t arch_addr_lo;
 };
 union {
  u32 address_hi;
  arch_msi_msg_addr_hi_t arch_addr_hi;
 };
 union {
  u32 data;
  arch_msi_msg_data_t arch_data;
 };
};

extern int pci_msi_ignore_mask;

struct irq_data;
struct msi_desc;
struct pci_dev;
struct platform_msi_priv_data;
void __get_cached_msi_msg(struct msi_desc *entry, struct msi_msg *msg);

void get_cached_msi_msg(unsigned int irq, struct msi_msg *msg);






typedef void (*irq_write_msi_msg_t)(struct msi_desc *desc,
        struct msi_msg *msg);






struct platform_msi_desc {
 struct platform_msi_priv_data *msi_priv_data;
 u16 msi_index;
};





struct fsl_mc_msi_desc {
 u16 msi_index;
};





struct ti_sci_inta_msi_desc {
 u16 dev_index;
};
# 125 "./include/linux/msi.h"
struct msi_desc {

 struct list_head list;
 unsigned int irq;
 unsigned int nvec_used;
 struct device *dev;
 struct msi_msg msg;
 struct irq_affinity_desc *affinity;




 void (*write_msi_msg)(struct msi_desc *entry, void *data);
 void *write_msi_msg_data;

 union {

  struct {
   union {
    u32 msi_mask;
    u32 msix_ctrl;
   };
   struct {
    u8 is_msix : 1;
    u8 multiple : 3;
    u8 multi_cap : 3;
    u8 can_mask : 1;
    u8 is_64 : 1;
    u8 is_virtual : 1;
    u16 entry_nr;
    unsigned default_irq;
   } msi_attrib;
   union {
    u8 mask_pos;
    void *mask_base;
   };
  };
# 170 "./include/linux/msi.h"
  struct platform_msi_desc platform;
  struct fsl_mc_msi_desc fsl_mc;
  struct ti_sci_inta_msi_desc inta;
 };
};
# 204 "./include/linux/msi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const void *msi_desc_get_iommu_cookie(struct msi_desc *desc)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void msi_desc_set_iommu_cookie(struct msi_desc *desc,
          const void *iommu_cookie)
{
}







struct pci_dev *msi_desc_to_pci_dev(struct msi_desc *desc);
void *msi_desc_to_pci_sysdata(struct msi_desc *desc);
void pci_write_msi_msg(unsigned int irq, struct msi_msg *msg);
# 233 "./include/linux/msi.h"
struct msi_desc *alloc_msi_entry(struct device *dev, int nvec,
     const struct irq_affinity_desc *affinity);
void free_msi_entry(struct msi_desc *entry);
void __pci_read_msi_msg(struct msi_desc *entry, struct msi_msg *msg);
void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg);

void pci_msi_mask_irq(struct irq_data *data);
void pci_msi_unmask_irq(struct irq_data *data);

const struct attribute_group **msi_populate_sysfs(struct device *dev);
void msi_destroy_sysfs(struct device *dev,
         const struct attribute_group **msi_irq_groups);
# 255 "./include/linux/msi.h"
int arch_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc);
void arch_teardown_msi_irq(unsigned int irq);
int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type);
void arch_teardown_msi_irqs(struct pci_dev *dev);
# 276 "./include/linux/msi.h"
void arch_restore_msi_irqs(struct pci_dev *dev);
void default_restore_msi_irqs(struct pci_dev *dev);





struct irq_domain;
struct irq_domain_ops;
struct irq_chip;
struct device_node;
struct fwnode_handle;
struct msi_domain_info;
# 328 "./include/linux/msi.h"
struct msi_domain_ops {
 irq_hw_number_t (*get_hwirq)(struct msi_domain_info *info,
         msi_alloc_info_t *arg);
 int (*msi_init)(struct irq_domain *domain,
        struct msi_domain_info *info,
        unsigned int virq, irq_hw_number_t hwirq,
        msi_alloc_info_t *arg);
 void (*msi_free)(struct irq_domain *domain,
        struct msi_domain_info *info,
        unsigned int virq);
 int (*msi_check)(struct irq_domain *domain,
         struct msi_domain_info *info,
         struct device *dev);
 int (*msi_prepare)(struct irq_domain *domain,
           struct device *dev, int nvec,
           msi_alloc_info_t *arg);
 void (*msi_finish)(msi_alloc_info_t *arg, int retval);
 void (*set_desc)(msi_alloc_info_t *arg,
        struct msi_desc *desc);
 int (*handle_error)(struct irq_domain *domain,
     struct msi_desc *desc, int error);
 int (*domain_alloc_irqs)(struct irq_domain *domain,
          struct device *dev, int nvec);
 void (*domain_free_irqs)(struct irq_domain *domain,
         struct device *dev);
};
# 366 "./include/linux/msi.h"
struct msi_domain_info {
 u32 flags;
 struct msi_domain_ops *ops;
 struct irq_chip *chip;
 void *chip_data;
 irq_flow_handler_t handler;
 void *handler_data;
 const char *handler_name;
 void *data;
};


enum {




 MSI_FLAG_USE_DEF_DOM_OPS = (1 << 0),




 MSI_FLAG_USE_DEF_CHIP_OPS = (1 << 1),

 MSI_FLAG_MULTI_PCI_MSI = (1 << 2),

 MSI_FLAG_PCI_MSIX = (1 << 3),

 MSI_FLAG_ACTIVATE_EARLY = (1 << 4),




 MSI_FLAG_MUST_REACTIVATE = (1 << 5),

 MSI_FLAG_LEVEL_CAPABLE = (1 << 6),
};

int msi_domain_set_affinity(struct irq_data *data, const struct cpumask *mask,
       bool force);

struct irq_domain *msi_create_irq_domain(struct fwnode_handle *fwnode,
      struct msi_domain_info *info,
      struct irq_domain *parent);
int __msi_domain_alloc_irqs(struct irq_domain *domain, struct device *dev,
       int nvec);
int msi_domain_alloc_irqs(struct irq_domain *domain, struct device *dev,
     int nvec);
void __msi_domain_free_irqs(struct irq_domain *domain, struct device *dev);
void msi_domain_free_irqs(struct irq_domain *domain, struct device *dev);
struct msi_domain_info *msi_get_domain_info(struct irq_domain *domain);

struct irq_domain *platform_msi_create_irq_domain(struct fwnode_handle *fwnode,
        struct msi_domain_info *info,
        struct irq_domain *parent);
int platform_msi_domain_alloc_irqs(struct device *dev, unsigned int nvec,
       irq_write_msi_msg_t write_msi_msg);
void platform_msi_domain_free_irqs(struct device *dev);


int msi_domain_prepare_irqs(struct irq_domain *domain, struct device *dev,
       int nvec, msi_alloc_info_t *args);
int msi_domain_populate_irqs(struct irq_domain *domain, struct device *dev,
        int virq, int nvec, msi_alloc_info_t *args);
struct irq_domain *
__platform_msi_create_device_domain(struct device *dev,
        unsigned int nvec,
        bool is_tree,
        irq_write_msi_msg_t write_msi_msg,
        const struct irq_domain_ops *ops,
        void *host_data);






int platform_msi_domain_alloc(struct irq_domain *domain, unsigned int virq,
         unsigned int nr_irqs);
void platform_msi_domain_free(struct irq_domain *domain, unsigned int virq,
         unsigned int nvec);
void *platform_msi_get_host_data(struct irq_domain *domain);



void pci_msi_domain_write_msg(struct irq_data *irq_data, struct msi_msg *msg);
struct irq_domain *pci_msi_create_irq_domain(struct fwnode_handle *fwnode,
          struct msi_domain_info *info,
          struct irq_domain *parent);
int pci_msi_domain_check_cap(struct irq_domain *domain,
        struct msi_domain_info *info, struct device *dev);
u32 pci_msi_domain_get_msi_rid(struct irq_domain *domain, struct pci_dev *pdev);
struct irq_domain *pci_msi_get_device_domain(struct pci_dev *pdev);
bool pci_dev_has_special_msi_domain(struct pci_dev *pdev);
# 20 "./include/linux/kvm_host.h" 2

# 1 "./include/linux/vmalloc.h" 1
# 13 "./include/linux/vmalloc.h"
# 1 "./arch/mips/include/asm/vmalloc.h" 1
# 14 "./include/linux/vmalloc.h" 2

struct vm_area_struct;
struct notifier_block;
# 52 "./include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;



 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;

 struct rb_node rb_node;
 struct list_head list;







 union {
  unsigned long subtree_max_size;
  struct vm_struct *vm;
 };
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_p4d_supported(pgprot_t prot)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pud_supported(pgprot_t prot)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pmd_supported(pgprot_t prot)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_vmap_pte_range_map_size(unsigned long addr, unsigned long end,
        u64 pfn, unsigned int max_page_shift)
{
 return ((1UL) << 14);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_vmap_pte_supported_shift(unsigned long size)
{
 return 14;
}





extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count, int node);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vzalloc(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_user(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_node(unsigned long size, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vzalloc_node(unsigned long size, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_32(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_32_user(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *__vmalloc_node(unsigned long size, unsigned long align, gfp_t gfp_mask,
  int node, const void *caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *vmalloc_no_huge(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));

extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
void *vmap_pfn(unsigned long *pfns, unsigned int count, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
# 184 "./include/linux/vmalloc.h"
void arch_sync_kernel_mappings(unsigned long start, unsigned long end);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 14);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
void free_vm_area(struct vm_struct *area);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_area_hugepages(const void *addr)
{
# 223 "./include/linux/vmalloc.h"
 return false;

}


void vunmap_range(unsigned long addr, unsigned long end);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 244 "./include/linux/vmalloc.h"
extern long vread(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 282 "./include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);


bool vmalloc_dump_obj(void *object);
# 22 "./include/linux/kvm_host.h" 2




# 1 "./include/linux/context_tracking.h" 1
# 101 "./include/linux/context_tracking.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_exit(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_enter_irqoff(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_exit_irqoff(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum ctx_state exception_enter(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exception_exit(enum ctx_state prev_ctx) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum ctx_state ct_state(void) { return CONTEXT_DISABLED; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool context_tracking_guest_enter(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void context_tracking_guest_exit(void) { }
# 118 "./include/linux/context_tracking.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void context_tracking_init(void) { }
# 27 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/irqbypass.h" 1
# 13 "./include/linux/irqbypass.h"
struct irq_bypass_consumer;
# 45 "./include/linux/irqbypass.h"
struct irq_bypass_producer {
 struct list_head node;
 void *token;
 int irq;
 int (*add_consumer)(struct irq_bypass_producer *,
       struct irq_bypass_consumer *);
 void (*del_consumer)(struct irq_bypass_producer *,
        struct irq_bypass_consumer *);
 void (*stop)(struct irq_bypass_producer *);
 void (*start)(struct irq_bypass_producer *);
};
# 71 "./include/linux/irqbypass.h"
struct irq_bypass_consumer {
 struct list_head node;
 void *token;
 int (*add_producer)(struct irq_bypass_consumer *,
       struct irq_bypass_producer *);
 void (*del_producer)(struct irq_bypass_consumer *,
        struct irq_bypass_producer *);
 void (*stop)(struct irq_bypass_consumer *);
 void (*start)(struct irq_bypass_consumer *);
};

int irq_bypass_register_producer(struct irq_bypass_producer *);
void irq_bypass_unregister_producer(struct irq_bypass_producer *);
int irq_bypass_register_consumer(struct irq_bypass_consumer *);
void irq_bypass_unregister_consumer(struct irq_bypass_consumer *);
# 28 "./include/linux/kvm_host.h" 2


# 1 "./include/linux/nospec.h" 1
# 12 "./include/linux/nospec.h"
struct task_struct;
# 24 "./include/linux/nospec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long array_index_mask_nospec(unsigned long index,
          unsigned long size)
{





 __asm__ ("" : "=r" (index) : "0" (index));
 return ~(long)(index | (size - 1UL - index)) >> (64 - 1);
}
# 64 "./include/linux/nospec.h"
int arch_prctl_spec_ctrl_get(struct task_struct *task, unsigned long which);
int arch_prctl_spec_ctrl_set(struct task_struct *task, unsigned long which,
        unsigned long ctrl);

void arch_seccomp_spec_mitigate(struct task_struct *task);
# 31 "./include/linux/kvm_host.h" 2



# 1 "./include/uapi/linux/kvm.h" 1
# 15 "./include/uapi/linux/kvm.h"
# 1 "./arch/mips/include/uapi/asm/kvm.h" 1
# 34 "./arch/mips/include/uapi/asm/kvm.h"
struct kvm_regs {

 __u64 gpr[32];
 __u64 hi;
 __u64 lo;
 __u64 pc;
};




struct kvm_fpu {
};
# 205 "./arch/mips/include/uapi/asm/kvm.h"
struct kvm_debug_exit_arch {
 __u64 epc;
};


struct kvm_guest_debug_arch {
};


struct kvm_sync_regs {
};


struct kvm_sregs {
};

struct kvm_mips_interrupt {

 __u32 cpu;
 __u32 irq;
};
# 16 "./include/uapi/linux/kvm.h" 2
# 59 "./include/uapi/linux/kvm.h"
struct kvm_user_trace_setup {
 __u32 buf_size;
 __u32 buf_nr;
};
# 71 "./include/uapi/linux/kvm.h"
struct kvm_breakpoint {
 __u32 enabled;
 __u32 padding;
 __u64 address;
};

struct kvm_debug_guest {
 __u32 enabled;
 __u32 pad;
 struct kvm_breakpoint breakpoints[4];
 __u32 singlestep;
};







struct kvm_memory_region {
 __u32 slot;
 __u32 flags;
 __u64 guest_phys_addr;
 __u64 memory_size;
};


struct kvm_userspace_memory_region {
 __u32 slot;
 __u32 flags;
 __u64 guest_phys_addr;
 __u64 memory_size;
 __u64 userspace_addr;
};
# 115 "./include/uapi/linux/kvm.h"
struct kvm_irq_level {






 union {
  __u32 irq;
  __s32 status;
 };
 __u32 level;
};


struct kvm_irqchip {
 __u32 chip_id;
 __u32 pad;
        union {
  char dummy[512];






 } chip;
};


struct kvm_pit_config {
 __u32 flags;
 __u32 pad[15];
};



struct kvm_s390_skeys {
 __u64 start_gfn;
 __u64 count;
 __u64 skeydata_addr;
 __u32 flags;
 __u32 reserved[9];
};
# 178 "./include/uapi/linux/kvm.h"
struct kvm_s390_cmma_log {
 __u64 start_gfn;
 __u32 count;
 __u32 flags;
 union {
  __u64 remaining;
  __u64 mask;
 };
 __u64 values;
};

struct kvm_hyperv_exit {



 __u32 type;
 __u32 pad1;
 union {
  struct {
   __u32 msr;
   __u32 pad2;
   __u64 control;
   __u64 evt_page;
   __u64 msg_page;
  } synic;
  struct {
   __u64 input;
   __u64 result;
   __u64 params[2];
  } hcall;
  struct {
   __u32 msr;
   __u32 pad2;
   __u64 control;
   __u64 status;
   __u64 send_page;
   __u64 recv_page;
   __u64 pending_page;
  } syndbg;
 } u;
};

struct kvm_xen_exit {

 __u32 type;
 union {
  struct {
   __u32 longmode;
   __u32 cpl;
   __u64 input;
   __u64 result;
   __u64 params[6];
  } hcall;
 } u;
};
# 288 "./include/uapi/linux/kvm.h"
struct kvm_run {

 __u8 request_interrupt_window;
 __u8 immediate_exit;
 __u8 padding1[6];


 __u32 exit_reason;
 __u8 ready_for_interrupt_injection;
 __u8 if_flag;
 __u16 flags;


 __u64 cr8;
 __u64 apic_base;






 union {

  struct {
   __u64 hardware_exit_reason;
  } hw;

  struct {
   __u64 hardware_entry_failure_reason;
   __u32 cpu;
  } fail_entry;

  struct {
   __u32 exception;
   __u32 error_code;
  } ex;

  struct {


   __u8 direction;
   __u8 size;
   __u16 port;
   __u32 count;
   __u64 data_offset;
  } io;

  struct {
   struct kvm_debug_exit_arch arch;
  } debug;

  struct {
   __u64 phys_addr;
   __u8 data[8];
   __u32 len;
   __u8 is_write;
  } mmio;

  struct {
   __u64 nr;
   __u64 args[6];
   __u64 ret;
   __u32 longmode;
   __u32 pad;
  } hypercall;

  struct {
   __u64 rip;
   __u32 is_write;
   __u32 pad;
  } tpr_access;

  struct {
   __u8 icptcode;
   __u16 ipa;
   __u32 ipb;
  } s390_sieic;






  __u64 s390_reset_flags;

  struct {
   __u64 trans_exc_code;
   __u32 pgm_code;
  } s390_ucontrol;

  struct {
   __u32 dcrn;
   __u32 data;
   __u8 is_write;
  } dcr;

  struct {
   __u32 suberror;

   __u32 ndata;
   __u64 data[16];
  } internal;
# 407 "./include/uapi/linux/kvm.h"
  struct {
   __u32 suberror;
   __u32 ndata;
   __u64 flags;
   union {
    struct {
     __u8 insn_size;
     __u8 insn_bytes[15];
    };
   };

  } emulation_failure;

  struct {
   __u64 gprs[32];
  } osi;

  struct {
   __u64 nr;
   __u64 ret;
   __u64 args[9];
  } papr_hcall;

  struct {
   __u16 subchannel_id;
   __u16 subchannel_nr;
   __u32 io_int_parm;
   __u32 io_int_word;
   __u32 ipb;
   __u8 dequeued;
  } s390_tsch;

  struct {
   __u32 epr;
  } epr;

  struct {



   __u32 type;
   __u64 flags;
  } system_event;

  struct {
   __u64 addr;
   __u8 ar;
   __u8 reserved;
   __u8 fc;
   __u8 sel1;
   __u16 sel2;
  } s390_stsi;

  struct {
   __u8 vector;
  } eoi;

  struct kvm_hyperv_exit hyperv;

  struct {
   __u64 esr_iss;
   __u64 fault_ipa;
  } arm_nisv;

  struct {
   __u8 error;
   __u8 pad[7];



   __u32 reason;
   __u32 index;
   __u64 data;
  } msr;

  struct kvm_xen_exit xen;

  struct {
   unsigned long extension_id;
   unsigned long function_id;
   unsigned long args[6];
   unsigned long ret[2];
  } riscv_sbi;

  char padding[256];
 };
# 505 "./include/uapi/linux/kvm.h"
 __u64 kvm_valid_regs;
 __u64 kvm_dirty_regs;
 union {
  struct kvm_sync_regs regs;
  char padding[2048];
 } s;
};



struct kvm_coalesced_mmio_zone {
 __u64 addr;
 __u32 size;
 union {
  __u32 pad;
  __u32 pio;
 };
};

struct kvm_coalesced_mmio {
 __u64 phys_addr;
 __u32 len;
 union {
  __u32 pad;
  __u32 pio;
 };
 __u8 data[8];
};

struct kvm_coalesced_mmio_ring {
 __u32 first, last;
 struct kvm_coalesced_mmio coalesced_mmio[0];
};






struct kvm_translation {

 __u64 linear_address;


 __u64 physical_address;
 __u8 valid;
 __u8 writeable;
 __u8 usermode;
 __u8 pad[5];
};


struct kvm_s390_mem_op {

 __u64 gaddr;
 __u64 flags;
 __u32 size;
 __u32 op;
 __u64 buf;
 union {
  __u8 ar;
  __u32 sida_offset;
  __u8 reserved[32];
 };
};
# 580 "./include/uapi/linux/kvm.h"
struct kvm_interrupt {

 __u32 irq;
};


struct kvm_dirty_log {
 __u32 slot;
 __u32 padding1;
 union {
  void *dirty_bitmap;
  __u64 padding2;
 };
};


struct kvm_clear_dirty_log {
 __u32 slot;
 __u32 num_pages;
 __u64 first_page;
 union {
  void *dirty_bitmap;
  __u64 padding2;
 };
};


struct kvm_signal_mask {
 __u32 len;
 __u8 sigset[0];
};


struct kvm_tpr_access_ctl {
 __u32 enabled;
 __u32 flags;
 __u32 reserved[8];
};


struct kvm_vapic_addr {
 __u64 vapic_addr;
};
# 638 "./include/uapi/linux/kvm.h"
struct kvm_mp_state {
 __u32 mp_state;
};

struct kvm_s390_psw {
 __u64 mask;
 __u64 addr;
};
# 672 "./include/uapi/linux/kvm.h"
struct kvm_s390_interrupt {
 __u32 type;
 __u32 parm;
 __u64 parm64;
};

struct kvm_s390_io_info {
 __u16 subchannel_id;
 __u16 subchannel_nr;
 __u32 io_int_parm;
 __u32 io_int_word;
};

struct kvm_s390_ext_info {
 __u32 ext_params;
 __u32 pad;
 __u64 ext_params2;
};

struct kvm_s390_pgm_info {
 __u64 trans_exc_code;
 __u64 mon_code;
 __u64 per_address;
 __u32 data_exc_code;
 __u16 code;
 __u16 mon_class_nr;
 __u8 per_code;
 __u8 per_atmid;
 __u8 exc_access_id;
 __u8 per_access_id;
 __u8 op_access_id;





 __u8 flags;
 __u8 pad[2];
};

struct kvm_s390_prefix_info {
 __u32 address;
};

struct kvm_s390_extcall_info {
 __u16 code;
};

struct kvm_s390_emerg_info {
 __u16 code;
};


struct kvm_s390_stop_info {
 __u32 flags;
};

struct kvm_s390_mchk_info {
 __u64 cr14;
 __u64 mcic;
 __u64 failing_storage_address;
 __u32 ext_damage_code;
 __u32 pad;
 __u8 fixed_logout[16];
};

struct kvm_s390_irq {
 __u64 type;
 union {
  struct kvm_s390_io_info io;
  struct kvm_s390_ext_info ext;
  struct kvm_s390_pgm_info pgm;
  struct kvm_s390_emerg_info emerg;
  struct kvm_s390_extcall_info extcall;
  struct kvm_s390_prefix_info prefix;
  struct kvm_s390_stop_info stop;
  struct kvm_s390_mchk_info mchk;
  char reserved[64];
 } u;
};

struct kvm_s390_irq_state {
 __u64 buf;
 __u32 flags;
 __u32 len;
 __u32 reserved[4];
};






struct kvm_guest_debug {
 __u32 control;
 __u32 pad;
 struct kvm_guest_debug_arch arch;
};

enum {
 kvm_ioeventfd_flag_nr_datamatch,
 kvm_ioeventfd_flag_nr_pio,
 kvm_ioeventfd_flag_nr_deassign,
 kvm_ioeventfd_flag_nr_virtio_ccw_notify,
 kvm_ioeventfd_flag_nr_fast_mmio,
 kvm_ioeventfd_flag_nr_max,
};
# 788 "./include/uapi/linux/kvm.h"
struct kvm_ioeventfd {
 __u64 datamatch;
 __u64 addr;
 __u32 len;
 __s32 fd;
 __u32 flags;
 __u8 pad[36];
};
# 807 "./include/uapi/linux/kvm.h"
struct kvm_enable_cap {

 __u32 cap;
 __u32 flags;
 __u64 args[4];
 __u8 pad[64];
};





struct kvm_ppc_pvinfo {

 __u32 flags;
 __u32 hcall[4];
 __u8 pad[108];
};




struct kvm_ppc_one_page_size {
 __u32 page_shift;
 __u32 pte_enc;
};

struct kvm_ppc_one_seg_page_size {
 __u32 page_shift;
 __u32 slb_enc;
 struct kvm_ppc_one_page_size enc[8];
};





struct kvm_ppc_smmu_info {
 __u64 flags;
 __u32 slb_size;
 __u16 data_keys;
 __u16 instr_keys;
 struct kvm_ppc_one_seg_page_size sps[8];
};


struct kvm_ppc_resize_hpt {
 __u64 flags;
 __u32 shift;
 __u32 pad;
};
# 1137 "./include/uapi/linux/kvm.h"
struct kvm_irq_routing_irqchip {
 __u32 irqchip;
 __u32 pin;
};

struct kvm_irq_routing_msi {
 __u32 address_lo;
 __u32 address_hi;
 __u32 data;
 union {
  __u32 pad;
  __u32 devid;
 };
};

struct kvm_irq_routing_s390_adapter {
 __u64 ind_addr;
 __u64 summary_addr;
 __u64 ind_offset;
 __u32 summary_offset;
 __u32 adapter_id;
};

struct kvm_irq_routing_hv_sint {
 __u32 vcpu;
 __u32 sint;
};







struct kvm_irq_routing_entry {
 __u32 gsi;
 __u32 type;
 __u32 flags;
 __u32 pad;
 union {
  struct kvm_irq_routing_irqchip irqchip;
  struct kvm_irq_routing_msi msi;
  struct kvm_irq_routing_s390_adapter adapter;
  struct kvm_irq_routing_hv_sint hv_sint;
  __u32 pad[8];
 } u;
};

struct kvm_irq_routing {
 __u32 nr;
 __u32 flags;
 struct kvm_irq_routing_entry entries[0];
};
# 1233 "./include/uapi/linux/kvm.h"
struct kvm_irqfd {
 __u32 fd;
 __u32 gsi;
 __u32 flags;
 __u32 resamplefd;
 __u8 pad[16];
};
# 1248 "./include/uapi/linux/kvm.h"
struct kvm_clock_data {
 __u64 clock;
 __u32 flags;
 __u32 pad0;
 __u64 realtime;
 __u64 host_tsc;
 __u32 pad[4];
};






struct kvm_config_tlb {
 __u64 params;
 __u64 array;
 __u32 mmu_type;
 __u32 array_len;
};

struct kvm_dirty_tlb {
 __u64 bitmap;
 __u32 num_dirty;
};
# 1304 "./include/uapi/linux/kvm.h"
struct kvm_reg_list {
 __u64 n;
 __u64 reg[0];
};

struct kvm_one_reg {
 __u64 id;
 __u64 addr;
};


struct kvm_msi {
 __u32 address_lo;
 __u32 address_hi;
 __u32 data;
 __u32 flags;
 __u32 devid;
 __u8 pad[12];
};

struct kvm_arm_device_addr {
 __u64 id;
 __u64 addr;
};






struct kvm_create_device {
 __u32 type;
 __u32 fd;
 __u32 flags;
};

struct kvm_device_attr {
 __u32 flags;
 __u32 group;
 __u64 attr;
 __u64 addr;
};






enum kvm_device_type {
 KVM_DEV_TYPE_FSL_MPIC_20 = 1,

 KVM_DEV_TYPE_FSL_MPIC_42,

 KVM_DEV_TYPE_XICS,

 KVM_DEV_TYPE_VFIO,

 KVM_DEV_TYPE_ARM_VGIC_V2,

 KVM_DEV_TYPE_FLIC,

 KVM_DEV_TYPE_ARM_VGIC_V3,

 KVM_DEV_TYPE_ARM_VGIC_ITS,

 KVM_DEV_TYPE_XIVE,

 KVM_DEV_TYPE_ARM_PV_TIME,

 KVM_DEV_TYPE_MAX,
};

struct kvm_vfio_spapr_tce {
 __s32 groupfd;
 __s32 tablefd;
};
# 1401 "./include/uapi/linux/kvm.h"
struct kvm_s390_ucas_mapping {
 __u64 user_addr;
 __u64 vcpu_addr;
 __u64 length;
};
# 1585 "./include/uapi/linux/kvm.h"
struct kvm_enc_region {
 __u64 addr;
 __u64 size;
};
# 1613 "./include/uapi/linux/kvm.h"
struct kvm_s390_pv_sec_parm {
 __u64 origin;
 __u64 length;
};

struct kvm_s390_pv_unp {
 __u64 addr;
 __u64 size;
 __u64 tweak;
};

enum pv_cmd_id {
 KVM_PV_ENABLE,
 KVM_PV_DISABLE,
 KVM_PV_SET_SEC_PARMS,
 KVM_PV_UNPACK,
 KVM_PV_VERIFY,
 KVM_PV_PREP_RESET,
 KVM_PV_UNSHARE_ALL,
};

struct kvm_pv_cmd {
 __u32 cmd;
 __u16 rc;
 __u16 rrc;
 __u64 data;
 __u32 flags;
 __u32 reserved[3];
};
# 1656 "./include/uapi/linux/kvm.h"
struct kvm_xen_hvm_attr {
 __u16 type;
 __u16 pad[3];
 union {
  __u8 long_mode;
  __u8 vector;
  struct {
   __u64 gfn;
  } shared_info;
  __u64 pad[8];
 } u;
};
# 1681 "./include/uapi/linux/kvm.h"
struct kvm_xen_vcpu_attr {
 __u16 type;
 __u16 pad[3];
 union {
  __u64 gpa;
  __u64 pad[8];
  struct {
   __u64 state;
   __u64 state_entry_time;
   __u64 time_running;
   __u64 time_runnable;
   __u64 time_blocked;
   __u64 time_offline;
  } runstate;
 } u;
};
# 1707 "./include/uapi/linux/kvm.h"
enum sev_cmd_id {

 KVM_SEV_INIT = 0,
 KVM_SEV_ES_INIT,

 KVM_SEV_LAUNCH_START,
 KVM_SEV_LAUNCH_UPDATE_DATA,
 KVM_SEV_LAUNCH_UPDATE_VMSA,
 KVM_SEV_LAUNCH_SECRET,
 KVM_SEV_LAUNCH_MEASURE,
 KVM_SEV_LAUNCH_FINISH,

 KVM_SEV_SEND_START,
 KVM_SEV_SEND_UPDATE_DATA,
 KVM_SEV_SEND_UPDATE_VMSA,
 KVM_SEV_SEND_FINISH,

 KVM_SEV_RECEIVE_START,
 KVM_SEV_RECEIVE_UPDATE_DATA,
 KVM_SEV_RECEIVE_UPDATE_VMSA,
 KVM_SEV_RECEIVE_FINISH,

 KVM_SEV_GUEST_STATUS,
 KVM_SEV_DBG_DECRYPT,
 KVM_SEV_DBG_ENCRYPT,

 KVM_SEV_CERT_EXPORT,

 KVM_SEV_GET_ATTESTATION_REPORT,

 KVM_SEV_SEND_CANCEL,

 KVM_SEV_NR_MAX,
};

struct kvm_sev_cmd {
 __u32 id;
 __u64 data;
 __u32 error;
 __u32 sev_fd;
};

struct kvm_sev_launch_start {
 __u32 handle;
 __u32 policy;
 __u64 dh_uaddr;
 __u32 dh_len;
 __u64 session_uaddr;
 __u32 session_len;
};

struct kvm_sev_launch_update_data {
 __u64 uaddr;
 __u32 len;
};


struct kvm_sev_launch_secret {
 __u64 hdr_uaddr;
 __u32 hdr_len;
 __u64 guest_uaddr;
 __u32 guest_len;
 __u64 trans_uaddr;
 __u32 trans_len;
};

struct kvm_sev_launch_measure {
 __u64 uaddr;
 __u32 len;
};

struct kvm_sev_guest_status {
 __u32 handle;
 __u32 policy;
 __u32 state;
};

struct kvm_sev_dbg {
 __u64 src_uaddr;
 __u64 dst_uaddr;
 __u32 len;
};

struct kvm_sev_attestation_report {
 __u8 mnonce[16];
 __u64 uaddr;
 __u32 len;
};

struct kvm_sev_send_start {
 __u32 policy;
 __u64 pdh_cert_uaddr;
 __u32 pdh_cert_len;
 __u64 plat_certs_uaddr;
 __u32 plat_certs_len;
 __u64 amd_certs_uaddr;
 __u32 amd_certs_len;
 __u64 session_uaddr;
 __u32 session_len;
};

struct kvm_sev_send_update_data {
 __u64 hdr_uaddr;
 __u32 hdr_len;
 __u64 guest_uaddr;
 __u32 guest_len;
 __u64 trans_uaddr;
 __u32 trans_len;
};

struct kvm_sev_receive_start {
 __u32 handle;
 __u32 policy;
 __u64 pdh_uaddr;
 __u32 pdh_len;
 __u64 session_uaddr;
 __u32 session_len;
};

struct kvm_sev_receive_update_data {
 __u64 hdr_uaddr;
 __u32 hdr_len;
 __u64 guest_uaddr;
 __u32 guest_len;
 __u64 trans_uaddr;
 __u32 trans_len;
};





struct kvm_assigned_pci_dev {
 __u32 assigned_dev_id;
 __u32 busnr;
 __u32 devfn;
 __u32 flags;
 __u32 segnr;
 union {
  __u32 reserved[11];
 };
};
# 1861 "./include/uapi/linux/kvm.h"
struct kvm_assigned_irq {
 __u32 assigned_dev_id;
 __u32 host_irq;
 __u32 guest_irq;
 __u32 flags;
 union {
  __u32 reserved[12];
 };
};

struct kvm_assigned_msix_nr {
 __u32 assigned_dev_id;
 __u16 entry_nr;
 __u16 padding;
};


struct kvm_assigned_msix_entry {
 __u32 assigned_dev_id;
 __u32 gsi;
 __u16 entry;
 __u16 padding[3];
};
# 1895 "./include/uapi/linux/kvm.h"
struct kvm_hyperv_eventfd {
 __u32 conn_id;
 __s32 fd;
 __u32 flags;
 __u32 padding[3];
};
# 1950 "./include/uapi/linux/kvm.h"
struct kvm_dirty_gfn {
 __u32 flags;
 __u32 slot;
 __u64 offset;
};
# 1978 "./include/uapi/linux/kvm.h"
struct kvm_stats_header {
 __u32 flags;
 __u32 name_size;
 __u32 num_desc;
 __u32 id_offset;
 __u32 desc_offset;
 __u32 data_offset;
};
# 2023 "./include/uapi/linux/kvm.h"
struct kvm_stats_desc {
 __u32 flags;
 __s16 exponent;
 __u16 size;
 __u32 offset;
 __u32 bucket_size;
 char name[];
};
# 35 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/kvm_para.h" 1




# 1 "./include/uapi/linux/kvm_para.h" 1
# 37 "./include/uapi/linux/kvm_para.h"
# 1 "./arch/mips/include/generated/asm/kvm_para.h" 1
# 1 "./include/asm-generic/kvm_para.h" 1




# 1 "./include/uapi/asm-generic/kvm_para.h" 1
# 6 "./include/asm-generic/kvm_para.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_check_and_clear_guest_paused(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kvm_arch_para_features(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kvm_arch_para_hints(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_para_available(void)
{
 return false;
}
# 2 "./arch/mips/include/generated/asm/kvm_para.h" 2
# 38 "./include/uapi/linux/kvm_para.h" 2
# 6 "./include/linux/kvm_para.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_para_has_feature(unsigned int feature)
{
 return !!(kvm_arch_para_features() & (1UL << feature));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_para_has_hint(unsigned int feature)
{
 return !!(kvm_arch_para_hints() & (1UL << feature));
}
# 36 "./include/linux/kvm_host.h" 2

# 1 "./include/linux/kvm_types.h" 1





struct kvm;
struct kvm_async_pf;
struct kvm_device_ops;
struct kvm_interrupt;
struct kvm_irq_routing_table;
struct kvm_memory_slot;
struct kvm_one_reg;
struct kvm_run;
struct kvm_userspace_memory_region;
struct kvm_vcpu;
struct kvm_vcpu_init;
struct kvm_memslots;

enum kvm_mr_change;



# 1 "./arch/mips/include/asm/kvm_types.h" 1
# 24 "./include/linux/kvm_types.h" 2
# 36 "./include/linux/kvm_types.h"
typedef unsigned long gva_t;
typedef u64 gpa_t;
typedef u64 gfn_t;



typedef unsigned long hva_t;
typedef u64 hpa_t;
typedef u64 hfn_t;

typedef hfn_t kvm_pfn_t;

struct gfn_to_hva_cache {
 u64 generation;
 gpa_t gpa;
 unsigned long hva;
 unsigned long len;
 struct kvm_memory_slot *memslot;
};
# 64 "./include/linux/kvm_types.h"
struct kvm_mmu_memory_cache {
 int nobjs;
 gfp_t gfp_zero;
 struct kmem_cache *kmem_cache;
 void *objects[4];
};




struct kvm_vm_stat_generic {
 u64 remote_tlb_flush;
 u64 remote_tlb_flush_requests;
};

struct kvm_vcpu_stat_generic {
 u64 halt_successful_poll;
 u64 halt_attempted_poll;
 u64 halt_poll_invalid;
 u64 halt_wakeup;
 u64 halt_poll_success_ns;
 u64 halt_poll_fail_ns;
 u64 halt_wait_ns;
 u64 halt_poll_success_hist[32];
 u64 halt_poll_fail_hist[32];
 u64 halt_wait_hist[32];
};
# 38 "./include/linux/kvm_host.h" 2

# 1 "./arch/mips/include/asm/kvm_host.h" 1
# 16 "./arch/mips/include/asm/kvm_host.h"
# 1 "./include/linux/interrupt.h" 1
# 21 "./include/linux/interrupt.h"
# 1 "./arch/mips/include/generated/asm/sections.h" 1
# 1 "./include/asm-generic/sections.h" 1
# 35 "./include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];


extern char __noinstr_text_start[], __noinstr_text_end[];

extern const void __nosave_begin, __nosave_end;
# 78 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 95 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 112 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 126 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 141 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_core_data(unsigned long addr)
{
 return addr >= (unsigned long)_sdata &&
        addr < (unsigned long)_edata;
}
# 155 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 169 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_inittext(unsigned long addr)
{
 return addr >= (unsigned long)_sinittext &&
        addr < (unsigned long)_einittext;
}
# 184 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __is_kernel_text(unsigned long addr)
{
 return addr >= (unsigned long)_stext &&
        addr < (unsigned long)_etext;
}
# 198 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __is_kernel(unsigned long addr)
{
 return addr >= (unsigned long)_stext &&
        addr < (unsigned long)_end;
}
# 2 "./arch/mips/include/generated/asm/sections.h" 2
# 22 "./include/linux/interrupt.h" 2
# 95 "./include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 118 "./include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} __attribute__((__aligned__(1 << (6))));

extern irqreturn_t no_action(int cpl, void *dev_id);
# 146 "./include/linux/interrupt.h"
extern int __attribute__((__warn_unused_result__))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);
# 164 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
}

extern int __attribute__((__warn_unused_result__))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((__warn_unused_result__))
__request_percpu_irq(unsigned int irq, irq_handler_t handler,
       unsigned long flags, const char *devname,
       void *percpu_dev_id);

extern int __attribute__((__warn_unused_result__))
request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id)
{
 return __request_percpu_irq(irq, handler, 0,
        devname, percpu_dev_id);
}

extern int __attribute__((__warn_unused_result__))
request_percpu_nmi(unsigned int irq, irq_handler_t handler,
     const char *devname, void *dev);

extern const void *free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

extern const void *free_nmi(unsigned int irq, void *dev_id);
extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);

struct device;

extern int __attribute__((__warn_unused_result__))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
      devname, dev_id);
}

extern int __attribute__((__warn_unused_result__))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 243 "./include/linux/interrupt.h"
bool irq_has_action(unsigned int irq);
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);

extern void disable_nmi_nosync(unsigned int irq);
extern void disable_percpu_nmi(unsigned int irq);
extern void enable_nmi(unsigned int irq);
extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
extern int prepare_percpu_nmi(unsigned int irq);
extern void teardown_percpu_nmi(unsigned int irq);

extern int irq_inject_interrupt(unsigned int irq);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
extern void rearm_wake_irq(unsigned int irq);
# 279 "./include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};
# 303 "./include/linux/interrupt.h"
struct irq_affinity {
 unsigned int pre_vectors;
 unsigned int post_vectors;
 unsigned int nr_sets;
 unsigned int set_size[4];
 void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
 void *priv;
};






struct irq_affinity_desc {
 struct cpumask mask;
 unsigned int is_managed : 1;
};



extern cpumask_var_t irq_default_affinity;

extern int irq_set_affinity(unsigned int irq, const struct cpumask *cpumask);
extern int irq_force_affinity(unsigned int irq, const struct cpumask *cpumask);

extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);
extern int irq_update_affinity_desc(unsigned int irq,
        struct irq_affinity_desc *affinity);

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);

struct irq_affinity_desc *
irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd);

unsigned int irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
           const struct irq_affinity *affd);
# 408 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);





extern struct static_key_false force_irqthreads_key;
# 515 "./include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,
 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

           void do_softirq(void);
           void __do_softirq(void);

extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_302(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_302(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 2: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_303(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_303(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 4: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_304(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_304(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 8: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_305(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_305(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 587 "./include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 bool use_callback;
 union {
  void (*func)(unsigned long data);
  void (*callback)(struct tasklet_struct *t);
 };
 unsigned long data;
};
# 629 "./include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

void tasklet_unlock(struct tasklet_struct *t);
void tasklet_unlock_wait(struct tasklet_struct *t);
void tasklet_unlock_spin_wait(struct tasklet_struct *t);
# 652 "./include/linux/interrupt.h"
extern void __tasklet_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 __asm__ __volatile__("sync" : : :"memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_in_atomic(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_spin_wait(t);
 __sync();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 __sync();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_enable(struct tasklet_struct *t)
{
                        ;
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
extern void tasklet_setup(struct tasklet_struct *t,
     void (*callback)(struct tasklet_struct *));
# 746 "./include/linux/interrupt.h"
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);
# 766 "./include/linux/interrupt.h"
struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 17 "./arch/mips/include/asm/kvm_host.h" 2
# 26 "./arch/mips/include/asm/kvm_host.h"
# 1 "./include/kvm/iodev.h" 1








struct kvm_io_device;
struct kvm_vcpu;






struct kvm_io_device_ops {
 int (*read)(struct kvm_vcpu *vcpu,
      struct kvm_io_device *this,
      gpa_t addr,
      int len,
      void *val);
 int (*write)(struct kvm_vcpu *vcpu,
       struct kvm_io_device *this,
       gpa_t addr,
       int len,
       const void *val);
 void (*destructor)(struct kvm_io_device *this);
};


struct kvm_io_device {
 const struct kvm_io_device_ops *ops;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_iodevice_init(struct kvm_io_device *dev,
         const struct kvm_io_device_ops *ops)
{
 dev->ops = ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_iodevice_read(struct kvm_vcpu *vcpu,
        struct kvm_io_device *dev, gpa_t addr,
        int l, void *v)
{
 return dev->ops->read ? dev->ops->read(vcpu, dev, addr, l, v)
    : -122;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_iodevice_write(struct kvm_vcpu *vcpu,
         struct kvm_io_device *dev, gpa_t addr,
         int l, const void *v)
{
 return dev->ops->write ? dev->ops->write(vcpu, dev, addr, l, v)
     : -122;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_iodevice_destructor(struct kvm_io_device *dev)
{
 if (dev->ops->destructor)
  dev->ops->destructor(dev);
}
# 27 "./arch/mips/include/asm/kvm_host.h" 2
# 91 "./arch/mips/include/asm/kvm_host.h"
extern unsigned long GUESTID_MASK;
extern unsigned long GUESTID_FIRST_VERSION;
extern unsigned long GUESTID_VERSION_MASK;
# 106 "./arch/mips/include/asm/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_is_error_hva(unsigned long addr)
{
 return __builtin_expect(!!((unsigned long)(void *)(addr) >= (unsigned long)-4095), 0);
}

struct kvm_vm_stat {
 struct kvm_vm_stat_generic generic;
};

struct kvm_vcpu_stat {
 struct kvm_vcpu_stat_generic generic;
 u64 wait_exits;
 u64 cache_exits;
 u64 signal_exits;
 u64 int_exits;
 u64 cop_unusable_exits;
 u64 tlbmod_exits;
 u64 tlbmiss_ld_exits;
 u64 tlbmiss_st_exits;
 u64 addrerr_st_exits;
 u64 addrerr_ld_exits;
 u64 syscall_exits;
 u64 resvd_inst_exits;
 u64 break_inst_exits;
 u64 trap_inst_exits;
 u64 msa_fpe_exits;
 u64 fpe_exits;
 u64 msa_disabled_exits;
 u64 flush_dcache_exits;
 u64 vz_gpsi_exits;
 u64 vz_gsfc_exits;
 u64 vz_hc_exits;
 u64 vz_grr_exits;
 u64 vz_gva_exits;
 u64 vz_ghfc_exits;
 u64 vz_gpa_exits;
 u64 vz_resvd_exits;

 u64 vz_cpucfg_exits;

};

struct kvm_arch_memory_slot {
};


struct ipi_state {
 uint32_t status;
 uint32_t en;
 uint32_t set;
 uint32_t clear;
 uint64_t buf[4];
};

struct loongson_kvm_ipi;

struct ipi_io_device {
 int node_id;
 struct loongson_kvm_ipi *ipi;
 struct kvm_io_device device;
};

struct loongson_kvm_ipi {
 spinlock_t lock;
 struct kvm *kvm;
 struct ipi_state ipistate[16];
 struct ipi_io_device dev_ipi[4];
};


struct kvm_arch {

 struct mm_struct gpa_mm;

 cpumask_t asid_flush_mask;

 struct loongson_kvm_ipi ipi;

};




struct mips_coproc {
 unsigned long reg[32][8];



};
# 255 "./arch/mips/include/asm/kvm_host.h"
enum emulation_result {
 EMULATE_DONE,
 EMULATE_DO_MMIO,
 EMULATE_FAIL,
 EMULATE_WAIT,
 EMULATE_PRIV_FAIL,
 EMULATE_EXCEPT,
 EMULATE_HYPERCALL,
};
# 282 "./arch/mips/include/asm/kvm_host.h"
struct kvm_mips_tlb {
 long tlb_mask;
 long tlb_hi;
 long tlb_lo[2];
};




struct kvm_vcpu_arch {
 void *guest_ebase;
 int (*vcpu_run)(struct kvm_vcpu *vcpu);


 unsigned long host_stack;
 unsigned long host_gp;
 unsigned long host_pgd;
 unsigned long host_entryhi;


 unsigned long host_cp0_badvaddr;
 unsigned long host_cp0_epc;
 u32 host_cp0_cause;
 u32 host_cp0_guestctl0;
 u32 host_cp0_badinstr;
 u32 host_cp0_badinstrp;


 unsigned long gprs[32];
 unsigned long hi;
 unsigned long lo;
 unsigned long pc;


 struct mips_fpu_struct fpu;

 unsigned int aux_inuse;


 struct mips_coproc *cop0;


 unsigned long io_pc;

 u32 io_gpr;

 struct hrtimer comparecount_timer;

 u32 count_ctl;

 u32 count_bias;

 u32 count_hz;

 s64 count_dyn_bias;

 ktime_t count_resume;

 u64 count_period;


 unsigned long pending_exceptions;


 unsigned long pending_exceptions_clr;


 struct kvm_mmu_memory_cache mmu_page_cache;


 u32 vzguestid[16];


 struct kvm_mips_tlb *wired_tlb;
 unsigned int wired_tlb_limit;
 unsigned int wired_tlb_used;


 unsigned long maar[6];


 int last_sched_cpu;

 int last_exec_cpu;


 int wait;

 u8 fpu_enabled;
 u8 msa_enabled;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void _kvm_atomic_set_c0_guest_reg(unsigned long *reg,
      unsigned long val)
{
 unsigned long temp;
 do {
  __asm__ __volatile__(
  "	.set	push				\n"
  "	.set	""arch=r4000""		\n"
  "	" "lld	" "%0, %1				\n"
  "	or	%0, %2				\n"
  "	" "scd	" "%0, %1				\n"
  "	.set	pop				\n"
  : "=&r" (temp), "+m" (*reg)
  : "r" (val));
 } while (__builtin_expect(!!(!temp), 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void _kvm_atomic_clear_c0_guest_reg(unsigned long *reg,
        unsigned long val)
{
 unsigned long temp;
 do {
  __asm__ __volatile__(
  "	.set	push				\n"
  "	.set	""arch=r4000""		\n"
  "	" "lld	" "%0, %1				\n"
  "	and	%0, %2				\n"
  "	" "scd	" "%0, %1				\n"
  "	.set	pop				\n"
  : "=&r" (temp), "+m" (*reg)
  : "r" (~val));
 } while (__builtin_expect(!!(!temp), 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void _kvm_atomic_change_c0_guest_reg(unsigned long *reg,
         unsigned long change,
         unsigned long val)
{
 unsigned long temp;
 do {
  __asm__ __volatile__(
  "	.set	push				\n"
  "	.set	""arch=r4000""		\n"
  "	" "lld	" "%0, %1				\n"
  "	and	%0, %2				\n"
  "	or	%0, %3				\n"
  "	" "scd	" "%0, %1				\n"
  "	.set	pop				\n"
  : "=&r" (temp), "+m" (*reg)
  : "r" (~change), "r" (val & change));
 } while (__builtin_expect(!!(!temp), 0));
}
# 629 "./arch/mips/include/asm/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_index(struct mips_coproc *cop0) { return cop0->reg[(0)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_index(struct mips_coproc *cop0, u32 val) { cop0->reg[(0)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_index(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_index(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_index(struct mips_coproc *cop0) { return kvm_read_vz_gc0_index(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_index(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_index(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_index(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(0)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_index(struct mips_coproc *cop0) { cop0->reg[(0)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_entrylo0(struct mips_coproc *cop0) { return cop0->reg[(2)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_entrylo0(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(2)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_entrylo0(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_entrylo0(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_entrylo0(struct mips_coproc *cop0) { return kvm_read_vz_gc0_entrylo0(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_entrylo0(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_entrylo0(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_entrylo0(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(2)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(2)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_entrylo0(struct mips_coproc *cop0) { cop0->reg[(2)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_entrylo1(struct mips_coproc *cop0) { return cop0->reg[(3)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_entrylo1(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(3)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_entrylo1(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_entrylo1(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_entrylo1(struct mips_coproc *cop0) { return kvm_read_vz_gc0_entrylo1(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_entrylo1(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_entrylo1(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_entrylo1(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(3)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(3)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_entrylo1(struct mips_coproc *cop0) { cop0->reg[(3)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_context(struct mips_coproc *cop0) { return cop0->reg[(4)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_context(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(4)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_context(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_context(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_context(struct mips_coproc *cop0) { return kvm_read_vz_gc0_context(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_context(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_context(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_context(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(4)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(4)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_context(struct mips_coproc *cop0) { cop0->reg[(4)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_contextconfig(struct mips_coproc *cop0) { return cop0->reg[(4)][(1)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_contextconfig(struct mips_coproc *cop0, u32 val) { cop0->reg[(4)][(1)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_contextconfig(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_contextconfig(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_contextconfig(struct mips_coproc *cop0) { return kvm_read_vz_gc0_contextconfig(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_contextconfig(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_contextconfig(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_contextconfig(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(4)][(1)])), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_contextconfig(struct mips_coproc *cop0) { cop0->reg[(4)][(1)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_userlocal(struct mips_coproc *cop0) { return cop0->reg[(4)][(2)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_userlocal(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(4)][(2)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_userlocal(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_userlocal(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (2)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (2)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_userlocal(struct mips_coproc *cop0) { return kvm_read_vz_gc0_userlocal(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_userlocal(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_userlocal(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_userlocal(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(4)][(2)])), "i" (2)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(4)][(2)]), "i" (2)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_userlocal(struct mips_coproc *cop0) { cop0->reg[(4)][(2)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_xcontextconfig(struct mips_coproc *cop0) { return cop0->reg[(4)][(3)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_xcontextconfig(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(4)][(3)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_xcontextconfig(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_xcontextconfig(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (3)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (3)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_xcontextconfig(struct mips_coproc *cop0) { return kvm_read_vz_gc0_xcontextconfig(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_xcontextconfig(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_xcontextconfig(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_xcontextconfig(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(4)][(3)])), "i" (3)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$4" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(4)][(3)]), "i" (3)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_xcontextconfig(struct mips_coproc *cop0) { cop0->reg[(4)][(3)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$4" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_pagemask(struct mips_coproc *cop0) { return cop0->reg[(5)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_pagemask(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_pagemask(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_pagemask(struct mips_coproc *cop0, unsigned long val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_pagemask(struct mips_coproc *cop0) { return kvm_read_vz_gc0_pagemask(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_pagemask(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_pagemask(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_pagemask(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_pagemask(struct mips_coproc *cop0) { cop0->reg[(5)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_pagegrain(struct mips_coproc *cop0) { return cop0->reg[(5)][(1)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_pagegrain(struct mips_coproc *cop0, u32 val) { cop0->reg[(5)][(1)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_pagegrain(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_pagegrain(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_pagegrain(struct mips_coproc *cop0) { return kvm_read_vz_gc0_pagegrain(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_pagegrain(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_pagegrain(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_pagegrain(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(1)])), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_pagegrain(struct mips_coproc *cop0) { cop0->reg[(5)][(1)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_segctl0(struct mips_coproc *cop0) { return cop0->reg[(5)][(2)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_segctl0(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(2)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_segctl0(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_segctl0(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (2)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (2)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_segctl0(struct mips_coproc *cop0) { return kvm_read_vz_gc0_segctl0(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_segctl0(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_segctl0(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_segctl0(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(2)])), "i" (2)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(5)][(2)]), "i" (2)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_segctl0(struct mips_coproc *cop0) { cop0->reg[(5)][(2)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_segctl1(struct mips_coproc *cop0) { return cop0->reg[(5)][(3)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_segctl1(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(3)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_segctl1(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_segctl1(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (3)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (3)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_segctl1(struct mips_coproc *cop0) { return kvm_read_vz_gc0_segctl1(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_segctl1(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_segctl1(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_segctl1(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(3)])), "i" (3)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(5)][(3)]), "i" (3)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_segctl1(struct mips_coproc *cop0) { cop0->reg[(5)][(3)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_segctl2(struct mips_coproc *cop0) { return cop0->reg[(5)][(4)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_segctl2(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(4)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_segctl2(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_segctl2(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (4)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (4)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_segctl2(struct mips_coproc *cop0) { return kvm_read_vz_gc0_segctl2(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_segctl2(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_segctl2(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_segctl2(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(4)])), "i" (4)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(5)][(4)]), "i" (4)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_segctl2(struct mips_coproc *cop0) { cop0->reg[(5)][(4)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_pwbase(struct mips_coproc *cop0) { return cop0->reg[(5)][(5)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_pwbase(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(5)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_pwbase(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_pwbase(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (5)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (5)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_pwbase(struct mips_coproc *cop0) { return kvm_read_vz_gc0_pwbase(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_pwbase(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_pwbase(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_pwbase(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(5)])), "i" (5)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(5)][(5)]), "i" (5)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_pwbase(struct mips_coproc *cop0) { cop0->reg[(5)][(5)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_pwfield(struct mips_coproc *cop0) { return cop0->reg[(5)][(6)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_pwfield(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(6)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_pwfield(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_pwfield(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (6)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (6)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_pwfield(struct mips_coproc *cop0) { return kvm_read_vz_gc0_pwfield(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_pwfield(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_pwfield(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_pwfield(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(6)])), "i" (6)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(5)][(6)]), "i" (6)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_pwfield(struct mips_coproc *cop0) { cop0->reg[(5)][(6)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_pwsize(struct mips_coproc *cop0) { return cop0->reg[(5)][(7)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_pwsize(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(5)][(7)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_pwsize(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_pwsize(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (7)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (7)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_pwsize(struct mips_coproc *cop0) { return kvm_read_vz_gc0_pwsize(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_pwsize(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_pwsize(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_pwsize(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(5)][(7)])), "i" (7)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(5)][(7)]), "i" (7)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_pwsize(struct mips_coproc *cop0) { cop0->reg[(5)][(7)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_wired(struct mips_coproc *cop0) { return cop0->reg[(6)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_wired(struct mips_coproc *cop0, u32 val) { cop0->reg[(6)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_wired(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_wired(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_wired(struct mips_coproc *cop0) { return kvm_read_vz_gc0_wired(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_wired(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_wired(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_wired(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(6)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_wired(struct mips_coproc *cop0) { cop0->reg[(6)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_pwctl(struct mips_coproc *cop0) { return cop0->reg[(6)][(6)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_pwctl(struct mips_coproc *cop0, u32 val) { cop0->reg[(6)][(6)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_pwctl(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_pwctl(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (6)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_pwctl(struct mips_coproc *cop0) { return kvm_read_vz_gc0_pwctl(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_pwctl(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_pwctl(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_pwctl(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$6" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(6)][(6)])), "i" (6)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_pwctl(struct mips_coproc *cop0) { cop0->reg[(6)][(6)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$6" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_hwrena(struct mips_coproc *cop0) { return cop0->reg[(7)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_hwrena(struct mips_coproc *cop0, u32 val) { cop0->reg[(7)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_hwrena(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$7" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_hwrena(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$7" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_hwrena(struct mips_coproc *cop0) { return kvm_read_vz_gc0_hwrena(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_hwrena(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_hwrena(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_hwrena(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$7" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(7)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_hwrena(struct mips_coproc *cop0) { cop0->reg[(7)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$7" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_badvaddr(struct mips_coproc *cop0) { return cop0->reg[(8)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_badvaddr(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(8)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_badvaddr(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_badvaddr(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_badvaddr(struct mips_coproc *cop0) { return kvm_read_vz_gc0_badvaddr(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_badvaddr(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_badvaddr(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_badvaddr(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(8)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(8)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_badvaddr(struct mips_coproc *cop0) { cop0->reg[(8)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_badinstr(struct mips_coproc *cop0) { return cop0->reg[(8)][(1)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_badinstr(struct mips_coproc *cop0, u32 val) { cop0->reg[(8)][(1)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_badinstr(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_badinstr(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_badinstr(struct mips_coproc *cop0) { return kvm_read_vz_gc0_badinstr(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_badinstr(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_badinstr(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_badinstr(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(8)][(1)])), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_badinstr(struct mips_coproc *cop0) { cop0->reg[(8)][(1)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_badinstrp(struct mips_coproc *cop0) { return cop0->reg[(8)][(2)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_badinstrp(struct mips_coproc *cop0, u32 val) { cop0->reg[(8)][(2)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_badinstrp(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_badinstrp(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (2)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_badinstrp(struct mips_coproc *cop0) { return kvm_read_vz_gc0_badinstrp(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_badinstrp(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_badinstrp(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_badinstrp(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$8" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(8)][(2)])), "i" (2)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_badinstrp(struct mips_coproc *cop0) { cop0->reg[(8)][(2)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$8" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_count(struct mips_coproc *cop0) { return cop0->reg[(9)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_count(struct mips_coproc *cop0, u32 val) { cop0->reg[(9)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_count(struct mips_coproc *cop0) { return kvm_read_sw_gc0_count(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_count(struct mips_coproc *cop0, u32 val) { kvm_write_sw_gc0_count(cop0, val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_entryhi(struct mips_coproc *cop0) { return cop0->reg[(10)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_entryhi(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(10)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_entryhi(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_entryhi(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_entryhi(struct mips_coproc *cop0) { return kvm_read_vz_gc0_entryhi(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_entryhi(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_entryhi(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_entryhi(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(10)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(10)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_entryhi(struct mips_coproc *cop0) { cop0->reg[(10)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_compare(struct mips_coproc *cop0) { return cop0->reg[(11)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_compare(struct mips_coproc *cop0, u32 val) { cop0->reg[(11)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_compare(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$11" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_compare(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$11" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_compare(struct mips_coproc *cop0) { return kvm_read_vz_gc0_compare(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_compare(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_compare(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_compare(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$11" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(11)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_compare(struct mips_coproc *cop0) { cop0->reg[(11)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$11" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_status(struct mips_coproc *cop0) { return cop0->reg[(12)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_status(struct mips_coproc *cop0, u32 val) { cop0->reg[(12)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_status(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_status(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_status(struct mips_coproc *cop0) { return kvm_read_vz_gc0_status(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_status(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_status(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_status(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(12)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_status(struct mips_coproc *cop0) { cop0->reg[(12)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_intctl(struct mips_coproc *cop0) { return cop0->reg[(12)][(1)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_intctl(struct mips_coproc *cop0, u32 val) { cop0->reg[(12)][(1)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_intctl(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_intctl(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_intctl(struct mips_coproc *cop0) { return kvm_read_vz_gc0_intctl(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_intctl(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_intctl(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_intctl(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$12" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(12)][(1)])), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_intctl(struct mips_coproc *cop0) { cop0->reg[(12)][(1)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$12" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_cause(struct mips_coproc *cop0) { return cop0->reg[(13)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_cause(struct mips_coproc *cop0, u32 val) { cop0->reg[(13)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_cause(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$13" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_cause(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$13" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_cause(struct mips_coproc *cop0) { return kvm_read_vz_gc0_cause(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_cause(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_cause(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_cause(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$13" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(13)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_cause(struct mips_coproc *cop0) { cop0->reg[(13)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$13" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_epc(struct mips_coproc *cop0) { return cop0->reg[(14)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_epc(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(14)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_epc(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$14" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$14" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_epc(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$14" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$14" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_epc(struct mips_coproc *cop0) { return kvm_read_vz_gc0_epc(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_epc(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_epc(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_epc(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$14" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(14)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$14" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(14)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_epc(struct mips_coproc *cop0) { cop0->reg[(14)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$14" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$14" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_prid(struct mips_coproc *cop0) { return cop0->reg[(15)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_prid(struct mips_coproc *cop0, u32 val) { cop0->reg[(15)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_prid(struct mips_coproc *cop0) { return kvm_read_sw_gc0_prid(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_prid(struct mips_coproc *cop0, u32 val) { kvm_write_sw_gc0_prid(cop0, val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_ebase(struct mips_coproc *cop0) { return cop0->reg[(15)][(1)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_ebase(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(15)][(1)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_ebase(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$15" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_ebase(struct mips_coproc *cop0, unsigned long val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$15" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_ebase(struct mips_coproc *cop0) { return kvm_read_vz_gc0_ebase(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_ebase(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_ebase(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_ebase(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$15" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(15)][(1)])), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_ebase(struct mips_coproc *cop0) { cop0->reg[(15)][(1)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$15" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config(struct mips_coproc *cop0) { return cop0->reg[(16)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(0)])), "i" (0)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config(struct mips_coproc *cop0) { cop0->reg[(16)][(0)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config1(struct mips_coproc *cop0) { return cop0->reg[(16)][(1)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config1(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(1)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config1(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config1(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config1(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config1(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config1(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config1(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config1(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(1)])), "i" (1)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config1(struct mips_coproc *cop0) { cop0->reg[(16)][(1)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (1)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config2(struct mips_coproc *cop0) { return cop0->reg[(16)][(2)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config2(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(2)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config2(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config2(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (2)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config2(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config2(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config2(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config2(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config2(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(2)])), "i" (2)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config2(struct mips_coproc *cop0) { cop0->reg[(16)][(2)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config3(struct mips_coproc *cop0) { return cop0->reg[(16)][(3)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config3(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(3)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config3(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config3(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (3)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config3(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config3(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config3(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config3(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config3(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(3)])), "i" (3)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config3(struct mips_coproc *cop0) { cop0->reg[(16)][(3)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config4(struct mips_coproc *cop0) { return cop0->reg[(16)][(4)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config4(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(4)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config4(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config4(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (4)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config4(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config4(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config4(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config4(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config4(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(4)])), "i" (4)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config4(struct mips_coproc *cop0) { cop0->reg[(16)][(4)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config5(struct mips_coproc *cop0) { return cop0->reg[(16)][(5)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config5(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(5)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config5(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config5(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (5)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config5(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config5(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config5(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config5(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config5(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(5)])), "i" (5)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config5(struct mips_coproc *cop0) { cop0->reg[(16)][(5)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config6(struct mips_coproc *cop0) { return cop0->reg[(16)][(6)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config6(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(6)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config6(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config6(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (6)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config6(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config6(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config6(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config6(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config6(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(6)])), "i" (6)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config6(struct mips_coproc *cop0) { cop0->reg[(16)][(6)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_sw_gc0_config7(struct mips_coproc *cop0) { return cop0->reg[(16)][(7)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_config7(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(7)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_vz_gc0_config7(struct mips_coproc *cop0) { return ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_config7(struct mips_coproc *cop0, u32 val) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (7)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_read_c0_guest_config7(struct mips_coproc *cop0) { return kvm_read_vz_gc0_config7(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_config7(struct mips_coproc *cop0, u32 val) { kvm_write_vz_gc0_config7(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_config7(struct mips_coproc *cop0) { do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$16" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(16)][(7)])), "i" (7)); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_config7(struct mips_coproc *cop0) { cop0->reg[(16)][(7)] = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$16" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_maari(struct mips_coproc *cop0) { return cop0->reg[(17)][(2)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_maari(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(17)][(2)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_maari(struct mips_coproc *cop0) { return kvm_read_sw_gc0_maari(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_maari(struct mips_coproc *cop0, unsigned long val) { kvm_write_sw_gc0_maari(cop0, val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_xcontext(struct mips_coproc *cop0) { return cop0->reg[(20)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_xcontext(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(20)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_xcontext(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$20" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$20" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_xcontext(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$20" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$20" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_xcontext(struct mips_coproc *cop0) { return kvm_read_vz_gc0_xcontext(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_xcontext(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_xcontext(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_xcontext(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$20" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(20)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$20" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(20)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_xcontext(struct mips_coproc *cop0) { cop0->reg[(20)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$20" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$20" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_errorepc(struct mips_coproc *cop0) { return cop0->reg[(30)][(0)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_errorepc(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(30)][(0)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_errorepc(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$30" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$30" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_errorepc(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$30" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$30" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_errorepc(struct mips_coproc *cop0) { return kvm_read_vz_gc0_errorepc(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_errorepc(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_errorepc(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_errorepc(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$30" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(30)][(0)])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$30" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(30)][(0)]), "i" (0)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_errorepc(struct mips_coproc *cop0) { cop0->reg[(30)][(0)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$30" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$30" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_kscratch1(struct mips_coproc *cop0) { return cop0->reg[(31)][(2)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_kscratch1(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(31)][(2)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_kscratch1(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_kscratch1(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (2)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (2)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_kscratch1(struct mips_coproc *cop0) { return kvm_read_vz_gc0_kscratch1(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_kscratch1(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_kscratch1(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_kscratch1(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(31)][(2)])), "i" (2)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(31)][(2)]), "i" (2)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_kscratch1(struct mips_coproc *cop0) { cop0->reg[(31)][(2)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (2)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_kscratch2(struct mips_coproc *cop0) { return cop0->reg[(31)][(3)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_kscratch2(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(31)][(3)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_kscratch2(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_kscratch2(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (3)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (3)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_kscratch2(struct mips_coproc *cop0) { return kvm_read_vz_gc0_kscratch2(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_kscratch2(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_kscratch2(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_kscratch2(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(31)][(3)])), "i" (3)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(31)][(3)]), "i" (3)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_kscratch2(struct mips_coproc *cop0) { cop0->reg[(31)][(3)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (3)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_kscratch3(struct mips_coproc *cop0) { return cop0->reg[(31)][(4)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_kscratch3(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(31)][(4)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_kscratch3(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_kscratch3(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (4)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (4)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_kscratch3(struct mips_coproc *cop0) { return kvm_read_vz_gc0_kscratch3(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_kscratch3(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_kscratch3(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_kscratch3(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(31)][(4)])), "i" (4)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(31)][(4)]), "i" (4)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_kscratch3(struct mips_coproc *cop0) { cop0->reg[(31)][(4)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (4)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_kscratch4(struct mips_coproc *cop0) { return cop0->reg[(31)][(5)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_kscratch4(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(31)][(5)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_kscratch4(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_kscratch4(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (5)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (5)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_kscratch4(struct mips_coproc *cop0) { return kvm_read_vz_gc0_kscratch4(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_kscratch4(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_kscratch4(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_kscratch4(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(31)][(5)])), "i" (5)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(31)][(5)]), "i" (5)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_kscratch4(struct mips_coproc *cop0) { cop0->reg[(31)][(5)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (5)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_kscratch5(struct mips_coproc *cop0) { return cop0->reg[(31)][(6)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_kscratch5(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(31)][(6)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_kscratch5(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_kscratch5(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (6)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (6)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_kscratch5(struct mips_coproc *cop0) { return kvm_read_vz_gc0_kscratch5(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_kscratch5(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_kscratch5(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_kscratch5(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(31)][(6)])), "i" (6)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(31)][(6)]), "i" (6)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_kscratch5(struct mips_coproc *cop0) { cop0->reg[(31)][(6)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (6)); __res; })); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_sw_gc0_kscratch6(struct mips_coproc *cop0) { return cop0->reg[(31)][(7)]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_sw_gc0_kscratch6(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(31)][(7)] = val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_vz_gc0_kscratch6(struct mips_coproc *cop0) { return ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; })); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_vz_gc0_kscratch6(struct mips_coproc *cop0, unsigned long val) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(val)), "i" (7)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (val), "i" (7)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_read_c0_guest_kscratch6(struct mips_coproc *cop0) { return kvm_read_vz_gc0_kscratch6(cop0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_write_c0_guest_kscratch6(struct mips_coproc *cop0, unsigned long val) { kvm_write_vz_gc0_kscratch6(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_restore_gc0_kscratch6(struct mips_coproc *cop0) { do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(cop0->reg[(31)][(7)])), "i" (7)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$31" ", %1\n\t" ".set\tpop" : : "Jr" (cop0->reg[(31)][(7)]), "i" (7)); } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_save_gc0_kscratch6(struct mips_coproc *cop0) { cop0->reg[(31)][(7)] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$31" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (7)); __res; })); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_status(struct mips_coproc *cop0, u32 val) { cop0->reg[(12)][(0)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_status(struct mips_coproc *cop0, u32 val) { cop0->reg[(12)][(0)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_status(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(12)][(0)] &= ~_mask; cop0->reg[(12)][(0)] |= val & _mask; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_vz_gc0_status(struct mips_coproc *cop0, u32 val) { set_gc0_status(val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_vz_gc0_status(struct mips_coproc *cop0, u32 val) { clear_gc0_status(val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_vz_gc0_status(struct mips_coproc *cop0, u32 mask, u32 val) { change_gc0_status(mask, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_c0_guest_status(struct mips_coproc *cop0, u32 val) { kvm_set_vz_gc0_status(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_c0_guest_status(struct mips_coproc *cop0, u32 val) { kvm_clear_vz_gc0_status(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_c0_guest_status(struct mips_coproc *cop0, u32 mask, u32 val) { kvm_change_vz_gc0_status(cop0, mask, val); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_cause(struct mips_coproc *cop0, u32 val) { cop0->reg[(13)][(0)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_cause(struct mips_coproc *cop0, u32 val) { cop0->reg[(13)][(0)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_cause(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(13)][(0)] &= ~_mask; cop0->reg[(13)][(0)] |= val & _mask; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_vz_gc0_cause(struct mips_coproc *cop0, u32 val) { set_gc0_cause(val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_vz_gc0_cause(struct mips_coproc *cop0, u32 val) { clear_gc0_cause(val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_vz_gc0_cause(struct mips_coproc *cop0, u32 mask, u32 val) { change_gc0_cause(mask, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_c0_guest_cause(struct mips_coproc *cop0, u32 val) { kvm_set_vz_gc0_cause(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_c0_guest_cause(struct mips_coproc *cop0, u32 val) { kvm_clear_vz_gc0_cause(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_c0_guest_cause(struct mips_coproc *cop0, u32 mask, u32 val) { kvm_change_vz_gc0_cause(cop0, mask, val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_ebase(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(15)][(1)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_ebase(struct mips_coproc *cop0, unsigned long val) { cop0->reg[(15)][(1)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_ebase(struct mips_coproc *cop0, unsigned long mask, unsigned long val) { unsigned long _mask = mask; cop0->reg[(15)][(1)] &= ~_mask; cop0->reg[(15)][(1)] |= val & _mask; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_vz_gc0_ebase(struct mips_coproc *cop0, unsigned long val) { set_gc0_ebase(val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_vz_gc0_ebase(struct mips_coproc *cop0, unsigned long val) { clear_gc0_ebase(val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_vz_gc0_ebase(struct mips_coproc *cop0, unsigned long mask, unsigned long val) { change_gc0_ebase(mask, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_c0_guest_ebase(struct mips_coproc *cop0, unsigned long val) { kvm_set_vz_gc0_ebase(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_c0_guest_ebase(struct mips_coproc *cop0, unsigned long val) { kvm_clear_vz_gc0_ebase(cop0, val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_c0_guest_ebase(struct mips_coproc *cop0, unsigned long mask, unsigned long val) { kvm_change_vz_gc0_ebase(cop0, mask, val); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_config(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(0)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_config(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(0)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_config(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(16)][(0)] &= ~_mask; cop0->reg[(16)][(0)] |= val & _mask; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_config1(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(1)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_config1(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(1)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_config1(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(16)][(1)] &= ~_mask; cop0->reg[(16)][(1)] |= val & _mask; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_config2(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(2)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_config2(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(2)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_config2(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(16)][(2)] &= ~_mask; cop0->reg[(16)][(2)] |= val & _mask; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_config3(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(3)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_config3(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(3)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_config3(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(16)][(3)] &= ~_mask; cop0->reg[(16)][(3)] |= val & _mask; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_config4(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(4)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_config4(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(4)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_config4(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(16)][(4)] &= ~_mask; cop0->reg[(16)][(4)] |= val & _mask; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_set_sw_gc0_config5(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(5)] |= val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_sw_gc0_config5(struct mips_coproc *cop0, u32 val) { cop0->reg[(16)][(5)] &= ~val; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_change_sw_gc0_config5(struct mips_coproc *cop0, u32 mask, u32 val) { unsigned long _mask = mask; cop0->reg[(16)][(5)] &= ~_mask; cop0->reg[(16)][(5)] |= val & _mask; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_mips_guest_can_have_fpu(struct kvm_vcpu_arch *vcpu)
{
 return (!__builtin_constant_p((cpu_data[raw_smp_processor_id()].options & ((((1ULL))) << (5)))) || (cpu_data[raw_smp_processor_id()].options & ((((1ULL))) << (5)))) &&
  vcpu->fpu_enabled;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_mips_guest_has_fpu(struct kvm_vcpu_arch *vcpu)
{
 return kvm_mips_guest_can_have_fpu(vcpu) &&
  kvm_read_c0_guest_config1(vcpu->cop0) & ((unsigned long)(1) << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_mips_guest_can_have_msa(struct kvm_vcpu_arch *vcpu)
{
 return (!__builtin_constant_p((cpu_data[0].ases & (0x00000100))) || (cpu_data[0].ases & (0x00000100))) &&
  vcpu->msa_enabled;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_mips_guest_has_msa(struct kvm_vcpu_arch *vcpu)
{
 return kvm_mips_guest_can_have_msa(vcpu) &&
  kvm_read_c0_guest_config3(vcpu->cop0) & ((unsigned long)(1) << 28);
}

struct kvm_mips_callbacks {
 int (*handle_cop_unusable)(struct kvm_vcpu *vcpu);
 int (*handle_tlb_mod)(struct kvm_vcpu *vcpu);
 int (*handle_tlb_ld_miss)(struct kvm_vcpu *vcpu);
 int (*handle_tlb_st_miss)(struct kvm_vcpu *vcpu);
 int (*handle_addr_err_st)(struct kvm_vcpu *vcpu);
 int (*handle_addr_err_ld)(struct kvm_vcpu *vcpu);
 int (*handle_syscall)(struct kvm_vcpu *vcpu);
 int (*handle_res_inst)(struct kvm_vcpu *vcpu);
 int (*handle_break)(struct kvm_vcpu *vcpu);
 int (*handle_trap)(struct kvm_vcpu *vcpu);
 int (*handle_msa_fpe)(struct kvm_vcpu *vcpu);
 int (*handle_fpe)(struct kvm_vcpu *vcpu);
 int (*handle_msa_disabled)(struct kvm_vcpu *vcpu);
 int (*handle_guest_exit)(struct kvm_vcpu *vcpu);
 int (*hardware_enable)(void);
 void (*hardware_disable)(void);
 int (*check_extension)(struct kvm *kvm, long ext);
 int (*vcpu_init)(struct kvm_vcpu *vcpu);
 void (*vcpu_uninit)(struct kvm_vcpu *vcpu);
 int (*vcpu_setup)(struct kvm_vcpu *vcpu);
 void (*prepare_flush_shadow)(struct kvm *kvm);
 gpa_t (*gva_to_gpa)(gva_t gva);
 void (*queue_timer_int)(struct kvm_vcpu *vcpu);
 void (*dequeue_timer_int)(struct kvm_vcpu *vcpu);
 void (*queue_io_int)(struct kvm_vcpu *vcpu,
        struct kvm_mips_interrupt *irq);
 void (*dequeue_io_int)(struct kvm_vcpu *vcpu,
          struct kvm_mips_interrupt *irq);
 int (*irq_deliver)(struct kvm_vcpu *vcpu, unsigned int priority,
      u32 cause);
 int (*irq_clear)(struct kvm_vcpu *vcpu, unsigned int priority,
    u32 cause);
 unsigned long (*num_regs)(struct kvm_vcpu *vcpu);
 int (*copy_reg_indices)(struct kvm_vcpu *vcpu, u64 *indices);
 int (*get_one_reg)(struct kvm_vcpu *vcpu,
      const struct kvm_one_reg *reg, s64 *v);
 int (*set_one_reg)(struct kvm_vcpu *vcpu,
      const struct kvm_one_reg *reg, s64 v);
 int (*vcpu_load)(struct kvm_vcpu *vcpu, int cpu);
 int (*vcpu_put)(struct kvm_vcpu *vcpu, int cpu);
 int (*vcpu_run)(struct kvm_vcpu *vcpu);
 void (*vcpu_reenter)(struct kvm_vcpu *vcpu);
};
extern struct kvm_mips_callbacks *kvm_mips_callbacks;
int kvm_mips_emulation_init(struct kvm_mips_callbacks **install_callbacks);


int kvm_arch_vcpu_dump_regs(struct kvm_vcpu *vcpu);

extern int kvm_mips_handle_exit(struct kvm_vcpu *vcpu);


int kvm_mips_entry_setup(void);
void *kvm_mips_build_vcpu_run(void *addr);
void *kvm_mips_build_tlb_refill_exception(void *addr, void *handler);
void *kvm_mips_build_exception(void *addr, void *handler);
void *kvm_mips_build_exit(void *addr);


void __kvm_save_fpu(struct kvm_vcpu_arch *vcpu);
void __kvm_restore_fpu(struct kvm_vcpu_arch *vcpu);
void __kvm_restore_fcsr(struct kvm_vcpu_arch *vcpu);
void __kvm_save_msa(struct kvm_vcpu_arch *vcpu);
void __kvm_restore_msa(struct kvm_vcpu_arch *vcpu);
void __kvm_restore_msa_upper(struct kvm_vcpu_arch *vcpu);
void __kvm_restore_msacsr(struct kvm_vcpu_arch *vcpu);
void kvm_own_fpu(struct kvm_vcpu *vcpu);
void kvm_own_msa(struct kvm_vcpu *vcpu);
void kvm_drop_fpu(struct kvm_vcpu *vcpu);
void kvm_lose_fpu(struct kvm_vcpu *vcpu);


int kvm_mips_handle_vz_root_tlb_fault(unsigned long badvaddr,
          struct kvm_vcpu *vcpu, bool write_fault);

int kvm_vz_host_tlb_inv(struct kvm_vcpu *vcpu, unsigned long entryhi);
int kvm_vz_guest_tlb_lookup(struct kvm_vcpu *vcpu, unsigned long gva,
       unsigned long *gpa);
void kvm_vz_local_flush_roottlb_all_guests(void);
void kvm_vz_local_flush_guesttlb_all(void);
void kvm_vz_save_guesttlb(struct kvm_mips_tlb *buf, unsigned int index,
     unsigned int count);
void kvm_vz_load_guesttlb(const struct kvm_mips_tlb *buf, unsigned int index,
     unsigned int count);

void kvm_loongson_clear_guest_vtlb(void);
void kvm_loongson_clear_guest_ftlb(void);




bool kvm_mips_flush_gpa_pt(struct kvm *kvm, gfn_t start_gfn, gfn_t end_gfn);
int kvm_mips_mkclean_gpa_pt(struct kvm *kvm, gfn_t start_gfn, gfn_t end_gfn);
pgd_t *kvm_pgd_alloc(void);
void kvm_mmu_free_memory_caches(struct kvm_vcpu *vcpu);




enum emulation_result update_pc(struct kvm_vcpu *vcpu, u32 cause);
int kvm_get_badinstr(u32 *opc, struct kvm_vcpu *vcpu, u32 *out);
int kvm_get_badinstrp(u32 *opc, struct kvm_vcpu *vcpu, u32 *out);
# 828 "./arch/mips/include/asm/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_is_ifetch_fault(struct kvm_vcpu_arch *vcpu)
{
 unsigned long badvaddr = vcpu->host_cp0_badvaddr;
 unsigned long epc = (vcpu->pc);
 u32 cause = vcpu->host_cp0_cause;

 if (epc == badvaddr)
  return true;






 if ((cause & ((unsigned long)(1) << 31)) && badvaddr - epc <= 4)
  return true;

 return false;
}

extern enum emulation_result kvm_mips_complete_mmio_load(struct kvm_vcpu *vcpu);

u32 kvm_mips_read_count(struct kvm_vcpu *vcpu);
void kvm_mips_write_count(struct kvm_vcpu *vcpu, u32 count);
void kvm_mips_write_compare(struct kvm_vcpu *vcpu, u32 compare, bool ack);
void kvm_mips_init_count(struct kvm_vcpu *vcpu, unsigned long count_hz);
int kvm_mips_set_count_ctl(struct kvm_vcpu *vcpu, s64 count_ctl);
int kvm_mips_set_count_resume(struct kvm_vcpu *vcpu, s64 count_resume);
int kvm_mips_set_count_hz(struct kvm_vcpu *vcpu, s64 count_hz);
void kvm_mips_count_enable_cause(struct kvm_vcpu *vcpu);
void kvm_mips_count_disable_cause(struct kvm_vcpu *vcpu);
enum hrtimer_restart kvm_mips_count_timeout(struct kvm_vcpu *vcpu);


int kvm_mips_count_disabled(struct kvm_vcpu *vcpu);
ktime_t kvm_mips_freeze_hrtimer(struct kvm_vcpu *vcpu, u32 *count);
int kvm_mips_restore_hrtimer(struct kvm_vcpu *vcpu, ktime_t before,
        u32 count, int min_drift);

void kvm_vz_acquire_htimer(struct kvm_vcpu *vcpu);
void kvm_vz_lose_htimer(struct kvm_vcpu *vcpu);

enum emulation_result kvm_mips_emulate_store(union mips_instruction inst,
          u32 cause,
          struct kvm_vcpu *vcpu);
enum emulation_result kvm_mips_emulate_load(union mips_instruction inst,
         u32 cause,
         struct kvm_vcpu *vcpu);


enum emulation_result kvm_mips_emul_wait(struct kvm_vcpu *vcpu);



enum emulation_result kvm_mips_emul_hypcall(struct kvm_vcpu *vcpu,
         union mips_instruction inst);
int kvm_mips_handle_hypcall(struct kvm_vcpu *vcpu);


extern void kvm_mips_dump_stats(struct kvm_vcpu *vcpu);
extern unsigned long kvm_mips_get_ramsize(struct kvm *kvm);
extern int kvm_vcpu_ioctl_interrupt(struct kvm_vcpu *vcpu,
        struct kvm_mips_interrupt *irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_hardware_unsetup(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_sync_events(struct kvm *kvm) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_free_memslot(struct kvm *kvm,
      struct kvm_memory_slot *slot) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_memslots_updated(struct kvm *kvm, u64 gen) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_vcpu_block_finish(struct kvm_vcpu *vcpu) {}


int kvm_arch_flush_remote_tlb(struct kvm *kvm);
# 40 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/kvm_dirty_ring.h" 1
# 21 "./include/linux/kvm_dirty_ring.h"
struct kvm_dirty_ring {
 u32 dirty_index;
 u32 reset_index;
 u32 size;
 u32 soft_limit;
 struct kvm_dirty_gfn *dirty_gfns;
 int index;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kvm_dirty_ring_get_rsvd_entries(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_dirty_ring_alloc(struct kvm_dirty_ring *ring,
           int index, u32 size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_dirty_ring *kvm_dirty_ring_get(struct kvm *kvm)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_dirty_ring_reset(struct kvm *kvm,
           struct kvm_dirty_ring *ring)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_dirty_ring_push(struct kvm_dirty_ring *ring,
           u32 slot, u64 offset)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kvm_dirty_ring_get_page(struct kvm_dirty_ring *ring,
         u32 offset)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_dirty_ring_free(struct kvm_dirty_ring *ring)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_dirty_ring_soft_full(struct kvm_dirty_ring *ring)
{
 return true;
}
# 41 "./include/linux/kvm_host.h" 2
# 98 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_error_pfn(kvm_pfn_t pfn)
{
 return !!(pfn & (0x7ffULL << 52));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_error_noslot_pfn(kvm_pfn_t pfn)
{
 return !!(pfn & (0xfffULL << 52));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_noslot_pfn(kvm_pfn_t pfn)
{
 return pfn == (0x1ULL << 63);
}
# 137 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_error_page(struct page *page)
{
 return IS_ERR(page);
}
# 162 "./include/linux/kvm_host.h"
bool kvm_make_vcpus_request_mask(struct kvm *kvm, unsigned int req,
     unsigned long *vcpu_bitmap);
bool kvm_make_all_cpus_request(struct kvm *kvm, unsigned int req);
bool kvm_make_all_cpus_request_except(struct kvm *kvm, unsigned int req,
          struct kvm_vcpu *except);
bool kvm_make_cpus_request_mask(struct kvm *kvm, unsigned int req,
    unsigned long *vcpu_bitmap);




extern struct mutex kvm_lock;
extern struct list_head vm_list;

struct kvm_io_range {
 gpa_t addr;
 int len;
 struct kvm_io_device *dev;
};



struct kvm_io_bus {
 int dev_count;
 int ioeventfd_count;
 struct kvm_io_range range[];
};

enum kvm_bus {
 KVM_MMIO_BUS,
 KVM_PIO_BUS,
 KVM_VIRTIO_CCW_NOTIFY_BUS,
 KVM_FAST_MMIO_BUS,
 KVM_NR_BUSES
};

int kvm_io_bus_write(struct kvm_vcpu *vcpu, enum kvm_bus bus_idx, gpa_t addr,
       int len, const void *val);
int kvm_io_bus_write_cookie(struct kvm_vcpu *vcpu, enum kvm_bus bus_idx,
       gpa_t addr, int len, const void *val, long cookie);
int kvm_io_bus_read(struct kvm_vcpu *vcpu, enum kvm_bus bus_idx, gpa_t addr,
      int len, void *val);
int kvm_io_bus_register_dev(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
       int len, struct kvm_io_device *dev);
int kvm_io_bus_unregister_dev(struct kvm *kvm, enum kvm_bus bus_idx,
         struct kvm_io_device *dev);
struct kvm_io_device *kvm_io_bus_get_dev(struct kvm *kvm, enum kvm_bus bus_idx,
      gpa_t addr);
# 233 "./include/linux/kvm_host.h"
struct kvm_gfn_range {
 struct kvm_memory_slot *slot;
 gfn_t start;
 gfn_t end;
 pte_t pte;
 bool may_block;
};
bool kvm_unmap_gfn_range(struct kvm *kvm, struct kvm_gfn_range *range);
bool kvm_age_gfn(struct kvm *kvm, struct kvm_gfn_range *range);
bool kvm_test_age_gfn(struct kvm *kvm, struct kvm_gfn_range *range);
bool kvm_set_spte_gfn(struct kvm *kvm, struct kvm_gfn_range *range);


enum {
 OUTSIDE_GUEST_MODE,
 IN_GUEST_MODE,
 EXITING_GUEST_MODE,
 READING_SHADOW_PAGE_TABLES,
};



struct kvm_host_map {
# 264 "./include/linux/kvm_host.h"
 struct page *page;
 void *hva;
 kvm_pfn_t pfn;
 kvm_pfn_t gfn;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_vcpu_mapped(struct kvm_host_map *map)
{
 return !!map->hva;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_vcpu_can_poll(ktime_t cur, ktime_t stop)
{
 return single_task_running() && !need_resched() && ktime_before(cur, stop);
}





struct kvm_mmio_fragment {
 gpa_t gpa;
 void *data;
 unsigned len;
};

struct kvm_vcpu {
 struct kvm *kvm;

 struct preempt_notifier preempt_notifier;

 int cpu;
 int vcpu_id;
 int vcpu_idx;
 int srcu_idx;
 int mode;
 u64 requests;
 unsigned long guest_debug;

 int pre_pcpu;
 struct list_head blocked_vcpu_list;

 struct mutex mutex;
 struct kvm_run *run;

 struct rcuwait wait;
 struct pid *pid;
 int sigset_active;
 sigset_t sigset;
 unsigned int halt_poll_ns;
 bool valid_wakeup;


 int mmio_needed;
 int mmio_read_completed;
 int mmio_is_write;
 int mmio_cur_fragment;
 int mmio_nr_fragments;
 struct kvm_mmio_fragment mmio_fragments[2];
# 350 "./include/linux/kvm_host.h"
 bool preempted;
 bool ready;
 struct kvm_vcpu_arch arch;
 struct kvm_vcpu_stat stat;
 char stats_id[48];
 struct kvm_dirty_ring dirty_ring;






 int last_used_slot;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void guest_enter_irqoff(void)
{




 do { } while(0);
 vtime_account_guest_enter();
 do { } while(0);
# 384 "./include/linux/kvm_host.h"
 if (!context_tracking_guest_enter()) {
  do { } while(0);
  rcu_virt_note_context_switch(raw_smp_processor_id());
  do { } while(0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void guest_exit_irqoff(void)
{
 context_tracking_guest_exit();

 do { } while(0);

 vtime_account_guest_exit();
 do { } while(0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guest_exit(void)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 guest_exit_irqoff();
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_vcpu_exiting_guest_mode(struct kvm_vcpu *vcpu)
{





                        ;
 return ({ typeof(&vcpu->mode) __ai_ptr = (&vcpu->mode); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __res; if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res = ((__typeof__(*((__ai_ptr)))) __cmpxchg(((__ai_ptr)), (unsigned long)(__typeof__(*((__ai_ptr))))((IN_GUEST_MODE)), (unsigned long)(__typeof__(*((__ai_ptr))))((EXITING_GUEST_MODE)), sizeof(*((__ai_ptr))))); if ((1 << 31) == 0) __asm__ __volatile__("sync" : : :"memory"); __res; }); });
}







struct kvm_memory_slot {
 gfn_t base_gfn;
 unsigned long npages;
 unsigned long *dirty_bitmap;
 struct kvm_arch_memory_slot arch;
 unsigned long userspace_addr;
 u32 flags;
 short id;
 u16 as_id;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_slot_dirty_track_enabled(struct kvm_memory_slot *slot)
{
 return slot->flags & (1UL << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kvm_dirty_bitmap_bytes(struct kvm_memory_slot *memslot)
{
 return ((((memslot->npages)) + ((typeof((memslot->npages)))((64)) - 1)) & ~((typeof((memslot->npages)))((64)) - 1)) / 8;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *kvm_second_dirty_bitmap(struct kvm_memory_slot *memslot)
{
 unsigned long len = kvm_dirty_bitmap_bytes(memslot);

 return memslot->dirty_bitmap + len / sizeof(*memslot->dirty_bitmap);
}





struct kvm_s390_adapter_int {
 u64 ind_addr;
 u64 summary_addr;
 u64 ind_offset;
 u32 summary_offset;
 u32 adapter_id;
};

struct kvm_hv_sint {
 u32 vcpu;
 u32 sint;
};

struct kvm_kernel_irq_routing_entry {
 u32 gsi;
 u32 type;
 int (*set)(struct kvm_kernel_irq_routing_entry *e,
     struct kvm *kvm, int irq_source_id, int level,
     bool line_status);
 union {
  struct {
   unsigned irqchip;
   unsigned pin;
  } irqchip;
  struct {
   u32 address_lo;
   u32 address_hi;
   u32 data;
   u32 flags;
   u32 devid;
  } msi;
  struct kvm_s390_adapter_int adapter;
  struct kvm_hv_sint hv_sint;
 };
 struct hlist_node link;
};
# 516 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_arch_vcpu_memslots_id(struct kvm_vcpu *vcpu)
{
 return 0;
}







struct kvm_memslots {
 u64 generation;

 short id_to_index[((short)(((unsigned short)~0U) >> 1))];
 atomic_t last_used_slot;
 int used_slots;
 struct kvm_memory_slot memslots[];
};

struct kvm {



 spinlock_t mmu_lock;


 struct mutex slots_lock;
# 552 "./include/linux/kvm_host.h"
 struct mutex slots_arch_lock;
 struct mm_struct *mm;
 struct kvm_memslots *memslots[1];
 struct kvm_vcpu *vcpus[16];


 spinlock_t mn_invalidate_lock;
 unsigned long mn_active_invalidate_count;
 struct rcuwait mn_memslots_update_rcuwait;







 atomic_t online_vcpus;
 int created_vcpus;
 int last_boosted_vcpu;
 struct list_head vm_list;
 struct mutex lock;
 struct kvm_io_bus *buses[KVM_NR_BUSES];

 struct {
  spinlock_t lock;
  struct list_head items;
  struct list_head resampler_list;
  struct mutex resampler_lock;
 } irqfds;
 struct list_head ioeventfds;

 struct kvm_vm_stat stat;
 struct kvm_arch arch;
 refcount_t users_count;

 struct kvm_coalesced_mmio_ring *coalesced_mmio_ring;
 spinlock_t ring_lock;
 struct list_head coalesced_zones;


 struct mutex irq_lock;
# 604 "./include/linux/kvm_host.h"
 struct mmu_notifier mmu_notifier;
 unsigned long mmu_notifier_seq;
 long mmu_notifier_count;
 unsigned long mmu_notifier_range_start;
 unsigned long mmu_notifier_range_end;

 struct list_head devices;
 u64 manual_dirty_log_protect;
 struct dentry *debugfs_dentry;
 struct kvm_stat_data **debugfs_stat_data;
 struct srcu_struct srcu;
 struct srcu_struct irq_srcu;
 pid_t userspace_pid;
 unsigned int max_halt_poll_ns;
 u32 dirty_ring_size;
 bool vm_bugged;
 bool vm_dead;




 char stats_id[48];
};
# 654 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_vm_dead(struct kvm *kvm)
{
 kvm->vm_dead = true;
 kvm_make_all_cpus_request(kvm, (4 | ((((1UL))) << (9)) | ((((1UL))) << (8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_vm_bugged(struct kvm *kvm)
{
 kvm->vm_bugged = true;
 kvm_vm_dead(kvm);
}
# 685 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_dirty_log_manual_protect_and_init_set(struct kvm *kvm)
{
 return !!(kvm->manual_dirty_log_protect & (1 << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_io_bus *kvm_get_bus(struct kvm *kvm, enum kvm_bus idx)
{
 return ({ typeof(*(kvm->buses[idx])) *________p1 = (typeof(*(kvm->buses[idx])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_306(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((kvm->buses[idx])) == sizeof(char) || sizeof((kvm->buses[idx])) == sizeof(short) || sizeof((kvm->buses[idx])) == sizeof(int) || sizeof((kvm->buses[idx])) == sizeof(long)) || sizeof((kvm->buses[idx])) == sizeof(long long))) __compiletime_assert_306(); } while (0); (*(const volatile typeof( _Generic(((kvm->buses[idx])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((kvm->buses[idx])))) *)&((kvm->buses[idx]))); }); do { } while (0 && (!((lockdep_is_held(&kvm->slots_lock) || !refcount_read(&kvm->users_count)) || srcu_read_lock_held(&kvm->srcu)))); ; ((typeof(*(kvm->buses[idx])) *)(________p1)); });


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_vcpu *kvm_get_vcpu(struct kvm *kvm, int i)
{
 int num_vcpus = atomic_read(&kvm->online_vcpus);
 i = ({ typeof(i) _i = (i); typeof(num_vcpus) _s = (num_vcpus); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_307(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_307(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_308(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_308(); } while (0); (typeof(_i)) (_i & _mask); });


 rmb();
 return kvm->vcpus[i];
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_vcpu *kvm_get_vcpu_by_id(struct kvm *kvm, int id)
{
 struct kvm_vcpu *vcpu = ((void *)0);
 int i;

 if (id < 0)
  return ((void *)0);
 if (id < 16)
  vcpu = kvm_get_vcpu(kvm, id);
 if (vcpu && vcpu->vcpu_id == id)
  return vcpu;
 for (i = 0; i < atomic_read(&kvm->online_vcpus) && (vcpu = kvm_get_vcpu(kvm, i)) != ((void *)0); i++)
  if (vcpu->vcpu_id == id)
   return vcpu;
 return ((void *)0);
}







void kvm_vcpu_destroy(struct kvm_vcpu *vcpu);

void vcpu_load(struct kvm_vcpu *vcpu);
void vcpu_put(struct kvm_vcpu *vcpu);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_post_irq_ack_notifier_list_update(struct kvm *kvm)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_post_irq_routing_update(struct kvm *kvm)
{
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_irqfd_init(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_irqfd_exit(void)
{
}

int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
    struct module *module);
void kvm_exit(void);

void kvm_get_kvm(struct kvm *kvm);
bool kvm_get_kvm_safe(struct kvm *kvm);
void kvm_put_kvm(struct kvm *kvm);
bool file_is_kvm(struct file *file);
void kvm_put_kvm_no_destroy(struct kvm *kvm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_memslots *__kvm_memslots(struct kvm *kvm, int as_id)
{
 as_id = ({ typeof(as_id) _i = (as_id); typeof(1) _s = (1); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_309(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_309(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_310(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_310(); } while (0); (typeof(_i)) (_i & _mask); });
 return ({ typeof(*(kvm->memslots[as_id])) *________p1 = (typeof(*(kvm->memslots[as_id])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_311(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((kvm->memslots[as_id])) == sizeof(char) || sizeof((kvm->memslots[as_id])) == sizeof(short) || sizeof((kvm->memslots[as_id])) == sizeof(int) || sizeof((kvm->memslots[as_id])) == sizeof(long)) || sizeof((kvm->memslots[as_id])) == sizeof(long long))) __compiletime_assert_311(); } while (0); (*(const volatile typeof( _Generic(((kvm->memslots[as_id])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((kvm->memslots[as_id])))) *)&((kvm->memslots[as_id]))); }); do { } while (0 && (!((lockdep_is_held(&kvm->slots_lock) || !refcount_read(&kvm->users_count)) || srcu_read_lock_held(&kvm->srcu)))); ; ((typeof(*(kvm->memslots[as_id])) *)(________p1)); });


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_memslots *kvm_memslots(struct kvm *kvm)
{
 return __kvm_memslots(kvm, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_memslots *kvm_vcpu_memslots(struct kvm_vcpu *vcpu)
{
 int as_id = kvm_arch_vcpu_memslots_id(vcpu);

 return __kvm_memslots(vcpu->kvm, as_id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct kvm_memory_slot *id_to_memslot(struct kvm_memslots *slots, int id)
{
 int index = slots->id_to_index[id];
 struct kvm_memory_slot *slot;

 if (index < 0)
  return ((void *)0);

 slot = &slots->memslots[index];

 ({ int __ret_warn_on = !!(slot->id != id); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/kvm_host.h", 807, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return slot;
}
# 822 "./include/linux/kvm_host.h"
enum kvm_mr_change {
 KVM_MR_CREATE,
 KVM_MR_DELETE,
 KVM_MR_MOVE,
 KVM_MR_FLAGS_ONLY,
};

int kvm_set_memory_region(struct kvm *kvm,
     const struct kvm_userspace_memory_region *mem);
int __kvm_set_memory_region(struct kvm *kvm,
       const struct kvm_userspace_memory_region *mem);
void kvm_arch_free_memslot(struct kvm *kvm, struct kvm_memory_slot *slot);
void kvm_arch_memslots_updated(struct kvm *kvm, u64 gen);
int kvm_arch_prepare_memory_region(struct kvm *kvm,
    struct kvm_memory_slot *memslot,
    const struct kvm_userspace_memory_region *mem,
    enum kvm_mr_change change);
void kvm_arch_commit_memory_region(struct kvm *kvm,
    const struct kvm_userspace_memory_region *mem,
    struct kvm_memory_slot *old,
    const struct kvm_memory_slot *new,
    enum kvm_mr_change change);

void kvm_arch_flush_shadow_all(struct kvm *kvm);

void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
       struct kvm_memory_slot *slot);

int gfn_to_page_many_atomic(struct kvm_memory_slot *slot, gfn_t gfn,
       struct page **pages, int nr_pages);

struct page *gfn_to_page(struct kvm *kvm, gfn_t gfn);
unsigned long gfn_to_hva(struct kvm *kvm, gfn_t gfn);
unsigned long gfn_to_hva_prot(struct kvm *kvm, gfn_t gfn, bool *writable);
unsigned long gfn_to_hva_memslot(struct kvm_memory_slot *slot, gfn_t gfn);
unsigned long gfn_to_hva_memslot_prot(struct kvm_memory_slot *slot, gfn_t gfn,
          bool *writable);
void kvm_release_page_clean(struct page *page);
void kvm_release_page_dirty(struct page *page);
void kvm_set_page_accessed(struct page *page);

kvm_pfn_t gfn_to_pfn(struct kvm *kvm, gfn_t gfn);
kvm_pfn_t gfn_to_pfn_prot(struct kvm *kvm, gfn_t gfn, bool write_fault,
        bool *writable);
kvm_pfn_t gfn_to_pfn_memslot(struct kvm_memory_slot *slot, gfn_t gfn);
kvm_pfn_t gfn_to_pfn_memslot_atomic(struct kvm_memory_slot *slot, gfn_t gfn);
kvm_pfn_t __gfn_to_pfn_memslot(struct kvm_memory_slot *slot, gfn_t gfn,
          bool atomic, bool *async, bool write_fault,
          bool *writable, hva_t *hva);

void kvm_release_pfn_clean(kvm_pfn_t pfn);
void kvm_release_pfn_dirty(kvm_pfn_t pfn);
void kvm_set_pfn_dirty(kvm_pfn_t pfn);
void kvm_set_pfn_accessed(kvm_pfn_t pfn);

void kvm_release_pfn(kvm_pfn_t pfn, bool dirty);
int kvm_read_guest_page(struct kvm *kvm, gfn_t gfn, void *data, int offset,
   int len);
int kvm_read_guest(struct kvm *kvm, gpa_t gpa, void *data, unsigned long len);
int kvm_read_guest_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
      void *data, unsigned long len);
int kvm_read_guest_offset_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
     void *data, unsigned int offset,
     unsigned long len);
int kvm_write_guest_page(struct kvm *kvm, gfn_t gfn, const void *data,
    int offset, int len);
int kvm_write_guest(struct kvm *kvm, gpa_t gpa, const void *data,
      unsigned long len);
int kvm_write_guest_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
      void *data, unsigned long len);
int kvm_write_guest_offset_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
      void *data, unsigned int offset,
      unsigned long len);
int kvm_gfn_to_hva_cache_init(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
         gpa_t gpa, unsigned long len);
# 940 "./include/linux/kvm_host.h"
int kvm_clear_guest(struct kvm *kvm, gpa_t gpa, unsigned long len);
struct kvm_memory_slot *gfn_to_memslot(struct kvm *kvm, gfn_t gfn);
bool kvm_is_visible_gfn(struct kvm *kvm, gfn_t gfn);
bool kvm_vcpu_is_visible_gfn(struct kvm_vcpu *vcpu, gfn_t gfn);
unsigned long kvm_host_page_size(struct kvm_vcpu *vcpu, gfn_t gfn);
void mark_page_dirty_in_slot(struct kvm *kvm, struct kvm_memory_slot *memslot, gfn_t gfn);
void mark_page_dirty(struct kvm *kvm, gfn_t gfn);

struct kvm_memslots *kvm_vcpu_memslots(struct kvm_vcpu *vcpu);
struct kvm_memory_slot *kvm_vcpu_gfn_to_memslot(struct kvm_vcpu *vcpu, gfn_t gfn);
kvm_pfn_t kvm_vcpu_gfn_to_pfn_atomic(struct kvm_vcpu *vcpu, gfn_t gfn);
kvm_pfn_t kvm_vcpu_gfn_to_pfn(struct kvm_vcpu *vcpu, gfn_t gfn);
int kvm_vcpu_map(struct kvm_vcpu *vcpu, gpa_t gpa, struct kvm_host_map *map);
struct page *kvm_vcpu_gfn_to_page(struct kvm_vcpu *vcpu, gfn_t gfn);
void kvm_vcpu_unmap(struct kvm_vcpu *vcpu, struct kvm_host_map *map, bool dirty);
unsigned long kvm_vcpu_gfn_to_hva(struct kvm_vcpu *vcpu, gfn_t gfn);
unsigned long kvm_vcpu_gfn_to_hva_prot(struct kvm_vcpu *vcpu, gfn_t gfn, bool *writable);
int kvm_vcpu_read_guest_page(struct kvm_vcpu *vcpu, gfn_t gfn, void *data, int offset,
        int len);
int kvm_vcpu_read_guest_atomic(struct kvm_vcpu *vcpu, gpa_t gpa, void *data,
          unsigned long len);
int kvm_vcpu_read_guest(struct kvm_vcpu *vcpu, gpa_t gpa, void *data,
   unsigned long len);
int kvm_vcpu_write_guest_page(struct kvm_vcpu *vcpu, gfn_t gfn, const void *data,
         int offset, int len);
int kvm_vcpu_write_guest(struct kvm_vcpu *vcpu, gpa_t gpa, const void *data,
    unsigned long len);
void kvm_vcpu_mark_page_dirty(struct kvm_vcpu *vcpu, gfn_t gfn);

void kvm_sigset_activate(struct kvm_vcpu *vcpu);
void kvm_sigset_deactivate(struct kvm_vcpu *vcpu);

void kvm_vcpu_block(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu);
bool kvm_vcpu_wake_up(struct kvm_vcpu *vcpu);
void kvm_vcpu_kick(struct kvm_vcpu *vcpu);
int kvm_vcpu_yield_to(struct kvm_vcpu *target);
void kvm_vcpu_on_spin(struct kvm_vcpu *vcpu, bool usermode_vcpu_not_eligible);

void kvm_flush_remote_tlbs(struct kvm *kvm);
void kvm_reload_remote_mmus(struct kvm *kvm);


int kvm_mmu_topup_memory_cache(struct kvm_mmu_memory_cache *mc, int min);
int kvm_mmu_memory_cache_nr_free_objects(struct kvm_mmu_memory_cache *mc);
void kvm_mmu_free_memory_cache(struct kvm_mmu_memory_cache *mc);
void *kvm_mmu_memory_cache_alloc(struct kvm_mmu_memory_cache *mc);


void kvm_inc_notifier_count(struct kvm *kvm, unsigned long start,
       unsigned long end);
void kvm_dec_notifier_count(struct kvm *kvm, unsigned long start,
       unsigned long end);

long kvm_arch_dev_ioctl(struct file *filp,
   unsigned int ioctl, unsigned long arg);
long kvm_arch_vcpu_ioctl(struct file *filp,
    unsigned int ioctl, unsigned long arg);
vm_fault_t kvm_arch_vcpu_fault(struct kvm_vcpu *vcpu, struct vm_fault *vmf);

int kvm_vm_ioctl_check_extension(struct kvm *kvm, long ext);

void kvm_arch_mmu_enable_log_dirty_pt_masked(struct kvm *kvm,
     struct kvm_memory_slot *slot,
     gfn_t gfn_offset,
     unsigned long mask);
void kvm_arch_sync_dirty_log(struct kvm *kvm, struct kvm_memory_slot *memslot);


void kvm_arch_flush_remote_tlbs_memslot(struct kvm *kvm,
     const struct kvm_memory_slot *memslot);






int kvm_vm_ioctl_irq_line(struct kvm *kvm, struct kvm_irq_level *irq_level,
   bool line_status);
int kvm_vm_ioctl_enable_cap(struct kvm *kvm,
       struct kvm_enable_cap *cap);
long kvm_arch_vm_ioctl(struct file *filp,
         unsigned int ioctl, unsigned long arg);

int kvm_arch_vcpu_ioctl_get_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu);
int kvm_arch_vcpu_ioctl_set_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu);

int kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,
        struct kvm_translation *tr);

int kvm_arch_vcpu_ioctl_get_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs);
int kvm_arch_vcpu_ioctl_set_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs);
int kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,
      struct kvm_sregs *sregs);
int kvm_arch_vcpu_ioctl_set_sregs(struct kvm_vcpu *vcpu,
      struct kvm_sregs *sregs);
int kvm_arch_vcpu_ioctl_get_mpstate(struct kvm_vcpu *vcpu,
        struct kvm_mp_state *mp_state);
int kvm_arch_vcpu_ioctl_set_mpstate(struct kvm_vcpu *vcpu,
        struct kvm_mp_state *mp_state);
int kvm_arch_vcpu_ioctl_set_guest_debug(struct kvm_vcpu *vcpu,
     struct kvm_guest_debug *dbg);
int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu);

int kvm_arch_init(void *opaque);
void kvm_arch_exit(void);

void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu);

void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu);
void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu);
int kvm_arch_vcpu_precreate(struct kvm *kvm, unsigned int id);
int kvm_arch_vcpu_create(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_postcreate(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu);
# 1065 "./include/linux/kvm_host.h"
int kvm_arch_hardware_enable(void);
void kvm_arch_hardware_disable(void);
int kvm_arch_hardware_setup(void *opaque);
void kvm_arch_hardware_unsetup(void);
int kvm_arch_check_processor_compat(void *opaque);
int kvm_arch_vcpu_runnable(struct kvm_vcpu *vcpu);
bool kvm_arch_vcpu_in_kernel(struct kvm_vcpu *vcpu);
int kvm_arch_vcpu_should_kick(struct kvm_vcpu *vcpu);
bool kvm_arch_dy_runnable(struct kvm_vcpu *vcpu);
bool kvm_arch_dy_has_pending_interrupt(struct kvm_vcpu *vcpu);
int kvm_arch_post_init_vm(struct kvm *kvm);
void kvm_arch_pre_destroy_vm(struct kvm *kvm);
int kvm_arch_create_vm_debugfs(struct kvm *kvm);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm *kvm_arch_alloc_vm(void)
{
 return kzalloc(sizeof(struct kvm), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kvm_arch_free_vm(struct kvm *kvm)
{
 kvfree(kvm);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_free_vm(struct kvm *kvm)
{
 __kvm_arch_free_vm(kvm);
}
# 1114 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_register_noncoherent_dma(struct kvm *kvm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_unregister_noncoherent_dma(struct kvm *kvm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_arch_has_noncoherent_dma(struct kvm *kvm)
{
 return false;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_start_assignment(struct kvm *kvm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_arch_end_assignment(struct kvm *kvm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_arch_has_assigned_device(struct kvm *kvm)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcuwait *kvm_arch_vcpu_get_wait(struct kvm_vcpu *vcpu)
{



 return &vcpu->wait;

}
# 1163 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_arch_intc_initialized(struct kvm *kvm)
{
 return true;
}


int kvm_arch_init_vm(struct kvm *kvm, unsigned long type);
void kvm_arch_destroy_vm(struct kvm *kvm);
void kvm_arch_sync_events(struct kvm *kvm);

int kvm_cpu_has_pending_timer(struct kvm_vcpu *vcpu);

bool kvm_is_reserved_pfn(kvm_pfn_t pfn);
bool kvm_is_zone_device_pfn(kvm_pfn_t pfn);
bool kvm_is_transparent_hugepage(kvm_pfn_t pfn);

struct kvm_irq_ack_notifier {
 struct hlist_node link;
 unsigned gsi;
 void (*irq_acked)(struct kvm_irq_ack_notifier *kian);
};

int kvm_irq_map_gsi(struct kvm *kvm,
      struct kvm_kernel_irq_routing_entry *entries, int gsi);
int kvm_irq_map_chip_pin(struct kvm *kvm, unsigned irqchip, unsigned pin);

int kvm_set_irq(struct kvm *kvm, int irq_source_id, u32 irq, int level,
  bool line_status);
int kvm_set_msi(struct kvm_kernel_irq_routing_entry *irq_entry, struct kvm *kvm,
  int irq_source_id, int level, bool line_status);
int kvm_arch_set_irq_inatomic(struct kvm_kernel_irq_routing_entry *e,
          struct kvm *kvm, int irq_source_id,
          int level, bool line_status);
bool kvm_irq_has_notifier(struct kvm *kvm, unsigned irqchip, unsigned pin);
void kvm_notify_acked_gsi(struct kvm *kvm, int gsi);
void kvm_notify_acked_irq(struct kvm *kvm, unsigned irqchip, unsigned pin);
void kvm_register_irq_ack_notifier(struct kvm *kvm,
       struct kvm_irq_ack_notifier *kian);
void kvm_unregister_irq_ack_notifier(struct kvm *kvm,
       struct kvm_irq_ack_notifier *kian);
int kvm_request_irq_source_id(struct kvm *kvm);
void kvm_free_irq_source_id(struct kvm *kvm, int irq_source_id);
bool kvm_arch_irqfd_allowed(struct kvm *kvm, struct kvm_irqfd *args);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_memory_slot *
try_get_memslot(struct kvm_memslots *slots, int slot_index, gfn_t gfn)
{
 struct kvm_memory_slot *slot;

 if (slot_index < 0 || slot_index >= slots->used_slots)
  return ((void *)0);






 slot_index = ({ typeof(slot_index) _i = (slot_index); typeof(slots->used_slots) _s = (slots->used_slots); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_312(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_312(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_313(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_313(); } while (0); (typeof(_i)) (_i & _mask); });
 slot = &slots->memslots[slot_index];

 if (gfn >= slot->base_gfn && gfn < slot->base_gfn + slot->npages)
  return slot;
 else
  return ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_memory_slot *
search_memslots(struct kvm_memslots *slots, gfn_t gfn, int *index)
{
 int start = 0, end = slots->used_slots;
 struct kvm_memory_slot *memslots = slots->memslots;
 struct kvm_memory_slot *slot;

 if (__builtin_expect(!!(!slots->used_slots), 0))
  return ((void *)0);

 while (start < end) {
  int slot = start + (end - start) / 2;

  if (gfn >= memslots[slot].base_gfn)
   end = slot;
  else
   start = slot + 1;
 }

 slot = try_get_memslot(slots, start, gfn);
 if (slot) {
  *index = start;
  return slot;
 }

 return ((void *)0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kvm_memory_slot *
__gfn_to_memslot(struct kvm_memslots *slots, gfn_t gfn)
{
 struct kvm_memory_slot *slot;
 int slot_index = atomic_read(&slots->last_used_slot);

 slot = try_get_memslot(slots, slot_index, gfn);
 if (slot)
  return slot;

 slot = search_memslots(slots, gfn, &slot_index);
 if (slot) {
  atomic_set(&slots->last_used_slot, slot_index);
  return slot;
 }

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
__gfn_to_hva_memslot(const struct kvm_memory_slot *slot, gfn_t gfn)
{






 unsigned long offset = gfn - slot->base_gfn;
 offset = ({ typeof(offset) _i = (offset); typeof(slot->npages) _s = (slot->npages); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_314(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_314(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_315(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_315(); } while (0); (typeof(_i)) (_i & _mask); });
 return slot->userspace_addr + offset * ((1UL) << 14);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memslot_id(struct kvm *kvm, gfn_t gfn)
{
 return gfn_to_memslot(kvm, gfn)->id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfn_t
hva_to_gfn_memslot(unsigned long hva, struct kvm_memory_slot *slot)
{
 gfn_t gfn_offset = (hva - slot->userspace_addr) >> 14;

 return slot->base_gfn + gfn_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gpa_t gfn_to_gpa(gfn_t gfn)
{
 return (gpa_t)gfn << 14;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfn_t gpa_to_gfn(gpa_t gpa)
{
 return (gfn_t)(gpa >> 14);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) hpa_t pfn_to_hpa(kvm_pfn_t pfn)
{
 return (hpa_t)pfn << 14;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kvm_vcpu_gpa_to_page(struct kvm_vcpu *vcpu,
      gpa_t gpa)
{
 return kvm_vcpu_gfn_to_page(vcpu, gpa_to_gfn(gpa));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_is_error_gpa(struct kvm *kvm, gpa_t gpa)
{
 unsigned long hva = gfn_to_hva(kvm, gpa_to_gfn(gpa));

 return kvm_is_error_hva(hva);
}

enum kvm_stat_kind {
 KVM_STAT_VM,
 KVM_STAT_VCPU,
};

struct kvm_stat_data {
 struct kvm *kvm;
 const struct _kvm_stats_desc *desc;
 enum kvm_stat_kind kind;
};

struct _kvm_stats_desc {
 struct kvm_stats_desc desc;
 char name[48];
};
# 1468 "./include/linux/kvm_host.h"
extern struct dentry *kvm_debugfs_dir;

ssize_t kvm_stats_read(char *id, const struct kvm_stats_header *header,
         const struct _kvm_stats_desc *desc,
         void *stats, size_t size_stats,
         char *user_buffer, size_t size, loff_t *offset);
# 1484 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_stats_linear_hist_update(u64 *data, size_t size,
      u64 value, size_t bucket_size)
{
 size_t index = div64_u64(value, bucket_size);

 index = __builtin_choose_expr(((!!(sizeof((typeof(index) *)1 == (typeof(size - 1) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(index) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(size - 1) * 0l)) : (int *)8))))), ((index) < (size - 1) ? (index) : (size - 1)), ({ typeof(index) __UNIQUE_ID___x316 = (index); typeof(size - 1) __UNIQUE_ID___y317 = (size - 1); ((__UNIQUE_ID___x316) < (__UNIQUE_ID___y317) ? (__UNIQUE_ID___x316) : (__UNIQUE_ID___y317)); }));
 ++data[index];
}
# 1501 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_stats_log_hist_update(u64 *data, size_t size, u64 value)
{
 size_t index = fls64(value);

 index = __builtin_choose_expr(((!!(sizeof((typeof(index) *)1 == (typeof(size - 1) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(index) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(size - 1) * 0l)) : (int *)8))))), ((index) < (size - 1) ? (index) : (size - 1)), ({ typeof(index) __UNIQUE_ID___x318 = (index); typeof(size - 1) __UNIQUE_ID___y319 = (size - 1); ((__UNIQUE_ID___x318) < (__UNIQUE_ID___y319) ? (__UNIQUE_ID___x318) : (__UNIQUE_ID___y319)); }));
 ++data[index];
}







extern const struct kvm_stats_header kvm_vm_stats_header;
extern const struct _kvm_stats_desc kvm_vm_stats_desc[];
extern const struct kvm_stats_header kvm_vcpu_stats_header;
extern const struct _kvm_stats_desc kvm_vcpu_stats_desc[];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_retry(struct kvm *kvm, unsigned long mmu_seq)
{
 if (__builtin_expect(!!(kvm->mmu_notifier_count), 0))
  return 1;
# 1535 "./include/linux/kvm_host.h"
 rmb();
 if (kvm->mmu_notifier_seq != mmu_seq)
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_retry_hva(struct kvm *kvm,
      unsigned long mmu_seq,
      unsigned long hva)
{
 do { (void)(&kvm->mmu_lock); } while (0);






 if (__builtin_expect(!!(kvm->mmu_notifier_count), 0) &&
     hva >= kvm->mmu_notifier_range_start &&
     hva < kvm->mmu_notifier_range_end)
  return 1;
 if (kvm->mmu_notifier_seq != mmu_seq)
  return 1;
 return 0;
}
# 1578 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_free_irq_routing(struct kvm *kvm) {}



int kvm_send_userspace_msi(struct kvm *kvm, struct kvm_msi *msi);



void kvm_eventfd_init(struct kvm *kvm);
int kvm_ioeventfd(struct kvm *kvm, struct kvm_ioeventfd *args);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_irqfd(struct kvm *kvm, struct kvm_irqfd *args)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_irqfd_release(struct kvm *kvm) {}
# 1626 "./include/linux/kvm_host.h"
void kvm_arch_irq_routing_update(struct kvm *kvm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_make_request(int req, struct kvm_vcpu *vcpu)
{




 wmb();
 set_bit(req & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))), (void *)&vcpu->requests);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_request_pending(struct kvm_vcpu *vcpu)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_320(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(vcpu->requests) == sizeof(char) || sizeof(vcpu->requests) == sizeof(short) || sizeof(vcpu->requests) == sizeof(int) || sizeof(vcpu->requests) == sizeof(long)) || sizeof(vcpu->requests) == sizeof(long long))) __compiletime_assert_320(); } while (0); (*(const volatile typeof( _Generic((vcpu->requests), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (vcpu->requests))) *)&(vcpu->requests)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_test_request(int req, struct kvm_vcpu *vcpu)
{
 return arch_test_bit(req & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))), (void *)&vcpu->requests);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_clear_request(int req, struct kvm_vcpu *vcpu)
{
 clear_bit(req & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))), (void *)&vcpu->requests);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_check_request(int req, struct kvm_vcpu *vcpu)
{
 if (kvm_test_request(req, vcpu)) {
  kvm_clear_request(req, vcpu);





  __asm__ __volatile__("sync" : : :"memory");
  return true;
 } else {
  return false;
 }
}

extern bool kvm_rebooting;

extern unsigned int halt_poll_ns;
extern unsigned int halt_poll_ns_grow;
extern unsigned int halt_poll_ns_grow_start;
extern unsigned int halt_poll_ns_shrink;

struct kvm_device {
 const struct kvm_device_ops *ops;
 struct kvm *kvm;
 void *private;
 struct list_head vm_node;
};


struct kvm_device_ops {
 const char *name;






 int (*create)(struct kvm_device *dev, u32 type);





 void (*init)(struct kvm_device *dev);
# 1708 "./include/linux/kvm_host.h"
 void (*destroy)(struct kvm_device *dev);
# 1717 "./include/linux/kvm_host.h"
 void (*release)(struct kvm_device *dev);

 int (*set_attr)(struct kvm_device *dev, struct kvm_device_attr *attr);
 int (*get_attr)(struct kvm_device *dev, struct kvm_device_attr *attr);
 int (*has_attr)(struct kvm_device *dev, struct kvm_device_attr *attr);
 long (*ioctl)(struct kvm_device *dev, unsigned int ioctl,
        unsigned long arg);
 int (*mmap)(struct kvm_device *dev, struct vm_area_struct *vma);
};

void kvm_device_get(struct kvm_device *dev);
void kvm_device_put(struct kvm_device *dev);
struct kvm_device *kvm_device_from_filp(struct file *filp);
int kvm_register_device_ops(const struct kvm_device_ops *ops, u32 type);
void kvm_unregister_device_ops(u32 type);

extern struct kvm_device_ops kvm_mpic_ops;
extern struct kvm_device_ops kvm_arm_vgic_v2_ops;
extern struct kvm_device_ops kvm_arm_vgic_v3_ops;
# 1750 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_vcpu_set_in_spin_loop(struct kvm_vcpu *vcpu, bool val)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kvm_vcpu_set_dy_eligible(struct kvm_vcpu *vcpu, bool val)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_is_visible_memslot(struct kvm_memory_slot *memslot)
{
 return (memslot && memslot->id < (((short)(((unsigned short)~0U) >> 1)) - 0) &&
  !(memslot->flags & (1UL << 16)));
}

struct kvm_vcpu *kvm_get_running_vcpu(void);
struct kvm_vcpu * *kvm_get_running_vcpus(void);
# 1790 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vcpu_valid_wakeup(struct kvm_vcpu *vcpu)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kvm_arch_no_poll(struct kvm_vcpu *vcpu)
{
 return false;
}



long kvm_arch_vcpu_async_ioctl(struct file *filp,
          unsigned int ioctl, unsigned long arg);
# 1818 "./include/linux/kvm_host.h"
void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,
         unsigned long start, unsigned long end);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kvm_arch_vcpu_run_pid_change(struct kvm_vcpu *vcpu)
{
 return 0;
}


typedef int (*kvm_vm_thread_fn_t)(struct kvm *kvm, uintptr_t data);

int kvm_vm_create_worker_thread(struct kvm *kvm, kvm_vm_thread_fn_t thread_fn,
    uintptr_t data, const char *name,
    struct task_struct **thread_ptr);
# 19 "arch/mips/kvm/tlb.c" 2



# 1 "./arch/mips/include/asm/bootinfo.h" 1
# 16 "./arch/mips/include/asm/bootinfo.h"
# 1 "./arch/mips/include/asm/setup.h" 1





# 1 "./arch/mips/include/uapi/asm/setup.h" 1
# 7 "./arch/mips/include/asm/setup.h" 2

extern void prom_putchar(char);
extern void setup_early_printk(void);


extern void setup_8250_early_printk_port(unsigned long base,
 unsigned int reg_shift, unsigned int timeout);





extern void set_handler(unsigned long offset, void *addr, unsigned long len);
extern void set_uncached_handler(unsigned long offset, void *addr, unsigned long len);

typedef void (*vi_handler_t)(void);
extern void *set_vi_handler(int n, vi_handler_t addr);

extern void *set_except_vector(int n, void *addr);
extern unsigned long ebase;
extern unsigned int hwrena;
extern void per_cpu_trap_init(bool);
extern void cpu_cache_init(void);
# 17 "./arch/mips/include/asm/bootinfo.h" 2
# 53 "./arch/mips/include/asm/bootinfo.h"
enum loongson2ef_machine_type {
 MACH_LOONGSON_UNKNOWN,
 MACH_LEMOTE_FL2E,
 MACH_LEMOTE_FL2F,
 MACH_LEMOTE_ML2F7,
 MACH_LEMOTE_YL2F89,
 MACH_DEXXON_GDIUM2F10,
 MACH_LEMOTE_NAS,
 MACH_LEMOTE_LL2F,
 MACH_LOONGSON_END
};




enum ingenic_machine_type {
 MACH_INGENIC_UNKNOWN,
 MACH_INGENIC_JZ4720,
 MACH_INGENIC_JZ4725,
 MACH_INGENIC_JZ4725B,
 MACH_INGENIC_JZ4730,
 MACH_INGENIC_JZ4740,
 MACH_INGENIC_JZ4750,
 MACH_INGENIC_JZ4755,
 MACH_INGENIC_JZ4760,
 MACH_INGENIC_JZ4760B,
 MACH_INGENIC_JZ4770,
 MACH_INGENIC_JZ4775,
 MACH_INGENIC_JZ4780,
 MACH_INGENIC_X1000,
 MACH_INGENIC_X1000E,
 MACH_INGENIC_X1830,
 MACH_INGENIC_X2000,
 MACH_INGENIC_X2000E,
 MACH_INGENIC_X2000H,
 MACH_INGENIC_X2100,
};

extern char *system_type;
const char *get_system_type(void);

extern unsigned long mips_machtype;

extern void detect_memory_region(phys_addr_t start, phys_addr_t sz_min, phys_addr_t sz_max);

extern void prom_init(void);
extern void prom_free_prom_memory(void);
extern void prom_cleanup(void);

extern void free_init_pages(const char *what,
       unsigned long begin, unsigned long end);

extern void (*free_init_pages_eva)(void *begin, void *end);




extern char arcs_cmdline[4096];




extern unsigned long fw_arg0, fw_arg1, fw_arg2, fw_arg3;


# 1 "./include/linux/libfdt.h" 1




# 1 "./include/linux/libfdt_env.h" 1
# 13 "./include/linux/libfdt_env.h"
typedef __be16 fdt16_t;
typedef __be32 fdt32_t;
typedef __be64 fdt64_t;
# 6 "./include/linux/libfdt.h" 2
# 1 "././include/linux/../../scripts/dtc/libfdt/libfdt.h" 1








# 1 "././include/linux/../../scripts/dtc/libfdt/libfdt_env.h" 1
# 10 "././include/linux/../../scripts/dtc/libfdt/libfdt.h" 2
# 1 "././include/linux/../../scripts/dtc/libfdt/fdt.h" 1
# 12 "././include/linux/../../scripts/dtc/libfdt/fdt.h"
struct fdt_header {
 fdt32_t magic;
 fdt32_t totalsize;
 fdt32_t off_dt_struct;
 fdt32_t off_dt_strings;
 fdt32_t off_mem_rsvmap;
 fdt32_t version;
 fdt32_t last_comp_version;


 fdt32_t boot_cpuid_phys;


 fdt32_t size_dt_strings;


 fdt32_t size_dt_struct;
};

struct fdt_reserve_entry {
 fdt64_t address;
 fdt64_t size;
};

struct fdt_node_header {
 fdt32_t tag;
 char name[0];
};

struct fdt_property {
 fdt32_t tag;
 fdt32_t len;
 fdt32_t nameoff;
 char data[0];
};
# 11 "././include/linux/../../scripts/dtc/libfdt/libfdt.h" 2
# 120 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int checklen);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *fdt_offset_ptr_w(void *fdt, int offset, int checklen)
{
 return (void *)(uintptr_t)fdt_offset_ptr(fdt, offset, checklen);
}

uint32_t fdt_next_tag(const void *fdt, int offset, int *nextoffset);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint16_t fdt16_ld(const fdt16_t *p)
{
 const uint8_t *bp = (const uint8_t *)p;

 return ((uint16_t)bp[0] << 8) | bp[1];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t fdt32_ld(const fdt32_t *p)
{
 const uint8_t *bp = (const uint8_t *)p;

 return ((uint32_t)bp[0] << 24)
  | ((uint32_t)bp[1] << 16)
  | ((uint32_t)bp[2] << 8)
  | bp[3];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt32_st(void *property, uint32_t value)
{
 uint8_t *bp = (uint8_t *)property;

 bp[0] = value >> 24;
 bp[1] = (value >> 16) & 0xff;
 bp[2] = (value >> 8) & 0xff;
 bp[3] = value & 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t fdt64_ld(const fdt64_t *p)
{
 const uint8_t *bp = (const uint8_t *)p;

 return ((uint64_t)bp[0] << 56)
  | ((uint64_t)bp[1] << 48)
  | ((uint64_t)bp[2] << 40)
  | ((uint64_t)bp[3] << 32)
  | ((uint64_t)bp[4] << 24)
  | ((uint64_t)bp[5] << 16)
  | ((uint64_t)bp[6] << 8)
  | bp[7];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt64_st(void *property, uint64_t value)
{
 uint8_t *bp = (uint8_t *)property;

 bp[0] = value >> 56;
 bp[1] = (value >> 48) & 0xff;
 bp[2] = (value >> 40) & 0xff;
 bp[3] = (value >> 32) & 0xff;
 bp[4] = (value >> 24) & 0xff;
 bp[5] = (value >> 16) & 0xff;
 bp[6] = (value >> 8) & 0xff;
 bp[7] = value & 0xff;
}





int fdt_next_node(const void *fdt, int offset, int *depth);
# 202 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_first_subnode(const void *fdt, int offset);
# 215 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_next_subnode(const void *fdt, int offset);
# 266 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_magic(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->magic = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_totalsize(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->totalsize = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_off_dt_struct(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->off_dt_struct = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_off_dt_strings(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->off_dt_strings = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_off_mem_rsvmap(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->off_mem_rsvmap = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_version(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->version = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_last_comp_version(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->last_comp_version = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_boot_cpuid_phys(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->boot_cpuid_phys = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_size_dt_strings(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->size_dt_strings = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdt_set_size_dt_struct(void *fdt, uint32_t val) { struct fdt_header *fdth = (struct fdt_header *)fdt; fdth->size_dt_struct = (( __be32)(__u32)__builtin_bswap32((__u32)((val)))); };
# 284 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
size_t fdt_header_size(const void *fdt);







size_t fdt_header_size_(uint32_t version);
# 310 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_check_header(const void *fdt);
# 331 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_move(const void *fdt, void *buf, int bufsize);





int fdt_check_full(const void *fdt, size_t bufsize);
# 353 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const char *fdt_get_string(const void *fdt, int stroffset, int *lenp);
# 367 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const char *fdt_string(const void *fdt, int stroffset);
# 381 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_find_max_phandle(const void *fdt, uint32_t *phandle);
# 398 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t fdt_get_max_phandle(const void *fdt)
{
 uint32_t phandle;
 int err;

 err = fdt_find_max_phandle(fdt, &phandle);
 if (err < 0)
  return (uint32_t)-1;

 return phandle;
}
# 422 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_generate_phandle(const void *fdt, uint32_t *phandle);
# 435 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_num_mem_rsv(const void *fdt);
# 454 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_get_mem_rsv(const void *fdt, int n, uint64_t *address, uint64_t *size);
# 471 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_subnode_offset_namelen(const void *fdt, int parentoffset,
          const char *name, int namelen);
# 498 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_subnode_offset(const void *fdt, int parentoffset, const char *name);
# 512 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_path_offset_namelen(const void *fdt, const char *path, int namelen);
# 538 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_path_offset(const void *fdt, const char *path);
# 563 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const char *fdt_get_name(const void *fdt, int nodeoffset, int *lenp);
# 583 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_first_property_offset(const void *fdt, int nodeoffset);
# 604 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_next_property_offset(const void *fdt, int offset);
# 660 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const struct fdt_property *fdt_get_property_by_offset(const void *fdt,
            int offset,
            int *lenp);
# 679 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const struct fdt_property *fdt_get_property_namelen(const void *fdt,
          int nodeoffset,
          const char *name,
          int namelen, int *lenp);
# 713 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const struct fdt_property *fdt_get_property(const void *fdt, int nodeoffset,
         const char *name, int *lenp);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fdt_property *fdt_get_property_w(void *fdt, int nodeoffset,
            const char *name,
            int *lenp)
{
 return (struct fdt_property *)(uintptr_t)
  fdt_get_property(fdt, nodeoffset, name, lenp);
}
# 755 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const void *fdt_getprop_by_offset(const void *fdt, int offset,
      const char **namep, int *lenp);
# 773 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const void *fdt_getprop_namelen(const void *fdt, int nodeoffset,
    const char *name, int namelen, int *lenp);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *fdt_getprop_namelen_w(void *fdt, int nodeoffset,
       const char *name, int namelen,
       int *lenp)
{
 return (void *)(uintptr_t)fdt_getprop_namelen(fdt, nodeoffset, name,
            namelen, lenp);
}
# 812 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const void *fdt_getprop(const void *fdt, int nodeoffset,
   const char *name, int *lenp);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *fdt_getprop_w(void *fdt, int nodeoffset,
      const char *name, int *lenp)
{
 return (void *)(uintptr_t)fdt_getprop(fdt, nodeoffset, name, lenp);
}
# 832 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
uint32_t fdt_get_phandle(const void *fdt, int nodeoffset);
# 847 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const char *fdt_get_alias_namelen(const void *fdt,
      const char *name, int namelen);
# 863 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const char *fdt_get_alias(const void *fdt, const char *name);
# 890 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen);
# 922 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_supernode_atdepth_offset(const void *fdt, int nodeoffset,
     int supernodedepth, int *nodedepth);
# 944 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_node_depth(const void *fdt, int nodeoffset);
# 967 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_parent_offset(const void *fdt, int nodeoffset);
# 1007 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_node_offset_by_prop_value(const void *fdt, int startoffset,
      const char *propname,
      const void *propval, int proplen);
# 1030 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle);
# 1053 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_node_check_compatible(const void *fdt, int nodeoffset,
         const char *compatible);
# 1090 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_node_offset_by_compatible(const void *fdt, int startoffset,
      const char *compatible);
# 1105 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_stringlist_contains(const char *strlist, int listlen, const char *str);
# 1118 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_stringlist_count(const void *fdt, int nodeoffset, const char *property);
# 1139 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_stringlist_search(const void *fdt, int nodeoffset, const char *property,
     const char *string);
# 1166 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
const char *fdt_stringlist_get(const void *fdt, int nodeoffset,
          const char *property, int index,
          int *lenp);
# 1203 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_address_cells(const void *fdt, int nodeoffset);
# 1224 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_size_cells(const void *fdt, int nodeoffset);
# 1250 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_setprop_inplace_namelen_partial(void *fdt, int nodeoffset,
     const char *name, int namelen,
     uint32_t idx, const void *val,
     int len);
# 1285 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_setprop_inplace(void *fdt, int nodeoffset, const char *name,
   const void *val, int len);
# 1317 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_setprop_inplace_u32(void *fdt, int nodeoffset,
       const char *name, uint32_t val)
{
 fdt32_t tmp = (( __be32)(__u32)__builtin_bswap32((__u32)((val))));
 return fdt_setprop_inplace(fdt, nodeoffset, name, &tmp, sizeof(tmp));
}
# 1352 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_setprop_inplace_u64(void *fdt, int nodeoffset,
       const char *name, uint64_t val)
{
 fdt64_t tmp = (( __be64)(__u64)__builtin_bswap64((__u64)((val))));
 return fdt_setprop_inplace(fdt, nodeoffset, name, &tmp, sizeof(tmp));
}
# 1369 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_setprop_inplace_cell(void *fdt, int nodeoffset,
        const char *name, uint32_t val)
{
 return fdt_setprop_inplace_u32(fdt, nodeoffset, name, val);
}
# 1399 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_nop_property(void *fdt, int nodeoffset, const char *name);
# 1423 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_nop_node(void *fdt, int nodeoffset);
# 1453 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_create_with_flags(void *buf, int bufsize, uint32_t flags);
# 1466 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_create(void *buf, int bufsize);

int fdt_resize(void *fdt, void *buf, int bufsize);
int fdt_add_reservemap_entry(void *fdt, uint64_t addr, uint64_t size);
int fdt_finish_reservemap(void *fdt);
int fdt_begin_node(void *fdt, const char *name);
int fdt_property(void *fdt, const char *name, const void *val, int len);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_property_u32(void *fdt, const char *name, uint32_t val)
{
 fdt32_t tmp = (( __be32)(__u32)__builtin_bswap32((__u32)((val))));
 return fdt_property(fdt, name, &tmp, sizeof(tmp));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_property_u64(void *fdt, const char *name, uint64_t val)
{
 fdt64_t tmp = (( __be64)(__u64)__builtin_bswap64((__u64)((val))));
 return fdt_property(fdt, name, &tmp, sizeof(tmp));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_property_cell(void *fdt, const char *name, uint32_t val)
{
 return fdt_property_u32(fdt, name, val);
}
# 1504 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_property_placeholder(void *fdt, const char *name, int len, void **valp);



int fdt_end_node(void *fdt);
int fdt_finish(void *fdt);





int fdt_create_empty_tree(void *buf, int bufsize);
int fdt_open_into(const void *fdt, void *buf, int bufsize);
int fdt_pack(void *fdt);
# 1542 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_add_mem_rsv(void *fdt, uint64_t address, uint64_t size);
# 1566 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_del_mem_rsv(void *fdt, int n);
# 1592 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_set_name(void *fdt, int nodeoffset, const char *name);
# 1622 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_setprop(void *fdt, int nodeoffset, const char *name,
  const void *val, int len);
# 1653 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_setprop_placeholder(void *fdt, int nodeoffset, const char *name,
       int len, void **prop_data);
# 1684 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_setprop_u32(void *fdt, int nodeoffset, const char *name,
      uint32_t val)
{
 fdt32_t tmp = (( __be32)(__u32)__builtin_bswap32((__u32)((val))));
 return fdt_setprop(fdt, nodeoffset, name, &tmp, sizeof(tmp));
}
# 1719 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_setprop_u64(void *fdt, int nodeoffset, const char *name,
      uint64_t val)
{
 fdt64_t tmp = (( __be64)(__u64)__builtin_bswap64((__u64)((val))));
 return fdt_setprop(fdt, nodeoffset, name, &tmp, sizeof(tmp));
}
# 1737 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_setprop_cell(void *fdt, int nodeoffset, const char *name,
       uint32_t val)
{
 return fdt_setprop_u32(fdt, nodeoffset, name, val);
}
# 1831 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_appendprop(void *fdt, int nodeoffset, const char *name,
     const void *val, int len);
# 1862 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_appendprop_u32(void *fdt, int nodeoffset,
         const char *name, uint32_t val)
{
 fdt32_t tmp = (( __be32)(__u32)__builtin_bswap32((__u32)((val))));
 return fdt_appendprop(fdt, nodeoffset, name, &tmp, sizeof(tmp));
}
# 1897 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_appendprop_u64(void *fdt, int nodeoffset,
         const char *name, uint64_t val)
{
 fdt64_t tmp = (( __be64)(__u64)__builtin_bswap64((__u64)((val))));
 return fdt_appendprop(fdt, nodeoffset, name, &tmp, sizeof(tmp));
}
# 1915 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fdt_appendprop_cell(void *fdt, int nodeoffset,
          const char *name, uint32_t val)
{
 return fdt_appendprop_u32(fdt, nodeoffset, name, val);
}
# 1985 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_appendprop_addrrange(void *fdt, int parent, int nodeoffset,
        const char *name, uint64_t addr, uint64_t size);
# 2010 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_delprop(void *fdt, int nodeoffset, const char *name);
# 2028 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_add_subnode_namelen(void *fdt, int parentoffset,
       const char *name, int namelen);
# 2063 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_add_subnode(void *fdt, int parentoffset, const char *name);
# 2086 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_del_node(void *fdt, int nodeoffset);
# 2117 "././include/linux/../../scripts/dtc/libfdt/libfdt.h"
int fdt_overlay_apply(void *fdt, void *fdto);





const char *fdt_strerror(int errval);
# 7 "./include/linux/libfdt.h" 2
# 119 "./arch/mips/include/asm/bootinfo.h" 2
# 1 "./include/linux/of_fdt.h" 1
# 23 "./include/linux/of_fdt.h"
struct device_node;


extern void *of_fdt_unflatten_tree(const unsigned long *blob,
       struct device_node *dad,
       struct device_node **mynodes);


extern int __attribute__((__section__(".init.data"))) dt_root_addr_cells;
extern int __attribute__((__section__(".init.data"))) dt_root_size_cells;
extern void *initial_boot_params;

extern char __dtb_start[];
extern char __dtb_end[];


extern u64 of_flat_dt_translate_address(unsigned long node);
extern void of_fdt_limit_memory(int limit);




extern int of_scan_flat_dt(int (*it)(unsigned long node, const char *uname,
         int depth, void *data),
      void *data);
extern int of_scan_flat_dt_subnodes(unsigned long node,
        int (*it)(unsigned long node,
           const char *uname,
           void *data),
        void *data);
extern int of_get_flat_dt_subnode_by_name(unsigned long node,
       const char *uname);
extern const void *of_get_flat_dt_prop(unsigned long node, const char *name,
           int *size);
extern int of_flat_dt_is_compatible(unsigned long node, const char *name);
extern unsigned long of_get_flat_dt_root(void);
extern uint32_t of_get_flat_dt_phandle(unsigned long node);

extern int early_init_dt_scan_chosen(unsigned long node, const char *uname,
         int depth, void *data);
extern int early_init_dt_scan_memory(unsigned long node, const char *uname,
         int depth, void *data);
extern int early_init_dt_scan_chosen_stdout(void);
extern void early_init_fdt_scan_reserved_mem(void);
extern void early_init_fdt_reserve_self(void);
extern void early_init_dt_add_memory_arch(u64 base, u64 size);
extern u64 dt_mem_next_cell(int s, const __be32 **cellp);


extern int early_init_dt_scan_root(unsigned long node, const char *uname,
       int depth, void *data);

extern bool early_init_dt_scan(void *params);
extern bool early_init_dt_verify(void *params);
extern void early_init_dt_scan_nodes(void);

extern const char *of_flat_dt_get_machine_name(void);
extern const void *of_flat_dt_match_machine(const void *default_match,
  const void * (*get_next_compat)(const char * const**));


extern void unflatten_device_tree(void);
extern void unflatten_and_copy_device_tree(void);
extern void early_init_devtree(void *);
extern void early_get_first_memblock_info(void *, phys_addr_t *);
# 120 "./arch/mips/include/asm/bootinfo.h" 2

extern char __appended_dtb[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *get_fdt(void)
{
 if (0 ||
     0)
  if (((fdt32_ld(&((const struct fdt_header *)(&__appended_dtb))->magic))) == 0xd00dfeed)
   return &__appended_dtb;

 if (fw_arg0 == -2)
  return (void *)fw_arg1;

 if (1)
  if (&__dtb_start != &__dtb_end)
   return &__dtb_start;

 return ((void *)0);
}





extern void plat_mem_setup(void);





extern void plat_swiotlb_setup(void);
# 173 "./arch/mips/include/asm/bootinfo.h"
extern void *plat_get_fdt(void);
# 23 "arch/mips/kvm/tlb.c" 2

# 1 "./arch/mips/include/asm/mmu_context.h" 1
# 21 "./arch/mips/include/asm/mmu_context.h"
# 1 "./arch/mips/include/asm/cacheflush.h" 1
# 46 "./arch/mips/include/asm/cacheflush.h"
extern void (*flush_cache_all)(void);
extern void (*__flush_cache_all)(void);
extern void (*flush_cache_mm)(struct mm_struct *mm);

extern void (*flush_cache_range)(struct vm_area_struct *vma,
 unsigned long start, unsigned long end);
extern void (*flush_cache_page)(struct vm_area_struct *vma, unsigned long page, unsigned long pfn);
extern void __flush_dcache_page(struct page *page);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_page(struct page *page)
{
 if ((((1UL) << 14) < 0x4000))
  __flush_dcache_page(page);
 else if (!1)
  set_bit(PG_arch_1, &(page)->flags);
}





extern void __flush_anon_page(struct page *, unsigned long);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_anon_page(struct vm_area_struct *vma,
 struct page *page, unsigned long vmaddr)
{
 if ((((1UL) << 14) < 0x4000) && PageAnon(page))
  __flush_anon_page(page, vmaddr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_icache_page(struct vm_area_struct *vma,
 struct page *page)
{
}

extern void (*flush_icache_range)(unsigned long start, unsigned long end);
extern void (*local_flush_icache_range)(unsigned long start, unsigned long end);
extern void (*__flush_icache_user_range)(unsigned long start,
      unsigned long end);
extern void (*__local_flush_icache_user_range)(unsigned long start,
            unsigned long end);

extern void (*__flush_cache_vmap)(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vmap(unsigned long start, unsigned long end)
{
 if ((((1UL) << 14) < 0x4000))
  __flush_cache_vmap();
}

extern void (*__flush_cache_vunmap)(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vunmap(unsigned long start, unsigned long end)
{
 if ((((1UL) << 14) < 0x4000))
  __flush_cache_vunmap();
}

extern void copy_to_user_page(struct vm_area_struct *vma,
 struct page *page, unsigned long vaddr, void *dst, const void *src,
 unsigned long len);

extern void copy_from_user_page(struct vm_area_struct *vma,
 struct page *page, unsigned long vaddr, void *dst, const void *src,
 unsigned long len);

extern void (*flush_icache_all)(void);
extern void (*local_flush_data_cache_page)(void * addr);
extern void (*flush_data_cache_page)(unsigned long addr);


unsigned long run_uncached(void *func);

extern void *kmap_coherent(struct page *page, unsigned long addr);
extern void kunmap_coherent(void);
extern void *kmap_noncoherent(struct page *page, unsigned long addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap_noncoherent(void)
{
 kunmap_coherent();
}






extern void (*__flush_kernel_vmap_range)(unsigned long vaddr, int size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_kernel_vmap_range(void *vaddr, int size)
{
 if ((((1UL) << 14) < 0x4000))
  __flush_kernel_vmap_range((unsigned long) vaddr, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_kernel_vmap_range(void *vaddr, int size)
{
 if ((((1UL) << 14) < 0x4000))
  __flush_kernel_vmap_range((unsigned long) vaddr, size);
}
# 22 "./arch/mips/include/asm/mmu_context.h" 2

# 1 "./arch/mips/include/asm/ginvt.h" 1






enum ginvt_type {
 GINVT_FULL,
 GINVT_VA,
 GINVT_MMID,
};
# 24 "./arch/mips/include/asm/ginvt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ginvt(unsigned long addr, enum ginvt_type type)
{
 asm volatile(
  ".set	push\n"
  ".macro	" "ginvt" " " "rs" ", " "type" "\n\t" ".macro	parse_r var r\n\t" "\\var	= -1\n\t" ".ifc	\\r, $" "0" "\n\t" "\\var	= " "0" "\n\t" ".endif\n\t" ".ifc	\\r, $" "1" "\n\t" "\\var	= " "1" "\n\t" ".endif\n\t" ".ifc	\\r, $" "2" "\n\t" "\\var	= " "2" "\n\t" ".endif\n\t" ".ifc	\\r, $" "3" "\n\t" "\\var	= " "3" "\n\t" ".endif\n\t" ".ifc	\\r, $" "4" "\n\t" "\\var	= " "4" "\n\t" ".endif\n\t" ".ifc	\\r, $" "5" "\n\t" "\\var	= " "5" "\n\t" ".endif\n\t" ".ifc	\\r, $" "6" "\n\t" "\\var	= " "6" "\n\t" ".endif\n\t" ".ifc	\\r, $" "7" "\n\t" "\\var	= " "7" "\n\t" ".endif\n\t" ".ifc	\\r, $" "8" "\n\t" "\\var	= " "8" "\n\t" ".endif\n\t" ".ifc	\\r, $" "9" "\n\t" "\\var	= " "9" "\n\t" ".endif\n\t" ".ifc	\\r, $" "10" "\n\t" "\\var	= " "10" "\n\t" ".endif\n\t" ".ifc	\\r, $" "11" "\n\t" "\\var	= " "11" "\n\t" ".endif\n\t" ".ifc	\\r, $" "12" "\n\t" "\\var	= " "12" "\n\t" ".endif\n\t" ".ifc	\\r, $" "13" "\n\t" "\\var	= " "13" "\n\t" ".endif\n\t" ".ifc	\\r, $" "14" "\n\t" "\\var	= " "14" "\n\t" ".endif\n\t" ".ifc	\\r, $" "15" "\n\t" "\\var	= " "15" "\n\t" ".endif\n\t" ".ifc	\\r, $" "16" "\n\t" "\\var	= " "16" "\n\t" ".endif\n\t" ".ifc	\\r, $" "17" "\n\t" "\\var	= " "17" "\n\t" ".endif\n\t" ".ifc	\\r, $" "18" "\n\t" "\\var	= " "18" "\n\t" ".endif\n\t" ".ifc	\\r, $" "19" "\n\t" "\\var	= " "19" "\n\t" ".endif\n\t" ".ifc	\\r, $" "20" "\n\t" "\\var	= " "20" "\n\t" ".endif\n\t" ".ifc	\\r, $" "21" "\n\t" "\\var	= " "21" "\n\t" ".endif\n\t" ".ifc	\\r, $" "22" "\n\t" "\\var	= " "22" "\n\t" ".endif\n\t" ".ifc	\\r, $" "23" "\n\t" "\\var	= " "23" "\n\t" ".endif\n\t" ".ifc	\\r, $" "24" "\n\t" "\\var	= " "24" "\n\t" ".endif\n\t" ".ifc	\\r, $" "25" "\n\t" "\\var	= " "25" "\n\t" ".endif\n\t" ".ifc	\\r, $" "26" "\n\t" "\\var	= " "26" "\n\t" ".endif\n\t" ".ifc	\\r, $" "27" "\n\t" "\\var	= " "27" "\n\t" ".endif\n\t" ".ifc	\\r, $" "28" "\n\t" "\\var	= " "28" "\n\t" ".endif\n\t" ".ifc	\\r, $" "29" "\n\t" "\\var	= " "29" "\n\t" ".endif\n\t" ".ifc	\\r, $" "30" "\n\t" "\\var	= " "30" "\n\t" ".endif\n\t" ".ifc	\\r, $" "31" "\n\t" "\\var	= " "31" "\n\t" ".endif\n\t" ".iflt	\\var\n\t" ".error	\"Unable to parse register name \\r\"\n\t" ".endif\n\t" ".endm\n\t" "parse_r __" "rs" ", \\" "rs" "\n\t" ".insn\n\t" ".word (" "0x7c0000bd | (__rs << 21) | (\\type << 8)" ")\n\t" ".purgem parse_r\n\t" ".endm\n\t"
  "	ginvt	%0, %1\n"
  ".purgem ginvt\n"
  ".set	pop"
  :
  : "r"(addr), "i"(type)
  : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ginvt_full(void)
{
 ginvt(0, GINVT_FULL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ginvt_va(unsigned long addr)
{
 addr &= (~((1 << 14) - 1)) << 1;
 ginvt(addr, GINVT_VA);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ginvt_mmid(void)
{
 ginvt(0, GINVT_MMID);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ginvt_va_mmid(unsigned long addr)
{
 addr &= (~((1 << 14) - 1)) << 1;
 ginvt(addr, GINVT_VA | GINVT_MMID);
}
# 24 "./arch/mips/include/asm/mmu_context.h" 2

# 1 "./arch/mips/include/asm/tlbflush.h" 1
# 16 "./arch/mips/include/asm/tlbflush.h"
extern void local_flush_tlb_all(void);
extern void local_flush_tlb_range(struct vm_area_struct *vma,
 unsigned long start, unsigned long end);
extern void local_flush_tlb_kernel_range(unsigned long start,
 unsigned long end);
extern void local_flush_tlb_page(struct vm_area_struct *vma,
 unsigned long page);
extern void local_flush_tlb_one(unsigned long vaddr);

# 1 "./arch/mips/include/asm/mmu_context.h" 1
# 26 "./arch/mips/include/asm/tlbflush.h" 2



extern void flush_tlb_all(void);
extern void flush_tlb_mm(struct mm_struct *);
extern void flush_tlb_range(struct vm_area_struct *vma, unsigned long,
 unsigned long);
extern void flush_tlb_kernel_range(unsigned long, unsigned long);
extern void flush_tlb_page(struct vm_area_struct *, unsigned long);
extern void flush_tlb_one(unsigned long vaddr);
# 26 "./arch/mips/include/asm/mmu_context.h" 2
# 1 "./include/asm-generic/mm_hooks.h" 1
# 10 "./include/asm-generic/mm_hooks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_dup_mmap(struct mm_struct *oldmm,
    struct mm_struct *mm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_exit_mmap(struct mm_struct *mm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_unmap(struct mm_struct *mm,
   unsigned long start, unsigned long end)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vma_access_permitted(struct vm_area_struct *vma,
  bool write, bool execute, bool foreign)
{

 return true;
}
# 27 "./arch/mips/include/asm/mmu_context.h" 2
# 36 "./arch/mips/include/asm/mmu_context.h"
extern void tlbmiss_handler_setup_pgd(unsigned long);
extern char tlbmiss_handler_setup_pgd_end[];
# 94 "./arch/mips/include/asm/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 asid_version_mask(unsigned int cpu)
{
 unsigned long asid_mask = cpu_asid_mask(&cpu_data[cpu]);

 return ~(u64)(asid_mask | (asid_mask - 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 asid_first_version(unsigned int cpu)
{
 return ~asid_version_mask(cpu) + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cpu_context(unsigned int cpu, const struct mm_struct *mm)
{
 if (((2 >= (6)) && (cpu_data[0].options & (((((1ULL))) << (57))))))
  return atomic64_read(&mm->context.mmid);

 return mm->context.asid[cpu];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_context(unsigned int cpu,
       struct mm_struct *mm, u64 ctx)
{
 if (((2 >= (6)) && (cpu_data[0].options & (((((1ULL))) << (57))))))
  atomic64_set(&mm->context.mmid, ctx);
 else
  mm->context.asid[cpu] = ctx;
}





extern void get_new_mmu_context(struct mm_struct *mm);
extern void check_mmu_context(struct mm_struct *mm);
extern void check_switch_mmu_context(struct mm_struct *mm);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
init_new_context(struct task_struct *tsk, struct mm_struct *mm)
{
 int i;

 if (((2 >= (6)) && (cpu_data[0].options & (((((1ULL))) << (57)))))) {
  set_cpu_context(0, mm, 0);
 } else {
  for (((i)) = -1; ((i)) = cpumask_next(((i)), (((const struct cpumask *)&__cpu_possible_mask))), ((i)) < nr_cpu_ids;)
   set_cpu_context(i, mm, 0);
 }

 mm->context.bd_emupage_allocmap = ((void *)0);
 do { spinlock_check(&mm->context.bd_emupage_lock); *(&mm->context.bd_emupage_lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 do { static struct lock_class_key __key; __init_waitqueue_head((&mm->context.bd_emupage_queue), "&mm->context.bd_emupage_queue", &__key); } while (0);

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void switch_mm(struct mm_struct *prev, struct mm_struct *next,
        struct task_struct *tsk)
{
 unsigned int cpu = raw_smp_processor_id();
 unsigned long flags;
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);

 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 check_switch_mmu_context(next);





 cpumask_clear_cpu(cpu, mm_cpumask(prev));
 cpumask_set_cpu(cpu, mm_cpumask(next));
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_context(struct mm_struct *mm)
{
 dsemul_mm_cleanup(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
drop_mmu_context(struct mm_struct *mm)
{
 unsigned long flags;
 unsigned int cpu;
 u32 old_mmid;
 u64 ctx;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);

 cpu = raw_smp_processor_id();
 ctx = cpu_context(cpu, mm);

 if (!ctx) {

 } else if (((2 >= (6)) && (cpu_data[0].options & (((((1ULL))) << (57)))))) {







  do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
  old_mmid = ({ unsigned int __res; if (5 == 0) __asm__ __volatile__( "mfc0\t%0, " "$4" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$4" ", " "5" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
  do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$4" "\n\t" : : "Jr" ((unsigned int)(ctx & cpu_asid_mask(&cpu_data[cpu])))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$4" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(ctx & cpu_asid_mask(&cpu_data[cpu])))); } while (0);
  do { __asm__ __volatile__( "" ); } while (0);
  ginvt_mmid();
  sync_ginv();
  do { if (5 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$4" "\n\t" : : "Jr" ((unsigned int)(old_mmid))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$4" ", " "5" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_mmid))); } while (0);
  do { } while (0);
  do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 } else if (cpumask_test_cpu(cpu, mm_cpumask(mm))) {




  do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
  get_new_mmu_context(mm);
  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)((cpu_context((cpu), (mm)) & cpu_asid_mask(&cpu_data[cpu]))))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)((cpu_context((cpu), (mm)) & cpu_asid_mask(&cpu_data[cpu]))))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = ((cpu_context((cpu), (mm)) & cpu_asid_mask(&cpu_data[cpu]))); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$10" "\n\t" ".set\tpop" : : "Jr" ((cpu_context((cpu), (mm)) & cpu_asid_mask(&cpu_data[cpu])))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((cpu_context((cpu), (mm)) & cpu_asid_mask(&cpu_data[cpu])))); } while (0); } while (0);
  do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 } else {

  set_cpu_context(cpu, mm, 0);
 }

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

# 1 "./include/asm-generic/mmu_context.h" 1








struct task_struct;
struct mm_struct;
# 21 "./include/asm-generic/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enter_lazy_tlb(struct mm_struct *mm,
   struct task_struct *tsk)
{
}
# 57 "./include/asm-generic/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void activate_mm(struct mm_struct *prev_mm,
          struct mm_struct *next_mm)
{
 switch_mm(prev_mm, next_mm, (current_thread_info()->task));
}
# 70 "./include/asm-generic/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void deactivate_mm(struct task_struct *tsk,
   struct mm_struct *mm)
{
}
# 236 "./arch/mips/include/asm/mmu_context.h" 2
# 25 "arch/mips/kvm/tlb.c" 2

# 1 "./arch/mips/include/asm/tlb.h" 1
# 14 "./arch/mips/include/asm/tlb.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int num_wired_entries(void)
{
 unsigned int wired = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });

 if ((((2 >= (6)) || (cpu_data[0].isa_level & (0x00000400))) | ((2 >= (6)) && (cpu_data[0].isa_level & (0x00000800)))))
  wired &= ((unsigned long)(0xffff) << 0);

 return wired;
}

# 1 "./include/asm-generic/tlb.h" 1
# 15 "./include/asm-generic/tlb.h"
# 1 "./include/linux/swap.h" 1








# 1 "./include/linux/memcontrol.h" 1
# 13 "./include/linux/memcontrol.h"
# 1 "./include/linux/cgroup.h" 1
# 16 "./include/linux/cgroup.h"
# 1 "./include/uapi/linux/cgroupstats.h" 1
# 20 "./include/uapi/linux/cgroupstats.h"
# 1 "./include/uapi/linux/taskstats.h" 1
# 41 "./include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 72 "./include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;

 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 132 "./include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;


 __u64 ac_btime64;
};
# 184 "./include/uapi/linux/taskstats.h"
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 21 "./include/uapi/linux/cgroupstats.h" 2
# 32 "./include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 17 "./include/linux/cgroup.h" 2

# 1 "./include/linux/seq_file.h" 1






# 1 "./include/linux/string_helpers.h" 1





# 1 "./include/linux/ctype.h" 1
# 21 "./include/linux/ctype.h"
extern const unsigned char _ctype[];
# 43 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isdigit(int c)
{
 return '0' <= c && c <= '9';
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __tolower(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x01)) != 0))
  c -= 'A'-'a';
 return c;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __toupper(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x02)) != 0))
  c -= 'a'-'A';
 return c;
}
# 70 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char _tolower(const char c)
{
 return c | 0x20;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isodigit(const char c)
{
 return c >= '0' && c <= '7';
}
# 7 "./include/linux/string_helpers.h" 2



struct file;
struct task_struct;



enum string_size_units {
 STRING_UNITS_10,
 STRING_UNITS_2,
};

void string_get_size(u64 size, u64 blk_size, enum string_size_units units,
       char *buf, int len);
# 32 "./include/linux/string_helpers.h"
int string_unescape(char *src, char *dst, size_t size, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_unescape_inplace(char *buf, unsigned int flags)
{
 return string_unescape(buf, buf, 0, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_unescape_any(char *src, char *dst, size_t size)
{
 return string_unescape(src, dst, size, (((((1UL))) << (0)) | ((((1UL))) << (1)) | ((((1UL))) << (2)) | ((((1UL))) << (3))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_unescape_any_inplace(char *buf)
{
 return string_unescape_any(buf, buf, 0);
}
# 64 "./include/linux/string_helpers.h"
int string_escape_mem(const char *src, size_t isz, char *dst, size_t osz,
  unsigned int flags, const char *only);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_escape_mem_any_np(const char *src, size_t isz,
  char *dst, size_t osz, const char *only)
{
 return string_escape_mem(src, isz, dst, osz, ((((((1UL))) << (0)) | ((((1UL))) << (3)) | ((((1UL))) << (1)) | ((((1UL))) << (2))) | ((((1UL))) << (4))), only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_escape_str(const char *src, char *dst, size_t sz,
  unsigned int flags, const char *only)
{
 return string_escape_mem(src, strlen(src), dst, sz, flags, only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_escape_str_any_np(const char *src, char *dst,
  size_t sz, const char *only)
{
 return string_escape_str(src, dst, sz, ((((((1UL))) << (0)) | ((((1UL))) << (3)) | ((((1UL))) << (1)) | ((((1UL))) << (2))) | ((((1UL))) << (4))), only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void string_upper(char *dst, const char *src)
{
 do {
  *dst++ = __toupper(*src);
 } while (*src++);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void string_lower(char *dst, const char *src)
{
 do {
  *dst++ = __tolower(*src);
 } while (*src++);
}

char *kstrdup_quotable(const char *src, gfp_t gfp);
char *kstrdup_quotable_cmdline(struct task_struct *task, gfp_t gfp);
char *kstrdup_quotable_file(struct file *file, gfp_t gfp);

void kfree_strarray(char **array, size_t n);
# 8 "./include/linux/seq_file.h" 2







struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 51 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 64 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 __BUG_ON((unsigned long)(m->count > m->size));
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 84 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  __BUG_ON((unsigned long)(m->count + num > m->size));
  m->count += num;
 }
}
# 102 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
ssize_t seq_read_iter(struct kiocb *iocb, struct iov_iter *iter);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape_mem(struct seq_file *m, const char *src, size_t len,
      unsigned int flags, const char *esc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_escape_str(struct seq_file *m, const char *src,
      unsigned int flags, const char *esc)
{
 seq_escape_mem(m, src, strlen(src), flags, esc);
}
# 150 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_escape(struct seq_file *m, const char *s, const char *esc)
{
 seq_escape_str(m, s, ((((1UL))) << (3)), esc);
}

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);


void seq_bprintf(struct seq_file *m, const char *f, const u32 *binary);
# 222 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{

 return seq->file->f_cred->user_ns;




}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 272 "./include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 19 "./include/linux/cgroup.h" 2



# 1 "./include/linux/ns_common.h" 1






struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
 refcount_t count;
};
# 23 "./include/linux/cgroup.h" 2
# 1 "./include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "./include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct time_namespace *time_ns;
 struct time_namespace *time_ns_for_children;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 53 "./include/linux/nsproxy.h"
struct nsset {
 unsigned flags;
 struct nsproxy *nsproxy;
 struct fs_struct *fs;
 const struct cred *cred;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *nsset_cred(struct nsset *set)
{
 if (set->flags & 0x10000000)
  return (struct cred *)set->cred;

 return ((void *)0);
}
# 94 "./include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) nsproxy_cache_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 24 "./include/linux/cgroup.h" 2
# 1 "./include/linux/user_namespace.h" 1
# 17 "./include/linux/user_namespace.h"
struct uid_gid_extent {
 u32 first;
 u32 lower_first;
 u32 count;
};

struct uid_gid_map {
 u32 nr_extents;
 union {
  struct uid_gid_extent extent[5];
  struct {
   struct uid_gid_extent *forward;
   struct uid_gid_extent *reverse;
  };
 };
};





struct ucounts;

enum ucount_type {
 UCOUNT_USER_NAMESPACES,
 UCOUNT_PID_NAMESPACES,
 UCOUNT_UTS_NAMESPACES,
 UCOUNT_IPC_NAMESPACES,
 UCOUNT_NET_NAMESPACES,
 UCOUNT_MNT_NAMESPACES,
 UCOUNT_CGROUP_NAMESPACES,
 UCOUNT_TIME_NAMESPACES,

 UCOUNT_INOTIFY_INSTANCES,
 UCOUNT_INOTIFY_WATCHES,





 UCOUNT_RLIMIT_NPROC,
 UCOUNT_RLIMIT_MSGQUEUE,
 UCOUNT_RLIMIT_SIGPENDING,
 UCOUNT_RLIMIT_MEMLOCK,
 UCOUNT_COUNTS,
};



struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;


 bool parent_could_setfcap;







 struct list_head keyring_name_list;
 struct key *user_keyring_register;
 struct rw_semaphore keyring_sem;






 struct work_struct work;

 struct ctl_table_set set;
 struct ctl_table_header *sysctls;

 struct ucounts *ucounts;
 long ucount_max[UCOUNT_COUNTS];
} ;

struct ucounts {
 struct hlist_node node;
 struct user_namespace *ns;
 kuid_t uid;
 atomic_t count;
 atomic_long_t ucount[UCOUNT_COUNTS];
};

extern struct user_namespace init_user_ns;
extern struct ucounts init_ucounts;

bool setup_userns_sysctls(struct user_namespace *ns);
void retire_userns_sysctls(struct user_namespace *ns);
struct ucounts *inc_ucount(struct user_namespace *ns, kuid_t uid, enum ucount_type type);
void dec_ucount(struct ucounts *ucounts, enum ucount_type type);
struct ucounts *alloc_ucounts(struct user_namespace *ns, kuid_t uid);
struct ucounts * __attribute__((__warn_unused_result__)) get_ucounts(struct ucounts *ucounts);
void put_ucounts(struct ucounts *ucounts);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long get_ucounts_value(struct ucounts *ucounts, enum ucount_type type)
{
 return atomic_long_read(&ucounts->ucount[type]);
}

long inc_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
bool dec_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
long inc_rlimit_get_ucounts(struct ucounts *ucounts, enum ucount_type type);
void dec_rlimit_put_ucounts(struct ucounts *ucounts, enum ucount_type type);
bool is_ucounts_overlimit(struct ucounts *ucounts, enum ucount_type type, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_rlimit_ucount_max(struct user_namespace *ns,
  enum ucount_type type, unsigned long max)
{
 ns->ucount_max[type] = max <= ((long)(~0UL >> 1)) ? max : ((long)(~0UL >> 1));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
 return ns;
}

extern int create_user_ns(struct cred *new);
extern int unshare_userns(unsigned long unshare_flags, struct cred **new_cred);
extern void __put_user_ns(struct user_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_user_ns(struct user_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  __put_user_ns(ns);
}

struct seq_operations;
extern const struct seq_operations proc_uid_seq_operations;
extern const struct seq_operations proc_gid_seq_operations;
extern const struct seq_operations proc_projid_seq_operations;
extern ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
extern int proc_setgroups_show(struct seq_file *m, void *v);
extern bool userns_may_setgroups(const struct user_namespace *ns);
extern bool in_userns(const struct user_namespace *ancestor,
         const struct user_namespace *child);
extern bool current_in_userns(const struct user_namespace *target_ns);
struct ns_common *ns_get_owner(struct ns_common *ns);
# 25 "./include/linux/cgroup.h" 2

# 1 "./include/linux/kernel_stat.h" 1
# 20 "./include/linux/kernel_stat.h"
enum cpu_usage_stat {
 CPUTIME_USER,
 CPUTIME_NICE,
 CPUTIME_SYSTEM,
 CPUTIME_SOFTIRQ,
 CPUTIME_IRQ,
 CPUTIME_IDLE,
 CPUTIME_IOWAIT,
 CPUTIME_STEAL,
 CPUTIME_GUEST,
 CPUTIME_GUEST_NICE,
 NR_STATS,
};

struct kernel_cpustat {
 u64 cpustat[NR_STATS];
};

struct kernel_stat {
 unsigned long irqs_sum;
 unsigned int softirqs[NR_SOFTIRQS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_stat) kstat;
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_cpustat) kernel_cpustat;







extern unsigned long long nr_context_switches(void);

extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);
extern void kstat_incr_irq_this_cpu(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kstat_incr_softirqs_this_cpu(unsigned int irq)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstat.softirqs[irq])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_softirqs_cpu(unsigned int irq, int cpu)
{
       return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).softirqs[irq];
}




extern unsigned int kstat_irqs_usr(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_cpu_irqs_sum(unsigned int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).irqs_sum;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 kcpustat_field(struct kernel_cpustat *kcpustat,
     enum cpu_usage_stat usage, int cpu)
{
 return kcpustat->cpustat[usage];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcpustat_cpu_fetch(struct kernel_cpustat *dst, int cpu)
{
 *dst = (*({ do { const void *__vpp_verify = (typeof((&(kernel_cpustat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kernel_cpustat)))) *)((&(kernel_cpustat)))); (typeof((typeof(*((&(kernel_cpustat)))) *)((&(kernel_cpustat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



extern void account_user_time(struct task_struct *, u64);
extern void account_guest_time(struct task_struct *, u64);
extern void account_system_time(struct task_struct *, int, u64);
extern void account_system_index_time(struct task_struct *, u64,
          enum cpu_usage_stat);
extern void account_steal_time(u64);
extern void account_idle_time(u64);
extern u64 get_idle_time(struct kernel_cpustat *kcs, int cpu);







extern void account_process_tick(struct task_struct *, int user);


extern void account_idle_ticks(unsigned long ticks);
# 27 "./include/linux/cgroup.h" 2

# 1 "./include/linux/cgroup-defs.h" 1
# 20 "./include/linux/cgroup-defs.h"
# 1 "./include/linux/u64_stats_sync.h" 1
# 68 "./include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


# 1 "./arch/mips/include/generated/asm/local64.h" 1
# 1 "./include/asm-generic/local64.h" 1
# 22 "./include/asm-generic/local64.h"
# 1 "./arch/mips/include/asm/local.h" 1
# 12 "./arch/mips/include/asm/local.h"
typedef struct
{
 atomic_long_t a;
} local_t;
# 30 "./arch/mips/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_add_return(long i, local_t * l)
{
 unsigned long result;

 if (1 && 0) {
  unsigned long temp;

  __asm__ __volatile__(
  "	.set	push					\n"
  "	.set	arch=r4000				\n"
   ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n"
  "1:" "lld	" "%1, %2		# local_add_return	\n"
  "	addu	%0, %1, %3				\n"
   "scd	" "%0, %2					\n"
  "	beqzl	%0, 1b					\n"
  "	addu	%0, %1, %3				\n"
  "	.set	pop					\n"
  : "=&r" (result), "=&r" (temp), "=m" (l->a.counter)
  : "Ir" (i), "m" (l->a.counter)
  : "memory");
 } else if (1) {
  unsigned long temp;

  __asm__ __volatile__(
  "	.set	push					\n"
  "	.set	""arch=r4000""			\n"
   ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n"
  "1:" "lld	" "%1, %2		# local_add_return	\n"
  "	addu	%0, %1, %3				\n"
   "scd	" "%0, %2					\n"
  "	beqz	%0, 1b					\n"
  "	addu	%0, %1, %3				\n"
  "	.set	pop					\n"
  : "=&r" (result), "=&r" (temp), "=m" (l->a.counter)
  : "Ir" (i), "m" (l->a.counter)
  : "memory");
 } else {
  unsigned long flags;

  do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
  result = l->a.counter;
  result += i;
  l->a.counter = result;
  do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 }

 return result;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_sub_return(long i, local_t * l)
{
 unsigned long result;

 if (1 && 0) {
  unsigned long temp;

  __asm__ __volatile__(
  "	.set	push					\n"
  "	.set	arch=r4000				\n"
   ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n"
  "1:" "lld	" "%1, %2		# local_sub_return	\n"
  "	subu	%0, %1, %3				\n"
   "scd	" "%0, %2					\n"
  "	beqzl	%0, 1b					\n"
  "	subu	%0, %1, %3				\n"
  "	.set	pop					\n"
  : "=&r" (result), "=&r" (temp), "=m" (l->a.counter)
  : "Ir" (i), "m" (l->a.counter)
  : "memory");
 } else if (1) {
  unsigned long temp;

  __asm__ __volatile__(
  "	.set	push					\n"
  "	.set	""arch=r4000""			\n"
   ".if (( 0x00 ) != -1) && ( (1 << 31) ); .set push; .set mips64r2; .rept 1; sync 0x00; .endr; .set pop; .else; ; .endif" "			\n"
  "1:" "lld	" "%1, %2		# local_sub_return	\n"
  "	subu	%0, %1, %3				\n"
   "scd	" "%0, %2					\n"
  "	beqz	%0, 1b					\n"
  "	subu	%0, %1, %3				\n"
  "	.set	pop					\n"
  : "=&r" (result), "=&r" (temp), "=m" (l->a.counter)
  : "Ir" (i), "m" (l->a.counter)
  : "memory");
 } else {
  unsigned long flags;

  do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
  result = l->a.counter;
  result -= i;
  l->a.counter = result;
  do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 }

 return result;
}
# 23 "./include/asm-generic/local64.h" 2

typedef struct {
 local_t a;
} local64_t;
# 2 "./arch/mips/include/generated/asm/local64.h" 2
# 76 "./include/linux/u64_stats_sync.h" 2

typedef struct {
 local64_t v;
} u64_stats_t ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 u64_stats_read(const u64_stats_t *p)
{
 return atomic_long_read(&(&(&p->v)->a)->a);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_set(u64_stats_t *p, u64 val)
{
 atomic_long_set(&((&(&p->v)->a))->a, ((val)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_add(u64_stats_t *p, unsigned long val)
{
 atomic_long_add(((val)), (&((&(&p->v)->a))->a));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_inc(u64_stats_t *p)
{
 atomic_long_inc(&(&(&p->v)->a)->a);
}
# 131 "./include/linux/u64_stats_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_init(struct u64_stats_sync *syncp)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
{
 unsigned long flags = 0;





 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
    unsigned long flags)
{




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return false;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
          unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}
# 21 "./include/linux/cgroup-defs.h" 2

# 1 "./include/linux/bpf-cgroup.h" 1




# 1 "./include/linux/bpf.h" 1






# 1 "./include/uapi/linux/bpf.h" 1
# 12 "./include/uapi/linux/bpf.h"
# 1 "./include/uapi/linux/bpf_common.h" 1
# 13 "./include/uapi/linux/bpf.h" 2
# 53 "./include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};

union bpf_iter_link_info {
 struct {
  __u32 map_fd;
 } map;
};
# 838 "./include/uapi/linux/bpf.h"
enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_RUN = BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
 BPF_MAP_LOOKUP_BATCH,
 BPF_MAP_LOOKUP_AND_DELETE_BATCH,
 BPF_MAP_UPDATE_BATCH,
 BPF_MAP_DELETE_BATCH,
 BPF_LINK_CREATE,
 BPF_LINK_UPDATE,
 BPF_LINK_GET_FD_BY_ID,
 BPF_LINK_GET_NEXT_ID,
 BPF_ENABLE_STATS,
 BPF_ITER_CREATE,
 BPF_LINK_DETACH,
 BPF_PROG_BIND_MAP,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
 BPF_MAP_TYPE_STRUCT_OPS,
 BPF_MAP_TYPE_RINGBUF,
 BPF_MAP_TYPE_INODE_STORAGE,
 BPF_MAP_TYPE_TASK_STORAGE,
 BPF_MAP_TYPE_BLOOM_FILTER,
};
# 920 "./include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
 BPF_PROG_TYPE_TRACING,
 BPF_PROG_TYPE_STRUCT_OPS,
 BPF_PROG_TYPE_EXT,
 BPF_PROG_TYPE_LSM,
 BPF_PROG_TYPE_SK_LOOKUP,
 BPF_PROG_TYPE_SYSCALL,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 BPF_TRACE_RAW_TP,
 BPF_TRACE_FENTRY,
 BPF_TRACE_FEXIT,
 BPF_MODIFY_RETURN,
 BPF_LSM_MAC,
 BPF_TRACE_ITER,
 BPF_CGROUP_INET4_GETPEERNAME,
 BPF_CGROUP_INET6_GETPEERNAME,
 BPF_CGROUP_INET4_GETSOCKNAME,
 BPF_CGROUP_INET6_GETSOCKNAME,
 BPF_XDP_DEVMAP,
 BPF_CGROUP_INET_SOCK_RELEASE,
 BPF_XDP_CPUMAP,
 BPF_SK_LOOKUP,
 BPF_XDP,
 BPF_SK_SKB_VERDICT,
 BPF_SK_REUSEPORT_SELECT,
 BPF_SK_REUSEPORT_SELECT_OR_MIGRATE,
 BPF_PERF_EVENT,
 __MAX_BPF_ATTACH_TYPE
};



enum bpf_link_type {
 BPF_LINK_TYPE_UNSPEC = 0,
 BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
 BPF_LINK_TYPE_TRACING = 2,
 BPF_LINK_TYPE_CGROUP = 3,
 BPF_LINK_TYPE_ITER = 4,
 BPF_LINK_TYPE_NETNS = 5,
 BPF_LINK_TYPE_XDP = 6,
 BPF_LINK_TYPE_PERF_EVENT = 7,

 MAX_BPF_LINK_TYPE,
};
# 1169 "./include/uapi/linux/bpf.h"
enum {
 BPF_ANY = 0,
 BPF_NOEXIST = 1,
 BPF_EXIST = 2,
 BPF_F_LOCK = 4,
};


enum {
 BPF_F_NO_PREALLOC = (1U << 0),






 BPF_F_NO_COMMON_LRU = (1U << 1),

 BPF_F_NUMA_NODE = (1U << 2),


 BPF_F_RDONLY = (1U << 3),
 BPF_F_WRONLY = (1U << 4),


 BPF_F_STACK_BUILD_ID = (1U << 5),


 BPF_F_ZERO_SEED = (1U << 6),


 BPF_F_RDONLY_PROG = (1U << 7),
 BPF_F_WRONLY_PROG = (1U << 8),


 BPF_F_CLONE = (1U << 9),


 BPF_F_MMAPABLE = (1U << 10),


 BPF_F_PRESERVE_ELEMS = (1U << 11),


 BPF_F_INNER_MAP = (1U << 12),
};
# 1230 "./include/uapi/linux/bpf.h"
enum bpf_stats_type {

 BPF_STATS_RUN_TIME = 0,
};

enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};


struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};



union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
  __u32 btf_vmlinux_value_type_id;
# 1284 "./include/uapi/linux/bpf.h"
  __u64 map_extra;
 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u64 __attribute__((aligned(8))) in_batch;


  __u64 __attribute__((aligned(8))) out_batch;
  __u64 __attribute__((aligned(8))) keys;
  __u64 __attribute__((aligned(8))) values;
  __u32 count;




  __u32 map_fd;
  __u64 elem_flags;
  __u64 flags;
 } batch;

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
  __u32 attach_btf_id;
  union {

   __u32 attach_prog_fd;

   __u32 attach_btf_obj_fd;
  };
  __u32 :32;
  __u64 __attribute__((aligned(8))) fd_array;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
  __u32 replace_bpf_fd;



 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
  __u32 flags;
  __u32 cpu;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
   __u32 link_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;

 struct {
  __u32 prog_fd;
  union {
   __u32 target_fd;
   __u32 target_ifindex;
  };
  __u32 attach_type;
  __u32 flags;
  union {
   __u32 target_btf_id;
   struct {
    __u64 __attribute__((aligned(8))) iter_info;
    __u32 iter_info_len;
   };
   struct {




    __u64 bpf_cookie;
   } perf_event;
  };
 } link_create;

 struct {
  __u32 link_fd;

  __u32 new_prog_fd;
  __u32 flags;


  __u32 old_prog_fd;
 } link_update;

 struct {
  __u32 link_fd;
 } link_detach;

 struct {
  __u32 type;
 } enable_stats;

 struct {
  __u32 link_fd;
  __u32 flags;
 } iter_create;

 struct {
  __u32 prog_fd;
  __u32 map_fd;
  __u32 flags;
 } prog_bind_map;

} __attribute__((aligned(8)));
# 5129 "./include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie, BPF_FUNC_skb_output, BPF_FUNC_probe_read_user, BPF_FUNC_probe_read_kernel, BPF_FUNC_probe_read_user_str, BPF_FUNC_probe_read_kernel_str, BPF_FUNC_tcp_send_ack, BPF_FUNC_send_signal_thread, BPF_FUNC_jiffies64, BPF_FUNC_read_branch_records, BPF_FUNC_get_ns_current_pid_tgid, BPF_FUNC_xdp_output, BPF_FUNC_get_netns_cookie, BPF_FUNC_get_current_ancestor_cgroup_id, BPF_FUNC_sk_assign, BPF_FUNC_ktime_get_boot_ns, BPF_FUNC_seq_printf, BPF_FUNC_seq_write, BPF_FUNC_sk_cgroup_id, BPF_FUNC_sk_ancestor_cgroup_id, BPF_FUNC_ringbuf_output, BPF_FUNC_ringbuf_reserve, BPF_FUNC_ringbuf_submit, BPF_FUNC_ringbuf_discard, BPF_FUNC_ringbuf_query, BPF_FUNC_csum_level, BPF_FUNC_skc_to_tcp6_sock, BPF_FUNC_skc_to_tcp_sock, BPF_FUNC_skc_to_tcp_timewait_sock, BPF_FUNC_skc_to_tcp_request_sock, BPF_FUNC_skc_to_udp6_sock, BPF_FUNC_get_task_stack, BPF_FUNC_load_hdr_opt, BPF_FUNC_store_hdr_opt, BPF_FUNC_reserve_hdr_opt, BPF_FUNC_inode_storage_get, BPF_FUNC_inode_storage_delete, BPF_FUNC_d_path, BPF_FUNC_copy_from_user, BPF_FUNC_snprintf_btf, BPF_FUNC_seq_printf_btf, BPF_FUNC_skb_cgroup_classid, BPF_FUNC_redirect_neigh, BPF_FUNC_per_cpu_ptr, BPF_FUNC_this_cpu_ptr, BPF_FUNC_redirect_peer, BPF_FUNC_task_storage_get, BPF_FUNC_task_storage_delete, BPF_FUNC_get_current_task_btf, BPF_FUNC_bprm_opts_set, BPF_FUNC_ktime_get_coarse_ns, BPF_FUNC_ima_inode_hash, BPF_FUNC_sock_from_file, BPF_FUNC_check_mtu, BPF_FUNC_for_each_map_elem, BPF_FUNC_snprintf, BPF_FUNC_sys_bpf, BPF_FUNC_btf_find_by_name_kind, BPF_FUNC_sys_close, BPF_FUNC_timer_init, BPF_FUNC_timer_set_callback, BPF_FUNC_timer_start, BPF_FUNC_timer_cancel, BPF_FUNC_get_func_ip, BPF_FUNC_get_attach_cookie, BPF_FUNC_task_pt_regs, BPF_FUNC_get_branch_snapshot, BPF_FUNC_trace_vprintk, BPF_FUNC_skc_to_unix_sock, BPF_FUNC_kallsyms_lookup_name,
 __BPF_FUNC_MAX_ID,
};





enum {
 BPF_F_RECOMPUTE_CSUM = (1ULL << 0),
 BPF_F_INVALIDATE_HASH = (1ULL << 1),
};




enum {
 BPF_F_HDR_FIELD_MASK = 0xfULL,
};


enum {
 BPF_F_PSEUDO_HDR = (1ULL << 4),
 BPF_F_MARK_MANGLED_0 = (1ULL << 5),
 BPF_F_MARK_ENFORCE = (1ULL << 6),
};


enum {
 BPF_F_INGRESS = (1ULL << 0),
};


enum {
 BPF_F_TUNINFO_IPV6 = (1ULL << 0),
};


enum {
 BPF_F_SKIP_FIELD_MASK = 0xffULL,
 BPF_F_USER_STACK = (1ULL << 8),

 BPF_F_FAST_STACK_CMP = (1ULL << 9),
 BPF_F_REUSE_STACKID = (1ULL << 10),

 BPF_F_USER_BUILD_ID = (1ULL << 11),
};


enum {
 BPF_F_ZERO_CSUM_TX = (1ULL << 1),
 BPF_F_DONT_FRAGMENT = (1ULL << 2),
 BPF_F_SEQ_NUMBER = (1ULL << 3),
};




enum {
 BPF_F_INDEX_MASK = 0xffffffffULL,
 BPF_F_CURRENT_CPU = BPF_F_INDEX_MASK,

 BPF_F_CTXLEN_MASK = (0xfffffULL << 32),
};


enum {
 BPF_F_CURRENT_NETNS = (-1L),
};


enum {
 BPF_CSUM_LEVEL_QUERY,
 BPF_CSUM_LEVEL_INC,
 BPF_CSUM_LEVEL_DEC,
 BPF_CSUM_LEVEL_RESET,
};


enum {
 BPF_F_ADJ_ROOM_FIXED_GSO = (1ULL << 0),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 = (1ULL << 1),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 = (1ULL << 2),
 BPF_F_ADJ_ROOM_ENCAP_L4_GRE = (1ULL << 3),
 BPF_F_ADJ_ROOM_ENCAP_L4_UDP = (1ULL << 4),
 BPF_F_ADJ_ROOM_NO_CSUM_RESET = (1ULL << 5),
 BPF_F_ADJ_ROOM_ENCAP_L2_ETH = (1ULL << 6),
};

enum {
 BPF_ADJ_ROOM_ENCAP_L2_MASK = 0xff,
 BPF_ADJ_ROOM_ENCAP_L2_SHIFT = 56,
};






enum {
 BPF_F_SYSCTL_BASE_NAME = (1ULL << 0),
};


enum {
 BPF_LOCAL_STORAGE_GET_F_CREATE = (1ULL << 0),



 BPF_SK_STORAGE_GET_F_CREATE = BPF_LOCAL_STORAGE_GET_F_CREATE,
};


enum {
 BPF_F_GET_BRANCH_RECORDS_SIZE = (1ULL << 0),
};




enum {
 BPF_RB_NO_WAKEUP = (1ULL << 0),
 BPF_RB_FORCE_WAKEUP = (1ULL << 1),
};


enum {
 BPF_RB_AVAIL_DATA = 0,
 BPF_RB_RING_SIZE = 1,
 BPF_RB_CONS_POS = 2,
 BPF_RB_PROD_POS = 3,
};


enum {
 BPF_RINGBUF_BUSY_BIT = (1U << 31),
 BPF_RINGBUF_DISCARD_BIT = (1U << 30),
 BPF_RINGBUF_HDR_SZ = 8,
};


enum {
 BPF_SK_LOOKUP_F_REPLACE = (1ULL << 0),
 BPF_SK_LOOKUP_F_NO_REUSEPORT = (1ULL << 1),
};


enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};


enum {
 BPF_F_BPRM_SECUREEXEC = (1ULL << 0),
};


enum {
 BPF_F_BROADCAST = (1ULL << 3),
 BPF_F_EXCLUDE_INGRESS = (1ULL << 4),
};
# 5315 "./include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 __u32 gso_size;
 __u32 :32;
 __u64 hwtstamp;
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 5389 "./include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 5403 "./include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
 __s32 rx_queue_mapping;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};
# 5497 "./include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;

 __u32 egress_ifindex;
};






struct bpf_devmap_val {
 __u32 ifindex;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};






struct bpf_cpumap_val {
 __u32 qsize;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;

 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
# 5604 "./include/uapi/linux/bpf.h"
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_sock * migrating_sk; __u64 :64; } __attribute__((aligned(8)));
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
 __u64 recursion_misses;
 __u32 verified_insns;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 btf_vmlinux_value_type_id;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
 __u32 :32;
 __u64 map_extra;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
 __u64 __attribute__((aligned(8))) name;
 __u32 name_len;
 __u32 kernel_btf;
} __attribute__((aligned(8)));

struct bpf_link_info {
 __u32 type;
 __u32 id;
 __u32 prog_id;
 union {
  struct {
   __u64 __attribute__((aligned(8))) tp_name;
   __u32 tp_name_len;
  } raw_tracepoint;
  struct {
   __u32 attach_type;
   __u32 target_obj_id;
   __u32 target_btf_id;
  } tracing;
  struct {
   __u64 cgroup_id;
   __u32 attach_type;
  } cgroup;
  struct {
   __u64 __attribute__((aligned(8))) target_name;
   __u32 target_name_len;
   union {
    struct {
     __u32 map_id;
    } map;
   };
  } iter;
  struct {
   __u32 netns_ino;
   __u32 attach_type;
  } netns;
  struct {
   __u32 ifindex;
  } xdp;
 };
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
# 5806 "./include/uapi/linux/bpf.h"
 union { void * skb_data; __u64 :64; } __attribute__((aligned(8)));
 union { void * skb_data_end; __u64 :64; } __attribute__((aligned(8)));
 __u32 skb_len;



 __u32 skb_tcp_flags;
# 5822 "./include/uapi/linux/bpf.h"
};


enum {
 BPF_SOCK_OPS_RTO_CB_FLAG = (1<<0),
 BPF_SOCK_OPS_RETRANS_CB_FLAG = (1<<1),
 BPF_SOCK_OPS_STATE_CB_FLAG = (1<<2),
 BPF_SOCK_OPS_RTT_CB_FLAG = (1<<3),
# 5848 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG = (1<<4),
# 5857 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = (1<<5),
# 5872 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG = (1<<6),

 BPF_SOCK_OPS_ALL_CB_FLAGS = 0x7F,
};




enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

 BPF_SOCK_OPS_PARSE_HDR_OPT_CB,
# 5944 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_HDR_OPT_LEN_CB,
# 5961 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB,
# 5987 "./include/uapi/linux/bpf.h"
};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};

enum {
 TCP_BPF_IW = 1001,
 TCP_BPF_SNDCWND_CLAMP = 1002,
 TCP_BPF_DELACK_MAX = 1003,
 TCP_BPF_RTO_MIN = 1004,
# 6048 "./include/uapi/linux/bpf.h"
 TCP_BPF_SYN = 1005,
 TCP_BPF_SYN_IP = 1006,
 TCP_BPF_SYN_MAC = 1007,
};

enum {
 BPF_LOAD_HDR_OPT_TCP_SYN = (1ULL << 0),
};




enum {
 BPF_WRITE_HDR_TCP_CURRENT_MSS = 1,






 BPF_WRITE_HDR_TCP_SYNACK_COOKIE = 2,


};

struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};

enum {
 BPF_DEVCG_ACC_MKNOD = (1ULL << 0),
 BPF_DEVCG_ACC_READ = (1ULL << 1),
 BPF_DEVCG_ACC_WRITE = (1ULL << 2),
};

enum {
 BPF_DEVCG_DEV_BLOCK = (1ULL << 0),
 BPF_DEVCG_DEV_CHAR = (1ULL << 1),
};

struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};




enum {
 BPF_FIB_LOOKUP_DIRECT = (1U << 0),
 BPF_FIB_LOOKUP_OUTPUT = (1U << 1),
};

enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;

 union {

  __u16 tot_len;


  __u16 mtu_result;
 };



 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

struct bpf_redir_neigh {

 __u32 nh_family;

 union {
  __be32 ipv4_nh;
  __u32 ipv6_nh[4];
 };
};


enum bpf_check_mtu_flags {
 BPF_MTU_CHK_SEGS = (1U << 0),
};

enum bpf_check_mtu_ret {
 BPF_MTU_CHK_RET_SUCCESS,
 BPF_MTU_CHK_RET_FRAG_NEEDED,
 BPF_MTU_CHK_RET_SEGS_TOOBIG,
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};

enum {
 BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG = (1U << 0),
 BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL = (1U << 1),
 BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP = (1U << 2),
};

struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};




struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_timer {
 __u64 :64;
 __u64 :64;
} __attribute__((aligned(8)));

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};

struct bpf_pidns_info {
 __u32 pid;
 __u32 tgid;
};


struct bpf_sk_lookup {
 union {
  union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
  __u64 cookie;
 };

 __u32 family;
 __u32 protocol;
 __u32 remote_ip4;
 __u32 remote_ip6[4];
 __u32 remote_port;
 __u32 local_ip4;
 __u32 local_ip6[4];
 __u32 local_port;
};
# 6309 "./include/uapi/linux/bpf.h"
struct btf_ptr {
 void *ptr;
 __u32 type_id;
 __u32 flags;
};
# 6324 "./include/uapi/linux/bpf.h"
enum {
 BTF_F_COMPACT = (1ULL << 0),
 BTF_F_NONAME = (1ULL << 1),
 BTF_F_PTR_RAW = (1ULL << 2),
 BTF_F_ZERO = (1ULL << 3),
};
# 8 "./include/linux/bpf.h" 2


# 1 "./include/linux/file.h" 1
# 14 "./include/linux/file.h"
struct file;

extern void fput(struct file *);
extern void fput_many(struct file *, unsigned int);

struct file_operations;
struct task_struct;
struct vfsmount;
struct dentry;
struct inode;
struct path;
extern struct file *alloc_file_pseudo(struct inode *, struct vfsmount *,
 const char *, int flags, const struct file_operations *);
extern struct file *alloc_file_clone(struct file *, int flags,
 const struct file_operations *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fput_light(struct file *file, int fput_needed)
{
 if (fput_needed)
  fput(file);
}

struct fd {
 struct file *file;
 unsigned int flags;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput(struct fd fd)
{
 if (fd.flags & 1)
  fput(fd.file);
}

extern struct file *fget(unsigned int fd);
extern struct file *fget_many(unsigned int fd, unsigned int refs);
extern struct file *fget_raw(unsigned int fd);
extern struct file *fget_task(struct task_struct *task, unsigned int fd);
extern unsigned long __fdget(unsigned int fd);
extern unsigned long __fdget_raw(unsigned int fd);
extern unsigned long __fdget_pos(unsigned int fd);
extern void __f_unlock_pos(struct file *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd __to_fd(unsigned long v)
{
 return (struct fd){(struct file *)(v & ~3),v & 3};
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget(unsigned int fd)
{
 return __to_fd(__fdget(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_raw(unsigned int fd)
{
 return __to_fd(__fdget_raw(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_pos(int fd)
{
 return __to_fd(__fdget_pos(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput_pos(struct fd f)
{
 if (f.flags & 2)
  __f_unlock_pos(f.file);
 fdput(f);
}

extern int f_dupfd(unsigned int from, struct file *file, unsigned flags);
extern int replace_fd(unsigned fd, struct file *file, unsigned flags);
extern void set_close_on_exec(unsigned int fd, int flag);
extern bool get_close_on_exec(unsigned int fd);
extern int __get_unused_fd_flags(unsigned flags, unsigned long nofile);
extern int get_unused_fd_flags(unsigned flags);
extern void put_unused_fd(unsigned int fd);

extern void fd_install(unsigned int fd, struct file *file);

extern int __receive_fd(struct file *file, int *ufd,
   unsigned int o_flags);

extern int receive_fd(struct file *file, unsigned int o_flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int receive_fd_user(struct file *file, int *ufd,
      unsigned int o_flags)
{
 if (ufd == ((void *)0))
  return -14;
 return __receive_fd(file, ufd, o_flags);
}
int receive_fd_replace(int new_fd, struct file *file, unsigned int o_flags);

extern void flush_delayed_fput(void);
extern void __fput_sync(struct file *);

extern unsigned int sysctl_nr_open_min, sysctl_nr_open_max;
# 11 "./include/linux/bpf.h" 2


# 1 "./include/linux/rbtree_latch.h" 1
# 40 "./include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_latch_t seq;
 struct rb_root tree[2];
};
# 64 "./include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); _Static_assert(__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) || __builtin_types_compatible_p(typeof(*(node)), typeof(void)), "pointer type mismatch in container_of()"); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_321(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ltr->tree[idx].rb_node) == sizeof(char) || sizeof(ltr->tree[idx].rb_node) == sizeof(short) || sizeof(ltr->tree[idx].rb_node) == sizeof(int) || sizeof(ltr->tree[idx].rb_node) == sizeof(long)) || sizeof(ltr->tree[idx].rb_node) == sizeof(long long))) __compiletime_assert_321(); } while (0); (*(const volatile typeof( _Generic((ltr->tree[idx].rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ltr->tree[idx].rb_node))) *)&(ltr->tree[idx].rb_node)); }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_322(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_left) == sizeof(char) || sizeof(node->rb_left) == sizeof(short) || sizeof(node->rb_left) == sizeof(int) || sizeof(node->rb_left) == sizeof(long)) || sizeof(node->rb_left) == sizeof(long long))) __compiletime_assert_322(); } while (0); (*(const volatile typeof( _Generic((node->rb_left), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_left))) *)&(node->rb_left)); }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_323(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_right) == sizeof(char) || sizeof(node->rb_right) == sizeof(short) || sizeof(node->rb_right) == sizeof(int) || sizeof(node->rb_right) == sizeof(long)) || sizeof(node->rb_right) == sizeof(long long))) __compiletime_assert_323(); } while (0); (*(const volatile typeof( _Generic((node->rb_right), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_right))) *)&(node->rb_right)); }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 143 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 170 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 199 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_latch_retry(&root->seq, seq));

 return node;
}
# 14 "./include/linux/bpf.h" 2





# 1 "./include/linux/module.h" 1
# 14 "./include/linux/module.h"
# 1 "./include/linux/buildid.h" 1








int build_id_parse(struct vm_area_struct *vma, unsigned char *build_id,
     __u32 *size);
int build_id_parse_buf(const void *buf, unsigned char *build_id, u32 buf_size);


extern unsigned char vmlinux_build_id[20];
void init_vmlinux_build_id(void);
# 15 "./include/linux/module.h" 2


# 1 "./include/linux/kmod.h" 1








# 1 "./include/linux/umh.h" 1
# 11 "./include/linux/umh.h"
struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 10 "./include/linux/kmod.h" 2
# 20 "./include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((__format__(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 18 "./include/linux/module.h" 2

# 1 "./include/linux/elf.h" 1





# 1 "./arch/mips/include/asm/elf.h" 1
# 15 "./arch/mips/include/asm/elf.h"
# 1 "./include/uapi/linux/elf.h" 1





# 1 "./include/uapi/linux/elf-em.h" 1
# 7 "./include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 139 "./include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 162 "./include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 304 "./include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 440 "./include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 16 "./arch/mips/include/asm/elf.h" 2

# 1 "./arch/mips/include/generated/asm/current.h" 1
# 18 "./arch/mips/include/asm/elf.h" 2
# 189 "./arch/mips/include/asm/elf.h"
struct mips_elf_abiflags_v0 {
 uint16_t version;
 uint8_t isa_level;
 uint8_t isa_rev;

 uint8_t gpr_size;
 uint8_t cpr1_size;
 uint8_t cpr2_size;
 uint8_t fp_abi;
 uint32_t isa_ext;
 uint32_t ases;
 uint32_t flags1;
 uint32_t flags2;
};





typedef unsigned long elf_greg_t;
typedef elf_greg_t elf_gregset_t[45];

typedef double elf_fpreg_t;
typedef elf_fpreg_t elf_fpregset_t[33];

void mips_dump_regs32(u32 *uregs, const struct pt_regs *regs);
void mips_dump_regs64(u64 *uregs, const struct pt_regs *regs);
# 321 "./arch/mips/include/asm/elf.h"
struct mips_abi;

extern struct mips_abi mips_abi;
extern struct mips_abi mips_abi_32;
extern struct mips_abi mips_abi_n32;
# 421 "./arch/mips/include/asm/elf.h"
extern unsigned int elf_hwcap;
# 1 "./arch/mips/include/uapi/asm/hwcap.h" 1
# 423 "./arch/mips/include/asm/elf.h" 2








extern const char *__elf_platform;


extern const char *__elf_base_platform;
# 466 "./arch/mips/include/asm/elf.h"
struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);



struct arch_elf_state {
 int nan_2008;
 int fp_abi;
 int interp_fp_abi;
 int overall_fp_mode;
};
# 488 "./arch/mips/include/asm/elf.h"
extern int arch_elf_pt_proc(void *ehdr, void *phdr, struct file *elf,
       bool is_interp, struct arch_elf_state *state);

extern int arch_check_elf(void *ehdr, bool has_interpreter, void *interp_ehdr,
     struct arch_elf_state *state);


extern bool mips_use_nan_legacy;
extern bool mips_use_nan_2008;

extern void mips_set_personality_nan(struct arch_elf_state *state);
extern void mips_set_personality_fp(struct arch_elf_state *state);
# 518 "./arch/mips/include/asm/elf.h"
extern int mips_elf_read_implies_exec(void *elf_ex, int exstack);
# 7 "./include/linux/elf.h" 2
# 52 "./include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 65 "./include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 81 "./include/linux/elf.h"
struct gnu_property {
 u32 pr_type;
 u32 pr_datasz;
};

struct arch_elf_state;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_parse_elf_property(u32 type, const void *data,
       size_t datasz, bool compat,
       struct arch_elf_state *arch)
{
 return 0;
}
# 104 "./include/linux/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_elf_adjust_prot(int prot,
           const struct arch_elf_state *state,
           bool has_interp, bool is_interp)
{
 return prot;
}
# 20 "./include/linux/module.h" 2


# 1 "./include/linux/moduleparam.h" 1
# 36 "./include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 304 "./include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 372 "./include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 382 "./include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 411 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);
int param_set_uint_minmax(const char *val, const struct kernel_param *kp,
  unsigned int min, unsigned int max);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_hexint;
extern int param_set_hexint(const char *val, const struct kernel_param *kp);
extern int param_get_hexint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 526 "./include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 587 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 23 "./include/linux/module.h" 2



# 1 "./include/linux/error-injection.h" 1





# 1 "./include/asm-generic/error-injection.h" 1





enum {
 EI_ETYPE_NONE,
 EI_ETYPE_NULL,
 EI_ETYPE_ERRNO,
 EI_ETYPE_ERRNO_NULL,
 EI_ETYPE_TRUE,
};

struct error_injection_entry {
 unsigned long addr;
 int etype;
};

struct pt_regs;
# 38 "./include/asm-generic/error-injection.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void override_function_with_return(struct pt_regs *regs) { }
# 7 "./include/linux/error-injection.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_error_injection_list(unsigned long addr)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_injectable_error_type(unsigned long addr)
{
 return EI_ETYPE_NONE;
}
# 27 "./include/linux/module.h" 2



# 1 "./include/linux/cfi.h" 1
# 31 "./include/linux/module.h" 2


# 1 "./arch/mips/include/asm/module.h" 1








struct mod_arch_specific {

 struct list_head dbe_list;
 const struct exception_table_entry *dbe_start;
 const struct exception_table_entry *dbe_end;
 struct mips_hi16 *r_mips_hi16_list;
};

typedef uint8_t Elf64_Byte;

typedef struct {
 Elf64_Addr r_offset;
 Elf64_Word r_sym;
 Elf64_Byte r_ssym;
 Elf64_Byte r_type3;
 Elf64_Byte r_type2;
 Elf64_Byte r_type;
} Elf64_Mips_Rel;

typedef struct {
 Elf64_Addr r_offset;
 Elf64_Word r_sym;
 Elf64_Byte r_ssym;
 Elf64_Byte r_type3;
 Elf64_Byte r_type2;
 Elf64_Byte r_type;
 Elf64_Sxword r_addend;
} Elf64_Mips_Rela;
# 76 "./arch/mips/include/asm/module.h"
const struct exception_table_entry*search_module_dbetables(unsigned long addr);
# 34 "./include/linux/module.h" 2



struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
};

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 295 "./include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 348 "./include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 364 "./include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];







 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
 bool using_gplonly_symbols;






 bool async_probe_requested;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << 6))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;
# 439 "./include/linux/module.h"
 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;

 void *noinstr_text_start;
 unsigned int noinstr_text_size;


 unsigned int num_tracepoints;
 tracepoint_ptr_t *tracepoints_ptrs;


 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;


 unsigned int num_bpf_raw_events;
 struct bpf_raw_event_map *bpf_raw_events;
# 482 "./include/linux/module.h"
 unsigned int num_trace_bprintk_fmt;
 const char **trace_bprintk_fmt_start;


 struct trace_event_call **trace_events;
 unsigned int num_trace_events;
 struct trace_eval_map **trace_evals;
 unsigned int num_trace_evals;


 unsigned int num_ftrace_callsites;
 unsigned long *ftrace_callsites;


 void *kprobes_text_start;
 unsigned int kprobes_text_size;
 unsigned long *kprobe_blacklist;
 unsigned int num_kprobe_blacklist;
# 521 "./include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 541 "./include/linux/module.h"
} __attribute__((__aligned__((1 << 6)))) ;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 642 "./include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, const unsigned char **modbuildid,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 823 "./include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 841 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void module_bug_finalize(const Elf64_Ehdr *hdr,
     const Elf64_Shdr *sechdrs,
     struct module *mod)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void module_bug_cleanup(struct module *mod) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}
# 864 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_sig_ok(struct module *module)
{
 return true;
}


int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);
# 20 "./include/linux/bpf.h" 2
# 1 "./include/linux/kallsyms.h" 1
# 16 "./include/linux/kallsyms.h"
# 1 "./arch/mips/include/generated/asm/sections.h" 1
# 17 "./include/linux/kallsyms.h" 2







struct cred;
struct module;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel_text(unsigned long addr)
{
 if (__is_kernel_text(addr))
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel(unsigned long addr)
{
 if (__is_kernel(addr))
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_ksym_addr(unsigned long addr)
{
 if (0)
  return is_kernel(addr);

 return is_kernel_text(addr) || is_kernel_inittext(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dereference_symbol_descriptor(void *ptr)
{
# 65 "./include/linux/kallsyms.h"
 return ptr;
}

int kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,
          unsigned long),
       void *data);



unsigned long kallsyms_lookup_name(const char *name);

extern int kallsyms_lookup_size_offset(unsigned long addr,
      unsigned long *symbolsize,
      unsigned long *offset);


const char *kallsyms_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, char *namebuf);


extern int sprint_symbol(char *buffer, unsigned long address);
extern int sprint_symbol_build_id(char *buffer, unsigned long address);
extern int sprint_symbol_no_offset(char *buffer, unsigned long address);
extern int sprint_backtrace(char *buffer, unsigned long address);
extern int sprint_backtrace_build_id(char *buffer, unsigned long address);

int lookup_symbol_name(unsigned long addr, char *symname);
int lookup_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


extern bool kallsyms_show_value(const struct cred *cred);
# 168 "./include/linux/kallsyms.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_ip_sym(const char *loglvl, unsigned long ip)
{
 ({ do {} while (0); _printk("%s[<%px>] %pS\n", loglvl, (void *) ip, (void *) ip); });
}
# 21 "./include/linux/bpf.h" 2

# 1 "./include/linux/sched/mm.h" 1
# 10 "./include/linux/sched/mm.h"
# 1 "./include/linux/sync_core.h" 1
# 15 "./include/linux/sync_core.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sync_core_before_usermode(void)
{
}
# 11 "./include/linux/sched/mm.h" 2




extern struct mm_struct *mm_alloc(void);
# 34 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmgrab(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_count);
}

extern void __mmdrop(struct mm_struct *mm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmdrop(struct mm_struct *mm)
{





 if (__builtin_expect(!!(atomic_dec_and_test(&mm->mm_count)), 0))
  __mmdrop(mm);
}
# 75 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmdrop_sched(struct mm_struct *mm)
{
 mmdrop(mm);
}
# 97 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmget(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_users);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmget_not_zero(struct mm_struct *mm)
{
 return atomic_inc_not_zero(&mm->mm_users);
}


extern void mmput(struct mm_struct *);




void mmput_async(struct mm_struct *);



extern struct mm_struct *get_task_mm(struct task_struct *task);





extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);

extern void exit_mm_release(struct task_struct *, struct mm_struct *);

extern void exec_mm_release(struct task_struct *, struct mm_struct *);


extern void mm_update_next_owner(struct mm_struct *mm);







extern void arch_pick_mmap_layout(struct mm_struct *mm,
      struct rlimit *rlim_stack);
extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_vfork(struct task_struct *tsk)
{
 bool ret;
# 171 "./include/linux/sched/mm.h"
 rcu_read_lock();
 ret = tsk->vfork_done &&
   ({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_324(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_324(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); })->mm == tsk->mm;
 rcu_read_unlock();

 return ret;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t current_gfp_context(gfp_t flags)
{
 unsigned int pflags = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_325(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((current_thread_info()->task)->flags) == sizeof(char) || sizeof((current_thread_info()->task)->flags) == sizeof(short) || sizeof((current_thread_info()->task)->flags) == sizeof(int) || sizeof((current_thread_info()->task)->flags) == sizeof(long)) || sizeof((current_thread_info()->task)->flags) == sizeof(long long))) __compiletime_assert_325(); } while (0); (*(const volatile typeof( _Generic(((current_thread_info()->task)->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((current_thread_info()->task)->flags))) *)&((current_thread_info()->task)->flags)); });

 if (__builtin_expect(!!(pflags & (0x00080000 | 0x00040000 | 0x10000000)), 0)) {




  if (pflags & 0x00080000)
   flags &= ~((( gfp_t)0x40u) | (( gfp_t)0x80u));
  else if (pflags & 0x00040000)
   flags &= ~(( gfp_t)0x80u);

  if (pflags & 0x10000000)
   flags &= ~(( gfp_t)0x08u);
 }
 return flags;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fs_reclaim_acquire(unsigned long ip) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fs_reclaim_release(unsigned long ip) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_reclaim_acquire(gfp_t gfp_mask) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_reclaim_release(gfp_t gfp_mask) { }
# 225 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_alloc(gfp_t gfp_mask)
{
 fs_reclaim_acquire(gfp_mask);
 fs_reclaim_release(gfp_mask);

 do { if (gfpflags_allow_blocking(gfp_mask)) do { do { } while (0); } while (0); } while (0);
}
# 244 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_noio_save(void)
{
 unsigned int flags = (current_thread_info()->task)->flags & 0x00080000;
 (current_thread_info()->task)->flags |= 0x00080000;
 return flags;
}
# 259 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_noio_restore(unsigned int flags)
{
 (current_thread_info()->task)->flags = ((current_thread_info()->task)->flags & ~0x00080000) | flags;
}
# 275 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_nofs_save(void)
{
 unsigned int flags = (current_thread_info()->task)->flags & 0x00040000;
 (current_thread_info()->task)->flags |= 0x00040000;
 return flags;
}
# 290 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_nofs_restore(unsigned int flags)
{
 (current_thread_info()->task)->flags = ((current_thread_info()->task)->flags & ~0x00040000) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_noreclaim_save(void)
{
 unsigned int flags = (current_thread_info()->task)->flags & 0x00000800;
 (current_thread_info()->task)->flags |= 0x00000800;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_noreclaim_restore(unsigned int flags)
{
 (current_thread_info()->task)->flags = ((current_thread_info()->task)->flags & ~0x00000800) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_pin_save(void)
{
 unsigned int flags = (current_thread_info()->task)->flags & 0x10000000;

 (current_thread_info()->task)->flags |= 0x10000000;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_pin_restore(unsigned int flags)
{
 (current_thread_info()->task)->flags = ((current_thread_info()->task)->flags & ~0x10000000) | flags;
}


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct mem_cgroup *) int_active_memcg;
# 333 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *
set_active_memcg(struct mem_cgroup *memcg)
{
 struct mem_cgroup *old;

 if (!(!(((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4)))) | ((preempt_count() & (((1UL << (4))-1) << ((0 + 8) + 8)))) | ((preempt_count() & (((1UL << (8))-1) << (0 + 8))) & (1UL << (0 + 8)))))) {
  old = ({ typeof(int_active_memcg) pscr_ret__; do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(int_active_memcg)) { case 1: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_326(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_326(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 2: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_327(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_327(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 4: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_328(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_328(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 8: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_329(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })) == sizeof(long long))) __compiletime_assert_329(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
  do { do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(int_active_memcg)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {
  old = (current_thread_info()->task)->active_memcg;
  (current_thread_info()->task)->active_memcg = memcg;
 }

 return old;
}
# 357 "./include/linux/sched/mm.h"
enum {
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY = (1U << 0),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED = (1U << 1),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY = (1U << 2),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED = (1U << 3),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY = (1U << 4),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE = (1U << 5),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY = (1U << 6),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ = (1U << 7),
};

enum {
 MEMBARRIER_FLAG_SYNC_CORE = (1U << 0),
 MEMBARRIER_FLAG_RSEQ = (1U << 1),
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void membarrier_mm_sync_core_before_usermode(struct mm_struct *mm)
{
 if ((current_thread_info()->task)->mm != mm)
  return;
 if (__builtin_expect(!!(!(atomic_read(&mm->membarrier_state) & MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE)), 1))

  return;
 sync_core_before_usermode();
}

extern void membarrier_exec_mmap(struct mm_struct *mm);

extern void membarrier_update_current_mm(struct mm_struct *next_mm);
# 23 "./include/linux/bpf.h" 2


# 1 "./include/linux/bpfptr.h" 1






# 1 "./include/linux/sockptr.h" 1
# 14 "./include/linux/sockptr.h"
typedef struct {
 union {
  void *kernel;
  void *user;
 };
 bool is_kernel : 1;
} sockptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sockptr_is_kernel(sockptr_t sockptr)
{
 return sockptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sockptr_t KERNEL_SOCKPTR(void *p)
{
 return (sockptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sockptr_t USER_SOCKPTR(void *p)
{
 return (sockptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sockptr_is_null(sockptr_t sockptr)
{
 if (sockptr_is_kernel(sockptr))
  return !sockptr.kernel;
 return !sockptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_sockptr_offset(void *dst, sockptr_t src,
  size_t offset, size_t size)
{
 if (!sockptr_is_kernel(src))
  return copy_from_user(dst, src.user + offset, size);
 memcpy(dst, src.kernel + offset, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_sockptr(void *dst, sockptr_t src, size_t size)
{
 return copy_from_sockptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_to_sockptr_offset(sockptr_t dst, size_t offset,
  const void *src, size_t size)
{
 if (!sockptr_is_kernel(dst))
  return copy_to_user(dst.user + offset, src, size);
 memcpy(dst.kernel + offset, src, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memdup_sockptr(sockptr_t src, size_t len)
{
 void *p = __kmalloc_track_caller(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memdup_sockptr_nul(sockptr_t src, size_t len)
{
 char *p = __kmalloc_track_caller(len + 1, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 p[len] = '\0';
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strncpy_from_sockptr(char *dst, sockptr_t src, size_t count)
{
 if (sockptr_is_kernel(src)) {
  size_t len = __builtin_choose_expr(((!!(sizeof((typeof(strnlen(src.kernel, count - 1) + 1) *)1 == (typeof(count) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(strnlen(src.kernel, count - 1) + 1) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(count) * 0l)) : (int *)8))))), ((strnlen(src.kernel, count - 1) + 1) < (count) ? (strnlen(src.kernel, count - 1) + 1) : (count)), ({ typeof(strnlen(src.kernel, count - 1) + 1) __UNIQUE_ID___x330 = (strnlen(src.kernel, count - 1) + 1); typeof(count) __UNIQUE_ID___y331 = (count); ((__UNIQUE_ID___x330) < (__UNIQUE_ID___y331) ? (__UNIQUE_ID___x330) : (__UNIQUE_ID___y331)); }));

  memcpy(dst, src.kernel, len);
  return len;
 }
 return strncpy_from_user(dst, src.user, count);
}
# 8 "./include/linux/bpfptr.h" 2

typedef sockptr_t bpfptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpfptr_is_kernel(bpfptr_t bpfptr)
{
 return bpfptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t KERNEL_BPFPTR(void *p)
{
 return (bpfptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t USER_BPFPTR(void *p)
{
 return (bpfptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t make_bpfptr(u64 addr, bool is_kernel)
{
 if (is_kernel)
  return KERNEL_BPFPTR((void*) (uintptr_t) addr);
 else
  return USER_BPFPTR(( { ({ u64 __dummy; typeof((addr)) __dummy2; (void)(&__dummy == &__dummy2); 1; }); (void *)(uintptr_t)(addr); } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpfptr_is_null(bpfptr_t bpfptr)
{
 if (bpfptr_is_kernel(bpfptr))
  return !bpfptr.kernel;
 return !bpfptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpfptr_add(bpfptr_t *bpfptr, size_t val)
{
 if (bpfptr_is_kernel(*bpfptr))
  bpfptr->kernel += val;
 else
  bpfptr->user += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_bpfptr_offset(void *dst, bpfptr_t src,
       size_t offset, size_t size)
{
 return copy_from_sockptr_offset(dst, (sockptr_t) src, offset, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_bpfptr(void *dst, bpfptr_t src, size_t size)
{
 return copy_from_bpfptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_to_bpfptr_offset(bpfptr_t dst, size_t offset,
     const void *src, size_t size)
{
 return copy_to_sockptr_offset((sockptr_t) dst, offset, src, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmemdup_bpfptr(bpfptr_t src, size_t len)
{
 void *p = kvmalloc(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_bpfptr(p, src, len)) {
  kvfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strncpy_from_bpfptr(char *dst, bpfptr_t src, size_t count)
{
 return strncpy_from_sockptr(dst, (sockptr_t) src, count);
}
# 26 "./include/linux/bpf.h" 2

struct bpf_verifier_env;
struct bpf_verifier_log;
struct perf_event;
struct bpf_prog;
struct bpf_prog_aux;
struct bpf_map;
struct sock;
struct seq_file;
struct btf;
struct btf_type;
struct exception_table_entry;
struct seq_operations;
struct bpf_iter_aux_info;
struct bpf_local_storage;
struct bpf_local_storage_map;
struct kobject;
struct mem_cgroup;
struct module;
struct bpf_func_state;

extern struct idr btf_idr;
extern spinlock_t btf_idr_lock;
extern struct kobject *btf_kobj;

typedef u64 (*bpf_callback_t)(u64, u64, u64, u64, u64);
typedef int (*bpf_iter_init_seq_priv_t)(void *private_data,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_fini_seq_priv_t)(void *private_data);
struct bpf_iter_seq_info {
 const struct seq_operations *seq_ops;
 bpf_iter_init_seq_priv_t init_seq_private;
 bpf_iter_fini_seq_priv_t fini_seq_private;
 u32 seq_priv_size;
};


struct bpf_map_ops {

 int (*map_alloc_check)(union bpf_attr *attr);
 struct bpf_map *(*map_alloc)(union bpf_attr *attr);
 void (*map_release)(struct bpf_map *map, struct file *map_file);
 void (*map_free)(struct bpf_map *map);
 int (*map_get_next_key)(struct bpf_map *map, void *key, void *next_key);
 void (*map_release_uref)(struct bpf_map *map);
 void *(*map_lookup_elem_sys_only)(struct bpf_map *map, void *key);
 int (*map_lookup_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_lookup_and_delete_elem)(struct bpf_map *map, void *key,
       void *value, u64 flags);
 int (*map_lookup_and_delete_batch)(struct bpf_map *map,
        const union bpf_attr *attr,
        union bpf_attr *uattr);
 int (*map_update_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_delete_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);


 void *(*map_lookup_elem)(struct bpf_map *map, void *key);
 int (*map_update_elem)(struct bpf_map *map, void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_map *map, void *key);
 int (*map_push_elem)(struct bpf_map *map, void *value, u64 flags);
 int (*map_pop_elem)(struct bpf_map *map, void *value);
 int (*map_peek_elem)(struct bpf_map *map, void *value);


 void *(*map_fd_get_ptr)(struct bpf_map *map, struct file *map_file,
    int fd);
 void (*map_fd_put_ptr)(void *ptr);
 int (*map_gen_lookup)(struct bpf_map *map, struct bpf_insn *insn_buf);
 u32 (*map_fd_sys_lookup_elem)(void *ptr);
 void (*map_seq_show_elem)(struct bpf_map *map, void *key,
      struct seq_file *m);
 int (*map_check_btf)(const struct bpf_map *map,
        const struct btf *btf,
        const struct btf_type *key_type,
        const struct btf_type *value_type);


 int (*map_poke_track)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_untrack)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_run)(struct bpf_map *map, u32 key, struct bpf_prog *old,
        struct bpf_prog *new);


 int (*map_direct_value_addr)(const struct bpf_map *map,
         u64 *imm, u32 off);
 int (*map_direct_value_meta)(const struct bpf_map *map,
         u64 imm, u32 *off);
 int (*map_mmap)(struct bpf_map *map, struct vm_area_struct *vma);
 __poll_t (*map_poll)(struct bpf_map *map, struct file *filp,
        struct poll_table_struct *pts);


 int (*map_local_storage_charge)(struct bpf_local_storage_map *smap,
     void *owner, u32 size);
 void (*map_local_storage_uncharge)(struct bpf_local_storage_map *smap,
        void *owner, u32 size);
 struct bpf_local_storage ** (*map_owner_storage_ptr)(void *owner);


 int (*map_redirect)(struct bpf_map *map, u32 ifindex, u64 flags);
# 139 "./include/linux/bpf.h"
 bool (*map_meta_equal)(const struct bpf_map *meta0,
          const struct bpf_map *meta1);


 int (*map_set_for_each_callback_args)(struct bpf_verifier_env *env,
           struct bpf_func_state *caller,
           struct bpf_func_state *callee);
 int (*map_for_each_callback)(struct bpf_map *map,
         bpf_callback_t callback_fn,
         void *callback_ctx, u64 flags);


 const char * const map_btf_name;
 int *map_btf_id;


 const struct bpf_iter_seq_info *iter_seq_info;
};

struct bpf_map {



 const struct bpf_map_ops *ops __attribute__((__aligned__((1 << 6))));
 struct bpf_map *inner_map_meta;

 void *security;

 enum bpf_map_type map_type;
 u32 key_size;
 u32 value_size;
 u32 max_entries;
 u64 map_extra;
 u32 map_flags;
 int spin_lock_off;
 int timer_off;
 u32 id;
 int numa_node;
 u32 btf_key_type_id;
 u32 btf_value_type_id;
 u32 btf_vmlinux_value_type_id;
 struct btf *btf;

 struct mem_cgroup *memcg;

 char name[16U];
 bool bypass_spec_v1;
 bool frozen;





 atomic64_t refcnt __attribute__((__aligned__((1 << 6))));
 atomic64_t usercnt;
 struct work_struct work;
 struct mutex freeze_mutex;
 atomic64_t writecnt;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_spin_lock(const struct bpf_map *map)
{
 return map->spin_lock_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_timer(const struct bpf_map *map)
{
 return map->timer_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_and_init_map_value(struct bpf_map *map, void *dst)
{
 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0))
  *(struct bpf_spin_lock *)(dst + map->spin_lock_off) =
   (struct bpf_spin_lock){};
 if (__builtin_expect(!!(map_value_has_timer(map)), 0))
  *(struct bpf_timer *)(dst + map->timer_off) =
   (struct bpf_timer){};
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_map_value(struct bpf_map *map, void *dst, void *src)
{
 u32 s_off = 0, s_sz = 0, t_off = 0, t_sz = 0;

 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0)) {
  s_off = map->spin_lock_off;
  s_sz = sizeof(struct bpf_spin_lock);
 } else if (__builtin_expect(!!(map_value_has_timer(map)), 0)) {
  t_off = map->timer_off;
  t_sz = sizeof(struct bpf_timer);
 }

 if (__builtin_expect(!!(s_sz || t_sz), 0)) {
  if (s_off < t_off || !s_sz) {
   do { typeof(s_off) __tmp = (s_off); (s_off) = (t_off); (t_off) = __tmp; } while (0);
   do { typeof(s_sz) __tmp = (s_sz); (s_sz) = (t_sz); (t_sz) = __tmp; } while (0);
  }
  memcpy(dst, src, t_off);
  memcpy(dst + t_off + t_sz,
         src + t_off + t_sz,
         s_off - t_off - t_sz);
  memcpy(dst + s_off + s_sz,
         src + s_off + s_sz,
         map->value_size - s_off - s_sz);
 } else {
  memcpy(dst, src, map->value_size);
 }
}
void copy_map_value_locked(struct bpf_map *map, void *dst, void *src,
      bool lock_src);
void bpf_timer_cancel_and_free(void *timer);
int bpf_obj_name_cpy(char *dst, const char *src, unsigned int size);

struct bpf_offload_dev;
struct bpf_offloaded_map;

struct bpf_map_dev_ops {
 int (*map_get_next_key)(struct bpf_offloaded_map *map,
    void *key, void *next_key);
 int (*map_lookup_elem)(struct bpf_offloaded_map *map,
          void *key, void *value);
 int (*map_update_elem)(struct bpf_offloaded_map *map,
          void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_offloaded_map *map, void *key);
};

struct bpf_offloaded_map {
 struct bpf_map map;
 struct net_device *netdev;
 const struct bpf_map_dev_ops *dev_ops;
 void *dev_priv;
 struct list_head offloads;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_offloaded_map *map_to_offmap(struct bpf_map *map)
{
 return ({ void *__mptr = (void *)(map); _Static_assert(__builtin_types_compatible_p(typeof(*(map)), typeof(((struct bpf_offloaded_map *)0)->map)) || __builtin_types_compatible_p(typeof(*(map)), typeof(void)), "pointer type mismatch in container_of()"); ((struct bpf_offloaded_map *)(__mptr - __builtin_offsetof(struct bpf_offloaded_map, map))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_offload_neutral(const struct bpf_map *map)
{
 return map->map_type == BPF_MAP_TYPE_PERF_EVENT_ARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_support_seq_show(const struct bpf_map *map)
{
 return (map->btf_value_type_id || map->btf_vmlinux_value_type_id) &&
  map->ops->map_seq_show_elem;
}

int map_check_no_btf(const struct bpf_map *map,
       const struct btf *btf,
       const struct btf_type *key_type,
       const struct btf_type *value_type);

bool bpf_map_meta_equal(const struct bpf_map *meta0,
   const struct bpf_map *meta1);

extern const struct bpf_map_ops bpf_map_offload_ops;


enum bpf_arg_type {
 ARG_DONTCARE = 0,




 ARG_CONST_MAP_PTR,
 ARG_PTR_TO_MAP_KEY,
 ARG_PTR_TO_MAP_VALUE,
 ARG_PTR_TO_UNINIT_MAP_VALUE,
 ARG_PTR_TO_MAP_VALUE_OR_NULL,




 ARG_PTR_TO_MEM,
 ARG_PTR_TO_MEM_OR_NULL,
 ARG_PTR_TO_UNINIT_MEM,




 ARG_CONST_SIZE,
 ARG_CONST_SIZE_OR_ZERO,

 ARG_PTR_TO_CTX,
 ARG_PTR_TO_CTX_OR_NULL,
 ARG_ANYTHING,
 ARG_PTR_TO_SPIN_LOCK,
 ARG_PTR_TO_SOCK_COMMON,
 ARG_PTR_TO_INT,
 ARG_PTR_TO_LONG,
 ARG_PTR_TO_SOCKET,
 ARG_PTR_TO_SOCKET_OR_NULL,
 ARG_PTR_TO_BTF_ID,
 ARG_PTR_TO_ALLOC_MEM,
 ARG_PTR_TO_ALLOC_MEM_OR_NULL,
 ARG_CONST_ALLOC_SIZE_OR_ZERO,
 ARG_PTR_TO_BTF_ID_SOCK_COMMON,
 ARG_PTR_TO_PERCPU_BTF_ID,
 ARG_PTR_TO_FUNC,
 ARG_PTR_TO_STACK_OR_NULL,
 ARG_PTR_TO_CONST_STR,
 ARG_PTR_TO_TIMER,
 __BPF_ARG_TYPE_MAX,
};


enum bpf_return_type {
 RET_INTEGER,
 RET_VOID,
 RET_PTR_TO_MAP_VALUE,
 RET_PTR_TO_MAP_VALUE_OR_NULL,
 RET_PTR_TO_SOCKET_OR_NULL,
 RET_PTR_TO_TCP_SOCK_OR_NULL,
 RET_PTR_TO_SOCK_COMMON_OR_NULL,
 RET_PTR_TO_ALLOC_MEM_OR_NULL,
 RET_PTR_TO_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID,
 RET_PTR_TO_BTF_ID,
};





struct bpf_func_proto {
 u64 (*func)(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
 bool gpl_only;
 bool pkt_access;
 enum bpf_return_type ret_type;
 union {
  struct {
   enum bpf_arg_type arg1_type;
   enum bpf_arg_type arg2_type;
   enum bpf_arg_type arg3_type;
   enum bpf_arg_type arg4_type;
   enum bpf_arg_type arg5_type;
  };
  enum bpf_arg_type arg_type[5];
 };
 union {
  struct {
   u32 *arg1_btf_id;
   u32 *arg2_btf_id;
   u32 *arg3_btf_id;
   u32 *arg4_btf_id;
   u32 *arg5_btf_id;
  };
  u32 *arg_btf_id[5];
 };
 int *ret_btf_id;
 bool (*allowed)(const struct bpf_prog *prog);
};





struct bpf_context;

enum bpf_access_type {
 BPF_READ = 1,
 BPF_WRITE = 2
};
# 418 "./include/linux/bpf.h"
enum bpf_reg_type {
 NOT_INIT = 0,
 SCALAR_VALUE,
 PTR_TO_CTX,
 CONST_PTR_TO_MAP,
 PTR_TO_MAP_VALUE,
 PTR_TO_MAP_VALUE_OR_NULL,
 PTR_TO_STACK,
 PTR_TO_PACKET_META,
 PTR_TO_PACKET,
 PTR_TO_PACKET_END,
 PTR_TO_FLOW_KEYS,
 PTR_TO_SOCKET,
 PTR_TO_SOCKET_OR_NULL,
 PTR_TO_SOCK_COMMON,
 PTR_TO_SOCK_COMMON_OR_NULL,
 PTR_TO_TCP_SOCK,
 PTR_TO_TCP_SOCK_OR_NULL,
 PTR_TO_TP_BUFFER,
 PTR_TO_XDP_SOCK,
# 448 "./include/linux/bpf.h"
 PTR_TO_BTF_ID,




 PTR_TO_BTF_ID_OR_NULL,
 PTR_TO_MEM,
 PTR_TO_MEM_OR_NULL,
 PTR_TO_RDONLY_BUF,
 PTR_TO_RDONLY_BUF_OR_NULL,
 PTR_TO_RDWR_BUF,
 PTR_TO_RDWR_BUF_OR_NULL,
 PTR_TO_PERCPU_BTF_ID,
 PTR_TO_FUNC,
 PTR_TO_MAP_KEY,
 __BPF_REG_TYPE_MAX,
};




struct bpf_insn_access_aux {
 enum bpf_reg_type reg_type;
 union {
  int ctx_field_size;
  struct {
   struct btf *btf;
   u32 btf_id;
  };
 };
 struct bpf_verifier_log *log;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
bpf_ctx_record_field_size(struct bpf_insn_access_aux *aux, u32 size)
{
 aux->ctx_field_size = size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_pseudo_func(const struct bpf_insn *insn)
{
 return insn->code == (0x00 | 0x00 | 0x18) &&
        insn->src_reg == 4;
}

struct bpf_prog_ops {
 int (*test_run)(struct bpf_prog *prog, const union bpf_attr *kattr,
   union bpf_attr *uattr);
};

struct bpf_verifier_ops {

 const struct bpf_func_proto *
 (*get_func_proto)(enum bpf_func_id func_id,
     const struct bpf_prog *prog);




 bool (*is_valid_access)(int off, int size, enum bpf_access_type type,
    const struct bpf_prog *prog,
    struct bpf_insn_access_aux *info);
 int (*gen_prologue)(struct bpf_insn *insn, bool direct_write,
       const struct bpf_prog *prog);
 int (*gen_ld_abs)(const struct bpf_insn *orig,
     struct bpf_insn *insn_buf);
 u32 (*convert_ctx_access)(enum bpf_access_type type,
      const struct bpf_insn *src,
      struct bpf_insn *dst,
      struct bpf_prog *prog, u32 *target_size);
 int (*btf_struct_access)(struct bpf_verifier_log *log,
     const struct btf *btf,
     const struct btf_type *t, int off, int size,
     enum bpf_access_type atype,
     u32 *next_btf_id);
 bool (*check_kfunc_call)(u32 kfunc_btf_id, struct module *owner);
};

struct bpf_prog_offload_ops {

 int (*insn_hook)(struct bpf_verifier_env *env,
    int insn_idx, int prev_insn_idx);
 int (*finalize)(struct bpf_verifier_env *env);

 int (*replace_insn)(struct bpf_verifier_env *env, u32 off,
       struct bpf_insn *insn);
 int (*remove_insns)(struct bpf_verifier_env *env, u32 off, u32 cnt);

 int (*prepare)(struct bpf_prog *prog);
 int (*translate)(struct bpf_prog *prog);
 void (*destroy)(struct bpf_prog *prog);
};

struct bpf_prog_offload {
 struct bpf_prog *prog;
 struct net_device *netdev;
 struct bpf_offload_dev *offdev;
 void *dev_priv;
 struct list_head offloads;
 bool dev_state;
 bool opt_failed;
 void *jited_image;
 u32 jited_len;
};

enum bpf_cgroup_storage_type {
 BPF_CGROUP_STORAGE_SHARED,
 BPF_CGROUP_STORAGE_PERCPU,
 __BPF_CGROUP_STORAGE_MAX
};
# 571 "./include/linux/bpf.h"
struct btf_func_model {
 u8 ret_size;
 u8 nr_args;
 u8 arg_size[12];
};
# 602 "./include/linux/bpf.h"
struct bpf_tramp_progs {
 struct bpf_prog *progs[38];
 int nr_progs;
};
# 627 "./include/linux/bpf.h"
struct bpf_tramp_image;
int arch_prepare_bpf_trampoline(struct bpf_tramp_image *tr, void *image, void *image_end,
    const struct btf_func_model *m, u32 flags,
    struct bpf_tramp_progs *tprogs,
    void *orig_call);

u64 __attribute__((__no_instrument_function__)) __bpf_prog_enter(struct bpf_prog *prog);
void __attribute__((__no_instrument_function__)) __bpf_prog_exit(struct bpf_prog *prog, u64 start);
u64 __attribute__((__no_instrument_function__)) __bpf_prog_enter_sleepable(struct bpf_prog *prog);
void __attribute__((__no_instrument_function__)) __bpf_prog_exit_sleepable(struct bpf_prog *prog, u64 start);
void __attribute__((__no_instrument_function__)) __bpf_tramp_enter(struct bpf_tramp_image *tr);
void __attribute__((__no_instrument_function__)) __bpf_tramp_exit(struct bpf_tramp_image *tr);

struct bpf_ksym {
 unsigned long start;
 unsigned long end;
 char name[128];
 struct list_head lnode;
 struct latch_tree_node tnode;
 bool prog;
};

enum bpf_tramp_prog_type {
 BPF_TRAMP_FENTRY,
 BPF_TRAMP_FEXIT,
 BPF_TRAMP_MODIFY_RETURN,
 BPF_TRAMP_MAX,
 BPF_TRAMP_REPLACE,
};

struct bpf_tramp_image {
 void *image;
 struct bpf_ksym ksym;
 struct percpu_ref pcref;
 void *ip_after_call;
 void *ip_epilogue;
 union {
  struct callback_head rcu;
  struct work_struct work;
 };
};

struct bpf_trampoline {

 struct hlist_node hlist;

 struct mutex mutex;
 refcount_t refcnt;
 u64 key;
 struct {
  struct btf_func_model model;
  void *addr;
  bool ftrace_managed;
 } func;




 struct bpf_prog *extension_prog;

 struct hlist_head progs_hlist[BPF_TRAMP_MAX];

 int progs_cnt[BPF_TRAMP_MAX];

 struct bpf_tramp_image *cur_image;
 u64 selector;
 struct module *mod;
};

struct bpf_attach_target_info {
 struct btf_func_model fmodel;
 long tgt_addr;
 const char *tgt_name;
 const struct btf_type *tgt_type;
};



struct bpf_dispatcher_prog {
 struct bpf_prog *prog;
 refcount_t users;
};

struct bpf_dispatcher {

 struct mutex mutex;
 void *func;
 struct bpf_dispatcher_prog progs[48];
 int num_progs;
 void *image;
 u32 image_off;
 struct bpf_ksym ksym;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__no_sanitize__("cfi"))) unsigned int bpf_dispatcher_nop_func(
 const void *ctx,
 const struct bpf_insn *insnsi,
 unsigned int (*bpf_func)(const void *,
     const struct bpf_insn *))
{
 return bpf_func(ctx, insnsi);
}

int bpf_trampoline_link_prog(struct bpf_prog *prog, struct bpf_trampoline *tr);
int bpf_trampoline_unlink_prog(struct bpf_prog *prog, struct bpf_trampoline *tr);
struct bpf_trampoline *bpf_trampoline_get(u64 key,
       struct bpf_attach_target_info *tgt_info);
void bpf_trampoline_put(struct bpf_trampoline *tr);
# 769 "./include/linux/bpf.h"
void bpf_dispatcher_change_prog(struct bpf_dispatcher *d, struct bpf_prog *from,
    struct bpf_prog *to);

void *bpf_jit_alloc_exec_page(void);
void bpf_image_ksym_add(void *data, struct bpf_ksym *ksym);
void bpf_image_ksym_del(struct bpf_ksym *ksym);
void bpf_ksym_add(struct bpf_ksym *ksym);
void bpf_ksym_del(struct bpf_ksym *ksym);
int bpf_jit_charge_modmem(u32 pages);
void bpf_jit_uncharge_modmem(u32 pages);
# 809 "./include/linux/bpf.h"
struct bpf_func_info_aux {
 u16 linkage;
 bool unreliable;
};

enum bpf_jit_poke_reason {
 BPF_POKE_REASON_TAIL_CALL,
};


struct bpf_jit_poke_descriptor {
 void *tailcall_target;
 void *tailcall_bypass;
 void *bypass_addr;
 void *aux;
 union {
  struct {
   struct bpf_map *map;
   u32 key;
  } tail_call;
 };
 bool tailcall_target_stable;
 u8 adj_off;
 u16 reason;
 u32 insn_idx;
};


struct bpf_ctx_arg_aux {
 u32 offset;
 enum bpf_reg_type reg_type;
 u32 btf_id;
};

struct btf_mod_pair {
 struct btf *btf;
 struct module *module;
};

struct bpf_kfunc_desc_tab;

struct bpf_prog_aux {
 atomic64_t refcnt;
 u32 used_map_cnt;
 u32 used_btf_cnt;
 u32 max_ctx_offset;
 u32 max_pkt_offset;
 u32 max_tp_access;
 u32 stack_depth;
 u32 id;
 u32 func_cnt;
 u32 func_idx;
 u32 attach_btf_id;
 u32 ctx_arg_info_size;
 u32 max_rdonly_access;
 u32 max_rdwr_access;
 struct btf *attach_btf;
 const struct bpf_ctx_arg_aux *ctx_arg_info;
 struct mutex dst_mutex;
 struct bpf_prog *dst_prog;
 struct bpf_trampoline *dst_trampoline;
 enum bpf_prog_type saved_dst_prog_type;
 enum bpf_attach_type saved_dst_attach_type;
 bool verifier_zext;
 bool offload_requested;
 bool attach_btf_trace;
 bool func_proto_unreliable;
 bool sleepable;
 bool tail_call_reachable;
 struct hlist_node tramp_hlist;

 const struct btf_type *attach_func_proto;

 const char *attach_func_name;
 struct bpf_prog **func;
 void *jit_data;
 struct bpf_jit_poke_descriptor *poke_tab;
 struct bpf_kfunc_desc_tab *kfunc_tab;
 struct bpf_kfunc_btf_tab *kfunc_btf_tab;
 u32 size_poke_tab;
 struct bpf_ksym ksym;
 const struct bpf_prog_ops *ops;
 struct bpf_map **used_maps;
 struct mutex used_maps_mutex;
 struct btf_mod_pair *used_btfs;
 struct bpf_prog *prog;
 struct user_struct *user;
 u64 load_time;
 u32 verified_insns;
 struct bpf_map *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
 char name[16U];

 void *security;

 struct bpf_prog_offload *offload;
 struct btf *btf;
 struct bpf_func_info *func_info;
 struct bpf_func_info_aux *func_info_aux;






 struct bpf_line_info *linfo;







 void **jited_linfo;
 u32 func_info_cnt;
 u32 nr_linfo;




 u32 linfo_idx;
 u32 num_exentries;
 struct exception_table_entry *extable;
 union {
  struct work_struct work;
  struct callback_head rcu;
 };
};

struct bpf_array_aux {





 struct {
  spinlock_t lock;
  enum bpf_prog_type type;
  bool jited;
 } owner;

 struct list_head poke_progs;
 struct bpf_map *map;
 struct mutex poke_mutex;
 struct work_struct work;
};

struct bpf_link {
 atomic64_t refcnt;
 u32 id;
 enum bpf_link_type type;
 const struct bpf_link_ops *ops;
 struct bpf_prog *prog;
 struct work_struct work;
};

struct bpf_link_ops {
 void (*release)(struct bpf_link *link);
 void (*dealloc)(struct bpf_link *link);
 int (*detach)(struct bpf_link *link);
 int (*update_prog)(struct bpf_link *link, struct bpf_prog *new_prog,
      struct bpf_prog *old_prog);
 void (*show_fdinfo)(const struct bpf_link *link, struct seq_file *seq);
 int (*fill_link_info)(const struct bpf_link *link,
         struct bpf_link_info *info);
};

struct bpf_link_primer {
 struct bpf_link *link;
 struct file *file;
 int fd;
 u32 id;
};

struct bpf_struct_ops_value;
struct btf_member;


struct bpf_struct_ops {
 const struct bpf_verifier_ops *verifier_ops;
 int (*init)(struct btf *btf);
 int (*check_member)(const struct btf_type *t,
       const struct btf_member *member);
 int (*init_member)(const struct btf_type *t,
      const struct btf_member *member,
      void *kdata, const void *udata);
 int (*reg)(void *kdata);
 void (*unreg)(void *kdata);
 const struct btf_type *type;
 const struct btf_type *value_type;
 const char *name;
 struct btf_func_model func_models[64];
 u32 type_id;
 u32 value_id;
};



const struct bpf_struct_ops *bpf_struct_ops_find(u32 type_id);
void bpf_struct_ops_init(struct btf *btf, struct bpf_verifier_log *log);
bool bpf_struct_ops_get(const void *kdata);
void bpf_struct_ops_put(const void *kdata);
int bpf_struct_ops_map_sys_lookup_elem(struct bpf_map *map, void *key,
           void *value);
int bpf_struct_ops_prepare_trampoline(struct bpf_tramp_progs *tprogs,
          struct bpf_prog *prog,
          const struct btf_func_model *model,
          void *image, void *image_end);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_try_module_get(const void *data, struct module *owner)
{
 if (owner == ((void *)((0xeB9FUL << 2) + 0)))
  return bpf_struct_ops_get(data);
 else
  return try_module_get(owner);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_module_put(const void *data, struct module *owner)
{
 if (owner == ((void *)((0xeB9FUL << 2) + 0)))
  bpf_struct_ops_put(data);
 else
  module_put(owner);
}



struct bpf_dummy_ops_state {
 int val;
};

struct bpf_dummy_ops {
 int (*test_1)(struct bpf_dummy_ops_state *cb);
 int (*test_2)(struct bpf_dummy_ops_state *cb, int a1, unsigned short a2,
        char a3, unsigned long a4);
};

int bpf_struct_ops_test_run(struct bpf_prog *prog, const union bpf_attr *kattr,
       union bpf_attr *uattr);
# 1071 "./include/linux/bpf.h"
struct bpf_array {
 struct bpf_map map;
 u32 elem_size;
 u32 index_mask;
 struct bpf_array_aux *aux;
 union {
  char value[0] __attribute__((__aligned__(8)));
  void *ptrs[0] __attribute__((__aligned__(8)));
  void *pptrs[0] __attribute__((__aligned__(8)));
 };
};
# 1094 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 bpf_map_flags_to_cap(struct bpf_map *map)
{
 u32 access_flags = map->map_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);




 if (access_flags & BPF_F_RDONLY_PROG)
  return ((((1UL))) << (0));
 else if (access_flags & BPF_F_WRONLY_PROG)
  return ((((1UL))) << (1));
 else
  return ((((1UL))) << (0)) | ((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_flags_access_ok(u32 access_flags)
{
 return (access_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG)) !=
        (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);
}

struct bpf_event_entry {
 struct perf_event *event;
 struct file *perf_file;
 struct file *map_file;
 struct callback_head rcu;
};

bool bpf_prog_array_compatible(struct bpf_array *array, const struct bpf_prog *fp);
int bpf_prog_calc_tag(struct bpf_prog *fp);

const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
const struct bpf_func_proto *bpf_get_trace_vprintk_proto(void);

typedef unsigned long (*bpf_ctx_copy_t)(void *dst, const void *src,
     unsigned long off, unsigned long len);
typedef u32 (*bpf_convert_ctx_access_t)(enum bpf_access_type type,
     const struct bpf_insn *src,
     struct bpf_insn *dst,
     struct bpf_prog *prog,
     u32 *target_size);

u64 bpf_event_output(struct bpf_map *map, u64 flags, void *meta, u64 meta_size,
       void *ctx, u64 ctx_size, bpf_ctx_copy_t ctx_copy);
# 1151 "./include/linux/bpf.h"
struct bpf_prog_array_item {
 struct bpf_prog *prog;
 union {
  struct bpf_cgroup_storage *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
  u64 bpf_cookie;
 };
};

struct bpf_prog_array {
 struct callback_head rcu;
 struct bpf_prog_array_item items[];
};

struct bpf_prog_array *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
void bpf_prog_array_free(struct bpf_prog_array *progs);
int bpf_prog_array_length(struct bpf_prog_array *progs);
bool bpf_prog_array_is_empty(struct bpf_prog_array *array);
int bpf_prog_array_copy_to_user(struct bpf_prog_array *progs,
    __u32 *prog_ids, u32 cnt);

void bpf_prog_array_delete_safe(struct bpf_prog_array *progs,
    struct bpf_prog *old_prog);
int bpf_prog_array_delete_safe_at(struct bpf_prog_array *array, int index);
int bpf_prog_array_update_at(struct bpf_prog_array *array, int index,
        struct bpf_prog *prog);
int bpf_prog_array_copy_info(struct bpf_prog_array *array,
        u32 *prog_ids, u32 request_cnt,
        u32 *prog_cnt);
int bpf_prog_array_copy(struct bpf_prog_array *old_array,
   struct bpf_prog *exclude_prog,
   struct bpf_prog *include_prog,
   u64 bpf_cookie,
   struct bpf_prog_array **new_array);

struct bpf_run_ctx {};

struct bpf_cg_run_ctx {
 struct bpf_run_ctx run_ctx;
 const struct bpf_prog_array_item *prog_item;
};

struct bpf_trace_run_ctx {
 struct bpf_run_ctx run_ctx;
 u64 bpf_cookie;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_run_ctx *bpf_set_run_ctx(struct bpf_run_ctx *new_ctx)
{
 struct bpf_run_ctx *old_ctx = ((void *)0);


 old_ctx = (current_thread_info()->task)->bpf_ctx;
 (current_thread_info()->task)->bpf_ctx = new_ctx;

 return old_ctx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_reset_run_ctx(struct bpf_run_ctx *old_ctx)
{

 (current_thread_info()->task)->bpf_ctx = old_ctx;

}






typedef u32 (*bpf_prog_run_fn)(const struct bpf_prog *prog, const void *ctx);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG_FLAGS(const struct bpf_prog_array *array_rcu,
       const void *ctx, bpf_prog_run_fn run_prog,
       u32 *ret_flags)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;
 u32 func_ret;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_332(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_332(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_333(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_333(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  func_ret = run_prog(prog, ctx);
  ret &= (func_ret & 1);
  *(ret_flags) |= (func_ret >> 1);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG(const struct bpf_prog_array *array_rcu,
        const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_334(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_334(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_335(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_335(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY(const struct bpf_prog_array *array_rcu,
     const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_trace_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_336(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_336(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 if (__builtin_expect(!!(!array), 0))
  goto out;
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 item = &array->items[0];
 while ((prog = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_337(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_337(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.bpf_cookie = item->bpf_cookie;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
out:
 rcu_read_unlock();
 migrate_enable();
 return ret;
}
# 1347 "./include/linux/bpf.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) bpf_prog_active;
extern struct mutex bpf_stats_enabled_mutex;
# 1362 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_disable_instrumentation(void)
{
 migrate_disable();
 if (0)
  do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_enable_instrumentation(void)
{
 if (0)
  do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[raw_smp_processor_id()])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 migrate_enable();
}

extern const struct file_operations bpf_map_fops;
extern const struct file_operations bpf_prog_fops;
extern const struct file_operations bpf_iter_fops;







# 1 "./include/linux/bpf_types.h" 1




extern const struct bpf_prog_ops sk_filter_prog_ops; extern const struct bpf_verifier_ops sk_filter_verifier_ops;

extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;

extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;

extern const struct bpf_prog_ops xdp_prog_ops; extern const struct bpf_verifier_ops xdp_verifier_ops;
# 21 "./include/linux/bpf_types.h"
extern const struct bpf_prog_ops lwt_in_prog_ops; extern const struct bpf_verifier_ops lwt_in_verifier_ops;

extern const struct bpf_prog_ops lwt_out_prog_ops; extern const struct bpf_verifier_ops lwt_out_verifier_ops;

extern const struct bpf_prog_ops lwt_xmit_prog_ops; extern const struct bpf_verifier_ops lwt_xmit_verifier_ops;

extern const struct bpf_prog_ops lwt_seg6local_prog_ops; extern const struct bpf_verifier_ops lwt_seg6local_verifier_ops;

extern const struct bpf_prog_ops sock_ops_prog_ops; extern const struct bpf_verifier_ops sock_ops_verifier_ops;

extern const struct bpf_prog_ops sk_skb_prog_ops; extern const struct bpf_verifier_ops sk_skb_verifier_ops;

extern const struct bpf_prog_ops sk_msg_prog_ops; extern const struct bpf_verifier_ops sk_msg_verifier_ops;

extern const struct bpf_prog_ops flow_dissector_prog_ops; extern const struct bpf_verifier_ops flow_dissector_verifier_ops;



extern const struct bpf_prog_ops kprobe_prog_ops; extern const struct bpf_verifier_ops kprobe_verifier_ops;

extern const struct bpf_prog_ops tracepoint_prog_ops; extern const struct bpf_verifier_ops tracepoint_verifier_ops;

extern const struct bpf_prog_ops perf_event_prog_ops; extern const struct bpf_verifier_ops perf_event_verifier_ops;

extern const struct bpf_prog_ops raw_tracepoint_prog_ops; extern const struct bpf_verifier_ops raw_tracepoint_verifier_ops;

extern const struct bpf_prog_ops raw_tracepoint_writable_prog_ops; extern const struct bpf_verifier_ops raw_tracepoint_writable_verifier_ops;

extern const struct bpf_prog_ops tracing_prog_ops; extern const struct bpf_verifier_ops tracing_verifier_ops;
# 65 "./include/linux/bpf_types.h"
extern const struct bpf_prog_ops sk_reuseport_prog_ops; extern const struct bpf_verifier_ops sk_reuseport_verifier_ops;

extern const struct bpf_prog_ops sk_lookup_prog_ops; extern const struct bpf_verifier_ops sk_lookup_verifier_ops;



extern const struct bpf_prog_ops bpf_struct_ops_prog_ops; extern const struct bpf_verifier_ops bpf_struct_ops_verifier_ops;

extern const struct bpf_prog_ops bpf_extension_prog_ops; extern const struct bpf_verifier_ops bpf_extension_verifier_ops;






extern const struct bpf_prog_ops bpf_syscall_prog_ops; extern const struct bpf_verifier_ops bpf_syscall_verifier_ops;


extern const struct bpf_map_ops array_map_ops;
extern const struct bpf_map_ops percpu_array_map_ops;
extern const struct bpf_map_ops prog_array_map_ops;
extern const struct bpf_map_ops perf_event_array_map_ops;

extern const struct bpf_map_ops cgroup_array_map_ops;





extern const struct bpf_map_ops htab_map_ops;
extern const struct bpf_map_ops htab_percpu_map_ops;
extern const struct bpf_map_ops htab_lru_map_ops;
extern const struct bpf_map_ops htab_lru_percpu_map_ops;
extern const struct bpf_map_ops trie_map_ops;

extern const struct bpf_map_ops stack_trace_map_ops;

extern const struct bpf_map_ops array_of_maps_map_ops;
extern const struct bpf_map_ops htab_of_maps_map_ops;



extern const struct bpf_map_ops task_storage_map_ops;

extern const struct bpf_map_ops dev_map_ops;
extern const struct bpf_map_ops dev_map_hash_ops;
extern const struct bpf_map_ops sk_storage_map_ops;
extern const struct bpf_map_ops cpu_map_ops;




extern const struct bpf_map_ops sock_map_ops;
extern const struct bpf_map_ops sock_hash_ops;
extern const struct bpf_map_ops reuseport_array_ops;


extern const struct bpf_map_ops queue_map_ops;
extern const struct bpf_map_ops stack_map_ops;

extern const struct bpf_map_ops bpf_struct_ops_map_ops;

extern const struct bpf_map_ops ringbuf_map_ops;
extern const struct bpf_map_ops bloom_filter_map_ops;
# 1391 "./include/linux/bpf.h" 2




extern const struct bpf_prog_ops bpf_offload_prog_ops;
extern const struct bpf_verifier_ops tc_cls_act_analyzer_ops;
extern const struct bpf_verifier_ops xdp_analyzer_ops;

struct bpf_prog *bpf_prog_get(u32 ufd);
struct bpf_prog *bpf_prog_get_type_dev(u32 ufd, enum bpf_prog_type type,
           bool attach_drv);
void bpf_prog_add(struct bpf_prog *prog, int i);
void bpf_prog_sub(struct bpf_prog *prog, int i);
void bpf_prog_inc(struct bpf_prog *prog);
struct bpf_prog * __attribute__((__warn_unused_result__)) bpf_prog_inc_not_zero(struct bpf_prog *prog);
void bpf_prog_put(struct bpf_prog *prog);

void bpf_prog_free_id(struct bpf_prog *prog, bool do_idr_lock);
void bpf_map_free_id(struct bpf_map *map, bool do_idr_lock);

struct bpf_map *bpf_map_get(u32 ufd);
struct bpf_map *bpf_map_get_with_uref(u32 ufd);
struct bpf_map *__bpf_map_get(struct fd f);
void bpf_map_inc(struct bpf_map *map);
void bpf_map_inc_with_uref(struct bpf_map *map);
struct bpf_map * __attribute__((__warn_unused_result__)) bpf_map_inc_not_zero(struct bpf_map *map);
void bpf_map_put_with_uref(struct bpf_map *map);
void bpf_map_put(struct bpf_map *map);
void *bpf_map_area_alloc(u64 size, int numa_node);
void *bpf_map_area_mmapable_alloc(u64 size, int numa_node);
void bpf_map_area_free(void *base);
bool bpf_map_write_active(const struct bpf_map *map);
void bpf_map_init_from_attr(struct bpf_map *map, union bpf_attr *attr);
int generic_map_lookup_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
int generic_map_update_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
int generic_map_delete_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
struct bpf_map *bpf_map_get_curr_or_next(u32 *id);
struct bpf_prog *bpf_prog_get_curr_or_next(u32 *id);


void *bpf_map_kmalloc_node(const struct bpf_map *map, size_t size, gfp_t flags,
      int node);
void *bpf_map_kzalloc(const struct bpf_map *map, size_t size, gfp_t flags);
void *bpf_map_alloc_percpu(const struct bpf_map *map, size_t size,
        size_t align, gfp_t flags);
# 1464 "./include/linux/bpf.h"
extern int sysctl_unprivileged_bpf_disabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_ptr_leaks(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_uninit_stack(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_ptr_to_map_access(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_bypass_spec_v1(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_bypass_spec_v4(void)
{
 return perfmon_capable();
}

int bpf_map_new_fd(struct bpf_map *map, int flags);
int bpf_prog_new_fd(struct bpf_prog *prog);

void bpf_link_init(struct bpf_link *link, enum bpf_link_type type,
     const struct bpf_link_ops *ops, struct bpf_prog *prog);
int bpf_link_prime(struct bpf_link *link, struct bpf_link_primer *primer);
int bpf_link_settle(struct bpf_link_primer *primer);
void bpf_link_cleanup(struct bpf_link_primer *primer);
void bpf_link_inc(struct bpf_link *link);
void bpf_link_put(struct bpf_link *link);
int bpf_link_new_fd(struct bpf_link *link);
struct file *bpf_link_new_file(struct bpf_link *link, int *reserved_fd);
struct bpf_link *bpf_link_get_from_fd(u32 ufd);

int bpf_obj_pin_user(u32 ufd, const char *pathname);
int bpf_obj_get_user(const char *pathname, int flags);






struct bpf_iter_aux_info {
 struct bpf_map *map;
};

typedef int (*bpf_iter_attach_target_t)(struct bpf_prog *prog,
     union bpf_iter_link_info *linfo,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_detach_target_t)(struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_show_fdinfo_t) (const struct bpf_iter_aux_info *aux,
     struct seq_file *seq);
typedef int (*bpf_iter_fill_link_info_t)(const struct bpf_iter_aux_info *aux,
      struct bpf_link_info *info);
typedef const struct bpf_func_proto *
(*bpf_iter_get_func_proto_t)(enum bpf_func_id func_id,
        const struct bpf_prog *prog);

enum bpf_iter_feature {
 BPF_ITER_RESCHED = ((((1UL))) << (0)),
};


struct bpf_iter_reg {
 const char *target;
 bpf_iter_attach_target_t attach_target;
 bpf_iter_detach_target_t detach_target;
 bpf_iter_show_fdinfo_t show_fdinfo;
 bpf_iter_fill_link_info_t fill_link_info;
 bpf_iter_get_func_proto_t get_func_proto;
 u32 ctx_arg_info_size;
 u32 feature;
 struct bpf_ctx_arg_aux ctx_arg_info[2];
 const struct bpf_iter_seq_info *seq_info;
};

struct bpf_iter_meta {
 union { struct seq_file * seq; __u64 :64; } __attribute__((aligned(8)));
 u64 session_id;
 u64 seq_num;
};

struct bpf_iter__bpf_map_elem {
 union { struct bpf_iter_meta * meta; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_map * map; __u64 :64; } __attribute__((aligned(8)));
 union { void * key; __u64 :64; } __attribute__((aligned(8)));
 union { void * value; __u64 :64; } __attribute__((aligned(8)));
};

int bpf_iter_reg_target(const struct bpf_iter_reg *reg_info);
void bpf_iter_unreg_target(const struct bpf_iter_reg *reg_info);
bool bpf_iter_prog_supported(struct bpf_prog *prog);
const struct bpf_func_proto *
bpf_iter_get_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog);
int bpf_iter_link_attach(const union bpf_attr *attr, bpfptr_t uattr, struct bpf_prog *prog);
int bpf_iter_new_fd(struct bpf_link *link);
bool bpf_link_is_iter(struct bpf_link *link);
struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *meta, bool in_stop);
int bpf_iter_run_prog(struct bpf_prog *prog, void *ctx);
void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *aux,
         struct seq_file *seq);
int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *aux,
    struct bpf_link_info *info);

int map_set_for_each_callback_args(struct bpf_verifier_env *env,
       struct bpf_func_state *caller,
       struct bpf_func_state *callee);

int bpf_percpu_hash_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_array_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_hash_update(struct bpf_map *map, void *key, void *value,
      u64 flags);
int bpf_percpu_array_update(struct bpf_map *map, void *key, void *value,
       u64 flags);

int bpf_stackmap_copy(struct bpf_map *map, void *key, void *value);

int bpf_fd_array_map_update_elem(struct bpf_map *map, struct file *map_file,
     void *key, void *value, u64 map_flags);
int bpf_fd_array_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);
int bpf_fd_htab_map_update_elem(struct bpf_map *map, struct file *map_file,
    void *key, void *value, u64 map_flags);
int bpf_fd_htab_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);

int bpf_get_file_flag(int flags);
int bpf_check_uarg_tail_zero(bpfptr_t uaddr, size_t expected_size,
        size_t actual_size);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_long_memcpy(void *dst, const void *src, u32 size)
{
 const long *lsrc = src;
 long *ldst = dst;

 size /= sizeof(long);
 while (size--)
  *ldst++ = *lsrc++;
}


int bpf_check(struct bpf_prog **fp, union bpf_attr *attr, bpfptr_t uattr);


void bpf_patch_call_args(struct bpf_insn *insn, u32 stack_depth);


struct btf *bpf_get_btf_vmlinux(void);


struct xdp_buff;
struct sk_buff;
struct bpf_dtab_netdev;
struct bpf_cpu_map_entry;

void __dev_flush(void);
int dev_xdp_enqueue(struct net_device *dev, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_enqueue(struct bpf_dtab_netdev *dst, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_enqueue_multi(struct xdp_buff *xdp, struct net_device *dev_rx,
     struct bpf_map *map, bool exclude_ingress);
int dev_map_generic_redirect(struct bpf_dtab_netdev *dst, struct sk_buff *skb,
        struct bpf_prog *xdp_prog);
int dev_map_redirect_multi(struct net_device *dev, struct sk_buff *skb,
      struct bpf_prog *xdp_prog, struct bpf_map *map,
      bool exclude_ingress);

void __cpu_map_flush(void);
int cpu_map_enqueue(struct bpf_cpu_map_entry *rcpu, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int cpu_map_generic_redirect(struct bpf_cpu_map_entry *rcpu,
        struct sk_buff *skb);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_map_attr_numa_node(const union bpf_attr *attr)
{
 return (attr->map_flags & BPF_F_NUMA_NODE) ?
  attr->numa_node : (-1);
}

struct bpf_prog *bpf_prog_get_type_path(const char *name, enum bpf_prog_type type);
int array_map_alloc_check(union bpf_attr *attr);

int bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_tracing(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
int bpf_prog_test_run_flow_dissector(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
int bpf_prog_test_run_raw_tp(struct bpf_prog *prog,
        const union bpf_attr *kattr,
        union bpf_attr *uattr);
int bpf_prog_test_run_sk_lookup(struct bpf_prog *prog,
    const union bpf_attr *kattr,
    union bpf_attr *uattr);
bool bpf_prog_test_check_kfunc_call(u32 kfunc_id, struct module *owner);
bool btf_ctx_access(int off, int size, enum bpf_access_type type,
      const struct bpf_prog *prog,
      struct bpf_insn_access_aux *info);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_tracing_ctx_access(int off, int size,
       enum bpf_access_type type)
{
 if (off < 0 || off >= sizeof(__u64) * 12)
  return false;
 if (type != BPF_READ)
  return false;
 if (off % size != 0)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_tracing_btf_ctx_access(int off, int size,
           enum bpf_access_type type,
           const struct bpf_prog *prog,
           struct bpf_insn_access_aux *info)
{
 if (!bpf_tracing_ctx_access(off, size, type))
  return false;
 return btf_ctx_access(off, size, type, prog, info);
}

int btf_struct_access(struct bpf_verifier_log *log, const struct btf *btf,
        const struct btf_type *t, int off, int size,
        enum bpf_access_type atype,
        u32 *next_btf_id);
bool btf_struct_ids_match(struct bpf_verifier_log *log,
     const struct btf *btf, u32 id, int off,
     const struct btf *need_btf, u32 need_type_id);

int btf_distill_func_proto(struct bpf_verifier_log *log,
      struct btf *btf,
      const struct btf_type *func_proto,
      const char *func_name,
      struct btf_func_model *m);

struct bpf_reg_state;
int btf_check_subprog_arg_match(struct bpf_verifier_env *env, int subprog,
    struct bpf_reg_state *regs);
int btf_check_kfunc_arg_match(struct bpf_verifier_env *env,
         const struct btf *btf, u32 func_id,
         struct bpf_reg_state *regs);
int btf_prepare_func_args(struct bpf_verifier_env *env, int subprog,
     struct bpf_reg_state *reg);
int btf_check_type_match(struct bpf_verifier_log *log, const struct bpf_prog *prog,
    struct btf *btf, const struct btf_type *t);

struct bpf_prog *bpf_prog_by_id(u32 id);
struct bpf_link *bpf_link_by_id(u32 id);

const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id func_id);
void bpf_task_storage_free(struct task_struct *task);
bool bpf_prog_has_kfunc_call(const struct bpf_prog *prog);
const struct btf_func_model *
bpf_jit_find_kfunc_model(const struct bpf_prog *prog,
    const struct bpf_insn *insn);
# 1957 "./include/linux/bpf.h"
void __bpf_free_used_btfs(struct bpf_prog_aux *aux,
     struct btf_mod_pair *used_btfs, u32 len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_prog *bpf_prog_get_type(u32 ufd,
       enum bpf_prog_type type)
{
 return bpf_prog_get_type_dev(ufd, type, false);
}

void __bpf_free_used_maps(struct bpf_prog_aux *aux,
     struct bpf_map **used_maps, u32 len);

bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);

int bpf_prog_offload_compile(struct bpf_prog *prog);
void bpf_prog_offload_destroy(struct bpf_prog *prog);
int bpf_prog_offload_info_fill(struct bpf_prog_info *info,
          struct bpf_prog *prog);

int bpf_map_offload_info_fill(struct bpf_map_info *info, struct bpf_map *map);

int bpf_map_offload_lookup_elem(struct bpf_map *map, void *key, void *value);
int bpf_map_offload_update_elem(struct bpf_map *map,
    void *key, void *value, u64 flags);
int bpf_map_offload_delete_elem(struct bpf_map *map, void *key);
int bpf_map_offload_get_next_key(struct bpf_map *map,
     void *key, void *next_key);

bool bpf_offload_prog_map_match(struct bpf_prog *prog, struct bpf_map *map);

struct bpf_offload_dev *
bpf_offload_dev_create(const struct bpf_prog_offload_ops *ops, void *priv);
void bpf_offload_dev_destroy(struct bpf_offload_dev *offdev);
void *bpf_offload_dev_priv(struct bpf_offload_dev *offdev);
int bpf_offload_dev_netdev_register(struct bpf_offload_dev *offdev,
        struct net_device *netdev);
void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *offdev,
           struct net_device *netdev);
bool bpf_offload_dev_match(struct bpf_prog *prog, struct net_device *netdev);


int bpf_prog_offload_init(struct bpf_prog *prog, union bpf_attr *attr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_prog_is_dev_bound(const struct bpf_prog_aux *aux)
{
 return aux->offload_requested;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_is_dev_bound(struct bpf_map *map)
{
 return __builtin_expect(!!(map->ops == &bpf_map_offload_ops), 0);
}

struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *attr);
void bpf_map_offload_map_free(struct bpf_map *map);
int bpf_prog_test_run_syscall(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);

int sock_map_get_from_fd(const union bpf_attr *attr, struct bpf_prog *prog);
int sock_map_prog_detach(const union bpf_attr *attr, enum bpf_prog_type ptype);
int sock_map_update_elem_sys(struct bpf_map *map, void *key, void *value, u64 flags);
void sock_map_unhash(struct sock *sk);
void sock_map_close(struct sock *sk, long timeout);
# 2076 "./include/linux/bpf.h"
void bpf_sk_reuseport_detach(struct sock *sk);
int bpf_fd_reuseport_array_lookup_elem(struct bpf_map *map, void *key,
           void *value);
int bpf_fd_reuseport_array_update_elem(struct bpf_map *map, void *key,
           void *value, u64 map_flags);
# 2103 "./include/linux/bpf.h"
extern const struct bpf_func_proto bpf_map_lookup_elem_proto;
extern const struct bpf_func_proto bpf_map_update_elem_proto;
extern const struct bpf_func_proto bpf_map_delete_elem_proto;
extern const struct bpf_func_proto bpf_map_push_elem_proto;
extern const struct bpf_func_proto bpf_map_pop_elem_proto;
extern const struct bpf_func_proto bpf_map_peek_elem_proto;

extern const struct bpf_func_proto bpf_get_prandom_u32_proto;
extern const struct bpf_func_proto bpf_get_smp_processor_id_proto;
extern const struct bpf_func_proto bpf_get_numa_node_id_proto;
extern const struct bpf_func_proto bpf_tail_call_proto;
extern const struct bpf_func_proto bpf_ktime_get_ns_proto;
extern const struct bpf_func_proto bpf_ktime_get_boot_ns_proto;
extern const struct bpf_func_proto bpf_get_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_get_current_uid_gid_proto;
extern const struct bpf_func_proto bpf_get_current_comm_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto;
extern const struct bpf_func_proto bpf_get_stack_proto;
extern const struct bpf_func_proto bpf_get_task_stack_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto_pe;
extern const struct bpf_func_proto bpf_get_stack_proto_pe;
extern const struct bpf_func_proto bpf_sock_map_update_proto;
extern const struct bpf_func_proto bpf_sock_hash_update_proto;
extern const struct bpf_func_proto bpf_get_current_cgroup_id_proto;
extern const struct bpf_func_proto bpf_get_current_ancestor_cgroup_id_proto;
extern const struct bpf_func_proto bpf_msg_redirect_hash_proto;
extern const struct bpf_func_proto bpf_msg_redirect_map_proto;
extern const struct bpf_func_proto bpf_sk_redirect_hash_proto;
extern const struct bpf_func_proto bpf_sk_redirect_map_proto;
extern const struct bpf_func_proto bpf_spin_lock_proto;
extern const struct bpf_func_proto bpf_spin_unlock_proto;
extern const struct bpf_func_proto bpf_get_local_storage_proto;
extern const struct bpf_func_proto bpf_strtol_proto;
extern const struct bpf_func_proto bpf_strtoul_proto;
extern const struct bpf_func_proto bpf_tcp_sock_proto;
extern const struct bpf_func_proto bpf_jiffies64_proto;
extern const struct bpf_func_proto bpf_get_ns_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_event_output_data_proto;
extern const struct bpf_func_proto bpf_ringbuf_output_proto;
extern const struct bpf_func_proto bpf_ringbuf_reserve_proto;
extern const struct bpf_func_proto bpf_ringbuf_submit_proto;
extern const struct bpf_func_proto bpf_ringbuf_discard_proto;
extern const struct bpf_func_proto bpf_ringbuf_query_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp6_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_timewait_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_request_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_udp6_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_unix_sock_proto;
extern const struct bpf_func_proto bpf_copy_from_user_proto;
extern const struct bpf_func_proto bpf_snprintf_btf_proto;
extern const struct bpf_func_proto bpf_snprintf_proto;
extern const struct bpf_func_proto bpf_per_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_this_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_ktime_get_coarse_ns_proto;
extern const struct bpf_func_proto bpf_sock_from_file_proto;
extern const struct bpf_func_proto bpf_get_socket_ptr_cookie_proto;
extern const struct bpf_func_proto bpf_task_storage_get_proto;
extern const struct bpf_func_proto bpf_task_storage_delete_proto;
extern const struct bpf_func_proto bpf_for_each_map_elem_proto;
extern const struct bpf_func_proto bpf_btf_find_by_name_kind_proto;
extern const struct bpf_func_proto bpf_sk_setsockopt_proto;
extern const struct bpf_func_proto bpf_sk_getsockopt_proto;
extern const struct bpf_func_proto bpf_kallsyms_lookup_name_proto;

const struct bpf_func_proto *tracing_prog_func_proto(
  enum bpf_func_id func_id, const struct bpf_prog *prog);


void bpf_user_rnd_init_once(void);
u64 bpf_user_rnd_u32(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
u64 bpf_get_raw_cpu_id(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);


bool bpf_sock_common_is_valid_access(int off, int size,
         enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
bool bpf_sock_is_valid_access(int off, int size, enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
u32 bpf_sock_convert_ctx_access(enum bpf_access_type type,
    const struct bpf_insn *si,
    struct bpf_insn *insn_buf,
    struct bpf_prog *prog,
    u32 *target_size);
# 2211 "./include/linux/bpf.h"
struct sk_reuseport_kern {
 struct sk_buff *skb;
 struct sock *sk;
 struct sock *selected_sk;
 struct sock *migrating_sk;
 void *data_end;
 u32 hash;
 u32 reuseport_id;
 bool bind_inany;
};
bool bpf_tcp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);

bool bpf_xdp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);
# 2271 "./include/linux/bpf.h"
enum bpf_text_poke_type {
 BPF_MOD_CALL,
 BPF_MOD_JUMP,
};

int bpf_arch_text_poke(void *ip, enum bpf_text_poke_type t,
         void *addr1, void *addr2);

struct btf_id_set;
bool btf_id_set_contains(const struct btf_id_set *set, u32 id);



int bpf_bprintf_prepare(char *fmt, u32 fmt_size, const u64 *raw_args,
   u32 **bin_buf, u32 num_args);
void bpf_bprintf_cleanup(void);
# 6 "./include/linux/bpf-cgroup.h" 2







struct sock;
struct sockaddr;
struct cgroup;
struct sk_buff;
struct bpf_map;
struct bpf_prog;
struct bpf_sock_ops_kern;
struct bpf_cgroup_storage;
struct ctl_table;
struct ctl_table_header;
struct task_struct;
# 454 "./include/linux/bpf-cgroup.h"
struct cgroup_bpf {};
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_bpf_inherit(struct cgroup *cgrp) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_offline(struct cgroup *cgrp) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_bpf_prog_attach(const union bpf_attr *attr,
      enum bpf_prog_type ptype,
      struct bpf_prog *prog)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_bpf_prog_detach(const union bpf_attr *attr,
      enum bpf_prog_type ptype)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_bpf_link_attach(const union bpf_attr *attr,
      struct bpf_prog *prog)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_bpf_prog_query(const union bpf_attr *attr,
     union bpf_attr *uattr)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_cgroup_storage_assign(struct bpf_prog_aux *aux,
         struct bpf_map *map) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(
 struct bpf_prog *prog, enum bpf_cgroup_storage_type stype) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_cgroup_storage_free(
 struct bpf_cgroup_storage *storage) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_percpu_cgroup_storage_copy(struct bpf_map *map, void *key,
       void *value) {
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_percpu_cgroup_storage_update(struct bpf_map *map,
     void *key, void *value, u64 flags) {
 return 0;
}
# 23 "./include/linux/cgroup-defs.h" 2
# 1 "./include/linux/psi_types.h" 1



# 1 "./include/linux/kthread.h" 1







struct mm_struct;

__attribute__((__format__(printf, 4, 5)))
struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),
        void *data,
        int node,
        const char namefmt[], ...);
# 31 "./include/linux/kthread.h"
struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
       void *data,
       unsigned int cpu,
       const char *namefmt);

void set_kthread_struct(struct task_struct *p);

void kthread_set_per_cpu(struct task_struct *k, int cpu);
bool kthread_is_per_cpu(struct task_struct *k);
# 59 "./include/linux/kthread.h"
void free_kthread_struct(struct task_struct *k);
void kthread_bind(struct task_struct *k, unsigned int cpu);
void kthread_bind_mask(struct task_struct *k, const struct cpumask *mask);
int kthread_stop(struct task_struct *k);
bool kthread_should_stop(void);
bool kthread_should_park(void);
bool __kthread_should_park(struct task_struct *k);
bool kthread_freezable_should_stop(bool *was_frozen);
void *kthread_func(struct task_struct *k);
void *kthread_data(struct task_struct *k);
void *kthread_probe_data(struct task_struct *k);
int kthread_park(struct task_struct *k);
void kthread_unpark(struct task_struct *k);
void kthread_parkme(void);

int kthreadd(void *unused);
extern struct task_struct *kthreadd_task;
extern int tsk_fork_get_node(struct task_struct *tsk);
# 86 "./include/linux/kthread.h"
struct kthread_work;
typedef void (*kthread_work_func_t)(struct kthread_work *work);
void kthread_delayed_work_timer_fn(struct timer_list *t);

enum {
 KTW_FREEZABLE = 1 << 0,
};

struct kthread_worker {
 unsigned int flags;
 raw_spinlock_t lock;
 struct list_head work_list;
 struct list_head delayed_work_list;
 struct task_struct *task;
 struct kthread_work *current_work;
};

struct kthread_work {
 struct list_head node;
 kthread_work_func_t func;
 struct kthread_worker *worker;

 int canceling;
};

struct kthread_delayed_work {
 struct kthread_work work;
 struct timer_list timer;
};
# 156 "./include/linux/kthread.h"
extern void __kthread_init_worker(struct kthread_worker *worker,
   const char *name, struct lock_class_key *key);
# 180 "./include/linux/kthread.h"
int kthread_worker_fn(void *worker_ptr);

__attribute__((__format__(printf, 2, 3)))
struct kthread_worker *
kthread_create_worker(unsigned int flags, const char namefmt[], ...);

__attribute__((__format__(printf, 3, 4))) struct kthread_worker *
kthread_create_worker_on_cpu(int cpu, unsigned int flags,
        const char namefmt[], ...);

bool kthread_queue_work(struct kthread_worker *worker,
   struct kthread_work *work);

bool kthread_queue_delayed_work(struct kthread_worker *worker,
    struct kthread_delayed_work *dwork,
    unsigned long delay);

bool kthread_mod_delayed_work(struct kthread_worker *worker,
         struct kthread_delayed_work *dwork,
         unsigned long delay);

void kthread_flush_work(struct kthread_work *work);
void kthread_flush_worker(struct kthread_worker *worker);

bool kthread_cancel_work_sync(struct kthread_work *work);
bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *work);

void kthread_destroy_worker(struct kthread_worker *worker);

void kthread_use_mm(struct mm_struct *mm);
void kthread_unuse_mm(struct mm_struct *mm);

struct cgroup_subsys_state;


void kthread_associate_blkcg(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *kthread_blkcg(void);
# 5 "./include/linux/psi_types.h" 2
# 179 "./include/linux/psi_types.h"
struct psi_group { };
# 24 "./include/linux/cgroup-defs.h" 2



struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;
struct poll_table_struct;







enum cgroup_subsys_id {
# 1 "./include/linux/cgroup_subsys.h" 1
# 13 "./include/linux/cgroup_subsys.h"
cpuset_cgrp_id,



cpu_cgrp_id,



cpuacct_cgrp_id,



io_cgrp_id,



memory_cgrp_id,



devices_cgrp_id,



freezer_cgrp_id,
# 57 "./include/linux/cgroup_subsys.h"
pids_cgrp_id,
# 45 "./include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
 CSS_DYING = (1 << 4),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,


 CGRP_FREEZE,


 CGRP_FROZEN,


 CGRP_KILL,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),






 CGRP_ROOT_NS_DELEGATE = (1 << 3),




 CGRP_ROOT_CPUSET_V2_MODE = (1 << 4),




 CGRP_ROOT_MEMORY_LOCAL_EVENTS = (1 << 5),




 CGRP_ROOT_MEMORY_RECURSIVE_PROT = (1 << 6),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NS_DELEGATABLE = (1 << 2),

 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),
 CFTYPE_DEBUG = (1 << 5),
 CFTYPE_PRESSURE = (1 << 6),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
 unsigned long notified_at;
 struct timer_list notify_timer;
};
# 142 "./include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct list_head sibling;
 struct list_head children;


 struct list_head rstat_css_node;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct work_struct destroy_work;
 struct rcu_work destroy_rwork;





 struct cgroup_subsys_state *parent;
};
# 199 "./include/linux/cgroup-defs.h"
struct css_set {





 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 refcount_t refcount;







 struct css_set *dom_cset;


 struct cgroup *dfl_cgrp;


 int nr_tasks;
# 231 "./include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;
 struct list_head dying_tasks;


 struct list_head task_iters;
# 245 "./include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head threaded_csets;
 struct list_head threaded_csets_node;





 struct hlist_node hlist;





 struct list_head cgrp_links;





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 277 "./include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup_base_stat {
 struct task_cputime cputime;
};
# 312 "./include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {




 struct u64_stats_sync bsync;
 struct cgroup_base_stat bstat;





 struct cgroup_base_stat last_bstat;
# 337 "./include/linux/cgroup-defs.h"
 struct cgroup *updated_children;
 struct cgroup *updated_next;
};

struct cgroup_freezer_state {

 bool freeze;


 int e_freeze;




 int nr_frozen_descendants;





 int nr_frozen_tasks;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;







 int level;


 int max_depth;
# 388 "./include/linux/cgroup-defs.h"
 int nr_descendants;
 int nr_dying_descendants;
 int max_descendants;
# 403 "./include/linux/cgroup-defs.h"
 int nr_populated_csets;
 int nr_populated_domain_children;
 int nr_populated_threaded_children;

 int nr_threaded_children;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 420 "./include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 443 "./include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];
# 452 "./include/linux/cgroup-defs.h"
 struct cgroup *dom_cgrp;
 struct cgroup *old_dom_cgrp;


 struct cgroup_rstat_cpu *rstat_cpu;
 struct list_head rstat_css_list;


 struct cgroup_base_stat last_bstat;
 struct cgroup_base_stat bstat;
 struct prev_cputime prev_cputime;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 struct psi_group psi;


 struct cgroup_bpf bpf;


 atomic_t congestion_count;


 struct cgroup_freezer_state freezer;


 u64 ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 u64 cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 char release_agent_path[4096];


 char name[64];
};
# 536 "./include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;

 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);




};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);
 void (*css_rstat_flush)(struct cgroup_subsys_state *css, int cpu);
 int (*css_extra_stat_show)(struct seq_file *seq,
       struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task,
   struct css_set *cset);
 void (*cancel_fork)(struct task_struct *task, struct css_set *cset);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*release)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 661 "./include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 673 "./include/linux/cgroup-defs.h"
 bool threaded:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 708 "./include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 720 "./include/linux/cgroup-defs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 807 "./include/linux/cgroup-defs.h"
struct sock_cgroup_data {
};
# 29 "./include/linux/cgroup.h" 2

struct kernel_clone_args;
# 52 "./include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;
 unsigned int flags;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *tcset_pos;
 struct list_head *tcset_head;

 struct list_head *task_pos;

 struct list_head *cur_tasks_head;
 struct css_set *cur_cset;
 struct css_set *cur_dcset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;


# 1 "./include/linux/cgroup_subsys.h" 1
# 13 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpuset_cgrp_subsys;



extern struct cgroup_subsys cpu_cgrp_subsys;



extern struct cgroup_subsys cpuacct_cgrp_subsys;



extern struct cgroup_subsys io_cgrp_subsys;



extern struct cgroup_subsys memory_cgrp_subsys;



extern struct cgroup_subsys devices_cgrp_subsys;



extern struct cgroup_subsys freezer_cgrp_subsys;
# 57 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys pids_cgrp_subsys;
# 76 "./include/linux/cgroup.h" 2





# 1 "./include/linux/cgroup_subsys.h" 1
# 13 "./include/linux/cgroup_subsys.h"
extern struct static_key_true cpuset_cgrp_subsys_enabled_key; extern struct static_key_true cpuset_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpu_cgrp_subsys_enabled_key; extern struct static_key_true cpu_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpuacct_cgrp_subsys_enabled_key; extern struct static_key_true cpuacct_cgrp_subsys_on_dfl_key;



extern struct static_key_true io_cgrp_subsys_enabled_key; extern struct static_key_true io_cgrp_subsys_on_dfl_key;



extern struct static_key_true memory_cgrp_subsys_enabled_key; extern struct static_key_true memory_cgrp_subsys_on_dfl_key;



extern struct static_key_true devices_cgrp_subsys_enabled_key; extern struct static_key_true devices_cgrp_subsys_on_dfl_key;



extern struct static_key_true freezer_cgrp_subsys_enabled_key; extern struct static_key_true freezer_cgrp_subsys_on_dfl_key;
# 57 "./include/linux/cgroup_subsys.h"
extern struct static_key_true pids_cgrp_subsys_enabled_key; extern struct static_key_true pids_cgrp_subsys_on_dfl_key;
# 82 "./include/linux/cgroup.h" 2
# 98 "./include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_e_css(struct cgroup *cgroup,
      struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);
struct cgroup *cgroup_get_from_fd(int fd);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p,
      struct kernel_clone_args *kargs);
extern void cgroup_cancel_fork(struct task_struct *p,
          struct kernel_clone_args *kargs);
extern void cgroup_post_fork(struct task_struct *p,
        struct kernel_clone_args *kargs);
void cgroup_exit(struct task_struct *p);
void cgroup_release(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);

int cgroup_parse_float(const char *input, unsigned dec_shift, s64 *v);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void css_task_iter_start(struct cgroup_subsys_state *css, unsigned int flags,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 310 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cgroup_id(const struct cgroup *cgrp)
{
 return cgrp->kn->id;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 334 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 351 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 368 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}
# 390 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_is_dying(struct cgroup_subsys_state *css)
{
 return !(css->flags & CSS_NO_REF) && percpu_ref_is_dying(&css->refcnt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 414 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_get(struct cgroup *cgrp)
{
 css_get(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_tryget(struct cgroup *cgrp)
{
 return css_tryget(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 479 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_338(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((task)->cgroups)) == sizeof(char) || sizeof(((task)->cgroups)) == sizeof(short) || sizeof(((task)->cgroups)) == sizeof(int) || sizeof(((task)->cgroups)) == sizeof(long)) || sizeof(((task)->cgroups)) == sizeof(long long))) __compiletime_assert_338(); } while (0); (*(const volatile typeof( _Generic((((task)->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((task)->cgroups)))) *)&(((task)->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 491 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_339(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_339(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 506 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);






  if (__builtin_expect(!!(css_tryget(css)), 1))
   break;
  __sync();
 }
 rcu_read_unlock();
 return css;
}
# 536 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_340(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_340(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_dfl_cgroup(struct task_struct *task)
{
 return task_css_set(task)->dfl_cgrp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_parent(struct cgroup *cgrp)
{
 struct cgroup_subsys_state *parent_css = cgrp->self.parent;

 if (parent_css)
  return ({ void *__mptr = (void *)(parent_css); _Static_assert(__builtin_types_compatible_p(typeof(*(parent_css)), typeof(((struct cgroup *)0)->self)) || __builtin_types_compatible_p(typeof(*(parent_css)), typeof(void)), "pointer type mismatch in container_of()"); ((struct cgroup *)(__mptr - __builtin_offsetof(struct cgroup, self))); });
 return ((void *)0);
}
# 571 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == cgroup_id(ancestor);
}
# 590 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_ancestor(struct cgroup *cgrp,
          int ancestor_level)
{
 if (cgrp->level < ancestor_level)
  return ((void *)0);
 while (cgrp && cgrp->level > ancestor_level)
  cgrp = cgroup_parent(cgrp);
 return cgrp;
}
# 609 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_under_cgroup_hierarchy(struct task_struct *task,
            struct cgroup *ancestor)
{
 struct css_set *cset = task_css_set(task);

 return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->nr_populated_csets + cgrp->nr_populated_domain_children +
  cgrp->nr_populated_threaded_children;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return kernfs_ino(cgrp->kn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_path(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct psi_group *cgroup_psi(struct cgroup *cgrp)
{
 return &cgrp->psi;
}

bool cgroup_psi_enabled(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_init_kthreadd(void)
{





 (current_thread_info()->task)->no_cgroup_migration = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_kthread_ready(void)
{




 (current_thread_info()->task)->no_cgroup_migration = 0;
}

void cgroup_path_from_kernfs_id(u64 id, char *buf, size_t buflen);
struct cgroup *cgroup_get_from_id(u64 id);
# 765 "./include/linux/cgroup.h"
void cgroup_rstat_updated(struct cgroup *cgrp, int cpu);
void cgroup_rstat_flush(struct cgroup *cgrp);
void cgroup_rstat_flush_irqsafe(struct cgroup *cgrp);
void cgroup_rstat_flush_hold(struct cgroup *cgrp);
void cgroup_rstat_flush_release(void);





void cpuacct_charge(struct task_struct *tsk, u64 cputime);
void cpuacct_account_field(struct task_struct *tsk, int index, u64 val);






void __cgroup_account_cputime(struct cgroup *cgrp, u64 delta_exec);
void __cgroup_account_cputime_field(struct cgroup *cgrp,
        enum cpu_usage_stat index, u64 delta_exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime(struct task_struct *task,
       u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_charge(task, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime(cgrp, delta_exec);
 rcu_read_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime_field(struct task_struct *task,
      enum cpu_usage_stat index,
      u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_account_field(task, index, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime_field(cgrp, index, delta_exec);
 rcu_read_unlock();
}
# 843 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_sk_alloc(struct sock_cgroup_data *skcd) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_sk_clone(struct sock_cgroup_data *skcd) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_sk_free(struct sock_cgroup_data *skcd) {}



struct cgroup_namespace {
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

int cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
     struct cgroup_namespace *ns);
# 881 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  free_cgroup_ns(ns);
}



void cgroup_enter_frozen(void);
void cgroup_leave_frozen(bool always_leave);
void cgroup_update_frozen(struct cgroup *cgrp);
void cgroup_freeze(struct cgroup *cgrp, bool freeze);
void cgroup_freezer_migrate_task(struct task_struct *task, struct cgroup *src,
     struct cgroup *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_task_frozen(struct task_struct *task)
{
 return task->frozen;
}
# 931 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_get(struct cgroup *cgrp) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_put(struct cgroup *cgrp) {}
# 14 "./include/linux/memcontrol.h" 2



# 1 "./include/linux/page_counter.h" 1








struct page_counter {
 atomic_long_t usage;
 unsigned long min;
 unsigned long low;
 unsigned long high;
 unsigned long max;


 unsigned long emin;
 atomic_long_t min_usage;
 atomic_long_t children_min_usage;


 unsigned long elow;
 atomic_long_t low_usage;
 atomic_long_t children_low_usage;


 unsigned long watermark;
 unsigned long failcnt;







 struct page_counter *parent;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_counter_init(struct page_counter *counter,
         struct page_counter *parent)
{
 atomic_long_set(&counter->usage, 0);
 counter->max = (((long)(~0UL >> 1)) / ((1UL) << 14));
 counter->parent = parent;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_counter_read(struct page_counter *counter)
{
 return atomic_long_read(&counter->usage);
}

void page_counter_cancel(struct page_counter *counter, unsigned long nr_pages);
void page_counter_charge(struct page_counter *counter, unsigned long nr_pages);
bool page_counter_try_charge(struct page_counter *counter,
        unsigned long nr_pages,
        struct page_counter **fail);
void page_counter_uncharge(struct page_counter *counter, unsigned long nr_pages);
void page_counter_set_min(struct page_counter *counter, unsigned long nr_pages);
void page_counter_set_low(struct page_counter *counter, unsigned long nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_counter_set_high(struct page_counter *counter,
      unsigned long nr_pages)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_341(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(counter->high) == sizeof(char) || sizeof(counter->high) == sizeof(short) || sizeof(counter->high) == sizeof(int) || sizeof(counter->high) == sizeof(long)) || sizeof(counter->high) == sizeof(long long))) __compiletime_assert_341(); } while (0); do { *(volatile typeof(counter->high) *)&(counter->high) = (nr_pages); } while (0); } while (0);
}

int page_counter_set_max(struct page_counter *counter, unsigned long nr_pages);
int page_counter_memparse(const char *buf, const char *max,
     unsigned long *nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_counter_reset_watermark(struct page_counter *counter)
{
 counter->watermark = page_counter_read(counter);
}
# 18 "./include/linux/memcontrol.h" 2
# 1 "./include/linux/vmpressure.h" 1
# 11 "./include/linux/vmpressure.h"
# 1 "./include/linux/eventfd.h" 1
# 33 "./include/linux/eventfd.h"
struct eventfd_ctx;
struct file;



void eventfd_ctx_put(struct eventfd_ctx *ctx);
struct file *eventfd_fget(int fd);
struct eventfd_ctx *eventfd_ctx_fdget(int fd);
struct eventfd_ctx *eventfd_ctx_fileget(struct file *file);
__u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n);
int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *ctx, wait_queue_entry_t *wait,
      __u64 *cnt);
void eventfd_ctx_do_read(struct eventfd_ctx *ctx, __u64 *cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool eventfd_signal_allowed(void)
{
 return !(current_thread_info()->task)->in_eventfd_signal;
}
# 12 "./include/linux/vmpressure.h" 2

struct vmpressure {
 unsigned long scanned;
 unsigned long reclaimed;

 unsigned long tree_scanned;
 unsigned long tree_reclaimed;

 spinlock_t sr_lock;


 struct list_head events;

 struct mutex events_lock;

 struct work_struct work;
};

struct mem_cgroup;


extern void vmpressure(gfp_t gfp, struct mem_cgroup *memcg, bool tree,
         unsigned long scanned, unsigned long reclaimed);
extern void vmpressure_prio(gfp_t gfp, struct mem_cgroup *memcg, int prio);

extern void vmpressure_init(struct vmpressure *vmpr);
extern void vmpressure_cleanup(struct vmpressure *vmpr);
extern struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *memcg);
extern struct mem_cgroup *vmpressure_to_memcg(struct vmpressure *vmpr);
extern int vmpressure_register_event(struct mem_cgroup *memcg,
         struct eventfd_ctx *eventfd,
         const char *args);
extern void vmpressure_unregister_event(struct mem_cgroup *memcg,
     struct eventfd_ctx *eventfd);
# 19 "./include/linux/memcontrol.h" 2



# 1 "./include/linux/writeback.h" 1
# 11 "./include/linux/writeback.h"
# 1 "./include/linux/flex_proportions.h" 1
# 28 "./include/linux/flex_proportions.h"
struct fprop_global {

 struct percpu_counter events;

 unsigned int period;

 seqcount_t sequence;
};

int fprop_global_init(struct fprop_global *p, gfp_t gfp);
void fprop_global_destroy(struct fprop_global *p);
bool fprop_new_period(struct fprop_global *p, int periods);




struct fprop_local_single {

 unsigned long events;

 unsigned int period;
 raw_spinlock_t lock;
};





int fprop_local_init_single(struct fprop_local_single *pl);
void fprop_local_destroy_single(struct fprop_local_single *pl);
void __fprop_inc_single(struct fprop_global *p, struct fprop_local_single *pl);
void fprop_fraction_single(struct fprop_global *p,
 struct fprop_local_single *pl, unsigned long *numerator,
 unsigned long *denominator);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void fprop_inc_single(struct fprop_global *p, struct fprop_local_single *pl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __fprop_inc_single(p, pl);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}




struct fprop_local_percpu {

 struct percpu_counter events;

 unsigned int period;
 raw_spinlock_t lock;
};

int fprop_local_init_percpu(struct fprop_local_percpu *pl, gfp_t gfp);
void fprop_local_destroy_percpu(struct fprop_local_percpu *pl);
void __fprop_add_percpu(struct fprop_global *p, struct fprop_local_percpu *pl,
  long nr);
void __fprop_add_percpu_max(struct fprop_global *p,
  struct fprop_local_percpu *pl, int max_frac, long nr);
void fprop_fraction_percpu(struct fprop_global *p,
 struct fprop_local_percpu *pl, unsigned long *numerator,
 unsigned long *denominator);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void fprop_inc_percpu(struct fprop_global *p, struct fprop_local_percpu *pl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __fprop_add_percpu(p, pl, 1);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 12 "./include/linux/writeback.h" 2
# 1 "./include/linux/backing-dev-defs.h" 1
# 17 "./include/linux/backing-dev-defs.h"
struct page;
struct device;
struct dentry;




enum wb_state {
 WB_registered,
 WB_writeback_running,
 WB_has_dirty_io,
 WB_start_all,
};

enum wb_congested_state {
 WB_async_congested,
 WB_sync_congested,
};

enum wb_stat_item {
 WB_RECLAIMABLE,
 WB_WRITEBACK,
 WB_DIRTIED,
 WB_WRITTEN,
 NR_WB_STAT_ITEMS
};






enum wb_reason {
 WB_REASON_BACKGROUND,
 WB_REASON_VMSCAN,
 WB_REASON_SYNC,
 WB_REASON_PERIODIC,
 WB_REASON_LAPTOP_TIMER,
 WB_REASON_FS_FREE_SPACE,






 WB_REASON_FORKER_THREAD,
 WB_REASON_FOREIGN_FLUSH,

 WB_REASON_MAX,
};

struct wb_completion {
 atomic_t cnt;
 wait_queue_head_t *waitq;
};
# 110 "./include/linux/backing-dev-defs.h"
struct bdi_writeback {
 struct backing_dev_info *bdi;

 unsigned long state;
 unsigned long last_old_flush;

 struct list_head b_dirty;
 struct list_head b_io;
 struct list_head b_more_io;
 struct list_head b_dirty_time;
 spinlock_t list_lock;

 atomic_t writeback_inodes;
 struct percpu_counter stat[NR_WB_STAT_ITEMS];

 unsigned long congested;

 unsigned long bw_time_stamp;
 unsigned long dirtied_stamp;
 unsigned long written_stamp;
 unsigned long write_bandwidth;
 unsigned long avg_write_bandwidth;







 unsigned long dirty_ratelimit;
 unsigned long balanced_dirty_ratelimit;

 struct fprop_local_percpu completions;
 int dirty_exceeded;
 enum wb_reason start_all_reason;

 spinlock_t work_lock;
 struct list_head work_list;
 struct delayed_work dwork;
 struct delayed_work bw_dwork;

 unsigned long dirty_sleep;

 struct list_head bdi_node;


 struct percpu_ref refcnt;
 struct fprop_local_percpu memcg_completions;
 struct cgroup_subsys_state *memcg_css;
 struct cgroup_subsys_state *blkcg_css;
 struct list_head memcg_node;
 struct list_head blkcg_node;
 struct list_head b_attached;
 struct list_head offline_node;

 union {
  struct work_struct release_work;
  struct callback_head rcu;
 };

};

struct backing_dev_info {
 u64 id;
 struct rb_node rb_node;
 struct list_head bdi_list;
 unsigned long ra_pages;
 unsigned long io_pages;

 struct kref refcnt;
 unsigned int capabilities;
 unsigned int min_ratio;
 unsigned int max_ratio, max_prop_frac;





 atomic_long_t tot_write_bandwidth;

 struct bdi_writeback wb;
 struct list_head wb_list;

 struct xarray cgwb_tree;
 struct mutex cgwb_release_mutex;
 struct rw_semaphore wb_switch_rwsem;

 wait_queue_head_t wb_waitq;

 struct device *dev;
 char dev_name[64];
 struct device *owner;

 struct timer_list laptop_mode_wb_timer;


 struct dentry *debug_dir;

};

enum {
 BLK_RW_ASYNC = 0,
 BLK_RW_SYNC = 1,
};

void clear_bdi_congested(struct backing_dev_info *bdi, int sync);
void set_bdi_congested(struct backing_dev_info *bdi, int sync);

struct wb_lock_cookie {
 bool locked;
 unsigned long flags;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wb_tryget(struct bdi_writeback *wb)
{
 if (wb != &wb->bdi->wb)
  return percpu_ref_tryget(&wb->refcnt);
 return true;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_get(struct bdi_writeback *wb)
{
 if (wb != &wb->bdi->wb)
  percpu_ref_get(&wb->refcnt);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_put_many(struct bdi_writeback *wb, unsigned long nr)
{
 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!wb->bdi); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/backing-dev-defs.h", 253, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); })) {




  return;
 }

 if (wb != &wb->bdi->wb)
  percpu_ref_put_many(&wb->refcnt, nr);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_put(struct bdi_writeback *wb)
{
 wb_put_many(wb, 1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wb_dying(struct bdi_writeback *wb)
{
 return percpu_ref_is_dying(&wb->refcnt);
}
# 13 "./include/linux/writeback.h" 2
# 1 "./include/linux/blk_types.h" 1
# 10 "./include/linux/blk_types.h"
# 1 "./include/linux/bvec.h" 1
# 10 "./include/linux/bvec.h"
# 1 "./include/linux/highmem.h" 1







# 1 "./include/linux/cacheflush.h" 1








void flush_dcache_folio(struct folio *folio);
# 9 "./include/linux/highmem.h" 2




# 1 "././include/linux/highmem-internal.h" 1
# 20 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_local_fork(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_assert_nomap(void) { }
# 154 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr)
{
 return ({ unsigned long __pfn = (((virt_to_phys((void *)(addr))) >> 14)); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page)
{
 do { do { } while (0); } while (0);
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap_high(struct page *page) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_flush_unused(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page(struct page *page)
{
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_folio(struct folio *folio, size_t offset)
{
 return lowmem_page_address(&folio->page) + offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page_prot(struct page *page, pgprot_t prot)
{
 return kmap_local_page(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_pfn(unsigned long pfn)
{
 return kmap_local_page(({ unsigned long __pfn = (pfn); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_local(void *addr)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page)
{
 if (0)
  migrate_disable();
 else
  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 pagefault_disable();
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic_prot(struct page *page, pgprot_t prot)
{
 return kmap_atomic(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic_pfn(unsigned long pfn)
{
 return kmap_atomic(({ unsigned long __pfn = (pfn); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_atomic(void *addr)
{



 pagefault_enable();
 if (0)
  migrate_enable();
 else
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void) { return 0UL; }
# 14 "./include/linux/highmem.h" 2
# 36 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page);
# 45 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_flush_unused(void);
# 96 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page(struct page *page);
# 133 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_folio(struct folio *folio, size_t offset);
# 146 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page);
# 160 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void);
# 180 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_user_highpage(struct page *page, unsigned long vaddr)
{
 void *addr = kmap_local_page(page);
 clear_user_page(addr, vaddr, page);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_342(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_342(); } while (0); __kunmap_local(addr); } while (0);
}
# 201 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
alloc_zeroed_user_highpage_movable(struct vm_area_struct *vma,
       unsigned long vaddr)
{
 struct page *page = alloc_pages_vma(((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x02u)) | (( gfp_t)0x08u) | (( gfp_t)0x1000000u)), 0, vma, vaddr, numa_node_id(), false);

 if (page)
  clear_user_highpage(page, vaddr);

 return page;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_highpage(struct page *page)
{
 void *kaddr = kmap_local_page(page);
 clear_page(kaddr);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_343(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((kaddr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_343(); } while (0); __kunmap_local(kaddr); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tag_clear_highpage(struct page *page)
{
}
# 237 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segments(struct page *page,
  unsigned start1, unsigned end1,
  unsigned start2, unsigned end2)
{
 void *kaddr = kmap_local_page(page);
 unsigned int i;

 __BUG_ON((unsigned long)(end1 > page_size(page) || end2 > page_size(page)));

 if (end1 > start1)
  memset(kaddr + start1, 0, end1 - start1);

 if (end2 > start2)
  memset(kaddr + start2, 0, end2 - start2);

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_344(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((kaddr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_344(); } while (0); __kunmap_local(kaddr); } while (0);
 for (i = 0; i < compound_nr(page); i++)
  flush_dcache_page(page + i);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segment(struct page *page,
 unsigned start, unsigned end)
{
 zero_user_segments(page, start, end, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user(struct page *page,
 unsigned start, unsigned size)
{
 zero_user_segments(page, start, start + size, 0, 0);
}
# 288 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_highpage(struct page *to, struct page *from)
{
 char *vfrom, *vto;

 vfrom = kmap_local_page(from);
 vto = kmap_local_page(to);
 copy_page(vto, vfrom);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_345(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vto), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_345(); } while (0); __kunmap_local(vto); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_346(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vfrom), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_346(); } while (0); __kunmap_local(vfrom); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 ((void)(sizeof(( long)(dst_off + len > ((1UL) << 14) || src_off + len > ((1UL) << 14)))));
 memcpy(dst + dst_off, src + src_off, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_347(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((src), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_347(); } while (0); __kunmap_local(src); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_348(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((dst), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_348(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memmove_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 ((void)(sizeof(( long)(dst_off + len > ((1UL) << 14) || src_off + len > ((1UL) << 14)))));
 memmove(dst + dst_off, src + src_off, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_349(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((src), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_349(); } while (0); __kunmap_local(src); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_350(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((dst), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_350(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_page(struct page *page, size_t offset, int val,
          size_t len)
{
 char *addr = kmap_local_page(page);

 ((void)(sizeof(( long)(offset + len > ((1UL) << 14)))));
 memset(addr + offset, val, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_351(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_351(); } while (0); __kunmap_local(addr); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_from_page(char *to, struct page *page,
        size_t offset, size_t len)
{
 char *from = kmap_local_page(page);

 ((void)(sizeof(( long)(offset + len > ((1UL) << 14)))));
 memcpy(to, from + offset, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_352(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((from), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((from)), typeof(struct page *))))) __compiletime_assert_352(); } while (0); __kunmap_local(from); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_to_page(struct page *page, size_t offset,
      const char *from, size_t len)
{
 char *to = kmap_local_page(page);

 ((void)(sizeof(( long)(offset + len > ((1UL) << 14)))));
 memcpy(to + offset, from, len);
 flush_dcache_page(page);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_353(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((to), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((to)), typeof(struct page *))))) __compiletime_assert_353(); } while (0); __kunmap_local(to); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_page(struct page *page, size_t offset, size_t len)
{
 char *addr = kmap_local_page(page);
 memset(addr + offset, 0, len);
 flush_dcache_page(page);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_354(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_354(); } while (0); __kunmap_local(addr); } while (0);
}
# 374 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_zero_segments(struct folio *folio,
  size_t start1, size_t xend1, size_t start2, size_t xend2)
{
 zero_user_segments(&folio->page, start1, xend1, start2, xend2);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_zero_segment(struct folio *folio,
  size_t start, size_t xend)
{
 zero_user_segments(&folio->page, start, xend, 0, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_zero_range(struct folio *folio,
  size_t start, size_t length)
{
 zero_user_segments(&folio->page, start, start + length, 0, 0);
}
# 11 "./include/linux/bvec.h" 2







struct page;
# 32 "./include/linux/bvec.h"
struct bio_vec {
 struct page *bv_page;
 unsigned int bv_len;
 unsigned int bv_offset;
};

struct bvec_iter {
 sector_t bi_sector;

 unsigned int bi_size;

 unsigned int bi_idx;

 unsigned int bi_bvec_done;

} __attribute__((__packed__));

struct bvec_iter_all {
 struct bio_vec bv;
 int idx;
 unsigned done;
};
# 101 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bvec_iter_advance(const struct bio_vec *bv,
  struct bvec_iter *iter, unsigned bytes)
{
 unsigned int idx = iter->bi_idx;

 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(bytes > iter->bi_size); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/bvec.h", 107, 9, "Attempted to advance past end of bvec iter\n"); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); })) {

  iter->bi_size = 0;
  return false;
 }

 iter->bi_size -= bytes;
 bytes += iter->bi_bvec_done;

 while (bytes && bytes >= bv[idx].bv_len) {
  bytes -= bv[idx].bv_len;
  idx++;
 }

 iter->bi_idx = idx;
 iter->bi_bvec_done = bytes;
 return true;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bvec_iter_advance_single(const struct bio_vec *bv,
    struct bvec_iter *iter, unsigned int bytes)
{
 unsigned int done = iter->bi_bvec_done + bytes;

 if (done == bv[iter->bi_idx].bv_len) {
  done = 0;
  iter->bi_idx++;
 }
 iter->bi_bvec_done = done;
 iter->bi_size -= bytes;
}
# 157 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bvec_init_iter_all(struct bvec_iter_all *iter_all)
{
 iter_all->done = 0;
 iter_all->idx = 0;

 return &iter_all->bv;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bvec_advance(const struct bio_vec *bvec,
    struct bvec_iter_all *iter_all)
{
 struct bio_vec *bv = &iter_all->bv;

 if (iter_all->done) {
  bv->bv_page++;
  bv->bv_offset = 0;
 } else {
  bv->bv_page = bvec->bv_page + (bvec->bv_offset >> 14);
  bv->bv_offset = bvec->bv_offset & ~(~((1 << 14) - 1));
 }
 bv->bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(((1UL) << 14) - bv->bv_offset)) *)1 == (typeof((unsigned int)(bvec->bv_len - iter_all->done)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(((1UL) << 14) - bv->bv_offset)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(bvec->bv_len - iter_all->done)) * 0l)) : (int *)8))))), (((unsigned int)(((1UL) << 14) - bv->bv_offset)) < ((unsigned int)(bvec->bv_len - iter_all->done)) ? ((unsigned int)(((1UL) << 14) - bv->bv_offset)) : ((unsigned int)(bvec->bv_len - iter_all->done))), ({ typeof((unsigned int)(((1UL) << 14) - bv->bv_offset)) __UNIQUE_ID___x355 = ((unsigned int)(((1UL) << 14) - bv->bv_offset)); typeof((unsigned int)(bvec->bv_len - iter_all->done)) __UNIQUE_ID___y356 = ((unsigned int)(bvec->bv_len - iter_all->done)); ((__UNIQUE_ID___x355) < (__UNIQUE_ID___y356) ? (__UNIQUE_ID___x355) : (__UNIQUE_ID___y356)); }));

 iter_all->done += bv->bv_len;

 if (iter_all->done == bvec->bv_len) {
  iter_all->idx++;
  iter_all->done = 0;
 }
}
# 194 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bvec_kmap_local(struct bio_vec *bvec)
{
 return kmap_local_page(bvec->bv_page) + bvec->bv_offset;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_from_bvec(char *to, struct bio_vec *bvec)
{
 memcpy_from_page(to, bvec->bv_page, bvec->bv_offset, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_to_bvec(struct bio_vec *bvec, const char *from)
{
 memcpy_to_page(bvec->bv_page, bvec->bv_offset, from, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_bvec(struct bio_vec *bvec)
{
 memzero_page(bvec->bv_page, bvec->bv_offset, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bvec_virt(struct bio_vec *bvec)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(PageHighMem(bvec->bv_page)); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/bvec.h", 240, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 return lowmem_page_address(bvec->bv_page) + bvec->bv_offset;
}
# 11 "./include/linux/blk_types.h" 2
# 1 "./include/linux/device.h" 1
# 15 "./include/linux/device.h"
# 1 "./include/linux/dev_printk.h" 1
# 22 "./include/linux/dev_printk.h"
struct device;




struct dev_printk_info {
 char subsystem[16];
 char device[48];
};



__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void _dev_printk(const char *level, const struct device *dev,
   const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 16 "./include/linux/device.h" 2
# 1 "./include/linux/energy_model.h" 1




# 1 "./include/linux/device.h" 1
# 6 "./include/linux/energy_model.h" 2



# 1 "./include/linux/sched/cpufreq.h" 1
# 10 "./include/linux/energy_model.h" 2
# 1 "./include/linux/sched/topology.h" 1






# 1 "./include/linux/sched/idle.h" 1






enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};


extern void wake_up_if_idle(int cpu);
# 63 "./include/linux/sched/idle.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __current_set_polling(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __current_clr_polling(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) current_set_polling_and_test(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 2)), 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) current_clr_polling_and_test(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 2)), 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void current_clr_polling(void)
{
 __current_clr_polling();







 __sync();

 do { if (test_ti_thread_flag(current_thread_info(), 2)) set_preempt_need_resched(); } while (0);
}
# 8 "./include/linux/sched/topology.h" 2








enum {
# 1 "./include/linux/sched/sd_flags.h" 1
# 51 "./include/linux/sched/sd_flags.h"
__SD_BALANCE_NEWIDLE,







__SD_BALANCE_EXEC,







__SD_BALANCE_FORK,







__SD_BALANCE_WAKE,






__SD_WAKE_AFFINE,
# 91 "./include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY,
# 101 "./include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY_FULL,
# 110 "./include/linux/sched/sd_flags.h"
__SD_SHARE_CPUCAPACITY,
# 119 "./include/linux/sched/sd_flags.h"
__SD_SHARE_PKG_RESOURCES,
# 130 "./include/linux/sched/sd_flags.h"
__SD_SERIALIZE,
# 140 "./include/linux/sched/sd_flags.h"
__SD_ASYM_PACKING,
# 150 "./include/linux/sched/sd_flags.h"
__SD_PREFER_SIBLING,







__SD_OVERLAP,







__SD_NUMA,
# 18 "./include/linux/sched/topology.h" 2
 __SD_FLAG_CNT,
};



enum {
# 1 "./include/linux/sched/sd_flags.h" 1
# 51 "./include/linux/sched/sd_flags.h"
SD_BALANCE_NEWIDLE = 1 << __SD_BALANCE_NEWIDLE,







SD_BALANCE_EXEC = 1 << __SD_BALANCE_EXEC,







SD_BALANCE_FORK = 1 << __SD_BALANCE_FORK,







SD_BALANCE_WAKE = 1 << __SD_BALANCE_WAKE,






SD_WAKE_AFFINE = 1 << __SD_WAKE_AFFINE,
# 91 "./include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY = 1 << __SD_ASYM_CPUCAPACITY,
# 101 "./include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY_FULL = 1 << __SD_ASYM_CPUCAPACITY_FULL,
# 110 "./include/linux/sched/sd_flags.h"
SD_SHARE_CPUCAPACITY = 1 << __SD_SHARE_CPUCAPACITY,
# 119 "./include/linux/sched/sd_flags.h"
SD_SHARE_PKG_RESOURCES = 1 << __SD_SHARE_PKG_RESOURCES,
# 130 "./include/linux/sched/sd_flags.h"
SD_SERIALIZE = 1 << __SD_SERIALIZE,
# 140 "./include/linux/sched/sd_flags.h"
SD_ASYM_PACKING = 1 << __SD_ASYM_PACKING,
# 150 "./include/linux/sched/sd_flags.h"
SD_PREFER_SIBLING = 1 << __SD_PREFER_SIBLING,







SD_OVERLAP = 1 << __SD_OVERLAP,







SD_NUMA = 1 << __SD_NUMA,
# 25 "./include/linux/sched/topology.h" 2
};
# 60 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_numa_flags(void)
{
 return SD_NUMA;
}


extern int arch_asym_cpu_priority(int cpu);

struct sched_domain_attr {
 int relax_domain_level;
};





extern int sched_domain_level_max;

struct sched_group;

struct sched_domain_shared {
 atomic_t ref;
 atomic_t nr_busy_cpus;
 int has_idle_cores;
};

struct sched_domain {

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;

 int nohz_idle;
 int flags;
 int level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;


 u64 max_newidle_lb_cost;
 unsigned long last_decay_max_lb_cost;

 u64 avg_scan_cost;
# 146 "./include/linux/sched/topology.h"
 union {
  void *private;
  struct callback_head rcu;
 };
 struct sched_domain_shared *shared;

 unsigned int span_weight;







 unsigned long span[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *sched_domain_span(struct sched_domain *sd)
{
 return ((struct cpumask *)(1 ? (sd->span) : (void *)sizeof(__check_is_bitmap(sd->span))));
}

extern void partition_sched_domains_locked(int ndoms_new,
        cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);

extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);


cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);

bool cpus_share_cache(int this_cpu, int that_cpu);

typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
typedef int (*sched_domain_flags_f)(void);



struct sd_data {
 struct sched_domain * *sd;
 struct sched_domain_shared * *sds;
 struct sched_group * *sg;
 struct sched_group_capacity * *sgc;
};

struct sched_domain_topology_level {
 sched_domain_mask_f mask;
 sched_domain_flags_f sd_flags;
 int flags;
 int numa_level;
 struct sd_data data;



};

extern void set_sched_topology(struct sched_domain_topology_level *tl);
# 238 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rebuild_sched_domains_energy(void)
{
}
# 254 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long arch_scale_cpu_capacity(int cpu)
{
 return (1L << 10);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long arch_scale_thermal_pressure(int cpu)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch_set_thermal_pressure(const struct cpumask *cpus,
          unsigned long th_pressure)
{ }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_node(const struct task_struct *p)
{
 return (__cpu_logical_map[task_cpu(p)] >> 2);
}
# 11 "./include/linux/energy_model.h" 2
# 22 "./include/linux/energy_model.h"
struct em_perf_state {
 unsigned long frequency;
 unsigned long power;
 unsigned long cost;
 unsigned long flags;
};
# 55 "./include/linux/energy_model.h"
struct em_perf_domain {
 struct em_perf_state *table;
 int nr_perf_states;
 unsigned long flags;
 unsigned long cpus[];
};
# 265 "./include/linux/energy_model.h"
struct em_data_callback {};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
    struct em_data_callback *cb, cpumask_t *span,
    bool milliwatts)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void em_dev_unregister_perf_domain(struct device *dev)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct em_perf_domain *em_cpu_get(int cpu)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct em_perf_domain *em_pd_get(struct device *dev)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long em_cpu_energy(struct em_perf_domain *pd,
   unsigned long max_util, unsigned long sum_util,
   unsigned long allowed_cpu_cap)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int em_pd_nr_perf_states(struct em_perf_domain *pd)
{
 return 0;
}
# 17 "./include/linux/device.h" 2


# 1 "./include/linux/klist.h" 1
# 17 "./include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "./include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 20 "./include/linux/device.h" 2





# 1 "./include/linux/pm.h" 1
# 22 "./include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 44 "./include/linux/pm.h"
extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 277 "./include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 501 "./include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 523 "./include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 unsigned int clock_op_might_sleep;
 struct mutex clock_mutex;
 struct list_head clock_list;




};
# 566 "./include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;
 unsigned int must_resume:1;
 unsigned int may_skip_resume:1;




 struct hrtimer suspend_timer;
 u64 timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int needs_force_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 u64 last_busy;
 u64 active_time;
 u64 suspended_time;
 u64 accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 644 "./include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 int (*start)(struct device *dev);
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 708 "./include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);

extern bool dev_pm_skip_resume(struct device *dev);
extern bool dev_pm_skip_suspend(struct device *dev);
# 802 "./include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "./include/linux/device.h" 2




# 1 "./include/linux/device/bus.h" 1
# 21 "./include/linux/device/bus.h"
struct device_driver;
struct fwnode_handle;
# 82 "./include/linux/device/bus.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 void (*sync_state)(struct device *dev);
 void (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 136 "./include/linux/device/bus.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);


int device_match_name(struct device *dev, const void *name);
int device_match_of_node(struct device *dev, const void *np);
int device_match_fwnode(struct device *dev, const void *fwnode);
int device_match_devt(struct device *dev, const void *pdevt);
int device_match_acpi_dev(struct device *dev, const void *adev);
int device_match_acpi_handle(struct device *dev, const void *handle);
int device_match_any(struct device *dev, const void *unused);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name)
{
 return bus_find_device(bus, start, name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
{
 return bus_find_device(bus, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
{
 return bus_find_device(bus, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_devt(struct bus_type *bus,
           dev_t devt)
{
 return bus_find_device(bus, ((void *)0), &devt, device_match_devt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_next_device(struct bus_type *bus,struct device *cur)
{
 return bus_find_device(bus, cur, ((void *)0), device_match_any);
}
# 243 "./include/linux/device/bus.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
{
 return ((void *)0);
}


struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 286 "./include/linux/device/bus.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 31 "./include/linux/device.h" 2
# 1 "./include/linux/device/class.h" 1
# 22 "./include/linux/device/class.h"
struct device;
struct fwnode_handle;
# 54 "./include/linux/device/class.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 99 "./include/linux/device/class.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_name(struct class *class,
             const char *name)
{
 return class_find_device(class, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_of_node(struct class *class, const struct device_node *np)
{
 return class_find_device(class, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_fwnode(struct class *class,
       const struct fwnode_handle *fwnode)
{
 return class_find_device(class, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_devt(struct class *class,
             dev_t devt)
{
 return class_find_device(class, ((void *)0), &devt, device_match_devt);
}
# 184 "./include/linux/device/class.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_acpi_dev(struct class *class, const void *adev)
{
 return ((void *)0);
}


struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 206 "./include/linux/device/class.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 238 "./include/linux/device/class.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 32 "./include/linux/device.h" 2
# 1 "./include/linux/device/driver.h" 1
# 44 "./include/linux/device/driver.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 95 "./include/linux/device/driver.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 148 "./include/linux/device/driver.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_name(struct device_driver *drv,
       const char *name)
{
 return driver_find_device(drv, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_of_node(struct device_driver *drv,
         const struct device_node *np)
{
 return driver_find_device(drv, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_fwnode(struct device_driver *drv,
        const struct fwnode_handle *fwnode)
{
 return driver_find_device(drv, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_devt(struct device_driver *drv,
       dev_t devt)
{
 return driver_find_device(drv, ((void *)0), &devt, device_match_devt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_next_device(struct device_driver *drv,
           struct device *start)
{
 return driver_find_device(drv, start, ((void *)0), device_match_any);
}
# 232 "./include/linux/device/driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_acpi_dev(struct device_driver *drv, const void *adev)
{
 return ((void *)0);
}


extern int driver_deferred_probe_timeout;
void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
void driver_init(void);
# 33 "./include/linux/device.h" 2
# 1 "./arch/mips/include/generated/asm/device.h" 1
# 1 "./include/asm-generic/device.h" 1







struct dev_archdata {
};

struct pdev_archdata {
};
# 2 "./arch/mips/include/generated/asm/device.h" 2
# 34 "./include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct dev_pin_info;
struct dev_iommu;
# 62 "./include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 87 "./include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 153 "./include/linux/device.h"
int device_create_file(struct device *device,
         const struct device_attribute *entry);
void device_remove_file(struct device *dev,
   const struct device_attribute *attr);
bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);

void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));





void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
void devres_free(void *res);
void devres_add(struct device *dev, void *res);
void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id, gfp_t gfp);
void devres_close_group(struct device *dev, void *id);
void devres_remove_group(struct device *dev, void *id);
int devres_release_group(struct device *dev, void *id);


void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
void *devm_krealloc(struct device *dev, void *ptr, size_t size,
      gfp_t gfp) __attribute__((__warn_unused_result__));
__attribute__((__format__(printf, 3, 0))) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
         const char *fmt, va_list ap) __attribute__((__malloc__));
__attribute__((__format__(printf, 3, 4))) char *devm_kasprintf(struct device *dev, gfp_t gfp,
        const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return devm_kmalloc(dev, bytes, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
void devm_kfree(struct device *dev, const void *p);
char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
const char *devm_kstrdup_const(struct device *dev, const char *s, gfp_t gfp);
void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp);

unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);
void *devm_ioremap_resource_wc(struct device *dev,
           const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 275 "./include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned int min_align_mask;
 unsigned long segment_boundary_mask;
};
# 298 "./include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 337 "./include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};
# 353 "./include/linux/device.h"
enum device_removable {
 DEVICE_REMOVABLE_NOT_SUPPORTED = 0,
 DEVICE_REMOVABLE_UNKNOWN,
 DEVICE_FIXED,
 DEVICE_REMOVABLE,
};
# 367 "./include/linux/device.h"
struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 struct list_head defer_sync;
 enum dl_dev_state status;
};
# 473 "./include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;






 struct irq_domain *msi_domain;





 raw_spinlock_t msi_lock;
 struct list_head msi_list;




 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_limit;
 const struct bus_dma_region *dma_range_map;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;







 struct io_tlb_mem *dma_io_tlb_mem;


 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;


 int numa_node;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct dev_iommu *iommu;

 enum device_removable removable;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
 bool state_synced:1;
 bool can_match:1;
# 578 "./include/linux/device.h"
};
# 594 "./include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 struct device link_dev;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;
 struct work_struct rm_work;
 bool supplier_preactivated;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); _Static_assert(__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) || __builtin_types_compatible_p(typeof(*(kobj)), typeof(void)), "pointer type mismatch in container_of()"); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != ((void *)0));
}


# 1 "./include/linux/pm_wakeup.h" 1
# 18 "./include/linux/pm_wakeup.h"
struct wake_irq;
# 43 "./include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};
# 77 "./include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_wakeup_path(struct device *dev)
{
 return dev->power.wakeup_path;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_wakeup_path(struct device *dev)
{
 dev->power.wakeup_path = true;
}


extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int wakeup_sources_read_lock(void);
extern void wakeup_sources_read_unlock(int idx);
extern struct wakeup_source *wakeup_sources_walk_start(void);
extern struct wakeup_source *wakeup_sources_walk_next(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 205 "./include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 625 "./include/linux/device.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}
# 642 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_bus_name(const struct device *dev)
{
 return dev->bus ? dev->bus->name : (dev->class ? dev->class->name : "");
}

__attribute__((__format__(printf, 2, 3))) int dev_set_name(struct device *dev, const char *name, ...);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
# 668 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return ((void *)0);
 return dev->of_node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_has_sync_state(struct device *dev)
{
 if (!dev)
  return false;
 if (dev->driver && dev->driver->sync_state)
  return true;
 if (dev->bus && dev->bus->sync_state)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_removable(struct device *dev,
         enum device_removable removable)
{
 dev->removable = removable;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_is_removable(struct device *dev)
{
 return dev->removable == DEVICE_REMOVABLE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_removable_is_valid(struct device *dev)
{
 return dev->removable != DEVICE_REMOVABLE_NOT_SUPPORTED;
}




int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
void device_unregister(struct device *dev);
void device_initialize(struct device *dev);
int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
void device_del(struct device *dev);
int device_for_each_child(struct device *dev, void *data,
     int (*fn)(struct device *dev, void *data));
int device_for_each_child_reverse(struct device *dev, void *data,
      int (*fn)(struct device *dev, void *data));
struct device *device_find_child(struct device *dev, void *data,
     int (*match)(struct device *dev, void *data));
struct device *device_find_child_by_name(struct device *parent,
      const char *name);
int device_rename(struct device *dev, const char *new_name);
int device_move(struct device *dev, struct device *new_parent,
  enum dpm_order dpm_order);
int device_change_owner(struct device *dev, kuid_t kuid, kgid_t kgid);
const char *device_get_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
          kgid_t *gid, const char **tmp);
int device_is_dependent(struct device *dev, void *target);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

void lock_device_hotplug(void);
void unlock_device_hotplug(void);
int lock_device_hotplug_sysfs(void);
int device_offline(struct device *dev);
int device_online(struct device *dev);
void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);
void device_set_node(struct device *dev, struct fwnode_handle *fwnode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




struct device *__root_device_register(const char *name, struct module *owner);





void root_device_unregister(struct device *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





int __attribute__((__warn_unused_result__)) device_driver_attach(struct device_driver *drv,
          struct device *dev);
int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
void device_release_driver(struct device *dev);
int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
void device_initial_probe(struct device *dev);
int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

bool device_is_bound(struct device *dev);




__attribute__((__format__(printf, 5, 6))) struct device *
device_create(struct class *cls, struct device *parent, dev_t devt,
       void *drvdata, const char *fmt, ...);
__attribute__((__format__(printf, 6, 7))) struct device *
device_create_with_groups(struct class *cls, struct device *parent, dev_t devt,
     void *drvdata, const struct attribute_group **groups,
     const char *fmt, ...);
void device_destroy(struct class *cls, dev_t devt);

int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
       const struct attribute_group **groups);
void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
           const struct attribute_group *grp);
void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






struct device *get_device(struct device *dev);
void put_device(struct device *dev);
bool kill_device(struct device *dev);


int devtmpfs_mount(void);





void device_shutdown(void);


const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);
void device_links_supplier_sync_state_pause(void);
void device_links_supplier_sync_state_resume(void);

extern __attribute__((__format__(printf, 3, 4)))
int dev_err_probe(const struct device *dev, int err, const char *fmt, ...);
# 985 "./include/linux/device.h"
extern long sysfs_deprecated;
# 12 "./include/linux/blk_types.h" 2


struct bio_set;
struct bio;
struct bio_integrity_payload;
struct page;
struct io_context;
struct cgroup_subsys_state;
typedef void (bio_end_io_t) (struct bio *);
struct bio_crypt_ctx;
# 40 "./include/linux/blk_types.h"
struct block_device {
 sector_t bd_start_sect;
 sector_t bd_nr_sectors;
 struct disk_stats *bd_stats;
 unsigned long bd_stamp;
 bool bd_read_only;
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 void * bd_claiming;
 struct device bd_device;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;
 struct kobject *bd_holder_dir;
 u8 bd_partno;
 spinlock_t bd_size_lock;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
 struct super_block *bd_fsfreeze_sb;

 struct partition_meta_info *bd_meta_info;



} ;
# 89 "./include/linux/blk_types.h"
typedef u8 blk_status_t;
# 168 "./include/linux/blk_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_path_error(blk_status_t error)
{
 switch (error) {
 case (( blk_status_t)1):
 case (( blk_status_t)3):
 case (( blk_status_t)5):
 case (( blk_status_t)6):
 case (( blk_status_t)7):
 case (( blk_status_t)8):
  return false;
 }


 return true;
}
# 202 "./include/linux/blk_types.h"
struct bio_issue {
 u64 value;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __bio_issue_time(u64 time)
{
 return time & ((1ULL << ((64 - 1) - 12)) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 bio_issue_time(struct bio_issue *issue)
{
 return __bio_issue_time(issue->value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t bio_issue_size(struct bio_issue *issue)
{
 return ((issue->value & (((1ULL << 12) - 1) << ((64 - 1) - 12))) >> ((64 - 1) - 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_issue_init(struct bio_issue *issue,
           sector_t size)
{
 size &= (1ULL << 12) - 1;
 issue->value = ((issue->value & (~((1ULL << (64 - 1)) - 1))) |
   (ktime_get_ns() & ((1ULL << ((64 - 1) - 12)) - 1)) |
   ((u64)size << ((64 - 1) - 12)));
}

typedef unsigned int blk_qc_t;






struct bio {
 struct bio *bi_next;
 struct block_device *bi_bdev;
 unsigned int bi_opf;



 unsigned short bi_flags;
 unsigned short bi_ioprio;
 unsigned short bi_write_hint;
 blk_status_t bi_status;
 atomic_t __bi_remaining;

 struct bvec_iter bi_iter;

 blk_qc_t bi_cookie;
 bio_end_io_t *bi_end_io;
 void *bi_private;







 struct blkcg_gq *bi_blkg;
 struct bio_issue bi_issue;
# 273 "./include/linux/blk_types.h"
 union {

  struct bio_integrity_payload *bi_integrity;

 };

 unsigned short bi_vcnt;





 unsigned short bi_max_vecs;

 atomic_t __bi_cnt;

 struct bio_vec *bi_io_vec;

 struct bio_set *bi_pool;






 struct bio_vec bi_inline_vecs[];
};







enum {
 BIO_NO_PAGE_REF,
 BIO_CLONED,
 BIO_BOUNCED,
 BIO_WORKINGSET,
 BIO_QUIET,
 BIO_CHAIN,
 BIO_REFFED,
 BIO_THROTTLED,

 BIO_TRACE_COMPLETION,

 BIO_CGROUP_ACCT,
 BIO_TRACKED,
 BIO_REMAPPED,
 BIO_ZONE_WRITE_LOCKED,
 BIO_PERCPU_CACHE,
 BIO_FLAG_LAST
};

typedef __u32 blk_mq_req_flags_t;
# 346 "./include/linux/blk_types.h"
enum req_opf {

 REQ_OP_READ = 0,

 REQ_OP_WRITE = 1,

 REQ_OP_FLUSH = 2,

 REQ_OP_DISCARD = 3,

 REQ_OP_SECURE_ERASE = 5,

 REQ_OP_WRITE_SAME = 7,

 REQ_OP_WRITE_ZEROES = 9,

 REQ_OP_ZONE_OPEN = 10,

 REQ_OP_ZONE_CLOSE = 11,

 REQ_OP_ZONE_FINISH = 12,

 REQ_OP_ZONE_APPEND = 13,

 REQ_OP_ZONE_RESET = 15,

 REQ_OP_ZONE_RESET_ALL = 17,


 REQ_OP_DRV_IN = 34,
 REQ_OP_DRV_OUT = 35,

 REQ_OP_LAST,
};

enum req_flag_bits {
 __REQ_FAILFAST_DEV =
  8,
 __REQ_FAILFAST_TRANSPORT,
 __REQ_FAILFAST_DRIVER,
 __REQ_SYNC,
 __REQ_META,
 __REQ_PRIO,
 __REQ_NOMERGE,
 __REQ_IDLE,
 __REQ_INTEGRITY,
 __REQ_FUA,
 __REQ_PREFLUSH,
 __REQ_RAHEAD,
 __REQ_BACKGROUND,
 __REQ_NOWAIT,







 __REQ_CGROUP_PUNT,


 __REQ_NOUNMAP,

 __REQ_POLLED,


 __REQ_DRV,
 __REQ_SWAP,
 __REQ_NR_BITS,
};
# 445 "./include/linux/blk_types.h"
enum stat_group {
 STAT_READ,
 STAT_WRITE,
 STAT_DISCARD,
 STAT_FLUSH,

 NR_STAT_GROUPS
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_op_attrs(struct bio *bio, unsigned op,
  unsigned op_flags)
{
 bio->bi_opf = op | op_flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_write(unsigned int op)
{
 return (op & 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_flush(unsigned int op)
{
 return op & ((1ULL << __REQ_FUA) | (1ULL << __REQ_PREFLUSH));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_sync(unsigned int op)
{
 return (op & ((1 << 8) - 1)) == REQ_OP_READ ||
  (op & ((1ULL << __REQ_SYNC) | (1ULL << __REQ_FUA) | (1ULL << __REQ_PREFLUSH)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_discard(unsigned int op)
{
 return (op & ((1 << 8) - 1)) == REQ_OP_DISCARD;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_zone_mgmt(enum req_opf op)
{
 switch (op & ((1 << 8) - 1)) {
 case REQ_OP_ZONE_RESET:
 case REQ_OP_ZONE_OPEN:
 case REQ_OP_ZONE_CLOSE:
 case REQ_OP_ZONE_FINISH:
  return true;
 default:
  return false;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int op_stat_group(unsigned int op)
{
 if (op_is_discard(op))
  return STAT_DISCARD;
 return op_is_write(op);
}

struct blk_rq_stat {
 u64 mean;
 u64 min;
 u64 max;
 u32 nr_samples;
 u64 batch;
};
# 14 "./include/linux/writeback.h" 2

struct bio;

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) dirty_throttle_leaks;
# 35 "./include/linux/writeback.h"
struct backing_dev_info;




enum writeback_sync_modes {
 WB_SYNC_NONE,
 WB_SYNC_ALL,
};






struct writeback_control {
 long nr_to_write;

 long pages_skipped;






 loff_t range_start;
 loff_t range_end;

 enum writeback_sync_modes sync_mode;

 unsigned for_kupdate:1;
 unsigned for_background:1;
 unsigned tagged_writepages:1;
 unsigned for_reclaim:1;
 unsigned range_cyclic:1;
 unsigned for_sync:1;







 unsigned no_cgroup_owner:1;

 unsigned punt_to_cgroup:1;


 struct bdi_writeback *wb;
 struct inode *inode;


 int wb_id;
 int wb_lcand_id;
 int wb_tcand_id;
 size_t wb_bytes;
 size_t wb_lcand_bytes;
 size_t wb_tcand_bytes;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int wbc_to_write_flags(struct writeback_control *wbc)
{
 int flags = 0;

 if (wbc->punt_to_cgroup)
  flags = (1ULL << __REQ_CGROUP_PUNT);

 if (wbc->sync_mode == WB_SYNC_ALL)
  flags |= (1ULL << __REQ_SYNC);
 else if (wbc->for_kupdate || wbc->for_background)
  flags |= (1ULL << __REQ_BACKGROUND);

 return flags;
}
# 125 "./include/linux/writeback.h"
struct wb_domain {
 spinlock_t lock;
# 145 "./include/linux/writeback.h"
 struct fprop_global completions;
 struct timer_list period_timer;
 unsigned long period_time;
# 159 "./include/linux/writeback.h"
 unsigned long dirty_limit_tstamp;
 unsigned long dirty_limit;
};
# 175 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_domain_size_changed(struct wb_domain *dom)
{
 spin_lock(&dom->lock);
 dom->dirty_limit_tstamp = jiffies;
 dom->dirty_limit = 0;
 spin_unlock(&dom->lock);
}




struct bdi_writeback;
void writeback_inodes_sb(struct super_block *, enum wb_reason reason);
void writeback_inodes_sb_nr(struct super_block *, unsigned long nr,
       enum wb_reason reason);
void try_to_writeback_inodes_sb(struct super_block *sb, enum wb_reason reason);
void sync_inodes_sb(struct super_block *);
void wakeup_flusher_threads(enum wb_reason reason);
void wakeup_flusher_threads_bdi(struct backing_dev_info *bdi,
    enum wb_reason reason);
void inode_wait_for_writeback(struct inode *inode);
void inode_io_list_del(struct inode *inode);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_on_inode(struct inode *inode)
{
 do { do { } while (0); } while (0);
 wait_on_bit(&inode->i_state, 3, 0x0002);
}




# 1 "./include/linux/bio.h" 1







# 1 "./include/linux/mempool.h" 1
# 11 "./include/linux/mempool.h"
struct kmem_cache;

typedef void * (mempool_alloc_t)(gfp_t gfp_mask, void *pool_data);
typedef void (mempool_free_t)(void *element, void *pool_data);

typedef struct mempool_s {
 spinlock_t lock;
 int min_nr;
 int curr_nr;
 void **elements;

 void *pool_data;
 mempool_alloc_t *alloc;
 mempool_free_t *free;
 wait_queue_head_t wait;
} mempool_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mempool_initialized(mempool_t *pool)
{
 return pool->elements != ((void *)0);
}

void mempool_exit(mempool_t *pool);
int mempool_init_node(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
        mempool_free_t *free_fn, void *pool_data,
        gfp_t gfp_mask, int node_id);
int mempool_init(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data);

extern mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data);
extern mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data,
   gfp_t gfp_mask, int nid);

extern int mempool_resize(mempool_t *pool, int new_min_nr);
extern void mempool_destroy(mempool_t *pool);
extern void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask) __attribute__((__malloc__));
extern void mempool_free(void *element, mempool_t *pool);






void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data);
void mempool_free_slab(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
mempool_init_slab_pool(mempool_t *pool, int min_nr, struct kmem_cache *kc)
{
 return mempool_init(pool, min_nr, mempool_alloc_slab,
       mempool_free_slab, (void *) kc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mempool_t *
mempool_create_slab_pool(int min_nr, struct kmem_cache *kc)
{
 return mempool_create(min_nr, mempool_alloc_slab, mempool_free_slab,
         (void *) kc);
}





void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data);
void mempool_kfree(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mempool_init_kmalloc_pool(mempool_t *pool, int min_nr, size_t size)
{
 return mempool_init(pool, min_nr, mempool_kmalloc,
       mempool_kfree, (void *) size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mempool_t *mempool_create_kmalloc_pool(int min_nr, size_t size)
{
 return mempool_create(min_nr, mempool_kmalloc, mempool_kfree,
         (void *) size);
}





void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data);
void mempool_free_pages(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mempool_init_page_pool(mempool_t *pool, int min_nr, int order)
{
 return mempool_init(pool, min_nr, mempool_alloc_pages,
       mempool_free_pages, (void *)(long)order);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mempool_t *mempool_create_page_pool(int min_nr, int order)
{
 return mempool_create(min_nr, mempool_alloc_pages, mempool_free_pages,
         (void *)(long)order);
}
# 9 "./include/linux/bio.h" 2


# 1 "./include/linux/uio.h" 1
# 10 "./include/linux/uio.h"
# 1 "./include/uapi/linux/uio.h" 1
# 17 "./include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 11 "./include/linux/uio.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum iter_type {

 ITER_IOVEC,
 ITER_KVEC,
 ITER_BVEC,
 ITER_PIPE,
 ITER_XARRAY,
 ITER_DISCARD,
};

struct iov_iter_state {
 size_t iov_offset;
 size_t count;
 unsigned long nr_segs;
};

struct iov_iter {
 u8 iter_type;
 bool nofault;
 bool data_source;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct xarray *xarray;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   unsigned int head;
   unsigned int start_head;
  };
  loff_t xarray_start;
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum iter_type iov_iter_type(const struct iov_iter *i)
{
 return i->iter_type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_save_state(struct iov_iter *iter,
           struct iov_iter_state *state)
{
 state->iov_offset = iter->iov_offset;
 state->count = iter->count;
 state->nr_segs = iter->nr_segs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iter_is_iovec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_IOVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_kvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_KVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_bvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_BVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_pipe(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_PIPE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_discard(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_DISCARD;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_xarray(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_XARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char iov_iter_rw(const struct iov_iter *i)
{
 return i->data_source ? 1 : 0;
}
# 114 "./include/linux/uio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = __builtin_choose_expr(((!!(sizeof((typeof(iter->count) *)1 == (typeof(iter->iov->iov_len - iter->iov_offset) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->count) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->iov->iov_len - iter->iov_offset) * 0l)) : (int *)8))))), ((iter->count) < (iter->iov->iov_len - iter->iov_offset) ? (iter->count) : (iter->iov->iov_len - iter->iov_offset)), ({ typeof(iter->count) __UNIQUE_ID___x357 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID___y358 = (iter->iov->iov_len - iter->iov_offset); ((__UNIQUE_ID___x357) < (__UNIQUE_ID___y358) ? (__UNIQUE_ID___x357) : (__UNIQUE_ID___y358)); })),

 };
}

size_t copy_page_from_iter_atomic(struct page *page, unsigned offset,
      size_t bytes, struct iov_iter *i);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
size_t fault_in_iov_iter_readable(const struct iov_iter *i, size_t bytes);
size_t fault_in_iov_iter_writeable(const struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter_nocache(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
# 214 "./include/linux/uio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_mc_to_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, unsigned int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, unsigned int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, unsigned int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, unsigned int direction, struct pipe_inode_info *pipe,
   size_t count);
void iov_iter_discard(struct iov_iter *i, unsigned int direction, size_t count);
void iov_iter_xarray(struct iov_iter *i, unsigned int direction, struct xarray *xarray,
       loff_t start, size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);
void iov_iter_restore(struct iov_iter *i, struct iov_iter_state *state);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}

struct csum_state {
 __wsum csum;
 size_t off;
};

size_t csum_and_copy_to_iter(const void *addr, size_t bytes, void *csstate, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool csum_and_copy_from_iter_full(void *addr, size_t bytes,
      __wsum *csum, struct iov_iter *i)
{
 size_t copied = csum_and_copy_from_iter(addr, bytes, csum, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
size_t hash_and_copy_to_iter(const void *addr, size_t bytes, void *hashp,
  struct iov_iter *i);

struct iovec *iovec_from_user(const struct iovec *uvector,
  unsigned long nr_segs, unsigned long fast_segs,
  struct iovec *fast_iov, bool compat);
ssize_t import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i);
ssize_t __import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i, bool compat);
int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 12 "./include/linux/bio.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bio_max_segs(unsigned int nr_segs)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(nr_segs) *)1 == (typeof(256U) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(nr_segs) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(256U) * 0l)) : (int *)8))))), ((nr_segs) < (256U) ? (nr_segs) : (256U)), ({ typeof(nr_segs) __UNIQUE_ID___x359 = (nr_segs); typeof(256U) __UNIQUE_ID___y360 = (256U); ((__UNIQUE_ID___x359) < (__UNIQUE_ID___y360) ? (__UNIQUE_ID___x359) : (__UNIQUE_ID___y360)); }));
}
# 52 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_has_data(struct bio *bio)
{
 if (bio &&
     bio->bi_iter.bi_size &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_DISCARD &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_SECURE_ERASE &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_WRITE_ZEROES)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_no_advance_iter(const struct bio *bio)
{
 return ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_DISCARD ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_SECURE_ERASE ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_WRITE_SAME ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_WRITE_ZEROES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bio_data(struct bio *bio)
{
 if (bio_has_data(bio))
  return lowmem_page_address((((&(((((bio))->bi_io_vec)))[(((((bio)->bi_iter)))).bi_idx])->bv_page) + (((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_offset + (((((bio)->bi_iter)))).bi_bvec_done) / ((1UL) << 14)))) + (((&(((((bio))->bi_io_vec)))[(((((bio)->bi_iter)))).bi_idx])->bv_offset + ((((bio)->bi_iter))).bi_bvec_done) % ((1UL) << 14));

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_next_segment(const struct bio *bio,
        struct bvec_iter_all *iter)
{
 if (iter->idx >= bio->bi_vcnt)
  return false;

 bvec_advance(&bio->bi_io_vec[iter->idx], iter);
 return true;
}
# 97 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_advance_iter(const struct bio *bio,
        struct bvec_iter *iter, unsigned int bytes)
{
 iter->bi_sector += bytes >> 9;

 if (bio_no_advance_iter(bio))
  iter->bi_size -= bytes;
 else
  bvec_iter_advance(bio->bi_io_vec, iter, bytes);

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_advance_iter_single(const struct bio *bio,
        struct bvec_iter *iter,
        unsigned int bytes)
{
 iter->bi_sector += bytes >> 9;

 if (bio_no_advance_iter(bio))
  iter->bi_size -= bytes;
 else
  bvec_iter_advance_single(bio->bi_io_vec, iter, bytes);
}

void __bio_advance(struct bio *, unsigned bytes);
# 135 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_advance(struct bio *bio, unsigned int nbytes)
{
 if (nbytes == bio->bi_iter.bi_size) {
  bio->bi_iter.bi_size = 0;
  return;
 }
 __bio_advance(bio, nbytes);
}
# 173 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned bio_segments(struct bio *bio)
{
 unsigned segs = 0;
 struct bio_vec bv;
 struct bvec_iter iter;






 switch (((bio)->bi_opf & ((1 << 8) - 1))) {
 case REQ_OP_DISCARD:
 case REQ_OP_SECURE_ERASE:
 case REQ_OP_WRITE_ZEROES:
  return 0;
 case REQ_OP_WRITE_SAME:
  return 1;
 default:
  break;
 }

 for (iter = ((bio)->bi_iter); (iter).bi_size && ((bv = ((struct bio_vec) { .bv_page = (((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_page) + (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) / ((1UL) << 14))), .bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x361 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y362 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x361) < (__UNIQUE_ID___y362) ? (__UNIQUE_ID___x361) : (__UNIQUE_ID___y362)); })))) *)1 == (typeof((unsigned)(((1UL) << 14) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 14)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x361 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y362 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x361) < (__UNIQUE_ID___y362) ? (__UNIQUE_ID___x361) : (__UNIQUE_ID___y362)); })))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(((1UL) << 14) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 14)))) * 0l)) : (int *)8))))), (((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x361 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y362 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x361) < (__UNIQUE_ID___y362) ? (__UNIQUE_ID___x361) : (__UNIQUE_ID___y362)); })))) < ((unsigned)(((1UL) << 14) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 14)))) ? ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x361 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y362 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x361) < (__UNIQUE_ID___y362) ? (__UNIQUE_ID___x361) : (__UNIQUE_ID___y362)); })))) : ((unsigned)(((1UL) << 14) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 14))))), ({ typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x361 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y362 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x361) < (__UNIQUE_ID___y362) ? (__UNIQUE_ID___x361) : (__UNIQUE_ID___y362)); })))) __UNIQUE_ID___x363 = ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x361 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y362 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x361) < (__UNIQUE_ID___y362) ? (__UNIQUE_ID___x361) : (__UNIQUE_ID___y362)); })))); typeof((unsigned)(((1UL) << 14) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 14)))) __UNIQUE_ID___y364 = ((unsigned)(((1UL) << 14) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 14)))); ((__UNIQUE_ID___x363) < (__UNIQUE_ID___y364) ? (__UNIQUE_ID___x363) : (__UNIQUE_ID___y364)); })), .bv_offset = (((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_offset + (((((iter))))).bi_bvec_done) % ((1UL) << 14)), })), 1); bio_advance_iter_single((bio), &(iter), (bv).bv_len))
  segs++;

 return segs;
}
# 215 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_get(struct bio *bio)
{
 bio->bi_flags |= (1 << BIO_REFFED);
                        ;
 atomic_inc(&bio->__bi_cnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_cnt_set(struct bio *bio, unsigned int count)
{
 if (count != 1) {
  bio->bi_flags |= (1 << BIO_REFFED);
  __sync();
 }
 atomic_set(&bio->__bi_cnt, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_flagged(struct bio *bio, unsigned int bit)
{
 return (bio->bi_flags & (1U << bit)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_flag(struct bio *bio, unsigned int bit)
{
 bio->bi_flags |= (1U << bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_clear_flag(struct bio *bio, unsigned int bit)
{
 bio->bi_flags &= ~(1U << bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bio_first_bvec_all(struct bio *bio)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(bio_flagged(bio, BIO_CLONED)); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/bio.h", 248, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 return bio->bi_io_vec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *bio_first_page_all(struct bio *bio)
{
 return bio_first_bvec_all(bio)->bv_page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bio_last_bvec_all(struct bio *bio)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(bio_flagged(bio, BIO_CLONED)); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/bio.h", 259, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 return &bio->bi_io_vec[bio->bi_vcnt - 1];
}

enum bip_flags {
 BIP_BLOCK_INTEGRITY = 1 << 0,
 BIP_MAPPED_INTEGRITY = 1 << 1,
 BIP_CTRL_NOCHECK = 1 << 2,
 BIP_DISK_NOCHECK = 1 << 3,
 BIP_IP_CHECKSUM = 1 << 4,
};




struct bio_integrity_payload {
 struct bio *bip_bio;

 struct bvec_iter bip_iter;

 unsigned short bip_vcnt;
 unsigned short bip_max_vcnt;
 unsigned short bip_flags;

 struct bvec_iter bio_iter;

 struct work_struct bip_work;

 struct bio_vec *bip_vec;
 struct bio_vec bip_inline_vecs[];
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_integrity_payload *bio_integrity(struct bio *bio)
{
 if (bio->bi_opf & (1ULL << __REQ_INTEGRITY))
  return bio->bi_integrity;

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_integrity_flagged(struct bio *bio, enum bip_flags flag)
{
 struct bio_integrity_payload *bip = bio_integrity(bio);

 if (bip)
  return bip->bip_flags & flag;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t bip_get_seed(struct bio_integrity_payload *bip)
{
 return bip->bip_iter.bi_sector;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bip_set_seed(struct bio_integrity_payload *bip,
    sector_t seed)
{
 bip->bip_iter.bi_sector = seed;
}



void bio_trim(struct bio *bio, sector_t offset, sector_t size);
extern struct bio *bio_split(struct bio *bio, int sectors,
        gfp_t gfp, struct bio_set *bs);
# 338 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_next_split(struct bio *bio, int sectors,
      gfp_t gfp, struct bio_set *bs)
{
 if (sectors >= (((bio)->bi_iter).bi_size >> 9))
  return bio;

 return bio_split(bio, sectors, gfp, bs);
}

enum {
 BIOSET_NEED_BVECS = ((((1UL))) << (0)),
 BIOSET_NEED_RESCUER = ((((1UL))) << (1)),
 BIOSET_PERCPU_CACHE = ((((1UL))) << (2)),
};
extern int bioset_init(struct bio_set *, unsigned int, unsigned int, int flags);
extern void bioset_exit(struct bio_set *);
extern int biovec_init_pool(mempool_t *pool, int pool_entries);
extern int bioset_init_from_src(struct bio_set *bs, struct bio_set *src);

struct bio *bio_alloc_bioset(gfp_t gfp, unsigned short nr_iovecs,
  struct bio_set *bs);
struct bio *bio_alloc_kiocb(struct kiocb *kiocb, unsigned short nr_vecs,
  struct bio_set *bs);
struct bio *bio_kmalloc(gfp_t gfp_mask, unsigned short nr_iovecs);
extern void bio_put(struct bio *);

extern void __bio_clone_fast(struct bio *, struct bio *);
extern struct bio *bio_clone_fast(struct bio *, gfp_t, struct bio_set *);

extern struct bio_set fs_bio_set;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_alloc(gfp_t gfp_mask, unsigned short nr_iovecs)
{
 return bio_alloc_bioset(gfp_mask, nr_iovecs, &fs_bio_set);
}

void submit_bio(struct bio *bio);

extern void bio_endio(struct bio *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_io_error(struct bio *bio)
{
 bio->bi_status = (( blk_status_t)10);
 bio_endio(bio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_wouldblock_error(struct bio *bio)
{
 bio_set_flag(bio, BIO_QUIET);
 bio->bi_status = (( blk_status_t)12);
 bio_endio(bio);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bio_iov_vecs_to_alloc(struct iov_iter *iter, int max_segs)
{
 if (iov_iter_is_bvec(iter))
  return 0;
 return iov_iter_npages(iter, max_segs);
}

struct request_queue;

extern int submit_bio_wait(struct bio *bio);
extern void bio_init(struct bio *bio, struct bio_vec *table,
       unsigned short max_vecs);
extern void bio_uninit(struct bio *);
extern void bio_reset(struct bio *);
void bio_chain(struct bio *, struct bio *);

extern int bio_add_page(struct bio *, struct page *, unsigned int,unsigned int);
extern int bio_add_pc_page(struct request_queue *, struct bio *, struct page *,
      unsigned int, unsigned int);
int bio_add_zone_append_page(struct bio *bio, struct page *page,
        unsigned int len, unsigned int offset);
void __bio_add_page(struct bio *bio, struct page *page,
  unsigned int len, unsigned int off);
int bio_iov_iter_get_pages(struct bio *bio, struct iov_iter *iter);
void bio_iov_bvec_set(struct bio *bio, struct iov_iter *iter);
void __bio_release_pages(struct bio *bio, bool mark_dirty);
extern void bio_set_pages_dirty(struct bio *bio);
extern void bio_check_pages_dirty(struct bio *bio);

extern void bio_copy_data_iter(struct bio *dst, struct bvec_iter *dst_iter,
          struct bio *src, struct bvec_iter *src_iter);
extern void bio_copy_data(struct bio *dst, struct bio *src);
extern void bio_free_pages(struct bio *bio);
void guard_bio_eod(struct bio *bio);
void zero_fill_bio(struct bio *bio);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_release_pages(struct bio *bio, bool mark_dirty)
{
 if (!bio_flagged(bio, BIO_NO_PAGE_REF))
  __bio_release_pages(bio, mark_dirty);
}

extern const char *bio_devname(struct bio *bio, char *buffer);





void bio_associate_blkg(struct bio *bio);
void bio_associate_blkg_from_css(struct bio *bio,
     struct cgroup_subsys_state *css);
void bio_clone_blkg_association(struct bio *dst, struct bio *src);
# 457 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_dev(struct bio *bio, struct block_device *bdev)
{
 bio_clear_flag(bio, BIO_REMAPPED);
 if (bio->bi_bdev != bdev)
  bio_clear_flag(bio, BIO_THROTTLED);
 bio->bi_bdev = bdev;
 bio_associate_blkg(bio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_copy_dev(struct bio *dst, struct bio *src)
{
 bio_clear_flag(dst, BIO_REMAPPED);
 dst->bi_bdev = src->bi_bdev;
 bio_clone_blkg_association(dst, src);
}
# 480 "./include/linux/bio.h"
struct bio_list {
 struct bio *head;
 struct bio *tail;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bio_list_empty(const struct bio_list *bl)
{
 return bl->head == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_init(struct bio_list *bl)
{
 bl->head = bl->tail = ((void *)0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned bio_list_size(const struct bio_list *bl)
{
 unsigned sz = 0;
 struct bio *bio;

 for (bio = (bl)->head; bio; bio = bio->bi_next)
  sz++;

 return sz;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_add(struct bio_list *bl, struct bio *bio)
{
 bio->bi_next = ((void *)0);

 if (bl->tail)
  bl->tail->bi_next = bio;
 else
  bl->head = bio;

 bl->tail = bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_add_head(struct bio_list *bl, struct bio *bio)
{
 bio->bi_next = bl->head;

 bl->head = bio;

 if (!bl->tail)
  bl->tail = bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_merge(struct bio_list *bl, struct bio_list *bl2)
{
 if (!bl2->head)
  return;

 if (bl->tail)
  bl->tail->bi_next = bl2->head;
 else
  bl->head = bl2->head;

 bl->tail = bl2->tail;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_merge_head(struct bio_list *bl,
           struct bio_list *bl2)
{
 if (!bl2->head)
  return;

 if (bl->head)
  bl2->tail->bi_next = bl->head;
 else
  bl->tail = bl2->tail;

 bl->head = bl2->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_list_peek(struct bio_list *bl)
{
 return bl->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_list_pop(struct bio_list *bl)
{
 struct bio *bio = bl->head;

 if (bio) {
  bl->head = bl->head->bi_next;
  if (!bl->head)
   bl->tail = ((void *)0);

  bio->bi_next = ((void *)0);
 }

 return bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_list_get(struct bio_list *bl)
{
 struct bio *bio = bl->head;

 bl->head = bl->tail = ((void *)0);

 return bio;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_inc_remaining(struct bio *bio)
{
 bio_set_flag(bio, BIO_CHAIN);
                        ;
 atomic_inc(&bio->__bi_remaining);
}
# 608 "./include/linux/bio.h"
struct bio_set {
 struct kmem_cache *bio_slab;
 unsigned int front_pad;




 struct bio_alloc_cache *cache;

 mempool_t bio_pool;
 mempool_t bvec_pool;

 mempool_t bio_integrity_pool;
 mempool_t bvec_integrity_pool;


 unsigned int back_pad;




 spinlock_t rescue_lock;
 struct bio_list rescue_list;
 struct work_struct rescue_work;
 struct workqueue_struct *rescue_workqueue;




 struct hlist_node cpuhp_dead;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bioset_initialized(struct bio_set *bs)
{
 return bs->bio_slab != ((void *)0);
}
# 654 "./include/linux/bio.h"
extern struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);
extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);
extern bool bio_integrity_prep(struct bio *);
extern void bio_integrity_advance(struct bio *, unsigned int);
extern void bio_integrity_trim(struct bio *);
extern int bio_integrity_clone(struct bio *, struct bio *, gfp_t);
extern int bioset_integrity_create(struct bio_set *, int);
extern void bioset_integrity_free(struct bio_set *);
extern void bio_integrity_init(void);
# 734 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_polled(struct bio *bio, struct kiocb *kiocb)
{
 bio->bi_opf |= (1ULL << __REQ_POLLED);
 if (!is_sync_kiocb(kiocb))
  bio->bi_opf |= (1ULL << __REQ_NOWAIT);
}

struct bio *blk_next_bio(struct bio *bio, unsigned int nr_pages, gfp_t gfp);
# 209 "./include/linux/writeback.h" 2

void __inode_attach_wb(struct inode *inode, struct page *page);
void wbc_attach_and_unlock_inode(struct writeback_control *wbc,
     struct inode *inode)
                           ;
void wbc_detach_inode(struct writeback_control *wbc);
void wbc_account_cgroup_owner(struct writeback_control *wbc, struct page *page,
         size_t bytes);
int cgroup_writeback_by_id(u64 bdi_id, int memcg_id,
      enum wb_reason reason, struct wb_completion *done);
void cgroup_writeback_umount(void);
bool cleanup_offline_cgwb(struct bdi_writeback *wb);
# 231 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_attach_wb(struct inode *inode, struct page *page)
{
 if (!inode->i_wb)
  __inode_attach_wb(inode, page);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_detach_wb(struct inode *inode)
{
 if (inode->i_wb) {
  ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!(inode->i_state & (1 << 6))); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/writeback.h", 246, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
  wb_put(inode->i_wb);
  inode->i_wb = ((void *)0);
 }
}
# 261 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_attach_fdatawrite_inode(struct writeback_control *wbc,
            struct inode *inode)
{
 spin_lock(&inode->i_lock);
 inode_attach_wb(inode, ((void *)0));
 wbc_attach_and_unlock_inode(wbc, inode);
}
# 279 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_init_bio(struct writeback_control *wbc, struct bio *bio)
{






 if (wbc->wb)
  bio_associate_blkg_from_css(bio, wbc->wb->blkcg_css);
}
# 335 "./include/linux/writeback.h"
void laptop_io_completion(struct backing_dev_info *info);
void laptop_sync_completion(void);
void laptop_mode_timer_fn(struct timer_list *t);
bool node_dirty_ok(struct pglist_data *pgdat);
int wb_domain_init(struct wb_domain *dom, gfp_t gfp);

void wb_domain_exit(struct wb_domain *dom);


extern struct wb_domain global_wb_domain;


extern int dirty_background_ratio;
extern unsigned long dirty_background_bytes;
extern int vm_dirty_ratio;
extern unsigned long vm_dirty_bytes;
extern unsigned int dirty_writeback_interval;
extern unsigned int dirty_expire_interval;
extern unsigned int dirtytime_expire_interval;
extern int vm_highmem_is_dirtyable;
extern int laptop_mode;

int dirty_background_ratio_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_background_bytes_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_ratio_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_bytes_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirtytime_interval_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_writeback_centisecs_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);

void global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty);
unsigned long wb_calc_thresh(struct bdi_writeback *wb, unsigned long thresh);

void wb_update_bandwidth(struct bdi_writeback *wb);
void balance_dirty_pages_ratelimited(struct address_space *mapping);
bool wb_over_bg_thresh(struct bdi_writeback *wb);

typedef int (*writepage_t)(struct page *page, struct writeback_control *wbc,
    void *data);

int generic_writepages(struct address_space *mapping,
         struct writeback_control *wbc);
void tag_pages_for_writeback(struct address_space *mapping,
        unsigned long start, unsigned long end);
int write_cache_pages(struct address_space *mapping,
        struct writeback_control *wbc, writepage_t writepage,
        void *data);
int do_writepages(struct address_space *mapping, struct writeback_control *wbc);
void writeback_set_ratelimit(void);
void tag_pages_for_writeback(struct address_space *mapping,
        unsigned long start, unsigned long end);

bool filemap_dirty_folio(struct address_space *mapping, struct folio *folio);
void folio_account_redirty(struct folio *folio);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_page_redirty(struct page *page)
{
 folio_account_redirty((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
bool folio_redirty_for_writepage(struct writeback_control *, struct folio *);
bool redirty_page_for_writepage(struct writeback_control *, struct page *);

void sb_mark_inode_writeback(struct inode *inode);
void sb_clear_inode_writeback(struct inode *inode);
# 23 "./include/linux/memcontrol.h" 2


struct mem_cgroup;
struct obj_cgroup;
struct page;
struct mm_struct;
struct kmem_cache;


enum memcg_stat_item {
 MEMCG_SWAP = NR_VM_NODE_STAT_ITEMS,
 MEMCG_SOCK,
 MEMCG_PERCPU_B,
 MEMCG_NR_STAT,
};

enum memcg_memory_event {
 MEMCG_LOW,
 MEMCG_HIGH,
 MEMCG_MAX,
 MEMCG_OOM,
 MEMCG_OOM_KILL,
 MEMCG_SWAP_HIGH,
 MEMCG_SWAP_MAX,
 MEMCG_SWAP_FAIL,
 MEMCG_NR_MEMORY_EVENTS,
};

struct mem_cgroup_reclaim_cookie {
 pg_data_t *pgdat;
 unsigned int generation;
};






struct mem_cgroup_id {
 int id;
 refcount_t ref;
};







enum mem_cgroup_events_target {
 MEM_CGROUP_TARGET_THRESH,
 MEM_CGROUP_TARGET_SOFTLIMIT,
 MEM_CGROUP_NTARGETS,
};

struct memcg_vmstats_percpu {

 long state[MEMCG_NR_STAT];
 unsigned long events[NR_VM_EVENT_ITEMS];


 long state_prev[MEMCG_NR_STAT];
 unsigned long events_prev[NR_VM_EVENT_ITEMS];


 unsigned long nr_page_events;
 unsigned long targets[MEM_CGROUP_NTARGETS];
};

struct memcg_vmstats {

 long state[MEMCG_NR_STAT];
 unsigned long events[NR_VM_EVENT_ITEMS];


 long state_pending[MEMCG_NR_STAT];
 unsigned long events_pending[NR_VM_EVENT_ITEMS];
};

struct mem_cgroup_reclaim_iter {
 struct mem_cgroup *position;

 unsigned int generation;
};





struct shrinker_info {
 struct callback_head rcu;
 atomic_long_t *nr_deferred;
 unsigned long *map;
};

struct lruvec_stats_percpu {

 long state[NR_VM_NODE_STAT_ITEMS];


 long state_prev[NR_VM_NODE_STAT_ITEMS];
};

struct lruvec_stats {

 long state[NR_VM_NODE_STAT_ITEMS];


 long state_pending[NR_VM_NODE_STAT_ITEMS];
};




struct mem_cgroup_per_node {
 struct lruvec lruvec;

 struct lruvec_stats_percpu *lruvec_stats_percpu;
 struct lruvec_stats lruvec_stats;

 unsigned long lru_zone_size[3][NR_LRU_LISTS];

 struct mem_cgroup_reclaim_iter iter;

 struct shrinker_info *shrinker_info;

 struct rb_node tree_node;
 unsigned long usage_in_excess;

 bool on_tree;
 struct mem_cgroup *memcg;

};

struct mem_cgroup_threshold {
 struct eventfd_ctx *eventfd;
 unsigned long threshold;
};


struct mem_cgroup_threshold_ary {

 int current_threshold;

 unsigned int size;

 struct mem_cgroup_threshold entries[];
};

struct mem_cgroup_thresholds {

 struct mem_cgroup_threshold_ary *primary;





 struct mem_cgroup_threshold_ary *spare;
};


struct memcg_padding {
 char x[0];
} __attribute__((__aligned__(1 << (6))));
# 202 "./include/linux/memcontrol.h"
struct memcg_cgwb_frn {
 u64 bdi_id;
 int memcg_id;
 u64 at;
 struct wb_completion done;
};







struct obj_cgroup {
 struct percpu_ref refcnt;
 struct mem_cgroup *memcg;
 atomic_t nr_charged_bytes;
 union {
  struct list_head list;
  struct callback_head rcu;
 };
};







struct mem_cgroup {
 struct cgroup_subsys_state css;


 struct mem_cgroup_id id;


 struct page_counter memory;

 union {
  struct page_counter swap;
  struct page_counter memsw;
 };


 struct page_counter kmem;
 struct page_counter tcpmem;


 struct work_struct high_work;

 unsigned long soft_limit;


 struct vmpressure vmpressure;




 bool oom_group;


 bool oom_lock;
 int under_oom;

 int swappiness;

 int oom_kill_disable;


 struct cgroup_file events_file;
 struct cgroup_file events_local_file;


 struct cgroup_file swap_events_file;


 struct mutex thresholds_lock;


 struct mem_cgroup_thresholds thresholds;


 struct mem_cgroup_thresholds memsw_thresholds;


 struct list_head oom_notify;





 unsigned long move_charge_at_immigrate;

 spinlock_t move_lock;
 unsigned long move_lock_flags;

 struct memcg_padding _pad1_;


 struct memcg_vmstats vmstats;


 atomic_long_t memory_events[MEMCG_NR_MEMORY_EVENTS];
 atomic_long_t memory_events_local[MEMCG_NR_MEMORY_EVENTS];

 unsigned long socket_pressure;


 bool tcpmem_active;
 int tcpmem_pressure;


 int kmemcg_id;
 struct obj_cgroup *objcg;
 struct list_head objcg_list;


 struct memcg_padding _pad2_;




 atomic_t moving_account;
 struct task_struct *move_lock_task;

 struct memcg_vmstats_percpu *vmstats_percpu;


 struct list_head cgwb_list;
 struct wb_domain cgwb_domain;
 struct memcg_cgwb_frn cgwb_frn[4];



 struct list_head event_list;
 spinlock_t event_list_lock;





 struct mem_cgroup_per_node *nodeinfo[];
};







extern struct mem_cgroup *root_mem_cgroup;

enum page_memcg_data_flags {

 MEMCG_DATA_OBJCGS = (1UL << 0),

 MEMCG_DATA_KMEM = (1UL << 1),

 __NR_MEMCG_DATA_FLAGS = (1UL << 2),
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_memcg_kmem(struct folio *folio);
# 374 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *obj_cgroup_memcg(struct obj_cgroup *objcg)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_365(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(objcg->memcg) == sizeof(char) || sizeof(objcg->memcg) == sizeof(short) || sizeof(objcg->memcg) == sizeof(int) || sizeof(objcg->memcg) == sizeof(long)) || sizeof(objcg->memcg) == sizeof(long long))) __compiletime_assert_365(); } while (0); (*(const volatile typeof( _Generic((objcg->memcg), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (objcg->memcg))) *)&(objcg->memcg)); });
}
# 389 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *__folio_memcg(struct folio *folio)
{
 unsigned long memcg_data = folio->memcg_data;

 ((void)(sizeof(( long)(folio_test_slab(folio)))));
 ((void)(sizeof(( long)(memcg_data & MEMCG_DATA_OBJCGS))));
 ((void)(sizeof(( long)(memcg_data & MEMCG_DATA_KMEM))));

 return (struct mem_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 410 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct obj_cgroup *__folio_objcg(struct folio *folio)
{
 unsigned long memcg_data = folio->memcg_data;

 ((void)(sizeof(( long)(folio_test_slab(folio)))));
 ((void)(sizeof(( long)(memcg_data & MEMCG_DATA_OBJCGS))));
 ((void)(sizeof(( long)(!(memcg_data & MEMCG_DATA_KMEM)))));

 return (struct obj_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 441 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *folio_memcg(struct folio *folio)
{
 if (folio_memcg_kmem(folio))
  return obj_cgroup_memcg(__folio_objcg(folio));
 return __folio_memcg(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg(struct page *page)
{
 return folio_memcg((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
# 464 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *folio_memcg_rcu(struct folio *folio)
{
 unsigned long memcg_data = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_366(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(folio->memcg_data) == sizeof(char) || sizeof(folio->memcg_data) == sizeof(short) || sizeof(folio->memcg_data) == sizeof(int) || sizeof(folio->memcg_data) == sizeof(long)) || sizeof(folio->memcg_data) == sizeof(long long))) __compiletime_assert_366(); } while (0); (*(const volatile typeof( _Generic((folio->memcg_data), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (folio->memcg_data))) *)&(folio->memcg_data)); });

 ((void)(sizeof(( long)(folio_test_slab(folio)))));
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!rcu_read_lock_held()); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/memcontrol.h", 469, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });

 if (memcg_data & MEMCG_DATA_KMEM) {
  struct obj_cgroup *objcg;

  objcg = (void *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
  return obj_cgroup_memcg(objcg);
 }

 return (struct mem_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 502 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg_check(struct page *page)
{




 unsigned long memcg_data = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_367(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->memcg_data) == sizeof(char) || sizeof(page->memcg_data) == sizeof(short) || sizeof(page->memcg_data) == sizeof(int) || sizeof(page->memcg_data) == sizeof(long)) || sizeof(page->memcg_data) == sizeof(long long))) __compiletime_assert_367(); } while (0); (*(const volatile typeof( _Generic((page->memcg_data), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->memcg_data))) *)&(page->memcg_data)); });

 if (memcg_data & MEMCG_DATA_OBJCGS)
  return ((void *)0);

 if (memcg_data & MEMCG_DATA_KMEM) {
  struct obj_cgroup *objcg;

  objcg = (void *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
  return obj_cgroup_memcg(objcg);
 }

 return (struct mem_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 532 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_memcg_kmem(struct folio *folio)
{
 ((void)(sizeof(( long)(PageTail(&folio->page)))));
 ((void)(sizeof(( long)(folio->memcg_data & MEMCG_DATA_OBJCGS))));
 return folio->memcg_data & MEMCG_DATA_KMEM;
}
# 549 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct obj_cgroup **page_objcgs(struct page *page)
{
 unsigned long memcg_data = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_368(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->memcg_data) == sizeof(char) || sizeof(page->memcg_data) == sizeof(short) || sizeof(page->memcg_data) == sizeof(int) || sizeof(page->memcg_data) == sizeof(long)) || sizeof(page->memcg_data) == sizeof(long long))) __compiletime_assert_368(); } while (0); (*(const volatile typeof( _Generic((page->memcg_data), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->memcg_data))) *)&(page->memcg_data)); });

 ((void)(sizeof(( long)(memcg_data && !(memcg_data & MEMCG_DATA_OBJCGS)))));
 ((void)(sizeof(( long)(memcg_data & MEMCG_DATA_KMEM))));

 return (struct obj_cgroup **)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 567 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct obj_cgroup **page_objcgs_check(struct page *page)
{
 unsigned long memcg_data = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_369(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->memcg_data) == sizeof(char) || sizeof(page->memcg_data) == sizeof(short) || sizeof(page->memcg_data) == sizeof(int) || sizeof(page->memcg_data) == sizeof(long)) || sizeof(page->memcg_data) == sizeof(long long))) __compiletime_assert_369(); } while (0); (*(const volatile typeof( _Generic((page->memcg_data), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->memcg_data))) *)&(page->memcg_data)); });

 if (!memcg_data || !(memcg_data & MEMCG_DATA_OBJCGS))
  return ((void *)0);

 ((void)(sizeof(( long)(memcg_data & MEMCG_DATA_KMEM))));

 return (struct obj_cgroup **)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 596 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool PageMemcgKmem(struct page *page)
{
 return folio_memcg_kmem((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_is_root(struct mem_cgroup *memcg)
{
 return (memcg == root_mem_cgroup);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_disabled(void)
{
 return !__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_enabled_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_enabled_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_enabled_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_enabled_key)->key) > 0; })), 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_protection(struct mem_cgroup *root,
      struct mem_cgroup *memcg,
      unsigned long *min,
      unsigned long *low)
{
 *min = *low = 0;

 if (mem_cgroup_disabled())
  return;
# 654 "./include/linux/memcontrol.h"
 if (root == memcg)
  return;

 *min = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_370(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.emin) == sizeof(char) || sizeof(memcg->memory.emin) == sizeof(short) || sizeof(memcg->memory.emin) == sizeof(int) || sizeof(memcg->memory.emin) == sizeof(long)) || sizeof(memcg->memory.emin) == sizeof(long long))) __compiletime_assert_370(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.emin), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.emin))) *)&(memcg->memory.emin)); });
 *low = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_371(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.elow) == sizeof(char) || sizeof(memcg->memory.elow) == sizeof(short) || sizeof(memcg->memory.elow) == sizeof(int) || sizeof(memcg->memory.elow) == sizeof(long)) || sizeof(memcg->memory.elow) == sizeof(long long))) __compiletime_assert_371(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.elow), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.elow))) *)&(memcg->memory.elow)); });
}

void mem_cgroup_calculate_protection(struct mem_cgroup *root,
         struct mem_cgroup *memcg);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_supports_protection(struct mem_cgroup *memcg)
{




 return !mem_cgroup_disabled() && !mem_cgroup_is_root(memcg);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_below_low(struct mem_cgroup *memcg)
{
 if (!mem_cgroup_supports_protection(memcg))
  return false;

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_372(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.elow) == sizeof(char) || sizeof(memcg->memory.elow) == sizeof(short) || sizeof(memcg->memory.elow) == sizeof(int) || sizeof(memcg->memory.elow) == sizeof(long)) || sizeof(memcg->memory.elow) == sizeof(long long))) __compiletime_assert_372(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.elow), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.elow))) *)&(memcg->memory.elow)); }) >=
  page_counter_read(&memcg->memory);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_below_min(struct mem_cgroup *memcg)
{
 if (!mem_cgroup_supports_protection(memcg))
  return false;

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_373(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.emin) == sizeof(char) || sizeof(memcg->memory.emin) == sizeof(short) || sizeof(memcg->memory.emin) == sizeof(int) || sizeof(memcg->memory.emin) == sizeof(long)) || sizeof(memcg->memory.emin) == sizeof(long long))) __compiletime_assert_373(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.emin), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.emin))) *)&(memcg->memory.emin)); }) >=
  page_counter_read(&memcg->memory);
}

int __mem_cgroup_charge(struct folio *folio, struct mm_struct *mm, gfp_t gfp);
# 708 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_charge(struct folio *folio, struct mm_struct *mm,
        gfp_t gfp)
{
 if (mem_cgroup_disabled())
  return 0;
 return __mem_cgroup_charge(folio, mm, gfp);
}

int mem_cgroup_swapin_charge_page(struct page *page, struct mm_struct *mm,
      gfp_t gfp, swp_entry_t entry);
void mem_cgroup_swapin_uncharge_swap(swp_entry_t entry);

void __mem_cgroup_uncharge(struct folio *folio);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_uncharge(struct folio *folio)
{
 if (mem_cgroup_disabled())
  return;
 __mem_cgroup_uncharge(folio);
}

void __mem_cgroup_uncharge_list(struct list_head *page_list);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_uncharge_list(struct list_head *page_list)
{
 if (mem_cgroup_disabled())
  return;
 __mem_cgroup_uncharge_list(page_list);
}

void mem_cgroup_migrate(struct folio *old, struct folio *new);
# 754 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *mem_cgroup_lruvec(struct mem_cgroup *memcg,
            struct pglist_data *pgdat)
{
 struct mem_cgroup_per_node *mz;
 struct lruvec *lruvec;

 if (mem_cgroup_disabled()) {
  lruvec = &pgdat->__lruvec;
  goto out;
 }

 if (!memcg)
  memcg = root_mem_cgroup;

 mz = memcg->nodeinfo[pgdat->node_id];
 lruvec = &mz->lruvec;
out:





 if (__builtin_expect(!!(lruvec->pgdat != pgdat), 0))
  lruvec->pgdat = pgdat;
 return lruvec;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *folio_lruvec(struct folio *folio)
{
 struct mem_cgroup *memcg = folio_memcg(folio);

 ((void)(sizeof(( long)(!memcg && !mem_cgroup_disabled()))));
 return mem_cgroup_lruvec(memcg, folio_pgdat(folio));
}

struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p);

struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *mm);

struct lruvec *folio_lruvec_lock(struct folio *folio);
struct lruvec *folio_lruvec_lock_irq(struct folio *folio);
struct lruvec *folio_lruvec_lock_irqsave(struct folio *folio,
      unsigned long *flags);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void lruvec_memcg_debug(struct lruvec *lruvec, struct folio *folio)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *css){
 return css ? ({ void *__mptr = (void *)(css); _Static_assert(__builtin_types_compatible_p(typeof(*(css)), typeof(((struct mem_cgroup *)0)->css)) || __builtin_types_compatible_p(typeof(*(css)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup *)(__mptr - __builtin_offsetof(struct mem_cgroup, css))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool obj_cgroup_tryget(struct obj_cgroup *objcg)
{
 return percpu_ref_tryget(&objcg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void obj_cgroup_get(struct obj_cgroup *objcg)
{
 percpu_ref_get(&objcg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void obj_cgroup_get_many(struct obj_cgroup *objcg,
           unsigned long nr)
{
 percpu_ref_get_many(&objcg->refcnt, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void obj_cgroup_put(struct obj_cgroup *objcg)
{
 percpu_ref_put(&objcg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_put(struct mem_cgroup *memcg)
{
 if (memcg)
  css_put(&memcg->css);
}




struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *,
       struct mem_cgroup *,
       struct mem_cgroup_reclaim_cookie *);
void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);
int mem_cgroup_scan_tasks(struct mem_cgroup *,
     int (*)(struct task_struct *, void *), void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short mem_cgroup_id(struct mem_cgroup *memcg)
{
 if (mem_cgroup_disabled())
  return 0;

 return memcg->id.id;
}
struct mem_cgroup *mem_cgroup_from_id(unsigned short id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *mem_cgroup_from_seq(struct seq_file *m)
{
 return mem_cgroup_from_css(seq_css(m));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *lruvec_memcg(struct lruvec *lruvec)
{
 struct mem_cgroup_per_node *mz;

 if (mem_cgroup_disabled())
  return ((void *)0);

 mz = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 return mz->memcg;
}
# 887 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg)
{
 if (!memcg->memory.parent)
  return ((void *)0);
 return ({ void *__mptr = (void *)(memcg->memory.parent); _Static_assert(__builtin_types_compatible_p(typeof(*(memcg->memory.parent)), typeof(((struct mem_cgroup *)0)->memory)) || __builtin_types_compatible_p(typeof(*(memcg->memory.parent)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup *)(__mptr - __builtin_offsetof(struct mem_cgroup, memory))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_is_descendant(struct mem_cgroup *memcg,
         struct mem_cgroup *root)
{
 if (root == memcg)
  return true;
 return cgroup_is_descendant(memcg->css.cgroup, root->css.cgroup);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_match_cgroup(struct mm_struct *mm,
       struct mem_cgroup *memcg)
{
 struct mem_cgroup *task_memcg;
 bool match = false;

 rcu_read_lock();
 task_memcg = mem_cgroup_from_task(({ typeof(*(mm->owner)) *________p1 = (typeof(*(mm->owner)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_374(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mm->owner)) == sizeof(char) || sizeof((mm->owner)) == sizeof(short) || sizeof((mm->owner)) == sizeof(int) || sizeof((mm->owner)) == sizeof(long)) || sizeof((mm->owner)) == sizeof(long long))) __compiletime_assert_374(); } while (0); (*(const volatile typeof( _Generic(((mm->owner)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mm->owner)))) *)&((mm->owner))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(mm->owner)) *)(________p1)); }));
 if (task_memcg)
  match = mem_cgroup_is_descendant(task_memcg, memcg);
 rcu_read_unlock();
 return match;
}

struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *page);
ino_t page_cgroup_ino(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_online(struct mem_cgroup *memcg)
{
 if (mem_cgroup_disabled())
  return true;
 return !!(memcg->css.flags & CSS_ONLINE);
}

void mem_cgroup_update_lru_size(struct lruvec *lruvec, enum lru_list lru,
  int zid, int nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long mem_cgroup_get_zone_lru_size(struct lruvec *lruvec,
  enum lru_list lru, int zone_idx)
{
 struct mem_cgroup_per_node *mz;

 mz = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_375(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(char) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(short) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(int) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(long)) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(long long))) __compiletime_assert_375(); } while (0); (*(const volatile typeof( _Generic((mz->lru_zone_size[zone_idx][lru]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (mz->lru_zone_size[zone_idx][lru]))) *)&(mz->lru_zone_size[zone_idx][lru])); });
}

void mem_cgroup_handle_over_high(void);

unsigned long mem_cgroup_get_max(struct mem_cgroup *memcg);

unsigned long mem_cgroup_size(struct mem_cgroup *memcg);

void mem_cgroup_print_oom_context(struct mem_cgroup *memcg,
    struct task_struct *p);

void mem_cgroup_print_oom_meminfo(struct mem_cgroup *memcg);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_enter_user_fault(void)
{
 ({ int __ret_warn_on = !!((current_thread_info()->task)->in_user_fault); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/memcontrol.h", 952, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 (current_thread_info()->task)->in_user_fault = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_exit_user_fault(void)
{
 ({ int __ret_warn_on = !!(!(current_thread_info()->task)->in_user_fault); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/memcontrol.h", 958, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 (current_thread_info()->task)->in_user_fault = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_in_memcg_oom(struct task_struct *p)
{
 return p->memcg_in_oom;
}

bool mem_cgroup_oom_synchronize(bool wait);
struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *victim,
         struct mem_cgroup *oom_domain);
void mem_cgroup_print_oom_group(struct mem_cgroup *memcg);


extern bool cgroup_memory_noswap;


void folio_memcg_lock(struct folio *folio);
void folio_memcg_unlock(struct folio *folio);
void lock_page_memcg(struct page *page);
void unlock_page_memcg(struct page *page);

void __mod_memcg_state(struct mem_cgroup *memcg, int idx, int val);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_memcg_state(struct mem_cgroup *memcg,
       int idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_memcg_state(memcg, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memcg_page_state(struct mem_cgroup *memcg, int idx)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_376(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->vmstats.state[idx]) == sizeof(char) || sizeof(memcg->vmstats.state[idx]) == sizeof(short) || sizeof(memcg->vmstats.state[idx]) == sizeof(int) || sizeof(memcg->vmstats.state[idx]) == sizeof(long)) || sizeof(memcg->vmstats.state[idx]) == sizeof(long long))) __compiletime_assert_376(); } while (0); (*(const volatile typeof( _Generic((memcg->vmstats.state[idx]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->vmstats.state[idx]))) *)&(memcg->vmstats.state[idx])); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long lruvec_page_state(struct lruvec *lruvec,
           enum node_stat_item idx)
{
 struct mem_cgroup_per_node *pn;

 if (mem_cgroup_disabled())
  return node_page_state(lruvec_pgdat(lruvec), idx);

 pn = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_377(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(pn->lruvec_stats.state[idx]) == sizeof(char) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(short) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(int) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(long)) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(long long))) __compiletime_assert_377(); } while (0); (*(const volatile typeof( _Generic((pn->lruvec_stats.state[idx]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (pn->lruvec_stats.state[idx]))) *)&(pn->lruvec_stats.state[idx])); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long lruvec_page_state_local(struct lruvec *lruvec,
          enum node_stat_item idx)
{
 struct mem_cgroup_per_node *pn;
 long x = 0;
 int cpu;

 if (mem_cgroup_disabled())
  return node_page_state(lruvec_pgdat(lruvec), idx);

 pn = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_possible_mask))), ((cpu)) < nr_cpu_ids;)
  x += (*({ do { const void *__vpp_verify = (typeof((&(pn->lruvec_stats_percpu->state[idx])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(pn->lruvec_stats_percpu->state[idx])))) *)((&(pn->lruvec_stats_percpu->state[idx])))); (typeof((typeof(*((&(pn->lruvec_stats_percpu->state[idx])))) *)((&(pn->lruvec_stats_percpu->state[idx]))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));

 if (x < 0)
  x = 0;

 return x;
}

void mem_cgroup_flush_stats(void);

void __mod_memcg_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
         int val);
void __mod_lruvec_kmem_state(void *p, enum node_stat_item idx, int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_kmem_state(void *p, enum node_stat_item idx,
      int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_kmem_state(p, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_memcg_lruvec_state(struct lruvec *lruvec,
       enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_memcg_lruvec_state(lruvec, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

void __count_memcg_events(struct mem_cgroup *memcg, enum vm_event_item idx,
     unsigned long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_memcg_events(struct mem_cgroup *memcg,
          enum vm_event_item idx,
          unsigned long count)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __count_memcg_events(memcg, idx, count);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_memcg_page_event(struct page *page,
       enum vm_event_item idx)
{
 struct mem_cgroup *memcg = page_memcg(page);

 if (memcg)
  count_memcg_events(memcg, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_memcg_event_mm(struct mm_struct *mm,
     enum vm_event_item idx)
{
 struct mem_cgroup *memcg;

 if (mem_cgroup_disabled())
  return;

 rcu_read_lock();
 memcg = mem_cgroup_from_task(({ typeof(*(mm->owner)) *________p1 = (typeof(*(mm->owner)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_378(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mm->owner)) == sizeof(char) || sizeof((mm->owner)) == sizeof(short) || sizeof((mm->owner)) == sizeof(int) || sizeof((mm->owner)) == sizeof(long)) || sizeof((mm->owner)) == sizeof(long long))) __compiletime_assert_378(); } while (0); (*(const volatile typeof( _Generic(((mm->owner)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mm->owner)))) *)&((mm->owner))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(mm->owner)) *)(________p1)); }));
 if (__builtin_expect(!!(memcg), 1))
  count_memcg_events(memcg, idx, 1);
 rcu_read_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_memory_event(struct mem_cgroup *memcg,
          enum memcg_memory_event event)
{
 bool swap_event = event == MEMCG_SWAP_HIGH || event == MEMCG_SWAP_MAX ||
     event == MEMCG_SWAP_FAIL;

 atomic_long_inc(&memcg->memory_events_local[event]);
 if (!swap_event)
  cgroup_file_notify(&memcg->events_local_file);

 do {
  atomic_long_inc(&memcg->memory_events[event]);
  if (swap_event)
   cgroup_file_notify(&memcg->swap_events_file);
  else
   cgroup_file_notify(&memcg->events_file);

  if (!__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_on_dfl_key)->key) > 0; })), 1))
   break;
  if (cgrp_dfl_root.flags & CGRP_ROOT_MEMORY_LOCAL_EVENTS)
   break;
 } while ((memcg = parent_mem_cgroup(memcg)) &&
   !mem_cgroup_is_root(memcg));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_memory_event_mm(struct mm_struct *mm,
      enum memcg_memory_event event)
{
 struct mem_cgroup *memcg;

 if (mem_cgroup_disabled())
  return;

 rcu_read_lock();
 memcg = mem_cgroup_from_task(({ typeof(*(mm->owner)) *________p1 = (typeof(*(mm->owner)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_379(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mm->owner)) == sizeof(char) || sizeof((mm->owner)) == sizeof(short) || sizeof((mm->owner)) == sizeof(int) || sizeof((mm->owner)) == sizeof(long)) || sizeof((mm->owner)) == sizeof(long long))) __compiletime_assert_379(); } while (0); (*(const volatile typeof( _Generic(((mm->owner)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mm->owner)))) *)&((mm->owner))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(mm->owner)) *)(________p1)); }));
 if (__builtin_expect(!!(memcg), 1))
  memcg_memory_event(memcg, event);
 rcu_read_unlock();
}

void split_page_memcg(struct page *head, unsigned int nr);

unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *pgdat, int order,
      gfp_t gfp_mask,
      unsigned long *total_scanned);
# 1526 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __inc_lruvec_kmem_state(void *p, enum node_stat_item idx)
{
 __mod_lruvec_kmem_state(p, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dec_lruvec_kmem_state(void *p, enum node_stat_item idx)
{
 __mod_lruvec_kmem_state(p, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *parent_lruvec(struct lruvec *lruvec)
{
 struct mem_cgroup *memcg;

 memcg = lruvec_memcg(lruvec);
 if (!memcg)
  return ((void *)0);
 memcg = parent_mem_cgroup(memcg);
 if (!memcg)
  return ((void *)0);
 return mem_cgroup_lruvec(memcg, lruvec_pgdat(lruvec));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_lruvec(struct lruvec *lruvec)
{
 spin_unlock(&lruvec->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_lruvec_irq(struct lruvec *lruvec)
{
 spin_unlock_irq(&lruvec->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_lruvec_irqrestore(struct lruvec *lruvec,
  unsigned long flags)
{
 spin_unlock_irqrestore(&lruvec->lru_lock, flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_matches_lruvec(struct folio *folio,
  struct lruvec *lruvec)
{
 return lruvec_pgdat(lruvec) == folio_pgdat(folio) &&
        lruvec_memcg(lruvec) == folio_memcg(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *folio_lruvec_relock_irq(struct folio *folio,
  struct lruvec *locked_lruvec)
{
 if (locked_lruvec) {
  if (folio_matches_lruvec(folio, locked_lruvec))
   return locked_lruvec;

  unlock_page_lruvec_irq(locked_lruvec);
 }

 return folio_lruvec_lock_irq(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *folio_lruvec_relock_irqsave(struct folio *folio,
  struct lruvec *locked_lruvec, unsigned long *flags)
{
 if (locked_lruvec) {
  if (folio_matches_lruvec(folio, locked_lruvec))
   return locked_lruvec;

  unlock_page_lruvec_irqrestore(locked_lruvec, *flags);
 }

 return folio_lruvec_lock_irqsave(folio, flags);
}



struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *wb);
void mem_cgroup_wb_stats(struct bdi_writeback *wb, unsigned long *pfilepages,
    unsigned long *pheadroom, unsigned long *pdirty,
    unsigned long *pwriteback);

void mem_cgroup_track_foreign_dirty_slowpath(struct folio *folio,
          struct bdi_writeback *wb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_track_foreign_dirty(struct folio *folio,
        struct bdi_writeback *wb)
{
 if (mem_cgroup_disabled())
  return;

 if (__builtin_expect(!!(&folio_memcg(folio)->css != wb->memcg_css), 0))
  mem_cgroup_track_foreign_dirty_slowpath(folio, wb);
}

void mem_cgroup_flush_foreign(struct bdi_writeback *wb);
# 1649 "./include/linux/memcontrol.h"
struct sock;
bool mem_cgroup_charge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages,
        gfp_t gfp_mask);
void mem_cgroup_uncharge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages);

extern struct static_key_false memcg_sockets_enabled_key;

void mem_cgroup_sk_alloc(struct sock *sk);
void mem_cgroup_sk_free(struct sock *sk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_under_socket_pressure(struct mem_cgroup *memcg)
{
 if (!__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_on_dfl_key)->key) > 0; })), 1) && memcg->tcpmem_pressure)
  return true;
 do {
  if ((({ unsigned long __dummy; typeof(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_380(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->socket_pressure) == sizeof(char) || sizeof(memcg->socket_pressure) == sizeof(short) || sizeof(memcg->socket_pressure) == sizeof(int) || sizeof(memcg->socket_pressure) == sizeof(long)) || sizeof(memcg->socket_pressure) == sizeof(long long))) __compiletime_assert_380(); } while (0); (*(const volatile typeof( _Generic((memcg->socket_pressure), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->socket_pressure))) *)&(memcg->socket_pressure)); })) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(jiffies) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((jiffies) - (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_380(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->socket_pressure) == sizeof(char) || sizeof(memcg->socket_pressure) == sizeof(short) || sizeof(memcg->socket_pressure) == sizeof(int) || sizeof(memcg->socket_pressure) == sizeof(long)) || sizeof(memcg->socket_pressure) == sizeof(long long))) __compiletime_assert_380(); } while (0); (*(const volatile typeof( _Generic((memcg->socket_pressure), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->socket_pressure))) *)&(memcg->socket_pressure)); }))) < 0)))
   return true;
 } while ((memcg = parent_mem_cgroup(memcg)));
 return false;
}

int alloc_shrinker_info(struct mem_cgroup *memcg);
void free_shrinker_info(struct mem_cgroup *memcg);
void set_shrinker_bit(struct mem_cgroup *memcg, int nid, int shrinker_id);
void reparent_shrinker_deferred(struct mem_cgroup *memcg);
# 1689 "./include/linux/memcontrol.h"
bool mem_cgroup_kmem_disabled(void);
int __memcg_kmem_charge_page(struct page *page, gfp_t gfp, int order);
void __memcg_kmem_uncharge_page(struct page *page, int order);

struct obj_cgroup *get_obj_cgroup_from_current(void);

int obj_cgroup_charge(struct obj_cgroup *objcg, gfp_t gfp, size_t size);
void obj_cgroup_uncharge(struct obj_cgroup *objcg, size_t size);

extern struct static_key_false memcg_kmem_enabled_key;

extern int memcg_nr_cache_ids;
void memcg_get_cache_ids(void);
void memcg_put_cache_ids(void);
# 1712 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memcg_kmem_enabled(void)
{
 return __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memcg_kmem_enabled_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memcg_kmem_enabled_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memcg_kmem_enabled_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memcg_kmem_enabled_key)->key) > 0; })), 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memcg_kmem_charge_page(struct page *page, gfp_t gfp,
      int order)
{
 if (memcg_kmem_enabled())
  return __memcg_kmem_charge_page(page, gfp, order);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_kmem_uncharge_page(struct page *page, int order)
{
 if (memcg_kmem_enabled())
  __memcg_kmem_uncharge_page(page, order);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memcg_cache_id(struct mem_cgroup *memcg)
{
 return memcg ? memcg->kmemcg_id : -1;
}

struct mem_cgroup *mem_cgroup_from_obj(void *p);
# 10 "./include/linux/swap.h" 2

# 1 "./include/linux/node.h" 1
# 31 "./include/linux/node.h"
struct node_hmem_attrs {
 unsigned int read_bandwidth;
 unsigned int write_bandwidth;
 unsigned int read_latency;
 unsigned int write_latency;
};

enum cache_indexing {
 NODE_CACHE_DIRECT_MAP,
 NODE_CACHE_INDEXED,
 NODE_CACHE_OTHER,
};

enum cache_write_policy {
 NODE_CACHE_WRITE_BACK,
 NODE_CACHE_WRITE_THROUGH,
 NODE_CACHE_WRITE_OTHER,
};
# 59 "./include/linux/node.h"
struct node_cache_attrs {
 enum cache_indexing indexing;
 enum cache_write_policy write_policy;
 u64 size;
 u16 line_size;
 u8 level;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_add_cache(unsigned int nid,
      struct node_cache_attrs *cache_attrs)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_perf_attrs(unsigned int nid,
           struct node_hmem_attrs *hmem_attrs,
           unsigned access)
{
}


struct node {
 struct device dev;
 struct list_head access_list;
# 95 "./include/linux/node.h"
};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void link_mem_sections(int nid, unsigned long start_pfn,
         unsigned long end_pfn,
         enum meminit_context context)
{
}


extern void unregister_node(struct node *node);


extern int __register_one_node(int nid);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_one_node(int nid)
{
 int error = 0;

 if (node_state((nid), N_ONLINE)) {
  struct pglist_data *pgdat = (__node_data[nid]);
  unsigned long start_pfn = pgdat->node_start_pfn;
  unsigned long end_pfn = start_pfn + pgdat->node_spanned_pages;

  error = __register_one_node(nid);
  if (error)
   return error;

  link_mem_sections(nid, start_pfn, end_pfn, MEMINIT_EARLY);
 }

 return error;
}

extern void unregister_one_node(int nid);
extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
extern void unregister_memory_block_under_nodes(struct memory_block *mem_blk);

extern int register_memory_node_under_compute_node(unsigned int mem_nid,
         unsigned int cpu_nid,
         unsigned access);
# 12 "./include/linux/swap.h" 2

# 1 "./include/linux/pagemap.h" 1
# 17 "./include/linux/pagemap.h"
# 1 "./include/linux/hugetlb_inline.h" 1
# 16 "./include/linux/hugetlb_inline.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_hugetlb_page(struct vm_area_struct *vma)
{
 return false;
}
# 18 "./include/linux/pagemap.h" 2

struct pagevec;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_empty(struct address_space *mapping)
{
 return xa_empty(&mapping->i_pages);
}
# 47 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_shrinkable(struct address_space *mapping)
{
 void *head;






 if (0)
  return true;


 head = ({ typeof(*(mapping->i_pages.xa_head)) *_________p1 = (typeof(*(mapping->i_pages.xa_head)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_381(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mapping->i_pages.xa_head)) == sizeof(char) || sizeof((mapping->i_pages.xa_head)) == sizeof(short) || sizeof((mapping->i_pages.xa_head)) == sizeof(int) || sizeof((mapping->i_pages.xa_head)) == sizeof(long)) || sizeof((mapping->i_pages.xa_head)) == sizeof(long long))) __compiletime_assert_381(); } while (0); (*(const volatile typeof( _Generic(((mapping->i_pages.xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mapping->i_pages.xa_head)))) *)&((mapping->i_pages.xa_head))); }); ; ((typeof(*(mapping->i_pages.xa_head)) *)(_________p1)); });
 if (!head)
  return true;







 if (!xa_is_node(head) && xa_is_value(head))
  return true;

 return false;
}




enum mapping_flags {
 AS_EIO = 0,
 AS_ENOSPC = 1,
 AS_MM_ALL_LOCKS = 2,
 AS_UNEVICTABLE = 3,
 AS_EXITING = 4,

 AS_NO_WRITEBACK_TAGS = 5,
 AS_LARGE_FOLIO_SUPPORT = 6,
};
# 104 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_error(struct address_space *mapping, int error)
{
 if (__builtin_expect(!!(!error), 1))
  return;


 __filemap_set_wb_err(mapping, error);


 if (mapping->host)
  errseq_set(&mapping->host->i_sb->s_wb_err, error);


 if (error == -28)
  set_bit(AS_ENOSPC, &mapping->flags);
 else
  set_bit(AS_EIO, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_unevictable(struct address_space *mapping)
{
 set_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_clear_unevictable(struct address_space *mapping)
{
 clear_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_unevictable(struct address_space *mapping)
{
 return mapping && arch_test_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_exiting(struct address_space *mapping)
{
 set_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_exiting(struct address_space *mapping)
{
 return arch_test_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_no_writeback_tags(struct address_space *mapping)
{
 set_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_use_writeback_tags(struct address_space *mapping)
{
 return !arch_test_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_mask(struct address_space * mapping)
{
 return mapping->gfp_mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_constraint(struct address_space *mapping,
  gfp_t gfp_mask)
{
 return mapping_gfp_mask(mapping) & gfp_mask;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)
{
 m->gfp_mask = mask;
}
# 190 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_large_folios(struct address_space *mapping)
{
 arch___set_bit(AS_LARGE_FOLIO_SUPPORT, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_large_folio_support(struct address_space *mapping)
{
 return arch_test_bit(AS_LARGE_FOLIO_SUPPORT, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_nr_thps(struct address_space *mapping)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_nr_thps_inc(struct address_space *mapping)
{




 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(1); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/pagemap.h", 215, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_nr_thps_dec(struct address_space *mapping)
{




 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(1); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("include/linux/pagemap.h", 225, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });

}

void release_pages(struct page **pages, int nr);

struct address_space *page_mapping(struct page *);
struct address_space *folio_mapping(struct folio *);
struct address_space *swapcache_mapping(struct folio *);
# 247 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *folio_file_mapping(struct folio *folio)
{
 if (__builtin_expect(!!(folio_test_swapcache(folio)), 0))
  return swapcache_mapping(folio);

 return folio->mapping;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *page_file_mapping(struct page *page)
{
 return folio_file_mapping((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *page_mapping_file(struct page *page)
{
 struct folio *folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));

 if (__builtin_expect(!!(folio_test_swapcache(folio)), 0))
  return ((void *)0);
 return folio_mapping(folio);
}
# 281 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *folio_inode(struct folio *folio)
{
 return folio->mapping->host;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_cache_add_speculative(struct page *page, int count)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return folio_ref_try_add_rcu((struct folio *)page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_cache_get_speculative(struct page *page)
{
 return page_cache_add_speculative(page, 1);
}
# 305 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_attach_private(struct folio *folio, void *data)
{
 folio_get(folio);
 folio->private = data;
 folio_set_private(folio);
}
# 323 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *folio_change_private(struct folio *folio, void *data)
{
 void *old = folio_get_private(folio);

 folio->private = data;
 return old;
}
# 340 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *folio_detach_private(struct folio *folio)
{
 void *data = folio_get_private(folio);

 if (!folio_test_private(folio))
  return ((void *)0);
 folio_clear_private(folio);
 folio->private = ((void *)0);
 folio_put(folio);

 return data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void attach_page_private(struct page *page, void *data)
{
 folio_attach_private((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *detach_page_private(struct page *page)
{
 return folio_detach_private((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}


struct folio *filemap_alloc_folio(gfp_t gfp, unsigned int order);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *__page_cache_alloc(gfp_t gfp)
{
 return &filemap_alloc_folio(gfp, 0)->page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *page_cache_alloc(struct address_space *x)
{
 return __page_cache_alloc(mapping_gfp_mask(x));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t readahead_gfp_mask(struct address_space *x)
{
 return mapping_gfp_mask(x) | (( gfp_t)0x10000u) | (( gfp_t)0x2000u);
}

typedef int filler_t(void *, struct page *);

unsigned long page_cache_next_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
unsigned long page_cache_prev_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
# 405 "./include/linux/pagemap.h"
struct folio *__filemap_get_folio(struct address_space *mapping, unsigned long index,
  int fgp_flags, gfp_t gfp);
struct page *pagecache_get_page(struct address_space *mapping, unsigned long index,
  int fgp_flags, gfp_t gfp);
# 420 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *filemap_get_folio(struct address_space *mapping,
     unsigned long index)
{
 return __filemap_get_folio(mapping, index, 0, 0);
}
# 436 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page(struct address_space *mapping,
     unsigned long offset)
{
 return pagecache_get_page(mapping, offset, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page_flags(struct address_space *mapping,
     unsigned long offset, int fgp_flags)
{
 return pagecache_get_page(mapping, offset, fgp_flags, 0);
}
# 461 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_lock_page(struct address_space *mapping,
     unsigned long index)
{
 return pagecache_get_page(mapping, index, 0x00000002, 0);
}
# 486 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_or_create_page(struct address_space *mapping,
     unsigned long index, gfp_t gfp_mask)
{
 return pagecache_get_page(mapping, index,
     0x00000002|0x00000001|0x00000004,
     gfp_mask);
}
# 507 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page_nowait(struct address_space *mapping,
    unsigned long index)
{
 return pagecache_get_page(mapping, index,
   0x00000002|0x00000004|0x00000010|0x00000020,
   mapping_gfp_mask(mapping));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_contains(struct page *head, unsigned long index)
{

 if (PageHuge(head))
  return head->index == index;
 return page_index(head) == (index & ~(thp_nr_pages(head) - 1UL));
}
# 537 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long folio_index(struct folio *folio)
{
        if (__builtin_expect(!!(folio_test_swapcache(folio)), 0))
                return __page_file_index(&(folio)->page);
        return folio->index;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long folio_next_index(struct folio *folio)
{
 return folio->index + folio_nr_pages(folio);
}
# 565 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *folio_file_page(struct folio *folio, unsigned long index)
{

 if (folio_test_hugetlb(folio))
  return &folio->page;
 return ({ unsigned long __pfn = (({ const struct page *__pg = ((&(folio)->page)); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); }) + (index & (folio_nr_pages(folio) - 1))); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; });
}
# 583 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_contains(struct folio *folio, unsigned long index)
{

 if (folio_test_hugetlb(folio))
  return folio->index == index;
 return index - folio_index(folio) < folio_nr_pages(folio);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_subpage(struct page *head, unsigned long index)
{

 if (PageHuge(head))
  return head;

 return head + (index & (thp_nr_pages(head) - 1));
}

unsigned find_get_entries(struct address_space *mapping, unsigned long start,
  unsigned long end, struct pagevec *pvec, unsigned long *indices);
unsigned find_get_pages_range(struct address_space *mapping, unsigned long *start,
   unsigned long end, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages(struct address_space *mapping,
   unsigned long *start, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range(mapping, start, (unsigned long)-1, nr_pages,
        pages);
}
unsigned find_get_pages_contig(struct address_space *mapping, unsigned long start,
          unsigned int nr_pages, struct page **pages);
unsigned find_get_pages_range_tag(struct address_space *mapping, unsigned long *index,
   unsigned long end, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages_tag(struct address_space *mapping,
   unsigned long *index, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range_tag(mapping, index, (unsigned long)-1, tag,
     nr_pages, pages);
}

struct page *grab_cache_page_write_begin(struct address_space *mapping,
   unsigned long index, unsigned flags);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page(struct address_space *mapping,
        unsigned long index)
{
 return find_or_create_page(mapping, index, mapping_gfp_mask(mapping));
}

extern struct page * read_cache_page(struct address_space *mapping,
    unsigned long index, filler_t *filler, void *data);
extern struct page * read_cache_page_gfp(struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
extern int read_cache_pages(struct address_space *mapping,
  struct list_head *pages, filler_t *filler, void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *read_mapping_page(struct address_space *mapping,
    unsigned long index, void *data)
{
 return read_cache_page(mapping, index, ((void *)0), data);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_index(struct page *page)
{
 struct page *head;

 if (__builtin_expect(!!(!PageTransTail(page)), 1))
  return page->index;

 head = ((typeof(page))_compound_head(page));




 return head->index + page - head;
}

extern unsigned long hugetlb_basepage_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_pgoff(struct page *page)
{
 if (__builtin_expect(!!(PageHuge(page)), 0))
  return hugetlb_basepage_index(page);
 return page_to_index(page);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_offset(struct page *page)
{
 return ((loff_t)page->index) << 14;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_file_offset(struct page *page)
{
 return ((loff_t)page_index(page)) << 14;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t folio_pos(struct folio *folio)
{
 return page_offset(&folio->page);
}
# 715 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t folio_file_pos(struct folio *folio)
{
 return page_file_offset(&folio->page);
}

extern unsigned long linear_hugepage_index(struct vm_area_struct *vma,
         unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long linear_page_index(struct vm_area_struct *vma,
     unsigned long address)
{
 unsigned long pgoff;
 if (__builtin_expect(!!(is_vm_hugetlb_page(vma)), 0))
  return linear_hugepage_index(vma, address);
 pgoff = (address - vma->vm_start) >> 14;
 pgoff += vma->vm_pgoff;
 return pgoff;
}

struct wait_page_key {
 struct folio *folio;
 int bit_nr;
 int page_match;
};

struct wait_page_queue {
 struct folio *folio;
 int bit_nr;
 wait_queue_entry_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wake_page_match(struct wait_page_queue *wait_page,
      struct wait_page_key *key)
{
 if (wait_page->folio != key->folio)
        return false;
 key->page_match = 1;

 if (wait_page->bit_nr != key->bit_nr)
  return false;

 return true;
}

void __folio_lock(struct folio *folio);
int __folio_lock_killable(struct folio *folio);
bool __folio_lock_or_retry(struct folio *folio, struct mm_struct *mm,
    unsigned int flags);
void unlock_page(struct page *page);
void folio_unlock(struct folio *folio);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_trylock(struct folio *folio)
{
 return __builtin_expect(!!(!test_and_set_bit_lock(PG_locked, folio_flags(folio, 0))), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int trylock_page(struct page *page)
{
 return folio_trylock((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_lock(struct folio *folio)
{
 do { do { } while (0); } while (0);
 if (!folio_trylock(folio))
  __folio_lock(folio);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_page(struct page *page)
{
 struct folio *folio;
 do { do { } while (0); } while (0);

 folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));
 if (!folio_trylock(folio))
  __folio_lock(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_lock_killable(struct folio *folio)
{
 do { do { } while (0); } while (0);
 if (!folio_trylock(folio))
  return __folio_lock_killable(folio);
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_killable(struct page *page)
{
 return folio_lock_killable((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
# 824 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lock_page_or_retry(struct page *page, struct mm_struct *mm,
         unsigned int flags)
{
 struct folio *folio;
 do { do { } while (0); } while (0);

 folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));
 return folio_trylock(folio) || __folio_lock_or_retry(folio, mm, flags);
}





void folio_wait_bit(struct folio *folio, int bit_nr);
int folio_wait_bit_killable(struct folio *folio, int bit_nr);
# 848 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_wait_locked(struct folio *folio)
{
 if (folio_test_locked(folio))
  folio_wait_bit(folio, PG_locked);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_wait_locked_killable(struct folio *folio)
{
 if (!folio_test_locked(folio))
  return 0;
 return folio_wait_bit_killable(folio, PG_locked);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_on_page_locked(struct page *page)
{
 folio_wait_locked((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int wait_on_page_locked_killable(struct page *page)
{
 return folio_wait_locked_killable((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

int put_and_wait_on_page_locked(struct page *page, int state);
void wait_on_page_writeback(struct page *page);
void folio_wait_writeback(struct folio *folio);
int folio_wait_writeback_killable(struct folio *folio);
void end_page_writeback(struct page *page);
void folio_end_writeback(struct folio *folio);
void wait_for_stable_page(struct page *page);
void folio_wait_stable(struct folio *folio);
void __folio_mark_dirty(struct folio *folio, struct address_space *, int warn);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_page_dirty(struct page *page,
  struct address_space *mapping, int warn)
{
 __folio_mark_dirty((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), mapping, warn);
}
void folio_account_cleaned(struct folio *folio, struct address_space *mapping,
     struct bdi_writeback *wb);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_page_cleaned(struct page *page,
  struct address_space *mapping, struct bdi_writeback *wb)
{
 return folio_account_cleaned((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), mapping, wb);
}
void __folio_cancel_dirty(struct folio *folio);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_cancel_dirty(struct folio *folio)
{

 if (folio_test_dirty(folio))
  __folio_cancel_dirty(folio);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cancel_dirty_page(struct page *page)
{
 folio_cancel_dirty((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
bool folio_clear_dirty_for_io(struct folio *folio);
bool clear_page_dirty_for_io(struct page *page);
int __attribute__((__warn_unused_result__)) folio_write_one(struct folio *folio);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) write_one_page(struct page *page)
{
 return folio_write_one((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);

void page_endio(struct page *page, bool is_write, int err);

void folio_end_private_2(struct folio *folio);
void folio_wait_private_2(struct folio *folio);
int folio_wait_private_2_killable(struct folio *folio);




void folio_add_wait_queue(struct folio *folio, wait_queue_entry_t *waiter);




size_t fault_in_writeable(char *uaddr, size_t size);
size_t fault_in_safe_writeable(const char *uaddr, size_t size);
size_t fault_in_readable(const char *uaddr, size_t size);

int add_to_page_cache_locked(struct page *page, struct address_space *mapping,
  unsigned long index, gfp_t gfp);
int add_to_page_cache_lru(struct page *page, struct address_space *mapping,
  unsigned long index, gfp_t gfp);
int filemap_add_folio(struct address_space *mapping, struct folio *folio,
  unsigned long index, gfp_t gfp);
extern void delete_from_page_cache(struct page *page);
extern void __delete_from_page_cache(struct page *page, void *shadow);
void replace_page_cache_page(struct page *old, struct page *new);
void delete_from_page_cache_batch(struct address_space *mapping,
      struct pagevec *pvec);
loff_t mapping_seek_hole_data(struct address_space *, loff_t start, loff_t end,
  int whence);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_to_page_cache(struct page *page,
  struct address_space *mapping, unsigned long offset, gfp_t gfp_mask)
{
 int error;

 __SetPageLocked(page);
 error = add_to_page_cache_locked(page, mapping, offset, gfp_mask);
 if (__builtin_expect(!!(error), 0))
  __ClearPageLocked(page);
 return error;
}


int __filemap_add_folio(struct address_space *mapping, struct folio *folio,
  unsigned long index, gfp_t gfp, void **shadowp);
# 982 "./include/linux/pagemap.h"
struct readahead_control {
 struct file *file;
 struct address_space *mapping;
 struct file_ra_state *ra;

 unsigned long _index;
 unsigned int _nr_pages;
 unsigned int _batch_count;
};
# 1002 "./include/linux/pagemap.h"
void page_cache_ra_unbounded(struct readahead_control *,
  unsigned long nr_to_read, unsigned long lookahead_count);
void page_cache_sync_ra(struct readahead_control *, unsigned long req_count);
void page_cache_async_ra(struct readahead_control *, struct page *,
  unsigned long req_count);
void readahead_expand(struct readahead_control *ractl,
        loff_t new_start, size_t new_len);
# 1023 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void page_cache_sync_readahead(struct address_space *mapping,
  struct file_ra_state *ra, struct file *file, unsigned long index,
  unsigned long req_count)
{
 struct readahead_control ractl = { .file = file, .mapping = mapping, .ra = ra, ._index = index, };
 page_cache_sync_ra(&ractl, req_count);
}
# 1046 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void page_cache_async_readahead(struct address_space *mapping,
  struct file_ra_state *ra, struct file *file,
  struct page *page, unsigned long index, unsigned long req_count)
{
 struct readahead_control ractl = { .file = file, .mapping = mapping, .ra = ra, ._index = index, };
 page_cache_async_ra(&ractl, page, req_count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *__readahead_folio(struct readahead_control *ractl)
{
 struct folio *folio;

 __BUG_ON((unsigned long)(ractl->_batch_count > ractl->_nr_pages));
 ractl->_nr_pages -= ractl->_batch_count;
 ractl->_index += ractl->_batch_count;

 if (!ractl->_nr_pages) {
  ractl->_batch_count = 0;
  return ((void *)0);
 }

 folio = xa_load(&ractl->mapping->i_pages, ractl->_index);
 ((void)(sizeof(( long)(!folio_test_locked(folio)))));
 ractl->_batch_count = folio_nr_pages(folio);

 return folio;
}
# 1084 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *readahead_page(struct readahead_control *ractl)
{
 struct folio *folio = __readahead_folio(ractl);

 return &folio->page;
}
# 1099 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *readahead_folio(struct readahead_control *ractl)
{
 struct folio *folio = __readahead_folio(ractl);

 if (folio)
  folio_put(folio);
 return folio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __readahead_batch(struct readahead_control *rac,
  struct page **array, unsigned int array_sz)
{
 unsigned int i = 0;
 struct xa_state xas = { .xa = &rac->mapping->i_pages, .xa_index = 0, .xa_shift = 0, .xa_sibs = 0, .xa_offset = 0, .xa_pad = 0, .xa_node = ((struct xa_node *)3UL), .xa_alloc = ((void *)0), .xa_update = ((void *)0) };
 struct page *page;

 __BUG_ON((unsigned long)(rac->_batch_count > rac->_nr_pages));
 rac->_nr_pages -= rac->_batch_count;
 rac->_index += rac->_batch_count;
 rac->_batch_count = 0;

 xas_set(&xas, rac->_index);
 rcu_read_lock();
 for (page = xas_find(&xas, rac->_index + rac->_nr_pages - 1); page; page = xas_next_entry(&xas, rac->_index + rac->_nr_pages - 1)) {
  if (xas_retry(&xas, page))
   continue;
  ((void)(sizeof(( long)(!PageLocked(page)))));
  ((void)(sizeof(( long)(PageTail(page)))));
  array[i++] = page;
  rac->_batch_count += thp_nr_pages(page);







  if (PageHead(page))
   xas_set(&xas, rac->_index + rac->_batch_count);

  if (i == array_sz)
   break;
 }
 rcu_read_unlock();

 return i;
}
# 1165 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t readahead_pos(struct readahead_control *rac)
{
 return (loff_t)rac->_index * ((1UL) << 14);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t readahead_length(struct readahead_control *rac)
{
 return rac->_nr_pages * ((1UL) << 14);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long readahead_index(struct readahead_control *rac)
{
 return rac->_index;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int readahead_count(struct readahead_control *rac)
{
 return rac->_nr_pages;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t readahead_batch_length(struct readahead_control *rac)
{
 return rac->_batch_count * ((1UL) << 14);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dir_pages(struct inode *inode)
{
 return (unsigned long)(inode->i_size + ((1UL) << 14) - 1) >>
          14;
}
# 1220 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t folio_mkwrite_check_truncate(struct folio *folio,
           struct inode *inode)
{
 loff_t size = i_size_read(inode);
 unsigned long index = size >> 14;
 size_t offset = ((unsigned long)(size) & (folio_size(folio) - 1));

 if (!folio->mapping)
  return -14;


 if (folio_next_index(folio) - 1 < index)
  return folio_size(folio);

 if (folio->index > index || !offset)
  return -14;

 return offset;
}
# 1248 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mkwrite_check_truncate(struct page *page,
           struct inode *inode)
{
 loff_t size = i_size_read(inode);
 unsigned long index = size >> 14;
 int offset = ((unsigned long)(size) & ~(~((1 << 14) - 1)));

 if (page->mapping != inode->i_mapping)
  return -14;


 if (page->index < index)
  return ((1UL) << 14);

 if (page->index > index || !offset)
  return -14;

 return offset;
}
# 1279 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned int i_blocks_per_folio(struct inode *inode, struct folio *folio)
{
 return folio_size(folio) >> inode->i_blkbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned int i_blocks_per_page(struct inode *inode, struct page *page)
{
 return i_blocks_per_folio(inode, (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
# 14 "./include/linux/swap.h" 2


# 1 "./include/uapi/linux/mempolicy.h" 1
# 19 "./include/uapi/linux/mempolicy.h"
enum {
 MPOL_DEFAULT,
 MPOL_PREFERRED,
 MPOL_BIND,
 MPOL_INTERLEAVE,
 MPOL_LOCAL,
 MPOL_PREFERRED_MANY,
 MPOL_MAX,
};
# 17 "./include/linux/swap.h" 2


struct notifier_block;

struct bio;

struct pagevec;
# 37 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int current_is_kswapd(void)
{
 return (current_thread_info()->task)->flags & 0x00020000;
}
# 117 "./include/linux/swap.h"
union swap_header {
 struct {
  char reserved[((1UL) << 14) - 10];
  char magic[10];
 } magic;
 struct {
  char bootbits[1024];
  __u32 version;
  __u32 last_page;
  __u32 nr_badpages;
  unsigned char sws_uuid[16];
  unsigned char sws_volume[16];
  __u32 padding[117];
  __u32 badpages[1];
 } info;
};





struct reclaim_state {
 unsigned long reclaimed_slab;
};



struct address_space;
struct sysinfo;
struct writeback_control;
struct zone;
# 157 "./include/linux/swap.h"
struct swap_extent {
 struct rb_node rb_node;
 unsigned long start_page;
 unsigned long nr_pages;
 sector_t start_block;
};
# 171 "./include/linux/swap.h"
enum {
 SWP_USED = (1 << 0),
 SWP_WRITEOK = (1 << 1),
 SWP_DISCARDABLE = (1 << 2),
 SWP_DISCARDING = (1 << 3),
 SWP_SOLIDSTATE = (1 << 4),
 SWP_CONTINUED = (1 << 5),
 SWP_BLKDEV = (1 << 6),
 SWP_ACTIVATED = (1 << 7),
 SWP_FS_OPS = (1 << 8),
 SWP_AREA_DISCARD = (1 << 9),
 SWP_PAGE_DISCARD = (1 << 10),
 SWP_STABLE_WRITES = (1 << 11),
 SWP_SYNCHRONOUS_IO = (1 << 12),

 SWP_SCANNING = (1 << 14),
};
# 214 "./include/linux/swap.h"
struct swap_cluster_info {
 spinlock_t lock;





 unsigned int data:24;
 unsigned int flags:8;
};
# 233 "./include/linux/swap.h"
struct percpu_cluster {
 struct swap_cluster_info index;
 unsigned int next;
};

struct swap_cluster_list {
 struct swap_cluster_info head;
 struct swap_cluster_info tail;
};




struct swap_info_struct {
 struct percpu_ref users;
 unsigned long flags;
 signed short prio;
 struct plist_node list;
 signed char type;
 unsigned int max;
 unsigned char *swap_map;
 struct swap_cluster_info *cluster_info;
 struct swap_cluster_list free_clusters;
 unsigned int lowest_bit;
 unsigned int highest_bit;
 unsigned int pages;
 unsigned int inuse_pages;
 unsigned int cluster_next;
 unsigned int cluster_nr;
 unsigned int *cluster_next_cpu;
 struct percpu_cluster *percpu_cluster;
 struct rb_root swap_extent_root;
 struct block_device *bdev;
 struct file *swap_file;
 unsigned int old_block_size;
 struct completion comp;




 spinlock_t lock;
# 286 "./include/linux/swap.h"
 spinlock_t cont_lock;



 struct work_struct discard_work;
 struct swap_cluster_list discard_clusters;
 struct plist_node avail_lists[];
# 302 "./include/linux/swap.h"
};
# 312 "./include/linux/swap.h"
struct vma_swap_readahead {
 unsigned short win;
 unsigned short offset;
 unsigned short nr_pte;

 pte_t *ptes;



};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) swp_entry_t folio_swap_entry(struct folio *folio)
{
 swp_entry_t entry = { .val = ((&folio->page)->private) };
 return entry;
}


void workingset_age_nonresident(struct lruvec *lruvec, unsigned long nr_pages);
void *workingset_eviction(struct page *page, struct mem_cgroup *target_memcg);
void workingset_refault(struct folio *folio, void *shadow);
void workingset_activation(struct folio *folio);


void workingset_update_node(struct xa_node *node);






extern unsigned long totalreserve_pages;






extern void lru_note_cost(struct lruvec *lruvec, bool file,
     unsigned int nr_pages);
extern void lru_note_cost_folio(struct folio *);
extern void folio_add_lru(struct folio *);
extern void lru_cache_add(struct page *);
void mark_page_accessed(struct page *);
void folio_mark_accessed(struct folio *);

extern atomic_t lru_disable_count;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lru_cache_disabled(void)
{
 return atomic_read(&lru_disable_count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lru_cache_enable(void)
{
 atomic_dec(&lru_disable_count);
}

extern void lru_cache_disable(void);
extern void lru_add_drain(void);
extern void lru_add_drain_cpu(int cpu);
extern void lru_add_drain_cpu_zone(struct zone *zone);
extern void lru_add_drain_all(void);
extern void deactivate_file_page(struct page *page);
extern void deactivate_page(struct page *page);
extern void mark_page_lazyfree(struct page *page);
extern void swap_setup(void);

extern void lru_cache_add_inactive_or_unevictable(struct page *page,
      struct vm_area_struct *vma);


extern unsigned long zone_reclaimable_pages(struct zone *zone);
extern unsigned long try_to_free_pages(struct zonelist *zonelist, int order,
     gfp_t gfp_mask, nodemask_t *mask);
extern bool __isolate_lru_page_prepare(struct page *page, isolate_mode_t mode);
extern unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *memcg,
        unsigned long nr_pages,
        gfp_t gfp_mask,
        bool may_swap);
extern unsigned long mem_cgroup_shrink_node(struct mem_cgroup *mem,
      gfp_t gfp_mask, bool noswap,
      pg_data_t *pgdat,
      unsigned long *nr_scanned);
extern unsigned long shrink_all_memory(unsigned long nr_pages);
extern int vm_swappiness;
extern int remove_mapping(struct address_space *mapping, struct page *page);

extern unsigned long reclaim_pages(struct list_head *page_list);

extern int node_reclaim_mode;
extern int sysctl_min_unmapped_ratio;
extern int sysctl_min_slab_ratio;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool node_reclaim_enabled(void)
{

 return node_reclaim_mode & ((1<<0)|(1<<1)|(1<<2));
}

extern void check_move_unevictable_pages(struct pagevec *pvec);

extern void kswapd_run(int nid);
extern void kswapd_stop(int nid);






extern int swap_readpage(struct page *page, bool do_poll);
extern int swap_writepage(struct page *page, struct writeback_control *wbc);
extern void end_swap_bio_write(struct bio *bio);
extern int __swap_writepage(struct page *page, struct writeback_control *wbc,
 bio_end_io_t end_write_func);
extern int swap_set_page_dirty(struct page *page);

int add_swap_extent(struct swap_info_struct *sis, unsigned long start_page,
  unsigned long nr_pages, sector_t start_block);
int generic_swapfile_activate(struct swap_info_struct *, struct file *,
  sector_t *);





extern struct address_space *swapper_spaces[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long total_swapcache_pages(void)
{
 return global_node_page_state(NR_SWAPCACHE);
}

extern void show_swap_cache_info(void);
extern int add_to_swap(struct page *page);
extern void *get_shadow_from_swap_cache(swp_entry_t entry);
extern int add_to_swap_cache(struct page *page, swp_entry_t entry,
   gfp_t gfp, void **shadowp);
extern void __delete_from_swap_cache(struct page *page,
   swp_entry_t entry, void *shadow);
extern void delete_from_swap_cache(struct page *);
extern void clear_shadow_from_swap_cache(int type, unsigned long begin,
    unsigned long end);
extern void free_swap_cache(struct page *);
extern void free_page_and_swap_cache(struct page *);
extern void free_pages_and_swap_cache(struct page **, int);
extern struct page *lookup_swap_cache(swp_entry_t entry,
          struct vm_area_struct *vma,
          unsigned long addr);
struct page *find_get_incore_page(struct address_space *mapping, unsigned long index);
extern struct page *read_swap_cache_async(swp_entry_t, gfp_t,
   struct vm_area_struct *vma, unsigned long addr,
   bool do_poll);
extern struct page *__read_swap_cache_async(swp_entry_t, gfp_t,
   struct vm_area_struct *vma, unsigned long addr,
   bool *new_page_allocated);
extern struct page *swap_cluster_readahead(swp_entry_t entry, gfp_t flag,
    struct vm_fault *vmf);
extern struct page *swapin_readahead(swp_entry_t entry, gfp_t flag,
    struct vm_fault *vmf);


extern atomic_long_t nr_swap_pages;
extern long total_swap_pages;
extern atomic_t nr_rotate_swap;
extern bool has_usable_swap(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vm_swap_full(void)
{
 return atomic_long_read(&nr_swap_pages) * 2 < total_swap_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long get_nr_swap_pages(void)
{
 return atomic_long_read(&nr_swap_pages);
}

extern void si_swapinfo(struct sysinfo *);
extern swp_entry_t get_swap_page(struct page *page);
extern void put_swap_page(struct page *page, swp_entry_t entry);
extern swp_entry_t get_swap_page_of_type(int);
extern int get_swap_pages(int n, swp_entry_t swp_entries[], int entry_size);
extern int add_swap_count_continuation(swp_entry_t, gfp_t);
extern void swap_shmem_alloc(swp_entry_t);
extern int swap_duplicate(swp_entry_t);
extern int swapcache_prepare(swp_entry_t);
extern void swap_free(swp_entry_t);
extern void swapcache_free_entries(swp_entry_t *entries, int n);
extern int free_swap_and_cache(swp_entry_t);
int swap_type_of(dev_t device, sector_t offset);
int find_first_swap(dev_t *device);
extern unsigned int count_swap_pages(int, int);
extern sector_t swapdev_block(int, unsigned long);
extern int page_swapcount(struct page *);
extern int __swap_count(swp_entry_t entry);
extern int __swp_swapcount(swp_entry_t entry);
extern int swp_swapcount(swp_entry_t entry);
extern struct swap_info_struct *page_swap_info(struct page *);
extern struct swap_info_struct *swp_swap_info(swp_entry_t entry);
extern bool reuse_swap_page(struct page *, int *);
extern int try_to_free_swap(struct page *);
struct backing_dev_info;
extern int init_swap_address_space(unsigned int type, unsigned long nr_pages);
extern void exit_swap_address_space(unsigned int type);
extern struct swap_info_struct *get_swap_device(swp_entry_t entry);
sector_t swap_page_sector(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_swap_device(struct swap_info_struct *si)
{
 percpu_ref_put(&si->users);
}
# 703 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int split_swap_cluster(swp_entry_t entry)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_swappiness(struct mem_cgroup *memcg)
{

 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_on_dfl_key)->key) > 0; })), 1))
  return vm_swappiness;


 if (mem_cgroup_disabled() || mem_cgroup_is_root(memcg))
  return vm_swappiness;

 return memcg->swappiness;
}
# 730 "./include/linux/swap.h"
extern void __cgroup_throttle_swaprate(struct page *page, gfp_t gfp_mask);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_throttle_swaprate(struct page *page, gfp_t gfp_mask)
{
 if (mem_cgroup_disabled())
  return;
 __cgroup_throttle_swaprate(page, gfp_mask);
}







extern void mem_cgroup_swapout(struct page *page, swp_entry_t entry);
extern int __mem_cgroup_try_charge_swap(struct page *page, swp_entry_t entry);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_try_charge_swap(struct page *page, swp_entry_t entry)
{
 if (mem_cgroup_disabled())
  return 0;
 return __mem_cgroup_try_charge_swap(page, entry);
}

extern void __mem_cgroup_uncharge_swap(swp_entry_t entry, unsigned int nr_pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_uncharge_swap(swp_entry_t entry, unsigned int nr_pages)
{
 if (mem_cgroup_disabled())
  return;
 __mem_cgroup_uncharge_swap(entry, nr_pages);
}

extern long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *memcg);
extern bool mem_cgroup_swap_full(struct page *page);
# 16 "./include/asm-generic/tlb.h" 2
# 226 "./include/asm-generic/tlb.h"
struct mmu_gather_batch {
 struct mmu_gather_batch *next;
 unsigned int nr;
 unsigned int max;
 struct page *pages[0];
};
# 244 "./include/asm-generic/tlb.h"
extern bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page,
       int page_size);






struct mmu_gather {
 struct mm_struct *mm;





 unsigned long start;
 unsigned long end;




 unsigned int fullmm : 1;





 unsigned int need_flush_all : 1;




 unsigned int freed_tables : 1;




 unsigned int cleared_ptes : 1;
 unsigned int cleared_pmds : 1;
 unsigned int cleared_puds : 1;
 unsigned int cleared_p4ds : 1;




 unsigned int vma_exec : 1;
 unsigned int vma_huge : 1;

 unsigned int batch_count;


 struct mmu_gather_batch *active;
 struct mmu_gather_batch local;
 struct page *__pages[8];





};

void tlb_flush_mmu(struct mmu_gather *tlb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __tlb_adjust_range(struct mmu_gather *tlb,
          unsigned long address,
          unsigned int range_size)
{
 tlb->start = __builtin_choose_expr(((!!(sizeof((typeof(tlb->start) *)1 == (typeof(address) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(tlb->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(address) * 0l)) : (int *)8))))), ((tlb->start) < (address) ? (tlb->start) : (address)), ({ typeof(tlb->start) __UNIQUE_ID___x382 = (tlb->start); typeof(address) __UNIQUE_ID___y383 = (address); ((__UNIQUE_ID___x382) < (__UNIQUE_ID___y383) ? (__UNIQUE_ID___x382) : (__UNIQUE_ID___y383)); }));
 tlb->end = __builtin_choose_expr(((!!(sizeof((typeof(tlb->end) *)1 == (typeof(address + range_size) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(tlb->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(address + range_size) * 0l)) : (int *)8))))), ((tlb->end) > (address + range_size) ? (tlb->end) : (address + range_size)), ({ typeof(tlb->end) __UNIQUE_ID___x384 = (tlb->end); typeof(address + range_size) __UNIQUE_ID___y385 = (address + range_size); ((__UNIQUE_ID___x384) > (__UNIQUE_ID___y385) ? (__UNIQUE_ID___x384) : (__UNIQUE_ID___y385)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __tlb_reset_range(struct mmu_gather *tlb)
{
 if (tlb->fullmm) {
  tlb->start = tlb->end = ~0;
 } else {
  tlb->start = (test_ti_thread_flag(current_thread_info(), 23) ? 0x7fff8000UL : 0x10000000000UL);
  tlb->end = 0;
 }
 tlb->freed_tables = 0;
 tlb->cleared_ptes = 0;
 tlb->cleared_pmds = 0;
 tlb->cleared_puds = 0;
 tlb->cleared_p4ds = 0;





}
# 374 "./include/asm-generic/tlb.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush(struct mmu_gather *tlb)
{
 if (tlb->fullmm || tlb->need_flush_all) {
  flush_tlb_mm(tlb->mm);
 } else if (tlb->end) {
  struct vm_area_struct vma = {
   .vm_mm = tlb->mm,
   .vm_flags = (tlb->vma_exec ? 0x00000004 : 0) |
        (tlb->vma_huge ? 0x00400000 : 0),
  };

  flush_tlb_range(&vma, tlb->start, tlb->end);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
tlb_update_vma_flags(struct mmu_gather *tlb, struct vm_area_struct *vma)
{
# 403 "./include/asm-generic/tlb.h"
 tlb->vma_huge = is_vm_hugetlb_page(vma);
 tlb->vma_exec = !!(vma->vm_flags & 0x00000004);
}
# 416 "./include/asm-generic/tlb.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush_mmu_tlbonly(struct mmu_gather *tlb)
{




 if (!(tlb->freed_tables || tlb->cleared_ptes || tlb->cleared_pmds ||
       tlb->cleared_puds || tlb->cleared_p4ds))
  return;

 tlb_flush(tlb);
 mmu_notifier_invalidate_range(tlb->mm, tlb->start, tlb->end);
 __tlb_reset_range(tlb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_remove_page_size(struct mmu_gather *tlb,
     struct page *page, int page_size)
{
 if (__tlb_remove_page_size(tlb, page, page_size))
  tlb_flush_mmu(tlb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __tlb_remove_page(struct mmu_gather *tlb, struct page *page)
{
 return __tlb_remove_page_size(tlb, page, ((1UL) << 14));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_remove_page(struct mmu_gather *tlb, struct page *page)
{
 return tlb_remove_page_size(tlb, page, ((1UL) << 14));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_change_page_size(struct mmu_gather *tlb,
           unsigned int page_size)
{
# 463 "./include/asm-generic/tlb.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long tlb_get_unmap_shift(struct mmu_gather *tlb)
{
 if (tlb->cleared_ptes)
  return 14;
 if (tlb->cleared_pmds)
  return (14 + (14 + 0 - 3));
 if (tlb->cleared_puds)
  return ((14 + (14 + 0 - 3)) + (14 + 0 - 3));
 if (tlb->cleared_p4ds)
  return ((14 + (14 + 0 - 3)) + (14 + 0 - 3));

 return 14;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long tlb_get_unmap_size(struct mmu_gather *tlb)
{
 return 1UL << tlb_get_unmap_shift(tlb);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_start_vma(struct mmu_gather *tlb, struct vm_area_struct *vma)
{
 if (tlb->fullmm)
  return;

 tlb_update_vma_flags(tlb, vma);
 flush_cache_range(vma, vma->vm_start, vma->vm_end);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_end_vma(struct mmu_gather *tlb, struct vm_area_struct *vma)
{
 if (tlb->fullmm)
  return;







 tlb_flush_mmu_tlbonly(tlb);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush_pte_range(struct mmu_gather *tlb,
         unsigned long address, unsigned long size)
{
 __tlb_adjust_range(tlb, address, size);
 tlb->cleared_ptes = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush_pmd_range(struct mmu_gather *tlb,
         unsigned long address, unsigned long size)
{
 __tlb_adjust_range(tlb, address, size);
 tlb->cleared_pmds = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush_pud_range(struct mmu_gather *tlb,
         unsigned long address, unsigned long size)
{
 __tlb_adjust_range(tlb, address, size);
 tlb->cleared_puds = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush_p4d_range(struct mmu_gather *tlb,
         unsigned long address, unsigned long size)
{
 __tlb_adjust_range(tlb, address, size);
 tlb->cleared_p4ds = 1;
}
# 25 "./arch/mips/include/asm/tlb.h" 2
# 27 "arch/mips/kvm/tlb.c" 2
# 1 "./arch/mips/include/asm/tlbdebug.h" 1
# 14 "./arch/mips/include/asm/tlbdebug.h"
extern void dump_tlb_regs(void);
extern void dump_tlb_all(void);
# 28 "arch/mips/kvm/tlb.c" 2


# 1 "./arch/mips/include/asm/r4kcache.h" 1
# 17 "./arch/mips/include/asm/r4kcache.h"
# 1 "./arch/mips/include/asm/asm.h" 1
# 18 "./arch/mips/include/asm/r4kcache.h" 2

# 1 "./arch/mips/include/asm/cacheops.h" 1
# 20 "./arch/mips/include/asm/r4kcache.h" 2





# 1 "./arch/mips/include/asm/unroll.h" 1
# 26 "./arch/mips/include/asm/r4kcache.h" 2

extern void (*r4k_blast_dcache)(void);
extern void (*r4k_blast_icache)(void);
# 56 "./arch/mips/include/asm/r4kcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_icache_line_indexed(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_line_indexed(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scache_line_indexed(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_icache_line(unsigned long addr)
{
 switch (boot_cpu_type()) {
 case CPU_LOONGSON2EF:
  __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)(addr)));
  break;

 default:
  __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)(addr)));
  break;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_line(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_dcache_line(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_scache_line(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scache_line(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)(addr)));
}
# 156 "./arch/mips/include/asm/r4kcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int protected_flush_icache_line(unsigned long addr)
{
 switch (boot_cpu_type()) {
 case CPU_LOONGSON2EF:
  return ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x00 | 0x00)), "r" (addr), "i" (-14)); __err; });

 default:
  return ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x00 | 0x10)), "r" (addr), "i" (-14)); __err; });
 }
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int protected_writeback_dcache_line(unsigned long addr)
{
 return ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x01 | 0x14)), "r" (addr), "i" (-14)); __err; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int protected_writeback_scache_line(unsigned long addr)
{
 return ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x03 | 0x14)), "r" (addr), "i" (-14)); __err; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_tcache_page(unsigned long addr)
{
 __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x02 | 0x14)), "R" (*(unsigned char *)(addr)));
}
# 240 "./arch/mips/include/asm/r4kcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache16(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].dcache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_386(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_386(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache16_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_387(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_387(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache16_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].dcache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_388(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_388(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache16(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].icache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_389(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_389(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache16_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_390(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_390(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache16_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].icache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_391(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_391(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache16(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_392(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_392(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache16_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_393(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_393(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache16_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_394(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_394(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache32(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].dcache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_395(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_395(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache32_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_396(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_396(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache32_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].dcache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_397(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_397(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache32(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].icache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_398(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_398(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache32_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_399(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_399(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache32_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].icache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_400(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_400(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void loongson2_blast_icache32(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].icache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_401(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_401(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void loongson2_blast_icache32_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_402(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_402(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void loongson2_blast_icache32_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].icache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_403(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_403(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache32(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_404(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_404(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache32_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_405(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_405(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache32_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_406(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_406(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache64(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].dcache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_407(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_407(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache64_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_408(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_408(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 64 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache64_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].dcache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_409(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_409(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache64(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].icache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_410(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_410(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache64_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_411(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_411(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 64 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache64_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].icache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_412(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_412(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache64(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_413(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_413(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache64_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_414(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_414(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 64 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache64_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_415(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_415(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache128(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].dcache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_416(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_416(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache128_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_417(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_417(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 128 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache128_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].dcache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_418(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_418(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache128(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].icache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_419(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_419(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache128_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_420(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_420(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 128 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache128_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].icache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].icache.ways << cpu_data[raw_smp_processor_id()].icache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_421(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_421(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache128(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_422(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_422(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache128_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_423(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_423(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 128 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache128_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_424(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_424(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache16(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].dcache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_425(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_425(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache16_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_426(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_426(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache16_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].dcache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_427(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_427(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache32(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].dcache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_428(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_428(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache32_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_429(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_429(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache32_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].dcache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].dcache.ways << cpu_data[raw_smp_processor_id()].dcache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_430(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_430(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache16(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_431(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_431(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache16_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_432(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_432(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache16_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_433(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_433(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache32(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_434(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_434(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache32_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_435(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_435(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache32_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_436(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_436(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache64(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_437(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_437(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache64_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_438(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_438(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 64 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache64_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_439(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_439(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache128(void) { unsigned long start = 0xffffffff80000000L; unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_440(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_440(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache128_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_441(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_441(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 128 * 32; } while (start < end); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache128_page_indexed(unsigned long page) { unsigned long indexmask = cpu_data[raw_smp_processor_id()].scache.waysize - 1; unsigned long start = 0xffffffff80000000L + (page & indexmask); unsigned long end = start + ((1UL) << 14); unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_442(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_442(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
# 273 "./arch/mips/include/asm/r4kcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache16_user_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_443(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_443(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache16_user_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_444(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_444(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 16 * 32; } while (start < end); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache32_user_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_445(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_445(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache32_user_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_446(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_446(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 32 * 32; } while (start < end); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache64_user_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_447(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_447(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 64 * 32; } while (start < end); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache64_user_page(unsigned long page) { unsigned long start = page; unsigned long end = page + ((1UL) << 14); do { do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_448(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_448(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)((start) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); start += 64 * 32; } while (start < end); }
# 300 "./arch/mips/include/asm/r4kcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void protected_blast_dcache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].dcache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x01 | 0x14)), "r" (addr), "i" (-14)); __err; }); if (addr == aend) break; addr += lsize; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void protected_blast_icache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].icache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x00 | 0x10)), "r" (addr), "i" (-14)); __err; }); if (addr == aend) break; addr += lsize; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void protected_blast_scache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].scache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x03 | 0x14)), "r" (addr), "i" (-14)); __err; }); if (addr == aend) break; addr += lsize; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void protected_loongson2_blast_icache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].icache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { ({ int __err = 0; __asm__ __volatile__( "	.set	push			\n" "	.set	noreorder		\n" "	.set ""arch=r4000""	\n" "1:	cache	%1, (%2)		\n" "2:	.insn				\n" "	.set	pop			\n" "	.section .fixup,\"ax\"		\n" "3:	li	%0, %3			\n" "	j	2b			\n" "	.previous			\n" "	.section __ex_table,\"a\"	\n" "	"".dword"" 1b, 3b		\n" "	.previous" : "+r" (__err) : "i" ((0x00 | 0x00)), "r" (addr), "i" (-14)); __err; }); if (addr == aend) break; addr += lsize; } }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_dcache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].dcache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x14)), "R" (*(unsigned char *)(addr))); if (addr == aend) break; addr += lsize; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_icache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].icache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x00 | 0x10)), "R" (*(unsigned char *)(addr))); if (addr == aend) break; addr += lsize; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].scache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x14)), "R" (*(unsigned char *)(addr))); if (addr == aend) break; addr += lsize; } }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_dcache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].dcache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x01 | 0x10)), "R" (*(unsigned char *)(addr))); if (addr == aend) break; addr += lsize; } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_inv_scache_range(unsigned long start, unsigned long end) { unsigned long lsize = cpu_data[0].scache.linesz; unsigned long addr = start & ~(lsize - 1); unsigned long aend = (end - 1) & ~(lsize - 1); while (1) { __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x10)), "R" (*(unsigned char *)(addr))); if (addr == aend) break; addr += lsize; } }
# 329 "./arch/mips/include/asm/r4kcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache16_node(long node) { unsigned long start = (0x9800000000000000UL) | ((unsigned long)(node) << 44); unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 16 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_449(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_449(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (16))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache32_node(long node) { unsigned long start = (0x9800000000000000UL) | ((unsigned long)(node) << 44); unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 32 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_450(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_450(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (32))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache64_node(long node) { unsigned long start = (0x9800000000000000UL) | ((unsigned long)(node) << 44); unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 64 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_451(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_451(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (64))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blast_scache128_node(long node) { unsigned long start = (0x9800000000000000UL) | ((unsigned long)(node) << 44); unsigned long end = start + cpu_data[raw_smp_processor_id()].scache.waysize; unsigned long ws_inc = 1UL << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws_end = cpu_data[raw_smp_processor_id()].scache.ways << cpu_data[raw_smp_processor_id()].scache.waybit; unsigned long ws, addr; for (ws = 0; ws < ws_end; ws += ws_inc) for (addr = start; addr < end; addr += 128 * 32) do { int i = 0; do { extern void bad_unroll(void) __attribute__((__error__("Unsupported unroll"))); do { __attribute__((__noreturn__)) extern void __compiletime_assert_452(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__builtin_constant_p(32)"))); if (!(!(!__builtin_constant_p(32)))) __compiletime_assert_452(); } while (0); switch (32) { case 32: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 31: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 30: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 29: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 28: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 27: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 26: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 25: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 24: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 23: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 22: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 21: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 20: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 19: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 18: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 17: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 16: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 15: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 14: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 13: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 12: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 11: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 10: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 9: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 8: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 7: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 6: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 5: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 4: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 3: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 2: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 1: __asm__ __volatile__( "	.set	push					\n" "	.set	noreorder				\n" "	.set ""arch=r4000""			\n" "	" "cache " "%0" ", " "%1" "\n" "				\n" "	.set	pop					\n" : : "i" ((0x03 | 0x00)), "R" (*(unsigned char *)((addr | ws) + (i++ * (128))))); __attribute__((__fallthrough__)); case 0: break; default: bad_unroll(); break; } } while (0); } while (0); }
# 31 "arch/mips/kvm/tlb.c" 2


unsigned long GUESTID_MASK;
extern typeof(GUESTID_MASK) GUESTID_MASK; extern const char __kstrtab_GUESTID_MASK[]; extern const char __kstrtabns_GUESTID_MASK[]; asm("	.section \"___kcrctab" "_gpl" "+" "GUESTID_MASK" "\", \"a\"	\n" "	.weak	__crc_" "GUESTID_MASK" "				\n" "	.long	__crc_" "GUESTID_MASK" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "GUESTID_MASK" ":					\n" "	.asciz 	\"" "GUESTID_MASK" "\"					\n" "__kstrtabns_" "GUESTID_MASK" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_GUESTID_MASK __attribute__((section("___ksymtab" "_gpl" "+" "GUESTID_MASK"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&GUESTID_MASK, __kstrtab_GUESTID_MASK, __kstrtabns_GUESTID_MASK };
unsigned long GUESTID_FIRST_VERSION;
extern typeof(GUESTID_FIRST_VERSION) GUESTID_FIRST_VERSION; extern const char __kstrtab_GUESTID_FIRST_VERSION[]; extern const char __kstrtabns_GUESTID_FIRST_VERSION[]; asm("	.section \"___kcrctab" "_gpl" "+" "GUESTID_FIRST_VERSION" "\", \"a\"	\n" "	.weak	__crc_" "GUESTID_FIRST_VERSION" "				\n" "	.long	__crc_" "GUESTID_FIRST_VERSION" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "GUESTID_FIRST_VERSION" ":					\n" "	.asciz 	\"" "GUESTID_FIRST_VERSION" "\"					\n" "__kstrtabns_" "GUESTID_FIRST_VERSION" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_GUESTID_FIRST_VERSION __attribute__((section("___ksymtab" "_gpl" "+" "GUESTID_FIRST_VERSION"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&GUESTID_FIRST_VERSION, __kstrtab_GUESTID_FIRST_VERSION, __kstrtabns_GUESTID_FIRST_VERSION };
unsigned long GUESTID_VERSION_MASK;
extern typeof(GUESTID_VERSION_MASK) GUESTID_VERSION_MASK; extern const char __kstrtab_GUESTID_VERSION_MASK[]; extern const char __kstrtabns_GUESTID_VERSION_MASK[]; asm("	.section \"___kcrctab" "_gpl" "+" "GUESTID_VERSION_MASK" "\", \"a\"	\n" "	.weak	__crc_" "GUESTID_VERSION_MASK" "				\n" "	.long	__crc_" "GUESTID_VERSION_MASK" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "GUESTID_VERSION_MASK" ":					\n" "	.asciz 	\"" "GUESTID_VERSION_MASK" "\"					\n" "__kstrtabns_" "GUESTID_VERSION_MASK" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_GUESTID_VERSION_MASK __attribute__((section("___ksymtab" "_gpl" "+" "GUESTID_VERSION_MASK"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&GUESTID_VERSION_MASK, __kstrtab_GUESTID_VERSION_MASK, __kstrtabns_GUESTID_VERSION_MASK };

static u32 kvm_mips_get_root_asid(struct kvm_vcpu *vcpu)
{
 struct mm_struct *gpa_mm = &vcpu->kvm->arch.gpa_mm;

 if ((cpu_data[0].options & (((((1ULL))) << (51)))))
  return 0;
 else
  return (cpu_context((raw_smp_processor_id()), (gpa_mm)) & cpu_asid_mask(&cpu_data[raw_smp_processor_id()]));
}

static int _kvm_mips_host_tlb_inv(unsigned long entryhi)
{
 int idx;

 do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(entryhi))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(entryhi))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (entryhi); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$10" "\n\t" ".set\tpop" : : "Jr" (entryhi)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" (entryhi)); } while (0); } while (0);
 do { __asm__ __volatile__( "" ); } while (0);

 tlb_probe();
 do { __asm__ __volatile__( "" ); } while (0);
 idx = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$0" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$0" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });

 __BUG_ON((unsigned long)(idx >= cpu_data[raw_smp_processor_id()].tlbsize));

 if (idx >= 0) {
  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)((((0xffffffff80000000L) + ((idx) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)((((0xffffffff80000000L) + ((idx) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = ((((0xffffffff80000000L) + ((idx) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$10" "\n\t" ".set\tpop" : : "Jr" ((((0xffffffff80000000L) + ((idx) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((((0xffffffff80000000L) + ((idx) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0)))); } while (0); } while (0);
  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$2" "\n\t" : : "Jr" ((unsigned int)(0))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$2" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (0); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$2" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$2" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$2" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$2" "\n\t" ".set\tpop" : : "Jr" (0)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$2" ", " "0" "\n\t" ".set\tpop" : : "Jr" (0)); } while (0); } while (0);
  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$3" "\n\t" : : "Jr" ((unsigned int)(0))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$3" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (0); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$3" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$3" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$3" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$3" "\n\t" ".set\tpop" : : "Jr" (0)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$3" ", " "0" "\n\t" ".set\tpop" : : "Jr" (0)); } while (0); } while (0);
  do { __asm__ __volatile__( "" ); } while (0);

  tlb_write_indexed();
  do { __asm__ __volatile__( "" ); } while (0);
 }

 return idx;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_root_gid(void)
{
 if ((cpu_data[0].options & (((((1ULL))) << (51))))) {
  clear_c0_guestctl1(((unsigned long)(0xff) << 16));
  do { __asm__ __volatile__( "" ); } while (0);
 }
}
# 98 "arch/mips/kvm/tlb.c"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_root_gid_to_guest_gid(void)
{
 unsigned int guestctl1;

 if ((cpu_data[0].options & (((((1ULL))) << (51))))) {
  do { __asm__ __volatile__( "" ); } while (0);
  guestctl1 = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
  guestctl1 = (guestctl1 & ~((unsigned long)(0xff) << 16)) |
   ((guestctl1 & ((unsigned long)(0xff) << 0)) >> 0)
           << 16;
  do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(guestctl1))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(guestctl1))); } while (0);
  do { __asm__ __volatile__( "" ); } while (0);
 }
}

int kvm_vz_host_tlb_inv(struct kvm_vcpu *vcpu, unsigned long va)
{
 int idx;
 unsigned long flags, old_entryhi;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);


 set_root_gid_to_guest_gid();

 old_entryhi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) : (unsigned long) ({ unsigned long long __res; if (sizeof(unsigned long) == 4) __res = ({ unsigned long long __val; unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%L0, " "$10" "\n\t" "dsra\t%M0, %L0, 32\n\t" "sll\t%L0, %L0, 0\n\t" ".set\tpop" : "=r" (__val)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%L0, " "$10" ", " "0" "\n\t" "dsra\t%M0, %L0, 32\n\t" "sll\t%L0, %L0, 0\n\t" ".set\tpop" : "=r" (__val)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); __val; }); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmfc0\t%0, " "$10" "\n\t" ".set\tpop" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%0, " "$10" ", " "0" "\n\t" ".set\tpop" : "=r" (__res)); __res; }));

 idx = _kvm_mips_host_tlb_inv((va & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((13) > (cpu_data[0].vmbits - 1)) * 0l)) : (int *)8))), (13) > (cpu_data[0].vmbits - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (64 - 1 - (cpu_data[0].vmbits - 1)))))) |
         kvm_mips_get_root_asid(vcpu));

 do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(old_entryhi))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entryhi))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (old_entryhi); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$10" "\n\t" ".set\tpop" : : "Jr" (old_entryhi)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" (old_entryhi)); } while (0); } while (0);
 clear_root_gid();
 do { __asm__ __volatile__( "" ); } while (0);

 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);





 if (0)
  flush_icache_all();

 if (idx > 0)
  ({ if (0) ({ do {} while (0); _printk("\001" "7" "kvm [%i]: " "%s: Invalidated root entryhi %#lx @ idx %d\n", task_pid_nr((current_thread_info()->task)), __func__, (va & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((13) > (cpu_data[0].vmbits - 1)) * 0l)) : (int *)8))), (13) > (cpu_data[0].vmbits - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (13)) + 1) & (~(((0UL))) >> (64 - 1 - (cpu_data[0].vmbits - 1)))))) | kvm_mips_get_root_asid(vcpu), idx); }); 0; });



 return 0;
}
extern typeof(kvm_vz_host_tlb_inv) kvm_vz_host_tlb_inv; extern const char __kstrtab_kvm_vz_host_tlb_inv[]; extern const char __kstrtabns_kvm_vz_host_tlb_inv[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_vz_host_tlb_inv" "\", \"a\"	\n" "	.weak	__crc_" "kvm_vz_host_tlb_inv" "				\n" "	.long	__crc_" "kvm_vz_host_tlb_inv" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_vz_host_tlb_inv" ":					\n" "	.asciz 	\"" "kvm_vz_host_tlb_inv" "\"					\n" "__kstrtabns_" "kvm_vz_host_tlb_inv" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_vz_host_tlb_inv __attribute__((section("___ksymtab" "_gpl" "+" "kvm_vz_host_tlb_inv"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_vz_host_tlb_inv, __kstrtab_kvm_vz_host_tlb_inv, __kstrtabns_kvm_vz_host_tlb_inv };
# 166 "arch/mips/kvm/tlb.c"
int kvm_vz_guest_tlb_lookup(struct kvm_vcpu *vcpu, unsigned long gva,
       unsigned long *gpa)
{
 unsigned long o_entryhi, o_entrylo[2], o_pagemask;
 unsigned int o_index;
 unsigned long entrylo[2], pagemask, pagemaskbit, pa;
 unsigned long flags;
 int index;


 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);

 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 set_root_gid_to_guest_gid();

 o_entryhi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 o_index = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });

 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)((o_entryhi & 0x3ff) | (gva & ~0xfffl))), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((o_entryhi & 0x3ff) | (gva & ~0xfffl)), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( "" ); } while (0);
 guest_tlb_probe();
 do { __asm__ __volatile__( "" ); } while (0);

 index = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });
 if (index < 0) {

  do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_entryhi)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (o_entryhi), "i" (0)); } while (0); } while (0);
  do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_index)), "i" (0)); } while (0);

  clear_root_gid();
  do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
  do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
  return -14;
 }


 o_entrylo[0] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 o_entrylo[1] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 o_pagemask = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });

 do { __asm__ __volatile__( "" ); } while (0);
 guest_tlb_read();
 do { __asm__ __volatile__( "" ); } while (0);

 entrylo[0] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 entrylo[1] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 pagemask = ~({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) & ~0x1fffl;

 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_entryhi)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (o_entryhi), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_index)), "i" (0)); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_entrylo[0])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (o_entrylo[0]), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_entrylo[1])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (o_entrylo[1]), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(o_pagemask)), "i" (0)); } while (0);

 clear_root_gid();
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);


 pagemaskbit = (pagemask ^ (pagemask & (pagemask - 1))) >> 1;
 pa = entrylo[!!(gva & pagemaskbit)];





 if (!(pa & ((unsigned long)(1) << 1)))
  return -14;





 pa = (pa << 6) & ~0xfffl;
 pa |= gva & ~(pagemask | pagemaskbit);

 *gpa = pa;
 return 0;
}
extern typeof(kvm_vz_guest_tlb_lookup) kvm_vz_guest_tlb_lookup; extern const char __kstrtab_kvm_vz_guest_tlb_lookup[]; extern const char __kstrtabns_kvm_vz_guest_tlb_lookup[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_vz_guest_tlb_lookup" "\", \"a\"	\n" "	.weak	__crc_" "kvm_vz_guest_tlb_lookup" "				\n" "	.long	__crc_" "kvm_vz_guest_tlb_lookup" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_vz_guest_tlb_lookup" ":					\n" "	.asciz 	\"" "kvm_vz_guest_tlb_lookup" "\"					\n" "__kstrtabns_" "kvm_vz_guest_tlb_lookup" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_vz_guest_tlb_lookup __attribute__((section("___ksymtab" "_gpl" "+" "kvm_vz_guest_tlb_lookup"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_vz_guest_tlb_lookup, __kstrtab_kvm_vz_guest_tlb_lookup, __kstrtabns_kvm_vz_guest_tlb_lookup };







void kvm_vz_local_flush_roottlb_all_guests(void)
{
 unsigned long flags;
 unsigned long old_entryhi, old_pagemask, old_guestctl1;
 int entry;

 if (({ int __ret_warn_on = !!(!(cpu_data[0].options & (((((1ULL))) << (51))))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); warn_slowpath_fmt("arch/mips/kvm/tlb.c", 259, 9, ((void *)0)); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);


 old_entryhi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) : (unsigned long) ({ unsigned long long __res; if (sizeof(unsigned long) == 4) __res = ({ unsigned long long __val; unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%L0, " "$10" "\n\t" "dsra\t%M0, %L0, 32\n\t" "sll\t%L0, %L0, 0\n\t" ".set\tpop" : "=r" (__val)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%L0, " "$10" ", " "0" "\n\t" "dsra\t%M0, %L0, 32\n\t" "sll\t%L0, %L0, 0\n\t" ".set\tpop" : "=r" (__val)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); __val; }); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmfc0\t%0, " "$10" "\n\t" ".set\tpop" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%0, " "$10" ", " "0" "\n\t" ".set\tpop" : "=r" (__res)); __res; }));
 old_pagemask = ({ unsigned int __res; if (0 == 0) __asm__ __volatile__( "mfc0\t%0, " "$5" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$5" ", " "0" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });
 old_guestctl1 = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });





 for (entry = 0; entry < cpu_data[raw_smp_processor_id()].tlbsize; entry++) {
  do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$0" "\n\t" : : "Jr" ((unsigned int)(entry))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$0" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(entry))); } while (0);
  do { __asm__ __volatile__( "" ); } while (0);
  tlb_read();
  do { __asm__ __volatile__( "" ); } while (0);


  if (!(({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ((unsigned long)(0xff) << 16)))
   continue;


  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)((((0xffffffff80000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)((((0xffffffff80000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = ((((0xffffffff80000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$10" "\n\t" ".set\tpop" : : "Jr" ((((0xffffffff80000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((((0xffffffff80000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0)))); } while (0); } while (0);
  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$2" "\n\t" : : "Jr" ((unsigned int)(0))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$2" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (0); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$2" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$2" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$2" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$2" "\n\t" ".set\tpop" : : "Jr" (0)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$2" ", " "0" "\n\t" ".set\tpop" : : "Jr" (0)); } while (0); } while (0);
  do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$3" "\n\t" : : "Jr" ((unsigned int)(0))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$3" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (0); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$3" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$3" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$3" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$3" "\n\t" ".set\tpop" : : "Jr" (0)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$3" ", " "0" "\n\t" ".set\tpop" : : "Jr" (0)); } while (0); } while (0);
  do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(0))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0))); } while (0);
  do { __asm__ __volatile__( "" ); } while (0);
  tlb_write_indexed();
 }

 do { if (sizeof(unsigned long) == 4) do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(old_entryhi))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entryhi))); } while (0); else do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (old_entryhi); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$10" ", " "0" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (0 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$10" "\n\t" ".set\tpop" : : "Jr" (old_entryhi)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$10" ", " "0" "\n\t" ".set\tpop" : : "Jr" (old_entryhi)); } while (0); } while (0);
 do { if (0 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$5" "\n\t" : : "Jr" ((unsigned int)(old_pagemask))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$5" ", " "0" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_pagemask))); } while (0);
 do { if (4 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$10" "\n\t" : : "Jr" ((unsigned int)(old_guestctl1))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$10" ", " "4" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_guestctl1))); } while (0);
 do { __asm__ __volatile__( "" ); } while (0);

 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
extern typeof(kvm_vz_local_flush_roottlb_all_guests) kvm_vz_local_flush_roottlb_all_guests; extern const char __kstrtab_kvm_vz_local_flush_roottlb_all_guests[]; extern const char __kstrtabns_kvm_vz_local_flush_roottlb_all_guests[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_vz_local_flush_roottlb_all_guests" "\", \"a\"	\n" "	.weak	__crc_" "kvm_vz_local_flush_roottlb_all_guests" "				\n" "	.long	__crc_" "kvm_vz_local_flush_roottlb_all_guests" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_vz_local_flush_roottlb_all_guests" ":					\n" "	.asciz 	\"" "kvm_vz_local_flush_roottlb_all_guests" "\"					\n" "__kstrtabns_" "kvm_vz_local_flush_roottlb_all_guests" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_vz_local_flush_roottlb_all_guests __attribute__((section("___ksymtab" "_gpl" "+" "kvm_vz_local_flush_roottlb_all_guests"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_vz_local_flush_roottlb_all_guests, __kstrtab_kvm_vz_local_flush_roottlb_all_guests, __kstrtabns_kvm_vz_local_flush_roottlb_all_guests };






void kvm_vz_local_flush_guesttlb_all(void)
{
 unsigned long flags;
 unsigned long old_index;
 unsigned long old_entryhi;
 unsigned long old_entrylo[2];
 unsigned long old_pagemask;
 int entry;
 u64 cvmmemctl2 = 0;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);


 old_index = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });
 old_entryhi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_entrylo[0] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_entrylo[1] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_pagemask = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });

 switch (current_cpu_type()) {
 case CPU_CAVIUM_OCTEON3:

  cvmmemctl2 = ({ unsigned long long __res; if (sizeof(unsigned long) == 4) __res = ({ unsigned long long __val; unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (6 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%L0, " "$16" "\n\t" "dsra\t%M0, %L0, 32\n\t" "sll\t%L0, %L0, 0\n\t" ".set\tpop" : "=r" (__val)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%L0, " "$16" ", " "6" "\n\t" "dsra\t%M0, %L0, 32\n\t" "sll\t%L0, %L0, 0\n\t" ".set\tpop" : "=r" (__val)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); __val; }); else if (6 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmfc0\t%0, " "$16" "\n\t" ".set\tpop" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmfc0\t%0, " "$16" ", " "6" "\n\t" ".set\tpop" : "=r" (__res)); __res; });
  cvmmemctl2 |= ((u64)(1) << 17);
  do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (cvmmemctl2); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$16" ", " "6" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (6 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$16" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$16" ", " "6" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (6 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$16" "\n\t" ".set\tpop" : : "Jr" (cvmmemctl2)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$16" ", " "6" "\n\t" ".set\tpop" : : "Jr" (cvmmemctl2)); } while (0);
  break;
 }


 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (0), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (0), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0)), "i" (0)); } while (0);
 for (entry = 0; entry < cpu_data[raw_smp_processor_id()].guest.tlbsize; entry++) {

  do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(entry)), "i" (0)); } while (0);
  do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)((((0xffffffffa0000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0)))), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((((0xffffffffa0000000L) + ((entry) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0))), "i" (0)); } while (0); } while (0);
  do { __asm__ __volatile__( "" ); } while (0);
  guest_tlb_write_indexed();
 }

 if (cvmmemctl2) {
  cvmmemctl2 &= ~((u64)(1) << 17);
  do { if (sizeof(unsigned long) == 4) do { unsigned long long __tmp = (cvmmemctl2); unsigned long __flags; do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (2 >= 2) __asm__ __volatile__( ".set\tpush\n\t" ".set\t" "mips64r2" "\n\t" "dins\t%L0, %M0, 32, 32\n\t" "dmtc0\t%L0, " "$16" ", " "6" "\n\t" ".set\tpop" : "+r" (__tmp)); else if (6 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$16" "\n\t" ".set\tpop" : "+r" (__tmp)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dsll\t%L0, %L0, 32\n\t" "dsrl\t%L0, %L0, 32\n\t" "dsll\t%M0, %M0, 32\n\t" "or\t%L0, %L0, %M0\n\t" "dmtc0\t%L0, " "$16" ", " "6" "\n\t" ".set\tpop" : "+r" (__tmp)); do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } while (0); else if (6 == 0) __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips3\n\t" "dmtc0\t%z0, " "$16" "\n\t" ".set\tpop" : : "Jr" (cvmmemctl2)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64\n\t" "dmtc0\t%z0, " "$16" ", " "6" "\n\t" ".set\tpop" : : "Jr" (cvmmemctl2)); } while (0);
 }

 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_index)), "i" (0)); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entryhi)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (old_entryhi), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entrylo[0])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (old_entrylo[0]), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entrylo[1])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (old_entrylo[1]), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_pagemask)), "i" (0)); } while (0);
 do { __asm__ __volatile__( "" ); } while (0);

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
extern typeof(kvm_vz_local_flush_guesttlb_all) kvm_vz_local_flush_guesttlb_all; extern const char __kstrtab_kvm_vz_local_flush_guesttlb_all[]; extern const char __kstrtabns_kvm_vz_local_flush_guesttlb_all[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_vz_local_flush_guesttlb_all" "\", \"a\"	\n" "	.weak	__crc_" "kvm_vz_local_flush_guesttlb_all" "				\n" "	.long	__crc_" "kvm_vz_local_flush_guesttlb_all" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_vz_local_flush_guesttlb_all" ":					\n" "	.asciz 	\"" "kvm_vz_local_flush_guesttlb_all" "\"					\n" "__kstrtabns_" "kvm_vz_local_flush_guesttlb_all" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_vz_local_flush_guesttlb_all __attribute__((section("___ksymtab" "_gpl" "+" "kvm_vz_local_flush_guesttlb_all"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_vz_local_flush_guesttlb_all, __kstrtab_kvm_vz_local_flush_guesttlb_all, __kstrtabns_kvm_vz_local_flush_guesttlb_all };
# 373 "arch/mips/kvm/tlb.c"
void kvm_vz_save_guesttlb(struct kvm_mips_tlb *buf, unsigned int index,
     unsigned int count)
{
 unsigned int end = index + count;
 unsigned long old_entryhi, old_entrylo0, old_entrylo1, old_pagemask;
 unsigned int guestctl1 = 0;
 int old_index, i;


 old_index = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });
 old_entryhi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_entrylo0 = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_entrylo1 = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_pagemask = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });


 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 set_root_gid_to_guest_gid();
 if ((cpu_data[0].options & (((((1ULL))) << (51)))))
  guestctl1 = ({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; });


 for (i = index; i < end; ++i, ++buf) {
  do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(i)), "i" (0)); } while (0);

  do { __asm__ __volatile__( "" ); } while (0);
  guest_tlb_read();
  do { __asm__ __volatile__( "" ); } while (0);

  if ((cpu_data[0].options & (((((1ULL))) << (51)))) &&
      (({ unsigned int __res; if (4 == 0) __asm__ __volatile__( "mfc0\t%0, " "$10" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$10" ", " "4" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) ^ guestctl1) & ((unsigned long)(0xff) << 16)) {

   buf->tlb_hi = (((0xffffffffa0000000L) + ((i) << (14 + 1))) | ((cpu_data[0].options & (((((1ULL))) << (25)))) ? ((unsigned long)(1) << 10) : 0));
   buf->tlb_lo[0] = 0;
   buf->tlb_lo[1] = 0;
   buf->tlb_mask = 0;
  } else {

   buf->tlb_hi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
   buf->tlb_lo[0] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
   buf->tlb_lo[1] = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
   buf->tlb_mask = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });
  }
 }


 clear_root_gid();
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);


 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_index)), "i" (0)); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entryhi)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (old_entryhi), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entrylo0)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (old_entrylo0), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entrylo1)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (old_entrylo1), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_pagemask)), "i" (0)); } while (0);

 do { __asm__ __volatile__( "" ); } while (0);
}
extern typeof(kvm_vz_save_guesttlb) kvm_vz_save_guesttlb; extern const char __kstrtab_kvm_vz_save_guesttlb[]; extern const char __kstrtabns_kvm_vz_save_guesttlb[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_vz_save_guesttlb" "\", \"a\"	\n" "	.weak	__crc_" "kvm_vz_save_guesttlb" "				\n" "	.long	__crc_" "kvm_vz_save_guesttlb" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_vz_save_guesttlb" ":					\n" "	.asciz 	\"" "kvm_vz_save_guesttlb" "\"					\n" "__kstrtabns_" "kvm_vz_save_guesttlb" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_vz_save_guesttlb __attribute__((section("___ksymtab" "_gpl" "+" "kvm_vz_save_guesttlb"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_vz_save_guesttlb, __kstrtab_kvm_vz_save_guesttlb, __kstrtabns_kvm_vz_save_guesttlb };
# 442 "arch/mips/kvm/tlb.c"
void kvm_vz_load_guesttlb(const struct kvm_mips_tlb *buf, unsigned int index,
     unsigned int count)
{
 unsigned int end = index + count;
 unsigned long old_entryhi, old_entrylo0, old_entrylo1, old_pagemask;
 int old_index, i;


 old_index = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });
 old_entryhi = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$10" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_entrylo0 = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$2" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_entrylo1 = ((sizeof(unsigned long) == 4) ? (unsigned long) ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }) : (unsigned long) ({ unsigned long long __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmfgc0\t%0, " "$3" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; }));
 old_pagemask = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$5" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });


 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if(!cpu_data[raw_smp_processor_id()].htw_seq++) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) & ~(1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);
 set_root_gid_to_guest_gid();


 for (i = index; i < end; ++i, ++buf) {
  do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(i)), "i" (0)); } while (0);
  do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(buf->tlb_hi)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (buf->tlb_hi), "i" (0)); } while (0); } while (0);
  do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(buf->tlb_lo[0])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (buf->tlb_lo[0]), "i" (0)); } while (0); } while (0);
  do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(buf->tlb_lo[1])), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (buf->tlb_lo[1]), "i" (0)); } while (0); } while (0);
  do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(buf->tlb_mask)), "i" (0)); } while (0);

  do { __asm__ __volatile__( "" ); } while (0);
  guest_tlb_write_indexed();
 }


 clear_root_gid();
 do { unsigned long __flags; if ((cpu_data[0].options & (((((1ULL))) << (28))))) { do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); } while (0); if (!--cpu_data[raw_smp_processor_id()].htw_seq) { do { if (6 == 0) __asm__ __volatile__( "mtc0\t%z0, " "$6" "\n\t" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mtc0\t%z0, " "$6" ", " "6" "\n\t" ".set\tpop" : : "Jr" ((unsigned int)(({ unsigned int __res; if (6 == 0) __asm__ __volatile__( "mfc0\t%0, " "$6" "\n\t" : "=r" (__res)); else __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32\n\t" "mfc0\t%0, " "$6" ", " "6" "\n\t" ".set\tpop\n\t" : "=r" (__res)); __res; }) | (1 << 31)))); } while (0); do { __asm__ __volatile__( "" ); } while (0); } do { do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0); } } while(0);


 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_index)), "i" (0)); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entryhi)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$10" ", %1\n\t" ".set\tpop" : : "Jr" (old_entryhi), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entrylo0)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$2" ", %1\n\t" ".set\tpop" : : "Jr" (old_entrylo0), "i" (0)); } while (0); } while (0);
 do { if (sizeof(unsigned long) == 4) do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_entrylo1)), "i" (0)); } while (0); else do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips64r5\n\t" ".set\tvirt\n\t" "dmtgc0\t%z0, " "$3" ", %1\n\t" ".set\tpop" : : "Jr" (old_entrylo1), "i" (0)); } while (0); } while (0);
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$5" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(old_pagemask)), "i" (0)); } while (0);

 do { __asm__ __volatile__( "" ); } while (0);
}
extern typeof(kvm_vz_load_guesttlb) kvm_vz_load_guesttlb; extern const char __kstrtab_kvm_vz_load_guesttlb[]; extern const char __kstrtabns_kvm_vz_load_guesttlb[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_vz_load_guesttlb" "\", \"a\"	\n" "	.weak	__crc_" "kvm_vz_load_guesttlb" "				\n" "	.long	__crc_" "kvm_vz_load_guesttlb" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_vz_load_guesttlb" ":					\n" "	.asciz 	\"" "kvm_vz_load_guesttlb" "\"					\n" "__kstrtabns_" "kvm_vz_load_guesttlb" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_vz_load_guesttlb __attribute__((section("___ksymtab" "_gpl" "+" "kvm_vz_load_guesttlb"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_vz_load_guesttlb, __kstrtab_kvm_vz_load_guesttlb, __kstrtabns_kvm_vz_load_guesttlb };


void kvm_loongson_clear_guest_vtlb(void)
{
 int idx = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });


 set_root_gid_to_guest_gid();

 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(0)), "i" (0)); } while (0);
 guest_tlbinvf();
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(idx)), "i" (0)); } while (0);

 clear_root_gid();
 set_c0_diag(((unsigned long)(1) << 2) | ((unsigned long)(1) << 3));
}
extern typeof(kvm_loongson_clear_guest_vtlb) kvm_loongson_clear_guest_vtlb; extern const char __kstrtab_kvm_loongson_clear_guest_vtlb[]; extern const char __kstrtabns_kvm_loongson_clear_guest_vtlb[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_loongson_clear_guest_vtlb" "\", \"a\"	\n" "	.weak	__crc_" "kvm_loongson_clear_guest_vtlb" "				\n" "	.long	__crc_" "kvm_loongson_clear_guest_vtlb" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_loongson_clear_guest_vtlb" ":					\n" "	.asciz 	\"" "kvm_loongson_clear_guest_vtlb" "\"					\n" "__kstrtabns_" "kvm_loongson_clear_guest_vtlb" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_loongson_clear_guest_vtlb __attribute__((section("___ksymtab" "_gpl" "+" "kvm_loongson_clear_guest_vtlb"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_loongson_clear_guest_vtlb, __kstrtab_kvm_loongson_clear_guest_vtlb, __kstrtabns_kvm_loongson_clear_guest_vtlb };

void kvm_loongson_clear_guest_ftlb(void)
{
 int i;
 int idx = ({ int __res; __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mfgc0\t%0, " "$0" ", %1\n\t" ".set\tpop" : "=r" (__res) : "i" (0)); __res; });


 set_root_gid_to_guest_gid();

 for (i = cpu_data[raw_smp_processor_id()].tlbsizevtlb;
      i < (cpu_data[raw_smp_processor_id()].tlbsizevtlb +
       cpu_data[raw_smp_processor_id()].tlbsizeftlbsets);
      i++) {
  do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(i)), "i" (0)); } while (0);
  guest_tlbinvf();
 }
 do { __asm__ __volatile__( ".set\tpush\n\t" ".set\tmips32r5\n\t" ".set\tvirt\n\t" "mtgc0\t%z0, " "$0" ", %1\n\t" ".set\tpop" : : "Jr" ((unsigned int)(idx)), "i" (0)); } while (0);

 clear_root_gid();
 set_c0_diag(((unsigned long)(1) << 2) | ((unsigned long)(1) << 3));
}
extern typeof(kvm_loongson_clear_guest_ftlb) kvm_loongson_clear_guest_ftlb; extern const char __kstrtab_kvm_loongson_clear_guest_ftlb[]; extern const char __kstrtabns_kvm_loongson_clear_guest_ftlb[]; asm("	.section \"___kcrctab" "_gpl" "+" "kvm_loongson_clear_guest_ftlb" "\", \"a\"	\n" "	.weak	__crc_" "kvm_loongson_clear_guest_ftlb" "				\n" "	.long	__crc_" "kvm_loongson_clear_guest_ftlb" "				\n" "	.previous					\n"); asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "kvm_loongson_clear_guest_ftlb" ":					\n" "	.asciz 	\"" "kvm_loongson_clear_guest_ftlb" "\"					\n" "__kstrtabns_" "kvm_loongson_clear_guest_ftlb" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static const struct kernel_symbol __ksymtab_kvm_loongson_clear_guest_ftlb __attribute__((section("___ksymtab" "_gpl" "+" "kvm_loongson_clear_guest_ftlb"), used)) __attribute__((__aligned__(sizeof(void *)))) = { (unsigned long)&kvm_loongson_clear_guest_ftlb, __kstrtab_kvm_loongson_clear_guest_ftlb, __kstrtabns_kvm_loongson_clear_guest_ftlb };
