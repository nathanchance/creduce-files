# 1 "drivers/gpu/drm/radeon/evergreen.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 351 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "././include/linux/compiler-version.h" 1
# 2 "<built-in>" 2
# 1 "././include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "././include/linux/kconfig.h" 2
# 3 "<built-in>" 2
# 1 "././include/linux/compiler_types.h" 1
# 65 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler_attributes.h" 1
# 66 "././include/linux/compiler_types.h" 2
# 80 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler-clang.h" 1
# 81 "././include/linux/compiler_types.h" 2
# 102 "././include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 4 "<built-in>" 2
# 1 "drivers/gpu/drm/radeon/evergreen.c" 2
# 25 "drivers/gpu/drm/radeon/evergreen.c"
# 1 "./include/linux/firmware.h" 1




# 1 "./include/linux/types.h" 1





# 1 "./include/uapi/linux/types.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 1 "./include/uapi/asm-generic/types.h" 1






# 1 "./include/asm-generic/int-ll64.h" 1
# 11 "./include/asm-generic/int-ll64.h"
# 1 "./include/uapi/asm-generic/int-ll64.h" 1
# 12 "./include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/riscv/include/uapi/asm/bitsperlong.h" 1
# 12 "./arch/riscv/include/uapi/asm/bitsperlong.h"
# 1 "./include/asm-generic/bitsperlong.h" 1




# 1 "./include/uapi/asm-generic/bitsperlong.h" 1
# 6 "./include/asm-generic/bitsperlong.h" 2
# 13 "./arch/riscv/include/uapi/asm/bitsperlong.h" 2
# 13 "./include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "./include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 8 "./include/uapi/asm-generic/types.h" 2
# 2 "./arch/riscv/include/generated/uapi/asm/types.h" 2
# 6 "./include/uapi/linux/types.h" 2








# 1 "./include/uapi/linux/posix_types.h" 1




# 1 "./include/linux/stddef.h" 1




# 1 "./include/uapi/linux/stddef.h" 1
# 6 "./include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "./include/uapi/linux/posix_types.h" 2
# 25 "./include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "./arch/riscv/include/generated/uapi/asm/posix_types.h" 1
# 1 "./include/uapi/asm-generic/posix_types.h" 1
# 15 "./include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;



typedef __kernel_uid_t __kernel_old_uid_t;
typedef __kernel_gid_t __kernel_old_gid_t;



typedef unsigned int __kernel_old_dev_t;
# 72 "./include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;



typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 2 "./arch/riscv/include/generated/uapi/asm/posix_types.h" 2
# 37 "./include/uapi/linux/posix_types.h" 2
# 15 "./include/uapi/linux/types.h" 2
# 29 "./include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "./include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "./include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ulong_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;
# 46 "./include/linux/types.h"
typedef __kernel_loff_t loff_t;
# 55 "./include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 125 "./include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 143 "./include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;




typedef struct {
 s64 counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;



 unsigned long f_tinode;

 char f_fname[6];
 char f_fpack[6];
};
# 220 "./include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);

typedef void (*swap_func_t)(void *a, void *b, int size);

typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
typedef int (*cmp_func_t)(const void *a, const void *b);
# 6 "./include/linux/firmware.h" 2
# 1 "./include/linux/compiler.h" 1
# 250 "./include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 266 "./include/linux/compiler.h"
# 1 "./arch/riscv/include/generated/asm/rwonce.h" 1
# 1 "./include/asm-generic/rwonce.h" 1
# 26 "./include/asm-generic/rwonce.h"
# 1 "./include/linux/kasan-checks.h" 1
# 22 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 40 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 27 "./include/asm-generic/rwonce.h" 2
# 1 "./include/linux/kcsan-checks.h" 1
# 148 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_check_access(const volatile void *ptr, size_t size,
     int type) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_disable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current_nowarn(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_atomic_next(int n) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_set_access_mask(unsigned long mask) { }

struct kcsan_scoped_access { };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kcsan_scoped_access *
kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
     struct kcsan_scoped_access *sa) { return sa; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
# 184 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_check_access(const volatile void *ptr, size_t size,
          int type) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_disable_current(void) { }
# 28 "./include/asm-generic/rwonce.h" 2
# 64 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __read_once_word_nocheck(const void *addr)
{
 return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
}
# 82 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 2 "./arch/riscv/include/generated/asm/rwonce.h" 2
# 267 "./include/linux/compiler.h" 2
# 7 "./include/linux/firmware.h" 2
# 1 "./include/linux/gfp.h" 1




# 1 "./include/linux/mmdebug.h" 1




# 1 "./include/linux/bug.h" 1




# 1 "./arch/riscv/include/asm/bug.h" 1
# 10 "./arch/riscv/include/asm/bug.h"
# 1 "./include/linux/const.h" 1



# 1 "./include/vdso/const.h" 1




# 1 "./include/uapi/linux/const.h" 1
# 6 "./include/vdso/const.h" 2
# 5 "./include/linux/const.h" 2
# 11 "./arch/riscv/include/asm/bug.h" 2


# 1 "./arch/riscv/include/asm/asm.h" 1
# 14 "./arch/riscv/include/asm/bug.h" 2
# 30 "./arch/riscv/include/asm/bug.h"
typedef u32 bug_insn_t;
# 83 "./arch/riscv/include/asm/bug.h"
# 1 "./include/asm-generic/bug.h" 1





# 1 "./include/linux/instrumentation.h" 1
# 7 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/once_lite.h" 1
# 8 "./include/asm-generic/bug.h" 2
# 21 "./include/asm-generic/bug.h"
# 1 "./include/linux/panic.h" 1







struct pt_regs;

extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
extern bool oops_may_print(void);


extern unsigned int sysctl_oops_all_cpu_backtrace;




extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;

extern unsigned long panic_on_taint;
extern bool panic_on_taint_nousertaint;

extern int sysctl_panic_on_rcu_stall;
extern int sysctl_max_rcu_stall_to_panic;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
# 80 "./include/linux/panic.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE,
};

extern const char *print_tainted(void);
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
# 22 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/printk.h" 1




# 1 "./include/linux/stdarg.h" 1




typedef __builtin_va_list va_list;
# 6 "./include/linux/printk.h" 2
# 1 "./include/linux/init.h" 1
# 116 "./include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);
# 127 "./include/linux/init.h"
typedef initcall_t initcall_entry_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return *entry;
}


extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 303 "./include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 352 "./include/linux/init.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_param(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_options(char *cmdline);
# 7 "./include/linux/printk.h" 2
# 1 "./include/linux/kern_levels.h" 1
# 8 "./include/linux/printk.h" 2
# 1 "./include/linux/linkage.h" 1





# 1 "./include/linux/stringify.h" 1
# 7 "./include/linux/linkage.h" 2
# 1 "./include/linux/export.h" 1
# 72 "./include/linux/export.h"
struct kernel_symbol {
 unsigned long value;
 const char *name;
 const char *namespace;
};
# 8 "./include/linux/linkage.h" 2
# 1 "./arch/riscv/include/asm/linkage.h" 1
# 9 "./include/linux/linkage.h" 2
# 9 "./include/linux/printk.h" 2
# 1 "./include/linux/cache.h" 1




# 1 "./include/uapi/linux/kernel.h" 1




# 1 "./include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "./include/uapi/linux/kernel.h" 2
# 6 "./include/linux/cache.h" 2
# 1 "./arch/riscv/include/asm/cache.h" 1
# 7 "./include/linux/cache.h" 2
# 10 "./include/linux/printk.h" 2
# 1 "./include/linux/ratelimit_types.h" 1




# 1 "./include/linux/bits.h" 1





# 1 "./include/vdso/bits.h" 1
# 7 "./include/linux/bits.h" 2
# 22 "./include/linux/bits.h"
# 1 "./include/linux/build_bug.h" 1
# 23 "./include/linux/bits.h" 2
# 6 "./include/linux/ratelimit_types.h" 2
# 1 "./include/uapi/linux/param.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/param.h" 1
# 1 "./include/asm-generic/param.h" 1




# 1 "./include/uapi/asm-generic/param.h" 1
# 6 "./include/asm-generic/param.h" 2
# 2 "./arch/riscv/include/generated/uapi/asm/param.h" 2
# 6 "./include/uapi/linux/param.h" 2
# 7 "./include/linux/ratelimit_types.h" 2
# 1 "./include/linux/spinlock_types.h" 1
# 12 "./include/linux/spinlock_types.h"
# 1 "./include/linux/spinlock_types_raw.h" 1






# 1 "./arch/riscv/include/asm/spinlock_types.h" 1
# 13 "./arch/riscv/include/asm/spinlock_types.h"
typedef struct {
 volatile unsigned int lock;
} arch_spinlock_t;



typedef struct {
 volatile unsigned int lock;
} arch_rwlock_t;
# 8 "./include/linux/spinlock_types_raw.h" 2




# 1 "./include/linux/lockdep_types.h" 1
# 17 "./include/linux/lockdep_types.h"
enum lockdep_wait_type {
 LD_WAIT_INV = 0,

 LD_WAIT_FREE,
 LD_WAIT_SPIN,




 LD_WAIT_CONFIG = LD_WAIT_SPIN,

 LD_WAIT_SLEEP,

 LD_WAIT_MAX,
};

enum lockdep_lock_type {
 LD_LOCK_NORMAL = 0,
 LD_LOCK_PERCPU,
 LD_LOCK_MAX,
};
# 197 "./include/linux/lockdep_types.h"
struct lock_class_key { };




struct lockdep_map { };

struct pin_cookie { };
# 13 "./include/linux/spinlock_types_raw.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;

 unsigned int magic, owner_cpu;
 void *owner;




} raw_spinlock_t;
# 13 "./include/linux/spinlock_types.h" 2




typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 28 "./include/linux/spinlock_types.h"
 };
} spinlock_t;
# 74 "./include/linux/spinlock_types.h"
# 1 "./include/linux/rwlock_types.h" 1
# 25 "./include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;

 unsigned int magic, owner_cpu;
 void *owner;




} rwlock_t;
# 75 "./include/linux/spinlock_types.h" 2
# 8 "./include/linux/ratelimit_types.h" 2







struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "./include/linux/ratelimit_types.h"
extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 11 "./include/linux/printk.h" 2


extern const char linux_banner[];
extern const char linux_proc_banner[];

extern int oops_in_progress;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 66 "./include/linux/printk.h"
extern int console_printk[];






extern void console_verbose(void);



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 140 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
void early_printk(const char *s, ...) { }


struct dev_printk_info;


           __attribute__((__format__(printf, 4, 0)))
int vprintk_emit(int facility, int level,
   const struct dev_printk_info *dev_info,
   const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int _printk(const char *fmt, ...);




__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int _printk_deferred(const char *fmt, ...);

extern void __printk_safe_enter(void);
extern void __printk_safe_exit(void);
# 178 "./include/linux/printk.h"
extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_log_buf(int early);
__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void dump_stack_lvl(const char *log_lvl) __attribute__((__cold__));
extern void dump_stack(void) __attribute__((__cold__));
# 280 "./include/linux/printk.h"
extern int __printk_cpu_trylock(void);
extern void __printk_wait_on_cpu_lock(void);
extern void __printk_cpu_unlock(void);
# 320 "./include/linux/printk.h"
extern int kptr_restrict;
# 339 "./include/linux/printk.h"
struct module;
# 693 "./include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);
# 732 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 23 "./include/asm-generic/bug.h" 2




struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 95 "./include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 1, 2))) void __warn_printk(const char *fmt, ...);
# 113 "./include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 84 "./arch/riscv/include/asm/bug.h" 2

struct pt_regs;
struct task_struct;

void __show_regs(struct pt_regs *regs);
void die(struct pt_regs *regs, const char *str);
void do_trap(struct pt_regs *regs, int signo, int code, unsigned long addr);
# 6 "./include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

void bug_get_file_line(struct bug_entry *bug, const char **file,
         unsigned int *line);

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

void generic_bug_clear_once(void);
# 80 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 6 "./include/linux/mmdebug.h" 2


struct page;
struct vm_area_struct;
struct mm_struct;

void dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 6 "./include/linux/gfp.h" 2
# 1 "./include/linux/mmzone.h" 1







# 1 "./include/linux/spinlock.h" 1
# 54 "./include/linux/spinlock.h"
# 1 "./include/linux/typecheck.h" 1
# 55 "./include/linux/spinlock.h" 2
# 1 "./include/linux/preempt.h" 1
# 11 "./include/linux/preempt.h"
# 1 "./include/linux/list.h" 1






# 1 "./include/linux/poison.h" 1
# 8 "./include/linux/list.h" 2

# 1 "./include/linux/kernel.h" 1





# 1 "./include/linux/align.h" 1
# 7 "./include/linux/kernel.h" 2
# 1 "./include/linux/limits.h" 1




# 1 "./include/uapi/linux/limits.h" 1
# 6 "./include/linux/limits.h" 2

# 1 "./include/vdso/limits.h" 1
# 8 "./include/linux/limits.h" 2
# 8 "./include/linux/kernel.h" 2




# 1 "./include/linux/bitops.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 6 "./include/linux/bitops.h" 2
# 24 "./include/linux/bitops.h"
extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "./arch/riscv/include/asm/bitops.h" 1
# 14 "./arch/riscv/include/asm/bitops.h"
# 1 "./include/linux/irqflags.h" 1
# 16 "./include/linux/irqflags.h"
# 1 "./arch/riscv/include/asm/irqflags.h" 1
# 10 "./arch/riscv/include/asm/irqflags.h"
# 1 "./arch/riscv/include/asm/processor.h" 1
# 11 "./arch/riscv/include/asm/processor.h"
# 1 "./include/vdso/processor.h" 1
# 10 "./include/vdso/processor.h"
# 1 "./arch/riscv/include/asm/vdso/processor.h" 1






# 1 "./arch/riscv/include/asm/barrier.h" 1
# 72 "./arch/riscv/include/asm/barrier.h"
# 1 "./include/asm-generic/barrier.h" 1
# 17 "./include/asm-generic/barrier.h"
# 1 "./arch/riscv/include/generated/asm/rwonce.h" 1
# 18 "./include/asm-generic/barrier.h" 2
# 73 "./arch/riscv/include/asm/barrier.h" 2
# 8 "./arch/riscv/include/asm/vdso/processor.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_relax(void)
{

 int dummy;

 __asm__ __volatile__ ("div %0, %0, zero" : "=r" (dummy));

 __asm__ __volatile__("": : :"memory");
}
# 11 "./include/vdso/processor.h" 2
# 12 "./arch/riscv/include/asm/processor.h" 2

# 1 "./arch/riscv/include/asm/ptrace.h" 1








# 1 "./arch/riscv/include/uapi/asm/ptrace.h" 1
# 19 "./arch/riscv/include/uapi/asm/ptrace.h"
struct user_regs_struct {
 unsigned long pc;
 unsigned long ra;
 unsigned long sp;
 unsigned long gp;
 unsigned long tp;
 unsigned long t0;
 unsigned long t1;
 unsigned long t2;
 unsigned long s0;
 unsigned long s1;
 unsigned long a0;
 unsigned long a1;
 unsigned long a2;
 unsigned long a3;
 unsigned long a4;
 unsigned long a5;
 unsigned long a6;
 unsigned long a7;
 unsigned long s2;
 unsigned long s3;
 unsigned long s4;
 unsigned long s5;
 unsigned long s6;
 unsigned long s7;
 unsigned long s8;
 unsigned long s9;
 unsigned long s10;
 unsigned long s11;
 unsigned long t3;
 unsigned long t4;
 unsigned long t5;
 unsigned long t6;
};

struct __riscv_f_ext_state {
 __u32 f[32];
 __u32 fcsr;
};

struct __riscv_d_ext_state {
 __u64 f[32];
 __u32 fcsr;
};

struct __riscv_q_ext_state {
 __u64 f[64] __attribute__((aligned(16)));
 __u32 fcsr;




 __u32 reserved[3];
};

union __riscv_fp_state {
 struct __riscv_f_ext_state f;
 struct __riscv_d_ext_state d;
 struct __riscv_q_ext_state q;
};
# 10 "./arch/riscv/include/asm/ptrace.h" 2
# 1 "./arch/riscv/include/asm/csr.h" 1
# 11 "./arch/riscv/include/asm/ptrace.h" 2




struct pt_regs {
 unsigned long epc;
 unsigned long ra;
 unsigned long sp;
 unsigned long gp;
 unsigned long tp;
 unsigned long t0;
 unsigned long t1;
 unsigned long t2;
 unsigned long s0;
 unsigned long s1;
 unsigned long a0;
 unsigned long a1;
 unsigned long a2;
 unsigned long a3;
 unsigned long a4;
 unsigned long a5;
 unsigned long a6;
 unsigned long a7;
 unsigned long s2;
 unsigned long s3;
 unsigned long s4;
 unsigned long s5;
 unsigned long s6;
 unsigned long s7;
 unsigned long s8;
 unsigned long s9;
 unsigned long s10;
 unsigned long s11;
 unsigned long t3;
 unsigned long t4;
 unsigned long t5;
 unsigned long t6;

 unsigned long status;
 unsigned long badaddr;
 unsigned long cause;

 unsigned long orig_a0;
};
# 67 "./arch/riscv/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return regs->epc;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void instruction_pointer_set(struct pt_regs *regs,
        unsigned long val)
{
 regs->epc = val;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_stack_pointer_set(struct pt_regs *regs,
       unsigned long val)
{
 regs->sp = val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return regs->s0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void frame_pointer_set(struct pt_regs *regs,
         unsigned long val)
{
 regs->s0 = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->a0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_return_value(struct pt_regs *regs,
      unsigned long val)
{
 regs->a0 = val;
}

extern int regs_query_register_offset(const char *name);
extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n);

void prepare_ftrace_return(unsigned long *parent, unsigned long self_addr,
      unsigned long frame_pointer);
int do_syscall_trace_enter(struct pt_regs *regs);
void do_syscall_trace_exit(struct pt_regs *regs);
# 136 "./arch/riscv/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_register(struct pt_regs *regs,
           unsigned int offset)
{
 if (__builtin_expect(!!(offset > __builtin_offsetof(struct pt_regs, orig_a0)), 0))
  return 0;

 return *(unsigned long *)((unsigned long)regs + offset);
}
# 155 "./arch/riscv/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_kernel_argument(struct pt_regs *regs,
      unsigned int n)
{
 static const int nr_reg_arguments = 8;
 static const unsigned int argument_offs[] = {
  __builtin_offsetof(struct pt_regs, a0),
  __builtin_offsetof(struct pt_regs, a1),
  __builtin_offsetof(struct pt_regs, a2),
  __builtin_offsetof(struct pt_regs, a3),
  __builtin_offsetof(struct pt_regs, a4),
  __builtin_offsetof(struct pt_regs, a5),
  __builtin_offsetof(struct pt_regs, a6),
  __builtin_offsetof(struct pt_regs, a7),
 };

 if (n < nr_reg_arguments)
  return regs_get_register(regs, argument_offs[n]);
 return 0;
}
# 14 "./arch/riscv/include/asm/processor.h" 2
# 27 "./arch/riscv/include/asm/processor.h"
struct task_struct;
struct pt_regs;


struct thread_struct {

 unsigned long ra;
 unsigned long sp;
 unsigned long s[12];
 struct __riscv_d_ext_state fstate;
 unsigned long bad_cause;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{
 *offset = __builtin_offsetof(struct thread_struct, fstate);
 *size = sizeof((((struct thread_struct *)0)->fstate));
}
# 61 "./arch/riscv/include/asm/processor.h"
extern void start_thread(struct pt_regs *regs,
   unsigned long pc, unsigned long sp);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void release_thread(struct task_struct *dead_task)
{
}

extern unsigned long get_wchan(struct task_struct *p);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_for_interrupt(void)
{
 __asm__ __volatile__ ("wfi");
}

struct device_node;
int riscv_of_processor_hartid(struct device_node *node);
int riscv_of_parent_hartid(struct device_node *node);

extern void riscv_fill_hwcap(void);
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
# 11 "./arch/riscv/include/asm/irqflags.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_save_flags(void)
{
 return ({ register unsigned long __v; __asm__ __volatile__ ("csrr %0, " "0x100" : "=r" (__v) : : "memory"); __v; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_enable(void)
{
 ({ unsigned long __v = (unsigned long)((0x00000002UL)); __asm__ __volatile__ ("csrs " "0x100" ", %0" : : "rK" (__v) : "memory"); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_disable(void)
{
 ({ unsigned long __v = (unsigned long)((0x00000002UL)); __asm__ __volatile__ ("csrc " "0x100" ", %0" : : "rK" (__v) : "memory"); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_irq_save(void)
{
 return ({ unsigned long __v = (unsigned long)((0x00000002UL)); __asm__ __volatile__ ("csrrc %0, " "0x100" ", %1" : "=r" (__v) : "rK" (__v) : "memory"); __v; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & (0x00000002UL));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled(void)
{
 return arch_irqs_disabled_flags(arch_local_save_flags());
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_restore(unsigned long flags)
{
 ({ unsigned long __v = (unsigned long)(flags & (0x00000002UL)); __asm__ __volatile__ ("csrs " "0x100" ", %0" : : "rK" (__v) : "memory"); });
}
# 17 "./include/linux/irqflags.h" 2
# 1 "./arch/riscv/include/generated/asm/percpu.h" 1
# 1 "./include/asm-generic/percpu.h" 1





# 1 "./include/linux/threads.h" 1
# 7 "./include/asm-generic/percpu.h" 2
# 1 "./include/linux/percpu-defs.h" 1
# 308 "./include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __this_cpu_preempt_check(const char *op) { }
# 8 "./include/asm-generic/percpu.h" 2
# 19 "./include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[8];
# 2 "./arch/riscv/include/generated/asm/percpu.h" 2
# 18 "./include/linux/irqflags.h" 2
# 27 "./include/linux/irqflags.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_off(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on_prepare(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_off(unsigned long ip) { }
# 15 "./arch/riscv/include/asm/bitops.h" 2



# 1 "./include/asm-generic/bitops/__ffs.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/__ffs.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 int num = 0;


 if ((word & 0xffffffff) == 0) {
  num += 32;
  word >>= 32;
 }

 if ((word & 0xffff) == 0) {
  num += 16;
  word >>= 16;
 }
 if ((word & 0xff) == 0) {
  num += 8;
  word >>= 8;
 }
 if ((word & 0xf) == 0) {
  num += 4;
  word >>= 4;
 }
 if ((word & 0x3) == 0) {
  num += 2;
  word >>= 2;
 }
 if ((word & 0x1) == 0)
  num += 1;
 return num;
}
# 19 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/ffz.h" 1
# 20 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/fls.h" 1
# 13 "./include/asm-generic/bitops/fls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls(unsigned int x)
{
 int r = 32;

 if (!x)
  return 0;
 if (!(x & 0xffff0000u)) {
  x <<= 16;
  r -= 16;
 }
 if (!(x & 0xff000000u)) {
  x <<= 8;
  r -= 8;
 }
 if (!(x & 0xf0000000u)) {
  x <<= 4;
  r -= 4;
 }
 if (!(x & 0xc0000000u)) {
  x <<= 2;
  r -= 2;
 }
 if (!(x & 0x80000000u)) {
  x <<= 1;
  r -= 1;
 }
 return r;
}
# 21 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/__fls.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/__fls.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 int num = 64 - 1;


 if (!(word & (~0ul << 32))) {
  num -= 32;
  word <<= 32;
 }

 if (!(word & (~0ul << (64 -16)))) {
  num -= 16;
  word <<= 16;
 }
 if (!(word & (~0ul << (64 -8)))) {
  num -= 8;
  word <<= 8;
 }
 if (!(word & (~0ul << (64 -4)))) {
  num -= 4;
  word <<= 4;
 }
 if (!(word & (~0ul << (64 -2)))) {
  num -= 2;
  word <<= 2;
 }
 if (!(word & (~0ul << (64 -1))))
  num -= 1;
 return num;
}
# 22 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/fls64.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/fls64.h" 2
# 27 "./include/asm-generic/bitops/fls64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}
# 23 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/find.h" 1




extern unsigned long _find_next_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long nbits,
  unsigned long start, unsigned long invert, unsigned long le);
extern unsigned long _find_first_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_first_zero_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_last_bit(const unsigned long *addr, unsigned long size);
# 22 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
       unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 0);
}
# 51 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr1, addr2, size, offset, 0UL, 0);
}
# 80 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 0);
}
# 158 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_last_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __fls(val) : size;
 }

 return _find_last_bit(addr, size);
}
# 181 "./include/asm-generic/bitops/find.h"
extern unsigned long find_next_clump8(unsigned long *clump,
          const unsigned long *addr,
          unsigned long size, unsigned long offset);
# 24 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/sched.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/bitops/sched.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "./include/asm-generic/bitops/sched.h"
}
# 25 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/ffs.h" 1
# 13 "./include/asm-generic/bitops/ffs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ffs(int x)
{
 int r = 1;

 if (!x)
  return 0;
 if (!(x & 0xffff)) {
  x >>= 16;
  r += 16;
 }
 if (!(x & 0xff)) {
  x >>= 8;
  r += 8;
 }
 if (!(x & 0xf)) {
  x >>= 4;
  r += 4;
 }
 if (!(x & 3)) {
  x >>= 2;
  r += 2;
 }
 if (!(x & 1)) {
  x >>= 1;
  r += 1;
 }
 return r;
}
# 26 "./arch/riscv/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/hweight.h" 1




# 1 "./include/asm-generic/bitops/arch_hweight.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/arch_hweight.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "./include/asm-generic/bitops/hweight.h" 2
# 1 "./include/asm-generic/bitops/const_hweight.h" 1
# 7 "./include/asm-generic/bitops/hweight.h" 2
# 28 "./arch/riscv/include/asm/bitops.h" 2
# 72 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit(int nr, volatile unsigned long *addr)
{
 return ({ unsigned long __res, __mask; __mask = ((((1UL))) << ((nr) % 64)); __asm__ __volatile__ ( "amo" "or" ".d" ".aqrl" " %0, %2, %1" : "=r" (__res), "+A" (addr[((nr) / 64)]) : "r" ((__mask)) : "memory"); ((__res & __mask) != 0); });
}
# 84 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit(int nr, volatile unsigned long *addr)
{
 return ({ unsigned long __res, __mask; __mask = ((((1UL))) << ((nr) % 64)); __asm__ __volatile__ ( "amo" "and" ".d" ".aqrl" " %0, %2, %1" : "=r" (__res), "+A" (addr[((nr) / 64)]) : "r" ((~(__mask))) : "memory"); ((__res & __mask) != 0); });
}
# 97 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_change_bit(int nr, volatile unsigned long *addr)
{
 return ({ unsigned long __res, __mask; __mask = ((((1UL))) << ((nr) % 64)); __asm__ __volatile__ ( "amo" "xor" ".d" ".aqrl" " %0, %2, %1" : "=r" (__res), "+A" (addr[((nr) / 64)]) : "r" ((__mask)) : "memory"); ((__res & __mask) != 0); });
}
# 114 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit(int nr, volatile unsigned long *addr)
{
 __asm__ __volatile__ ( "amo" "or" ".d" "" " zero, %1, %0" : "+A" (addr[((nr) / 64)]) : "r" ((((((1UL))) << ((nr) % 64)))) : "memory");;
}
# 128 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit(int nr, volatile unsigned long *addr)
{
 __asm__ __volatile__ ( "amo" "and" ".d" "" " zero, %1, %0" : "+A" (addr[((nr) / 64)]) : "r" ((~(((((1UL))) << ((nr) % 64))))) : "memory");;
}
# 142 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_bit(int nr, volatile unsigned long *addr)
{
 __asm__ __volatile__ ( "amo" "xor" ".d" "" " zero, %1, %0" : "+A" (addr[((nr) / 64)]) : "r" ((((((1UL))) << ((nr) % 64)))) : "memory");;
}
# 155 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_lock(
 unsigned long nr, volatile unsigned long *addr)
{
 return ({ unsigned long __res, __mask; __mask = ((((1UL))) << ((nr) % 64)); __asm__ __volatile__ ( "amo" "or" ".d" ".aq" " %0, %2, %1" : "=r" (__res), "+A" (addr[((nr) / 64)]) : "r" ((__mask)) : "memory"); ((__res & __mask) != 0); });
}
# 168 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_unlock(
 unsigned long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__ ( "amo" "and" ".d" ".rl" " zero, %1, %0" : "+A" (addr[((nr) / 64)]) : "r" ((~(((((1UL))) << ((nr) % 64))))) : "memory");;
}
# 189 "./arch/riscv/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_unlock(
 unsigned long nr, volatile unsigned long *addr)
{
 clear_bit_unlock(nr, addr);
}







# 1 "./include/asm-generic/bitops/non-atomic.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/non-atomic.h" 2
# 16 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p |= mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p &= ~mask;
}
# 45 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch___change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p ^= mask;
}
# 64 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 85 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_bit(unsigned int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 64)] >> (nr & (64 -1)));
}
# 202 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/le.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/bitops/le.h" 2
# 1 "./arch/riscv/include/uapi/asm/byteorder.h" 1
# 10 "./arch/riscv/include/uapi/asm/byteorder.h"
# 1 "./include/linux/byteorder/little_endian.h" 1




# 1 "./include/uapi/linux/byteorder/little_endian.h" 1
# 13 "./include/uapi/linux/byteorder/little_endian.h"
# 1 "./include/linux/swab.h" 1




# 1 "./include/uapi/linux/swab.h" 1







# 1 "./arch/riscv/include/generated/uapi/asm/swab.h" 1
# 1 "./include/uapi/asm-generic/swab.h" 1
# 2 "./arch/riscv/include/generated/uapi/asm/swab.h" 2
# 9 "./include/uapi/linux/swab.h" 2
# 48 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__builtin_constant_p((__u64)(y)) ? ((__u64)( (((__u64)(y) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(y) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(y) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(y) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(y) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(y) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(y) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(y) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(y));



}
# 171 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "./include/linux/swab.h" 2
# 14 "./include/uapi/linux/byteorder/little_endian.h" 2
# 44 "./include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "./include/linux/byteorder/little_endian.h" 2





# 1 "./include/linux/byteorder/generic.h" 1
# 144 "./include/linux/byteorder/generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__builtin_constant_p((__u32)((src[i]))) ? ((__u32)( (((__u32)((src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)((src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)((src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32((src[i]))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (__builtin_constant_p((__u32)(( __u32)(__be32)(src[i]))) ? ((__u32)( (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(src[i])));
}
# 12 "./include/linux/byteorder/little_endian.h" 2
# 11 "./arch/riscv/include/uapi/asm/byteorder.h" 2
# 8 "./include/asm-generic/bitops/le.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_next_zero_bit((addr), (size), 0);
}
# 83 "./include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit_le(int nr, const void *addr)
{
 return arch_test_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit_le(int nr, void *addr)
{
 arch___set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_le(int nr, void *addr)
{
 arch___clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit_le(int nr, void *addr)
{
 return arch___test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return arch___test_and_clear_bit(nr ^ 0, addr);
}
# 203 "./arch/riscv/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/ext2-atomic.h" 1
# 204 "./arch/riscv/include/asm/bitops.h" 2
# 34 "./include/linux/bitops.h" 2
# 69 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 169 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order(unsigned int count)
{
 if (count == 0)
  return -1;

 return fls(--count);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 return (int)fls_long(--l);
}
# 222 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  arch___set_bit(nr, addr);
 else
  arch___clear_bit(nr, addr);
}
# 13 "./include/linux/kernel.h" 2
# 1 "./include/linux/kstrtox.h" 1








int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 30 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 58 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}
# 145 "./include/linux/kstrtox.h"
extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}
# 14 "./include/linux/kernel.h" 2
# 1 "./include/linux/log2.h" 1
# 21 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 198 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 225 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 15 "./include/linux/kernel.h" 2
# 1 "./include/linux/math.h" 1




# 1 "./arch/riscv/include/generated/asm/div64.h" 1
# 1 "./include/asm-generic/div64.h" 1
# 2 "./arch/riscv/include/generated/asm/div64.h" 2
# 6 "./include/linux/math.h" 2
# 160 "./include/linux/math.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 int_sqrt64(u64 x)
{
 return (u32)int_sqrt(x);
}
# 16 "./include/linux/kernel.h" 2
# 1 "./include/linux/minmax.h" 1
# 17 "./include/linux/kernel.h" 2




# 1 "./include/linux/static_call_types.h" 1
# 32 "./include/linux/static_call_types.h"
struct static_call_site {
 s32 addr;
 s32 key;
};
# 94 "./include/linux/static_call_types.h"
struct static_call_key {
 void *func;
};
# 22 "./include/linux/kernel.h" 2
# 88 "./include/linux/kernel.h"
struct completion;
struct user;
# 114 "./include/linux/kernel.h"
extern void ___might_sleep(const char *file, int line, int preempt_offset);
extern void __might_sleep(const char *file, int line, int preempt_offset);
extern void __cant_sleep(const char *file, int line, int preempt_offset);
extern void __cant_migrate(const char *file, int line);
# 188 "./include/linux/kernel.h"
void __might_fault(const char *file, int line);




void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int no_hash_pointers_enable(char *str);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int init_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

extern void bust_spinlocks(int yes);

extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;

extern const char hex_asc[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 306 "./include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};
# 456 "./include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_start(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_stop(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_dump_stack(int skip) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_on(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_off(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tracing_is_on(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_snapshot(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_snapshot_alloc(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
int trace_printk(const char *fmt, ...)
{
 return 0;
}
static __attribute__((__format__(printf, 1, 0))) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
ftrace_vprintk(const char *fmt, va_list ap)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
# 10 "./include/linux/list.h" 2
# 33 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD(struct list_head *list)
{
 do { do { extern void __compiletime_assert_0(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_0(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 list->prev = list;
}


extern bool __list_add_valid(struct list_head *new,
         struct list_head *prev,
         struct list_head *next);
extern bool __list_del_entry_valid(struct list_head *entry);
# 63 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 do { do { extern void __compiletime_assert_1(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_1(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
}
# 84 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 98 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 110 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 do { do { extern void __compiletime_assert_2(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_2(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 124 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + 0);
 entry->prev = ((void *) 0x122 + 0);
}
# 158 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}
# 174 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_init(struct list_head *old,
         struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 240 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty(const struct list_head *head)
{
 return ({ do { extern void __compiletime_assert_3(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_3(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
}
# 296 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init_careful(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = entry;
 do { do { extern void __compiletime_assert_4(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)))) __compiletime_assert_4(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_5(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)) || sizeof(*&entry->next) == sizeof(long long))) __compiletime_assert_5(); } while (0); do { *(volatile typeof(*&entry->next) *)&(*&entry->next) = (entry); } while (0); } while (0); } while (0);
}
# 316 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = ({ typeof(*&head->next) ___p1 = ({ do { extern void __compiletime_assert_6(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)) || sizeof(*&head->next) == sizeof(long long))) __compiletime_assert_6(); } while (0); (*(const volatile typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) *)&(*&head->next)); }); do { extern void __compiletime_assert_7(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)))) __compiletime_assert_7(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 343 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 389 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 417 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 478 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 495 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 792 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}
# 806 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}
# 819 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed_lockless(const struct hlist_node *h)
{
 return !({ do { extern void __compiletime_assert_8(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_8(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_empty(const struct hlist_head *h)
{
 return !({ do { extern void __compiletime_assert_9(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_9(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 do { do { extern void __compiletime_assert_10(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_10(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (next)
  do { do { extern void __compiletime_assert_11(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_11(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}
# 850 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}
# 879 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 do { do { extern void __compiletime_assert_12(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_12(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
 if (first)
  do { do { extern void __compiletime_assert_13(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_13(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_14(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_14(); } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
 do { do { extern void __compiletime_assert_15(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_15(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before(struct hlist_node *n,
        struct hlist_node *next)
{
 do { do { extern void __compiletime_assert_16(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_16(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 do { do { extern void __compiletime_assert_17(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_17(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_18(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_18(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_19(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(n->pprev)) == sizeof(char) || sizeof(*(n->pprev)) == sizeof(short) || sizeof(*(n->pprev)) == sizeof(int) || sizeof(*(n->pprev)) == sizeof(long)) || sizeof(*(n->pprev)) == sizeof(long long))) __compiletime_assert_19(); } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 do { do { extern void __compiletime_assert_20(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_20(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_21(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_21(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
 do { do { extern void __compiletime_assert_22(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_22(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);

 if (n->next)
  do { do { extern void __compiletime_assert_23(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_23(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 927 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}
# 949 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}
# 963 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 12 "./include/linux/preempt.h" 2
# 78 "./include/linux/preempt.h"
# 1 "./arch/riscv/include/generated/asm/preempt.h" 1
# 1 "./include/asm-generic/preempt.h" 1




# 1 "./include/linux/thread_info.h" 1
# 14 "./include/linux/thread_info.h"
# 1 "./include/linux/restart_block.h" 1
# 10 "./include/linux/restart_block.h"
# 1 "./include/linux/time64.h" 1




# 1 "./include/linux/math64.h" 1






# 1 "./include/vdso/math64.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 8 "./include/linux/math64.h" 2
# 1 "./arch/riscv/include/generated/asm/div64.h" 1
# 9 "./include/linux/math64.h" 2
# 26 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 40 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 54 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 67 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
# 79 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 125 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 138 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}
# 239 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_s64_u64_shr(s64 a, u64 b, unsigned int shift)
{
 u64 ret;





 ret = mul_u64_u64_shr(__builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long long) || __builtin_types_compatible_p(typeof(a), unsigned long long), ({ signed long long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long) || __builtin_types_compatible_p(typeof(a), unsigned long), ({ signed long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed int) || __builtin_types_compatible_p(typeof(a), unsigned int), ({ signed int __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed short) || __builtin_types_compatible_p(typeof(a), unsigned short), ({ signed short __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed char) || __builtin_types_compatible_p(typeof(a), unsigned char), ({ signed char __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), char), (char)({ signed char __x = (a); __x<0?-__x:__x; }), ((void)0))))))), b, shift);

 if (a < 0)
  ret = -((s64) ret);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}


u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
# 6 "./include/linux/time64.h" 2
# 1 "./include/vdso/time64.h" 1
# 7 "./include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;

# 1 "./include/uapi/linux/time.h" 1





# 1 "./include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "./include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_old_timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};

struct __kernel_old_itimerval {
 struct __kernel_old_timeval it_interval;
 struct __kernel_old_timeval it_value;
};

struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "./include/uapi/linux/time.h" 2
# 33 "./include/uapi/linux/time.h"
struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 12 "./include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 43 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 127 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec64_to_ns(const struct timespec64 *ts)
{

 if (ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return ((s64)~((u64)1 << 63));

 if (ts->tv_sec <= ((-((s64)~((u64)1 << 63)) - 1) / 1000000000L))
  return (-((s64)~((u64)1 << 63)) - 1);

 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 155 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 11 "./include/linux/restart_block.h" 2

struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 unsigned long arch_data;
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 15 "./include/linux/thread_info.h" 2
# 1 "./include/linux/errno.h" 1




# 1 "./include/uapi/linux/errno.h" 1
# 1 "./arch/riscv/include/generated/uapi/asm/errno.h" 1
# 1 "./include/uapi/asm-generic/errno.h" 1




# 1 "./include/uapi/asm-generic/errno-base.h" 1
# 6 "./include/uapi/asm-generic/errno.h" 2
# 2 "./arch/riscv/include/generated/uapi/asm/errno.h" 2
# 2 "./include/uapi/linux/errno.h" 2
# 6 "./include/linux/errno.h" 2
# 16 "./include/linux/thread_info.h" 2







# 1 "./arch/riscv/include/asm/current.h" 1
# 18 "./arch/riscv/include/asm/current.h"
struct task_struct;

register struct task_struct *riscv_current_is_tp __asm__("tp");
# 29 "./arch/riscv/include/asm/current.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct task_struct *get_current(void)
{
 return riscv_current_is_tp;
}
# 24 "./include/linux/thread_info.h" 2
# 33 "./include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};
# 60 "./include/linux/thread_info.h"
# 1 "./arch/riscv/include/asm/thread_info.h" 1
# 11 "./arch/riscv/include/asm/thread_info.h"
# 1 "./arch/riscv/include/asm/page.h" 1
# 12 "./arch/riscv/include/asm/page.h"
# 1 "./include/linux/pfn.h" 1
# 13 "./include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 13 "./arch/riscv/include/asm/page.h" 2
# 52 "./arch/riscv/include/asm/page.h"
typedef struct {
 unsigned long pgd;
} pgd_t;


typedef struct {
 unsigned long pte;
} pte_t;

typedef struct {
 unsigned long pgprot;
} pgprot_t;

typedef struct page *pgtable_t;
# 82 "./arch/riscv/include/asm/page.h"
extern unsigned long riscv_pfn_base;





struct kernel_mapping {
 unsigned long virt_addr;
 uintptr_t phys_addr;
 uintptr_t size;

 unsigned long va_pa_offset;

 unsigned long va_kernel_pa_offset;
 unsigned long va_kernel_xip_pa_offset;




};

extern struct kernel_mapping kernel_map;
extern phys_addr_t phys_ram_base;
# 174 "./arch/riscv/include/asm/page.h"
# 1 "./include/asm-generic/memory_model.h" 1
# 175 "./arch/riscv/include/asm/page.h" 2
# 1 "./include/asm-generic/getorder.h" 1
# 29 "./include/asm-generic/getorder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - (12);

  if (size < (1UL << (12)))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - (12) + 1;
 }

 size--;
 size >>= (12);



 return fls64(size);

}
# 176 "./arch/riscv/include/asm/page.h" 2
# 12 "./arch/riscv/include/asm/thread_info.h" 2
# 50 "./arch/riscv/include/asm/thread_info.h"
struct thread_info {
 unsigned long flags;
 int preempt_count;





 long kernel_sp;
 long user_sp;
 int cpu;
};
# 61 "./include/linux/thread_info.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long set_restart_fn(struct restart_block *restart,
     long (*fn)(struct restart_block *))
{
 restart->fn = fn;
 do { } while (0);
 return -516;
}
# 87 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return arch_test_bit(flag, (unsigned long *)&ti->flags);
}
# 169 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}
# 188 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_object_size(const void *ptr, unsigned long n,
         bool to_user)
{ }


extern void __attribute__((__error__("copy source size is too small")))
__bad_copy_from(void);
extern void __attribute__((__error__("copy destination size is too small")))
__bad_copy_to(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Buffer overflow detected (%d < %lu)!\n", size, count); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/thread_info.h"), "i" (200), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = -1;
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 if (({ int __ret_warn_on = !!(bytes > ((int)(~0U >> 1))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/thread_info.h"), "i" (216), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 check_object_size(addr, bytes, is_source);
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_setup_new_exec(void) { }
# 6 "./include/asm-generic/preempt.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int preempt_count(void)
{
 return ({ do { extern void __compiletime_assert_24(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(char) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(short) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(int) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(long)) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(long long))) __compiletime_assert_24(); } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->preempt_count))) *)&(((struct thread_info *)get_current())->preempt_count)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) volatile int *preempt_count_ptr(void)
{
 return &((struct thread_info *)get_current())->preempt_count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void preempt_count_set(int pc)
{
 *preempt_count_ptr() = pc;
}
# 35 "./include/asm-generic/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool test_preempt_need_resched(void)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_add(int val)
{
 *preempt_count_ptr() += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_sub(int val)
{
 *preempt_count_ptr() -= val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __preempt_count_dec_and_test(void)
{





 return !--*preempt_count_ptr() && test_ti_thread_flag(((struct thread_info *)get_current()), 3);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(preempt_count() == preempt_offset && test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);

}
# 2 "./arch/riscv/include/generated/asm/preempt.h" 2
# 79 "./include/linux/preempt.h" 2
# 392 "./include/linux/preempt.h"
extern void migrate_disable(void);
extern void migrate_enable(void);
# 56 "./include/linux/spinlock.h" 2






# 1 "./include/linux/bottom_half.h" 1
# 10 "./include/linux/bottom_half.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool local_bh_blocked(void) { return false; }
# 63 "./include/linux/spinlock.h" 2
# 1 "./include/linux/lockdep.h" 1
# 14 "./include/linux/lockdep.h"
# 1 "./include/linux/smp.h" 1
# 13 "./include/linux/smp.h"
# 1 "./include/linux/cpumask.h" 1
# 12 "./include/linux/cpumask.h"
# 1 "./include/linux/bitmap.h" 1
# 10 "./include/linux/bitmap.h"
# 1 "./include/linux/string.h" 1
# 10 "./include/linux/string.h"
# 1 "./include/uapi/linux/string.h" 1
# 11 "./include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "./arch/riscv/include/asm/string.h" 1
# 13 "./arch/riscv/include/asm/string.h"
extern void *memset(void *, int, size_t);
extern void *__memset(void *, int, size_t);

extern void *memcpy(void *, const void *, size_t);
extern void *__memcpy(void *, const void *, size_t);

extern void *memmove(void *, const void *, size_t);
extern void *__memmove(void *, const void *, size_t);
# 21 "./include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);


extern int strncmp(const char *,const char *,__kernel_size_t);


extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);


extern char * strchr(const char *,int);


extern char * strchrnul(const char *,int);

extern char * strnchrnul(const char *, size_t, int);

extern char * strnchr(const char *, size_t, int);


extern char * strrchr(const char *,int);

extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);



extern void *memset32(uint32_t *, uint32_t, __kernel_size_t);



extern void *memset64(uint64_t *, uint64_t, __kernel_size_t);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 153 "./include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp(const void *,const void *,__kernel_size_t);


extern int bcmp(const void *,const void *,__kernel_size_t);


extern void * memchr(const void *,int,__kernel_size_t);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
}


void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 199 "./include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((__format__(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);

int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
# 235 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_explicit(void *s, size_t count)
{
 memset(s, 0, count);
 __asm__ __volatile__("": :"r"(s) :"memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}




void fortify_panic(const char *name) __attribute__((__noreturn__)) __attribute__((__cold__));
void __read_overflow(void) __attribute__((__error__("detected read beyond size of object passed as 1st parameter")));
void __read_overflow2(void) __attribute__((__error__("detected read beyond size of object passed as 2nd parameter")));
void __read_overflow3(void) __attribute__((__error__("detected read beyond size of object passed as 3rd parameter")));
void __write_overflow(void) __attribute__((__error__("detected write beyond size of object passed as 1st parameter")));
# 273 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  memcpy(dest, src, count);
  memset(dest + count, pad, dest_len - count);
 } else
  memcpy(dest, src, dest_len);
}
# 298 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 11 "./include/linux/bitmap.h" 2


struct device;
# 124 "./include/linux/bitmap.h"
unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
void bitmap_free(const unsigned long *bitmap);


unsigned long *devm_bitmap_alloc(struct device *dev,
     unsigned int nbits, gfp_t flags);
unsigned long *devm_bitmap_zalloc(struct device *dev,
      unsigned int nbits, gfp_t flags);





int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
void __bitmap_complement(unsigned long *dst, const unsigned long *src,
    unsigned int nbits);
void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
     unsigned int shift, unsigned int nbits);
void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
void bitmap_cut(unsigned long *dst, const unsigned long *src,
  unsigned int first, unsigned int cut, unsigned int nbits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
    const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_replace(unsigned long *dst,
        const unsigned long *old, const unsigned long *new,
        const unsigned long *mask, unsigned int nbits);
int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_subset(const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
void __bitmap_set(unsigned long *map, unsigned int start, int len);
void __bitmap_clear(unsigned long *map, unsigned int start, int len);

unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 190 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *dst, int nbits);
int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);






unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);

extern int bitmap_print_bitmask_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);

extern int bitmap_print_list_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 64)
  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
}






void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
       unsigned int nbits);
void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
       unsigned int nbits);
# 287 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 337 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 357 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_next_bit((src), (nbits), 0) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_next_zero_bit((src), (nbits), 0) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_replace(unsigned long *dst,
      const unsigned long *old,
      const unsigned long *new,
      const unsigned long *mask,
      unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*old & ~(*mask)) | (*new & *mask);
 else
  __bitmap_replace(dst, old, new, mask, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_clear_region(unsigned long *bitmap,
         unsigned int *rs, unsigned int *re,
         unsigned int end)
{
 *rs = find_next_zero_bit(bitmap, end, *rs);
 *re = find_next_bit(bitmap, end, *rs + 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_set_region(unsigned long *bitmap,
       unsigned int *rs, unsigned int *re,
       unsigned int end)
{
 *rs = find_next_bit(bitmap, end, *rs);
 *re = find_next_zero_bit(bitmap, end, *rs + 1);
}
# 545 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 561 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long bitmap_get_value8(const unsigned long *map,
           unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 return (map[index] >> offset) & 0xFF;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_set_value8(unsigned long *map, unsigned long value,
         unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 map[index] &= ~(0xFFUL << offset);
 map[index] |= value << offset;
}
# 13 "./include/linux/cpumask.h" 2
# 1 "./include/linux/atomic.h" 1






# 1 "./arch/riscv/include/asm/atomic.h" 1
# 19 "./arch/riscv/include/asm/atomic.h"
# 1 "./arch/riscv/include/asm/cmpxchg.h" 1
# 12 "./arch/riscv/include/asm/cmpxchg.h"
# 1 "./arch/riscv/include/asm/fence.h" 1
# 13 "./arch/riscv/include/asm/cmpxchg.h" 2
# 20 "./arch/riscv/include/asm/atomic.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_read(const atomic_t *v)
{
 return ({ do { extern void __compiletime_assert_25(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_25(); } while (0); (*(const volatile typeof( _Generic((v->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (v->counter))) *)&(v->counter)); });
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_set(atomic_t *v, int i)
{
 do { do { extern void __compiletime_assert_26(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_26(); } while (0); do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_read(const atomic64_t *v)
{
 return ({ do { extern void __compiletime_assert_27(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_27(); } while (0); (*(const volatile typeof( _Generic((v->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (v->counter))) *)&(v->counter)); });
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_set(atomic64_t *v, s64 i)
{
 do { do { extern void __compiletime_assert_28(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(v->counter) == sizeof(char) || sizeof(v->counter) == sizeof(short) || sizeof(v->counter) == sizeof(int) || sizeof(v->counter) == sizeof(long)) || sizeof(v->counter) == sizeof(long long))) __compiletime_assert_28(); } while (0); do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0); } while (0);
}
# 74 "./arch/riscv/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_add(int i, atomic_t *v) { __asm__ __volatile__ ( "	amo" "add" "." "w" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_add(s64 i, atomic64_t *v) { __asm__ __volatile__ ( "	amo" "add" "." "d" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_sub(int i, atomic_t *v) { __asm__ __volatile__ ( "	amo" "add" "." "w" " zero, %1, %0" : "+A" (v->counter) : "r" (-i) : "memory"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_sub(s64 i, atomic64_t *v) { __asm__ __volatile__ ( "	amo" "add" "." "d" " zero, %1, %0" : "+A" (v->counter) : "r" (-i) : "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_and(int i, atomic_t *v) { __asm__ __volatile__ ( "	amo" "and" "." "w" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_and(s64 i, atomic64_t *v) { __asm__ __volatile__ ( "	amo" "and" "." "d" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_or(int i, atomic_t *v) { __asm__ __volatile__ ( "	amo" "or" "." "w" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_or(s64 i, atomic64_t *v) { __asm__ __volatile__ ( "	amo" "or" "." "d" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_xor(int i, atomic_t *v) { __asm__ __volatile__ ( "	amo" "xor" "." "w" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_xor(s64 i, atomic64_t *v) { __asm__ __volatile__ ( "	amo" "xor" "." "d" " zero, %1, %0" : "+A" (v->counter) : "r" (i) : "memory"); }
# 138 "./arch/riscv/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add_relaxed(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "add" "." "w" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "add" "." "w" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_add_return_relaxed(int i, atomic_t *v) { return arch_atomic_fetch_add_relaxed(i, v) + i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_add_return(int i, atomic_t *v) { return arch_atomic_fetch_add(i, v) + i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_add_relaxed(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "add" "." "d" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_add(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "add" "." "d" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_add_return_relaxed(s64 i, atomic64_t *v) { return arch_atomic64_fetch_add_relaxed(i, v) + i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_add_return(s64 i, atomic64_t *v) { return arch_atomic64_fetch_add(i, v) + i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub_relaxed(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "add" "." "w" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (-i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "add" "." "w" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (-i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_return_relaxed(int i, atomic_t *v) { return arch_atomic_fetch_sub_relaxed(i, v) + -i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_return(int i, atomic_t *v) { return arch_atomic_fetch_sub(i, v) + -i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "add" "." "d" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (-i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_sub(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "add" "." "d" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (-i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_sub_return_relaxed(s64 i, atomic64_t *v) { return arch_atomic64_fetch_sub_relaxed(i, v) + -i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_sub_return(s64 i, atomic64_t *v) { return arch_atomic64_fetch_sub(i, v) + -i; }
# 174 "./arch/riscv/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_and_relaxed(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "and" "." "w" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_and(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "and" "." "w" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_and_relaxed(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "and" "." "d" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_and(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "and" "." "d" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_or_relaxed(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "or" "." "w" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_or(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "or" "." "w" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_or_relaxed(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "or" "." "d" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_or(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "or" "." "d" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor_relaxed(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "xor" "." "w" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor(int i, atomic_t *v) { register int ret; __asm__ __volatile__ ( "	amo" "xor" "." "w" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "xor" "." "d" " %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_xor(s64 i, atomic64_t *v) { register s64 ret; __asm__ __volatile__ ( "	amo" "xor" "." "d" ".aqrl  %1, %2, %0" : "+A" (v->counter), "=r" (ret) : "r" (i) : "memory"); return ret; }
# 200 "./arch/riscv/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
       int prev, rc;

 __asm__ __volatile__ (
  "0:	lr.w     %[p],  %[c]\n"
  "	beq      %[p],  %[u], 1f\n"
  "	add      %[rc], %[p], %[a]\n"
  "	sc.w.rl  %[rc], %[rc], %[c]\n"
  "	bnez     %[rc], 0b\n"
  "	fence    rw, rw\n"
  "1:\n"
  : [p]"=&r" (prev), [rc]"=&r" (rc), [c]"+A" (v->counter)
  : [a]"r" (a), [u]"r" (u)
  : "memory");
 return prev;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
       s64 prev;
       long rc;

 __asm__ __volatile__ (
  "0:	lr.d     %[p],  %[c]\n"
  "	beq      %[p],  %[u], 1f\n"
  "	add      %[rc], %[p], %[a]\n"
  "	sc.d.rl  %[rc], %[rc], %[c]\n"
  "	bnez     %[rc], 0b\n"
  "	fence    rw, rw\n"
  "1:\n"
  : [p]"=&r" (prev), [rc]"=&r" (rc), [c]"+A" (v->counter)
  : [a]"r" (a), [u]"r" (u)
  : "memory");
 return prev;
}
# 299 "./arch/riscv/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_xchg_relaxed(atomic_t *v, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (4) { case 4: __asm__ __volatile__ ( "	amoswap.w %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_29(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_29(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_xchg_acquire(atomic_t *v, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (4) { case 4: __asm__ __volatile__ ( "	amoswap.w %0, %2, %1\n" "\tfence r , rw\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d %0, %2, %1\n" "\tfence r , rw\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_30(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_30(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_xchg_release(atomic_t *v, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (4) { case 4: __asm__ __volatile__ ( "\tfence rw,  w\n" "	amoswap.w %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "\tfence rw,  w\n" "	amoswap.d %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_31(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_31(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_xchg(atomic_t *v, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (4) { case 4: __asm__ __volatile__ ( "	amoswap.w.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_32(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_32(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg_relaxed(atomic_t *v, int o, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (4) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_33(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_33(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg_acquire(atomic_t *v, int o, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (4) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "\tfence r , rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "\tfence r , rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_34(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_34(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg_release(atomic_t *v, int o, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (4) { case 4: __asm__ __volatile__ ( "\tfence rw,  w\n" "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "\tfence rw,  w\n" "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_35(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_35(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg(atomic_t *v, int o, int n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (4) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w.rl %1, %z4, %2\n" "	bnez %1, 0b\n" "	fence rw, rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d.rl %1, %z4, %2\n" "	bnez %1, 0b\n" "	fence rw, rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_36(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_36(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_xchg_relaxed(atomic64_t *v, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (8) { case 4: __asm__ __volatile__ ( "	amoswap.w %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_37(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_37(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_xchg_acquire(atomic64_t *v, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (8) { case 4: __asm__ __volatile__ ( "	amoswap.w %0, %2, %1\n" "\tfence r , rw\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d %0, %2, %1\n" "\tfence r , rw\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_38(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_38(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_xchg_release(atomic64_t *v, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (8) { case 4: __asm__ __volatile__ ( "\tfence rw,  w\n" "	amoswap.w %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "\tfence rw,  w\n" "	amoswap.d %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_39(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_39(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_xchg(atomic64_t *v, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(n) __new = (n); __typeof__(*(&(v->counter))) __ret; switch (8) { case 4: __asm__ __volatile__ ( "	amoswap.w.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_40(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_40(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_cmpxchg_relaxed(atomic64_t *v, s64 o, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (8) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_41(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_41(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_cmpxchg_acquire(atomic64_t *v, s64 o, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (8) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "\tfence r , rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "\tfence r , rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_42(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_42(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_cmpxchg_release(atomic64_t *v, s64 o, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (8) { case 4: __asm__ __volatile__ ( "\tfence rw,  w\n" "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "\tfence rw,  w\n" "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_43(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_43(); } while (0); } __ret; }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_cmpxchg(atomic64_t *v, s64 o, s64 n) { return ({ __typeof__(&(v->counter)) __ptr = (&(v->counter)); __typeof__(*(&(v->counter))) __old = (o); __typeof__(*(&(v->counter))) __new = (n); __typeof__(*(&(v->counter))) __ret; register unsigned int __rc; switch (8) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w.rl %1, %z4, %2\n" "	bnez %1, 0b\n" "	fence rw, rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d.rl %1, %z4, %2\n" "	bnez %1, 0b\n" "	fence rw, rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_44(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_44(); } while (0); } __ret; }); }
# 313 "./arch/riscv/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_if_positive(atomic_t *v, int offset)
{
       int prev, rc;

 __asm__ __volatile__ (
  "0:	lr.w     %[p],  %[c]\n"
  "	sub      %[rc], %[p], %[o]\n"
  "	bltz     %[rc], 1f\n"
  "	sc.w.rl  %[rc], %[rc], %[c]\n"
  "	bnez     %[rc], 0b\n"
  "	fence    rw, rw\n"
  "1:\n"
  : [p]"=&r" (prev), [rc]"=&r" (rc), [c]"+A" (v->counter)
  : [o]"r" (offset)
  : "memory");
 return prev - offset;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64 arch_atomic64_sub_if_positive(atomic64_t *v, s64 offset)
{
       s64 prev;
       long rc;

 __asm__ __volatile__ (
  "0:	lr.d     %[p],  %[c]\n"
  "	sub      %[rc], %[p], %[o]\n"
  "	bltz     %[rc], 1f\n"
  "	sc.d.rl  %[rc], %[rc], %[c]\n"
  "	bnez     %[rc], 0b\n"
  "	fence    rw, rw\n"
  "1:\n"
  : [p]"=&r" (prev), [rc]"=&r" (rc), [c]"+A" (v->counter)
  : [o]"r" (offset)
  : "memory");
 return prev - offset;
}
# 8 "./include/linux/atomic.h" 2
# 80 "./include/linux/atomic.h"
# 1 "./include/linux/atomic/atomic-arch-fallback.h" 1
# 151 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_read_acquire(const atomic_t *v)
{
 return ({ typeof(*&(v)->counter) ___p1 = ({ do { extern void __compiletime_assert_45(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_45(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { extern void __compiletime_assert_46(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_46(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_set_release(atomic_t *v, int i)
{
 do { do { extern void __compiletime_assert_47(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_47(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_48(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_48(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 175 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_add_return_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_add_return_relaxed(i, v);
}
# 217 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_fetch_add_relaxed(i, v);
}
# 259 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_sub_return_relaxed(i, v);
}
# 301 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_fetch_sub_relaxed(i, v);
}
# 337 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_inc(atomic_t *v)
{
 arch_atomic_add(1, v);
}
# 353 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_acquire(atomic_t *v)
{
 return arch_atomic_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_release(atomic_t *v)
{
 return arch_atomic_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_relaxed(atomic_t *v)
{
 return arch_atomic_add_return_relaxed(1, v);
}
# 434 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_acquire(atomic_t *v)
{
 return arch_atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_release(atomic_t *v)
{
 return arch_atomic_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_add_relaxed(1, v);
}
# 508 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_dec(atomic_t *v)
{
 arch_atomic_sub(1, v);
}
# 524 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_acquire(atomic_t *v)
{
 return arch_atomic_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_release(atomic_t *v)
{
 return arch_atomic_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_relaxed(atomic_t *v)
{
 return arch_atomic_sub_return_relaxed(1, v);
}
# 605 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_acquire(atomic_t *v)
{
 return arch_atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_release(atomic_t *v)
{
 return arch_atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_sub_relaxed(1, v);
}
# 685 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_fetch_and_relaxed(i, v);
}
# 721 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_andnot(int i, atomic_t *v)
{
 arch_atomic_and(~i, v);
}
# 737 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_acquire(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_release(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_release(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_relaxed(~i, v);
}
# 817 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_fetch_or_relaxed(i, v);
}
# 859 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor_release(int i, atomic_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic_fetch_xor_relaxed(i, v);
}
# 986 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg_acquire(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg_release(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg_relaxed(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 1085 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_sub_and_test(int i, atomic_t *v)
{
 return arch_atomic_sub_return(i, v) == 0;
}
# 1102 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_and_test(atomic_t *v)
{
 return arch_atomic_dec_return(v) == 0;
}
# 1119 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_and_test(atomic_t *v)
{
 return arch_atomic_inc_return(v) == 0;
}
# 1137 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_negative(int i, atomic_t *v)
{
 return arch_atomic_add_return(i, v) < 0;
}
# 1180 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 return arch_atomic_fetch_add_unless(v, a, u) != u;
}
# 1196 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_not_zero(atomic_t *v)
{
 return arch_atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_unless_negative(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_unless_positive(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 1258 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_read_acquire(const atomic64_t *v)
{
 return ({ typeof(*&(v)->counter) ___p1 = ({ do { extern void __compiletime_assert_49(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_49(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { extern void __compiletime_assert_50(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_50(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_set_release(atomic64_t *v, s64 i)
{
 do { do { extern void __compiletime_assert_51(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_51(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_52(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_52(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 1282 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_add_return_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_add_return_relaxed(i, v);
}
# 1324 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_add_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_fetch_add_relaxed(i, v);
}
# 1366 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_sub_return_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_sub_return_relaxed(i, v);
}
# 1408 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_fetch_sub_relaxed(i, v);
}
# 1444 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_inc(atomic64_t *v)
{
 arch_atomic64_add(1, v);
}
# 1460 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_acquire(atomic64_t *v)
{
 return arch_atomic64_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_release(atomic64_t *v)
{
 return arch_atomic64_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_add_return_relaxed(1, v);
}
# 1541 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_release(atomic64_t *v)
{
 return arch_atomic64_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_add_relaxed(1, v);
}
# 1615 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_dec(atomic64_t *v)
{
 arch_atomic64_sub(1, v);
}
# 1631 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_acquire(atomic64_t *v)
{
 return arch_atomic64_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_release(atomic64_t *v)
{
 return arch_atomic64_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_sub_return_relaxed(1, v);
}
# 1712 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_release(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(1, v);
}
# 1792 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_and_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_fetch_and_relaxed(i, v);
}
# 1828 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_andnot(s64 i, atomic64_t *v)
{
 arch_atomic64_and(~i, v);
}
# 1844 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_acquire(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_release(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_relaxed(~i, v);
}
# 1924 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_or_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_fetch_or_relaxed(i, v);
}
# 1966 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("\tfence r , rw\n" "" ::: "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("\tfence rw,  w\n" "" ::: "memory");;
 return arch_atomic64_fetch_xor_relaxed(i, v);
}
# 2093 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 2192 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return arch_atomic64_sub_return(i, v) == 0;
}
# 2209 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_and_test(atomic64_t *v)
{
 return arch_atomic64_dec_return(v) == 0;
}
# 2226 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_and_test(atomic64_t *v)
{
 return arch_atomic64_inc_return(v) == 0;
}
# 2244 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_negative(s64 i, atomic64_t *v)
{
 return arch_atomic64_add_return(i, v) < 0;
}
# 2287 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return arch_atomic64_fetch_add_unless(v, a, u) != u;
}
# 2303 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_not_zero(atomic64_t *v)
{
 return arch_atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 81 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-long.h" 1
# 10 "./include/linux/atomic/atomic-long.h"
# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 11 "./include/linux/atomic/atomic-long.h" 2


typedef atomic64_t atomic_long_t;
# 26 "./include/linux/atomic/atomic-long.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read(const atomic_long_t *v)
{
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read_acquire(const atomic_long_t *v)
{
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set(atomic_long_t *v, long i)
{
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set_release(atomic_long_t *v, long i)
{
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_add(long i, atomic_long_t *v)
{
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_sub(long i, atomic_long_t *v)
{
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_inc(atomic_long_t *v)
{
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return(atomic_long_t *v)
{
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_release(atomic_long_t *v)
{
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_dec(atomic_long_t *v)
{
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return(atomic_long_t *v)
{
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_release(atomic_long_t *v)
{
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_and(long i, atomic_long_t *v)
{
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_andnot(long i, atomic_long_t *v)
{
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_or(long i, atomic_long_t *v)
{
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_xor(long i, atomic_long_t *v)
{
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_acquire(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_release(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_relaxed(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_and_test(atomic_long_t *v)
{
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_and_test(atomic_long_t *v)
{
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_negative(long i, atomic_long_t *v)
{
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_not_zero(atomic_long_t *v)
{
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_if_positive(atomic_long_t *v)
{
 return arch_atomic64_sub_if_positive(v, 1);
}
# 82 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-instrumented.h" 1
# 22 "./include/linux/atomic/atomic-instrumented.h"
# 1 "./include/linux/instrumented.h" 1
# 24 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, 0);
}
# 39 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 0));
}
# 54 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 1) | (1 << 0));
}
# 69 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, (1 << 2));
}
# 84 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0));
}
# 99 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
}
# 115 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_to_user(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 kcsan_check_access(from, n, 0);
}
# 132 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_from_user(const void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 kcsan_check_access(to, n, (1 << 0));
}
# 23 "./include/linux/atomic/atomic-instrumented.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read_acquire(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set_release(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg_relaxed(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_if_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_if_positive(v, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_if_positive(v, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_relaxed(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_if_positive(v);
}
# 83 "./include/linux/atomic.h" 2
# 14 "./include/linux/cpumask.h" 2



typedef struct cpumask { unsigned long bits[(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 39 "./include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 90 "./include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_dying_mask;






extern atomic_t __num_online_cpus;

extern cpumask_t cpus_booted_once_mask;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{

 ({ int __ret_warn_on = !!(cpu >= bits); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/cpumask.h"), "i" (108), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)8));
 return cpu;
}
# 193 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_next_bit((((srcp)->bits)), (((unsigned int)8)), 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), ((unsigned int)8));
}

unsigned int __attribute__((__pure__)) cpumask_next(int n, const struct cpumask *srcp);
# 218 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)8), n+1);
}

int __attribute__((__pure__)) cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int __attribute__((__pure__)) cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
int cpumask_any_and_distribute(const struct cpumask *src1p,
          const struct cpumask *src2p);
int cpumask_any_distribute(const struct cpumask *srcp);
# 257 "./include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 309 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 arch___set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 arch___clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 342 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return arch_test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 356 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 370 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)8));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)8));
}
# 401 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)8));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)8));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)8));
}
# 444 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)8));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)8));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)8));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)8));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)8));
}
# 509 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)8));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)8));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)8));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)8));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)8));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)8));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)8));
}
# 620 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)8));
}
# 634 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)8));
}
# 648 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)8));
}
# 660 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)8));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_size(void)
{
 return (((((unsigned int)8)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 733 "./include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 793 "./include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 8);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_dying(unsigned int cpu, bool dying)
{
 if (dying)
  cpumask_set_cpu(cpu, &__cpu_dying_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_dying_mask);
}
# 854 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 866 "./include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 885 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int num_online_cpus(void)
{
 return atomic_read(&__num_online_cpus);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_online(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_online_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_possible(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_possible_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_present(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_present_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_active(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_active_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_dying(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_dying_mask));
}
# 979 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 1001 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_bitmask_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_bitmask_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count);
}
# 1016 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_list_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_list_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count);
}
# 14 "./include/linux/smp.h" 2

# 1 "./include/linux/smp_types.h" 1




# 1 "./include/linux/llist.h" 1
# 54 "./include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 69 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 187 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_empty(const struct llist_head *head)
{
 return ({ do { extern void __compiletime_assert_53(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->first) == sizeof(char) || sizeof(head->first) == sizeof(short) || sizeof(head->first) == sizeof(int) || sizeof(head->first) == sizeof(long)) || sizeof(head->first) == sizeof(long long))) __compiletime_assert_53(); } while (0); (*(const volatile typeof( _Generic((head->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->first))) *)&(head->first)); }) == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __llist_add_batch(struct llist_node *new_first,
         struct llist_node *new_last,
         struct llist_head *head)
{
 new_last->next = head->first;
 head->first = new_first;
 return new_last->next == ((void *)0);
}
# 217 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __llist_add(struct llist_node *new, struct llist_head *head)
{
 return __llist_add_batch(new, new, head);
}
# 235 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) _x_ = (((void *)0)); (__typeof__(*(__ai_ptr))) ({ __typeof__((__ai_ptr)) __ptr = ((__ai_ptr)); __typeof__(_x_) __new = (_x_); __typeof__(*((__ai_ptr))) __ret; switch (sizeof(*(__ai_ptr))) { case 4: __asm__ __volatile__ ( "	amoswap.w.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_54(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_54(); } while (0); } __ret; }); }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *__llist_del_all(struct llist_head *head)
{
 struct llist_node *first = head->first;

 head->first = ((void *)0);
 return first;
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 6 "./include/linux/smp_types.h" 2

enum {
 CSD_FLAG_LOCK = 0x01,

 IRQ_WORK_PENDING = 0x01,
 IRQ_WORK_BUSY = 0x02,
 IRQ_WORK_LAZY = 0x04,
 IRQ_WORK_HARD_IRQ = 0x08,

 IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),

 CSD_TYPE_ASYNC = 0x00,
 CSD_TYPE_SYNC = 0x10,
 CSD_TYPE_IRQ_WORK = 0x20,
 CSD_TYPE_TTWU = 0x30,

 CSD_FLAG_TYPE_MASK = 0xF0,
};
# 58 "./include/linux/smp_types.h"
struct __call_single_node {
 struct llist_node llist;
 union {
  unsigned int u_flags;
  atomic_t a_flags;
 };

 u16 src, dst;

};
# 16 "./include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
typedef bool (*smp_cond_func_t)(int cpu, void *info);




struct __call_single_data {
 struct __call_single_node node;
 smp_call_func_t func;
 void *info;
};





typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));
# 45 "./include/linux/smp.h"
extern void __smp_call_single_queue(int cpu, struct llist_node *node);


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);

void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
      void *info, bool wait, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, struct __call_single_data *csd);





void panic_smp_self_stop(void);
void nmi_panic_self_stop(struct pt_regs *regs);
void crash_smp_send_stop(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu(smp_call_func_t func, void *info, int wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 90 "./include/linux/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_mask(const struct cpumask *mask,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, mask);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_cond(smp_cond_func_t cond_func,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(cond_func, func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}







# 1 "./arch/riscv/include/asm/smp.h" 1
# 10 "./arch/riscv/include/asm/smp.h"
# 1 "./include/linux/irqreturn.h" 1
# 11 "./include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 11 "./arch/riscv/include/asm/smp.h" 2




struct seq_file;
extern unsigned long boot_cpu_hartid;

struct riscv_ipi_ops {
 void (*ipi_inject)(const struct cpumask *target);
 void (*ipi_clear)(void);
};





extern unsigned long __cpuid_to_hartid_map[8];



void show_ipi_stats(struct seq_file *p, int prec);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_smp(void);


void handle_IPI(struct pt_regs *regs);


void arch_send_call_function_ipi_mask(struct cpumask *mask);


void arch_send_call_function_single_ipi(int cpu);

int riscv_hartid_to_cpuid(int hartid);
void riscv_cpuid_to_hartid_mask(const struct cpumask *in, struct cpumask *out);


void riscv_set_ipi_ops(const struct riscv_ipi_ops *ops);


void riscv_clear_ipi(void);


           void smp_callin(void);
# 64 "./arch/riscv/include/asm/smp.h"
int __cpu_disable(void);
void __cpu_die(unsigned int cpu);
void cpu_stop(void);
# 106 "./arch/riscv/include/asm/smp.h"
bool cpu_has_hotplug(unsigned int cpu);
# 115 "./include/linux/smp.h" 2
# 124 "./include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_nr_cpu_ids(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 275 "./include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_thaw_secondary_cpus_begin(void);
extern void arch_thaw_secondary_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 15 "./include/linux/lockdep.h" 2
# 1 "./arch/riscv/include/generated/asm/percpu.h" 1
# 16 "./include/linux/lockdep.h" 2

struct task_struct;


extern int prove_locking;
extern int lock_stat;
# 341 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_init_task(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_off(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_on(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_set_selftest_task(struct task_struct *task)
{
}
# 390 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_register_key(struct lock_class_key *key)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_unregister_key(struct lock_class_key *key)
{
}







extern int lock_is_held(const void *);
extern int lockdep_is_held(const void *);
# 428 "./include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 442 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_free_task(struct task_struct *task) {}
# 504 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 672 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 64 "./include/linux/spinlock.h" 2

# 1 "./arch/riscv/include/asm/mmiowb.h" 1
# 13 "./arch/riscv/include/asm/mmiowb.h"
# 1 "./include/asm-generic/mmiowb.h" 1
# 23 "./include/asm-generic/mmiowb.h"
# 1 "./include/asm-generic/mmiowb_types.h" 1






struct mmiowb_state {
 u16 nesting_count;
 u16 mmiowb_pending;
};
# 24 "./include/asm-generic/mmiowb.h" 2


# 1 "./arch/riscv/include/generated/asm/percpu.h" 1
# 27 "./include/asm-generic/mmiowb.h" 2


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct mmiowb_state) __mmiowb_state;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmiowb_set_pending(void)
{
 struct mmiowb_state *ms = ({ do { const void *__vpp_verify = (typeof((&__mmiowb_state) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&__mmiowb_state)) *)(&__mmiowb_state)); (typeof((typeof(*(&__mmiowb_state)) *)(&__mmiowb_state))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); });

 if (__builtin_expect(!!(ms->nesting_count), 1))
  ms->mmiowb_pending = ms->nesting_count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmiowb_spin_lock(void)
{
 struct mmiowb_state *ms = ({ do { const void *__vpp_verify = (typeof((&__mmiowb_state) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&__mmiowb_state)) *)(&__mmiowb_state)); (typeof((typeof(*(&__mmiowb_state)) *)(&__mmiowb_state))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); });
 ms->nesting_count++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmiowb_spin_unlock(void)
{
 struct mmiowb_state *ms = ({ do { const void *__vpp_verify = (typeof((&__mmiowb_state) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&__mmiowb_state)) *)(&__mmiowb_state)); (typeof((typeof(*(&__mmiowb_state)) *)(&__mmiowb_state))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); });

 if (__builtin_expect(!!(ms->mmiowb_pending), 0)) {
  ms->mmiowb_pending = 0;
  __asm__ __volatile__ ("fence o,w" : : : "memory");;
 }

 ms->nesting_count--;
}
# 14 "./arch/riscv/include/asm/mmiowb.h" 2
# 66 "./include/linux/spinlock.h" 2
# 94 "./include/linux/spinlock.h"
# 1 "./arch/riscv/include/asm/spinlock.h" 1
# 22 "./arch/riscv/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_spin_unlock(arch_spinlock_t *lock)
{
 do { do { extern void __compiletime_assert_55(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&lock->lock) == sizeof(char) || sizeof(*&lock->lock) == sizeof(short) || sizeof(*&lock->lock) == sizeof(int) || sizeof(*&lock->lock) == sizeof(long)))) __compiletime_assert_55(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_56(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&lock->lock) == sizeof(char) || sizeof(*&lock->lock) == sizeof(short) || sizeof(*&lock->lock) == sizeof(int) || sizeof(*&lock->lock) == sizeof(long)) || sizeof(*&lock->lock) == sizeof(long long))) __compiletime_assert_56(); } while (0); do { *(volatile typeof(*&lock->lock) *)&(*&lock->lock) = (0); } while (0); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_spin_trylock(arch_spinlock_t *lock)
{
 int tmp = 1, busy;

 __asm__ __volatile__ (
  "	amoswap.w %0, %2, %1\n"
  "\tfence r , rw\n"
  : "=r" (busy), "+A" (lock->lock)
  : "r" (tmp)
  : "memory");

 return !busy;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_spin_lock(arch_spinlock_t *lock)
{
 while (1) {
  if ((({ do { extern void __compiletime_assert_57(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((lock)->lock) == sizeof(char) || sizeof((lock)->lock) == sizeof(short) || sizeof((lock)->lock) == sizeof(int) || sizeof((lock)->lock) == sizeof(long)) || sizeof((lock)->lock) == sizeof(long long))) __compiletime_assert_57(); } while (0); (*(const volatile typeof( _Generic(((lock)->lock), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((lock)->lock))) *)&((lock)->lock)); }) != 0))
   continue;

  if (arch_spin_trylock(lock))
   break;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_read_lock(arch_rwlock_t *lock)
{
 int tmp;

 __asm__ __volatile__(
  "1:	lr.w	%1, %0\n"
  "	bltz	%1, 1b\n"
  "	addi	%1, %1, 1\n"
  "	sc.w	%1, %1, %0\n"
  "	bnez	%1, 1b\n"
  "\tfence r , rw\n"
  : "+A" (lock->lock), "=&r" (tmp)
  :: "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_write_lock(arch_rwlock_t *lock)
{
 int tmp;

 __asm__ __volatile__(
  "1:	lr.w	%1, %0\n"
  "	bnez	%1, 1b\n"
  "	li	%1, -1\n"
  "	sc.w	%1, %1, %0\n"
  "	bnez	%1, 1b\n"
  "\tfence r , rw\n"
  : "+A" (lock->lock), "=&r" (tmp)
  :: "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_read_trylock(arch_rwlock_t *lock)
{
 int busy;

 __asm__ __volatile__(
  "1:	lr.w	%1, %0\n"
  "	bltz	%1, 1f\n"
  "	addi	%1, %1, 1\n"
  "	sc.w	%1, %1, %0\n"
  "	bnez	%1, 1b\n"
  "\tfence r , rw\n"
  "1:\n"
  : "+A" (lock->lock), "=&r" (busy)
  :: "memory");

 return !busy;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_write_trylock(arch_rwlock_t *lock)
{
 int busy;

 __asm__ __volatile__(
  "1:	lr.w	%1, %0\n"
  "	bnez	%1, 1f\n"
  "	li	%1, -1\n"
  "	sc.w	%1, %1, %0\n"
  "	bnez	%1, 1b\n"
  "\tfence r , rw\n"
  "1:\n"
  : "+A" (lock->lock), "=&r" (busy)
  :: "memory");

 return !busy;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_read_unlock(arch_rwlock_t *lock)
{
 __asm__ __volatile__(
  "\tfence rw,  w\n"
  "	amoadd.w x0, %1, %0\n"
  : "+A" (lock->lock)
  : "r" (-1)
  : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_write_unlock(arch_rwlock_t *lock)
{
 do { do { extern void __compiletime_assert_58(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&lock->lock) == sizeof(char) || sizeof(*&lock->lock) == sizeof(short) || sizeof(*&lock->lock) == sizeof(int) || sizeof(*&lock->lock) == sizeof(long)))) __compiletime_assert_58(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_59(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&lock->lock) == sizeof(char) || sizeof(*&lock->lock) == sizeof(short) || sizeof(*&lock->lock) == sizeof(int) || sizeof(*&lock->lock) == sizeof(long)) || sizeof(*&lock->lock) == sizeof(long long))) __compiletime_assert_59(); } while (0); do { *(volatile typeof(*&lock->lock) *)&(*&lock->lock) = (0); } while (0); } while (0); } while (0);
}
# 95 "./include/linux/spinlock.h" 2





  extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,
       struct lock_class_key *key, short inner);
# 179 "./include/linux/spinlock.h"
 extern void do_raw_spin_lock(raw_spinlock_t *lock) ;

 extern int do_raw_spin_trylock(raw_spinlock_t *lock);
 extern void do_raw_spin_unlock(raw_spinlock_t *lock) ;
# 317 "./include/linux/spinlock.h"
# 1 "./include/linux/rwlock.h" 1
# 18 "./include/linux/rwlock.h"
  extern void __rwlock_init(rwlock_t *lock, const char *name,
       struct lock_class_key *key);
# 32 "./include/linux/rwlock.h"
 extern void do_raw_read_lock(rwlock_t *lock) ;

 extern int do_raw_read_trylock(rwlock_t *lock);
 extern void do_raw_read_unlock(rwlock_t *lock) ;
 extern void do_raw_write_lock(rwlock_t *lock) ;

 extern int do_raw_write_trylock(rwlock_t *lock);
 extern void do_raw_write_unlock(rwlock_t *lock) ;
# 318 "./include/linux/spinlock.h" 2






# 1 "./include/linux/spinlock_api_smp.h" 1
# 18 "./include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 return 0;
}
# 104 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
# 119 "./include/linux/spinlock_api_smp.h"
 do_raw_spin_lock(lock);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}



# 1 "./include/linux/rwlock_api_smp.h" 1
# 18 "./include/linux/rwlock_api_smp.h"
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((__section__(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_read_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_read_trylock(lock)) {
  do { if (0) do { } while (0); else do { } while (0); } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_write_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_write_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 return 0;
}
# 146 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do_raw_read_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do_raw_read_lock((lock));

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do_raw_read_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do_raw_read_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_write_lock((lock));

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_write_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_write_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_write_lock(lock);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do_raw_write_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do_raw_read_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do_raw_read_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do_raw_read_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do_raw_read_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do_raw_write_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do_raw_write_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do_raw_write_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 193 "./include/linux/spinlock_api_smp.h" 2
# 325 "./include/linux/spinlock.h" 2
# 336 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}
# 361 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 386 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 401 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 454 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return (({ do { extern void __compiletime_assert_60(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(&lock->rlock)->raw_lock)->lock) == sizeof(char) || sizeof((&(&lock->rlock)->raw_lock)->lock) == sizeof(short) || sizeof((&(&lock->rlock)->raw_lock)->lock) == sizeof(int) || sizeof((&(&lock->rlock)->raw_lock)->lock) == sizeof(long)) || sizeof((&(&lock->rlock)->raw_lock)->lock) == sizeof(long long))) __compiletime_assert_60(); } while (0); (*(const volatile typeof( _Generic(((&(&lock->rlock)->raw_lock)->lock), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(&lock->rlock)->raw_lock)->lock))) *)&((&(&lock->rlock)->raw_lock)->lock)); }) != 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return (((void)(&lock->rlock), 0));
}
# 483 "./include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 507 "./include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 9 "./include/linux/mmzone.h" 2

# 1 "./include/linux/wait.h" 1
# 12 "./include/linux/wait.h"
# 1 "./include/uapi/linux/wait.h" 1
# 13 "./include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 30 "./include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 64 "./include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 82 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 127 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 140 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
{
 return list_is_singular(&wq_head->head);
}
# 153 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_priority(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 struct list_head *head = &wq_head->head;
 struct wait_queue_entry *wq;

 for (wq = ({ void *__mptr = (void *)((&wq_head->head)->next); do { extern void __compiletime_assert_61(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(((typeof(*wq) *)0)->entry)) && !__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(void))))) __compiletime_assert_61(); } while (0); ((typeof(*wq) *)(__mptr - __builtin_offsetof(typeof(*wq), entry))); }); !(&wq->entry == (&wq_head->head)); wq = ({ void *__mptr = (void *)((wq)->entry.next); do { extern void __compiletime_assert_62(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(((typeof(*(wq)) *)0)->entry)) && !__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(void))))) __compiletime_assert_62(); } while (0); ((typeof(*(wq)) *)(__mptr - __builtin_offsetof(typeof(*(wq)), entry))); })) {
  if (!(wq->flags & 0x20))
   break;
  head = &wq->entry;
 }
 list_add(&wq_entry->entry, head);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode);
# 260 "./include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 744 "./include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1138 "./include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
bool prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 1163 "./include/linux/wait.h"
bool try_invoke_on_locked_down_task(struct task_struct *p, bool (*func)(struct task_struct *t, void *arg), void *arg);
# 11 "./include/linux/mmzone.h" 2



# 1 "./include/linux/numa.h" 1
# 47 "./include/linux/numa.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_map_to_online_node(int node)
{
 return (-1);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memory_add_physaddr_to_nid(u64 start)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int phys_to_target_node(u64 start)
{
 return 0;
}
# 15 "./include/linux/mmzone.h" 2

# 1 "./include/linux/seqlock.h" 1
# 19 "./include/linux/seqlock.h"
# 1 "./include/linux/mutex.h" 1
# 20 "./include/linux/mutex.h"
# 1 "./include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 21 "./include/linux/mutex.h" 2
# 1 "./include/linux/debug_locks.h" 1







struct task_struct;

extern int debug_locks ;
extern int debug_locks_silent ;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) _x_ = (0); (__typeof__(*(__ai_ptr))) ({ __typeof__((__ai_ptr)) __ptr = ((__ai_ptr)); __typeof__(_x_) __new = (_x_); __typeof__(*((__ai_ptr))) __ret; switch (sizeof(*(__ai_ptr))) { case 4: __asm__ __volatile__ ( "	amoswap.w.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "	amoswap.d.aqrl %0, %2, %1\n" : "=r" (__ret), "+A" (*__ptr) : "r" (__new) : "memory"); break; default: do { extern void __compiletime_assert_63(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_63(); } while (0); } __ret; }); }); });
}




extern int debug_locks_off(void);
# 50 "./include/linux/debug_locks.h"
struct task_struct;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_all_locks(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_held(void)
{
}
# 22 "./include/linux/mutex.h" 2
# 63 "./include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 raw_spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;

 void *magic;




};






extern void mutex_destroy(struct mutex *lock);
# 118 "./include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 199 "./include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 217 "./include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 20 "./include/linux/seqlock.h" 2
# 1 "./include/linux/ww_mutex.h" 1
# 21 "./include/linux/ww_mutex.h"
# 1 "./include/linux/rtmutex.h" 1
# 18 "./include/linux/rtmutex.h"
# 1 "./include/linux/rbtree_types.h" 1




struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 26 "./include/linux/rbtree_types.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 19 "./include/linux/rtmutex.h" 2


extern int max_lock_depth;

struct rt_mutex_base {
 raw_spinlock_t wait_lock;
 struct rb_root_cached waiters;
 struct task_struct *owner;
};
# 42 "./include/linux/rtmutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rt_mutex_base_is_locked(struct rt_mutex_base *lock)
{
 return ({ do { extern void __compiletime_assert_64(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(lock->owner) == sizeof(char) || sizeof(lock->owner) == sizeof(short) || sizeof(lock->owner) == sizeof(int) || sizeof(lock->owner) == sizeof(long)) || sizeof(lock->owner) == sizeof(long long))) __compiletime_assert_64(); } while (0); (*(const volatile typeof( _Generic((lock->owner), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (lock->owner))) *)&(lock->owner)); }) != ((void *)0);
}

extern void rt_mutex_base_init(struct rt_mutex_base *rtb);
# 57 "./include/linux/rtmutex.h"
struct rt_mutex {
 struct rt_mutex_base rtmutex;



};

struct rt_mutex_waiter;
struct hrtimer_sleeper;


extern void rt_mutex_debug_task_free(struct task_struct *tsk);
# 98 "./include/linux/rtmutex.h"
extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock_class_key *key);





extern void rt_mutex_lock(struct rt_mutex *lock);



extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 22 "./include/linux/ww_mutex.h" 2
# 40 "./include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;

 struct ww_class *ww_class;

};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;

 unsigned int done_acquire;
 struct ww_class *ww_class;
 void *contending_lock;
# 75 "./include/linux/ww_mutex.h"
};
# 100 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base,ww_class->mutex_name,&ww_class->mutex_key);
 lock->ctx = ((void *)0);

 lock->ww_class = ww_class;

}
# 134 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = get_current();
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;

 ctx->ww_class = ww_class;
 ctx->done_acquire = 0;
 ctx->contending_lock = ((void *)0);
# 157 "./include/linux/ww_mutex.h"
}
# 170 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
{

 do { (void)(ctx); } while (0);

 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(ctx->done_acquire), 0)) { do { } while(0); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "ctx->done_acquire"); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (175), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); do { } while(0); __ret = 1; } __ret; });
 ctx->done_acquire = 1;

}
# 187 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{




 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(ctx->acquired), 0)) { do { } while(0); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "ctx->acquired"); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (193), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); do { } while(0); __ret = 1; } __ret; });
 if (!0)




  ctx->done_acquire = 1;

 if (!0)

  ctx->acquired = ~0U;

}
# 236 "./include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 268 "./include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 294 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;

 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(!ctx->contending_lock), 0)) { do { } while(0); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "!ctx->contending_lock"); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (299), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); do { } while(0); __ret = 1; } __ret; });

 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 330 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{

 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(!ctx->contending_lock), 0)) { do { } while(0); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "!ctx->contending_lock"); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (335), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); do { } while(0); __ret = 1; } __ret; });

 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);
# 349 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock)
{
 return mutex_trylock(&lock->base);
}
# 362 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_destroy(struct ww_mutex *lock)
{

 mutex_destroy(&lock->base);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked((&lock->base));
}
# 21 "./include/linux/seqlock.h" 2
# 65 "./include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 254 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) seqcount_t *__seqprop_ptr(seqcount_t *s)
{
 return s;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __seqprop_sequence(const seqcount_t *s)
{
 return ({ do { extern void __compiletime_assert_65(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_65(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __seqprop_preemptible(const seqcount_t *s)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqprop_assert(const seqcount_t *s)
{
 do { } while (0);
}



typedef struct seqcount_raw_spinlock { seqcount_t seqcount; ; } seqcount_raw_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_66(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_66(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_67(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_67(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { ; }
typedef struct seqcount_spinlock { seqcount_t seqcount; ; } seqcount_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_68(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_68(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_69(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_69(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { ; }
typedef struct seqcount_rwlock { seqcount_t seqcount; ; } seqcount_rwlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_70(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_70(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_71(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_71(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { ; }
typedef struct seqcount_mutex { seqcount_t seqcount; ; } seqcount_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_72(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_72(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_73(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_73(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_mutex_assert(const seqcount_mutex_t *s) { ; }
typedef struct seqcount_ww_mutex { seqcount_t seqcount; ; } seqcount_ww_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_74(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_74(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_75(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_75(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { ; }
# 430 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 kcsan_atomic_next(0);
 return __builtin_expect(!!(({ do { extern void __compiletime_assert_76(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_76(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start), 0);
}
# 450 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 __asm__ __volatile__ ("fence " "r" "," "r" : : : "memory");
 return do___read_seqcount_retry(s, start);
}
# 470 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_begin(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
}
# 491 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_end(seqcount_t *s)
{
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 517 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 do_raw_write_seqcount_begin(s);
 do { } while (0);
}
# 543 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin(seqcount_t *s)
{
 do_write_seqcount_begin_nested(s, 0);
}
# 563 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 do_raw_write_seqcount_end(s);
}
# 613 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_barrier(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 633 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_invalidate(seqcount_t *s)
{
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
 kcsan_nestable_atomic_begin();
 s->sequence+=2;
 kcsan_nestable_atomic_end();
}
# 651 "./include/linux/seqlock.h"
typedef struct {
 seqcount_t seqcount;
} seqcount_latch_t;
# 680 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
{




 return ({ do { extern void __compiletime_assert_77(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_77(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
}
# 696 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
{
 return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
}
# 783 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_latch(seqcount_latch_t *s)
{
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
 s->seqcount.sequence++;
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
}
# 800 "./include/linux/seqlock.h"
typedef struct {




 seqcount_spinlock_t seqcount;
 spinlock_t lock;
} seqlock_t;
# 838 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqbegin(const seqlock_t *sl)
{
 unsigned ret = ({ ; ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) cpu_relax(); kcsan_atomic_next(1000); __seq; }); __asm__ __volatile__ ("fence " "r" "," "r" : : : "memory"); _seq; }); });

 kcsan_atomic_next(0);
 kcsan_flat_atomic_begin();
 return ret;
}
# 858 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{




 kcsan_flat_atomic_end();

 return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
}
# 888 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 901 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock(&sl->lock);
}
# 914 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 928 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_bh(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_bh(&sl->lock);
}
# 941 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 954 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_irq(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
 return flags;
}
# 991 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1014 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 1037 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}
# 1061 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}
# 1104 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1141 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}
# 1156 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}
# 1169 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}
# 1195 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}
# 1220 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 17 "./include/linux/mmzone.h" 2
# 1 "./include/linux/nodemask.h" 1
# 98 "./include/linux/nodemask.h"
typedef struct { unsigned long bits[((((1 << 0)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 0) : 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 128 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_next_bit((srcp->bits), ((1 << 0)), 0))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit((srcp->bits), ((1 << 0)), 0))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_next_bit((srcp->bits), ((1 << 0)), 0))) ? ((int)((1 << 0))) : ((int)(find_next_bit((srcp->bits), ((1 << 0)), 0)))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x78 = ((int)((1 << 0))); typeof((int)(find_next_bit((srcp->bits), ((1 << 0)), 0))) __UNIQUE_ID___y79 = ((int)(find_next_bit((srcp->bits), ((1 << 0)), 0))); ((__UNIQUE_ID___x78) < (__UNIQUE_ID___y79) ? (__UNIQUE_ID___x78) : (__UNIQUE_ID___y79)); }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) ? ((int)((1 << 0))) : ((int)(find_next_bit(srcp->bits, (1 << 0), n+1)))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x80 = ((int)((1 << 0))); typeof((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) __UNIQUE_ID___y81 = ((int)(find_next_bit(srcp->bits, (1 << 0), n+1))); ((__UNIQUE_ID___x80) < (__UNIQUE_ID___y81) ? (__UNIQUE_ID___x80) : (__UNIQUE_ID___y81)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 0));
 __node_set((node), &(*mask));
}
# 299 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_next_zero_bit((maskp->bits), ((1 << 0)), 0))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_zero_bit((maskp->bits), ((1 << 0)), 0))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_next_zero_bit((maskp->bits), ((1 << 0)), 0))) ? ((int)((1 << 0))) : ((int)(find_next_zero_bit((maskp->bits), ((1 << 0)), 0)))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x82 = ((int)((1 << 0))); typeof((int)(find_next_zero_bit((maskp->bits), ((1 << 0)), 0))) __UNIQUE_ID___y83 = ((int)(find_next_zero_bit((maskp->bits), ((1 << 0)), 0))); ((__UNIQUE_ID___x82) < (__UNIQUE_ID___y83) ? (__UNIQUE_ID___x82) : (__UNIQUE_ID___y83)); }));

}
# 333 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "./include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 N_GENERIC_INITIATOR,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];
# 465 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_state(int node, enum node_states state)
{
 return node == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_state(int node, enum node_states state)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_clear_state(int node, enum node_states state)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int num_node_state(enum node_states state)
{
 return 1;
}
# 500 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_random(const nodemask_t *mask)
{
 return 0;
}
# 532 "./include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 18 "./include/linux/mmzone.h" 2
# 1 "./include/linux/pageblock-flags.h" 1
# 18 "./include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 55 "./include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(const struct page *page,
    unsigned long pfn,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long mask);
# 19 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags-layout.h" 1





# 1 "./include/generated/bounds.h" 1
# 7 "./include/linux/page-flags-layout.h" 2
# 20 "./include/linux/mmzone.h" 2

# 1 "./include/linux/mm_types.h" 1




# 1 "./include/linux/mm_types_task.h" 1
# 34 "./include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};





enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 97 "./include/linux/mm_types_task.h"
};
# 6 "./include/linux/mm_types.h" 2

# 1 "./include/linux/auxvec.h" 1




# 1 "./include/uapi/linux/auxvec.h" 1




# 1 "./arch/riscv/include/uapi/asm/auxvec.h" 1
# 6 "./include/uapi/linux/auxvec.h" 2
# 6 "./include/linux/auxvec.h" 2
# 8 "./include/linux/mm_types.h" 2


# 1 "./include/linux/rbtree.h" 1
# 24 "./include/linux/rbtree.h"
# 1 "./include/linux/rcupdate.h" 1
# 40 "./include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void rcu_barrier_tasks_rude(void);
void synchronize_rcu(void);
# 63 "./include/linux/rcupdate.h"
void rcu_read_unlock_strict(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_lock(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_unlock(void)
{
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 rcu_read_unlock_strict();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_preempt_depth(void)
{
 return 0;
}




void rcu_init(void);
extern int rcu_scheduler_active ;
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_init_tasks_generic(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 109 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_exit(void) { }
# 119 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_init_nohz(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_offload(int cpu) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_nocb_flush_deferred_wakeup(void) { }
# 195 "./include/linux/rcupdate.h"
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 225 "./include/linux/rcupdate.h"
# 1 "./include/linux/rcutree.h" 1
# 20 "./include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
void rcu_momentary_dyntick_idle(void);
void kfree_rcu_scheduler_running(void);
bool rcu_gp_might_be_stalled(void);
unsigned long get_state_synchronize_rcu(void);
unsigned long start_poll_synchronize_rcu(void);
bool poll_state_synchronize_rcu(unsigned long oldstate);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_is_idle_cpu(int cpu);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_irq_exit_check_preempt(void) { }


void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active ;
void rcu_end_inkernel_boot(void);
bool rcu_inkernel_boot_has_ended(void);
bool rcu_is_watching(void);

void rcu_all_qs(void);



int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 226 "./include/linux/rcupdate.h" 2
# 246 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_lockdep_current_cpu_online(void) { return true; }


extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;
# 286 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_sched_held(void)
{
 return !(preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_any_held(void)
{
 return !(preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}
# 683 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}
# 714 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock(void)
{
 do { } while (0 && (!rcu_is_watching()));

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 737 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_bh(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 775 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}
# 975 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 993 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ do { extern void __compiletime_assert_84(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rhp->func) == sizeof(char) || sizeof(rhp->func) == sizeof(short) || sizeof(rhp->func) == sizeof(int) || sizeof(rhp->func) == sizeof(long)) || sizeof(rhp->func) == sizeof(long long))) __compiletime_assert_84(); } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });

 if (func == f)
  return true;
 ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/rcupdate.h"), "i" (1000), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return false;
}


extern int rcu_expedited;
extern int rcu_normal;
# 25 "./include/linux/rbtree.h" 2
# 39 "./include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_85(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*rb_link)) == sizeof(char) || sizeof((*rb_link)) == sizeof(short) || sizeof((*rb_link)) == sizeof(int) || sizeof((*rb_link)) == sizeof(long)) || sizeof((*rb_link)) == sizeof(long long))) __compiletime_assert_85(); } while (0); do { *(volatile typeof((*rb_link)) *)&((*rb_link)) = ((typeof(*rb_link))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_86(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_86(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_87(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)) || sizeof(*&*rb_link) == sizeof(long long))) __compiletime_assert_87(); } while (0); do { *(volatile typeof(*&*rb_link) *)&(*&*rb_link) = ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}
# 108 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rb_node *
rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
{
 struct rb_node *leftmost = ((void *)0);

 if (root->rb_leftmost == node)
  leftmost = root->rb_leftmost = rb_next(node);

 rb_erase(node, &root->rb_root);

 return leftmost;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 164 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_root.rb_node;
 struct rb_node *parent = ((void *)0);
 bool leftmost = true;

 while (*link) {
  parent = *link;
  if (less(node, parent)) {
   link = &parent->rb_left;
  } else {
   link = &parent->rb_right;
   leftmost = false;
  }
 }

 rb_link_node(node, parent, link);
 rb_insert_color_cached(node, tree, leftmost);

 return leftmost ? node : ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
rb_add(struct rb_node *node, struct rb_root *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);

 while (*link) {
  parent = *link;
  if (less(node, parent))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
}
# 222 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_add(struct rb_node *node, struct rb_root *tree,
     int (*cmp)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);
 int c;

 while (*link) {
  parent = *link;
  c = cmp(node, parent);

  if (c < 0)
   link = &parent->rb_left;
  else if (c > 0)
   link = &parent->rb_right;
  else
   return parent;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
 return ((void *)0);
}
# 255 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find(const void *key, const struct rb_root *tree,
 int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;

 while (node) {
  int c = cmp(key, node);

  if (c < 0)
   node = node->rb_left;
  else if (c > 0)
   node = node->rb_right;
  else
   return node;
 }

 return ((void *)0);
}
# 283 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_first(const void *key, const struct rb_root *tree,
       int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;
 struct rb_node *match = ((void *)0);

 while (node) {
  int c = cmp(key, node);

  if (c <= 0) {
   if (!c)
    match = node;
   node = node->rb_left;
  } else if (c > 0) {
   node = node->rb_right;
  }
 }

 return match;
}
# 313 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_next_match(const void *key, struct rb_node *node,
       int (*cmp)(const void *key, const struct rb_node *))
{
 node = rb_next(node);
 if (node && cmp(key, node))
  node = ((void *)0);
 return node;
}
# 11 "./include/linux/mm_types.h" 2
# 1 "./include/linux/rwsem.h" 1
# 18 "./include/linux/rwsem.h"
# 1 "./include/linux/err.h" 1







# 1 "./arch/riscv/include/generated/uapi/asm/errno.h" 1
# 9 "./include/linux/err.h" 2
# 24 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 19 "./include/linux/rwsem.h" 2
# 48 "./include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;

 struct optimistic_spin_queue osq;

 raw_spinlock_t wait_lock;
 struct list_head wait_list;

 void *magic;




};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 104 "./include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 120 "./include/linux/rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}
# 175 "./include/linux/rwsem.h"
extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 12 "./include/linux/mm_types.h" 2
# 1 "./include/linux/completion.h" 1
# 12 "./include/linux/completion.h"
# 1 "./include/linux/swait.h" 1
# 41 "./include/linux/swait.h"
struct task_struct;

struct swait_queue_head {
 raw_spinlock_t lock;
 struct list_head task_list;
};

struct swait_queue {
 struct task_struct *task;
 struct list_head task_list;
};
# 69 "./include/linux/swait.h"
extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
        struct lock_class_key *key);
# 121 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int swait_active(struct swait_queue_head *wq)
{
 return !list_empty(&wq->task_list);
}
# 134 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool swq_has_sleeper(struct swait_queue_head *wq)
{







 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 return swait_active(wq);
}

extern void swake_up_one(struct swait_queue_head *q);
extern void swake_up_all(struct swait_queue_head *q);
extern void swake_up_locked(struct swait_queue_head *q);

extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);

extern void __finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
extern void finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
# 13 "./include/linux/completion.h" 2
# 26 "./include/linux/completion.h"
struct completion {
 unsigned int done;
 struct swait_queue_head wait;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_release(struct completion *x) {}
# 84 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 97 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "./include/linux/mm_types.h" 2

# 1 "./include/linux/uprobes.h" 1
# 19 "./include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};
# 142 "./include/linux/uprobes.h"
struct uprobes_state {
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobes_init(void)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool add)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uprobe_mmap(struct vm_area_struct *vma)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_start_dup_mmap(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_end_dup_mmap(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_notify_resume(struct pt_regs *regs)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uprobe_deny_signal(void)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_free_utask(struct task_struct *t)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_copy_process(struct task_struct *t, unsigned long flags)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_clear_state(struct mm_struct *mm)
{
}
# 15 "./include/linux/mm_types.h" 2

# 1 "./include/linux/workqueue.h" 1








# 1 "./include/linux/timer.h" 1





# 1 "./include/linux/ktime.h" 1
# 24 "./include/linux/ktime.h"
# 1 "./include/linux/time.h" 1








extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);


extern void clear_itimer(void);




extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);

# 1 "./include/linux/time32.h" 1
# 13 "./include/linux/time32.h"
# 1 "./include/linux/timex.h" 1
# 56 "./include/linux/timex.h"
# 1 "./include/uapi/linux/timex.h" 1
# 56 "./include/uapi/linux/timex.h"
# 1 "./include/linux/time.h" 1
# 57 "./include/uapi/linux/timex.h" 2
# 97 "./include/uapi/linux/timex.h"
struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "./include/linux/timex.h" 2








# 1 "./arch/riscv/include/asm/timex.h" 1
# 11 "./arch/riscv/include/asm/timex.h"
typedef unsigned long cycles_t;
# 51 "./arch/riscv/include/asm/timex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cycles_t get_cycles(void)
{
 return ({ register unsigned long __v; __asm__ __volatile__ ("csrr %0, " "0xc01" : "=r" (__v) : : "memory"); __v; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 get_cycles_hi(void)
{
 return ({ register unsigned long __v; __asm__ __volatile__ ("csrr %0, " "0xc81" : "=r" (__v) : : "memory"); __v; });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_cycles64(void)
{
 return get_cycles();
}
# 85 "./arch/riscv/include/asm/timex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int read_current_timer(unsigned long *timer_val)
{
 *timer_val = get_cycles();
 return 0;
}

extern void time_init(void);
# 66 "./include/linux/timex.h" 2
# 139 "./include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "./include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
# 14 "./include/linux/time32.h" 2

# 1 "./include/vdso/time32.h" 1




typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};
# 16 "./include/linux/time32.h" 2

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);







extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 61 "./include/linux/time.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 100 "./include/linux/time.h"
# 1 "./include/vdso/time.h" 1






struct timens_offset {
 s64 sec;
 u64 nsec;
};
# 101 "./include/linux/time.h" 2
# 25 "./include/linux/ktime.h" 2
# 1 "./include/linux/jiffies.h" 1
# 12 "./include/linux/jiffies.h"
# 1 "./include/vdso/jiffies.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/param.h" 1
# 6 "./include/vdso/jiffies.h" 2
# 13 "./include/linux/jiffies.h" 2
# 1 "./arch/riscv/include/generated/uapi/asm/param.h" 1
# 14 "./include/linux/jiffies.h" 2
# 1 "./include/generated/timeconst.h" 1
# 15 "./include/linux/jiffies.h" 2
# 62 "./include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 79 "./include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << 6)), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << 6)), __section__(".data..cacheline_aligned"))) jiffies;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 189 "./include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 290 "./include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 250) - 1) / (1000L / 250);
}
# 363 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 250) - 1) / (1000000L / 250);
}
# 410 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x88 = (0L); typeof(delta) __UNIQUE_ID___y89 = (delta); ((__UNIQUE_ID___x88) > (__UNIQUE_ID___y89) ? (__UNIQUE_ID___x88) : (__UNIQUE_ID___y89)); })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x90 = (0L); typeof(delta) __UNIQUE_ID___y91 = (delta); ((__UNIQUE_ID___x90) > (__UNIQUE_ID___y91) ? (__UNIQUE_ID___x90) : (__UNIQUE_ID___y91)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "./include/linux/ktime.h" 2



typedef s64 ktime_t;
# 38 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 71 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 95 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 111 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 123 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 148 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ktime.h"), "i" (154), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 209 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}

# 1 "./include/vdso/ktime.h" 1
# 221 "./include/linux/ktime.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "./include/linux/timekeeping.h" 1





# 1 "./include/linux/clocksource_ids.h" 1





enum clocksource_ids {
 CSID_GENERIC = 0,
 CSID_ARM_ARCH_COUNTER,
 CSID_MAX,
};
# 7 "./include/linux/timekeeping.h" 2



void timekeeping_init(void);
extern int timekeeping_suspended;


extern void legacy_timer_tick(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "./include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);







struct ktime_timestamps {
 u64 mono;
 u64 boot;
 u64 real;
};
# 246 "./include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 enum clocksource_ids cs_id;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 262 "./include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 275 "./include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);


extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);
# 233 "./include/linux/ktime.h" 2
# 7 "./include/linux/timer.h" 2

# 1 "./include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "./include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 const struct debug_obj_descr *descr;
};
# 55 "./include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "./include/linux/debugobjects.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
debug_object_activate (void *addr, const struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_deactivate(void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_destroy (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_free (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_assert_init(void *addr, const struct debug_obj_descr *descr) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_early_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_mem_init(void) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "./include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;




};
# 91 "./include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags,
        const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, func, flags, name, key);
}
# 150 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_timer_on_stack(struct timer_list *timer) { }
# 166 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timer_pending(const struct timer_list * timer)
{
 return !hlist_unhashed_lockless(&timer->entry);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp, loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "./include/linux/workqueue.h" 2








struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_INACTIVE_BIT= 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_INACTIVE = 1 << WORK_STRUCT_INACTIVE_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,


 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS),


 WORK_CPU_UNBOUND = 8,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 150 "./include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_92(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_92(); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_93(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_93(); } while (0); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 210 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int work_static(struct work_struct *work) { return 0; }
# 303 "./include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 336 "./include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 380 "./include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 402 "./include/linux/workqueue.h"
struct workqueue_struct *alloc_workqueue(const char *fmt,
      unsigned int flags,
      int max_active, ...);
# 431 "./include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 499 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 513 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 528 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 542 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 561 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 590 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 604 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 618 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 634 "./include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);
# 645 "./include/linux/workqueue.h"
int workqueue_sysfs_register(struct workqueue_struct *wq);






void wq_watchdog_touch(int cpu);





int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init_early(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init(void);
# 17 "./include/linux/mm_types.h" 2


# 1 "./arch/riscv/include/asm/mmu.h" 1
# 12 "./arch/riscv/include/asm/mmu.h"
typedef struct {



 atomic_long_t id;

 void *vdso;


 cpumask_t icache_stale_mask;

} mm_context_t;

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) create_pgd_mapping(pgd_t *pgdp, uintptr_t va, phys_addr_t pa,
          phys_addr_t sz, pgprot_t prot);
# 20 "./include/linux/mm_types.h" 2








struct address_space;
struct mem_cgroup;
# 70 "./include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   unsigned long pp_magic;
   struct page_pool *pp;
   unsigned long _pp_mapping_pad;
   unsigned long dma_addr;
   union {




    unsigned long dma_addr_upper;




    atomic_long_t pp_frag_count;
   };
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;
     int pobjects;




    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
   unsigned int compound_nr;
  };
  struct {
   unsigned long _compound_pad_1;
   atomic_t hpage_pinned_refcount;

   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };

   spinlock_t *ptl;



  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 190 "./include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;
# 240 "./include/linux/mm_types.h"
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_pincount_ptr(struct page *page)
{
 return &page[2].hpage_pinned_refcount;
}
# 262 "./include/linux/mm_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_private(struct page *page, unsigned long private)
{
 page->private = private;
}

struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 310 "./include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 319 "./include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;





 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;







 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 430 "./include/linux/mm_types.h"
  atomic_t membarrier_state;
# 442 "./include/linux/mm_types.h"
  atomic_t mm_users;
# 451 "./include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;
# 473 "./include/linux/mm_types.h"
  struct rw_semaphore mmap_lock;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;






  seqcount_t write_protect_seq;

  spinlock_t arg_lock;

  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(7 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;

  struct core_state *core_state;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 540 "./include/linux/mm_types.h"
  struct user_namespace *user_ns;


  struct file *exe_file;
# 569 "./include/linux/mm_types.h"
  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;



  struct work_struct async_put_work;


  u32 pasid;

 } ;





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_gather_mmu_fullmm(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_finish_mmu(struct mmu_gather *tlb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 658 "./include/linux/mm_types.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 670 "./include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 683 "./include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 732 "./include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 772 "./include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags.h" 1
# 103 "./include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,
# 139 "./include/linux/page-flags.h"
 PG_arch_2,




 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_workingset,


 PG_isolated = PG_reclaim,


 PG_reported = PG_uptodate,
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _compound_head(const struct page *page)
{
 unsigned long head = ({ do { extern void __compiletime_assert_94(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_94(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });

 if (__builtin_expect(!!(head & 1), 0))
  return head - 1;
 return (unsigned long)page;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ do { extern void __compiletime_assert_95(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_95(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return arch_test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PagePoisoned(const struct page *page)
{
 return page->flags == -1l;
}


void page_init_poison(struct page *page, size_t size);
# 333 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return arch_test_bit(PG_locked, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (333), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (333), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { arch___set_bit(PG_locked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (333), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (333), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { arch___clear_bit(PG_locked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (333), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (333), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return arch_test_bit(PG_waiters, &({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { arch___clear_bit(PG_waiters, &({ do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (334), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageError(struct page *page) { return arch_test_bit(PG_error, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (335), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return arch_test_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (336), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (336), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (336), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (337), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { arch___set_bit(PG_referenced, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (338), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return arch_test_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (339), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (339), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (339), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (339), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (339), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { arch___clear_bit(PG_dirty, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (340), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return arch_test_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (341), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (341), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (341), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { arch___clear_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (341), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (342), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return arch_test_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (343), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (343), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (343), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { arch___clear_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (343), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (344), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return arch_test_bit(PG_workingset, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (345), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (345), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (345), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (346), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return arch_test_bit(PG_slab, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { arch___set_bit(PG_slab, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { arch___clear_bit(PG_slab, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return arch_test_bit(PG_slob_free, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (348), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (348), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { arch___set_bit(PG_slob_free, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (348), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (348), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { arch___clear_bit(PG_slob_free, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (348), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (348), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return arch_test_bit(PG_checked, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (349), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (349), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (349), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (349), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (349), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (349), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return arch_test_bit(PG_pinned, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (352), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (352), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (352), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (352), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (352), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (352), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (353), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (353), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (353), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (353), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return arch_test_bit(PG_savepinned, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (354), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (354), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (354), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (354), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (354), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (354), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return arch_test_bit(PG_foreign, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (355), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (355), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (355), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (355), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (355), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (355), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return arch_test_bit(PG_xen_remapped, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (356), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (356), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (356), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (356), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (356), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (356), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (357), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (357), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return arch_test_bit(PG_reserved, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (359), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (359), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (359), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (359), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (359), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (359), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { arch___clear_bit(PG_reserved, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (360), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (360), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { arch___set_bit(PG_reserved, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (361), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (361), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return arch_test_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (362), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (362), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (362), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (362), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (362), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (362), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { arch___clear_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (363), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (363), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { arch___set_bit(PG_swapbacked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (364), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (364), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return arch_test_bit(PG_private, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (371), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (371), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (371), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return arch_test_bit(PG_private_2, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (372), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (372), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (372), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (372), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (372), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return arch_test_bit(PG_owner_priv_1, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (373), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (373), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (373), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (374), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return arch_test_bit(PG_writeback, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (380), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (380), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (381), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (381), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (381), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (381), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return arch_test_bit(PG_mappedtodisk, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (382), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (382), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (382), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (382), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (382), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (382), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return arch_test_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (385), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (385), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (385), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (385), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (385), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (385), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (386), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (386), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return arch_test_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (387), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (387), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (387), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (387), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (387), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (387), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (388), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (388), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
# 397 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapCache(struct page *page)
{



 return PageSwapBacked(page) && arch_test_bit(PG_swapcache, &page->flags);

}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (409), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (409), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (410), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (410), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return arch_test_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (415), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (415), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (415), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { arch___clear_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (416), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (417), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return arch_test_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(0 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { arch___clear_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (421), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (421), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (422), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (422), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (422), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (422), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }
# 431 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageUncached(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageUncached(struct page *page) { }
# 440 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHWPoison(struct page *page) { }
# 454 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSkipKASanPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSkipKASanPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSkipKASanPoison(struct page *page) { }
# 463 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReported(struct page *page) { return arch_test_bit(PG_reported, &({ do { if (__builtin_expect(!!(0 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "0 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (463), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (463), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReported(struct page *page) { arch___set_bit(PG_reported, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (463), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (463), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReported(struct page *page) { arch___clear_bit(PG_reported, &({ do { if (__builtin_expect(!!(1 && PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (463), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (463), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; }); })->flags); }
# 487 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageAnon(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 return ((unsigned long)page->mapping & 0x1) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 518 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageKsm(const struct page *page) { return 0; }


u64 stable_page_flags(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUptodate(struct page *page)
{
 int ret;
 page = ((typeof(page))_compound_head(page));
 ret = arch_test_bit(PG_uptodate, &(page)->flags);
# 536 "./include/linux/page-flags.h"
 if (ret)
  __asm__ __volatile__ ("fence " "r" "," "r" : : : "memory");

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (544), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
 arch___set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (551), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);





 __asm__ __volatile__ ("fence " "w" "," "w" : : : "memory");
 set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ do { if (__builtin_expect(!!(1 && PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "1 && PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (561), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ({ do { if (__builtin_expect(!!(PagePoisoned(((typeof(page))_compound_head(page)))), 0)) { dump_page(((typeof(page))_compound_head(page)), "VM_BUG_ON_PAGE(" "PagePoisoned(((typeof(page))_compound_head(page)))"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (561), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); ((typeof(page))_compound_head(page)); }); })->flags); }

int test_clear_page_writeback(struct page *page);
int __test_set_page_writeback(struct page *page, bool keep_write);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback(struct page *page)
{
 __test_set_page_writeback(page, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback_keepwrite(struct page *page)
{
 __test_set_page_writeback(page, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return arch_test_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (581), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { arch___set_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (581), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { arch___clear_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (581), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (581), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 do { do { extern void __compiletime_assert_96(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_96(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 do { do { extern void __compiletime_assert_97(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_97(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
}
# 607 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHeadHuge(const struct page *page) { return 0; }
# 663 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompound(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompoundMap(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransTail(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageDoubleMap(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageDoubleMap(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageDoubleMap(struct page *page) { }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestSetPageDoubleMap(struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestClearPageDoubleMap(struct page *page) { return 0; }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_page_hwpoison(struct page *page)
{
 if (PageHWPoison(page))
  return true;
 return PageHuge(page) && PageHWPoison(((typeof(page))_compound_head(page)));
}
# 703 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 728 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (728), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { do { if (__builtin_expect(!!(!PageBuddy(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageBuddy(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (728), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000080; }
# 752 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (752), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { do { if (__builtin_expect(!!(!PageOffline(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageOffline(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (752), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000100; }

extern void page_offline_freeze(void);
extern void page_offline_thaw(void);
extern void page_offline_begin(void);
extern void page_offline_end(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (762), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { do { if (__builtin_expect(!!(!PageTable(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageTable(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (762), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000200; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (767), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { do { if (__builtin_expect(!!(!PageGuard(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageGuard(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (767), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000400; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return arch_test_bit(PG_isolated, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (771), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { arch___set_bit(PG_isolated, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (771), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { arch___clear_bit(PG_isolated, &({ do { if (__builtin_expect(!!(PagePoisoned(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PagePoisoned(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (771), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); page; })->flags); };





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (779), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return PageActive(page);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __PageSlabPfmemalloc(struct page *page)
{
 return PageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (794), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 SetPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (800), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 __ClearPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page-flags.h"), "i" (806), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 ClearPageActive(page);
}
# 847 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}
# 23 "./include/linux/mmzone.h" 2
# 1 "./include/linux/local_lock.h" 1




# 1 "./include/linux/local_lock_internal.h" 1
# 11 "./include/linux/local_lock_internal.h"
typedef struct {




} local_lock_t;
# 47 "./include/linux/local_lock_internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_acquire(local_lock_t *l) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_release(local_lock_t *l) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_debug_init(local_lock_t *l) { }
# 6 "./include/linux/local_lock.h" 2
# 24 "./include/linux/mmzone.h" 2
# 42 "./include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 67 "./include/linux/mmzone.h"
 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 81 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_migrate_movable(int mt)
{
 return false || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;






struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ do { extern void __compiletime_assert_98(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head__->next) == sizeof(char) || sizeof(head__->next) == sizeof(short) || sizeof(head__->next) == sizeof(int) || sizeof(head__->next) == sizeof(long)) || sizeof(head__->next) == sizeof(long long))) __compiletime_assert_98(); } while (0); (*(const volatile typeof( _Generic((head__->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head__->next))) *)&(head__->next)); }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); do { extern void __compiletime_assert_99(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) && !__builtin_types_compatible_p(typeof(*(pos__)), typeof(void))))) __compiletime_assert_99(); } while (0); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;







struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (6))));
# 144 "./include/linux/mmzone.h"
enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,

 NR_BOUNCE,



 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE_B,
 NR_SLAB_UNRECLAIMABLE_B,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_FILE,
 WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_FILE,
 WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_FILE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_FILE_THPS,
 NR_FILE_PMDMAPPED,
 NR_ANON_THPS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_FOLL_PIN_ACQUIRED,
 NR_FOLL_PIN_RELEASED,
 NR_KERNEL_STACK_KB,



 NR_PAGETABLE,

 NR_SWAPCACHE,

 NR_VM_NODE_STAT_ITEMS
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_print_in_thp(enum node_stat_item item)
{
 if (!0)
  return false;

 return item == NR_ANON_THPS ||
        item == NR_FILE_THPS ||
        item == NR_SHMEM_THPS ||
        item == NR_SHMEM_PMDMAPPED ||
        item == NR_FILE_PMDMAPPED;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_in_bytes(int idx)
{
# 249 "./include/linux/mmzone.h"
 return (idx == NR_SLAB_RECLAIMABLE_B ||
  idx == NR_SLAB_UNRECLAIMABLE_B);
}
# 266 "./include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}



enum lruvec_flags {
 LRUVEC_CONGESTED,


};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];

 spinlock_t lru_lock;





 unsigned long anon_cost;
 unsigned long file_cost;

 atomic_long_t nonresident_age;

 unsigned long refaults[2];

 unsigned long flags;



};
# 327 "./include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};
# 360 "./include/linux/mmzone.h"
struct per_cpu_pages {
 int count;
 int high;
 int batch;
 short free_factor;





 struct list_head lists[(MIGRATE_PCPTYPES * (3 + 1 + 0))];
};

struct per_cpu_zonestat {

 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];
 s8 stat_threshold;
# 386 "./include/linux/mmzone.h"
};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 410 "./include/linux/mmzone.h"
 ZONE_DMA32,






 ZONE_NORMAL,
# 478 "./include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};





struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 508 "./include/linux/mmzone.h"
 long lowmem_reserve[3];




 struct pglist_data *zone_pgdat;
 struct per_cpu_pages *per_cpu_pageset;
 struct per_cpu_zonestat *per_cpu_zonestats;




 int pageset_high;
 int pageset_batch;






 unsigned long *pageblock_flags;



 unsigned long zone_start_pfn;
# 576 "./include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;







 const char *name;
# 602 "./include/linux/mmzone.h"
 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 642 "./include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_event[0];
} __attribute__((__aligned__(1 << (6))));

enum pgdat_flags {
 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


 ZONE_RECLAIM_ACTIVE,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_cma_pages(struct zone *zone)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 738 "./include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,







 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 773 "./include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 0) * 3) + 1];
};






extern struct page *mem_map;
# 800 "./include/linux/mmzone.h"
typedef struct pglist_data {





 struct zone node_zones[3];






 struct zonelist node_zonelists[MAX_ZONELISTS];

 int nr_zones;

 struct page *node_mem_map;
# 837 "./include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_highest_zoneidx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_highest_zoneidx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
 bool proactive_compact_trigger;





 unsigned long totalreserve_pages;
# 873 "./include/linux/mmzone.h"
 struct zone_padding _pad1_;
# 894 "./include/linux/mmzone.h"
 struct lruvec __lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 917 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

# 1 "./include/linux/memory_hotplug.h" 1




# 1 "./include/linux/mmzone.h" 1
# 6 "./include/linux/memory_hotplug.h" 2

# 1 "./include/linux/notifier.h" 1
# 16 "./include/linux/notifier.h"
# 1 "./include/linux/srcu.h" 1
# 22 "./include/linux/srcu.h"
# 1 "./include/linux/rcu_segcblist.h" 1
# 21 "./include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
};
# 183 "./include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long seglen[4];
 u8 flags;
};
# 23 "./include/linux/srcu.h" 2

struct srcu_struct;
# 41 "./include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *ssp);







# 1 "./include/linux/srcutree.h" 1
# 14 "./include/linux/srcutree.h"
# 1 "./include/linux/rcu_node_tree.h" 1
# 15 "./include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock __attribute__((__aligned__(1 << (6))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[1];
 struct srcu_node *level[1 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;
 struct lockdep_map dep_map;
};
# 135 "./include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "./include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);


void srcu_init(void);
# 100 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 return 1;
}
# 159 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 do { } while (0);
 return retval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 185 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ int __ret_warn_on = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/srcu.h"), "i" (188), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 do { } while (0);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 209 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "./include/linux/notifier.h" 2
# 49 "./include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "./include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 144 "./include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);

extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
# 187 "./include/linux/notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 231 "./include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 8 "./include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct memory_group;
struct resource;
struct vmem_altmap;
# 235 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_online_mems(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_online_mems(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_hotplug_begin(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_hotplug_done(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool movable_node_is_enabled(void)
{
 return false;
}







struct range arch_get_mappable_range(void);
# 294 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_resize_init(struct pglist_data *pgdat) {}
# 309 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void try_offline_node(int nid) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages,
    struct memory_group *group)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int remove_memory(u64 start, u64 size)
{
 return -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __remove_memory(u64 start, u64 size) {}


extern void set_zone_contiguous(struct zone *zone);
extern void clear_zone_contiguous(struct zone *zone);
# 928 "./include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type highest_zoneidx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int highest_zoneidx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx);




enum meminit_context {
 MEMINIT_EARLY,
 MEMINIT_HOTPLUG,
};

extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{



 return ({ void *__mptr = (void *)(lruvec); do { extern void __compiletime_assert_100(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct pglist_data *)0)->__lruvec)) && !__builtin_types_compatible_p(typeof(*(lruvec)), typeof(void))))) __compiletime_assert_100(); } while (0); ((struct pglist_data *)(__mptr - __builtin_offsetof(struct pglist_data, __lruvec))); });

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int local_memory_node(int node_id) { return node_id; };
# 980 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_zone_device(struct zone *zone)
{
 return false;
}
# 992 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}
# 1014 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_to_nid(struct zone *zone)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_set_nid(struct zone *zone, int nid) {}


extern int movable_zone;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}
# 1041 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;

int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[3];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int numa_zonelist_order_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
extern int percpu_pagelist_high_fraction;
extern char numa_zonelist_order[];




extern struct pglist_data contig_page_data;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pglist_data *NODE_DATA(int nid)
{
 return &contig_page_data;
}
# 1087 "./include/linux/mmzone.h"
extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 1119 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1153 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1179 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 7 "./include/linux/gfp.h" 2


# 1 "./include/linux/topology.h" 1
# 30 "./include/linux/topology.h"
# 1 "./include/linux/arch_topology.h" 1








# 1 "./include/linux/percpu.h" 1
# 13 "./include/linux/percpu.h"
# 1 "./arch/riscv/include/generated/asm/percpu.h" 1
# 14 "./include/linux/percpu.h" 2
# 65 "./include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);
# 126 "./include/linux/percpu.h"
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_per_cpu_areas(void);


extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 146 "./include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 10 "./include/linux/arch_topology.h" 2

void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_scale)))) *)((&(cpu_scale)))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) arch_freq_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(arch_freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale)))); (typeof((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
        unsigned long max_freq);
bool topology_scale_freq_invariant(void);

enum scale_freq_source {
 SCALE_FREQ_SOURCE_CPUFREQ = 0,
 SCALE_FREQ_SOURCE_ARCH,
 SCALE_FREQ_SOURCE_CPPC,
};

struct scale_freq_data {
 enum scale_freq_source source;
 void (*set_freq_scale)(void);
};

void topology_scale_freq_tick(void);
void topology_set_scale_freq_source(struct scale_freq_data *data, const struct cpumask *cpus);
void topology_clear_scale_freq_source(enum scale_freq_source source, const struct cpumask *cpus);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) thermal_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_thermal_pressure(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure)))); (typeof((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_thermal_pressure(const struct cpumask *cpus,
       unsigned long th_pressure);

struct cpu_topology {
 int thread_id;
 int core_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t llc_sibling;
};


extern struct cpu_topology cpu_topology[8];






void init_cpu_topology(void);
void store_cpu_topology(unsigned int cpuid);
const struct cpumask *cpu_coregroup_mask(int cpu);
void update_siblings_masks(unsigned int cpu);
void remove_cpu_topology(unsigned int cpuid);
void reset_cpu_topology(void);
int parse_acpi_topology(void);
# 31 "./include/linux/topology.h" 2





# 1 "./arch/riscv/include/generated/asm/topology.h" 1
# 1 "./include/asm-generic/topology.h" 1
# 2 "./arch/riscv/include/generated/asm/topology.h" 2
# 37 "./include/linux/topology.h" 2
# 46 "./include/linux/topology.h"
int arch_update_cpu_topology(void);
# 76 "./include/linux/topology.h"
extern int node_reclaim_distance;
# 118 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_node_id(void)
{
 return ((void)((((struct thread_info *)get_current())->cpu)),0);
}
# 168 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_mem_id(void)
{
 return numa_node_id();
}
# 209 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return ((void)(((void)(cpu),0)), ((const struct cpumask *)&__cpu_online_mask));
}
# 10 "./include/linux/gfp.h" 2
# 25 "./include/linux/gfp.h"
struct vm_area_struct;
# 343 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_migratetype(const gfp_t gfp_flags)
{
 (void)({ int __ret_warn_on = !!((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/gfp.h"), "i" (345), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 do { extern void __compiletime_assert_101(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(1UL << GFP_MOVABLE_SHIFT) != ___GFP_MOVABLE"))); if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_101(); } while (0);
 do { extern void __compiletime_assert_102(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(___GFP_MOVABLE >> GFP_MOVABLE_SHIFT) != MIGRATE_MOVABLE"))); if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_102(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 380 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
  (( gfp_t)0x400u);
}
# 476 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_NORMAL << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_NORMAL << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 do { if (__builtin_expect(!!((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/gfp.h"), "i" (483), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return z;
}
# 494 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_zonelist(gfp_t flags)
{




 return ZONELIST_FALLBACK;
}
# 512 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return NODE_DATA(nid)->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_alloc_page(struct page *page, int order) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_make_page_accessible(struct page *page)
{
 return 0;
}


struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);

unsigned long __alloc_pages_bulk(gfp_t gfp, int preferred_nid,
    nodemask_t *nodemask, int nr_pages,
    struct list_head *page_list,
    struct page **page_array);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_list(gfp_t gfp, unsigned long nr_pages, struct list_head *list)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, list, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array(gfp_t gfp, unsigned long nr_pages, struct page **page_array)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, ((void *)0), page_array);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_bulk(gfp, nid, ((void *)0), nr_pages, ((void *)0), page_array);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 do { if (__builtin_expect(!!(nid < 0 || nid >= (1 << 0)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/gfp.h"), "i" (567), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 (void)({ int __ret_warn_on = !!((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/gfp.h"), "i" (568), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return __alloc_pages(gfp_mask, order, nid, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}
# 595 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
 return alloc_pages_node(numa_node_id(), gfp_mask, order);
}
# 608 "./include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc_align(struct page_frag_cache *nc,
       unsigned int fragsz, gfp_t gfp_mask,
       unsigned int align_mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask)
{
 return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
}

extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 655 "./include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);

extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pm_suspended_storage(void)
{
 return false;
}
# 681 "./include/linux/gfp.h"
void free_contig_range(unsigned long pfn, unsigned long nr_pages);
# 8 "./include/linux/firmware.h" 2




struct firmware {
 size_t size;
 const u8 *data;


 void *priv;
};

struct module;
struct device;

struct builtin_fw {
 char *name;
 void *data;
 unsigned long size;
};
# 42 "./include/linux/firmware.h"
int request_firmware(const struct firmware **fw, const char *name,
       struct device *device);
int firmware_request_nowarn(const struct firmware **fw, const char *name,
       struct device *device);
int firmware_request_platform(const struct firmware **fw, const char *name,
         struct device *device);
int request_firmware_nowait(
 struct module *module, bool uevent,
 const char *name, struct device *device, gfp_t gfp, void *context,
 void (*cont)(const struct firmware *fw, void *context));
int request_firmware_direct(const struct firmware **fw, const char *name,
       struct device *device);
int request_firmware_into_buf(const struct firmware **firmware_p,
 const char *name, struct device *device, void *buf, size_t size);
int request_partial_firmware_into_buf(const struct firmware **firmware_p,
          const char *name, struct device *device,
          void *buf, size_t size, size_t offset);

void release_firmware(const struct firmware *fw);
# 119 "./include/linux/firmware.h"
int firmware_request_cache(struct device *device, const char *name);
# 26 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "./include/linux/pci.h" 1
# 27 "./include/linux/pci.h"
# 1 "./include/linux/mod_devicetable.h" 1
# 13 "./include/linux/mod_devicetable.h"
# 1 "./include/linux/uuid.h" 1
# 11 "./include/linux/uuid.h"
# 1 "./include/uapi/linux/uuid.h" 1
# 23 "./include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "./include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "./include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "./include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void import_guid(guid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void export_guid(__u8 *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void import_uuid(uuid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void export_uuid(__u8 *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);
void generate_random_guid(unsigned char guid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 14 "./include/linux/mod_devicetable.h" 2
typedef unsigned long kernel_ulong_t;




enum {
 PCI_ID_F_VFIO_DRIVER_OVERRIDE = 1,
};
# 43 "./include/linux/mod_devicetable.h"
struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
 __u32 override_only;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 127 "./include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 172 "./include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};





struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};

struct sdw_device_id {
 __u16 mfg_id;
 __u16 part_id;
 __u8 sdw_version;
 __u8 class_id;
 kernel_ulong_t driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 348 "./include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 64 + 1];
 kernel_ulong_t keybit[0x2ff / 64 + 1];
 kernel_ulong_t relbit[0x0f / 64 + 1];
 kernel_ulong_t absbit[0x3f / 64 + 1];
 kernel_ulong_t mscbit[0x07 / 64 + 1];
 kernel_ulong_t ledbit[0x0f / 64 + 1];
 kernel_ulong_t sndbit[0x07 / 64 + 1];
 kernel_ulong_t ffbit[0x7f / 64 + 1];
 kernel_ulong_t swbit[0x10 / 64 + 1];
 kernel_ulong_t propbit[0x1f / 64 + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 399 "./include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 421 "./include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 435 "./include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 guid_t guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct pci_epf_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 486 "./include/linux/mod_devicetable.h"
struct i3c_device_id {
 __u8 match_flags;
 __u8 dcr;
 __u16 manuf_id;
 __u16 part_id;
 __u16 extra_info;

 const void *data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct slim_device_id {
 __u16 manf_id, prod_code;
 __u16 dev_index, instance;


 kernel_ulong_t driver_data;
};




struct apr_device_id {
 char name[32];
 __u32 domain_id;
 __u32 svc_id;
 __u32 svc_version;
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_BIOS_RELEASE,
 DMI_EC_FIRMWARE_RELEASE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_PRODUCT_SKU,
 DMI_PRODUCT_FAMILY,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
 DMI_OEM_STRING,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 593 "./include/linux/mod_devicetable.h"
struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 620 "./include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 649 "./include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 673 "./include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 steppings;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 694 "./include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 719 "./include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 740 "./include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 764 "./include/linux/mod_devicetable.h"
struct fsl_mc_device_id {
 __u16 vendor;
 const char obj_type[16];
};
# 782 "./include/linux/mod_devicetable.h"
struct tb_service_id {
 __u32 match_flags;
 char protocol_key[8 + 1];
 __u32 protocol_id;
 __u32 protocol_version;
 __u32 protocol_revision;
 kernel_ulong_t driver_data;
};
# 806 "./include/linux/mod_devicetable.h"
struct typec_device_id {
 __u16 svid;
 __u8 mode;
 kernel_ulong_t driver_data;
};






struct tee_client_device_id {
 uuid_t uuid;
};
# 830 "./include/linux/mod_devicetable.h"
struct wmi_device_id {
 const char guid_string[36 +1];
 const void *context;
};
# 843 "./include/linux/mod_devicetable.h"
struct mhi_device_id {
 const char chan[32];
 kernel_ulong_t driver_data;
};




struct auxiliary_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};







struct ssam_device_id {
 __u8 match_flags;

 __u8 domain;
 __u8 category;
 __u8 target;
 __u8 instance;
 __u8 function;

 kernel_ulong_t driver_data;
};
# 892 "./include/linux/mod_devicetable.h"
struct dfl_device_id {
 __u16 type;
 __u16 feature_id;
 kernel_ulong_t driver_data;
};
# 28 "./include/linux/pci.h" 2



# 1 "./include/linux/ioport.h" 1
# 21 "./include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 134 "./include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
 IORES_DESC_SOFT_RESERVED = 8,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 185 "./include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return r1->start <= r2->end && r1->end >= r2->start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
resource_intersection(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) > (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x103 = (r1->start); typeof(r2->start) __UNIQUE_ID___y104 = (r2->start); ((__UNIQUE_ID___x103) > (__UNIQUE_ID___y104) ? (__UNIQUE_ID___x103) : (__UNIQUE_ID___y104)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) < (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x105 = (r1->end); typeof(r2->end) __UNIQUE_ID___y106 = (r2->end); ((__UNIQUE_ID___x105) < (__UNIQUE_ID___y106) ? (__UNIQUE_ID___x105) : (__UNIQUE_ID___y106)); }));
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
resource_union(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) < (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x107 = (r1->start); typeof(r2->start) __UNIQUE_ID___y108 = (r2->start); ((__UNIQUE_ID___x107) < (__UNIQUE_ID___y108) ? (__UNIQUE_ID___x107) : (__UNIQUE_ID___y108)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) > (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x109 = (r1->end); typeof(r2->end) __UNIQUE_ID___y110 = (r2->end); ((__UNIQUE_ID___x109) > (__UNIQUE_ID___y110) ? (__UNIQUE_ID___x109) : (__UNIQUE_ID___y110)); }));
 return true;
}
# 269 "./include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);
# 288 "./include/linux/ioport.h"
struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
struct resource *request_free_mem_region(struct resource *base,
  unsigned long size, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqresource_disabled(struct resource *res, u32 irq)
{
 res->start = irq;
 res->end = irq;
 res->flags |= 0x00000400 | 0x10000000 | 0x20000000;
}

extern struct address_space *iomem_get_mapping(void);
# 32 "./include/linux/pci.h" 2



# 1 "./include/linux/kobject.h" 1
# 20 "./include/linux/kobject.h"
# 1 "./include/linux/sysfs.h" 1
# 16 "./include/linux/sysfs.h"
# 1 "./include/linux/kernfs.h" 1
# 13 "./include/linux/kernfs.h"
# 1 "./include/linux/idr.h" 1
# 15 "./include/linux/idr.h"
# 1 "./include/linux/radix-tree.h" 1
# 19 "./include/linux/radix-tree.h"
# 1 "./include/linux/xarray.h" 1
# 52 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_value(unsigned long v)
{
 ({ int __ret_warn_on = !!((long)v < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/xarray.h"), "i" (54), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return (void *)((v << 1) | 1);
}
# 65 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_zero(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
}
# 199 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_err(const void *entry)
{
 return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0);

}
# 217 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 237 "./include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};







typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 294 "./include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 349 "./include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 376 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { static struct lock_class_key __key; __raw_spin_lock_init(spinlock_check(&xa->xa_lock), "&xa->xa_lock", &__key, LD_WAIT_CONFIG); } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 391 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 416 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (25 + 0)) << ( unsigned)(mark)));
}
# 556 "./include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 583 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 609 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 634 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 658 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 711 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 738 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 767 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 796 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 825 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 854 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 883 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 912 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 945 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 978 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 1011 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1041 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1059 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1077 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1092 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
}
# 1124 "./include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1164 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ do { extern void __compiletime_assert_111(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((xa->xa_head)) == sizeof(char) || sizeof((xa->xa_head)) == sizeof(short) || sizeof((xa->xa_head)) == sizeof(int) || sizeof((xa->xa_head)) == sizeof(long)) || sizeof((xa->xa_head)) == sizeof(long long))) __compiletime_assert_111(); } while (0); (*(const volatile typeof( _Generic(((xa->xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((xa->xa_head)))) *)&((xa->xa_head))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(xa->xa_head)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ do { extern void __compiletime_assert_112(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->slots[offset])) == sizeof(char) || sizeof((node->slots[offset])) == sizeof(short) || sizeof((node->slots[offset])) == sizeof(int) || sizeof((node->slots[offset])) == sizeof(long)) || sizeof((node->slots[offset])) == sizeof(long long))) __compiletime_assert_112(); } while (0); (*(const volatile typeof( _Generic(((node->slots[offset])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->slots[offset])))) *)&((node->slots[offset]))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->slots[offset])) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ do { extern void __compiletime_assert_113(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->parent)) == sizeof(char) || sizeof((node->parent)) == sizeof(short) || sizeof((node->parent)) == sizeof(int) || sizeof((node->parent)) == sizeof(long)) || sizeof((node->parent)) == sizeof(long long))) __compiletime_assert_113(); } while (0); (*(const volatile typeof( _Generic(((node->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->parent)))) *)&((node->parent))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->parent)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->parent)) *)((node->parent))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_sibling(const void *entry)
{
 return 0 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1261 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_retry(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1289 "./include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);

void xa_delete_node(struct xa_node *, xa_update_node_t);
# 1310 "./include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1389 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1469 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1486 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_get_order(struct xarray *xa, unsigned long index)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_split(struct xa_state *xas, void *entry,
  unsigned int order)
{
 xas_store(xas, entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_split_alloc(struct xa_state *xas, void *entry,
  unsigned int order, gfp_t gfp)
{
}
# 1548 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 char offset;

 if (!node)
  return xa_head(xas->xa);
 if (0) {
  offset = (xas->xa_index >> node->shift) & ((1UL << (0 ? 4 : 6)) - 1);
  entry = xa_entry(xas->xa, node, offset);
  if (!xa_is_sibling(entry))
   return entry;
  offset = xa_to_sibling(entry);
 } else {
  offset = xas->xa_offset;
 }
 return xa_entry(xas->xa, node, offset);
}
# 1577 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{






 do { if (__builtin_expect(!!(order > 0), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/xarray.h"), "i" (1598), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 xas_set(xas, index);

}
# 1611 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1627 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))), 0))

  return xas_find(xas, max);

 do {
  if (__builtin_expect(!!(xas->xa_index >= max), 0))
   return xas_find(xas, max);
  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 64) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return find_next_bit(addr, (1UL << (0 ? 4 : 6)), offset);
}
# 1684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 unsigned int offset;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return ((void *)0);
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 entry = xa_entry(xas->xa, node, offset);
 if (!entry)
  return xas_find_marked(xas, max, mark);
 return entry;
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1764 "./include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1783 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0))

  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1812 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))

  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 20 "./include/linux/radix-tree.h" 2






struct radix_tree_preload {
 local_lock_t lock;
 unsigned nr;

 struct xa_node *nodes;
};
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct radix_tree_preload) radix_tree_preloads;
# 53 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 84 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == ((void *)0);
}
# 104 "./include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 175 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ do { extern void __compiletime_assert_114(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*slot)) == sizeof(char) || sizeof((*slot)) == sizeof(short) || sizeof((*slot)) == sizeof(int) || sizeof((*slot)) == sizeof(long)) || sizeof((*slot)) == sizeof(long long))) __compiletime_assert_114(); } while (0); (*(const volatile typeof( _Generic(((*slot)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*slot)))) *)&((*slot))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 189 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0 && (!((lockdep_is_held(treelock))))); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 202 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radix_tree_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock)); (typeof((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); } while (0);
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 278 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 289 "./include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 307 "./include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 320 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 337 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 361 "./include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 395 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 return slot;
}
# 16 "./include/linux/idr.h" 2



struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ do { extern void __compiletime_assert_115(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_115(); } while (0); (*(const volatile typeof( _Generic((idr->idr_next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (idr->idr_next))) *)&(idr->idr_next)); });
}
# 79 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 do { do { extern void __compiletime_assert_116(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_116(); } while (0); do { *(volatile typeof(idr->idr_next) *)&(idr->idr_next) = (val); } while (0); } while (0);
}
# 112 "./include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((25 + 0)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock)); (typeof((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); } while (0);
}
# 240 "./include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "./include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 271 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 289 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 307 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (25 + 0)) << ( unsigned)((( xa_mark_t)0U)))))));
}
# 325 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 14 "./include/linux/kernfs.h" 2



# 1 "./include/linux/uidgid.h" 1
# 16 "./include/linux/uidgid.h"
# 1 "./include/linux/highuid.h" 1
# 35 "./include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "./include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "./include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 18 "./include/linux/kernfs.h" 2


struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};






enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 76 "./include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,




 KERNFS_ROOT_SUPPORT_USER_XATTR = 0x0008,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;




 unsigned long rev;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};
# 128 "./include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 140 "./include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;





 u64 id;

 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 173 "./include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_id_lowbits;
 u32 id_highbits;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 241 "./include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 257 "./include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_id_ino(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return id;
 else
  return (u32)id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kernfs_id_gen(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return 1;
 else
  return id >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_ino(struct kernfs_node *kn)
{
 return kernfs_id_ino(kn->id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_gen(struct kernfs_node *kn)
{
 return kernfs_id_gen(kn->id);
}
# 333 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/kernfs.h"), "i" (335), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(!(({ do { extern void __compiletime_assert_117(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&kn->dir.children)->rb_node) == sizeof(char) || sizeof((&kn->dir.children)->rb_node) == sizeof(short) || sizeof((&kn->dir.children)->rb_node) == sizeof(int) || sizeof((&kn->dir.children)->rb_node) == sizeof(long)) || sizeof((&kn->dir.children)->rb_node) == sizeof(long long))) __compiletime_assert_117(); } while (0); (*(const volatile typeof( _Generic(((&kn->dir.children)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&kn->dir.children)->rb_node))) *)&((&kn->dir.children)->rb_node)); }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/kernfs.h"), "i" (336), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *root,
         u64 id);
# 545 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, kuid_t uid, kgid_t gid,
        loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);




 return __kernfs_create_file(parent, name, mode, uid, gid,
        size, ops, priv, ns, key);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode,
         (kuid_t){ 0 }, (kgid_t){ 0 },
         size, ops, priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}
# 17 "./include/linux/sysfs.h" 2




# 1 "./include/linux/kobject_ns.h" 1
# 19 "./include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "./include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "./include/linux/sysfs.h" 2
# 1 "./include/linux/stat.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/stat.h" 1
# 1 "./include/uapi/asm-generic/stat.h" 1
# 24 "./include/uapi/asm-generic/stat.h"
struct stat {
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned long st_rdev;
 unsigned long __pad1;
 long st_size;
 int st_blksize;
 int __pad2;
 long st_blocks;
 long st_atime;
 unsigned long st_atime_nsec;
 long st_mtime;
 unsigned long st_mtime_nsec;
 long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned int __unused4;
 unsigned int __unused5;
};
# 2 "./arch/riscv/include/generated/uapi/asm/stat.h" 2
# 7 "./include/linux/stat.h" 2
# 1 "./include/uapi/linux/stat.h" 1
# 56 "./include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "./include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 8 "./include/linux/stat.h" 2
# 22 "./include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 41 "./include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
 u64 mnt_id;
};
# 23 "./include/linux/sysfs.h" 2


struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "./include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 171 "./include/linux/sysfs.h"
struct file;
struct vm_area_struct;
struct address_space;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 struct address_space *(*f_mapping)(void);
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 238 "./include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
      struct kobject *target_kobj,
      const char *target_name,
      const char *symlink_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}

int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
       kgid_t kgid);
int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
       const char *name, kuid_t kuid, kgid_t kgid);
int sysfs_groups_change_owner(struct kobject *kobj,
         const struct attribute_group **groups,
         kuid_t kuid, kgid_t kgid);
int sysfs_group_change_owner(struct kobject *kobj,
        const struct attribute_group *groups, kuid_t kuid,
        kgid_t kgid);
__attribute__((__format__(printf, 2, 3)))
int sysfs_emit(char *buf, const char *fmt, ...);
__attribute__((__format__(printf, 3, 4)))
int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
# 604 "./include/linux/sysfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "./include/linux/kobject.h" 2


# 1 "./include/linux/kref.h" 1
# 17 "./include/linux/kref.h"
# 1 "./include/linux/refcount.h" 1
# 101 "./include/linux/refcount.h"
struct mutex;
# 111 "./include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;





enum refcount_saturation_type {
 REFCOUNT_ADD_NOT_ZERO_OVF,
 REFCOUNT_ADD_OVF,
 REFCOUNT_ADD_UAF,
 REFCOUNT_SUB_UAF,
 REFCOUNT_DEC_LEAK,
};

void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_set(refcount_t *r, int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
{
 int old = refcount_read(r);

 do {
  if (!old)
   break;
 } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);

 return old;
}
# 186 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
{
 return __refcount_add_not_zero(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_add(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_add_relaxed(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(!old), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
 else if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
}
# 220 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_add(int i, refcount_t *r)
{
 __refcount_add(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
{
 return __refcount_add_not_zero(1, r, oldp);
}
# 243 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
{
 return __refcount_inc_not_zero(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_inc(refcount_t *r, int *oldp)
{
 __refcount_add(1, r, oldp);
}
# 265 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_inc(refcount_t *r)
{
 __refcount_inc(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (old == i) {
  __asm__ __volatile__ ("fence " "r" "," "r" : : : "memory");
  return true;
 }

 if (__builtin_expect(!!(old < 0 || old - i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);

 return false;
}
# 308 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
{
 return __refcount_sub_and_test(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
{
 return __refcount_sub_and_test(1, r, oldp);
}
# 331 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
{
 return __refcount_dec_and_test(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_dec(refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(1, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old <= 1), 0))
  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
}
# 357 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_dec(refcount_t *r)
{
 __refcount_dec(r, ((void *)0));
}

extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 18 "./include/linux/kref.h" 2

struct kref {
 refcount_t refcount;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 62 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 24 "./include/linux/kobject.h" 2
# 41 "./include/linux/kobject.h"
extern u64 uevent_seqnum;
# 53 "./include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create(void);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 131 "./include/linux/kobject.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/kobject.h"), "i" (133), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[64];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 192 "./include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_118(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_118(); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 36 "./include/linux/pci.h" 2

# 1 "./include/linux/device.h" 1
# 15 "./include/linux/device.h"
# 1 "./include/linux/dev_printk.h" 1
# 16 "./include/linux/dev_printk.h"
# 1 "./include/linux/ratelimit.h" 1





# 1 "./include/linux/sched.h" 1
# 10 "./include/linux/sched.h"
# 1 "./include/uapi/linux/sched.h" 1
# 92 "./include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
 __u64 __attribute__((aligned(8))) set_tid;
 __u64 __attribute__((aligned(8))) set_tid_size;
 __u64 __attribute__((aligned(8))) cgroup;
};
# 11 "./include/linux/sched.h" 2



# 1 "./include/linux/pid.h" 1




# 1 "./include/linux/rculist.h" 1
# 22 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 do { do { extern void __compiletime_assert_119(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_119(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 do { do { extern void __compiletime_assert_120(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->prev) == sizeof(char) || sizeof(list->prev) == sizeof(short) || sizeof(list->prev) == sizeof(int) || sizeof(list->prev) == sizeof(long)) || sizeof(list->prev) == sizeof(long long))) __compiletime_assert_120(); } while (0); do { *(volatile typeof(list->prev) *)&(list->prev) = (list); } while (0); } while (0);
}
# 76 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_121(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_121(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_122(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_122(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_123(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_123(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 next->prev = new;
}
# 104 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 125 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 155 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + 0);
}
# 181 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  do { do { extern void __compiletime_assert_124(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_124(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *)0)); } while (0); } while (0);
 }
}
# 197 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_125(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long long))) __compiletime_assert_125(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(new->prev)->next))))) *)&(((*((struct list_head **)(&(new->prev)->next))))) = ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_126(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_126(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_127(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long long))) __compiletime_assert_127(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(new->prev)->next)))) *)&(*&(*((struct list_head **)(&(new->prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + 0);
}
# 226 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 249 "./include/linux/rculist.h"
 sync();
 __kcsan_check_access(&(*first), sizeof(*first), (1 << 0) | (1 << 3));
 __kcsan_check_access(&(*last), sizeof(*last), (1 << 0) | (1 << 3));
# 261 "./include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_128(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_128(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_129(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_129(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_130(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_130(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 274 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 289 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 511 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 do { do { extern void __compiletime_assert_131(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_131(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + 0)); } while (0); } while (0);
}
# 524 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 do { do { extern void __compiletime_assert_132(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->pprev) == sizeof(char) || sizeof(new->pprev) == sizeof(short) || sizeof(new->pprev) == sizeof(int) || sizeof(new->pprev) == sizeof(long)) || sizeof(new->pprev) == sizeof(long long))) __compiletime_assert_132(); } while (0); do { *(volatile typeof(new->pprev) *)&(new->pprev) = (old->pprev); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_133(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*(struct hlist_node **)new->pprev)) == sizeof(char) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(short) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(int) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long)) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long long))) __compiletime_assert_133(); } while (0); do { *(volatile typeof((*(struct hlist_node **)new->pprev)) *)&((*(struct hlist_node **)new->pprev)) = ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_134(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_134(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_135(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long long))) __compiletime_assert_135(); } while (0); do { *(volatile typeof(*&*(struct hlist_node **)new->pprev) *)&(*&*(struct hlist_node **)new->pprev) = ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (next)
  do { do { extern void __compiletime_assert_136(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->next->pprev) == sizeof(char) || sizeof(new->next->pprev) == sizeof(short) || sizeof(new->next->pprev) == sizeof(int) || sizeof(new->next->pprev) == sizeof(long)) || sizeof(new->next->pprev) == sizeof(long long))) __compiletime_assert_136(); } while (0); do { *(volatile typeof(new->next->pprev) *)&(new->next->pprev) = (&new->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_137(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(old->pprev) == sizeof(char) || sizeof(old->pprev) == sizeof(short) || sizeof(old->pprev) == sizeof(int) || sizeof(old->pprev) == sizeof(long)) || sizeof(old->pprev) == sizeof(long long))) __compiletime_assert_137(); } while (0); do { *(volatile typeof(old->pprev) *)&(old->pprev) = (((void *) 0x122 + 0)); } while (0); } while (0);
}
# 547 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlists_swap_heads_rcu(struct hlist_head *left, struct hlist_head *right)
{
 struct hlist_node *node1 = left->first;
 struct hlist_node *node2 = right->first;

 do { uintptr_t _r_a_p__v = (uintptr_t)(node2); ; if (__builtin_constant_p(node2) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_138(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((left->first)) == sizeof(char) || sizeof((left->first)) == sizeof(short) || sizeof((left->first)) == sizeof(int) || sizeof((left->first)) == sizeof(long)) || sizeof((left->first)) == sizeof(long long))) __compiletime_assert_138(); } while (0); do { *(volatile typeof((left->first)) *)&((left->first)) = ((typeof(left->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_139(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)))) __compiletime_assert_139(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_140(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)) || sizeof(*&left->first) == sizeof(long long))) __compiletime_assert_140(); } while (0); do { *(volatile typeof(*&left->first) *)&(*&left->first) = ((typeof(*((typeof(left->first))_r_a_p__v)) *)((typeof(left->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(node1); ; if (__builtin_constant_p(node1) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_141(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((right->first)) == sizeof(char) || sizeof((right->first)) == sizeof(short) || sizeof((right->first)) == sizeof(int) || sizeof((right->first)) == sizeof(long)) || sizeof((right->first)) == sizeof(long long))) __compiletime_assert_141(); } while (0); do { *(volatile typeof((right->first)) *)&((right->first)) = ((typeof(right->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_142(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)))) __compiletime_assert_142(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_143(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)) || sizeof(*&right->first) == sizeof(long long))) __compiletime_assert_143(); } while (0); do { *(volatile typeof(*&right->first) *)&(*&right->first) = ((typeof(*((typeof(right->first))_r_a_p__v)) *)((typeof(right->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { extern void __compiletime_assert_144(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node2->pprev) == sizeof(char) || sizeof(node2->pprev) == sizeof(short) || sizeof(node2->pprev) == sizeof(int) || sizeof(node2->pprev) == sizeof(long)) || sizeof(node2->pprev) == sizeof(long long))) __compiletime_assert_144(); } while (0); do { *(volatile typeof(node2->pprev) *)&(node2->pprev) = (&left->first); } while (0); } while (0);
 do { do { extern void __compiletime_assert_145(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node1->pprev) == sizeof(char) || sizeof(node1->pprev) == sizeof(short) || sizeof(node1->pprev) == sizeof(int) || sizeof(node1->pprev) == sizeof(long)) || sizeof(node1->pprev) == sizeof(long long))) __compiletime_assert_145(); } while (0); do { *(volatile typeof(node1->pprev) *)&(node1->pprev) = (&right->first); } while (0); } while (0);
}
# 584 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 do { do { extern void __compiletime_assert_146(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_146(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_147(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long long))) __compiletime_assert_147(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(h)->first))))) *)&(((*((struct hlist_node **)(&(h)->first))))) = ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_148(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_148(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_149(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long long))) __compiletime_assert_149(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(h)->first)))) *)&(*&(*((struct hlist_node **)(&(h)->first)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (first)
  do { do { extern void __compiletime_assert_150(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_150(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
}
# 615 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  do { do { extern void __compiletime_assert_151(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_151(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&last->next); } while (0); } while (0);
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_152(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long long))) __compiletime_assert_152(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(last)->next))))) *)&(((*((struct hlist_node **)(&(last)->next))))) = ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_153(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_153(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_154(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long long))) __compiletime_assert_154(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(last)->next)))) *)&(*&(*((struct hlist_node **)(&(last)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 651 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 do { do { extern void __compiletime_assert_155(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_155(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_156(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(char) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(short) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(int) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long long))) __compiletime_assert_156(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)((n)->pprev))))) *)&(((*((struct hlist_node **)((n)->pprev))))) = ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_157(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_157(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_158(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long long))) __compiletime_assert_158(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)((n)->pprev)))) *)&(*&(*((struct hlist_node **)((n)->pprev)))) = ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { extern void __compiletime_assert_159(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_159(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
}
# 678 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 do { do { extern void __compiletime_assert_160(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_160(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_161(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_161(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(prev)->next))))) *)&(((*((struct hlist_node **)(&(prev)->next))))) = ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_162(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_162(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_163(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_163(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(prev)->next)))) *)&(*&(*((struct hlist_node **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (n->next)
  do { do { extern void __compiletime_assert_164(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_164(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 6 "./include/linux/pid.h" 2



enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "./include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;
 spinlock_t lock;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct hlist_head inodes;

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

struct file;

extern struct pid *pidfd_pid(const struct file *file);
struct pid *pidfd_get_pid(unsigned int fd, unsigned int *flags);
int pidfd_create(struct pid *pid, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pid_has_task(struct pid *pid, enum pid_type type)
{
 return !hlist_empty(&pid->tasks[type]);
}
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void exchange_tids(struct task_struct *task, struct task_struct *old);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;

extern int pid_max;
extern int pid_max_min, pid_max_max;
# 126 "./include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
        size_t set_tid_size);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 150 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 180 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "./include/linux/sched.h" 2
# 1 "./include/linux/sem.h" 1




# 1 "./include/uapi/linux/sem.h" 1




# 1 "./include/linux/ipc.h" 1






# 1 "./include/linux/rhashtable-types.h" 1
# 17 "./include/linux/rhashtable-types.h"
struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "./include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "./include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "./include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "./include/linux/ipc.h" 2
# 1 "./include/uapi/linux/ipc.h" 1
# 10 "./include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "./arch/riscv/include/generated/uapi/asm/ipcbuf.h" 1
# 1 "./include/uapi/asm-generic/ipcbuf.h" 1
# 22 "./include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "./arch/riscv/include/generated/uapi/asm/ipcbuf.h" 2
# 23 "./include/uapi/linux/ipc.h" 2
# 58 "./include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "./include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << 6)))) ;
# 6 "./include/uapi/linux/sem.h" 2
# 25 "./include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_old_time_t sem_otime;
 __kernel_old_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "./arch/riscv/include/generated/uapi/asm/sembuf.h" 1
# 1 "./include/uapi/asm-generic/sembuf.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/ipcbuf.h" 1
# 7 "./include/uapi/asm-generic/sembuf.h" 2
# 29 "./include/uapi/asm-generic/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;

 long sem_otime;
 long sem_ctime;






 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/riscv/include/generated/uapi/asm/sembuf.h" 2
# 38 "./include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "./include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 16 "./include/linux/sched.h" 2
# 1 "./include/linux/shm.h" 1






# 1 "./include/uapi/linux/shm.h" 1






# 1 "./include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "./include/uapi/linux/shm.h" 2
# 28 "./include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_old_time_t shm_atime;
 __kernel_old_time_t shm_dtime;
 __kernel_old_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "./arch/riscv/include/generated/uapi/asm/shmbuf.h" 1
# 1 "./include/uapi/asm-generic/shmbuf.h" 1
# 25 "./include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;

 long shm_atime;
 long shm_dtime;
 long shm_ctime;
# 40 "./include/uapi/asm-generic/shmbuf.h"
 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused4;
 unsigned long __unused5;
};

struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/riscv/include/generated/uapi/asm/shmbuf.h" 2
# 44 "./include/uapi/linux/shm.h" 2
# 93 "./include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "./include/linux/shm.h" 2
# 1 "./arch/riscv/include/generated/asm/shmparam.h" 1
# 1 "./include/asm-generic/shmparam.h" 1
# 2 "./arch/riscv/include/generated/asm/shmparam.h" 2
# 9 "./include/linux/shm.h" 2

struct file;


struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 17 "./include/linux/sched.h" 2

# 1 "./include/linux/plist.h" 1
# 79 "./include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 121 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 210 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 280 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { extern void __compiletime_assert_165(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void))))) __compiletime_assert_165(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { extern void __compiletime_assert_166(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void))))) __compiletime_assert_166(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 19 "./include/linux/sched.h" 2
# 1 "./include/linux/hrtimer.h" 1
# 15 "./include/linux/hrtimer.h"
# 1 "./include/linux/hrtimer_defs.h" 1
# 16 "./include/linux/hrtimer.h" 2






# 1 "./include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 33 "./include/linux/timerqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;

 return ({ void *__mptr = (void *)(leftmost); do { extern void __compiletime_assert_167(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(leftmost)), typeof(((struct timerqueue_node *)0)->node)) && !__builtin_types_compatible_p(typeof(*(leftmost)), typeof(void))))) __compiletime_assert_167(); } while (0); ((struct timerqueue_node *)(__mptr - __builtin_offsetof(struct timerqueue_node, node))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_queued(struct timerqueue_node *node)
{
 return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_expires(struct timerqueue_node *node)
{
 return node->expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->rb_root = (struct rb_root_cached) { {((void *)0), }, ((void *)0) };
}
# 23 "./include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 39 "./include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 118 "./include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 136 "./include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 159 "./include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_raw_spinlock_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__((1 << 6))));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 214 "./include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;





 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << 6))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern unsigned int hrtimer_resolution;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}


extern void timerfd_clock_was_set(void);
extern void timerfd_resume(void);





extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_cancel_wait_running(struct hrtimer *timer)
{
 cpu_relax();
}





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);
extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
     enum hrtimer_mode mode);
# 386 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
       clockid_t clock_id,
       enum hrtimer_mode mode)
{
 hrtimer_init_sleeper(sl, clock_id, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 415 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
       enum hrtimer_mode mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 468 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ do { extern void __compiletime_assert_168(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(timer->state) == sizeof(char) || sizeof(timer->state) == sizeof(short) || sizeof(timer->state) == sizeof(int) || sizeof(timer->state) == sizeof(long)) || sizeof(timer->state) == sizeof(long long))) __compiletime_assert_168(); } while (0); (*(const volatile typeof( _Generic((timer->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (timer->state))) *)&(timer->state)); }) & 0x01);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 503 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
         const clockid_t clockid);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
        const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 20 "./include/linux/sched.h" 2

# 1 "./include/linux/seccomp.h" 1




# 1 "./include/uapi/linux/seccomp.h" 1
# 60 "./include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};
# 109 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 128 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_addfd {
 __u64 id;
 __u32 flags;
 __u32 srcfd;
 __u32 newfd;
 __u32 newfd_flags;
};
# 6 "./include/linux/seccomp.h" 2
# 21 "./include/linux/seccomp.h"
# 1 "./arch/riscv/include/asm/seccomp.h" 1





# 1 "./arch/riscv/include/asm/unistd.h" 1
# 14 "./arch/riscv/include/asm/unistd.h"
# 1 "./arch/riscv/include/uapi/asm/unistd.h" 1
# 24 "./arch/riscv/include/uapi/asm/unistd.h"
# 1 "./include/uapi/asm-generic/unistd.h" 1
# 25 "./arch/riscv/include/uapi/asm/unistd.h" 2
# 15 "./arch/riscv/include/asm/unistd.h" 2
# 7 "./arch/riscv/include/asm/seccomp.h" 2

# 1 "./include/asm-generic/seccomp.h" 1
# 11 "./include/asm-generic/seccomp.h"
# 1 "./include/uapi/linux/unistd.h" 1







# 1 "./arch/riscv/include/asm/unistd.h" 1
# 14 "./arch/riscv/include/asm/unistd.h"
# 1 "./arch/riscv/include/uapi/asm/unistd.h" 1
# 24 "./arch/riscv/include/uapi/asm/unistd.h"
# 1 "./include/uapi/asm-generic/unistd.h" 1
# 25 "./arch/riscv/include/uapi/asm/unistd.h" 2
# 15 "./arch/riscv/include/asm/unistd.h" 2
# 9 "./include/uapi/linux/unistd.h" 2
# 12 "./include/asm-generic/seccomp.h" 2
# 9 "./arch/riscv/include/asm/seccomp.h" 2
# 22 "./include/linux/seccomp.h" 2

struct seccomp_filter;
# 35 "./include/linux/seccomp.h"
struct seccomp {
 int mode;
 atomic_t filter_count;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int secure_computing(void)
{
 if (__builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 8)), 0))
  return __secure_computing(((void *)0));
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 93 "./include/linux/seccomp.h"
extern void seccomp_filter_release(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 107 "./include/linux/seccomp.h"
extern long seccomp_get_filter(struct task_struct *task,
          unsigned long filter_off, void *data);
extern long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off, void *data);
# 22 "./include/linux/sched.h" 2



# 1 "./include/linux/resource.h" 1




# 1 "./include/uapi/linux/resource.h" 1
# 24 "./include/uapi/linux/resource.h"
struct rusage {
 struct __kernel_old_timeval ru_utime;
 struct __kernel_old_timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "./include/uapi/linux/resource.h"
# 1 "./arch/riscv/include/generated/uapi/asm/resource.h" 1
# 1 "./include/asm-generic/resource.h" 1




# 1 "./include/uapi/asm-generic/resource.h" 1
# 6 "./include/asm-generic/resource.h" 2
# 2 "./arch/riscv/include/generated/uapi/asm/resource.h" 2
# 79 "./include/uapi/linux/resource.h" 2
# 6 "./include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "./include/linux/sched.h" 2
# 1 "./include/linux/latencytop.h" 1
# 14 "./include/linux/latencytop.h"
struct task_struct;
# 46 "./include/linux/latencytop.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 27 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/prio.h" 1
# 32 "./include/linux/sched/prio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/types.h" 1
# 17 "./include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 29 "./include/linux/sched.h" 2
# 1 "./include/linux/signal_types.h" 1
# 10 "./include/linux/signal_types.h"
# 1 "./include/uapi/linux/signal.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/signal.h" 1
# 1 "./include/asm-generic/signal.h" 1




# 1 "./include/uapi/asm-generic/signal.h" 1
# 61 "./include/uapi/asm-generic/signal.h"
typedef struct {
 unsigned long sig[(64 / (8 * 8))];
} sigset_t;


typedef unsigned long old_sigset_t;

# 1 "./include/uapi/asm-generic/signal-defs.h" 1
# 81 "./include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 69 "./include/uapi/asm-generic/signal.h" 2
# 85 "./include/uapi/asm-generic/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 6 "./include/asm-generic/signal.h" 2





# 1 "./arch/riscv/include/uapi/asm/sigcontext.h" 1
# 17 "./arch/riscv/include/uapi/asm/sigcontext.h"
struct sigcontext {
 struct user_regs_struct sc_regs;
 union __riscv_fp_state sc_fpregs;
};
# 12 "./include/asm-generic/signal.h" 2
# 2 "./arch/riscv/include/generated/uapi/asm/signal.h" 2
# 6 "./include/uapi/linux/signal.h" 2
# 1 "./arch/riscv/include/generated/uapi/asm/siginfo.h" 1
# 1 "./include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 37 "./include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 79 "./include/uapi/asm-generic/siginfo.h"
  union {

   int _trapno;




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;

   struct {
    unsigned long _data;
    __u32 _type;
   } _perf;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 138 "./include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 333 "./include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 2 "./arch/riscv/include/generated/uapi/asm/siginfo.h" 2
# 7 "./include/uapi/linux/signal.h" 2
# 11 "./include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
} kernel_siginfo_t;

struct ucounts;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct ucounts *ucounts;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;







 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 67 "./include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 30 "./include/linux/sched.h" 2
# 1 "./include/linux/syscall_user_dispatch.h" 1
# 26 "./include/linux/syscall_user_dispatch.h"
struct syscall_user_dispatch {};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
         unsigned long len, char *selector)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_syscall_work_syscall_user_dispatch(struct task_struct *tsk)
{
}
# 31 "./include/linux/sched.h" 2

# 1 "./include/linux/task_io_accounting.h" 1
# 12 "./include/linux/task_io_accounting.h"
struct task_io_accounting {
# 46 "./include/linux/task_io_accounting.h"
};
# 33 "./include/linux/sched.h" 2
# 1 "./include/linux/posix-timers.h" 1






# 1 "./include/linux/alarmtimer.h" 1








struct rtc_device;

enum alarmtimer_type {
 ALARM_REALTIME,
 ALARM_BOOTTIME,


 ALARM_NUMTYPE,


 ALARM_REALTIME_FREEZER,
 ALARM_BOOTTIME_FREEZER,
};

enum alarmtimer_restart {
 ALARMTIMER_NORESTART,
 ALARMTIMER_RESTART,
};
# 42 "./include/linux/alarmtimer.h"
struct alarm {
 struct timerqueue_node node;
 struct hrtimer timer;
 enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
 enum alarmtimer_type type;
 int state;
 void *data;
};

void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
void alarm_start(struct alarm *alarm, ktime_t start);
void alarm_start_relative(struct alarm *alarm, ktime_t start);
void alarm_restart(struct alarm *alarm);
int alarm_try_to_cancel(struct alarm *alarm);
int alarm_cancel(struct alarm *alarm);

u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
ktime_t alarm_expires_remaining(const struct alarm *alarm);



struct rtc_device *alarmtimer_get_rtcdev(void);
# 8 "./include/linux/posix-timers.h" 2

# 1 "./include/linux/task_work.h" 1





# 1 "./include/linux/sched.h" 1
# 7 "./include/linux/task_work.h" 2

typedef void (*task_work_func_t)(struct callback_head *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_task_work(struct callback_head *twork, task_work_func_t func)
{
 twork->func = func;
}

enum task_work_notify_mode {
 TWA_NONE,
 TWA_RESUME,
 TWA_SIGNAL,
};

int task_work_add(struct task_struct *task, struct callback_head *twork,
   enum task_work_notify_mode mode);

struct callback_head *task_work_cancel_match(struct task_struct *task,
 bool (*match)(struct callback_head *, void *data), void *data);
struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
void task_work_run(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_task_work(struct task_struct *task)
{
 task_work_run();
}
# 10 "./include/linux/posix-timers.h" 2

struct kernel_siginfo;
struct task_struct;
# 39 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_process_cpuclock(const unsigned int pid,
  const clockid_t clock)
{
 return ((~pid) << 3) | clock;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_thread_cpuclock(const unsigned int tid,
  const clockid_t clock)
{
 return make_process_cpuclock(tid, clock | 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t fd_to_clockid(const int fd)
{
 return make_process_cpuclock((unsigned int) fd, 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int clockid_to_fd(const clockid_t clk)
{
 return ~(clk >> 3);
}
# 70 "./include/linux/posix-timers.h"
struct cpu_timer {
 struct timerqueue_node node;
 struct timerqueue_head *head;
 struct pid *pid;
 struct list_head elist;
 int firing;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_enqueue(struct timerqueue_head *head,
         struct cpu_timer *ctmr)
{
 ctmr->head = head;
 return timerqueue_add(head, &ctmr->node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_queued(struct cpu_timer *ctmr)
{
 return !!ctmr->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_dequeue(struct cpu_timer *ctmr)
{
 if (cpu_timer_queued(ctmr)) {
  timerqueue_del(ctmr->head, &ctmr->node);
  ctmr->head = ((void *)0);
  return true;
 }
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cpu_timer_getexpires(struct cpu_timer *ctmr)
{
 return ctmr->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_timer_setexpires(struct cpu_timer *ctmr, u64 exp)
{
 ctmr->node.expires = exp;
}






struct posix_cputimer_base {
 u64 nextevt;
 struct timerqueue_head tqhead;
};
# 130 "./include/linux/posix-timers.h"
struct posix_cputimers {
 struct posix_cputimer_base bases[3];
 unsigned int timers_active;
 unsigned int expiry_active;
};






struct posix_cputimers_work {
 struct callback_head work;
 unsigned int scheduled;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init(struct posix_cputimers *pct)
{
 memset(pct, 0, sizeof(*pct));
 pct->bases[0].nextevt = ((u64)~0ULL);
 pct->bases[1].nextevt = ((u64)~0ULL);
 pct->bases[2].nextevt = ((u64)~0ULL);
}

void posix_cputimers_group_init(struct posix_cputimers *pct, u64 cpu_limit);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_rt_watchdog(struct posix_cputimers *pct,
            u64 runtime)
{
 pct->bases[2].nextevt = runtime;
}
# 189 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init_work(void) { }
# 217 "./include/linux/posix-timers.h"
struct k_itimer {
 struct list_head list;
 struct hlist_node t_hash;
 spinlock_t it_lock;
 const struct k_clock *kclock;
 clockid_t it_clock;
 timer_t it_id;
 int it_active;
 s64 it_overrun;
 s64 it_overrun_last;
 int it_requeue_pending;
 int it_sigev_notify;
 ktime_t it_interval;
 struct signal_struct *it_signal;
 union {
  struct pid *it_pid;
  struct task_struct *it_process;
 };
 struct sigqueue *sigq;
 union {
  struct {
   struct hrtimer timer;
  } real;
  struct cpu_timer cpu;
  struct {
   struct alarm alarmtimer;
  } alarm;
 } it;
 struct callback_head rcu;
};

void run_posix_cpu_timers(void);
void posix_cpu_timers_exit(struct task_struct *task);
void posix_cpu_timers_exit_group(struct task_struct *task);
void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
      u64 *newval, u64 *oldval);

void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);

void posixtimer_rearm(struct kernel_siginfo *info);
# 34 "./include/linux/sched.h" 2
# 1 "./include/uapi/linux/rseq.h" 1
# 16 "./include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "./include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "./include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "./include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;

  __u64 ptr;
# 124 "./include/uapi/linux/rseq.h"
 } rseq_cs;
# 144 "./include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 35 "./include/linux/sched.h" 2

# 1 "./include/linux/kcsan.h" 1
# 62 "./include/linux/kcsan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_init(void) { }
# 37 "./include/linux/sched.h" 2
# 1 "./arch/riscv/include/generated/asm/kmap_size.h" 1
# 1 "./include/asm-generic/kmap_size.h" 1
# 2 "./arch/riscv/include/generated/asm/kmap_size.h" 2
# 38 "./include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct bpf_local_storage;
struct bpf_run_ctx;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct io_uring_task;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 280 "./include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);
           void preempt_schedule_irq(void);




extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 310 "./include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};

enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_IDLE,

 VTIME_SYS,

 VTIME_USER,

 VTIME_GUEST,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 unsigned int cpu;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};


extern struct root_domain def_root_domain;
extern struct mutex sched_domains_mutex;


struct sched_info {
# 377 "./include/linux/sched.h"
};
# 393 "./include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 427 "./include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;


} __attribute__((__aligned__(sizeof(u64))));
# 479 "./include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << 6))));

struct sched_statistics {
# 525 "./include/linux/sched.h"
};

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;

 unsigned long runnable_weight;
# 561 "./include/linux/sched.h"
 struct sched_avg avg;

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 630 "./include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 648 "./include/linux/sched.h"
 struct hrtimer inactive_timer;







 struct sched_dl_entity *pi_se;

};
# 695 "./include/linux/sched.h"
union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 need_mb;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct kmap_ctrl {




};

struct task_struct {





 struct thread_info thread_info;

 unsigned int __state;
# 744 "./include/linux/sched.h"
 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;


 int on_cpu;
 struct __call_single_node wake_entry;


 unsigned int cpu;

 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;
# 768 "./include/linux/sched.h"
 int recent_used_cpu;
 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;
 struct sched_dl_entity dl;
# 790 "./include/linux/sched.h"
 struct task_group *sched_task_group;
# 815 "./include/linux/sched.h"
 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t *user_cpus_ptr;
 cpumask_t cpus_mask;
 void *migration_pending;

 unsigned short migration_disabled;

 unsigned short migration_flags;
# 842 "./include/linux/sched.h"
 int trc_reader_nesting;
 int trc_ipi_to_cpu;
 union rcu_special trc_reader_special;
 bool trc_reader_checked;
 struct list_head trc_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;





 unsigned :0;
# 903 "./include/linux/sched.h"
 unsigned sched_remote_wakeup:1;


 unsigned in_execve:1;
 unsigned in_iowait:1;







 unsigned brk_randomized:1;



 unsigned no_cgroup_migration:1;

 unsigned frozen:1;
# 936 "./include/linux/sched.h"
 unsigned in_eventfd_signal:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 957 "./include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;


 void *pf_io_worker;

 u64 utime;
 u64 stime;




 u64 gtime;
 struct prev_cputime prev_cputime;
# 1011 "./include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 start_boottime;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct posix_cputimers posix_cputimers;
# 1034 "./include/linux/sched.h"
 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 1054 "./include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;


 unsigned long last_switch_count;
 unsigned long last_switch_time;


 struct fs_struct *fs;


 struct files_struct *files;


 struct io_uring_task *io_uring;



 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;
# 1100 "./include/linux/sched.h"
 struct seccomp seccomp;
 struct syscall_user_dispatch syscall_dispatch;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;




 struct mutex_waiter *blocked_on;



 int non_block_count;
# 1158 "./include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;
# 1205 "./include/linux/sched.h"
 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;



 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 struct mutex futex_exit_mutex;
 unsigned int futex_state;
# 1297 "./include/linux/sched.h"
 struct tlbflush_unmap_batch tlb_ubc;

 union {
  refcount_t rcu_users;
  struct callback_head rcu;
 };


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;
# 1321 "./include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1334 "./include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1429 "./include/linux/sched.h"
 struct kmap_ctrl kmap_ctrl;

 unsigned long task_state_change;




 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct vm_struct *stack_vm_area;



 refcount_t stack_refcount;
# 1456 "./include/linux/sched.h"
 struct bpf_local_storage *bpf_storage;

 struct bpf_run_ctx *bpf_ctx;
# 1498 "./include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1524 "./include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1557 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { extern void __compiletime_assert_169(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_169(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ do { extern void __compiletime_assert_170(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(tsk->__state) == sizeof(char) || sizeof(tsk->__state) == sizeof(short) || sizeof(tsk->__state) == sizeof(int) || sizeof(tsk->__state) == sizeof(long)) || sizeof(tsk->__state) == sizeof(long long))) __compiletime_assert_170(); } while (0); (*(const volatile typeof( _Generic((tsk->__state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tsk->__state))) *)&(tsk->__state)); });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { extern void __compiletime_assert_171(void) __attribute__((__error__("BUILD_BUG_ON failed: " "((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)"))); if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_171(); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { extern void __compiletime_assert_172(void) __attribute__((__error__("BUILD_BUG_ON failed: " "1 + ilog2(TASK_REPORT_MAX) != sizeof(state_char) - 1"))); if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : 63 - __builtin_clzll((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1))) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_172(); } while (0);

 return state_char[state];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1655 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1723 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_percpu_thread(void)
{

 return (get_current()->flags & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 1755 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_no_new_privs(struct task_struct *p) { return arch_test_bit(0, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_page(struct task_struct *p) { return arch_test_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_slab(struct task_struct *p) { return arch_test_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_disable(struct task_struct *p) { return arch_test_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_noexec(struct task_struct *p) { return arch_test_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_force_disable(struct task_struct *p) { return arch_test_bit(4, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_disable(struct task_struct *p) { return arch_test_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_force_disable(struct task_struct *p) { return arch_test_bit(6, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
extern int dup_user_cpus_ptr(struct task_struct *dst, struct task_struct *src, int node);
extern void release_user_cpus_ptr(struct task_struct *p);
extern int dl_task_check_affinity(struct task_struct *p, const struct cpumask *mask);
extern void force_compatible_cpus_allowed_ptr(struct task_struct *p);
extern void relax_compatible_cpus_allowed_ptr(struct task_struct *p);
# 1828 "./include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern void sched_set_fifo(struct task_struct *p);
extern void sched_set_fifo_low(struct task_struct *p);
extern void sched_set_normal(struct task_struct *p, int nice);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;




 unsigned long stack[(((1UL) << (12)) << (2))/sizeof(long)];
};





extern unsigned long init_stack[(((1UL) << (12)) << (2)) / sizeof(unsigned long)];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct thread_info *task_thread_info(struct task_struct *task)
{
 return &task->thread_info;
}
# 1908 "./include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void scheduler_ipi(void)
{





 do { if (test_ti_thread_flag(((struct thread_info *)get_current()), 3)) set_preempt_need_resched(); } while (0);
}
extern unsigned long wait_task_inactive(struct task_struct *, unsigned int match_state);
# 1962 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(task_thread_info(tsk), flag, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
}
# 2015 "./include/linux/sched.h"
extern int __cond_resched(void);
# 2028 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int _cond_resched(void)
{
 return __cond_resched();
}
# 2046 "./include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_rwlock_read(rwlock_t *lock);
extern int __cond_resched_rwlock_write(rwlock_t *lock);
# 2065 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cond_resched_rcu(void)
{

 rcu_read_unlock();
 ({ ___might_sleep("include/linux/sched.h", 2069, 0); _cond_resched(); });
 rcu_read_lock();

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spin_needbreak(spinlock_t *lock)
{



 return 0;

}
# 2096 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwlock_needbreak(rwlock_t *lock)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_cpu(const struct task_struct *p)
{

 return ({ do { extern void __compiletime_assert_173(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->cpu) == sizeof(char) || sizeof(p->cpu) == sizeof(short) || sizeof(p->cpu) == sizeof(int) || sizeof(p->cpu) == sizeof(long)) || sizeof(p->cpu) == sizeof(long long))) __compiletime_assert_173(); } while (0); (*(const volatile typeof( _Generic((p->cpu), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->cpu))) *)&(p->cpu)); });



}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 2139 "./include/linux/sched.h"
extern bool sched_task_on_rq(struct task_struct *p);
# 2150 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vcpu_is_preempted(int cpu)
{
 return false;
}


extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);







unsigned long sched_cpu_util(int cpu, unsigned long max);
# 2250 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_set_notify_resume(struct task_struct *t)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_preempt(struct task_struct *t)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_migrate(struct task_struct *t)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_execve(struct task_struct *t)
{
}
# 2282 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_syscall(struct pt_regs *regs)
{
}



const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);
int sched_trace_rq_cpu_capacity(struct rq *rq);
int sched_trace_rq_nr_running(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_core_free(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_core_fork(struct task_struct *p) { }
# 7 "./include/linux/ratelimit.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { static struct lock_class_key __key; __raw_spin_lock_init((&rs->lock), "&rs->lock", &__key, LD_WAIT_SPIN); } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 250),
     10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  ({ do {} while (0); _printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed); });

  rs->missed = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;
# 17 "./include/linux/dev_printk.h" 2





struct device;




struct dev_printk_info {
 char subsystem[16];
 char device[48];
};



__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void _dev_printk(const char *level, const struct device *dev,
   const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 16 "./include/linux/device.h" 2
# 1 "./include/linux/energy_model.h" 1




# 1 "./include/linux/device.h" 1
# 6 "./include/linux/energy_model.h" 2
# 1 "./include/linux/jump_label.h" 1
# 79 "./include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 102 "./include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 117 "./include/linux/jump_label.h"
# 1 "./arch/riscv/include/asm/jump_label.h" 1
# 17 "./arch/riscv/include/asm/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch(struct static_key *key,
            bool branch)
{
 asm goto("	.option push				\n\t" "	.option norelax				\n\t" "	.option norvc				\n\t" "1:	nop					\n\t" "	.option pop				\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		" "3" "		\n\t" "	.long		1b - ., %l[label] - .	\n\t" "	" ".dword" "	%0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : label);
# 33 "./arch/riscv/include/asm/jump_label.h"
 return false;
label:
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch_jump(struct static_key *key,
          bool branch)
{
 asm goto("	.option push				\n\t" "	.option norelax				\n\t" "	.option norvc				\n\t" "1:	jal		zero, %l[label]		\n\t" "	.option pop				\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		" "3" "		\n\t" "	.long		1b - ., %l[label] - .	\n\t" "	" ".dword" "	%0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : label);
# 54 "./arch/riscv/include/asm/jump_label.h"
 return false;
label:
 return true;
}
# 118 "./include/linux/jump_label.h" 2




struct jump_entry {
 s32 code;
 s32 target;
 long key;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_code(const struct jump_entry *entry)
{
 return (unsigned long)&entry->code + entry->code;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_target(const struct jump_entry *entry)
{
 return (unsigned long)&entry->target + entry->target;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct static_key *jump_entry_key(const struct jump_entry *entry)
{
 long offset = entry->key & ~3L;

 return (struct static_key *)((unsigned long)&entry->key + offset);
}
# 164 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_branch(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 1UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_init(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 2UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_entry_set_init(struct jump_entry *entry, bool set)
{
 if (set)
  entry->key |= 2;
 else
  entry->key &= ~2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int jump_entry_size(struct jump_entry *entry)
{

 return 4;



}






enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 210 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern bool arch_jump_label_transform_queue(struct jump_entry *entry,
         enum jump_label_type type);
extern void arch_jump_label_transform_apply(void);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 358 "./include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 412 "./include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 7 "./include/linux/energy_model.h" 2


# 1 "./include/linux/sched/cpufreq.h" 1
# 10 "./include/linux/energy_model.h" 2
# 1 "./include/linux/sched/topology.h" 1






# 1 "./include/linux/sched/idle.h" 1






enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};

extern void wake_up_if_idle(int cpu);
# 59 "./include/linux/sched/idle.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __current_set_polling(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __current_clr_polling(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) current_set_polling_and_test(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) current_clr_polling_and_test(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void current_clr_polling(void)
{
 __current_clr_polling();







 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");

 do { if (test_ti_thread_flag(((struct thread_info *)get_current()), 3)) set_preempt_need_resched(); } while (0);
}
# 8 "./include/linux/sched/topology.h" 2








enum {
# 1 "./include/linux/sched/sd_flags.h" 1
# 51 "./include/linux/sched/sd_flags.h"
__SD_BALANCE_NEWIDLE,







__SD_BALANCE_EXEC,







__SD_BALANCE_FORK,







__SD_BALANCE_WAKE,






__SD_WAKE_AFFINE,
# 91 "./include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY,
# 101 "./include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY_FULL,
# 110 "./include/linux/sched/sd_flags.h"
__SD_SHARE_CPUCAPACITY,
# 119 "./include/linux/sched/sd_flags.h"
__SD_SHARE_PKG_RESOURCES,
# 130 "./include/linux/sched/sd_flags.h"
__SD_SERIALIZE,
# 140 "./include/linux/sched/sd_flags.h"
__SD_ASYM_PACKING,
# 150 "./include/linux/sched/sd_flags.h"
__SD_PREFER_SIBLING,







__SD_OVERLAP,







__SD_NUMA,
# 18 "./include/linux/sched/topology.h" 2
 __SD_FLAG_CNT,
};



enum {
# 1 "./include/linux/sched/sd_flags.h" 1
# 51 "./include/linux/sched/sd_flags.h"
SD_BALANCE_NEWIDLE = 1 << __SD_BALANCE_NEWIDLE,







SD_BALANCE_EXEC = 1 << __SD_BALANCE_EXEC,







SD_BALANCE_FORK = 1 << __SD_BALANCE_FORK,







SD_BALANCE_WAKE = 1 << __SD_BALANCE_WAKE,






SD_WAKE_AFFINE = 1 << __SD_WAKE_AFFINE,
# 91 "./include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY = 1 << __SD_ASYM_CPUCAPACITY,
# 101 "./include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY_FULL = 1 << __SD_ASYM_CPUCAPACITY_FULL,
# 110 "./include/linux/sched/sd_flags.h"
SD_SHARE_CPUCAPACITY = 1 << __SD_SHARE_CPUCAPACITY,
# 119 "./include/linux/sched/sd_flags.h"
SD_SHARE_PKG_RESOURCES = 1 << __SD_SHARE_PKG_RESOURCES,
# 130 "./include/linux/sched/sd_flags.h"
SD_SERIALIZE = 1 << __SD_SERIALIZE,
# 140 "./include/linux/sched/sd_flags.h"
SD_ASYM_PACKING = 1 << __SD_ASYM_PACKING,
# 150 "./include/linux/sched/sd_flags.h"
SD_PREFER_SIBLING = 1 << __SD_PREFER_SIBLING,







SD_OVERLAP = 1 << __SD_OVERLAP,







SD_NUMA = 1 << __SD_NUMA,
# 25 "./include/linux/sched/topology.h" 2
};




struct sd_flag_debug {
 unsigned int meta_flags;
 char *name;
};
extern const struct sd_flag_debug sd_flag_debug[];
# 59 "./include/linux/sched/topology.h"
extern int arch_asym_cpu_priority(int cpu);

struct sched_domain_attr {
 int relax_domain_level;
};





extern int sched_domain_level_max;

struct sched_group;

struct sched_domain_shared {
 atomic_t ref;
 atomic_t nr_busy_cpus;
 int has_idle_cores;
};

struct sched_domain {

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;

 int nohz_idle;
 int flags;
 int level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;


 u64 max_newidle_lb_cost;
 unsigned long next_decay_max_lb_cost;

 u64 avg_scan_cost;
# 137 "./include/linux/sched/topology.h"
 char *name;

 union {
  void *private;
  struct callback_head rcu;
 };
 struct sched_domain_shared *shared;

 unsigned int span_weight;







 unsigned long span[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *sched_domain_span(struct sched_domain *sd)
{
 return ((struct cpumask *)(1 ? (sd->span) : (void *)sizeof(__check_is_bitmap(sd->span))));
}

extern void partition_sched_domains_locked(int ndoms_new,
        cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);

extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);


cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);

bool cpus_share_cache(int this_cpu, int that_cpu);

typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
typedef int (*sched_domain_flags_f)(void);



struct sd_data {
 struct sched_domain * *sd;
 struct sched_domain_shared * *sds;
 struct sched_group * *sg;
 struct sched_group_capacity * *sgc;
};

struct sched_domain_topology_level {
 sched_domain_mask_f mask;
 sched_domain_flags_f sd_flags;
 int flags;
 int numa_level;
 struct sd_data data;

 char *name;

};

extern void set_sched_topology(struct sched_domain_topology_level *tl);
# 231 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rebuild_sched_domains_energy(void)
{
}
# 247 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long arch_scale_cpu_capacity(int cpu)
{
 return (1L << 10);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long arch_scale_thermal_pressure(int cpu)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch_set_thermal_pressure(const struct cpumask *cpus,
          unsigned long th_pressure)
{ }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_node(const struct task_struct *p)
{
 return ((void)(task_cpu(p)),0);
}
# 11 "./include/linux/energy_model.h" 2
# 21 "./include/linux/energy_model.h"
struct em_perf_state {
 unsigned long frequency;
 unsigned long power;
 unsigned long cost;
};
# 44 "./include/linux/energy_model.h"
struct em_perf_domain {
 struct em_perf_state *table;
 int nr_perf_states;
 int milliwatts;
 unsigned long cpus[];
};
# 215 "./include/linux/energy_model.h"
struct em_data_callback {};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
    struct em_data_callback *cb, cpumask_t *span,
    bool milliwatts)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void em_dev_unregister_perf_domain(struct device *dev)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct em_perf_domain *em_cpu_get(int cpu)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct em_perf_domain *em_pd_get(struct device *dev)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long em_cpu_energy(struct em_perf_domain *pd,
   unsigned long max_util, unsigned long sum_util,
   unsigned long allowed_cpu_cap)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int em_pd_nr_perf_states(struct em_perf_domain *pd)
{
 return 0;
}
# 17 "./include/linux/device.h" 2


# 1 "./include/linux/klist.h" 1
# 17 "./include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "./include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 20 "./include/linux/device.h" 2





# 1 "./include/linux/pm.h" 1
# 22 "./include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_vt_switch_required(struct device *dev, bool required)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_vt_switch_unregister(struct device *dev)
{
}
# 49 "./include/linux/pm.h"
typedef struct pm_message {
 int event;
} pm_message_t;
# 277 "./include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 501 "./include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 523 "./include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;
# 546 "./include/linux/pm.h"
};
# 566 "./include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;
# 590 "./include/linux/pm.h"
 unsigned int should_wakeup:1;
# 622 "./include/linux/pm.h"
 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 644 "./include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 int (*start)(struct device *dev);
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 763 "./include/linux/pm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dpm_suspend_start(pm_message_t state)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_pm_wait_for_dev(struct device *a, struct device *b)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *))
{
}
# 802 "./include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "./include/linux/device.h" 2



# 1 "./include/linux/overflow.h" 1
# 49 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
{
 return __builtin_expect(!!(overflow), 0);
}
# 131 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 153 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 30 "./include/linux/device.h" 2
# 1 "./include/linux/device/bus.h" 1
# 21 "./include/linux/device/bus.h"
struct device_driver;
struct fwnode_handle;
# 82 "./include/linux/device/bus.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 void (*sync_state)(struct device *dev);
 void (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 136 "./include/linux/device/bus.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);


int device_match_name(struct device *dev, const void *name);
int device_match_of_node(struct device *dev, const void *np);
int device_match_fwnode(struct device *dev, const void *fwnode);
int device_match_devt(struct device *dev, const void *pdevt);
int device_match_acpi_dev(struct device *dev, const void *adev);
int device_match_any(struct device *dev, const void *unused);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name)
{
 return bus_find_device(bus, start, name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
{
 return bus_find_device(bus, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
{
 return bus_find_device(bus, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_devt(struct bus_type *bus,
           dev_t devt)
{
 return bus_find_device(bus, ((void *)0), &devt, device_match_devt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_next_device(struct bus_type *bus,struct device *cur)
{
 return bus_find_device(bus, cur, ((void *)0), device_match_any);
}
# 242 "./include/linux/device/bus.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
{
 return ((void *)0);
}


struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 285 "./include/linux/device/bus.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 31 "./include/linux/device.h" 2
# 1 "./include/linux/device/class.h" 1
# 22 "./include/linux/device/class.h"
struct device;
struct fwnode_handle;
# 54 "./include/linux/device/class.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 99 "./include/linux/device/class.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_name(struct class *class,
             const char *name)
{
 return class_find_device(class, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_of_node(struct class *class, const struct device_node *np)
{
 return class_find_device(class, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_fwnode(struct class *class,
       const struct fwnode_handle *fwnode)
{
 return class_find_device(class, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_devt(struct class *class,
             dev_t devt)
{
 return class_find_device(class, ((void *)0), &devt, device_match_devt);
}
# 184 "./include/linux/device/class.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_acpi_dev(struct class *class, const void *adev)
{
 return ((void *)0);
}


struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 206 "./include/linux/device/class.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 238 "./include/linux/device/class.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 32 "./include/linux/device.h" 2
# 1 "./include/linux/device/driver.h" 1
# 44 "./include/linux/device/driver.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 95 "./include/linux/device/driver.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 148 "./include/linux/device/driver.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_name(struct device_driver *drv,
       const char *name)
{
 return driver_find_device(drv, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_of_node(struct device_driver *drv,
         const struct device_node *np)
{
 return driver_find_device(drv, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_fwnode(struct device_driver *drv,
        const struct fwnode_handle *fwnode)
{
 return driver_find_device(drv, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_devt(struct device_driver *drv,
       dev_t devt)
{
 return driver_find_device(drv, ((void *)0), &devt, device_match_devt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_next_device(struct device_driver *drv,
           struct device *start)
{
 return driver_find_device(drv, start, ((void *)0), device_match_any);
}
# 232 "./include/linux/device/driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_acpi_dev(struct device_driver *drv, const void *adev)
{
 return ((void *)0);
}


extern int driver_deferred_probe_timeout;
void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
void driver_init(void);
# 33 "./include/linux/device.h" 2
# 1 "./arch/riscv/include/generated/asm/device.h" 1
# 1 "./include/asm-generic/device.h" 1







struct dev_archdata {
};

struct pdev_archdata {
};
# 2 "./arch/riscv/include/generated/asm/device.h" 2
# 34 "./include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct dev_pin_info;
struct dev_iommu;
# 62 "./include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 87 "./include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 153 "./include/linux/device.h"
int device_create_file(struct device *device,
         const struct device_attribute *entry);
void device_remove_file(struct device *dev,
   const struct device_attribute *attr);
bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);

void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));





void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
void devres_free(void *res);
void devres_add(struct device *dev, void *res);
void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id, gfp_t gfp);
void devres_close_group(struct device *dev, void *id);
void devres_remove_group(struct device *dev, void *id);
int devres_release_group(struct device *dev, void *id);


void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
void *devm_krealloc(struct device *dev, void *ptr, size_t size,
      gfp_t gfp) __attribute__((__warn_unused_result__));
__attribute__((__format__(printf, 3, 0))) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
         const char *fmt, va_list ap) __attribute__((__malloc__));
__attribute__((__format__(printf, 3, 4))) char *devm_kasprintf(struct device *dev, gfp_t gfp,
        const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return devm_kmalloc(dev, bytes, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
void devm_kfree(struct device *dev, const void *p);
char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
const char *devm_kstrdup_const(struct device *dev, const char *s, gfp_t gfp);
void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp);

unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);
void *devm_ioremap_resource_wc(struct device *dev,
           const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 275 "./include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned int min_align_mask;
 unsigned long segment_boundary_mask;
};
# 298 "./include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 337 "./include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};
# 353 "./include/linux/device.h"
enum device_removable {
 DEVICE_REMOVABLE_NOT_SUPPORTED = 0,
 DEVICE_REMOVABLE_UNKNOWN,
 DEVICE_FIXED,
 DEVICE_REMOVABLE,
};
# 367 "./include/linux/device.h"
struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 struct list_head defer_sync;
 enum dl_dev_state status;
};
# 473 "./include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;






 struct irq_domain *msi_domain;





 raw_spinlock_t msi_lock;
 struct list_head msi_list;




 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_limit;
 const struct bus_dma_region *dma_range_map;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;







 struct io_tlb_mem *dma_io_tlb_mem;


 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;




 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct dev_iommu *iommu;

 enum device_removable removable;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
 bool state_synced:1;
 bool can_match:1;
# 578 "./include/linux/device.h"
};
# 594 "./include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 struct device link_dev;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;
 struct work_struct rm_work;
 bool supplier_preactivated;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_174(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_174(); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != ((void *)0));
}


# 1 "./include/linux/pm_wakeup.h" 1
# 18 "./include/linux/pm_wakeup.h"
struct wake_irq;
# 43 "./include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};
# 123 "./include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_wakeup_capable(struct device *dev, bool capable)
{
 dev->power.can_wakeup = capable;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct wakeup_source *wakeup_source_create(const char *name)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wakeup_source_destroy(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wakeup_source_add(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wakeup_source_remove(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wakeup_source_unregister(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_wakeup_enable(struct device *dev)
{
 dev->power.should_wakeup = true;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_wakeup_disable(struct device *dev)
{
 dev->power.should_wakeup = false;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_set_wakeup_enable(struct device *dev, bool enable)
{
 dev->power.should_wakeup = enable;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_init_wakeup(struct device *dev, bool val)
{
 device_set_wakeup_capable(dev, val);
 device_set_wakeup_enable(dev, val);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && dev->power.should_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_wakeup_path(struct device *dev)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_wakeup_path(struct device *dev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_stay_awake(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_stay_awake(struct device *dev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_relax(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_relax(struct device *dev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_ws_event(struct wakeup_source *ws,
          unsigned int msec, bool hard) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_dev_event(struct device *dev, unsigned int msec,
           bool hard) {}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 625 "./include/linux/device.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}
# 642 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_bus_name(const struct device *dev)
{
 return dev->bus ? dev->bus->name : (dev->class ? dev->class->name : "");
}

__attribute__((__format__(printf, 2, 3))) int dev_set_name(struct device *dev, const char *name, ...);
# 659 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_to_node(struct device *dev)
{
 return (-1);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dev_node(struct device *dev, int node)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_syscore_device(struct device *dev, bool val)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return ((void *)0);
 return dev->of_node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_has_sync_state(struct device *dev)
{
 if (!dev)
  return false;
 if (dev->driver && dev->driver->sync_state)
  return true;
 if (dev->bus && dev->bus->sync_state)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_removable(struct device *dev,
         enum device_removable removable)
{
 dev->removable = removable;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_is_removable(struct device *dev)
{
 return dev->removable == DEVICE_REMOVABLE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_removable_is_valid(struct device *dev)
{
 return dev->removable != DEVICE_REMOVABLE_NOT_SUPPORTED;
}




int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
void device_unregister(struct device *dev);
void device_initialize(struct device *dev);
int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
void device_del(struct device *dev);
int device_for_each_child(struct device *dev, void *data,
     int (*fn)(struct device *dev, void *data));
int device_for_each_child_reverse(struct device *dev, void *data,
      int (*fn)(struct device *dev, void *data));
struct device *device_find_child(struct device *dev, void *data,
     int (*match)(struct device *dev, void *data));
struct device *device_find_child_by_name(struct device *parent,
      const char *name);
int device_rename(struct device *dev, const char *new_name);
int device_move(struct device *dev, struct device *new_parent,
  enum dpm_order dpm_order);
int device_change_owner(struct device *dev, kuid_t kuid, kgid_t kgid);
const char *device_get_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
          kgid_t *gid, const char **tmp);
int device_is_dependent(struct device *dev, void *target);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

void lock_device_hotplug(void);
void unlock_device_hotplug(void);
int lock_device_hotplug_sysfs(void);
int device_offline(struct device *dev);
int device_online(struct device *dev);
void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);
void device_set_node(struct device *dev, struct fwnode_handle *fwnode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




struct device *__root_device_register(const char *name, struct module *owner);





void root_device_unregister(struct device *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





int __attribute__((__warn_unused_result__)) device_driver_attach(struct device_driver *drv,
          struct device *dev);
int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
void device_release_driver(struct device *dev);
int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
void device_initial_probe(struct device *dev);
int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

bool device_is_bound(struct device *dev);




__attribute__((__format__(printf, 5, 6))) struct device *
device_create(struct class *cls, struct device *parent, dev_t devt,
       void *drvdata, const char *fmt, ...);
__attribute__((__format__(printf, 6, 7))) struct device *
device_create_with_groups(struct class *cls, struct device *parent, dev_t devt,
     void *drvdata, const struct attribute_group **groups,
     const char *fmt, ...);
void device_destroy(struct class *cls, dev_t devt);

int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
       const struct attribute_group **groups);
void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
           const struct attribute_group *grp);
void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






struct device *get_device(struct device *dev);
void put_device(struct device *dev);
bool kill_device(struct device *dev);


int devtmpfs_mount(void);





void device_shutdown(void);


const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);
void device_links_supplier_sync_state_pause(void);
void device_links_supplier_sync_state_resume(void);

extern __attribute__((__format__(printf, 3, 4)))
int dev_err_probe(const struct device *dev, int err, const char *fmt, ...);
# 38 "./include/linux/pci.h" 2
# 1 "./include/linux/interrupt.h" 1
# 10 "./include/linux/interrupt.h"
# 1 "./include/linux/irqnr.h" 1




# 1 "./include/uapi/linux/irqnr.h" 1
# 6 "./include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 11 "./include/linux/interrupt.h" 2
# 1 "./include/linux/hardirq.h" 1




# 1 "./include/linux/context_tracking_state.h" 1





# 1 "./include/linux/static_key.h" 1
# 7 "./include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 49 "./include/linux/context_tracking_state.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled_cpu(int cpu) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled_this_cpu(void) { return false; }
# 6 "./include/linux/hardirq.h" 2


# 1 "./include/linux/ftrace_irq.h" 1
# 15 "./include/linux/ftrace_irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_enter(void)
{
# 25 "./include/linux/ftrace_irq.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_exit(void)
{
# 37 "./include/linux/ftrace_irq.h"
}
# 9 "./include/linux/hardirq.h" 2

# 1 "./include/linux/vtime.h" 1
# 28 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }
# 41 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_irq(struct task_struct *tsk, unsigned int offset) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_softirq(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_hardirq(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_flush(struct task_struct *tsk) { }
# 116 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vtime_accounting_enabled_this_cpu(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_task_switch(struct task_struct *prev) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void vtime_account_guest_enter(void)
{
 get_current()->flags |= 0x00000001;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void vtime_account_guest_exit(void)
{
 get_current()->flags &= ~0x00000001;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqtime_account_irq(struct task_struct *tsk, unsigned int offset) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_softirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << (0 + 8)));
 irqtime_account_irq(tsk, (1UL << (0 + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_softirq_exit(struct task_struct *tsk)
{
 vtime_account_softirq(tsk);
 irqtime_account_irq(tsk, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_hardirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
 irqtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_hardirq_exit(struct task_struct *tsk)
{
 vtime_account_hardirq(tsk);
 irqtime_account_irq(tsk, 0);
}
# 11 "./include/linux/hardirq.h" 2
# 1 "./arch/riscv/include/generated/asm/hardirq.h" 1
# 1 "./include/asm-generic/hardirq.h" 1







typedef struct {
 unsigned int __softirq_pending;



} __attribute__((__aligned__((1 << 6)))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << 6))));

# 1 "./include/linux/irq.h" 1
# 16 "./include/linux/irq.h"
# 1 "./include/linux/irqhandler.h" 1
# 10 "./include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
# 17 "./include/linux/irq.h" 2



# 1 "./include/linux/io.h" 1
# 13 "./include/linux/io.h"
# 1 "./arch/riscv/include/asm/io.h" 1
# 15 "./arch/riscv/include/asm/io.h"
# 1 "./include/linux/pgtable.h" 1





# 1 "./arch/riscv/include/asm/pgtable.h" 1
# 10 "./arch/riscv/include/asm/pgtable.h"
# 1 "./include/linux/sizes.h" 1
# 11 "./arch/riscv/include/asm/pgtable.h" 2

# 1 "./arch/riscv/include/asm/pgtable-bits.h" 1
# 13 "./arch/riscv/include/asm/pgtable.h" 2
# 86 "./arch/riscv/include/asm/pgtable.h"
# 1 "./include/asm-generic/pgtable-nopud.h" 1






# 1 "./include/asm-generic/pgtable-nop4d.h" 1








typedef struct { pgd_t pgd; } p4d_t;
# 21 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgd_clear(pgd_t *pgd) { }
# 35 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 return (p4d_t *)pgd;
}
# 8 "./include/asm-generic/pgtable-nopud.h" 2








typedef struct { p4d_t p4d; } pud_t;
# 28 "./include/asm-generic/pgtable-nopud.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none(p4d_t p4d) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_bad(p4d_t p4d) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_present(p4d_t p4d) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void p4d_clear(p4d_t *p4d) { }
# 42 "./include/asm-generic/pgtable-nopud.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_offset(p4d_t *p4d, unsigned long address)
{
 return (pud_t *)p4d;
}
# 87 "./arch/riscv/include/asm/pgtable.h" 2

# 1 "./arch/riscv/include/asm/tlbflush.h" 1
# 12 "./arch/riscv/include/asm/tlbflush.h"
# 1 "./arch/riscv/include/asm/errata_list.h" 1







# 1 "./arch/riscv/include/asm/alternative.h" 1
# 11 "./arch/riscv/include/asm/alternative.h"
# 1 "./arch/riscv/include/asm/alternative-macros.h" 1
# 12 "./arch/riscv/include/asm/alternative.h" 2






# 1 "./arch/riscv/include/asm/hwcap.h" 1
# 12 "./arch/riscv/include/asm/hwcap.h"
# 1 "./arch/riscv/include/uapi/asm/hwcap.h" 1
# 13 "./arch/riscv/include/asm/hwcap.h" 2








enum {
 CAP_HWCAP = 1,
};

extern unsigned long elf_hwcap;
# 39 "./arch/riscv/include/asm/hwcap.h"
unsigned long riscv_isa_extension_base(const unsigned long *isa_bitmap);



bool __riscv_isa_extension_available(const unsigned long *isa_bitmap, int bit);
# 19 "./arch/riscv/include/asm/alternative.h" 2

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) apply_boot_alternatives(void);

struct alt_entry {
 void *old_ptr;
 void *alt_ptr;
 unsigned long vendor_id;
 unsigned long alt_len;
 unsigned int errata_id;
} __attribute__((__packed__));

struct errata_checkfunc_id {
 unsigned long vendor_id;
 bool (*func)(struct alt_entry *alt);
};

void sifive_errata_patch_func(struct alt_entry *begin, struct alt_entry *end,
         unsigned long archid, unsigned long impid);
# 9 "./arch/riscv/include/asm/errata_list.h" 2
# 1 "./arch/riscv/include/asm/vendorid_list.h" 1
# 10 "./arch/riscv/include/asm/errata_list.h" 2
# 13 "./arch/riscv/include/asm/tlbflush.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_tlb_all(void)
{
 __asm__ __volatile__ ("sfence.vma" : : : "memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_tlb_page(unsigned long addr)
{
 asm("886 :\n" "sfence.vma %0" "\n" "887 :\n" ".if " "1" " == 1\n" ".pushsection .alternative, \"a\"\n" ".dword" " " "886b" "\n" ".dword" " " "888f" "\n" ".dword" " " "0x489" "\n" ".dword" " " "889f - 888f" "\n" ".word " "1" "\n" ".popsection\n" ".subsection 1\n" "888 :\n" "sfence.vma" "\n" "889 :\n" ".previous\n" ".org	. - (887b - 886b) + (889b - 888b)\n" ".org	. - (889b - 888b) + (887b - 886b)\n" ".endif\n" : : "r" (addr) : "memory");
}






void flush_tlb_all(void);
void flush_tlb_mm(struct mm_struct *mm);
void flush_tlb_page(struct vm_area_struct *vma, unsigned long addr);
void flush_tlb_range(struct vm_area_struct *vma, unsigned long start,
       unsigned long end);
# 56 "./arch/riscv/include/asm/tlbflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_kernel_range(unsigned long start,
 unsigned long end)
{
 flush_tlb_all();
}
# 89 "./arch/riscv/include/asm/pgtable.h" 2



# 1 "./arch/riscv/include/asm/pgtable-64.h" 1
# 22 "./arch/riscv/include/asm/pgtable-64.h"
typedef struct {
 unsigned long pmd;
} pmd_t;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_present(pud_t pud)
{
 return (((((((pud).p4d).pgd).pgd))) & (1 << 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none(pud_t pud)
{
 return (((((((pud).p4d).pgd).pgd))) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_bad(pud_t pud)
{
 return !pud_present(pud);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_leaf(pud_t pud)
{
 return pud_present(pud) && (((((((pud).p4d).pgd).pgd))) & ((1 << 1) | (1 << 2) | (1 << 3)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pud(pud_t *pudp, pud_t pud)
{
 *pudp = pud;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pud_clear(pud_t *pudp)
{
 set_pud(pudp, ((pud_t) { ((p4d_t) { ((pgd_t) { (0) }) }) }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pud_pgtable(pud_t pud)
{
 return (pmd_t *)(((void *)((void *)((unsigned long)((phys_addr_t)((((phys_addr_t)(((((((pud).p4d).pgd).pgd))) >> 10) << (12))))) + kernel_map.va_pa_offset))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *pud_page(pud_t pud)
{
 return (mem_map + ((((((((pud).p4d).pgd).pgd))) >> 10) - (riscv_pfn_base)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pfn_pmd(unsigned long pfn, pgprot_t prot)
{
 return ((pmd_t) { ((pfn << 10) | ((prot).pgprot)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _pmd_pfn(pmd_t pmd)
{
 return ((pmd).pmd) >> 10;
}
# 93 "./arch/riscv/include/asm/pgtable.h" 2
# 155 "./arch/riscv/include/asm/pgtable.h"
extern pgd_t swapper_pg_dir[];
# 189 "./arch/riscv/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_present(pmd_t pmd)
{
 return (((pmd).pmd) & ((1 << 0) | (1 << 1)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none(pmd_t pmd)
{
 return (((pmd).pmd) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_bad(pmd_t pmd)
{
 return !pmd_present(pmd) || (((pmd).pmd) & ((1 << 1) | (1 << 2) | (1 << 3)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_leaf(pmd_t pmd)
{
 return pmd_present(pmd) && (((pmd).pmd) & ((1 << 1) | (1 << 2) | (1 << 3)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 *pmdp = pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, ((pmd_t) { (0) }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgd_t pfn_pgd(unsigned long pfn, pgprot_t prot)
{
 return ((pgd_t) { ((pfn << 10) | ((prot).pgprot)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _pgd_pfn(pgd_t pgd)
{
 return ((pgd).pgd) >> 10;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *pmd_page(pmd_t pmd)
{
 return (mem_map + ((((pmd).pmd) >> 10) - (riscv_pfn_base)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)(((void *)((void *)((unsigned long)((phys_addr_t)((((phys_addr_t)(((pmd).pmd) >> 10) << (12))))) + kernel_map.va_pa_offset))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pmd_pte(pmd_t pmd)
{
 return ((pte_t) { (((pmd).pmd)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pud_pte(pud_t pud)
{
 return ((pte_t) { (((((((pud).p4d).pgd).pgd)))) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_pfn(pte_t pte)
{
 return (((pte).pte) >> 10);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pfn_pte(unsigned long pfn, pgprot_t prot)
{
 return ((pte_t) { ((pfn << 10) | ((prot).pgprot)) });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_present(pte_t pte)
{
 return (((pte).pte) & ((1 << 0) | (1 << 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_none(pte_t pte)
{
 return (((pte).pte) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_write(pte_t pte)
{
 return ((pte).pte) & (1 << 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_exec(pte_t pte)
{
 return ((pte).pte) & (1 << 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_huge(pte_t pte)
{
 return pte_present(pte) && (((pte).pte) & ((1 << 1) | (1 << 2) | (1 << 3)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_dirty(pte_t pte)
{
 return ((pte).pte) & (1 << 7);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_young(pte_t pte)
{
 return ((pte).pte) & (1 << 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_special(pte_t pte)
{
 return ((pte).pte) & (1 << 8);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_wrprotect(pte_t pte)
{
 return ((pte_t) { (((pte).pte) & ~((1 << 2))) });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkwrite(pte_t pte)
{
 return ((pte_t) { (((pte).pte) | (1 << 2)) });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdirty(pte_t pte)
{
 return ((pte_t) { (((pte).pte) | (1 << 7)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkclean(pte_t pte)
{
 return ((pte_t) { (((pte).pte) & ~((1 << 7))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkyoung(pte_t pte)
{
 return ((pte_t) { (((pte).pte) | (1 << 6)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkold(pte_t pte)
{
 return ((pte_t) { (((pte).pte) & ~((1 << 6))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkspecial(pte_t pte)
{
 return ((pte_t) { (((pte).pte) | (1 << 8)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkhuge(pte_t pte)
{
 return pte;
}
# 369 "./arch/riscv/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 return ((pte_t) { ((((pte).pte) & (~(unsigned long)((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5)))) | ((newprot).pgprot)) });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache(struct vm_area_struct *vma,
 unsigned long address, pte_t *ptep)
{







 local_flush_tlb_page(address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp)
{
 pte_t *ptep = (pte_t *)pmdp;

 update_mmu_cache(vma, address, ptep);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_same(pte_t pte_a, pte_t pte_b)
{
 return ((pte_a).pte) == ((pte_b).pte);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte(pte_t *ptep, pte_t pteval)
{
 *ptep = pteval;
}

void flush_icache_pte(pte_t pte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte_at(struct mm_struct *mm,
 unsigned long addr, pte_t *ptep, pte_t pteval)
{
 if (pte_present(pteval) && pte_exec(pteval))
  flush_icache_pte(pteval);

 set_pte(ptep, pteval);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear(struct mm_struct *mm,
 unsigned long addr, pte_t *ptep)
{
 set_pte_at(mm, addr, ptep, ((pte_t) { (0) }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty)
{
 if (!pte_same(*ptep, entry))
  set_pte_at(vma->vm_mm, address, ptep, entry);




 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long address, pte_t *ptep)
{
 return ((pte_t) { (atomic_long_xchg((atomic_long_t *)ptep, 0)) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep)
{
 if (!pte_young(*ptep))
  return 0;
 return test_and_clear_bit(6, &((*ptep).pte));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pte_t *ptep)
{
 atomic_long_and(~(unsigned long)(1 << 2), (atomic_long_t *)ptep);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep)
{
# 490 "./arch/riscv/include/asm/pgtable.h"
 return ptep_test_and_clear_young(vma, address, ptep);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pte_pmd(pte_t pte)
{
 return ((pmd_t) { (((pte).pte)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkhuge(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkinvalid(pmd_t pmd)
{
 return ((pmd_t) { (((pmd).pmd) & ~((1 << 0)|(1 << 1))) });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_pfn(pmd_t pmd)
{
 return (((((pmd).pmd) >> 10 << (12)) & (~(((1UL) << 21) - 1))) >> (12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 return pte_pmd(pte_modify(pmd_pte(pmd), newprot));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_write(pmd_t pmd)
{
 return pte_write(pmd_pte(pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_dirty(pmd_t pmd)
{
 return pte_dirty(pmd_pte(pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_young(pmd_t pmd)
{
 return pte_young(pmd_pte(pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkold(pmd_t pmd)
{
 return pte_pmd(pte_mkold(pmd_pte(pmd)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkyoung(pmd_t pmd)
{
 return pte_pmd(pte_mkyoung(pmd_pte(pmd)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkwrite(pmd_t pmd)
{
 return pte_pmd(pte_mkwrite(pmd_pte(pmd)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_wrprotect(pmd_t pmd)
{
 return pte_pmd(pte_wrprotect(pmd_pte(pmd)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkclean(pmd_t pmd)
{
 return pte_pmd(pte_mkclean(pmd_pte(pmd)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkdirty(pmd_t pmd)
{
 return pte_pmd(pte_mkdirty(pmd_pte(pmd)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pmd_at(struct mm_struct *mm, unsigned long addr,
    pmd_t *pmdp, pmd_t pmd)
{
 return set_pte_at(mm, addr, (pte_t *)pmdp, pmd_pte(pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pud_at(struct mm_struct *mm, unsigned long addr,
    pud_t *pudp, pud_t pud)
{
 return set_pte_at(mm, addr, (pte_t *)pudp, pud_pte(pud));
}
# 682 "./arch/riscv/include/asm/pgtable.h"
extern char _start[];
extern void *_dtb_early_va;
extern uintptr_t _dtb_early_pa;
# 693 "./arch/riscv/include/asm/pgtable.h"
void paging_init(void);
void misc_mem_init(void);





extern unsigned long empty_zero_page[((1UL) << (12)) / sizeof(unsigned long)];
# 7 "./include/linux/pgtable.h" 2







# 1 "./include/asm-generic/pgtable_uffd.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pte_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pmd_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pmd_t pmd_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pmd_t pmd_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_swp_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pte_swp_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_swp_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_swp_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}
# 15 "./include/linux/pgtable.h" 2
# 61 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_index(unsigned long address)
{
 return (address >> (12)) & ((((1UL) << (12)) / sizeof(pte_t)) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_index(unsigned long address)
{
 return (address >> 21) & ((((1UL) << (12)) / sizeof(pmd_t)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pud_index(unsigned long address)
{
 return (address >> 30) & (1 - 1);
}
# 88 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}
# 107 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return pud_pgtable(*pud) + pmd_index(address);
}
# 122 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
{
 return (pgd + (((address) >> 30) & ((((1UL) << (12)) / sizeof(pgd_t)) - 1)));
};
# 149 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_off(struct mm_struct *mm, unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((mm)->pgd, (va)), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_off_k(unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((&init_mm)->pgd, ((va))), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *virt_to_kpte(unsigned long vaddr)
{
 pmd_t *pmd = pmd_off_k(vaddr);

 return pmd_none(*pmd) ? ((void *)0) : pte_offset_kernel(pmd, vaddr);
}
# 181 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty)
{
 do { extern void __compiletime_assert_175(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_175(); } while (0);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pudp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pud_t *pudp,
     pud_t entry, int dirty)
{
 do { extern void __compiletime_assert_176(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_176(); } while (0);
 return 0;
}
# 228 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp)
{
 do { extern void __compiletime_assert_177(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_177(); } while (0);
 return 0;
}
# 252 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp)
{
 do { extern void __compiletime_assert_178(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_178(); } while (0);
 return 0;
}
# 273 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get(pte_t *ptep)
{
 return ({ do { extern void __compiletime_assert_179(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_179(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
}
# 328 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_lockless(pte_t *ptep)
{
 return ptep_get(ptep);
}
# 379 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pte_t *ptep,
         int full)
{
 pte_t pte;
 pte = ptep_get_and_clear(mm, address, ptep);
 return pte;
}
# 399 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_tlb(struct vm_area_struct *vma,
    unsigned long address, pte_t *ptep)
{
}
# 412 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 454 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_sw_mkyoung(pte_t pte)
{
 return pte;
}
# 494 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pmd_t *pmdp)
{
 do { extern void __compiletime_assert_180(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_180(); } while (0);
}
# 511 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 do { extern void __compiletime_assert_181(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_181(); } while (0);
}
# 524 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address,
     pmd_t *pmdp)
{
 do { extern void __compiletime_assert_182(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_182(); } while (0);
 return *pmdp;
}





extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 560 "./include/linux/pgtable.h"
extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);
# 578 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_unused(pte_t pte)
{
 return 0;
}
# 610 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return ((pmd_a).pmd) == ((pmd_b).pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_same(pud_t pud_a, pud_t pud_b)
{
 return ((((((pud_a).p4d).pgd).pgd))) == ((((((pud_b).p4d).pgd).pgd)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_same(p4d_t p4d_a, p4d_t p4d_b)
{
 return ((((p4d_a).pgd).pgd)) == ((((p4d_b).pgd).pgd));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
{
 return ((pgd_a).pgd) == ((pgd_b).pgd);
}
# 682 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_do_swap_page(struct mm_struct *mm,
         struct vm_area_struct *vma,
         unsigned long addr,
         pte_t pte, pte_t oldpte)
{

}
# 700 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_unmap_one(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long addr,
      pte_t orig_pte)
{
 return 0;
}
# 715 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_prepare_to_swap(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_page(int type, unsigned long offset)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_area(int type)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_restore(swp_entry_t entry, struct page *page)
{
}
# 790 "./include/linux/pgtable.h"
void pgd_clear_bad(pgd_t *);
# 804 "./include/linux/pgtable.h"
void pmd_clear_bad(pmd_t *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none_or_clear_bad(p4d_t *p4d)
{
 if (p4d_none(*p4d))
  return 1;
 if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(vma->vm_mm, addr, ptep);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ptep_modify_prot_commit(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 888 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_modify_prot_start(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(vma, addr, ptep);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_modify_prot_commit(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep, pte_t old_pte, pte_t pte)
{
 __ptep_modify_prot_commit(vma, addr, ptep, pte);
}
# 940 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 if (((oldprot).pgprot) == (((oldprot)).pgprot))
  newprot = (newprot);
 if (((oldprot).pgprot) == (((oldprot)).pgprot))
  newprot = (newprot);
 if (((oldprot).pgprot) == (((oldprot)).pgprot))
  newprot = (newprot);
 return newprot;
}
# 1015 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_swp_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 1087 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn)
{
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_copy(struct vm_area_struct *vma)
{
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn(struct vm_area_struct *vma,
          unsigned long pfn, unsigned long size)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn_moved(struct vm_area_struct *vma)
{
}
# 1152 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}
# 1179 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_huge(pmd_t pmd)
{
 return 0;
}
# 1193 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_write(pud_t pud)
{
 do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pgtable.h"), "i" (1195), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_devmap(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_devmap(pud_t pud)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_trans_huge_or_dev_or_clear_bad(pud_t *pud)
{
 pud_t pudval = ({ do { extern void __compiletime_assert_183(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pud) == sizeof(char) || sizeof(*pud) == sizeof(short) || sizeof(*pud) == sizeof(int) || sizeof(*pud) == sizeof(long)) || sizeof(*pud) == sizeof(long long))) __compiletime_assert_183(); } while (0); (*(const volatile typeof( _Generic((*pud), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*pud))) *)&(*pud)); });

 if (pud_none(pudval) || pud_trans_huge(pudval) || pud_devmap(pudval))
  return 1;
 if (__builtin_expect(!!(pud_bad(pudval)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_unstable(pud_t *pud)
{




 return 0;

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 1285 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 1320 "./include/linux/pgtable.h"
 if (pmd_none(pmdval) || pmd_trans_huge(pmdval) ||
  (0 && !pmd_present(pmdval)))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 1342 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_unstable(pmd_t *pmd)
{



 return 0;

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_devmap_trans_unstable(pmd_t *pmd)
{
 return pmd_devmap(*pmd) || pmd_trans_unstable(pmd);
}
# 1371 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_protnone(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_protnone(pmd_t pmd)
{
 return 0;
}
# 1408 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_clear_huge(p4d_t *p4d)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_clear_huge(pud_t *pud)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_clear_huge(pmd_t *pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_free_pud_page(p4d_t *p4d, unsigned long addr)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_free_pmd_page(pud_t *pud, unsigned long addr)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_free_pte_page(pmd_t *pmd, unsigned long addr)
{
 return 0;
}
# 1465 "./include/linux/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_espfix_bsp(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pgtable_cache_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_has_pfn_modify_check(void)
{
 return false;
}
# 1526 "./include/linux/pgtable.h"
typedef unsigned int pgtbl_mod_mask;
# 16 "./arch/riscv/include/asm/io.h" 2

# 1 "./arch/riscv/include/generated/asm/early_ioremap.h" 1
# 1 "./include/asm-generic/early_ioremap.h" 1
# 11 "./include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void *early_memremap_prot(resource_size_t phys_addr,
     unsigned long size, unsigned long prot_val);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 2 "./arch/riscv/include/generated/asm/early_ioremap.h" 2
# 18 "./arch/riscv/include/asm/io.h" 2





# 1 "./arch/riscv/include/asm/mmio.h" 1
# 19 "./arch/riscv/include/asm/mmio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeb(u8 val, volatile void *addr)
{
 asm volatile("sb %0, 0(%1)" : : "r" (val), "r" (addr));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writew(u16 val, volatile void *addr)
{
 asm volatile("sh %0, 0(%1)" : : "r" (val), "r" (addr));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writel(u32 val, volatile void *addr)
{
 asm volatile("sw %0, 0(%1)" : : "r" (val), "r" (addr));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeq(u64 val, volatile void *addr)
{
 asm volatile("sd %0, 0(%1)" : : "r" (val), "r" (addr));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __raw_readb(const volatile void *addr)
{
 u8 val;

 asm volatile("lb %0, 0(%1)" : "=r" (val) : "r" (addr));
 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __raw_readw(const volatile void *addr)
{
 u16 val;

 asm volatile("lh %0, 0(%1)" : "=r" (val) : "r" (addr));
 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __raw_readl(const volatile void *addr)
{
 u32 val;

 asm volatile("lw %0, 0(%1)" : "=r" (val) : "r" (addr));
 return val;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __raw_readq(const volatile void *addr)
{
 u64 val;

 asm volatile("ld %0, 0(%1)" : "=r" (val) : "r" (addr));
 return val;
}
# 24 "./arch/riscv/include/asm/io.h" 2
# 94 "./arch/riscv/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __readsb(const volatile void *addr, void *buffer, unsigned int count) { do {} while (0); if (count) { u8 *buf = buffer; do { u8 x = __raw_readb(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,r" : : : "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __readsw(const volatile void *addr, void *buffer, unsigned int count) { do {} while (0); if (count) { u16 *buf = buffer; do { u16 x = __raw_readw(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,r" : : : "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __readsl(const volatile void *addr, void *buffer, unsigned int count) { do {} while (0); if (count) { u32 *buf = buffer; do { u32 x = __raw_readl(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,r" : : : "memory"); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __insb(const volatile void *addr, void *buffer, unsigned int count) { __asm__ __volatile__ ("fence io,i" : : : "memory");; if (count) { u8 *buf = buffer; do { u8 x = __raw_readb(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,ior" : : : "memory");; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __insw(const volatile void *addr, void *buffer, unsigned int count) { __asm__ __volatile__ ("fence io,i" : : : "memory");; if (count) { u16 *buf = buffer; do { u16 x = __raw_readw(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,ior" : : : "memory");; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __insl(const volatile void *addr, void *buffer, unsigned int count) { __asm__ __volatile__ ("fence io,i" : : : "memory");; if (count) { u32 *buf = buffer; do { u32 x = __raw_readl(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,ior" : : : "memory");; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __writesb(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence w,o" : : : "memory"); if (count) { const u8 *buf = buffer; do { __raw_writeb(*buf++, addr); } while (--count); } mmiowb_set_pending(); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __writesw(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence w,o" : : : "memory"); if (count) { const u16 *buf = buffer; do { __raw_writew(*buf++, addr); } while (--count); } mmiowb_set_pending(); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __writesl(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence w,o" : : : "memory"); if (count) { const u32 *buf = buffer; do { __raw_writel(*buf++, addr); } while (--count); } mmiowb_set_pending(); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __outsb(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence iow,o" : : : "memory");; if (count) { const u8 *buf = buffer; do { __raw_writeb(*buf++, addr); } while (--count); } __asm__ __volatile__ ("fence o,io" : : : "memory");; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __outsw(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence iow,o" : : : "memory");; if (count) { const u16 *buf = buffer; do { __raw_writew(*buf++, addr); } while (--count); } __asm__ __volatile__ ("fence o,io" : : : "memory");; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __outsl(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence iow,o" : : : "memory");; if (count) { const u32 *buf = buffer; do { __raw_writel(*buf++, addr); } while (--count); } __asm__ __volatile__ ("fence o,io" : : : "memory");; }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __readsq(const volatile void *addr, void *buffer, unsigned int count) { do {} while (0); if (count) { u64 *buf = buffer; do { u64 x = __raw_readq(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,r" : : : "memory"); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __insq(const volatile void *addr, void *buffer, unsigned int count) { __asm__ __volatile__ ("fence io,i" : : : "memory");; if (count) { u64 *buf = buffer; do { u64 x = __raw_readq(addr); *buf++ = x; } while (--count); } __asm__ __volatile__ ("fence i,ior" : : : "memory");; }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __writesq(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence w,o" : : : "memory"); if (count) { const u64 *buf = buffer; do { __raw_writeq(*buf++, addr); } while (--count); } mmiowb_set_pending(); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __outsq(volatile void *addr, const void *buffer, unsigned int count) { __asm__ __volatile__ ("fence io,i" : : : "memory");; if (count) { const u64 *buf = buffer; do { __raw_writeq(*buf++, addr); } while (--count); } __asm__ __volatile__ ("fence o,io" : : : "memory");; }



# 1 "./include/asm-generic/io.h" 1
# 19 "./include/asm-generic/io.h"
# 1 "./include/asm-generic/pci_iomap.h" 1
# 10 "./include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
extern void pci_iounmap(struct pci_dev *dev, void *);
# 20 "./include/asm-generic/io.h" 2
# 459 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 _inb(unsigned long addr)
{
 u8 val;

 __asm__ __volatile__ ("fence io,i" : : : "memory");;
 val = __raw_readb(((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + addr);
 __asm__ __volatile__ ("fence i,ior" : : : "memory");;
 return val;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 _inw(unsigned long addr)
{
 u16 val;

 __asm__ __volatile__ ("fence io,i" : : : "memory");;
 val = (( __u16)(__le16)((__le16 )__raw_readw(((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + addr)));
 __asm__ __volatile__ ("fence i,ior" : : : "memory");;
 return val;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 _inl(unsigned long addr)
{
 u32 val;

 __asm__ __volatile__ ("fence io,i" : : : "memory");;
 val = (( __u32)(__le32)((__le32 )__raw_readl(((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + addr)));
 __asm__ __volatile__ ("fence i,ior" : : : "memory");;
 return val;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void _outb(u8 value, unsigned long addr)
{
 __asm__ __volatile__ ("fence iow,o" : : : "memory");;
 __raw_writeb(value, ((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + addr);
 __asm__ __volatile__ ("fence o,io" : : : "memory");;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void _outw(u16 value, unsigned long addr)
{
 __asm__ __volatile__ ("fence iow,o" : : : "memory");;
 __raw_writew((u16 )(( __le16)(__u16)(value)), ((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + addr);
 __asm__ __volatile__ ("fence o,io" : : : "memory");;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void _outl(u32 value, unsigned long addr)
{
 __asm__ __volatile__ ("fence iow,o" : : : "memory");;
 __raw_writel((u32 )(( __le32)(__u32)(value)), ((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + addr);
 __asm__ __volatile__ ("fence o,io" : : : "memory");;
}


# 1 "./include/linux/logic_pio.h" 1
# 11 "./include/linux/logic_pio.h"
# 1 "./include/linux/fwnode.h" 1
# 16 "./include/linux/fwnode.h"
struct fwnode_operations;
struct device;
# 30 "./include/linux/fwnode.h"
struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
 struct device *dev;
 struct list_head suppliers;
 struct list_head consumers;
 u8 flags;
};

struct fwnode_link {
 struct fwnode_handle *supplier;
 struct list_head s_hook;
 struct fwnode_handle *consumer;
 struct list_head c_hook;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 73 "./include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 u64 args[8];
};
# 104 "./include/linux/fwnode.h"
struct fwnode_operations {
 struct fwnode_handle *(*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 const void *(*device_get_match_data)(const struct fwnode_handle *fwnode,
          const struct device *dev);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 const char *(*get_name)(const struct fwnode_handle *fwnode);
 const char *(*get_name_prefix)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
 int (*add_links)(struct fwnode_handle *fwnode);
};
# 166 "./include/linux/fwnode.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fwnode_init(struct fwnode_handle *fwnode,
          const struct fwnode_operations *ops)
{
 fwnode->ops = ops;
 INIT_LIST_HEAD(&fwnode->consumers);
 INIT_LIST_HEAD(&fwnode->suppliers);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fwnode_dev_initialized(struct fwnode_handle *fwnode,
       bool initialized)
{
 if (IS_ERR_OR_NULL(fwnode))
  return;

 if (initialized)
  fwnode->flags |= ((((1UL))) << (2));
 else
  fwnode->flags &= ~((((1UL))) << (2));
}

extern u32 fw_devlink_get_flags(void);
extern bool fw_devlink_is_strict(void);
int fwnode_link_add(struct fwnode_handle *con, struct fwnode_handle *sup);
void fwnode_links_purge(struct fwnode_handle *fwnode);
void fw_devlink_purge_absent_suppliers(struct fwnode_handle *fwnode);
# 12 "./include/linux/logic_pio.h" 2

enum {
 LOGIC_PIO_INDIRECT,
 LOGIC_PIO_CPU_MMIO,
};

struct logic_pio_hwaddr {
 struct list_head list;
 struct fwnode_handle *fwnode;
 resource_size_t hw_start;
 resource_size_t io_start;
 resource_size_t size;
 unsigned long flags;

 void *hostdata;
 const struct logic_pio_host_ops *ops;
};

struct logic_pio_host_ops {
 u32 (*in)(void *hostdata, unsigned long addr, size_t dwidth);
 void (*out)(void *hostdata, unsigned long addr, u32 val,
      size_t dwidth);
 u32 (*ins)(void *hostdata, unsigned long addr, void *buffer,
     size_t dwidth, unsigned int count);
 void (*outs)(void *hostdata, unsigned long addr, const void *buffer,
       size_t dwidth, unsigned int count);
};
# 116 "./include/linux/logic_pio.h"
struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *fwnode);
unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *fwnode,
   resource_size_t hw_addr, resource_size_t size);
int logic_pio_register_range(struct logic_pio_hwaddr *newrange);
void logic_pio_unregister_range(struct logic_pio_hwaddr *range);
resource_size_t logic_pio_to_hwaddr(unsigned long pio);
unsigned long logic_pio_trans_cpuaddr(resource_size_t hw_addr);
# 527 "./include/asm-generic/io.h" 2
# 554 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 inb_p(unsigned long addr)
{
 return _inb(addr);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 inw_p(unsigned long addr)
{
 return _inw(addr);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 inl_p(unsigned long addr)
{
 return _inl(addr);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outb_p(u8 value, unsigned long addr)
{
 _outb(value, addr);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outw_p(u16 value, unsigned long addr)
{
 _outw(value, addr);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outl_p(u32 value, unsigned long addr)
{
 _outl(value, addr);
}
# 658 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 __insb((void *)(long)addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 __insw((void *)(long)addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 __insl((void *)(long)addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 __outsb((void *)(long)addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 __outsw((void *)(long)addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 __outsl((void *)(long)addr, buffer, count);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 ioread8(const volatile void *addr)
{
 return ({ u8 __v; do {} while (0); __v = ({ u8 __r = __raw_readb(addr); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ioread16(const volatile void *addr)
{
 return ({ u16 __v; do {} while (0); __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ioread32(const volatile void *addr)
{
 return ({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ioread64(const volatile void *addr)
{
 return ({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite8(u8 value, volatile void *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writeb(((value)), ((addr)))); mmiowb_set_pending(); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16(u16 value, volatile void *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writew(( u16)(( __le16)(__u16)((value))), ((addr)))); mmiowb_set_pending(); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32(u32 value, volatile void *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)((value))), ((addr)))); mmiowb_set_pending(); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite64(u64 value, volatile void *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writeq(( u64)(( __le64)(__u64)((value))), ((addr)))); mmiowb_set_pending(); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ioread16be(const volatile void *addr)
{
 return (__builtin_constant_p((__u16)(({ u16 __v; do {} while (0); __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; }))) ? ((__u16)( (((__u16)(({ u16 __v; do {} while (0); __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u16)0x00ffU) << 8) | (((__u16)(({ u16 __v; do {} while (0); __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u16)0xff00U) >> 8))) : __fswab16(({ u16 __v; do {} while (0); __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ioread32be(const volatile void *addr)
{
 return (__builtin_constant_p((__u32)(({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; }))) ? ((__u32)( (((__u32)(({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u32)0x000000ffUL) << 24) | (((__u32)(({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u32)0x0000ff00UL) << 8) | (((__u32)(({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u32)0xff000000UL) >> 24))) : __fswab32(({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ioread64be(const volatile void *addr)
{
 return (__builtin_constant_p((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; }))) ? ((__u64)( (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(({ u64 __v; do {} while (0); __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; })));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16be(u16 value, void volatile *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writew(( u16)(( __le16)(__u16)(((__builtin_constant_p((__u16)(value)) ? ((__u16)( (((__u16)(value) & (__u16)0x00ffU) << 8) | (((__u16)(value) & (__u16)0xff00U) >> 8))) : __fswab16(value))))), ((addr)))); mmiowb_set_pending(); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32be(u32 value, volatile void *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)(((__builtin_constant_p((__u32)(value)) ? ((__u32)( (((__u32)(value) & (__u32)0x000000ffUL) << 24) | (((__u32)(value) & (__u32)0x0000ff00UL) << 8) | (((__u32)(value) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(value) & (__u32)0xff000000UL) >> 24))) : __fswab32(value))))), ((addr)))); mmiowb_set_pending(); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite64be(u64 value, volatile void *addr)
{
 ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writeq(( u64)(( __le64)(__u64)(((__builtin_constant_p((__u64)(value)) ? ((__u64)( (((__u64)(value) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(value) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(value) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(value) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(value) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(value) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(value) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(value) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(value))))), ((addr)))); mmiowb_set_pending(); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread8_rep(const volatile void *addr, void *buffer,
          unsigned int count)
{
 __readsb(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread16_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 __readsw(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread32_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 __readsl(addr, buffer, count);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread64_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 __readsq(addr, buffer, count);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite8_rep(volatile void *addr,
    const void *buffer,
    unsigned int count)
{
 __writesb(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 __writesw(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 __writesl(addr, buffer, count);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite64_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 __writesq(addr, buffer, count);
}






# 1 "./include/linux/vmalloc.h" 1
# 13 "./include/linux/vmalloc.h"
# 1 "./arch/riscv/include/asm/vmalloc.h" 1
# 14 "./include/linux/vmalloc.h" 2

struct vm_area_struct;
struct notifier_block;
# 52 "./include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;



 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;

 struct rb_node rb_node;
 struct list_head list;







 union {
  unsigned long subtree_max_size;
  struct vm_struct *vm;
 };
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_p4d_supported(pgprot_t prot)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pud_supported(pgprot_t prot)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pmd_supported(pgprot_t prot)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_vmap_pte_range_map_size(unsigned long addr, unsigned long end,
        u64 pfn, unsigned int max_page_shift)
{
 return ((1UL) << (12));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_vmap_pte_supported_shift(unsigned long size)
{
 return (12);
}





extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count, int node);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size);
extern void *vzalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vzalloc_node(unsigned long size, int node);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask);
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller);
void *__vmalloc_node(unsigned long size, unsigned long align, gfp_t gfp_mask,
  int node, const void *caller);
void *vmalloc_no_huge(unsigned long size);

extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
void *vmap_pfn(unsigned long *pfns, unsigned int count, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
# 184 "./include/linux/vmalloc.h"
void arch_sync_kernel_mappings(unsigned long start, unsigned long end);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << (12));
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
void free_vm_area(struct vm_struct *area);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_area_hugepages(const void *addr)
{
# 223 "./include/linux/vmalloc.h"
 return false;

}


void vunmap_range(unsigned long addr, unsigned long end);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 244 "./include/linux/vmalloc.h"
extern long vread(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 282 "./include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);


bool vmalloc_dump_obj(void *object);
# 912 "./include/asm-generic/io.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long virt_to_phys(volatile void *address)
{
 return ({ unsigned long _x = (unsigned long)((unsigned long)address); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *phys_to_virt(unsigned long address)
{
 return ((void *)((void *)((unsigned long)((phys_addr_t)(address)) + kernel_map.va_pa_offset)));
}
# 967 "./include/asm-generic/io.h"
void *ioremap_prot(phys_addr_t addr, size_t size, unsigned long prot);
void iounmap(volatile void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap(phys_addr_t addr, size_t size)
{

 return ioremap_prot(addr, size, ((1 << 1) | (1 << 2) | (1 << 0) | (1 << 6) | (1 << 7) | (1 << 5)));
}
# 994 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap_uc(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}
# 1011 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap_np(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioport_map(unsigned long port, unsigned int nr)
{
 port &= (0x01000000 - 1);
 return (port > ((0x01000000 - 1) - 0)) ? ((void *)0) : ((void *)((((0xffffffe000000000UL) - ((-(0xffffffe000000000UL)) >> 1)) - ((((1UL))) << ((39 - (12) - 1 + (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x01000000)) + port;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioport_unmap(void *p)
{
}
# 1049 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xlate_dev_mem_ptr(phys_addr_t addr)
{
 return ((void *)((void *)((unsigned long)((phys_addr_t)(addr)) + kernel_map.va_pa_offset)));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr)
{
}
# 1086 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_io(volatile void *addr, int value,
        size_t size)
{
 memset(((void *)(addr)), value, size);
}
# 1103 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_fromio(void *buffer,
     const volatile void *addr,
     size_t size)
{
 memcpy(buffer, ((void *)(addr)), size);
}
# 1121 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_toio(volatile void *addr, const void *buffer,
          size_t size)
{
 memcpy(((void *)(addr)), buffer, size);
}



extern int devmem_is_allowed(unsigned long pfn);
# 137 "./arch/riscv/include/asm/io.h" 2
# 14 "./include/linux/io.h" 2


struct device;
struct resource;

          void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 38 "./include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 56 "./include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_uc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_np(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);
# 86 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_remap_cfgspace(phys_addr_t offset,
            size_t size)
{
 return ioremap_np(offset, size) ?: ioremap(offset, size);
}
# 115 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_phys_wc_del(int handle)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_phys_wc_index(int handle)
{
 return -1;
}




enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 157 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_io_reserve_memtype_wc(resource_size_t base,
          resource_size_t size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_io_free_memtype_wc(resource_size_t base,
        resource_size_t size)
{
}
# 21 "./include/linux/irq.h" 2
# 1 "./include/linux/slab.h" 1
# 19 "./include/linux/slab.h"
# 1 "./include/linux/percpu-refcount.h" 1
# 59 "./include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {







 PERCPU_REF_INIT_ATOMIC = 1 << 0,






 PERCPU_REF_INIT_DEAD = 1 << 1,




 PERCPU_REF_ALLOW_REINIT = 1 << 2,
};

struct percpu_ref_data {
 atomic_long_t count;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 bool allow_reinit:1;
 struct callback_head rcu;
 struct percpu_ref *ref;
};

struct percpu_ref {




 unsigned long percpu_count_ptr;







 struct percpu_ref_data *data;
};

int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_resurrect(struct percpu_ref *ref);
void percpu_ref_reinit(struct percpu_ref *ref);
bool percpu_ref_is_zero(struct percpu_ref *ref);
# 147 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 174 "./include/linux/percpu-refcount.h"
 percpu_ptr = ({ do { extern void __compiletime_assert_184(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ref->percpu_count_ptr) == sizeof(char) || sizeof(ref->percpu_count_ptr) == sizeof(short) || sizeof(ref->percpu_count_ptr) == sizeof(int) || sizeof(ref->percpu_count_ptr) == sizeof(long)) || sizeof(ref->percpu_count_ptr) == sizeof(long long))) __compiletime_assert_184(); } while (0); (*(const volatile typeof( _Generic((ref->percpu_count_ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ref->percpu_count_ptr))) *)&(ref->percpu_count_ptr)); });







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 198 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->data->count);

 rcu_read_unlock();
}
# 220 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 235 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_many(struct percpu_ref *ref,
       unsigned long nr)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic_long_add_unless(&ref->data->count, nr, 0);
 }

 rcu_read_unlock();

 return ret;
}
# 264 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 return percpu_ref_tryget_many(ref, 1);
}
# 284 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic_long_inc_not_zero(&ref->data->count);
 }

 rcu_read_unlock();

 return ret;
}
# 313 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->data->count)), 0))
  ref->data->release(ref);

 rcu_read_unlock();
}
# 336 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 350 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 20 "./include/linux/slab.h" 2
# 136 "./include/linux/slab.h"
# 1 "./include/linux/kasan.h" 1






# 1 "./include/linux/static_key.h" 1
# 8 "./include/linux/kasan.h" 2


struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 70 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_enable_current(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_disable_current(void) {}
# 102 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_enabled(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_has_integrated_init(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_alloc_pages(struct page *page,
           unsigned int order, gfp_t flags)
{

 do { extern void __compiletime_assert_185(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_185(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_free_pages(struct page *page,
          unsigned int order)
{

 do { extern void __compiletime_assert_186(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_186(); } while (0);
}
# 306 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) slab_flags_t kasan_never_merge(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_range(const void *address, size_t size) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_pages(struct page *page, unsigned int order,
          bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_pages(struct page *page, unsigned int order,
     bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create_kmalloc(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_slab_free(struct kmem_cache *s, void *object, bool init)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_kfree_large(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_slab_free_mempool(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags, bool init)
{
 return object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
{
 return (void *)ptr;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_byte(const void *address)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_task_stack(struct task_struct *task) {}
# 376 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_record_aux_stack(void *ptr) {}
# 401 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 417 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_sw_tags(void) { }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags_cpu(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags(void) { }
# 439 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_populate_vmalloc(unsigned long start,
     unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_release_vmalloc(unsigned long start,
      unsigned long end,
      unsigned long free_region_start,
      unsigned long free_region_end) {}
# 469 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_free_shadow(const struct vm_struct *vm) {}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_non_canonical_hook(unsigned long addr) { }
# 137 "./include/linux/slab.h" 2

struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init(void);
bool slab_is_available(void);

extern bool usercopy_fallback;

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);
# 184 "./include/linux/slab.h"
void * __attribute__((__warn_unused_result__)) krealloc(const void *, size_t, gfp_t);
void kfree(const void *);
void kfree_sensitive(const void *);
size_t __ksize(const void *);
size_t ksize(const void *);

bool kmem_valid_obj(void *object);
void kmem_dump_obj(void *object);



void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
   bool to_user);
# 313 "./include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,

 KMALLOC_DMA = KMALLOC_NORMAL,


 KMALLOC_CGROUP = KMALLOC_NORMAL,



 KMALLOC_RECLAIM,



 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][((12) + 1) + 1];
# 342 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{




 if (__builtin_expect(!!((flags & ((( gfp_t)0x10u) | (0 ? (( gfp_t)0x01u) : 0) | (0 ? (( gfp_t)0x400000u) : 0))) == 0), 1))
  return KMALLOC_NORMAL;
# 358 "./include/linux/slab.h"
 if (0 && (flags & (( gfp_t)0x01u)))
  return KMALLOC_DMA;
 if (!0 || (flags & (( gfp_t)0x10u)))
  return KMALLOC_RECLAIM;
 else
  return KMALLOC_CGROUP;
}
# 379 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int __kmalloc_index(size_t size,
          bool size_is_constant)
{
 if (!size)
  return 0;

 if (size <= (1 << 3))
  return 3;

 if ((1 << 3) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 3) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;

 if ((0 || 140000 >= 110000)
     && !0 && size_is_constant)
  do { extern void __compiletime_assert_187(void) __attribute__((__error__("unexpected size in kmalloc_index()"))); if (!(!(1))) __compiletime_assert_187(); } while (0);
 else
  do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/slab.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);


 return -1;
}



void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *, void *);
# 439 "./include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *__kmalloc_node(size_t size, gfp_t flags, int node)
{
 return __kmalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node)
{
 return kmem_cache_alloc(s, flags);
}
# 484 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmem_cache_alloc_trace(struct kmem_cache *s,
  gfp_t flags, size_t size)
{
 void *ret = kmem_cache_alloc(s, flags);

 ret = kasan_kmalloc(s, ret, size, flags);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *
kmem_cache_alloc_node_trace(struct kmem_cache *s,
         gfp_t gfpflags,
         int node, size_t size)
{
 void *ret = kmem_cache_alloc_node(s, gfpflags, node);

 ret = kasan_kmalloc(s, ret, size, gfpflags);
 return ret;
}


extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << (12))))) __attribute__((__malloc__));




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *
kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
{
 return kmalloc_order(size, flags, order);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 577 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << ((12) + 1)))
   return kmalloc_large(size, flags);

  index = __kmalloc_index(size, true);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << ((12) + 1))) {
  unsigned int i = __kmalloc_index(size, true);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}
# 641 "./include/linux/slab.h"
static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
krealloc_array(void *p, size_t new_n, size_t new_size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return krealloc(p, bytes, flags);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 671 "./include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
           int node)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}
# 709 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init_late(void);
# 22 "./include/linux/irq.h" 2

# 1 "./arch/riscv/include/asm/irq.h" 1
# 10 "./arch/riscv/include/asm/irq.h"
# 1 "./include/linux/interrupt.h" 1
# 11 "./arch/riscv/include/asm/irq.h" 2


# 1 "./include/asm-generic/irq.h" 1
# 14 "./include/asm-generic/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_canonicalize(int irq)
{
 return irq;
}
# 14 "./arch/riscv/include/asm/irq.h" 2

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_IRQ(void);
# 24 "./include/linux/irq.h" 2

# 1 "./arch/riscv/include/generated/asm/irq_regs.h" 1
# 1 "./include/asm-generic/irq_regs.h" 1
# 17 "./include/asm-generic/irq_regs.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs *) __irq_regs;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pt_regs *get_irq_regs(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) = new_regs; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) = new_regs; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) = new_regs; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) = new_regs; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 return old_regs;
}
# 2 "./arch/riscv/include/generated/asm/irq_regs.h" 2
# 26 "./include/linux/irq.h" 2

struct seq_file;
struct module;
struct msi_msg;
struct irq_affinity_desc;
enum irqchip_irq_state;
# 77 "./include/linux/irq.h"
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
 IRQ_DISABLE_UNLAZY = (1 << 19),
 IRQ_HIDDEN = (1 << 20),
 IRQ_NO_DEBUG = (1 << 21),
};
# 123 "./include/linux/irq.h"
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
 IRQ_SET_MASK_OK_DONE,
};

struct msi_desc;
struct irq_domain;
# 147 "./include/linux/irq.h"
struct irq_common_data {
 unsigned int state_use_accessors;



 void *handler_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;






};
# 177 "./include/linux/irq.h"
struct irq_data {
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 struct irq_common_data *common;
 struct irq_chip *chip;
 struct irq_domain *domain;

 struct irq_data *parent_data;

 void *chip_data;
};
# 225 "./include/linux/irq.h"
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_ACTIVATED = (1 << 9),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
 IRQD_WAKEUP_ARMED = (1 << 19),
 IRQD_FORWARDED_TO_VCPU = (1 << 20),
 IRQD_AFFINITY_MANAGED = (1 << 21),
 IRQD_IRQ_STARTED = (1 << 22),
 IRQD_MANAGED_SHUTDOWN = (1 << 23),
 IRQD_SINGLE_TARGET = (1 << 24),
 IRQD_DEFAULT_TRIGGER_SET = (1 << 25),
 IRQD_CAN_RESERVE = (1 << 26),
 IRQD_MSI_NOMASK_QUIRK = (1 << 27),
 IRQD_HANDLE_ENFORCE_IRQCTX = (1 << 28),
 IRQD_AFFINITY_ON_ACTIVATE = (1 << 29),
 IRQD_IRQ_ENABLED_ON_SUSPEND = (1 << 30),
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_PENDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_per_cpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_PER_CPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_balance(struct irq_data *d)
{
 return !((((d)->common)->state_use_accessors) & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_mark_affinity_was_set(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_trigger_type_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irqd_get_trigger_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_TRIGGER_MASK;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= type & IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_level_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_LEVEL;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_single_target(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_single_target(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_handle_enforce_irqctx(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_handle_enforce_irqctx(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_enabled_on_suspend(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_ENABLED_ON_SUSPEND;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_wakeup_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_STATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MOVE_PCNTXT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_disabled(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_DISABLED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_masked(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_MASKED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_inprogress(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_INPROGRESS;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_wakeup_armed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_ARMED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_forwarded_to_vcpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_is_managed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_MANAGED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_activated(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_started(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_STARTED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_managed_and_shutdown(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MANAGED_SHUTDOWN;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_reserve(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_msi_nomask_quirk(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_affinity_on_activate(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_ON_ACTIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_on_activate(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_ON_ACTIVATE;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
# 505 "./include/linux/irq.h"
struct irq_chip {
 struct device *parent_device;
 const char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);

 void (*irq_cpu_online)(struct irq_data *data);
 void (*irq_cpu_offline)(struct irq_data *data);

 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);
 int (*irq_request_resources)(struct irq_data *data);
 void (*irq_release_resources)(struct irq_data *data);

 void (*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
 void (*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

 int (*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
 int (*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

 int (*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

 void (*ipi_send_single)(struct irq_data *data, unsigned int cpu);
 void (*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

 int (*irq_nmi_setup)(struct irq_data *data);
 void (*irq_nmi_teardown)(struct irq_data *data);

 unsigned long flags;
};
# 574 "./include/linux/irq.h"
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
 IRQCHIP_EOI_THREADED = (1 << 6),
 IRQCHIP_SUPPORTS_LEVEL_MSI = (1 << 7),
 IRQCHIP_SUPPORTS_NMI = (1 << 8),
 IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND = (1 << 9),
 IRQCHIP_AFFINITY_PRE_STARTUP = (1 << 10),
};

# 1 "./include/linux/irqdesc.h" 1
# 13 "./include/linux/irqdesc.h"
struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_domain;
struct pt_regs;
# 55 "./include/linux/irqdesc.h"
struct irq_desc {
 struct irq_common_data irq_common_data;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;
 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int tot_count;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 atomic_t threads_handled;
 int threads_handled_last;
 raw_spinlock_t lock;
 struct cpumask *percpu_enabled;
 const struct cpumask *percpu_affinity;

 const struct cpumask *affinity_hint;
 struct irq_affinity_notify *affinity_notify;




 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;







 struct proc_dir_entry *dir;






 struct callback_head rcu;
 struct kobject kobj;

 struct mutex request_mutex;
 int parent_irq;
 struct module *owner;
 const char *name;
} __attribute__((__aligned__(1 << (6))));


extern void irq_lock_sparse(void);
extern void irq_unlock_sparse(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_desc_kstat_cpu(struct irq_desc *desc,
           unsigned int cpu)
{
 return desc->kstat_irqs ? *({ do { const void *__vpp_verify = (typeof((desc->kstat_irqs) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs))); (typeof((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_desc *irq_data_to_desc(struct irq_data *data)
{
 return ({ void *__mptr = (void *)(data->common); do { extern void __compiletime_assert_188(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(data->common)), typeof(((struct irq_desc *)0)->irq_common_data)) && !__builtin_types_compatible_p(typeof(*(data->common)), typeof(void))))) __compiletime_assert_188(); } while (0); ((struct irq_desc *)(__mptr - __builtin_offsetof(struct irq_desc, irq_common_data))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_desc_get_irq(struct irq_desc *desc)
{
 return desc->irq_data.irq;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return desc->irq_data.chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return desc->irq_data.chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return desc->irq_common_data.handler_data;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void generic_handle_irq_desc(struct irq_desc *desc)
{
 desc->handle_irq(desc);
}

int handle_irq_desc(struct irq_desc *desc);
int generic_handle_irq(unsigned int irq);







int generic_handle_domain_irq(struct irq_domain *domain, unsigned int hwirq);


int handle_domain_irq(struct irq_domain *domain,
        unsigned int hwirq, struct pt_regs *regs);

int handle_domain_nmi(struct irq_domain *domain, unsigned int hwirq,
        struct pt_regs *regs);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_desc_has_action(struct irq_desc *desc)
{
 return desc && desc->action != ((void *)0);
}
# 197 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_handler_locked(struct irq_data *data,
       irq_flow_handler_t handler)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
}
# 217 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_chip_handler_name_locked(struct irq_data *data, struct irq_chip *chip,
     irq_flow_handler_t handler, const char *name)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
 desc->name = name;
 data->chip = chip;
}

bool irq_check_status_bit(unsigned int irq, unsigned int bitmask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_balancing_disabled(unsigned int irq)
{
 return irq_check_status_bit(irq, (IRQ_PER_CPU | IRQ_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_is_percpu(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_is_percpu_devid(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU_DEVID);
}

void __irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class)
{
 if (0)
  __irq_set_lockdep_class(irq, lock_class, request_class);
}
# 589 "./include/linux/irq.h" 2




# 1 "./arch/riscv/include/generated/asm/hw_irq.h" 1
# 1 "./include/asm-generic/hw_irq.h" 1
# 2 "./arch/riscv/include/generated/asm/hw_irq.h" 2
# 594 "./include/linux/irq.h" 2
# 605 "./include/linux/irq.h"
struct irqaction;
extern int setup_percpu_irq(unsigned int irq, struct irqaction *new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);

extern void irq_cpu_online(void);
extern void irq_cpu_offline(void);
extern int irq_set_affinity_locked(struct irq_data *data,
       const struct cpumask *cpumask, bool force);
extern int irq_set_vcpu_affinity(unsigned int irq, void *vcpu_info);


extern void irq_migrate_all_off_this_cpu(void);
extern int irq_affinity_online_cpu(unsigned int cpu);
# 632 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_move_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_move_masked_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_force_complete_move(struct irq_desc *desc) { }


extern int no_irq_affinity;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_set_parent(int irq, int parent_irq)
{
 return 0;
}






extern void handle_level_irq(struct irq_desc *desc);
extern void handle_fasteoi_irq(struct irq_desc *desc);
extern void handle_edge_irq(struct irq_desc *desc);
extern void handle_edge_eoi_irq(struct irq_desc *desc);
extern void handle_simple_irq(struct irq_desc *desc);
extern void handle_untracked_irq(struct irq_desc *desc);
extern void handle_percpu_irq(struct irq_desc *desc);
extern void handle_percpu_devid_irq(struct irq_desc *desc);
extern void handle_bad_irq(struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);

extern void handle_fasteoi_nmi(struct irq_desc *desc);
extern void handle_percpu_devid_fasteoi_nmi(struct irq_desc *desc);

extern int irq_chip_compose_msi_msg(struct irq_data *data, struct msi_msg *msg);
extern int irq_chip_pm_get(struct irq_data *data);
extern int irq_chip_pm_put(struct irq_data *data);

extern void handle_fasteoi_ack_irq(struct irq_desc *desc);
extern void handle_fasteoi_mask_irq(struct irq_desc *desc);
extern int irq_chip_set_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool val);
extern int irq_chip_get_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool *state);
extern void irq_chip_enable_parent(struct irq_data *data);
extern void irq_chip_disable_parent(struct irq_data *data);
extern void irq_chip_ack_parent(struct irq_data *data);
extern int irq_chip_retrigger_hierarchy(struct irq_data *data);
extern void irq_chip_mask_parent(struct irq_data *data);
extern void irq_chip_mask_ack_parent(struct irq_data *data);
extern void irq_chip_unmask_parent(struct irq_data *data);
extern void irq_chip_eoi_parent(struct irq_data *data);
extern int irq_chip_set_affinity_parent(struct irq_data *data,
     const struct cpumask *dest,
     bool force);
extern int irq_chip_set_wake_parent(struct irq_data *data, unsigned int on);
extern int irq_chip_set_vcpu_affinity_parent(struct irq_data *data,
          void *vcpu_info);
extern int irq_chip_set_type_parent(struct irq_data *data, unsigned int type);
extern int irq_chip_request_resources_parent(struct irq_data *data);
extern void irq_chip_release_resources_parent(struct irq_data *data);



extern void note_interrupt(struct irq_desc *desc, irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, ((void *)0));
}

extern int irq_set_percpu_devid(unsigned int irq);
extern int irq_set_percpu_devid_partition(unsigned int irq,
       const struct cpumask *affinity);
extern int irq_get_percpu_devid_partition(unsigned int irq,
       struct cpumask *affinity);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, ((void *)0));
}






void
irq_set_chained_handler_and_data(unsigned int irq, irq_flow_handler_t handle,
     void *data);

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->handler_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->common->handler_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->msi_desc : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct msi_desc *irq_data_get_msi_desc(struct irq_data *d)
{
 return d->common->msi_desc;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_common_data_get_node(struct irq_common_data *d)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_data_get_node(struct irq_data *d)
{
 return irq_common_data_get_node(d->common);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_get_affinity_mask(int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? d->common->affinity : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_data_get_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}
# 902 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_data_update_effective_affinity(struct irq_data *d,
            const struct cpumask *m)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct cpumask *irq_data_get_effective_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_get_effective_affinity_mask(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? irq_data_get_effective_affinity_mask(d) : ((void *)0);
}

unsigned int arch_dynirq_lower_bound(unsigned int from);

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
        struct module *owner,
        const struct irq_affinity_desc *affinity);

int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
      unsigned int cnt, int node, struct module *owner,
      const struct irq_affinity_desc *affinity);
# 961 "./include/linux/irq.h"
void irq_free_descs(unsigned int irq, unsigned int cnt);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}
# 981 "./include/linux/irq.h"
struct irq_chip_regs {
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;
};
# 1004 "./include/linux/irq.h"
struct irq_chip_type {
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;
};
# 1046 "./include/linux/irq.h"
struct irq_chip_generic {
 raw_spinlock_t lock;
 void *reg_base;
 u32 (*reg_readl)(void *addr);
 void (*reg_writel)(u32 val, void *addr);
 void (*suspend)(struct irq_chip_generic *gc);
 void (*resume)(struct irq_chip_generic *gc);
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[];
};
# 1079 "./include/linux/irq.h"
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
 IRQ_GC_BE_IO = 1 << 4,
};
# 1096 "./include/linux/irq.h"
struct irq_domain_chip_generic {
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[];
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_and_ack_set(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


int irq_map_generic_chip(struct irq_domain *d, unsigned int virq,
    irq_hw_number_t hw_irq);
struct irq_chip_generic *
irq_alloc_generic_chip(const char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *
devm_irq_alloc_generic_chip(struct device *dev, const char *name, int num_ct,
       unsigned int irq_base, void *reg_base,
       irq_flow_handler_t handler);
int devm_irq_setup_generic_chip(struct device *dev, struct irq_chip_generic *gc,
    u32 msk, enum irq_gc_flags flags,
    unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);

int __irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
         int num_ct, const char *name,
         irq_flow_handler_t handler,
         unsigned int clr, unsigned int set,
         enum irq_gc_flags flags);
# 1154 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_free_generic_chip(struct irq_chip_generic *gc)
{
 kfree(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_destroy_generic_chip(struct irq_chip_generic *gc,
         u32 msk, unsigned int clr,
         unsigned int set)
{
 irq_remove_generic_chip(gc, msk, clr, set);
 irq_free_generic_chip(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ void *__mptr = (void *)(d->chip); do { extern void __compiletime_assert_189(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(d->chip)), typeof(((struct irq_chip_type *)0)->chip)) && !__builtin_types_compatible_p(typeof(*(d->chip)), typeof(void))))) __compiletime_assert_189(); } while (0); ((struct irq_chip_type *)(__mptr - __builtin_offsetof(struct irq_chip_type, chip))); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_gc_lock(struct irq_chip_generic *gc)
{
 _raw_spin_lock(&gc->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_gc_unlock(struct irq_chip_generic *gc)
{
 _raw_spin_unlock(&gc->lock);
}
# 1199 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_reg_writel(struct irq_chip_generic *gc,
      u32 val, int reg_offset)
{
 if (gc->reg_writel)
  gc->reg_writel(val, gc->reg_base + reg_offset);
 else
  ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)((val))), ((gc->reg_base + reg_offset)))); mmiowb_set_pending(); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irq_reg_readl(struct irq_chip_generic *gc,
    int reg_offset)
{
 if (gc->reg_readl)
  return gc->reg_readl(gc->reg_base + reg_offset);
 else
  return ({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(gc->reg_base + reg_offset))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; });
}

struct irq_matrix;
struct irq_matrix *irq_alloc_matrix(unsigned int matrix_bits,
        unsigned int alloc_start,
        unsigned int alloc_end);
void irq_matrix_online(struct irq_matrix *m);
void irq_matrix_offline(struct irq_matrix *m);
void irq_matrix_assign_system(struct irq_matrix *m, unsigned int bit, bool replace);
int irq_matrix_reserve_managed(struct irq_matrix *m, const struct cpumask *msk);
void irq_matrix_remove_managed(struct irq_matrix *m, const struct cpumask *msk);
int irq_matrix_alloc_managed(struct irq_matrix *m, const struct cpumask *msk,
    unsigned int *mapped_cpu);
void irq_matrix_reserve(struct irq_matrix *m);
void irq_matrix_remove_reserved(struct irq_matrix *m);
int irq_matrix_alloc(struct irq_matrix *m, const struct cpumask *msk,
       bool reserved, unsigned int *mapped_cpu);
void irq_matrix_free(struct irq_matrix *m, unsigned int cpu,
       unsigned int bit, bool managed);
void irq_matrix_assign(struct irq_matrix *m, unsigned int bit);
unsigned int irq_matrix_available(struct irq_matrix *m, bool cpudown);
unsigned int irq_matrix_allocated(struct irq_matrix *m);
unsigned int irq_matrix_reserved(struct irq_matrix *m);
void irq_matrix_debug_show(struct seq_file *sf, struct irq_matrix *m, int ind);



irq_hw_number_t ipi_get_hwirq(unsigned int irq, unsigned int cpu);
int __ipi_send_single(struct irq_desc *desc, unsigned int cpu);
int __ipi_send_mask(struct irq_desc *desc, const struct cpumask *dest);
int ipi_send_single(unsigned int virq, unsigned int cpu);
int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
# 1257 "./include/linux/irq.h"
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) set_handle_irq(void (*handle_irq)(struct pt_regs *));





extern void (*handle_arch_irq)(struct pt_regs *) __attribute__((__section__(".data..ro_after_init")));
# 18 "./include/asm-generic/hardirq.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ack_bad_irq(unsigned int irq)
{
 ({ do {} while (0); _printk("\001" "2" "unexpected IRQ trap at vector %02x\n", irq); });
}
# 2 "./arch/riscv/include/generated/asm/hardirq.h" 2
# 12 "./include/linux/hardirq.h" 2

extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_irq_enter_check_tick(void) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_irq_enter_check_tick(void)
{
 if (context_tracking_enabled())
  __rcu_irq_enter_check_tick();
}
# 55 "./include/linux/hardirq.h"
void irq_enter(void);



void irq_enter_rcu(void);
# 83 "./include/linux/hardirq.h"
void irq_exit(void);




void irq_exit_rcu(void);
# 99 "./include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 12 "./include/linux/interrupt.h" 2
# 21 "./include/linux/interrupt.h"
# 1 "./arch/riscv/include/asm/sections.h" 1







# 1 "./include/asm-generic/sections.h" 1
# 35 "./include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];


extern char __noinstr_text_start[], __noinstr_text_end[];

extern const void __nosave_begin, __nosave_end;
# 70 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
# 91 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_initmem_freed(unsigned long addr)
{
 return 0;
}
# 108 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 125 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 142 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 156 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 169 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 9 "./arch/riscv/include/asm/sections.h" 2
# 1 "./include/linux/mm.h" 1
# 18 "./include/linux/mm.h"
# 1 "./include/linux/mmap_lock.h" 1







# 1 "./include/linux/tracepoint-defs.h" 1
# 12 "./include/linux/tracepoint-defs.h"
# 1 "./include/linux/static_key.h" 1
# 13 "./include/linux/tracepoint-defs.h" 2

struct static_call_key;

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 struct static_call_key *static_call_key;
 void *static_call_tramp;
 void *iterator;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};




typedef struct tracepoint * const tracepoint_ptr_t;


struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 9 "./include/linux/mmap_lock.h" 2





extern struct tracepoint __tracepoint_mmap_lock_start_locking;
extern struct tracepoint __tracepoint_mmap_lock_acquire_returned;
extern struct tracepoint __tracepoint_mmap_lock_released;
# 47 "./include/linux/mmap_lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_start_locking(struct mm_struct *mm,
         bool write)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_acquire_returned(struct mm_struct *mm,
            bool write, bool success)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_released(struct mm_struct *mm, bool write)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_init_lock(struct mm_struct *mm)
{
 do { static struct lock_class_key __key; __init_rwsem((&mm->mmap_lock), "&mm->mmap_lock", &__key); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_lock_nested(struct mm_struct *mm, int subclass)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_write_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_write_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, true, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_unlock(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, true);
 up_write(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_downgrade(struct mm_struct *mm)
{
 __mmap_lock_trace_acquire_returned(mm, false, true);
 downgrade_write(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, false);
 down_read(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_read_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_read_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, false, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_unlock(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, false);
 up_read(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_unlock_non_owner(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, false);
 up_read(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_assert_locked(struct mm_struct *mm)
{
 do { (void)(&mm->mmap_lock); } while (0);
 do { if (__builtin_expect(!!(!rwsem_is_locked(&mm->mmap_lock)), 0)) { dump_mm(mm); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mmap_lock.h"), "i" (156), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_assert_write_locked(struct mm_struct *mm)
{
 do { (void)(&mm->mmap_lock); } while (0);
 do { if (__builtin_expect(!!(!rwsem_is_locked(&mm->mmap_lock)), 0)) { dump_mm(mm); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mmap_lock.h"), "i" (162), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_lock_is_contended(struct mm_struct *mm)
{
 return rwsem_is_contended(&mm->mmap_lock);
}
# 19 "./include/linux/mm.h" 2
# 1 "./include/linux/range.h" 1





struct range {
 u64 start;
 u64 end;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 range_len(const struct range *range)
{
 return range->end - range->start + 1;
}

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 20 "./include/linux/mm.h" 2


# 1 "./include/linux/bit_spinlock.h" 1
# 16 "./include/linux/bit_spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
  do {
   cpu_relax();
  } while (arch_test_bit(bitnum, addr));
  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 }

 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{

 do { if (__builtin_expect(!!(!arch_test_bit(bitnum, addr)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/bit_spinlock.h"), "i" (60), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{

 do { if (__builtin_expect(!!(!arch_test_bit(bitnum, addr)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/bit_spinlock.h"), "i" (77), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 __clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return arch_test_bit(bitnum, addr);





}
# 23 "./include/linux/mm.h" 2
# 1 "./include/linux/shrinker.h" 1
# 12 "./include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "./include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;





 atomic_long_t *nr_deferred;
};
# 91 "./include/linux/shrinker.h"
extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
# 24 "./include/linux/mm.h" 2

# 1 "./include/linux/page_ext.h" 1





# 1 "./include/linux/stacktrace.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/errno.h" 1
# 7 "./include/linux/stacktrace.h" 2

struct task_struct;
struct pt_regs;


void stack_trace_print(const unsigned long *trace, unsigned int nr_entries,
         int spaces);
int stack_trace_snprint(char *buf, size_t size, const unsigned long *entries,
   unsigned int nr_entries, int spaces);
unsigned int stack_trace_save(unsigned long *store, unsigned int size,
         unsigned int skipnr);
unsigned int stack_trace_save_tsk(struct task_struct *task,
      unsigned long *store, unsigned int size,
      unsigned int skipnr);
unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
       unsigned int size, unsigned int skipnr);
unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
# 36 "./include/linux/stacktrace.h"
typedef bool (*stack_trace_consume_fn)(void *cookie, unsigned long addr);
# 53 "./include/linux/stacktrace.h"
void arch_stack_walk(stack_trace_consume_fn consume_entry, void *cookie,
       struct task_struct *task, struct pt_regs *regs);
# 73 "./include/linux/stacktrace.h"
int arch_stack_walk_reliable(stack_trace_consume_fn consume_entry, void *cookie,
        struct task_struct *task);

void arch_stack_walk_user(stack_trace_consume_fn consume_entry, void *cookie,
     const struct pt_regs *regs);
# 101 "./include/linux/stacktrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_trace_save_tsk_reliable(struct task_struct *tsk,
      unsigned long *store,
      unsigned int size)
{
 return -38;
}
# 7 "./include/linux/page_ext.h" 2
# 1 "./include/linux/stackdepot.h" 1
# 14 "./include/linux/stackdepot.h"
typedef u32 depot_stack_handle_t;

depot_stack_handle_t stack_depot_save(unsigned long *entries,
          unsigned int nr_entries, gfp_t gfp_flags);

unsigned int stack_depot_fetch(depot_stack_handle_t handle,
          unsigned long **entries);

unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_depot_init(void)
{
 return 0;
}
# 8 "./include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 68 "./include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page_ext *lookup_page_ext(const struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem_late(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem(void)
{
}
# 26 "./include/linux/mm.h" 2


# 1 "./include/linux/page_ref.h" 1
# 10 "./include/linux/page_ref.h"
extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 41 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_count(const struct page *page)
{
 return atomic_read(&page->_refcount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_count(const struct page *page)
{
 return atomic_read(&((typeof(page))_compound_head(page))->_refcount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_return(struct page *page, int nr)
{
 int ret = atomic_sub_return(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_inc_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_dec_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_add_unless(struct page *page, int nr, int u)
{
 int ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_unfreeze(struct page *page, int count)
{
 do { if (__builtin_expect(!!(page_count(page) != 0), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "page_count(page) != 0"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page_ref.h"), "i" (184), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 do { if (__builtin_expect(!!(count == 0), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/page_ref.h"), "i" (185), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 atomic_set_release(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}
# 29 "./include/linux/mm.h" 2
# 1 "./include/linux/memremap.h" 1







struct resource;
struct device;
# 19 "./include/linux/memremap.h"
struct vmem_altmap {
 unsigned long base_pfn;
 const unsigned long end_pfn;
 const unsigned long reserve;
 unsigned long free;
 unsigned long align;
 unsigned long alloc;
};
# 59 "./include/linux/memremap.h"
enum memory_type {

 MEMORY_DEVICE_PRIVATE = 1,
 MEMORY_DEVICE_FS_DAX,
 MEMORY_DEVICE_GENERIC,
 MEMORY_DEVICE_PCI_P2PDMA,
};

struct dev_pagemap_ops {





 void (*page_free)(struct page *page);




 void (*kill)(struct dev_pagemap *pgmap);




 void (*cleanup)(struct dev_pagemap *pgmap);





 vm_fault_t (*migrate_to_ram)(struct vm_fault *vmf);
};
# 110 "./include/linux/memremap.h"
struct dev_pagemap {
 struct vmem_altmap altmap;
 struct percpu_ref *ref;
 struct percpu_ref internal_ref;
 struct completion done;
 enum memory_type type;
 unsigned int flags;
 const struct dev_pagemap_ops *ops;
 void *owner;
 int nr_range;
 union {
  struct range range;
  struct range ranges[0];
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vmem_altmap *pgmap_altmap(struct dev_pagemap *pgmap)
{
 if (pgmap->flags & (1 << 0))
  return &pgmap->altmap;
 return ((void *)0);
}
# 146 "./include/linux/memremap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_memremap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{





 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/memremap.h"), "i" (154), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return ERR_PTR(-6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void devm_memunmap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dev_pagemap *get_dev_pagemap(unsigned long pfn,
  struct dev_pagemap *pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgmap_pfn_valid(struct dev_pagemap *pgmap, unsigned long pfn)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmem_altmap_free(struct vmem_altmap *altmap,
  unsigned long nr_pfns)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memremap_compat_align(void)
{
 return ((1UL) << (12));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_dev_pagemap(struct dev_pagemap *pgmap)
{
 if (pgmap)
  percpu_ref_put(pgmap->ref);
}
# 30 "./include/linux/mm.h" 2






struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct file_ra_state;
struct user_struct;
struct writeback_control;
struct bdi_writeback;
struct pt_regs;

extern int sysctl_page_lock_unfairness;

void init_mm_internals(void);


extern unsigned long max_mapnr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_max_mapnr(unsigned long limit)
{
 max_mapnr = limit;
}




extern atomic_long_t _totalram_pages;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalram_pages(void)
{
 return (unsigned long)atomic_long_read(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_inc(void)
{
 atomic_long_inc(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_dec(void)
{
 atomic_long_dec(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_add(long count)
{
 atomic_long_add(count, &_totalram_pages);
}

extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits ;
# 152 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mm_zero_struct_page(struct page *page)
{
 unsigned long *_pp = (void *)page;


 do { extern void __compiletime_assert_190(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) & 7"))); if (!(!(sizeof(struct page) & 7))) __compiletime_assert_190(); } while (0);
 do { extern void __compiletime_assert_191(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) < 56"))); if (!(!(sizeof(struct page) < 56))) __compiletime_assert_191(); } while (0);
 do { extern void __compiletime_assert_192(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) > 80"))); if (!(!(sizeof(struct page) > 80))) __compiletime_assert_192(); } while (0);

 switch (sizeof(struct page)) {
 case 80:
  _pp[9] = 0;
  __attribute__((__fallthrough__));
 case 72:
  _pp[8] = 0;
  __attribute__((__fallthrough__));
 case 64:
  _pp[7] = 0;
  __attribute__((__fallthrough__));
 case 56:
  _pp[6] = 0;
  _pp[5] = 0;
  _pp[4] = 0;
  _pp[3] = 0;
  _pp[2] = 0;
  _pp[1] = 0;
  _pp[0] = 0;
 }
}
# 204 "./include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);





int __add_to_page_cache_locked(struct page *page, struct address_space *mapping,
  unsigned long index, gfp_t gfp, void **shadowp);
# 241 "./include/linux/mm.h"
void setup_initial_init_mm(void *start_code, void *end_code,
      void *end_data, void *brk);
# 253 "./include/linux/mm.h"
struct vm_area_struct *vm_area_alloc(struct mm_struct *);
struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
void vm_area_free(struct vm_area_struct *);
# 435 "./include/linux/mm.h"
extern pgprot_t protection_map[16];
# 469 "./include/linux/mm.h"
enum fault_flag {
 FAULT_FLAG_WRITE = 1 << 0,
 FAULT_FLAG_MKWRITE = 1 << 1,
 FAULT_FLAG_ALLOW_RETRY = 1 << 2,
 FAULT_FLAG_RETRY_NOWAIT = 1 << 3,
 FAULT_FLAG_KILLABLE = 1 << 4,
 FAULT_FLAG_TRIED = 1 << 5,
 FAULT_FLAG_USER = 1 << 6,
 FAULT_FLAG_REMOTE = 1 << 7,
 FAULT_FLAG_INSTRUCTION = 1 << 8,
 FAULT_FLAG_INTERRUPTIBLE = 1 << 9,
};
# 503 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_flag_allow_retry_first(enum fault_flag flags)
{
 return (flags & FAULT_FLAG_ALLOW_RETRY) &&
     (!(flags & FAULT_FLAG_TRIED));
}
# 531 "./include/linux/mm.h"
struct vm_fault {
 const struct {
  struct vm_area_struct *vma;
  gfp_t gfp_mask;
  unsigned long pgoff;
  unsigned long address;
 };
 enum fault_flag flags;

 pmd_t *pmd;

 pud_t *pud;


 union {
  pte_t orig_pte;
  pmd_t orig_pmd;


 };

 struct page *cow_page;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;






};


enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);

 int (*may_split)(struct vm_area_struct *area, unsigned long addr);
 int (*mremap)(struct vm_area_struct *area);





 int (*mprotect)(struct vm_area_struct *vma, unsigned long start,
   unsigned long end, unsigned long newflags);
 vm_fault_t (*fault)(struct vm_fault *vmf);
 vm_fault_t (*huge_fault)(struct vm_fault *vmf,
   enum page_entry_size pe_size);
 vm_fault_t (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);
 unsigned long (*pagesize)(struct vm_area_struct * area);



 vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);


 vm_fault_t (*pfn_mkwrite)(struct vm_fault *vmf);





 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 655 "./include/linux/mm.h"
 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
{
 static const struct vm_operations_struct dummy_vm_ops = {};

 memset(vma, 0, sizeof(*vma));
 vma->vm_mm = mm;
 vma->vm_ops = &dummy_vm_ops;
 INIT_LIST_HEAD(&vma->anon_vma_chain);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_set_anonymous(struct vm_area_struct *vma)
{
 vma->vm_ops = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_temporary_stack(struct vm_area_struct *vma)
{
 int maybe_stack = vma->vm_flags & (0x00000100 | 0x00000000);

 if (!maybe_stack)
  return false;

 if ((vma->vm_flags & (0x00010000 | 0x00008000)) ==
      (0x00010000 | 0x00008000))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_foreign(struct vm_area_struct *vma)
{
 if (!get_current()->mm)
  return true;

 if (get_current()->mm != vma->vm_mm)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_accessible(struct vm_area_struct *vma)
{
 return vma->vm_flags & (0x00000001 | 0x00000002 | 0x00000004);
}






bool vma_is_shmem(struct vm_area_struct *vma);




int vma_is_stack_for_current(struct vm_area_struct *vma);




struct mmu_gather;
struct inode;

# 1 "./include/linux/huge_mm.h" 1




# 1 "./include/linux/sched/coredump.h" 1
# 17 "./include/linux/sched/coredump.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 6 "./include/linux/huge_mm.h" 2


# 1 "./include/linux/fs.h" 1





# 1 "./include/linux/wait_bit.h" 1
# 10 "./include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "./include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 73, 0); do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 98, 0); do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { __might_sleep("include/linux/wait_bit.h", 125, 0); do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 153, 0); do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 181, 0); do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 205, 0); do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 232, 0); do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 wake_up_bit(word, bit);
}
# 7 "./include/linux/fs.h" 2
# 1 "./include/linux/kdev_t.h" 1




# 1 "./include/uapi/linux/kdev_t.h" 1
# 6 "./include/linux/kdev_t.h" 2
# 24 "./include/linux/kdev_t.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "./include/linux/fs.h" 2
# 1 "./include/linux/dcache.h" 1








# 1 "./include/linux/rculist_bl.h" 1







# 1 "./include/linux/list_bl.h" 1
# 34 "./include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (66), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (68), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ do { extern void __compiletime_assert_193(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_193(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }) & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 do { do { extern void __compiletime_assert_194(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_194(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))); } while (0); } while (0);


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (120), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 do { do { extern void __compiletime_assert_195(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_195(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))); } while (0); } while (0);



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "./include/linux/rculist_bl.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/rculist_bl.h"), "i" (14), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/rculist_bl.h"), "i" (16), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_196(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_196(); } while (0); do { *(volatile typeof((h->first)) *)&((h->first)) = ((typeof(h->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_197(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_197(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_198(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)) || sizeof(*&h->first) == sizeof(long long))) __compiletime_assert_198(); } while (0); do { *(volatile typeof(*&h->first) *)&(*&h->first) = ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ do { extern void __compiletime_assert_199(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_199(); } while (0); (*(const volatile typeof( _Generic(((h->first)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((h->first)))) *)&((h->first))); }); do { } while (0 && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 46 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + 0);
}
# 71 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 10 "./include/linux/dcache.h" 2




# 1 "./include/linux/lockref.h" 1
# 25 "./include/linux/lockref.h"
struct lockref {
 union {



  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 15 "./include/linux/dcache.h" 2
# 1 "./include/linux/stringhash.h" 1






# 1 "./include/linux/hash.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 7 "./include/linux/hash.h" 2
# 60 "./include/linux/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "./include/linux/stringhash.h" 2
# 42 "./include/linux/stringhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "./include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "./include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 16 "./include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 48 "./include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;
extern const struct qstr dotdot_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 91 "./include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_spinlock_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << 6))));
# 225 "./include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);

extern struct dentry *d_find_alias_rcu(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(const struct dentry *, char *, int);
extern char *dentry_path(const struct dentry *, char *, int);
# 317 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_flags_negative(unsigned flags)
{
 return (flags & 0x00700000) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 474 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 492 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 524 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 536 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ do { extern void __compiletime_assert_200(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dentry->d_inode) == sizeof(char) || sizeof(dentry->d_inode) == sizeof(short) || sizeof(dentry->d_inode) == sizeof(int) || sizeof(dentry->d_inode) == sizeof(long)) || sizeof(dentry->d_inode) == sizeof(long long))) __compiletime_assert_200(); } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
}
# 551 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 568 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 599 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "./include/linux/fs.h" 2
# 1 "./include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "./include/linux/fs.h" 2



# 1 "./include/linux/list_lru.h" 1
# 15 "./include/linux/list_lru.h"
struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;




 long nr_items;
} __attribute__((__aligned__((1 << 6))));

struct list_lru {
 struct list_lru_node *node;





};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "./include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "./include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "./include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "./include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "./include/linux/fs.h" 2
# 24 "./include/linux/fs.h"
# 1 "./include/linux/capability.h" 1
# 16 "./include/linux/capability.h"
# 1 "./include/uapi/linux/capability.h" 1
# 39 "./include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "./include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "./include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
extern bool ns_capable_setid(struct user_namespace *ns, int cap);
# 250 "./include/linux/capability.h"
bool privileged_wrt_inode_uidgid(struct user_namespace *ns,
     struct user_namespace *mnt_userns,
     const struct inode *inode);
bool capable_wrt_inode_uidgid(struct user_namespace *mnt_userns,
         const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool perfmon_capable(void)
{
 return capable(38) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_capable(void)
{
 return capable(39) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool checkpoint_restore_ns_capable(struct user_namespace *ns)
{
 return ns_capable(ns, 40) ||
  ns_capable(ns, 21);
}


int get_vfs_caps_from_disk(struct user_namespace *mnt_userns,
      const struct dentry *dentry,
      struct cpu_vfs_cap_data *cpu_caps);

int cap_convert_nscap(struct user_namespace *mnt_userns, struct dentry *dentry,
        const void **ivalue, size_t size);
# 25 "./include/linux/fs.h" 2
# 1 "./include/linux/semaphore.h" 1
# 15 "./include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "./include/linux/semaphore.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { 0 }, .magic = 0xdead4ead, .owner_cpu = -1, .owner = ((void *)-1L), }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "./include/linux/fs.h" 2
# 1 "./include/linux/fcntl.h" 1





# 1 "./include/uapi/linux/fcntl.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/fcntl.h" 1
# 1 "./include/uapi/asm-generic/fcntl.h" 1
# 156 "./include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 196 "./include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 2 "./arch/riscv/include/generated/uapi/asm/fcntl.h" 2
# 6 "./include/uapi/linux/fcntl.h" 2
# 1 "./include/uapi/linux/openat2.h" 1
# 19 "./include/uapi/linux/openat2.h"
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 7 "./include/uapi/linux/fcntl.h" 2
# 7 "./include/linux/fcntl.h" 2
# 27 "./include/linux/fs.h" 2



# 1 "./include/linux/migrate_mode.h" 1
# 15 "./include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 31 "./include/linux/fs.h" 2


# 1 "./include/linux/percpu-rwsem.h" 1






# 1 "./include/linux/rcuwait.h" 1





# 1 "./include/linux/sched/signal.h" 1





# 1 "./include/linux/signal.h" 1








struct task_struct;


extern int print_fatal_signals;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo(kernel_siginfo_t *to,
    const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*to));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_siginfo(kernel_siginfo_t *info)
{
 memset(info, 0, sizeof(*info));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo_to_external(siginfo_t *to,
         const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*from));
 memset(((char *)to) + sizeof(struct kernel_siginfo), 0,
  (sizeof(struct siginfo) - sizeof(struct kernel_siginfo)));
}

int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);

enum siginfo_layout {
 SIL_KILL,
 SIL_TIMER,
 SIL_POLL,
 SIL_FAULT,
 SIL_FAULT_TRAPNO,
 SIL_FAULT_MCEERR,
 SIL_FAULT_BNDERR,
 SIL_FAULT_PKUERR,
 SIL_FAULT_PERF_EVENT,
 SIL_CHLD,
 SIL_RT,
 SIL_SYS,
};

enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
# 64 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / (8 * 8)) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / (8 * 8)] |= 1UL << (sig % (8 * 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / (8 * 8)) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / (8 * 8)] &= ~(1UL << (sig % (8 * 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / (8 * 8)) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / (8 * 8)] >> (sig % (8 * 8)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigisemptyset(sigset_t *set)
{
 switch ((64 / (8 * 8))) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { extern void __compiletime_assert_201(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_201(); } while (0);
  return 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigequalsets(const sigset_t *set1, const sigset_t *set2)
{
 switch ((64 / (8 * 8))) {
 case 4:
  return (set1->sig[3] == set2->sig[3]) &&
   (set1->sig[2] == set2->sig[2]) &&
   (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 2:
  return (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 1:
  return set1->sig[0] == set2->sig[0];
 }
 return 0;
}
# 157 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / (8 * 8))) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { extern void __compiletime_assert_202(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_202(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / (8 * 8))) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { extern void __compiletime_assert_203(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_203(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / (8 * 8))) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { extern void __compiletime_assert_204(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_204(); } while (0); } }
# 187 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signotset(sigset_t *set) { switch ((64 / (8 * 8))) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); __attribute__((__fallthrough__)); case 2: set->sig[1] = (~(set->sig[1])); __attribute__((__fallthrough__)); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { extern void __compiletime_assert_205(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_205(); } while (0); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigemptyset(sigset_t *set)
{
 switch ((64 / (8 * 8))) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigfillset(sigset_t *set)
{
 switch ((64 / (8 * 8))) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / (8 * 8))) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / (8 * 8))-1));
  break;
 case 2: set->sig[1] = 0;
  break;
 case 1: ;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / (8 * 8))) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / (8 * 8))-1));
  break;
 case 2: set->sig[1] = -1;
  break;
 case 1: ;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;
enum pid_type;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
    struct task_struct *p, enum pid_type type);
extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
          struct task_struct *p, enum pid_type type);
extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

extern bool get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_kernel_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)3));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

extern bool unhandled_signal(struct task_struct *tsk, int sig);
# 454 "./include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 468 "./include/linux/signal.h"
struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 478 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *arch_untagged_si_addr(void *addr,
       unsigned long sig,
       unsigned long si_code)
{
 return addr;
}
# 7 "./include/linux/sched/signal.h" 2

# 1 "./include/linux/sched/jobctl.h" 1






struct task_struct;
# 35 "./include/linux/sched/jobctl.h"
extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
# 9 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/sched/task.h" 1
# 11 "./include/linux/sched/task.h"
# 1 "./include/linux/uaccess.h" 1




# 1 "./include/linux/fault-inject-usercopy.h" 1
# 18 "./include/linux/fault-inject-usercopy.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool should_fail_usercopy(void) { return false; }
# 6 "./include/linux/uaccess.h" 2





# 1 "./arch/riscv/include/asm/uaccess.h" 1
# 21 "./arch/riscv/include/asm/uaccess.h"
# 1 "./arch/riscv/include/generated/asm/extable.h" 1
# 1 "./include/asm-generic/extable.h" 1
# 18 "./include/asm-generic/extable.h"
struct exception_table_entry
{
 unsigned long insn, fixup;
};


struct pt_regs;
extern int fixup_exception(struct pt_regs *regs);
# 2 "./arch/riscv/include/generated/asm/extable.h" 2
# 22 "./arch/riscv/include/asm/uaccess.h" 2
# 54 "./arch/riscv/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __access_ok(unsigned long addr, unsigned long size)
{
 return size <= (((1UL) << 30) * (((1UL) << (12)) / sizeof(pgd_t)) / 2) && addr <= (((1UL) << 30) * (((1UL) << (12)) / sizeof(pgd_t)) / 2) - size;
}
# 359 "./arch/riscv/include/asm/uaccess.h"
unsigned long __attribute__((__warn_unused_result__)) __asm_copy_to_user(void *to,
 const void *from, unsigned long n);
unsigned long __attribute__((__warn_unused_result__)) __asm_copy_from_user(void *to,
 const void *from, unsigned long n);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
raw_copy_from_user(void *to, const void *from, unsigned long n)
{
 return __asm_copy_from_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
raw_copy_to_user(void *to, const void *from, unsigned long n)
{
 return __asm_copy_to_user(to, from, n);
}

extern long strncpy_from_user(char *dest, const char *src, long count);

extern long __attribute__((__warn_unused_result__)) strnlen_user(const char *str, long n);

extern
unsigned long __attribute__((__warn_unused_result__)) __clear_user(void *addr, unsigned long n);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long __attribute__((__warn_unused_result__)) clear_user(void *to, unsigned long n)
{
 __might_fault("arch/riscv/include/asm/uaccess.h", 386);
 return ({ (void)0; __builtin_expect(!!(__access_ok((unsigned long )(to), (n))), 1); }) ?
  __clear_user(to, n) : n;
}
# 12 "./include/linux/uaccess.h" 2
# 32 "./include/linux/uaccess.h"
typedef struct {

} mm_segment_t;
# 43 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mm_segment_t force_uaccess_begin(void)
{
 return (mm_segment_t) { };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void force_uaccess_end(mm_segment_t oldfs)
{
}
# 98 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 __might_fault("include/linux/uaccess.h", 109);
 if (should_fail_usercopy())
  return n;
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}
# 130 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 __might_fault("include/linux/uaccess.h", 143);
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}
# 166 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) unsigned long
_copy_from_user(void *, const void *, unsigned long);
# 184 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) unsigned long
_copy_to_user(void *, const void *, unsigned long);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_kernel(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 234 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 pagefault_disabled_dec();
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pagefault_disabled(void)
{
 return get_current()->pagefault_disabled != 0;
}
# 276 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic_nocache(void *to, const void *from,
      unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}



extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
# 334 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) int
copy_struct_from_user(void *dst, size_t ksize, const void *src,
        size_t usize)
{
 size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x206 = (ksize); typeof(usize) __UNIQUE_ID___y207 = (usize); ((__UNIQUE_ID___x206) < (__UNIQUE_ID___y207) ? (__UNIQUE_ID___x206) : (__UNIQUE_ID___y207)); }));
 size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x208 = (ksize); typeof(usize) __UNIQUE_ID___y209 = (usize); ((__UNIQUE_ID___x208) > (__UNIQUE_ID___y209) ? (__UNIQUE_ID___x208) : (__UNIQUE_ID___y209)); })) - size;


 if (usize < ksize) {
  memset(dst + size, 0, rest);
 } else if (usize > ksize) {
  int ret = check_zeroed_user(src + size, rest);
  if (ret <= 0)
   return ret ?: -7;
 }

 if (copy_from_user(dst, src, size))
  return -14;
 return 0;
}

bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);

long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_kernel_nofault(void *dst, const void *src, size_t size);

long copy_from_user_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_user_nofault(void *dst, const void *src,
  size_t size);

long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
  long count);

long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
  long count);
long strnlen_user_nofault(const void *unsafe_addr, long count);
# 391 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_access_save(void) { return 0UL; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_access_restore(unsigned long flags) { }
# 12 "./include/linux/sched/task.h" 2

struct task_struct;
struct rusage;
union thread_union;
struct css_set;




struct kernel_clone_args {
 u64 flags;
 int *pidfd;
 int *child_tid;
 int *parent_tid;
 int exit_signal;
 unsigned long stack;
 unsigned long stack_size;
 unsigned long tls;
 pid_t *set_tid;

 size_t set_tid_size;
 int cgroup;
 int io_thread;
 struct cgroup *cgrp;
 struct css_set *cset;
};







extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern int lockdep_tasklist_lock_is_held(void);

extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);

extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_post_fork(struct task_struct *p);
extern void sched_dead(struct task_struct *p);

void __attribute__((__noreturn__)) do_task_dead(void);

extern void proc_caches_init(void);

extern void fork_init(void);

extern void release_task(struct task_struct * p);

extern int copy_thread(unsigned long, unsigned long, unsigned long,
         struct task_struct *, unsigned long);

extern void flush_thread(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_thread(struct task_struct *tsk)
{
}

extern void do_group_exit(int);

extern void exit_files(struct task_struct *);
extern void exit_itimers(struct signal_struct *);

extern pid_t kernel_clone(struct kernel_clone_args *kargs);
struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node);
struct task_struct *fork_idle(int);
struct mm_struct *copy_init_mm(void);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
extern long kernel_wait4(pid_t, int *, int, struct rusage *);
int kernel_wait(pid_t pid, int *stat);

extern void free_task(struct task_struct *tsk);



extern void sched_exec(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *get_task_struct(struct task_struct *t)
{
 refcount_inc(&t->usage);
 return t;
}

extern void __put_task_struct(struct task_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct(struct task_struct *t)
{
 if (refcount_dec_and_test(&t->usage))
  __put_task_struct(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct_many(struct task_struct *t, int nr)
{
 if (refcount_sub_and_test(nr, &t->usage))
  __put_task_struct(t);
}

void put_task_struct_rcu_user(struct task_struct *task);
# 145 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return t->stack_vm_area;
}
# 166 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}
# 10 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/cred.h" 1
# 13 "./include/linux/cred.h"
# 1 "./include/linux/key.h" 1
# 17 "./include/linux/key.h"
# 1 "./include/linux/sysctl.h" 1
# 30 "./include/linux/sysctl.h"
# 1 "./include/uapi/linux/sysctl.h" 1
# 35 "./include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "./include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
  size_t *lenp, loff_t *ppos);

int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dobool(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dou8vec_minmax(struct ctl_table *table, int write, void *buffer,
   size_t *lenp, loff_t *ppos);
int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
  size_t *, loff_t *);
int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 98 "./include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 116 "./include/linux/sysctl.h"
struct ctl_table {
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header {
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);
void do_sysctl_args(void);

extern int pwrsw_enabled;
extern int unaligned_enabled;
extern int unaligned_dump_stack;
extern int no_unaligned_warning;

extern struct ctl_table sysctl_mount_point[];
extern struct ctl_table random_table[];
extern struct ctl_table firmware_config_table[];
extern struct ctl_table epoll_table[];
# 246 "./include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 18 "./include/linux/key.h" 2


# 1 "./include/linux/assoc_array.h" 1
# 22 "./include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "./include/linux/key.h" 2







typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct net;
# 77 "./include/linux/key.h"
enum key_need_perm {
 KEY_NEED_UNSPECIFIED,
 KEY_NEED_VIEW,
 KEY_NEED_READ,
 KEY_NEED_WRITE,
 KEY_NEED_SEARCH,
 KEY_NEED_LINK,
 KEY_NEED_SETATTR,
 KEY_NEED_UNLINK,
 KEY_SYSADMIN_OVERRIDE,
 KEY_AUTHTOKEN_OVERRIDE,
 KEY_DEFER_PERM_CHECK,
};

struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct key_tag;
struct keyring_list;
struct keyring_name;

struct key_tag {
 struct callback_head rcu;
 refcount_t usage;
 bool removed;
};

struct keyring_index_key {

 unsigned long hash;
 union {
  struct {

   u16 desc_len;
   char desc[sizeof(long) - 2];




  };
  unsigned long x;
 };
 struct key_type *type;
 struct key_tag *domain_tag;
 const char *description;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 147 "./include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 189 "./include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };



 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time64_t expiry;
  time64_t revoked_at;
 };
 time64_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 239 "./include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   unsigned long hash;
   unsigned long len_desc;
   struct key_type *type;
   struct key_tag *domain_tag;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 274 "./include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 294 "./include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);
extern bool key_put_tag(struct key_tag *tag);
extern void key_remove_domain(struct key_tag *domain_tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *__key_get(struct key *key)
{
 refcount_inc(&key->usage);
 return key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key_tag(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag,
       const char *callout_info);

extern struct key *request_key_rcu(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         struct key_tag *domain_tag,
         const void *callout_info,
         size_t callout_len,
         void *aux);
# 340 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info)
{
 return request_key_tag(type, description, ((void *)0), callout_info);
}
# 379 "./include/linux/key.h"
extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_move(struct key *key,
      struct key *from_keyring,
      struct key *to_keyring,
      unsigned int flags);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description,
    bool recurse);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     enum key_need_perm need_perm);
extern void key_free_user_ns(struct user_namespace *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) short key_read_state(const struct key *key)
{

 return ({ typeof(*&key->state) ___p1 = ({ do { extern void __compiletime_assert_210(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)) || sizeof(*&key->state) == sizeof(long long))) __compiletime_assert_210(); } while (0); (*(const volatile typeof( _Generic((*&key->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&key->state))) *)&(*&key->state)); }); do { extern void __compiletime_assert_211(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)))) __compiletime_assert_211(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
}
# 457 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 480 "./include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct cred *new_cred);
extern void key_fsgid_changed(struct cred *new_cred);
extern void key_init(void);
# 14 "./include/linux/cred.h" 2



# 1 "./include/linux/sched/user.h" 1






# 1 "./include/linux/percpu_counter.h" 1
# 20 "./include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "./include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);
void percpu_counter_sync(struct percpu_counter *fbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{

 s64 ret = ({ do { extern void __compiletime_assert_212(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(fbc->count) == sizeof(char) || sizeof(fbc->count) == sizeof(short) || sizeof(fbc->count) == sizeof(int) || sizeof(fbc->count) == sizeof(long)) || sizeof(fbc->count) == sizeof(long long))) __compiletime_assert_212(); } while (0); (*(const volatile typeof( _Generic((fbc->count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (fbc->count))) *)&(fbc->count)); });

 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 181 "./include/linux/percpu_counter.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 8 "./include/linux/sched/user.h" 2






struct user_struct {
 refcount_t __count;

 struct percpu_counter epoll_watches;

 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;






 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "./include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[];
} ;
# 40 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 57 "./include/linux/cred.h"
extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
extern int groups_search(const struct group_info *, kgid_t);

extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 110 "./include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;




 struct user_struct *user;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) cred_init(void);
extern int set_cred_ucounts(struct cred *);
# 204 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds(const struct cred *cred)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_process_creds(void)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 229 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 248 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return ((void *)0);
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return ((void *)0);
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return cred;
}
# 281 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  validate_creds(cred);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 393 "./include/linux/cred.h"
extern struct user_namespace init_user_ns;
# 11 "./include/linux/sched/signal.h" 2
# 20 "./include/linux/sched/signal.h"
struct sighand_struct {
 spinlock_t siglock;
 refcount_t count;
 wait_queue_head_t signalfd_wqh;
 struct k_sigaction action[64];
};




struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 u64 ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 u64 expires;
 u64 incr;
};





struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 66 "./include/linux/sched/signal.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
};

struct multiprocess_signals {
 sigset_t signal;
 struct hlist_node node;
};
# 82 "./include/linux/sched/signal.h"
struct signal_struct {
 refcount_t sigcnt;
 atomic_t live;
 int nr_threads;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 struct hlist_head multiprocess;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;
# 122 "./include/linux/sched/signal.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;




 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;



 struct posix_cputimers posix_cputimers;


 struct pid *pids[PIDTYPE_MAX];





 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;
# 175 "./include/linux/sched/signal.h"
 seqlock_t stats_lock;
 u64 utime, stime, cutime, cstime;
 u64 gtime;
 u64 cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 203 "./include/linux/sched/signal.h"
 struct rlimit rlim[16];
# 220 "./include/linux/sched/signal.h"
 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;

 struct mm_struct *oom_mm;


 struct mutex cred_guard_mutex;





 struct rw_semaphore exec_update_lock;




} ;
# 259 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_set_stop_flags(struct signal_struct *sig,
      unsigned int flags)
{
 ({ int __ret_warn_on = !!(sig->flags & (0x00000004|0x00000008)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/sched/signal.h"), "i" (262), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != ((void *)0));
}

extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *task,
     sigset_t *mask, kernel_siginfo_t *info);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernel_dequeue_signal(void)
{
 struct task_struct *task = get_current();
 kernel_siginfo_t __info;
 int ret;

 spin_lock_irq(&task->sighand->siglock);
 ret = dequeue_signal(task, &task->blocked, &__info);
 spin_unlock_irq(&task->sighand->siglock);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_signal_stop(void)
{
 spin_lock_irq(&get_current()->sighand->siglock);
 if (get_current()->jobctl & (1UL << 16))
  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(&get_current()->pi_lock); } while (0); do { ({ int __ret_warn_on = !!(!((((0x0100 | 0x0004))) & (0x0004 | 0x0008 | 0x0040 | 0x0080))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/sched/signal.h"), "i" (296), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); get_current()->task_state_change = ({ __label__ __here; __here: (unsigned long)&&__here; }); } while (0); do { do { extern void __compiletime_assert_213(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_213(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = (((0x0100 | 0x0004))); } while (0); } while (0); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&get_current()->pi_lock, flags); } while (0); } while (0);
 spin_unlock_irq(&get_current()->sighand->siglock);

 schedule();
}






int force_sig_fault_to_task(int sig, int code, void *addr

 , struct task_struct *t);
int force_sig_fault(int sig, int code, void *addr
                                                                );
int send_sig_fault(int sig, int code, void *addr

 , struct task_struct *t);

int force_sig_mceerr(int code, void *, short);
int send_sig_mceerr(int code, void *, short, struct task_struct *);

int force_sig_bnderr(void *addr, void *lower, void *upper);
int force_sig_pkuerr(void *addr, u32 pkey);
int force_sig_perf(void *addr, u32 type, u64 sig_data);

int force_sig_ptrace_errno_trap(int errno, void *addr);
int force_sig_fault_trapno(int sig, int code, void *addr, int trapno);
int send_sig_fault_trapno(int sig, int code, void *addr, int trapno,
   struct task_struct *t);
int force_sig_seccomp(int syscall, int reason, bool force_coredump);

extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern void force_sigsegv(int sig);
extern int force_sig_info(struct kernel_siginfo *);
extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
    const struct cred *);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 2);
 return -513;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_sigpending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,2)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending(struct task_struct *p)
{





 if (__builtin_expect(!!(test_tsk_thread_flag(p, 9)), 0))
  return 1;
 return task_sigpending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fatal_signal_pending(struct task_struct *p)
{
 return task_sigpending(p) && __fatal_signal_pending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending_state(unsigned int state, struct task_struct *p)
{
 if (!(state & (0x0001 | 0x0100)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 0x0001) || __fatal_signal_pending(p);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_signal_pending(vm_fault_t fault_flags,
     struct pt_regs *regs)
{
 return __builtin_expect(!!((fault_flags & VM_FAULT_RETRY) && (fatal_signal_pending(get_current()) || ((((regs)->status & (0x00000100UL)) == 0) && signal_pending(get_current())))), 0);


}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);
extern void calculate_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0100 : 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0008 : 0);
}

void task_join_group_stop(struct task_struct *task);
# 445 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_restore_sigmask(void)
{
 set_ti_thread_flag(((struct thread_info *)get_current()), 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_restore_sigmask(struct task_struct *task)
{
 clear_tsk_thread_flag(task, 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_restore_sigmask(void)
{
 clear_ti_thread_flag(((struct thread_info *)get_current()), 4);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_tsk_restore_sigmask(struct task_struct *task)
{
 return test_tsk_thread_flag(task, 4);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_restore_sigmask(void)
{
 return test_ti_thread_flag(((struct thread_info *)get_current()), 4);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_clear_restore_sigmask(void)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)get_current()), 4);
}
# 504 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask_unless(bool interrupted)
{
 if (interrupted)
  ({ int __ret_warn_on = !!(!signal_pending(get_current())); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/sched/signal.h"), "i" (515), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 else
  restore_saved_sigmask();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __on_sig_stack(unsigned long sp)
{




 return sp > get_current()->sas_ss_sp &&
  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int on_sig_stack(unsigned long sp)
{
# 562 "./include/linux/sched/signal.h"
 if (get_current()->sas_ss_flags & (1U << 31))
  return 0;

 return __on_sig_stack(sp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sas_ss_flags(unsigned long sp)
{
 if (!get_current()->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000)), 0) && ! sas_ss_flags(sp))



  return get_current()->sas_ss_sp + get_current()->sas_ss_size;

 return sp;
}

extern void __cleanup_sighand(struct sighand_struct *);
extern void flush_itimer_signals(void);
# 606 "./include/linux/sched/signal.h"
extern bool current_is_single_threaded(void);
# 628 "./include/linux/sched/signal.h"
typedef int (*proc_visitor)(struct task_struct *p, void *data);
void walk_process_tree(struct task_struct *top, proc_visitor, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
{
 struct pid *pid;
 if (type == PIDTYPE_PID)
  pid = task_pid(task);
 else
  pid = task->signal->pids[type];
 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_tgid(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_TGID];
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_PGID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_session(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_SID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_nr_threads(struct task_struct *task)
{
 return task->signal->nr_threads;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *next_thread(const struct task_struct *p)
{
 return ({ void *__mptr = (void *)(({ do { extern void __compiletime_assert_214(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_214(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); })); do { extern void __compiletime_assert_215(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(({ do { extern void __compiletime_assert_214(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_214(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(((struct task_struct *)0)->thread_group)) && !__builtin_types_compatible_p(typeof(*(({ do { extern void __compiletime_assert_214(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_214(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(void))))) __compiletime_assert_215(); } while (0); ((struct task_struct *)(__mptr - __builtin_offsetof(struct task_struct, thread_group))); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}




extern bool thread_group_exited(struct pid *pid);

extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
       unsigned long *flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sighand_struct *lock_task_sighand(struct task_struct *task,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(task, flags);
 (void)(ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_task_sighand(struct task_struct *task,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&task->sighand->siglock, *flags);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_assert_task_sighand_held(struct task_struct *task) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { extern void __compiletime_assert_216(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long long))) __compiletime_assert_216(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_cur), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_cur))) *)&(task->signal->rlim[limit].rlim_cur)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit_max(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { extern void __compiletime_assert_217(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_max) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long long))) __compiletime_assert_217(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_max), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_max))) *)&(task->signal->rlim[limit].rlim_max)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit(unsigned int limit)
{
 return task_rlimit(get_current(), limit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}
# 7 "./include/linux/rcuwait.h" 2
# 16 "./include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcuwait_active(struct rcuwait *w)
{
 return !!({ typeof(*(w->task)) *_________p1 = (typeof(*(w->task)) *)({ do { extern void __compiletime_assert_218(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_218(); } while (0); (*(const volatile typeof( _Generic(((w->task)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((w->task)))) *)&((w->task))); }); ; ((typeof(*(w->task)) *)(_________p1)); });
}

extern int rcuwait_wake_up(struct rcuwait *w);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prepare_to_rcuwait(struct rcuwait *w)
{
 do { uintptr_t _r_a_p__v = (uintptr_t)(get_current()); ; if (__builtin_constant_p(get_current()) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_219(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_219(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_220(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_220(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_221(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_221(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void finish_rcuwait(struct rcuwait *w)
{
        do { uintptr_t _r_a_p__v = (uintptr_t)(((void *)0)); ; if (__builtin_constant_p(((void *)0)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_222(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_222(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_223(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_223(); } while (0); __asm__ __volatile__ ("fence " "rw" "," "w" : : : "memory"); do { do { extern void __compiletime_assert_224(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_224(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { ({ int __ret_warn_on = !!((((0x0000)) & (0x0004 | 0x0008 | 0x0040 | 0x0080))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/rcuwait.h"), "i" (53), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); get_current()->task_state_change = ({ __label__ __here; __here: (unsigned long)&&__here; }); } while (0); do { do { extern void __compiletime_assert_225(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_225(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = ((0x0000)); } while (0); } while (0); } while (0);
}
# 8 "./include/linux/percpu-rwsem.h" 2

# 1 "./include/linux/rcu_sync.h" 1
# 17 "./include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "./include/linux/rcu_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { } while (0 && (!rcu_read_lock_any_held()));

 return !({ do { extern void __compiletime_assert_226(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rsp->gp_state) == sizeof(char) || sizeof(rsp->gp_state) == sizeof(short) || sizeof(rsp->gp_state) == sizeof(int) || sizeof(rsp->gp_state) == sizeof(long)) || sizeof(rsp->gp_state) == sizeof(long long))) __compiletime_assert_226(); } while (0); (*(const volatile typeof( _Generic((rsp->gp_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rsp->gp_state))) *)&(rsp->gp_state)); });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "./include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rcuwait writer;
 wait_queue_head_t waiters;
 atomic_t block;



};
# 45 "./include/linux/percpu-rwsem.h"
extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { __might_sleep("include/linux/percpu-rwsem.h", 49, 0); do { } while (0); } while (0);

 do { } while (0);

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
# 62 "./include/linux/percpu-rwsem.h"
 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  __percpu_down_read(sem, false);




 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 bool ret = true;

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ret = __percpu_down_read(sem, true);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);





 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { } while (0);

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1)) {
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {




  __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");





  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  rcuwait_wake_up(&sem->writer);
 }
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 141 "./include/linux/percpu-rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}
# 34 "./include/linux/fs.h" 2

# 1 "./include/linux/delayed_call.h" 1
# 10 "./include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 36 "./include/linux/fs.h" 2

# 1 "./include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "./include/linux/fs.h" 2
# 1 "./include/linux/ioprio.h" 1





# 1 "./include/linux/sched/rt.h" 1






struct task_struct;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != ((void *)0);
}
# 58 "./include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "./include/linux/ioprio.h" 2
# 1 "./include/linux/iocontext.h" 1








enum {
 ICQ_EXITED = 1 << 2,
 ICQ_DESTROYED = 1 << 3,
};
# 73 "./include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 124 "./include/linux/iocontext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_io_context_active(struct io_context *ioc)
{
 ({ int __ret_warn_on = !!(atomic_long_read(&ioc->refcount) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/iocontext.h"), "i" (126), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(atomic_read(&ioc->active_ref) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/iocontext.h"), "i" (127), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ int __ret_warn_on = !!(atomic_read(&ioc->nr_tasks) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/iocontext.h"), "i" (136), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;

void put_io_context(struct io_context *ioc);
void put_io_context_active(struct io_context *ioc);
void exit_io_context(struct task_struct *task);
struct io_context *get_task_io_context(struct task_struct *task,
           gfp_t gfp_flags, int node);
# 8 "./include/linux/ioprio.h" 2

# 1 "./include/uapi/linux/ioprio.h" 1
# 27 "./include/uapi/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};







enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 10 "./include/linux/ioprio.h" 2
# 19 "./include/linux/ioprio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ioprio_valid(unsigned short ioprio)
{
 unsigned short class = (((ioprio) >> 13) & 0x07);

 return class > IOPRIO_CLASS_NONE && class <= IOPRIO_CLASS_IDLE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_current_ioprio(void)
{
 struct io_context *ioc = get_current()->io_context;

 if (ioc)
  return ioc->ioprio;
 return ((((IOPRIO_CLASS_BE) & 0x07) << 13) | ((4) & ((1UL << 13) - 1)));
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);


extern int ioprio_check_cap(int ioprio);
# 39 "./include/linux/fs.h" 2
# 1 "./include/linux/fs_types.h" 1
# 71 "./include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 40 "./include/linux/fs.h" 2


# 1 "./include/linux/mount.h" 1
# 20 "./include/linux/mount.h"
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct fs_context;
# 71 "./include/linux/mount.h"
struct vfsmount {
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;
 struct user_namespace *mnt_userns;
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
{

 return ({ typeof(*&mnt->mnt_userns) ___p1 = ({ do { extern void __compiletime_assert_227(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)) || sizeof(*&mnt->mnt_userns) == sizeof(long long))) __compiletime_assert_227(); } while (0); (*(const volatile typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) *)&(*&mnt->mnt_userns)); }); do { extern void __compiletime_assert_228(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)))) __compiletime_assert_228(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
}

struct file;
struct path;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern struct vfsmount *mnt_clone_internal(const struct path *path);
extern bool __mnt_is_readonly(struct vfsmount *mnt);
extern bool mnt_may_suid(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(const struct path *path);
extern int __mnt_want_write(struct vfsmount *);
extern void __mnt_drop_write(struct vfsmount *);

struct file_system_type;
extern struct vfsmount *fc_mount(struct fs_context *fc);
extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, const char *name,
          void *data);
extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
         struct file_system_type *type,
         const char *name, void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(const char *name);

extern unsigned int sysctl_mount_max;

extern bool path_is_mountpoint(const struct path *path);

extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
# 43 "./include/linux/fs.h" 2



# 1 "./include/uapi/linux/fs.h" 1
# 14 "./include/uapi/linux/fs.h"
# 1 "./include/uapi/linux/ioctl.h" 1




# 1 "./arch/riscv/include/generated/uapi/asm/ioctl.h" 1
# 1 "./include/asm-generic/ioctl.h" 1




# 1 "./include/uapi/asm-generic/ioctl.h" 1
# 6 "./include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "./arch/riscv/include/generated/uapi/asm/ioctl.h" 2
# 6 "./include/uapi/linux/ioctl.h" 2
# 15 "./include/uapi/linux/fs.h" 2
# 54 "./include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 287 "./include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 47 "./include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct fiemap_extent_info;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_spec;
struct fileattr;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 222 "./include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};




# 1 "./include/linux/quota.h" 1
# 42 "./include/linux/quota.h"
# 1 "./include/uapi/linux/dqblk_xfs.h" 1
# 53 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;


 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s8 d_itimer_hi;
 __s8 d_btimer_hi;
 __s8 d_rtbtimer_hi;
 __s8 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 159 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 202 "./include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u16 qs_rtbwarnlimit;
 __u16 qs_pad3;
 __u32 qs_pad4;
 __u64 qs_pad2[7];
};
# 43 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v1.h" 1
# 44 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v2.h" 1








# 1 "./include/linux/dqblk_qtree.h" 1
# 18 "./include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "./include/linux/dqblk_v2.h" 2
# 45 "./include/linux/quota.h" 2



# 1 "./include/linux/projid.h" 1
# 17 "./include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 49 "./include/linux/quota.h" 2
# 1 "./include/uapi/linux/quota.h" 1
# 90 "./include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "./include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "./include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "./include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "./include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/quota.h"), "i" (114), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/quota.h"), "i" (141), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "./include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int info_dirty(struct mem_dqinfo *info)
{
 return arch_test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "./include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "./include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 464 "./include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 491 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { extern void __compiletime_assert_229(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(flag) == 0 || (((flag) & ((flag) - 1)) != 0)"))); if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_229(); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype)
{
 return;
}


struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 244 "./include/linux/fs.h" 2
# 277 "./include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 290 "./include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;
struct readahead_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 325 "./include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 union {
  unsigned int ki_cookie;
  struct wait_page_queue *ki_waitq;
 };


};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 359 "./include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);
 void (*readahead)(struct readahead_control *);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 459 "./include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 struct rw_semaphore invalidate_lock;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;




 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;
# 494 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i_mmap_trylock_write(struct address_space *mapping)
{
 return down_write_trylock(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_write_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ do { extern void __compiletime_assert_230(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(char) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(short) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(int) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long)) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long long))) __compiletime_assert_230(); } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == ((void *)0));
}
# 551 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 589 "./include/linux/fs.h"
struct posix_acl;
# 598 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;






 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;
# 688 "./include/linux/fs.h"
 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;
# 732 "./include/linux/fs.h"
 void *i_private;
} ;

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 774 "./include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock(struct address_space *mapping)
{
 down_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock(struct address_space *mapping)
{
 up_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock_shared(struct address_space *mapping)
{
 down_read(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_invalidate_trylock_shared(
     struct address_space *mapping)
{
 return down_read_trylock(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock_shared(
     struct address_space *mapping)
{
 up_read(&mapping->invalidate_lock);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);

void filemap_invalidate_lock_two(struct address_space *mapping1,
     struct address_space *mapping2);
void filemap_invalidate_unlock_two(struct address_space *mapping1,
       struct address_space *mapping2);
# 875 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t i_size_read(const struct inode *inode)
{
# 894 "./include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 916 "./include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};
# 947 "./include/linux/fs.h"
struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;
 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;




 void *private_data;



 struct hlist_head *f_ep;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
 errseq_t f_sb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1056 "./include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
 bool (*lm_breaker_owns_lease)(struct file_lock *);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);


# 1 "./include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1093 "./include/linux/fs.h" 2
# 1111 "./include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1163 "./include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);

struct notifier_block;
extern int lease_register_notifier(struct notifier_block *);
extern void lease_unregister_notifier(struct notifier_block *);

struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1348 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1448 "./include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;



 const struct xattr_handler **s_xattr;
# 1498 "./include/linux/fs.h"
 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;





 atomic_long_t s_fsnotify_connectors;


 int s_readonly_remount;


 errseq_t s_wb_err;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << 6))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}
# 1637 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return make_kuid(mnt_userns, __kuid_val(kuid));
}
# 1651 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return make_kgid(mnt_userns, __kgid_val(kgid));
}
# 1665 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kuid_into_mnt(mnt_userns, inode->i_uid);
}
# 1679 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kgid_into_mnt(mnt_userns, inode->i_gid);
}
# 1693 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return (kuid_t){ from_kuid(mnt_userns, kuid) };
}
# 1707 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return (kgid_t){ from_kgid(mnt_userns, kgid) };
}
# 1725 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t mapped_fsuid(struct user_namespace *mnt_userns)
{
 return kuid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsuid; })));
}
# 1742 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t mapped_fsgid(struct user_namespace *mnt_userns)
{
 return kgid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsgid; })));
}
# 1755 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsuid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_uid = mapped_fsuid(mnt_userns);
}
# 1769 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsgid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_gid = mapped_fsgid(mnt_userns);
}
# 1786 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fsuidgid_has_mapping(struct super_block *sb,
     struct user_namespace *mnt_userns)
{
 struct user_namespace *s_user_ns = sb->s_user_ns;

 return kuid_has_mapping(s_user_ns, mapped_fsuid(mnt_userns)) &&
        kgid_has_mapping(s_user_ns, mapped_fsgid(mnt_userns));
}

extern struct timespec64 current_time(struct inode *inode);
# 1805 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sb_end_write(struct super_block *sb, int level)
{
 percpu_up_read(sb->s_writers.rw_sem + level-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sb_start_write(struct super_block *sb, int level)
{
 percpu_down_read(sb->s_writers.rw_sem + level - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __sb_start_write_trylock(struct super_block *sb, int level)
{
 return percpu_down_read_trylock(sb->s_writers.rw_sem + level - 1);
}
# 1832 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1844 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1856 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1880 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_WRITE);
}
# 1909 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1927 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_FS);
}

bool inode_owner_or_capable(struct user_namespace *mnt_userns,
       const struct inode *inode);




int vfs_create(struct user_namespace *, struct inode *,
        struct dentry *, umode_t, bool);
int vfs_mkdir(struct user_namespace *, struct inode *,
       struct dentry *, umode_t);
int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
              umode_t, dev_t);
int vfs_symlink(struct user_namespace *, struct inode *,
  struct dentry *, const char *);
int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
      struct dentry *, struct inode **);
int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
        struct inode **);
# 1968 "./include/linux/fs.h"
struct renamedata {
 struct user_namespace *old_mnt_userns;
 struct inode *old_dir;
 struct dentry *old_dentry;
 struct user_namespace *new_mnt_userns;
 struct inode *new_dir;
 struct dentry *new_dentry;
 struct inode **delegated_inode;
 unsigned int flags;
} ;

int vfs_rename(struct renamedata *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_whiteout(struct user_namespace *mnt_userns,
          struct inode *dir, struct dentry *dentry)
{
 return vfs_mknod(mnt_userns, dir, dentry, 0020000 | 0,
    0);
}

struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
      struct dentry *dentry, umode_t mode, int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

int vfs_fchown(struct file *file, uid_t user, gid_t group);
int vfs_fchmod(struct file *file, umode_t mode);
int vfs_utimes(const struct path *path, struct timespec64 *times);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
# 2011 "./include/linux/fs.h"
void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
        const struct inode *dir, umode_t mode);
extern bool may_open_dev(const struct path *path);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};
# 2069 "./include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, bool spin);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct user_namespace *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int, bool);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct user_namespace *, struct inode *,struct dentry *,
         umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
   const char *);
 int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t,dev_t);
 int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct user_namespace *, struct dentry *,
   struct iattr *);
 int (*getattr) (struct user_namespace *, const struct path *,
   struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct user_namespace *, struct inode *,
   struct dentry *, umode_t);
 int (*set_acl)(struct user_namespace *, struct inode *,
         struct posix_acl *, int);
 int (*fileattr_set)(struct user_namespace *mnt_userns,
       struct dentry *dentry, struct fileattr *fa);
 int (*fileattr_get)(struct dentry *dentry, struct fileattr *fa);
} __attribute__((__aligned__((1 << 6))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);





 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 2269 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2299 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
       struct inode *inode)
{
 return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src,
          struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = kiocb_src->ki_flags,
  .ki_hint = kiocb_src->ki_hint,
  .ki_ioprio = kiocb_src->ki_ioprio,
  .ki_pos = kiocb_src->ki_pos,
 };
}
# 2449 "./include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}
# 2469 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_dirtytime_only(struct inode *inode)
{
 return (inode->i_state & ((1 << 11) | (1 << 3) |
      (1 << 5) | (1 << 4))) == (1 << 11);
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;
# 2522 "./include/linux/fs.h"
 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_spec *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key invalidate_lock_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2589 "./include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_lease(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_layout(struct inode *inode, bool wait)
{
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2713 "./include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *file_mnt_user_ns(struct file *file)
{
 return mnt_user_ns(file->f_path.mnt);
}
extern long vfs_truncate(const struct path *, loff_t);
int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
  unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(const struct path *,
       const char *, int, umode_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_open_root_mnt(struct vfsmount *mnt,
       const char *name, int flags, umode_t mode)
{
 return file_open_root(&(struct path){.mnt = mnt, .dentry = mnt->mnt_root},
         name, flags, mode);
}
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname_uflags(const char *, int);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;




extern struct super_block *blockdev_superblock;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return 1 && sb == blockdev_superblock;
}

void emergency_thaw_all(void);
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;
# 2791 "./include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}

extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

void invalidate_mapping_pagevec(struct address_space *mapping,
    unsigned long start, unsigned long end,
    unsigned long *nr_pagevec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern bool filemap_range_needs_writeback(struct address_space *,
       loff_t lstart, loff_t lend);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);
int filemap_fdatawrite_wbc(struct address_space *mapping,
      struct writeback_control *wbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_write_and_wait(struct address_space *mapping)
{
 return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2893 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2910 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2923 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}
# 2935 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t file_sample_sb_err(struct file *file)
{
 return errseq_sample(&file->f_path.dentry->d_sb->s_wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);


extern int bmap(struct inode *inode, sector_t *block);







int notify_change(struct user_namespace *, struct dentry *,
    struct iattr *, struct inode **);
int inode_permission(struct user_namespace *, struct inode *, int);
int generic_permission(struct user_namespace *, struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_permission(struct file *file, int mask)
{
 return inode_permission(file_mnt_user_ns(file),
    file_inode(file), mask);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_permission(const struct path *path, int mask)
{
 return inode_permission(mnt_user_ns(path->mnt),
    d_inode(path->dentry), mask);
}
int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
     struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_wrong_type(const struct inode *inode, umode_t mode)
{
 return (inode->i_mode ^ mode) & 00170000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 sb_start_write(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return sb_start_write_trylock(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 3046 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_dec(struct inode *inode)
{
 do { if (__builtin_expect(!!(!atomic_read(&inode->i_readcount)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/fs.h"), "i" (3072), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 atomic_dec(&inode->i_readcount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 3089 "./include/linux/fs.h"
extern int do_pipe_flags(int *, int);

extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}
extern void d_mark_dontcache(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
        int (*)(struct inode *, void *), void *);
extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);
# 3166 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zero_ino(ino_t ino)
{
 return (u32)ino == 0;
}

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);

extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_write_check_limits(struct file *file, loff_t pos,
  loff_t *count);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
  ssize_t already_read);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
      struct iov_iter *iter);
ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
       struct iov_iter *iter);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3286 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3298 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}




void dio_warn_stale_pagecache(struct file *filp);

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
void generic_fill_statx_attr(struct inode *inode, struct kstat *stat);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
  int flags);
int vfs_fstat(int fd, struct kstat *stat);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_fstatat(-100, filename, stat, 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_fstatat(-100, name, stat, 0x100);
}

extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct user_namespace *, struct dentry *,
     struct iattr *);
extern int simple_getattr(struct user_namespace *, const struct path *,
     struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct user_namespace *, struct inode *,
    struct dentry *, struct inode *, struct dentry *,
    unsigned int);
extern void simple_recursive_removal(struct dentry *,
                              void (*callback)(struct dentry *));
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern const struct address_space_operations ram_aops;
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);

extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





int may_setattr(struct user_namespace *mnt_userns, struct inode *inode,
  unsigned int ia_valid);
int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
void setattr_copy(struct user_namespace *, struct inode *inode,
    const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_dax(const struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!0 || !vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= ( int) (( __kernel_rwf_t)0x00000010);
 if (file->f_flags & 00040000)
  res |= (1 << 17);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & (1 << 0))))
  res |= ( int) (( __kernel_rwf_t)0x00000002);
 if (file->f_flags & 04000000)
  res |= ( int) (( __kernel_rwf_t)0x00000004);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 int kiocb_flags = 0;


 do { extern void __compiletime_assert_231(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(__force int) RWF_SUPPORTED & IOCB_EVENTFD"))); if (!(!(( int) ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)) & (1 << 16)))) __compiletime_assert_231(); } while (0);

 if (!flags)
  return 0;
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  kiocb_flags |= (1 << 20);
 }
 kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
 if (flags & (( __kernel_rwf_t)0x00000004))
  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);

 ki->ki_flags |= kiocb_flags;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3575 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) list_bdev_fs_names(char *buf, size_t size);
# 3606 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_sticky(struct user_namespace *mnt_userns,
          struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(mnt_userns, dir, inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= (1 << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & (1 << 4));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & (1 << 4));
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 9 "./include/linux/huge_mm.h" 2

vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
void huge_pmd_set_accessed(struct vm_fault *vmf);
int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
    struct vm_area_struct *vma);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)
{
}


vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf);
struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr, pmd_t *pmd,
       unsigned int flags);
bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
      pmd_t *pmd, unsigned long addr, unsigned long next);
int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr);
int zap_huge_pud(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud,
   unsigned long addr);
bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
     unsigned long new_addr, pmd_t *old_pmd, pmd_t *new_pmd);
int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr,
      pgprot_t newprot, unsigned long cp_flags);
vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 55 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_pfn_pmd(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pmd_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}
vm_fault_t vmf_insert_pfn_pud_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 74 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_pfn_pud(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pud_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}

enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_NEVER_DAX,
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,
};

struct kobject;
struct kobj_attribute;

ssize_t single_hugepage_flag_store(struct kobject *kobj,
       struct kobj_attribute *attr,
       const char *buf, size_t count,
       enum transparent_hugepage_flag flag);
ssize_t single_hugepage_flag_show(struct kobject *kobj,
      struct kobj_attribute *attr, char *buf,
      enum transparent_hugepage_flag flag);
extern struct kobj_attribute shmem_enabled_attr;
# 339 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *thp_head(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/huge_mm.h"), "i" (341), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int thp_order(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/huge_mm.h"), "i" (347), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thp_nr_pages(struct page *page)
{
 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/huge_mm.h"), "i" (353), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transparent_hugepage_active(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_suitable(struct vm_area_struct *vma,
  unsigned long haddr)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_enabled(struct vm_area_struct *vma,
       unsigned long vm_flags)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prep_transhuge_page(struct page *page) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_transparent_hugepage(struct page *page)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
can_split_huge_page(struct page *page, int *pextra_pins)
{
 do { extern void __compiletime_assert_232(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_232(); } while (0);
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
split_huge_page_to_list(struct page *page, struct list_head *list)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int split_huge_page(struct page *page)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void deferred_split_huge_page(struct page *page) {}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
  unsigned long address, bool freeze, struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void split_huge_pmd_address(struct vm_area_struct *vma,
  unsigned long address, bool freeze, struct page *page) {}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice)
{
 do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/huge_mm.h"), "i" (420), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_adjust_trans_huge(struct vm_area_struct *vma,
      unsigned long start,
      unsigned long end,
      long adjust_next)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_swap_pmd(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t do_huge_pmd_numa_page(struct vm_fault *vmf)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_page(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pmd(pmd_t pmd)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pud(pud_t pud)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_put_huge_zero_page(struct mm_struct *mm)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *follow_devmap_pmd(struct vm_area_struct *vma,
 unsigned long addr, pmd_t *pmd, int flags, struct dev_pagemap **pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *follow_devmap_pud(struct vm_area_struct *vma,
 unsigned long addr, pud_t *pud, int flags, struct dev_pagemap **pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_migration_supported(void)
{
 return false;
}
# 493 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long thp_size(struct page *page)
{
 return ((1UL) << (12)) << thp_order(page);
}
# 728 "./include/linux/mm.h" 2
# 745 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int put_page_testzero(struct page *page)
{
 do { if (__builtin_expect(!!(page_ref_count(page) == 0), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "page_ref_count(page) == 0"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (747), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return page_ref_dec_and_test(page);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);
# 789 "./include/linux/mm.h"
extern bool is_vmalloc_addr(const void *x);
extern int is_vmalloc_or_module_addr(const void *x);
# 802 "./include/linux/mm.h"
extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmalloc(size_t size, gfp_t flags)
{
 return kvmalloc_node(size, flags, (-1));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvzalloc_node(size_t size, gfp_t flags, int node)
{
 return kvmalloc_node(size, flags | (( gfp_t)0x100u), node);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvzalloc(size_t size, gfp_t flags)
{
 return kvmalloc(size, flags | (( gfp_t)0x100u));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return kvmalloc(bytes, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvcalloc(size_t n, size_t size, gfp_t flags)
{
 return kvmalloc_array(n, size, flags | (( gfp_t)0x100u));
}

extern void *kvrealloc(const void *p, size_t oldsize, size_t newsize,
  gfp_t flags);
extern void kvfree(const void *addr);
extern void kvfree_sensitive(const void *addr, size_t len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_mapcount(struct page *head)
{
 return atomic_read(compound_mapcount_ptr(head)) + 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_mapcount(struct page *page)
{
 do { if (__builtin_expect(!!(!PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageCompound(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (848), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page = ((typeof(page))_compound_head(page));
 return head_compound_mapcount(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);
# 873 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mapcount(struct page *page)
{
 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int total_mapcount(struct page *page)
{
 return page_mapcount(page);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_trans_huge_mapcount(struct page *page,
        int *total_mapcount)
{
 int mapcount = page_mapcount(page);
 if (total_mapcount)
  *total_mapcount = mapcount;
 return mapcount;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = ((mem_map + ((((((({ unsigned long _x = (unsigned long)(x); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) - (riscv_pfn_base))));

 return ((typeof(page))_compound_head(page));
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
void copy_huge_page(struct page *dst, struct page *src);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,






 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[NR_COMPOUND_DTORS];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 do { if (__builtin_expect(!!(compound_dtor >= NR_COMPOUND_DTORS), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "compound_dtor >= NR_COMPOUND_DTORS"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (936), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_compound_page(struct page *page)
{
 do { if (__builtin_expect(!!(page[1].compound_dtor >= NR_COMPOUND_DTORS), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "page[1].compound_dtor >= NR_COMPOUND_DTORS"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (942), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 compound_page_dtors[page[1].compound_dtor](page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hpage_pincount_available(struct page *page)
{





 page = ((typeof(page))_compound_head(page));
 return PageCompound(page) && compound_order(page) > 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_pincount(struct page *head)
{
 return atomic_read(compound_pincount_ptr(head));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_pincount(struct page *page)
{
 do { if (__builtin_expect(!!(!hpage_pincount_available(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!hpage_pincount_available(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (971), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page = ((typeof(page))_compound_head(page));
 return head_compound_pincount(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
 page[1].compound_nr = 1U << order;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long compound_nr(struct page *page)
{
 if (!PageHead(page))
  return 1;
 return page[1].compound_nr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_size(struct page *page)
{
 return ((1UL) << (12)) << compound_order(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int page_shift(struct page *page)
{
 return (12) + compound_order(page);
}

void free_compound_page(struct page *page);
# 1011 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(vma->vm_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

vm_fault_t do_set_pmd(struct vm_fault *vmf, struct page *page);
void do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr);

vm_fault_t finish_fault(struct vm_fault *vmf);
vm_fault_t finish_mkwrite_fault(struct vm_fault *vmf);
# 1128 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type page_zonenum(const struct page *page)
{
 do { kcsan_set_access_mask(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0))); __kcsan_check_access(&(page->flags), sizeof(page->flags), (1 << 3)); kcsan_set_access_mask(0); kcsan_atomic_next(1); } while (0);
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}
# 1142 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_device_page(const struct page *page)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_movable_page(const struct page *page)
{
 return page_zonenum(page) == ZONE_MOVABLE;
}
# 1176 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_devmap_managed(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_devmap_managed_page(struct page *page)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_device_private_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PRIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pci_p2pdma_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PCI_P2PDMA;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));




 do { if (__builtin_expect(!!(((unsigned int) page_ref_count(page) + 127u <= 127u)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "((unsigned int) page_ref_count(page) + 127u <= 127u)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (1213), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page_ref_inc(page);
}

bool __attribute__((__warn_unused_result__)) try_grab_page(struct page *page, unsigned int flags);
struct page *try_grab_compound_head(struct page *page, int refs,
        unsigned int flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool try_get_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 if (({ int __ret_warn_on = !!(page_ref_count(page) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (1225), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 page_ref_inc(page);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));







 if (page_is_devmap_managed(page)) {
  put_devmap_managed_page(page);
  return;
 }

 if (put_page_testzero(page))
  __put_page(page);
}
# 1283 "./include/linux/mm.h"
void unpin_user_page(struct page *page);
void unpin_user_pages_dirty_lock(struct page **pages, unsigned long npages,
     bool make_dirty);
void unpin_user_page_range_dirty_lock(struct page *page, unsigned long npages,
          bool make_dirty);
void unpin_user_pages(struct page **pages, unsigned long npages);
# 1316 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_maybe_dma_pinned(struct page *page)
{
 if (hpage_pincount_available(page))
  return compound_pincount(page) > 0;
# 1329 "./include/linux/mm.h"
 return ((unsigned int)page_ref_count(((typeof(page))_compound_head(page)))) >=
  (1U << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_cow_mapping(vm_flags_t flags)
{
 return (flags & (0x00000008 | 0x00000020)) == 0x00000020;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_needs_cow_for_dma(struct vm_area_struct *vma,
       struct page *page)
{
 if (!is_cow_mapping(vma->vm_flags))
  return false;

 if (!arch_test_bit(28, &vma->vm_mm->flags))
  return false;

 return page_maybe_dma_pinned(page);
}
# 1366 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 0) < ((((sizeof(unsigned long)*8) - 0) - 0) - 2))? (((sizeof(unsigned long)*8) - 0) - 0) : ((((sizeof(unsigned long)*8) - 0) - 0) - 2)) * ((0 + 2) != 0))) & ((1UL << (0 + 2)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_to_nid(const struct page *page)
{
 struct page *p = (struct page *)page;

 return (({ do { if (__builtin_expect(!!(PagePoisoned(p)), 0)) { dump_page(p, "VM_BUG_ON_PAGE(" "PagePoisoned(p)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (1378), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0); p; })->flags >> ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0))) & ((1UL << 0) - 1);
}
# 1447 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_xchg_last(struct page *page, int cpupid)
{
 return page_to_nid(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_last(struct page *page)
{
 return page_to_nid(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_nid(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_pid(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_cpu(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_pid_to_cpupid(int nid, int pid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_pid_unset(int cpupid)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_cpupid_reset_last(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_match_pid(struct task_struct *task, int cpupid)
{
 return false;
}
# 1529 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_reset(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *page_zone(const struct page *page)
{
 return &NODE_DATA(page_to_nid(page))->node_zones[page_zonenum(page)];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *page_pgdat(const struct page *page)
{
 return NODE_DATA(page_to_nid(page));
}
# 1564 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pinnable_page(struct page *page)
{
 return !(is_zone_movable_page(page) || false) ||
  is_zero_pfn(((unsigned long)((page) - mem_map) + (riscv_pfn_base)));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 0) - 1) << ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0)));
 page->flags |= (node & ((1UL << 0) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}




# 1 "./include/linux/vmstat.h" 1







# 1 "./include/linux/vm_event_item.h" 1
# 25 "./include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA32, PGALLOC_NORMAL, PGALLOC_MOVABLE,
  ALLOCSTALL_DMA32, ALLOCSTALL_NORMAL, ALLOCSTALL_MOVABLE,
  PGSCAN_SKIP_DMA32, PGSCAN_SKIP_NORMAL, PGSCAN_SKIP_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL,
  PGREUSE,
  PGSTEAL_KSWAPD,
  PGSTEAL_DIRECT,
  PGDEMOTE_KSWAPD,
  PGDEMOTE_DIRECT,
  PGSCAN_KSWAPD,
  PGSCAN_DIRECT,
  PGSCAN_DIRECT_THROTTLE,
  PGSCAN_ANON,
  PGSCAN_FILE,
  PGSTEAL_ANON,
  PGSTEAL_FILE,



  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
  OOM_KILL,
# 61 "./include/linux/vm_event_item.h"
  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,
  THP_MIGRATION_SUCCESS,
  THP_MIGRATION_FAIL,
  THP_MIGRATION_SPLIT,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,
  KCOMPACTD_WAKE,
  KCOMPACTD_MIGRATE_SCANNED, KCOMPACTD_FREE_SCANNED,
# 80 "./include/linux/vm_event_item.h"
  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,
# 110 "./include/linux/vm_event_item.h"
  BALLOON_INFLATE,
  BALLOON_DEFLATE,

  BALLOON_MIGRATE,
# 127 "./include/linux/vm_event_item.h"
  SWAP_RA,
  SWAP_RA_HIT,





  NR_VM_EVENT_ITEMS
};
# 9 "./include/linux/vmstat.h" 2

# 1 "./include/linux/static_key.h" 1
# 11 "./include/linux/vmstat.h" 2


extern int sysctl_stat_interval;
# 24 "./include/linux/vmstat.h"
struct reclaim_stat {
 unsigned nr_dirty;
 unsigned nr_unqueued_dirty;
 unsigned nr_congested;
 unsigned nr_writeback;
 unsigned nr_immediate;
 unsigned nr_pageout;
 unsigned nr_activate[2];
 unsigned nr_ref_keep;
 unsigned nr_unmap_fail;
 unsigned nr_lazyfree_fail;
};

enum writeback_stat_item {
 NR_DIRTY_THRESHOLD,
 NR_DIRTY_BG_THRESHOLD,
 NR_VM_WRITEBACK_STAT_ITEMS,
};
# 54 "./include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 140 "./include/linux/vmstat.h"
extern atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];
extern atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS];
extern atomic_long_t vm_numa_event[0];
# 165 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_zone_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_page_state_add(long x, struct pglist_data *pgdat,
     enum node_stat_item item)
{
 atomic_long_add(x, &pgdat->vm_stat[item]);
 atomic_long_add(x, &vm_node_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_zone_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_zone_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long global_node_page_state_pages(enum node_stat_item item)
{
 long x = atomic_long_read(&vm_node_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_node_page_state(enum node_stat_item item)
{
 (void)({ int __ret_warn_on = !!(vmstat_item_in_bytes(item)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/vmstat.h"), "i" (202), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return global_node_page_state_pages(item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->per_cpu_zonestats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((zone->per_cpu_zonestats))) *)((zone->per_cpu_zonestats))); (typeof((typeof(*((zone->per_cpu_zonestats))) *)((zone->per_cpu_zonestats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}
# 270 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fold_vm_numa_events(void)
{
}



void __mod_zone_page_state(struct zone *, enum zone_stat_item item, long);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void __mod_node_page_state(struct pglist_data *, enum node_stat_item item, long);
void __inc_node_page_state(struct page *, enum node_stat_item);
void __dec_node_page_state(struct page *, enum node_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
void inc_node_page_state(struct page *, enum node_stat_item);
void dec_node_page_state(struct page *, enum node_stat_item);

extern void inc_node_state(struct pglist_data *, enum node_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_node_state(struct pglist_data *, enum node_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_node_state(struct pglist_data *, enum node_stat_item);

void quiet_vmstat(void);
void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

struct ctl_table;
int vmstat_refresh(struct ctl_table *, int write, void *buffer, size_t *lenp,
  loff_t *ppos);

void drain_zonestat(struct zone *zone, struct per_cpu_zonestat *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
# 418 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (false)
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *zone_stat_name(enum zone_stat_item item)
{
 return vmstat_text[item];
}
# 441 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *node_stat_name(enum node_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      0 +
      item];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *lru_list_name(enum lru_list lru)
{
 return node_stat_name(NR_LRU_BASE + lru) + 3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *writeback_stat_name(enum writeback_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      0 +
      NR_VM_NODE_STAT_ITEMS +
      item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *vm_event_name(enum vm_event_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      0 +
      NR_VM_NODE_STAT_ITEMS +
      NR_VM_WRITEBACK_STAT_ITEMS +
      item];
}
# 502 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_lruvec_state(struct lruvec *lruvec,
          enum node_stat_item idx, int val)
{
 __mod_node_page_state(lruvec_pgdat(lruvec), idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_state(struct lruvec *lruvec,
        enum node_stat_item idx, int val)
{
 mod_node_page_state(lruvec_pgdat(lruvec), idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_lruvec_page_state(struct page *page,
        enum node_stat_item idx, int val)
{
 __mod_node_page_state(page_pgdat(page), idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_page_state(struct page *page,
      enum node_stat_item idx, int val)
{
 mod_node_page_state(page_pgdat(page), idx, val);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_lruvec_state(struct lruvec *lruvec,
        enum node_stat_item idx)
{
 mod_lruvec_state(lruvec, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __inc_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dec_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, -1);
}
# 1602 "./include/linux/mm.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *lowmem_page_address(const struct page *page)
{
 return ((((void *)((void *)((unsigned long)((phys_addr_t)((((phys_addr_t)(((unsigned long)((page) - mem_map) + (riscv_pfn_base))) << (12))))) + kernel_map.va_pa_offset)))));
}
# 1636 "./include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern struct address_space *page_mapping(struct page *page);

extern struct address_space *__page_file_mapping(struct page *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct address_space *page_file_mapping(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_mapping(page);

 return page->mapping;
}

extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
struct address_space *page_mapping(struct page *page);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_pfmemalloc(const struct page *page)
{





 return (uintptr_t)page->lru.next & ((((1UL))) << (1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_pfmemalloc(struct page *page)
{
 page->lru.next = (void *)((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_page_pfmemalloc(struct page *page)
{
 page->lru.next = ((void *)0);
}




extern void pagefault_out_of_memory(void);
# 1710 "./include/linux/mm.h"
extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);


extern bool can_do_mlock(void);



extern int user_shm_lock(size_t, struct ucounts *);
extern void user_shm_unlock(size_t, struct ucounts *);




struct zap_details {
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;
 struct page *single_page;
};

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
        pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
    unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
      unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);

struct mmu_notifier_range;

void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int
copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
int follow_invalidate_pte(struct mm_struct *mm, unsigned long address,
     struct mmu_notifier_range *range, pte_t **ptepp,
     pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pte(struct mm_struct *mm, unsigned long address,
        pte_t **ptepp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern vm_fault_t handle_mm_fault(struct vm_area_struct *vma,
      unsigned long address, unsigned int flags,
      struct pt_regs *regs);
extern int fixup_user_fault(struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
void unmap_mapping_page(struct page *page);
void unmap_mapping_pages(struct address_space *mapping,
  unsigned long start, unsigned long nr, bool even_cows);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
# 1803 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct mm_struct *mm, unsigned long addr,
         void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long pin_user_pages_remote(struct mm_struct *mm,
      unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long pin_user_pages(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);
long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);

int get_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);

int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc);
int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
   struct task_struct *task, bool bypass_rlim);

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

int redirty_page_for_writepage(struct writeback_control *wbc,
    struct page *page);
void account_page_cleaned(struct page *page, struct address_space *mapping,
     struct bdi_writeback *wb);
int set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);
void __cancel_dirty_page(struct page *page);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cancel_dirty_page(struct page *page)
{

 if (PageDirty(page))
  __cancel_dirty_page(page);
}
int clear_page_dirty_for_io(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
# 1895 "./include/linux/mm.h"
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         unsigned long cp_flags);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int get_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_user_page_fast_only(unsigned long addr,
   unsigned int gup_flags, struct page **pagep)
{
 return get_user_pages_fast_only(addr, 1, gup_flags, pagep) == 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

void mm_trace_rss_stat(struct mm_struct *mm, int member, long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 long count = atomic_long_add_return(value, &mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_inc_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_dec_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_rss) *)1 == (typeof(get_mm_rss(mm)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_rss) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(get_mm_rss(mm)) * 0l)) : (int *)8))))), ((mm->hiwater_rss) > (get_mm_rss(mm)) ? (mm->hiwater_rss) : (get_mm_rss(mm))), ({ typeof(mm->hiwater_rss) __UNIQUE_ID___x233 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID___y234 = (get_mm_rss(mm)); ((__UNIQUE_ID___x233) > (__UNIQUE_ID___y234) ? (__UNIQUE_ID___x233) : (__UNIQUE_ID___y234)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_vm) *)1 == (typeof(mm->total_vm) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_vm) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->total_vm) * 0l)) : (int *)8))))), ((mm->hiwater_vm) > (mm->total_vm) ? (mm->hiwater_vm) : (mm->total_vm)), ({ typeof(mm->hiwater_vm) __UNIQUE_ID___x235 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID___y236 = (mm->total_vm); ((__UNIQUE_ID___x235) > (__UNIQUE_ID___y236) ? (__UNIQUE_ID___x235) : (__UNIQUE_ID___y236)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);
# 2037 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_devmap(pte_t pte)
{
 return 0;
}


int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
      unsigned long address)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __pud_alloc(struct mm_struct *mm, p4d_t *p4d,
      unsigned long address)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_puds(struct mm_struct *mm) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_puds(struct mm_struct *mm) {}
# 2103 "./include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add((((1UL) << (12)) / sizeof(pmd_t)) * sizeof(pmd_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub((((1UL) << (12)) / sizeof(pmd_t)) * sizeof(pmd_t), &mm->pgtables_bytes);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_pgtables_bytes_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->pgtables_bytes, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mm_pgtables_bytes(const struct mm_struct *mm)
{
 return atomic_long_read(&mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_ptes(struct mm_struct *mm)
{
 atomic_long_add((((1UL) << (12)) / sizeof(pte_t)) * sizeof(pte_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_ptes(struct mm_struct *mm)
{
 atomic_long_sub((((1UL) << (12)) / sizeof(pte_t)) * sizeof(pte_t), &mm->pgtables_bytes);
}
# 2152 "./include/linux/mm.h"
int __pte_alloc(struct mm_struct *mm, pmd_t *pmd);
int __pte_alloc_kernel(pmd_t *pmd);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
  unsigned long address)
{
 return (__builtin_expect(!!(pgd_none(*pgd)), 0) && __p4d_alloc(mm, pgd, address)) ?
  ((void *)0) : p4d_offset(pgd, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_alloc(struct mm_struct *mm, p4d_t *p4d,
  unsigned long address)
{
 return (__builtin_expect(!!(p4d_none(*p4d)), 0) && __pud_alloc(mm, p4d, address)) ?
  ((void *)0) : pud_offset(p4d, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!(pud_none(*pud)), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): pmd_offset(pud, address);
}




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) ptlock_cache_init(void);
extern bool ptlock_alloc(struct page *page);
extern void ptlock_free(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *ptlock_ptr(struct page *page)
{
 return page->ptl;
}
# 2208 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr(pmd_page(*pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_init(struct page *page)
{







 do { if (__builtin_expect(!!(*(unsigned long *)&page->ptl), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "*(unsigned long *)&page->ptl"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/mm.h"), "i" (2222), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 if (!ptlock_alloc(page))
  return false;
 do { static struct lock_class_key __key; __raw_spin_lock_init(spinlock_check(ptlock_ptr(page)), "ptlock_ptr(page)", &__key, LD_WAIT_CONFIG); } while (0);
 return true;
}
# 2242 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_init(void)
{
 ptlock_cache_init();
 pgtable_cache_init();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pte_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pte_page_dtor(struct page *page)
{
 ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}
# 2324 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pmd_ptlock_init(struct page *page) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_ptlock_free(struct page *page) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pmd_page_ctor(struct page *page)
{
 if (!pmd_ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pmd_page_dtor(struct page *page)
{
 pmd_ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lockptr(struct mm_struct *mm, pud_t *pud)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lock(struct mm_struct *mm, pud_t *pud)
{
 spinlock_t *ptl = pud_lockptr(mm, pud);

 spin_lock(ptl);
 return ptl;
}

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pagecache_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) free_area_init_memoryless_node(int nid);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, const char *s);

extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(void);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
 adjust_managed_page_count(page, 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel image (initmem)");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  phys_pages += (NODE_DATA(nid)->node_present_pages);

 return phys_pages;
}
# 2453 "./include/linux/mm.h"
void free_area_init(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_pfn_to_nid(unsigned long pfn)
{
 return 0;
}





extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_range(unsigned long, int, unsigned long,
  unsigned long, unsigned long, enum meminit_context,
  struct vmem_altmap *, int migratetype);
extern void setup_per_zone_wmarks(void);
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((__format__(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);


extern int min_free_kbytes;
extern int watermark_boost_factor;
extern int watermark_scale_factor;
extern bool arch_has_descending_max_zone_pfns(void);


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 2539 "./include/linux/mm.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0));
}
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern int set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern int replace_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern struct file *get_task_exe_file(struct task_struct *task);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

unsigned long randomize_stack_top(unsigned long stack_top);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate, struct list_head *uf);
extern int __do_munmap(struct mm_struct *, unsigned long, size_t,
         struct list_head *uf, bool downgrade);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);
extern int do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior);


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((__warn_unused_result__)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((__warn_unused_result__)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((__warn_unused_result__)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long vm_unmapped_area(struct vm_unmapped_area_info *info);


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern vm_fault_t filemap_fault(struct vm_fault *vmf);
extern vm_fault_t filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);


int __attribute__((__warn_unused_result__)) write_one_page(struct page *page);
void task_dirty_inc(struct task_struct *tsk);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);
# 2693 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *find_vma_intersection(struct mm_struct *mm,
          unsigned long start_addr,
          unsigned long end_addr)
{
 struct vm_area_struct *vma = find_vma(mm, start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}
# 2712 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *vma_lookup(struct mm_struct *mm, unsigned long addr)
{
 struct vm_area_struct *vma = find_vma(mm, addr);

 if (vma && addr < vma->vm_start)
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;

 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;

 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -((1UL) << (12));
 }
 return vm_end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> (12);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2784 "./include/linux/mm.h"
void vma_set_file(struct vm_area_struct *vma, struct file *file);






struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int remap_pfn_range_notrack(struct vm_area_struct *vma, unsigned long addr,
  unsigned long pfn, unsigned long size, pgprot_t prot);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pages(struct vm_area_struct *vma, unsigned long addr,
   struct page **pages, unsigned long *num);
int vm_map_pages(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,
  unsigned long addr, pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_page(struct vm_area_struct *vma,
    unsigned long addr, struct page *page)
{
 int err = vm_insert_page(vma, addr, page);

 if (err == -12)
  return VM_FAULT_OOM;
 if (err < 0 && err != -16)
  return VM_FAULT_SIGBUS;

 return VM_FAULT_NOPAGE;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int io_remap_pfn_range(struct vm_area_struct *vma,
         unsigned long addr, unsigned long pfn,
         unsigned long size, pgprot_t prot)
{
 return remap_pfn_range(vma, addr, pfn, size, (prot));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_error(int err)
{
 if (err == -12)
  return VM_FAULT_OOM;
 return VM_FAULT_SIGBUS;
}

struct page *follow_page(struct vm_area_struct *vma, unsigned long address,
    unsigned int foll_flags);
# 2924 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
{
 if (vm_fault & VM_FAULT_OOM)
  return -12;
 if (vm_fault & (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))
  return (foll_flags & 0x100) ? -133 : -14;
 if (vm_fault & (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, unsigned long addr, void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);
extern int apply_to_existing_page_range(struct mm_struct *mm,
       unsigned long address, unsigned long size,
       pte_fn_t fn, void *data);

extern void init_mem_debugging_and_hardening(void);
# 2971 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled_static(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kernel_poison_pages(struct page *page, int nunmpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_poison_pages(struct page *page, int numpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_unpoison_pages(struct page *page, int numpages) { }


extern struct static_key_false init_on_alloc;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_alloc(gfp_t flags)
{
 if ((0 ? ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = !arch_static_branch(&(&init_on_alloc)->key, true); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = !arch_static_branch_jump(&(&init_on_alloc)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }) : ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_alloc)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = arch_static_branch(&(&init_on_alloc)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); })))

  return true;
 return flags & (( gfp_t)0x100u);
}

extern struct static_key_false init_on_free;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_free(void)
{
 return (0 ? ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = !arch_static_branch(&(&init_on_free)->key, true); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = !arch_static_branch_jump(&(&init_on_free)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }) : ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_free)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = arch_static_branch(&(&init_on_free)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }));

}

extern bool _debug_pagealloc_enabled_early;
extern struct static_key_false _debug_pagealloc_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled(void)
{
 return 1 &&
  _debug_pagealloc_enabled_early;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled_static(void)
{
 if (!1)
  return false;

 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_true)) branch = arch_static_branch_jump(&(&_debug_pagealloc_enabled)->key, false); else if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_false)) branch = arch_static_branch(&(&_debug_pagealloc_enabled)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}






extern void __kernel_map_pages(struct page *page, int numpages, int enable);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_map_pages(struct page *page, int numpages)
{
 if (debug_pagealloc_enabled_static())
  __kernel_map_pages(page, numpages, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_unmap_pages(struct page *page, int numpages)
{
 if (debug_pagealloc_enabled_static())
  __kernel_map_pages(page, numpages, 0);
}
# 3043 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area_no_mm(unsigned long addr) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area(struct mm_struct *mm, unsigned long addr)
{
 return 0;
}


extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);

void print_vma_addr(char *prefix, unsigned long rip);






int vmemmap_remap_free(unsigned long start, unsigned long end,
         unsigned long reuse);
int vmemmap_remap_alloc(unsigned long start, unsigned long end,
   unsigned long reuse, gfp_t gfp_mask);

void *sparse_buffer_alloc(unsigned long size);
struct page * __populate_section_memmap(unsigned long pfn,
  unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
p4d_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(p4d_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node,
       struct vmem_altmap *altmap);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *vmemmap_alloc_block_buf(unsigned long size, int node,
         struct vmem_altmap *altmap);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node, struct vmem_altmap *altmap);
int vmemmap_populate(unsigned long start, unsigned long end, int node,
  struct vmem_altmap *altmap);
void vmemmap_populate_print_last(void);




void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int flags);
extern void memory_failure_queue(unsigned long pfn, int flags);
extern void memory_failure_queue_kick(int cpu);
extern int unpoison_memory(unsigned long pfn);
extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p);
extern atomic_long_t num_poisoned_pages ;
extern int soft_offline_page(unsigned long pfn, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_DAX,
 MF_MSG_UNSPLIT_THP,
 MF_MSG_UNKNOWN,
};
# 3196 "./include/linux/mm.h"
extern unsigned int _debug_guardpage_minorder;
extern struct static_key_false _debug_guardpage_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int debug_guardpage_minorder(void)
{
 return _debug_guardpage_minorder;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_guardpage_enabled(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&_debug_guardpage_enabled), struct static_key_true)) branch = arch_static_branch_jump(&(&_debug_guardpage_enabled)->key, false); else if (__builtin_types_compatible_p(typeof(*&_debug_guardpage_enabled), struct static_key_false)) branch = arch_static_branch(&(&_debug_guardpage_enabled)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_guard(struct page *page)
{
 if (!debug_guardpage_enabled())
  return false;

 return PageGuard(page);
}
# 3225 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setup_nr_node_ids(void) {}


extern int memcmp_pages(struct page *page1, struct page *page2);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pages_identical(struct page *page1, struct page *page2)
{
 return !memcmp_pages(page1, page2);
}
# 3247 "./include/linux/mm.h"
extern int sysctl_nr_trim_pages;


void mem_dump_obj(void *object);
# 3263 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seal_check_future_write(int seals, struct vm_area_struct *vma)
{
 if (seals & 0x0010) {




  if ((vma->vm_flags & 0x00000008) && (vma->vm_flags & 0x00000002))
   return -1;
# 3280 "./include/linux/mm.h"
  if (vma->vm_flags & 0x00000008)
   vma->vm_flags &= ~(0x00000020);
 }

 return 0;
}
# 10 "./arch/riscv/include/asm/sections.h" 2

extern char _start[];
extern char _start_kernel[];
extern char __init_data_begin[], __init_data_end[];
extern char __init_text_begin[], __init_text_end[];
extern char __alt_start[], __alt_end[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_va_kernel_text(uintptr_t va)
{
 uintptr_t start = (uintptr_t)_start;
 uintptr_t end = (uintptr_t)__init_data_begin;

 return va >= start && va < end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_va_kernel_lm_alias_text(uintptr_t va)
{
 uintptr_t start = (uintptr_t)((void *)((void *)((unsigned long)((phys_addr_t)(({ unsigned long _x = ({ unsigned long __ptr; __ptr = (unsigned long) ((unsigned long)(_start)); (typeof((unsigned long)(_start))) (__ptr + (0)); }); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); }))) + kernel_map.va_pa_offset)));
 uintptr_t end = (uintptr_t)((void *)((void *)((unsigned long)((phys_addr_t)(({ unsigned long _x = ({ unsigned long __ptr; __ptr = (unsigned long) ((unsigned long)(__init_data_begin)); (typeof((unsigned long)(__init_data_begin))) (__ptr + (0)); }); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); }))) + kernel_map.va_pa_offset)));

 return va >= start && va < end;
}
# 22 "./include/linux/interrupt.h" 2
# 95 "./include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 118 "./include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} __attribute__((__aligned__(1 << (6))));

extern irqreturn_t no_action(int cpl, void *dev_id);
# 146 "./include/linux/interrupt.h"
extern int __attribute__((__warn_unused_result__))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);
# 164 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
}

extern int __attribute__((__warn_unused_result__))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((__warn_unused_result__))
__request_percpu_irq(unsigned int irq, irq_handler_t handler,
       unsigned long flags, const char *devname,
       void *percpu_dev_id);

extern int __attribute__((__warn_unused_result__))
request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id)
{
 return __request_percpu_irq(irq, handler, 0,
        devname, percpu_dev_id);
}

extern int __attribute__((__warn_unused_result__))
request_percpu_nmi(unsigned int irq, irq_handler_t handler,
     const char *devname, void *dev);

extern const void *free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

extern const void *free_nmi(unsigned int irq, void *dev_id);
extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);

struct device;

extern int __attribute__((__warn_unused_result__))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
      devname, dev_id);
}

extern int __attribute__((__warn_unused_result__))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 243 "./include/linux/interrupt.h"
bool irq_has_action(unsigned int irq);
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);

extern void disable_nmi_nosync(unsigned int irq);
extern void disable_percpu_nmi(unsigned int irq);
extern void enable_nmi(unsigned int irq);
extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
extern int prepare_percpu_nmi(unsigned int irq);
extern void teardown_percpu_nmi(unsigned int irq);

extern int irq_inject_interrupt(unsigned int irq);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
extern void rearm_wake_irq(unsigned int irq);
# 279 "./include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};
# 303 "./include/linux/interrupt.h"
struct irq_affinity {
 unsigned int pre_vectors;
 unsigned int post_vectors;
 unsigned int nr_sets;
 unsigned int set_size[4];
 void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
 void *priv;
};






struct irq_affinity_desc {
 struct cpumask mask;
 unsigned int is_managed : 1;
};



extern cpumask_var_t irq_default_affinity;

extern int irq_set_affinity(unsigned int irq, const struct cpumask *cpumask);
extern int irq_force_affinity(unsigned int irq, const struct cpumask *cpumask);

extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);
extern int irq_update_affinity_desc(unsigned int irq,
        struct irq_affinity_desc *affinity);

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);

struct irq_affinity_desc *
irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd);

unsigned int irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
           const struct irq_affinity *affd);
# 408 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);





extern struct static_key_false force_irqthreads_key;
# 515 "./include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,
 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

           void do_softirq(void);
           void __do_softirq(void);

extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { extern void __compiletime_assert_237(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long long))) __compiletime_assert_237(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 2: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { extern void __compiletime_assert_238(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long long))) __compiletime_assert_238(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 4: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { extern void __compiletime_assert_239(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long long))) __compiletime_assert_239(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 8: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); ___ret = ({ do { extern void __compiletime_assert_240(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })) == sizeof(long long))) __compiletime_assert_240(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }))); }); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 587 "./include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 bool use_callback;
 union {
  void (*func)(unsigned long data);
  void (*callback)(struct tasklet_struct *t);
 };
 unsigned long data;
};
# 629 "./include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

void tasklet_unlock(struct tasklet_struct *t);
void tasklet_unlock_wait(struct tasklet_struct *t);
void tasklet_unlock_spin_wait(struct tasklet_struct *t);
# 652 "./include/linux/interrupt.h"
extern void __tasklet_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_in_atomic(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_spin_wait(t);
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
extern void tasklet_setup(struct tasklet_struct *t,
     void (*callback)(struct tasklet_struct *));
# 733 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long probe_irq_on(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int probe_irq_off(unsigned long val)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int probe_irq_mask(unsigned long val)
{
 return 0;
}
# 753 "./include/linux/interrupt.h"
extern void init_irq_proc(void);
# 766 "./include/linux/interrupt.h"
struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 39 "./include/linux/pci.h" 2

# 1 "./include/linux/resource_ext.h" 1
# 14 "./include/linux/resource_ext.h"
struct resource_win {
 struct resource res;
 resource_size_t offset;
};





struct resource_entry {
 struct list_head node;
 struct resource *res;
 resource_size_t offset;
 struct resource __res;
};

extern struct resource_entry *
resource_list_create_entry(struct resource *res, size_t extra_size);
extern void resource_list_free(struct list_head *head);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_add(struct resource_entry *entry,
         struct list_head *head)
{
 list_add(&entry->node, head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_add_tail(struct resource_entry *entry,
       struct list_head *head)
{
 list_add_tail(&entry->node, head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_del(struct resource_entry *entry)
{
 list_del(&entry->node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_free_entry(struct resource_entry *entry)
{
 kfree(entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
resource_list_destroy_entry(struct resource_entry *entry)
{
 resource_list_del(entry);
 resource_list_free_entry(entry);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct resource_entry *
resource_list_first_type(struct list_head *list, unsigned long type)
{
 struct resource_entry *entry;

 for ((entry) = ({ void *__mptr = (void *)(((list))->next); do { extern void __compiletime_assert_241(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(((list))->next)), typeof(((typeof(*(entry)) *)0)->node)) && !__builtin_types_compatible_p(typeof(*(((list))->next)), typeof(void))))) __compiletime_assert_241(); } while (0); ((typeof(*(entry)) *)(__mptr - __builtin_offsetof(typeof(*(entry)), node))); }); !(&(entry)->node == ((list))); (entry) = ({ void *__mptr = (void *)(((entry))->node.next); do { extern void __compiletime_assert_242(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(((entry))->node.next)), typeof(((typeof(*((entry))) *)0)->node)) && !__builtin_types_compatible_p(typeof(*(((entry))->node.next)), typeof(void))))) __compiletime_assert_242(); } while (0); ((typeof(*((entry))) *)(__mptr - __builtin_offsetof(typeof(*((entry))), node))); })) {
  if (resource_type(entry->res) == type)
   return entry;
 }
 return ((void *)0);
}
# 41 "./include/linux/pci.h" 2
# 1 "./include/uapi/linux/pci.h" 1
# 21 "./include/uapi/linux/pci.h"
# 1 "./include/uapi/linux/pci_regs.h" 1
# 22 "./include/uapi/linux/pci.h" 2
# 42 "./include/linux/pci.h" 2

# 1 "./include/linux/pci_ids.h" 1
# 44 "./include/linux/pci.h" 2
# 75 "./include/linux/pci.h"
struct pci_slot {
 struct pci_bus *bus;
 struct list_head list;
 struct hotplug_slot *hotplug;
 unsigned char number;
 struct kobject kobj;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *pci_slot_name(const struct pci_slot *slot)
{
 return kobject_name(&slot->kobj);
}


enum pci_mmap_state {
 pci_mmap_io,
 pci_mmap_mem
};


enum {

 PCI_STD_RESOURCES,
 PCI_STD_RESOURCE_END = PCI_STD_RESOURCES + 6 - 1,


 PCI_ROM_RESOURCE,
# 124 "./include/linux/pci.h"
 PCI_BRIDGE_RESOURCES,
 PCI_BRIDGE_RESOURCE_END = PCI_BRIDGE_RESOURCES +
      4 - 1,


 PCI_NUM_RESOURCES,


 DEVICE_COUNT_RESOURCE = PCI_NUM_RESOURCES,
};
# 146 "./include/linux/pci.h"
enum pci_interrupt_pin {
 PCI_INTERRUPT_UNKNOWN,
 PCI_INTERRUPT_INTA,
 PCI_INTERRUPT_INTB,
 PCI_INTERRUPT_INTC,
 PCI_INTERRUPT_INTD,
};
# 161 "./include/linux/pci.h"
typedef int pci_power_t;
# 172 "./include/linux/pci.h"
extern const char *pci_power_names[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *pci_power_name(pci_power_t state)
{
 return pci_power_names[1 + ( int) state];
}
# 186 "./include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

enum {

 pci_channel_io_normal = ( pci_channel_state_t) 1,


 pci_channel_io_frozen = ( pci_channel_state_t) 2,


 pci_channel_io_perm_failure = ( pci_channel_state_t) 3,
};

typedef unsigned int pcie_reset_state_t;

enum pcie_reset_state {

 pcie_deassert_reset = ( pcie_reset_state_t) 1,


 pcie_warm_reset = ( pcie_reset_state_t) 2,


 pcie_hot_reset = ( pcie_reset_state_t) 3
};

typedef unsigned short pci_dev_flags_t;
enum pci_dev_flags {

 PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = ( pci_dev_flags_t) (1 << 0),

 PCI_DEV_FLAGS_NO_D3 = ( pci_dev_flags_t) (1 << 1),

 PCI_DEV_FLAGS_ASSIGNED = ( pci_dev_flags_t) (1 << 2),

 PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = ( pci_dev_flags_t) (1 << 3),

 PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS = ( pci_dev_flags_t) (1 << 5),

 PCI_DEV_FLAGS_NO_BUS_RESET = ( pci_dev_flags_t) (1 << 6),

 PCI_DEV_FLAGS_NO_PM_RESET = ( pci_dev_flags_t) (1 << 7),

 PCI_DEV_FLAGS_VPD_REF_F0 = ( pci_dev_flags_t) (1 << 8),

 PCI_DEV_FLAGS_BRIDGE_XLATE_ROOT = ( pci_dev_flags_t) (1 << 9),

 PCI_DEV_FLAGS_NO_FLR_RESET = ( pci_dev_flags_t) (1 << 10),

 PCI_DEV_FLAGS_NO_RELAXED_ORDERING = ( pci_dev_flags_t) (1 << 11),
};

enum pci_irq_reroute_variant {
 INTEL_IRQ_REROUTE_VARIANT = 1,
 MAX_IRQ_REROUTE_VARIANTS = 3
};

typedef unsigned short pci_bus_flags_t;
enum pci_bus_flags {
 PCI_BUS_FLAGS_NO_MSI = ( pci_bus_flags_t) 1,
 PCI_BUS_FLAGS_NO_MMRBC = ( pci_bus_flags_t) 2,
 PCI_BUS_FLAGS_NO_AERSID = ( pci_bus_flags_t) 4,
 PCI_BUS_FLAGS_NO_EXTCFG = ( pci_bus_flags_t) 8,
};


enum pcie_link_width {
 PCIE_LNK_WIDTH_RESRV = 0x00,
 PCIE_LNK_X1 = 0x01,
 PCIE_LNK_X2 = 0x02,
 PCIE_LNK_X4 = 0x04,
 PCIE_LNK_X8 = 0x08,
 PCIE_LNK_X12 = 0x0c,
 PCIE_LNK_X16 = 0x10,
 PCIE_LNK_X32 = 0x20,
 PCIE_LNK_WIDTH_UNKNOWN = 0xff,
};


enum pci_bus_speed {
 PCI_SPEED_33MHz = 0x00,
 PCI_SPEED_66MHz = 0x01,
 PCI_SPEED_66MHz_PCIX = 0x02,
 PCI_SPEED_100MHz_PCIX = 0x03,
 PCI_SPEED_133MHz_PCIX = 0x04,
 PCI_SPEED_66MHz_PCIX_ECC = 0x05,
 PCI_SPEED_100MHz_PCIX_ECC = 0x06,
 PCI_SPEED_133MHz_PCIX_ECC = 0x07,
 PCI_SPEED_66MHz_PCIX_266 = 0x09,
 PCI_SPEED_100MHz_PCIX_266 = 0x0a,
 PCI_SPEED_133MHz_PCIX_266 = 0x0b,
 AGP_UNKNOWN = 0x0c,
 AGP_1X = 0x0d,
 AGP_2X = 0x0e,
 AGP_4X = 0x0f,
 AGP_8X = 0x10,
 PCI_SPEED_66MHz_PCIX_533 = 0x11,
 PCI_SPEED_100MHz_PCIX_533 = 0x12,
 PCI_SPEED_133MHz_PCIX_533 = 0x13,
 PCIE_SPEED_2_5GT = 0x14,
 PCIE_SPEED_5_0GT = 0x15,
 PCIE_SPEED_8_0GT = 0x16,
 PCIE_SPEED_16_0GT = 0x17,
 PCIE_SPEED_32_0GT = 0x18,
 PCIE_SPEED_64_0GT = 0x19,
 PCI_SPEED_UNKNOWN = 0xff,
};

enum pci_bus_speed pcie_get_speed_cap(struct pci_dev *dev);
enum pcie_link_width pcie_get_width_cap(struct pci_dev *dev);

struct pci_vpd {
 struct mutex lock;
 unsigned int len;
 u8 cap;
};

struct irq_affinity;
struct pcie_link_state;
struct pci_sriov;
struct pci_p2pdma;
struct rcec_ea;


struct pci_dev {
 struct list_head bus_list;
 struct pci_bus *bus;
 struct pci_bus *subordinate;

 void *sysdata;
 struct proc_dir_entry *procent;
 struct pci_slot *slot;

 unsigned int devfn;
 unsigned short vendor;
 unsigned short device;
 unsigned short subsystem_vendor;
 unsigned short subsystem_device;
 unsigned int class;
 u8 revision;
 u8 hdr_type;





 struct rcec_ea *rcec_ea;
 struct pci_dev *rcec;

 u32 devcap;
 u8 pcie_cap;
 u8 msi_cap;
 u8 msix_cap;
 u8 pcie_mpss:3;
 u8 rom_base_reg;
 u8 pin;
 u16 pcie_flags_reg;
 unsigned long *dma_alias_mask;

 struct pci_driver *driver;
 u64 dma_mask;





 struct device_dma_parameters dma_parms;

 pci_power_t current_state;


 unsigned int imm_ready:1;
 u8 pm_cap;
 unsigned int pme_support:5;

 unsigned int pme_poll:1;
 unsigned int d1_support:1;
 unsigned int d2_support:1;
 unsigned int no_d1d2:1;
 unsigned int no_d3cold:1;
 unsigned int bridge_d3:1;
 unsigned int d3cold_allowed:1;
 unsigned int mmio_always_on:1;

 unsigned int wakeup_prepared:1;
 unsigned int runtime_d3cold:1;



 unsigned int skip_bus_pm:1;
 unsigned int ignore_hotplug:1;
 unsigned int hotplug_user_indicators:1;


 unsigned int clear_retrain_link:1;

 unsigned int d3hot_delay;
 unsigned int d3cold_delay;


 struct pcie_link_state *link_state;
 unsigned int ltr_path:1;

 u16 l1ss;

 unsigned int pasid_no_tlp:1;
 unsigned int eetlp_prefix_path:1;

 pci_channel_state_t error_state;
 struct device dev;

 int cfg_size;





 unsigned int irq;
 struct resource resource[DEVICE_COUNT_RESOURCE];

 bool match_driver;

 unsigned int transparent:1;
 unsigned int io_window:1;
 unsigned int pref_window:1;
 unsigned int pref_64_window:1;
 unsigned int multifunction:1;

 unsigned int is_busmaster:1;
 unsigned int no_msi:1;
 unsigned int no_64bit_msi:1;
 unsigned int block_cfg_access:1;
 unsigned int broken_parity_status:1;
 unsigned int irq_reroute_variant:2;
 unsigned int msi_enabled:1;
 unsigned int msix_enabled:1;
 unsigned int ari_enabled:1;
 unsigned int ats_enabled:1;
 unsigned int pasid_enabled:1;
 unsigned int pri_enabled:1;
 unsigned int is_managed:1;
 unsigned int needs_freset:1;
 unsigned int state_saved:1;
 unsigned int is_physfn:1;
 unsigned int is_virtfn:1;
 unsigned int is_hotplug_bridge:1;
 unsigned int shpc_managed:1;
 unsigned int is_thunderbolt:1;







 unsigned int untrusted:1;





 unsigned int external_facing:1;
 unsigned int broken_intx_masking:1;
 unsigned int io_window_1k:1;
 unsigned int irq_managed:1;
 unsigned int non_compliant_bars:1;
 unsigned int is_probed:1;
 unsigned int link_active_reporting:1;
 unsigned int no_vf_scan:1;
 unsigned int no_command_memory:1;
 pci_dev_flags_t dev_flags;
 atomic_t enable_cnt;

 u32 saved_config_space[16];
 struct hlist_head saved_cap_space;
 int rom_attr_enabled;
 struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE];
 struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE];
# 474 "./include/linux/pci.h"
 const struct attribute_group **msi_irq_groups;

 struct pci_vpd vpd;
# 502 "./include/linux/pci.h"
 u16 acs_cap;
 phys_addr_t rom;
 size_t romlen;
 char *driver_override;

 unsigned long priv_flags;


 u8 reset_methods[7];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *pci_physfn(struct pci_dev *dev)
{




 return dev;
}

struct pci_dev *pci_alloc_dev(struct pci_bus *bus);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_channel_offline(struct pci_dev *pdev)
{
 return (pdev->error_state != pci_channel_io_normal);
}
# 542 "./include/linux/pci.h"
struct pci_host_bridge {
 struct device dev;
 struct pci_bus *bus;
 struct pci_ops *ops;
 struct pci_ops *child_ops;
 void *sysdata;
 int busnr;
 int domain_nr;
 struct list_head windows;
 struct list_head dma_ranges;
 u8 (*swizzle_irq)(struct pci_dev *, u8 *);
 int (*map_irq)(const struct pci_dev *, u8, u8);
 void (*release_fn)(struct pci_host_bridge *);
 void *release_data;
 unsigned int ignore_reset_delay:1;
 unsigned int no_ext_tags:1;
 unsigned int native_aer:1;
 unsigned int native_pcie_hotplug:1;
 unsigned int native_shpc_hotplug:1;
 unsigned int native_pme:1;
 unsigned int native_ltr:1;
 unsigned int native_dpc:1;
 unsigned int preserve_config:1;
 unsigned int size_windows:1;
 unsigned int msi_domain:1;


 resource_size_t (*align_resource)(struct pci_dev *dev,
   const struct resource *res,
   resource_size_t start,
   resource_size_t size,
   resource_size_t align);
 unsigned long private[] __attribute__((__aligned__((1 << 6))));
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_host_bridge_priv(struct pci_host_bridge *bridge)
{
 return (void *)bridge->private;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_host_bridge *pci_host_bridge_from_priv(void *priv)
{
 return ({ void *__mptr = (void *)(priv); do { extern void __compiletime_assert_243(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(priv)), typeof(((struct pci_host_bridge *)0)->private)) && !__builtin_types_compatible_p(typeof(*(priv)), typeof(void))))) __compiletime_assert_243(); } while (0); ((struct pci_host_bridge *)(__mptr - __builtin_offsetof(struct pci_host_bridge, private))); });
}

struct pci_host_bridge *pci_alloc_host_bridge(size_t priv);
struct pci_host_bridge *devm_pci_alloc_host_bridge(struct device *dev,
         size_t priv);
void pci_free_host_bridge(struct pci_host_bridge *bridge);
struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *bus);

void pci_set_host_bridge_release(struct pci_host_bridge *bridge,
     void (*release_fn)(struct pci_host_bridge *),
     void *release_data);

int pcibios_root_bridge_prepare(struct pci_host_bridge *bridge);
# 616 "./include/linux/pci.h"
struct pci_bus_resource {
 struct list_head list;
 struct resource *res;
 unsigned int flags;
};



struct pci_bus {
 struct list_head node;
 struct pci_bus *parent;
 struct list_head children;
 struct list_head devices;
 struct pci_dev *self;
 struct list_head slots;

 struct resource *resource[4];
 struct list_head resources;
 struct resource busn_res;

 struct pci_ops *ops;
 void *sysdata;
 struct proc_dir_entry *procdir;

 unsigned char number;
 unsigned char primary;
 unsigned char max_bus_speed;
 unsigned char cur_bus_speed;

 int domain_nr;


 char name[48];

 unsigned short bridge_ctl;
 pci_bus_flags_t bus_flags;
 struct device *bridge;
 struct device dev;
 struct bin_attribute *legacy_io;
 struct bin_attribute *legacy_mem;
 unsigned int is_added:1;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 pci_dev_id(struct pci_dev *dev)
{
 return ((((u16)(dev->bus->number)) << 8) | (dev->devfn));
}
# 674 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_root_bus(struct pci_bus *pbus)
{
 return !(pbus->parent);
}
# 686 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_bridge(struct pci_dev *dev)
{
 return dev->hdr_type == 1 ||
  dev->hdr_type == 2;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *pci_upstream_bridge(struct pci_dev *dev)
{
 dev = pci_physfn(dev);
 if (pci_is_root_bus(dev->bus))
  return ((void *)0);

 return dev->bus->self;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_dev_msi_enabled(struct pci_dev *pci_dev)
{
 return pci_dev->msi_enabled || pci_dev->msix_enabled;
}
# 724 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcibios_err_to_errno(int err)
{
 if (err <= 0x00)
  return err;

 switch (err) {
 case 0x81:
  return -2;
 case 0x83:
  return -25;
 case 0x86:
  return -19;
 case 0x87:
  return -14;
 case 0x88:
  return -5;
 case 0x89:
  return -28;
 }

 return -34;
}



struct pci_ops {
 int (*add_bus)(struct pci_bus *bus);
 void (*remove_bus)(struct pci_bus *bus);
 void *(*map_bus)(struct pci_bus *bus, unsigned int devfn, int where);
 int (*read)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 *val);
 int (*write)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 val);
};





int raw_pci_read(unsigned int domain, unsigned int bus, unsigned int devfn,
   int reg, int len, u32 *val);
int raw_pci_write(unsigned int domain, unsigned int bus, unsigned int devfn,
    int reg, int len, u32 val);


typedef u64 pci_bus_addr_t;




struct pci_bus_region {
 pci_bus_addr_t start;
 pci_bus_addr_t end;
};

struct pci_dynids {
 spinlock_t lock;
 struct list_head list;
};
# 790 "./include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

enum pci_ers_result {

 PCI_ERS_RESULT_NONE = ( pci_ers_result_t) 1,


 PCI_ERS_RESULT_CAN_RECOVER = ( pci_ers_result_t) 2,


 PCI_ERS_RESULT_NEED_RESET = ( pci_ers_result_t) 3,


 PCI_ERS_RESULT_DISCONNECT = ( pci_ers_result_t) 4,


 PCI_ERS_RESULT_RECOVERED = ( pci_ers_result_t) 5,


 PCI_ERS_RESULT_NO_AER_DRIVER = ( pci_ers_result_t) 6,
};


struct pci_error_handlers {

 pci_ers_result_t (*error_detected)(struct pci_dev *dev,
        pci_channel_state_t error);


 pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev);


 pci_ers_result_t (*slot_reset)(struct pci_dev *dev);


 void (*reset_prepare)(struct pci_dev *dev);
 void (*reset_done)(struct pci_dev *dev);


 void (*resume)(struct pci_dev *dev);
};


struct module;
# 884 "./include/linux/pci.h"
struct pci_driver {
 struct list_head node;
 const char *name;
 const struct pci_device_id *id_table;
 int (*probe)(struct pci_dev *dev, const struct pci_device_id *id);
 void (*remove)(struct pci_dev *dev);
 int (*suspend)(struct pci_dev *dev, pm_message_t state);
 int (*resume)(struct pci_dev *dev);
 void (*shutdown)(struct pci_dev *dev);
 int (*sriov_configure)(struct pci_dev *dev, int num_vfs);
 int (*sriov_set_msix_vec_count)(struct pci_dev *vf, int msix_vec_count);
 u32 (*sriov_get_vf_total_msix)(struct pci_dev *pf);
 const struct pci_error_handlers *err_handler;
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;
 struct device_driver driver;
 struct pci_dynids dynids;
};
# 1004 "./include/linux/pci.h"
enum {
 PCI_REASSIGN_ALL_RSRC = 0x00000001,
 PCI_REASSIGN_ALL_BUS = 0x00000002,
 PCI_PROBE_ONLY = 0x00000004,
 PCI_CAN_SKIP_ISA_ALIGN = 0x00000008,
 PCI_ENABLE_PROC_DOMAINS = 0x00000010,
 PCI_COMPAT_DOMAIN_0 = 0x00000020,
 PCI_SCAN_ALL_PCIE_DEVS = 0x00000040,
};
# 1022 "./include/linux/pci.h"
extern unsigned int pci_flags;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_set_flags(int flags) { pci_flags = flags; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_add_flags(int flags) { pci_flags |= flags; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_clear_flags(int flags) { pci_flags &= ~flags; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_has_flag(int flag) { return pci_flags & flag; }

void pcie_bus_configure_settings(struct pci_bus *bus);

enum pcie_bus_config_types {
 PCIE_BUS_TUNE_OFF,
 PCIE_BUS_DEFAULT,
 PCIE_BUS_SAFE,
 PCIE_BUS_PERFORMANCE,
 PCIE_BUS_PEER2PEER,
};

extern enum pcie_bus_config_types pcie_bus_config;

extern struct bus_type pci_bus_type;



extern struct list_head pci_root_buses;

int no_pci_devices(void);

void pcibios_resource_survey_bus(struct pci_bus *bus);
void pcibios_bus_add_device(struct pci_dev *pdev);
void pcibios_add_bus(struct pci_bus *bus);
void pcibios_remove_bus(struct pci_bus *bus);
void pcibios_fixup_bus(struct pci_bus *);
int __attribute__((__warn_unused_result__)) pcibios_enable_device(struct pci_dev *, int mask);

char *pcibios_setup(char *str);


resource_size_t pcibios_align_resource(void *, const struct resource *,
    resource_size_t,
    resource_size_t);


void pci_fixup_cardbus(struct pci_bus *);



void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
        struct resource *res);
void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
        struct pci_bus_region *region);
void pcibios_scan_specific_bus(int busn);
struct pci_bus *pci_find_bus(int domain, int busnr);
void pci_bus_add_devices(const struct pci_bus *bus);
struct pci_bus *pci_scan_bus(int bus, struct pci_ops *ops, void *sysdata);
struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
        struct pci_ops *ops, void *sysdata,
        struct list_head *resources);
int pci_host_probe(struct pci_host_bridge *bridge);
int pci_bus_insert_busn_res(struct pci_bus *b, int bus, int busmax);
int pci_bus_update_busn_res_end(struct pci_bus *b, int busmax);
void pci_bus_release_busn_res(struct pci_bus *b);
struct pci_bus *pci_scan_root_bus(struct device *parent, int bus,
      struct pci_ops *ops, void *sysdata,
      struct list_head *resources);
int pci_scan_root_bus_bridge(struct pci_host_bridge *bridge);
struct pci_bus *pci_add_new_bus(struct pci_bus *parent, struct pci_dev *dev,
    int busnr);
struct pci_slot *pci_create_slot(struct pci_bus *parent, int slot_nr,
     const char *name,
     struct hotplug_slot *hotplug);
void pci_destroy_slot(struct pci_slot *slot);

void pci_dev_assign_slot(struct pci_dev *dev);



int pci_scan_slot(struct pci_bus *bus, int devfn);
struct pci_dev *pci_scan_single_device(struct pci_bus *bus, int devfn);
void pci_device_add(struct pci_dev *dev, struct pci_bus *bus);
unsigned int pci_scan_child_bus(struct pci_bus *bus);
void pci_bus_add_device(struct pci_dev *dev);
void pci_read_bridge_bases(struct pci_bus *child);
struct resource *pci_find_parent_resource(const struct pci_dev *dev,
       struct resource *res);
u8 pci_swizzle_interrupt_pin(const struct pci_dev *dev, u8 pin);
int pci_get_interrupt_pin(struct pci_dev *dev, struct pci_dev **bridge);
u8 pci_common_swizzle(struct pci_dev *dev, u8 *pinp);
struct pci_dev *pci_dev_get(struct pci_dev *dev);
void pci_dev_put(struct pci_dev *dev);
void pci_remove_bus(struct pci_bus *b);
void pci_stop_and_remove_bus_device(struct pci_dev *dev);
void pci_stop_and_remove_bus_device_locked(struct pci_dev *dev);
void pci_stop_root_bus(struct pci_bus *bus);
void pci_remove_root_bus(struct pci_bus *bus);
void pci_setup_cardbus(struct pci_bus *bus);
void pcibios_setup_bridge(struct pci_bus *bus, unsigned long type);
void pci_sort_breadthfirst(void);





u8 pci_bus_find_capability(struct pci_bus *bus, unsigned int devfn, int cap);
u8 pci_find_capability(struct pci_dev *dev, int cap);
u8 pci_find_next_capability(struct pci_dev *dev, u8 pos, int cap);
u8 pci_find_ht_capability(struct pci_dev *dev, int ht_cap);
u8 pci_find_next_ht_capability(struct pci_dev *dev, u8 pos, int ht_cap);
u16 pci_find_ext_capability(struct pci_dev *dev, int cap);
u16 pci_find_next_ext_capability(struct pci_dev *dev, u16 pos, int cap);
struct pci_bus *pci_find_next_bus(const struct pci_bus *from);
u16 pci_find_vsec_capability(struct pci_dev *dev, u16 vendor, int cap);

u64 pci_get_dsn(struct pci_dev *dev);

struct pci_dev *pci_get_device(unsigned int vendor, unsigned int device,
          struct pci_dev *from);
struct pci_dev *pci_get_subsys(unsigned int vendor, unsigned int device,
          unsigned int ss_vendor, unsigned int ss_device,
          struct pci_dev *from);
struct pci_dev *pci_get_slot(struct pci_bus *bus, unsigned int devfn);
struct pci_dev *pci_get_domain_bus_and_slot(int domain, unsigned int bus,
         unsigned int devfn);
struct pci_dev *pci_get_class(unsigned int class, struct pci_dev *from);
int pci_dev_present(const struct pci_device_id *ids);

int pci_bus_read_config_byte(struct pci_bus *bus, unsigned int devfn,
        int where, u8 *val);
int pci_bus_read_config_word(struct pci_bus *bus, unsigned int devfn,
        int where, u16 *val);
int pci_bus_read_config_dword(struct pci_bus *bus, unsigned int devfn,
         int where, u32 *val);
int pci_bus_write_config_byte(struct pci_bus *bus, unsigned int devfn,
         int where, u8 val);
int pci_bus_write_config_word(struct pci_bus *bus, unsigned int devfn,
         int where, u16 val);
int pci_bus_write_config_dword(struct pci_bus *bus, unsigned int devfn,
          int where, u32 val);

int pci_generic_config_read(struct pci_bus *bus, unsigned int devfn,
       int where, int size, u32 *val);
int pci_generic_config_write(struct pci_bus *bus, unsigned int devfn,
       int where, int size, u32 val);
int pci_generic_config_read32(struct pci_bus *bus, unsigned int devfn,
         int where, int size, u32 *val);
int pci_generic_config_write32(struct pci_bus *bus, unsigned int devfn,
          int where, int size, u32 val);

struct pci_ops *pci_bus_set_ops(struct pci_bus *bus, struct pci_ops *ops);

int pci_read_config_byte(const struct pci_dev *dev, int where, u8 *val);
int pci_read_config_word(const struct pci_dev *dev, int where, u16 *val);
int pci_read_config_dword(const struct pci_dev *dev, int where, u32 *val);
int pci_write_config_byte(const struct pci_dev *dev, int where, u8 val);
int pci_write_config_word(const struct pci_dev *dev, int where, u16 val);
int pci_write_config_dword(const struct pci_dev *dev, int where, u32 val);

int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val);
int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val);
int pcie_capability_write_word(struct pci_dev *dev, int pos, u16 val);
int pcie_capability_write_dword(struct pci_dev *dev, int pos, u32 val);
int pcie_capability_clear_and_set_word(struct pci_dev *dev, int pos,
           u16 clear, u16 set);
int pcie_capability_clear_and_set_dword(struct pci_dev *dev, int pos,
     u32 clear, u32 set);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_set_word(struct pci_dev *dev, int pos,
        u16 set)
{
 return pcie_capability_clear_and_set_word(dev, pos, 0, set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_set_dword(struct pci_dev *dev, int pos,
         u32 set)
{
 return pcie_capability_clear_and_set_dword(dev, pos, 0, set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_clear_word(struct pci_dev *dev, int pos,
          u16 clear)
{
 return pcie_capability_clear_and_set_word(dev, pos, clear, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_clear_dword(struct pci_dev *dev, int pos,
           u32 clear)
{
 return pcie_capability_clear_and_set_dword(dev, pos, clear, 0);
}


int pci_user_read_config_byte(struct pci_dev *dev, int where, u8 *val);
int pci_user_read_config_word(struct pci_dev *dev, int where, u16 *val);
int pci_user_read_config_dword(struct pci_dev *dev, int where, u32 *val);
int pci_user_write_config_byte(struct pci_dev *dev, int where, u8 val);
int pci_user_write_config_word(struct pci_dev *dev, int where, u16 val);
int pci_user_write_config_dword(struct pci_dev *dev, int where, u32 val);

int __attribute__((__warn_unused_result__)) pci_enable_device(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_enable_device_io(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_enable_device_mem(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_reenable_device(struct pci_dev *);
int __attribute__((__warn_unused_result__)) pcim_enable_device(struct pci_dev *pdev);
void pcim_pin_device(struct pci_dev *pdev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_intx_mask_supported(struct pci_dev *pdev)
{




 return !pdev->broken_intx_masking;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_is_enabled(struct pci_dev *pdev)
{
 return (atomic_read(&pdev->enable_cnt) > 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_is_managed(struct pci_dev *pdev)
{
 return pdev->is_managed;
}

void pci_disable_device(struct pci_dev *dev);

extern unsigned int pcibios_max_latency;
void pci_set_master(struct pci_dev *dev);
void pci_clear_master(struct pci_dev *dev);

int pci_set_pcie_reset_state(struct pci_dev *dev, enum pcie_reset_state state);
int pci_set_cacheline_size(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_set_mwi(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pcim_set_mwi(struct pci_dev *dev);
int pci_try_set_mwi(struct pci_dev *dev);
void pci_clear_mwi(struct pci_dev *dev);
void pci_disable_parity(struct pci_dev *dev);
void pci_intx(struct pci_dev *dev, int enable);
bool pci_check_and_mask_intx(struct pci_dev *dev);
bool pci_check_and_unmask_intx(struct pci_dev *dev);
int pci_wait_for_pending(struct pci_dev *dev, int pos, u16 mask);
int pci_wait_for_pending_transaction(struct pci_dev *dev);
int pcix_get_max_mmrbc(struct pci_dev *dev);
int pcix_get_mmrbc(struct pci_dev *dev);
int pcix_set_mmrbc(struct pci_dev *dev, int mmrbc);
int pcie_get_readrq(struct pci_dev *dev);
int pcie_set_readrq(struct pci_dev *dev, int rq);
int pcie_get_mps(struct pci_dev *dev);
int pcie_set_mps(struct pci_dev *dev, int mps);
u32 pcie_bandwidth_available(struct pci_dev *dev, struct pci_dev **limiting_dev,
        enum pci_bus_speed *speed,
        enum pcie_link_width *width);
void pcie_print_link_status(struct pci_dev *dev);
int pcie_reset_flr(struct pci_dev *dev, bool probe);
int pcie_flr(struct pci_dev *dev);
int __pci_reset_function_locked(struct pci_dev *dev);
int pci_reset_function(struct pci_dev *dev);
int pci_reset_function_locked(struct pci_dev *dev);
int pci_try_reset_function(struct pci_dev *dev);
int pci_probe_reset_slot(struct pci_slot *slot);
int pci_probe_reset_bus(struct pci_bus *bus);
int pci_reset_bus(struct pci_dev *dev);
void pci_reset_secondary_bus(struct pci_dev *dev);
void pcibios_reset_secondary_bus(struct pci_dev *dev);
void pci_update_resource(struct pci_dev *dev, int resno);
int __attribute__((__warn_unused_result__)) pci_assign_resource(struct pci_dev *dev, int i);
int __attribute__((__warn_unused_result__)) pci_reassign_resource(struct pci_dev *dev, int i, resource_size_t add_size, resource_size_t align);
void pci_release_resource(struct pci_dev *dev, int resno);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_rebar_bytes_to_size(u64 bytes)
{
 bytes = ( __builtin_constant_p(bytes) ? ( ((bytes) == 1) ? 1 : (1UL << (( __builtin_constant_p((bytes) - 1) ? (((bytes) - 1) < 2 ? 0 : 63 - __builtin_clzll((bytes) - 1)) : (sizeof((bytes) - 1) <= 4) ? __ilog2_u32((bytes) - 1) : __ilog2_u64((bytes) - 1) ) + 1)) ) : __roundup_pow_of_two(bytes) );


 return __builtin_choose_expr(((!!(sizeof((typeof(( __builtin_constant_p(bytes) ? ((bytes) < 2 ? 0 : 63 - __builtin_clzll(bytes)) : (sizeof(bytes) <= 4) ? __ilog2_u32(bytes) : __ilog2_u64(bytes) )) *)1 == (typeof(20) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(( __builtin_constant_p(bytes) ? ((bytes) < 2 ? 0 : 63 - __builtin_clzll(bytes)) : (sizeof(bytes) <= 4) ? __ilog2_u32(bytes) : __ilog2_u64(bytes) )) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(20) * 0l)) : (int *)8))))), ((( __builtin_constant_p(bytes) ? ((bytes) < 2 ? 0 : 63 - __builtin_clzll(bytes)) : (sizeof(bytes) <= 4) ? __ilog2_u32(bytes) : __ilog2_u64(bytes) )) > (20) ? (( __builtin_constant_p(bytes) ? ((bytes) < 2 ? 0 : 63 - __builtin_clzll(bytes)) : (sizeof(bytes) <= 4) ? __ilog2_u32(bytes) : __ilog2_u64(bytes) )) : (20)), ({ typeof(( __builtin_constant_p(bytes) ? ((bytes) < 2 ? 0 : 63 - __builtin_clzll(bytes)) : (sizeof(bytes) <= 4) ? __ilog2_u32(bytes) : __ilog2_u64(bytes) )) __UNIQUE_ID___x244 = (( __builtin_constant_p(bytes) ? ((bytes) < 2 ? 0 : 63 - __builtin_clzll(bytes)) : (sizeof(bytes) <= 4) ? __ilog2_u32(bytes) : __ilog2_u64(bytes) )); typeof(20) __UNIQUE_ID___y245 = (20); ((__UNIQUE_ID___x244) > (__UNIQUE_ID___y245) ? (__UNIQUE_ID___x244) : (__UNIQUE_ID___y245)); })) - 20;
}

u32 pci_rebar_get_possible_sizes(struct pci_dev *pdev, int bar);
int __attribute__((__warn_unused_result__)) pci_resize_resource(struct pci_dev *dev, int i, int size);
int pci_select_bars(struct pci_dev *dev, unsigned long flags);
bool pci_device_is_present(struct pci_dev *pdev);
void pci_ignore_hotplug(struct pci_dev *dev);
struct pci_dev *pci_real_dma_dev(struct pci_dev *dev);
int pci_status_get_and_clear_errors(struct pci_dev *pdev);

int __attribute__((__format__(printf, 6, 7))) pci_request_irq(struct pci_dev *dev, unsigned int nr,
  irq_handler_t handler, irq_handler_t thread_fn, void *dev_id,
  const char *fmt, ...);
void pci_free_irq(struct pci_dev *dev, unsigned int nr, void *dev_id);


int pci_enable_rom(struct pci_dev *pdev);
void pci_disable_rom(struct pci_dev *pdev);
void __attribute__((__warn_unused_result__)) *pci_map_rom(struct pci_dev *pdev, size_t *size);
void pci_unmap_rom(struct pci_dev *pdev, void *rom);


int pci_save_state(struct pci_dev *dev);
void pci_restore_state(struct pci_dev *dev);
struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev);
int pci_load_saved_state(struct pci_dev *dev,
    struct pci_saved_state *state);
int pci_load_and_free_saved_state(struct pci_dev *dev,
      struct pci_saved_state **state);
int pci_platform_power_transition(struct pci_dev *dev, pci_power_t state);
int pci_set_power_state(struct pci_dev *dev, pci_power_t state);
pci_power_t pci_choose_state(struct pci_dev *dev, pm_message_t state);
bool pci_pme_capable(struct pci_dev *dev, pci_power_t state);
void pci_pme_active(struct pci_dev *dev, bool enable);
int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable);
int pci_wake_from_d3(struct pci_dev *dev, bool enable);
int pci_prepare_to_sleep(struct pci_dev *dev);
int pci_back_from_sleep(struct pci_dev *dev);
bool pci_dev_run_wake(struct pci_dev *dev);
void pci_d3cold_enable(struct pci_dev *dev);
void pci_d3cold_disable(struct pci_dev *dev);
bool pcie_relaxed_ordering_enabled(struct pci_dev *dev);
void pci_resume_bus(struct pci_bus *bus);
void pci_bus_set_current_state(struct pci_bus *bus, pci_power_t state);


void set_pcie_port_type(struct pci_dev *pdev);
void set_pcie_hotplug_bridge(struct pci_dev *pdev);


unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *bridge);
unsigned int pci_rescan_bus(struct pci_bus *bus);
void pci_lock_rescan_remove(void);
void pci_unlock_rescan_remove(void);


ssize_t pci_read_vpd(struct pci_dev *dev, loff_t pos, size_t count, void *buf);
ssize_t pci_write_vpd(struct pci_dev *dev, loff_t pos, size_t count, const void *buf);


resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *dev, int idx);
void pci_bus_assign_resources(const struct pci_bus *bus);
void pci_bus_claim_resources(struct pci_bus *bus);
void pci_bus_size_bridges(struct pci_bus *bus);
int pci_claim_resource(struct pci_dev *, int);
int pci_claim_bridge_resource(struct pci_dev *bridge, int i);
void pci_assign_unassigned_resources(void);
void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
void pci_assign_unassigned_bus_resources(struct pci_bus *bus);
void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus);
int pci_reassign_bridge_resources(struct pci_dev *bridge, unsigned long type);
void pdev_enable_device(struct pci_dev *);
int pci_enable_resources(struct pci_dev *, int mask);
void pci_assign_irq(struct pci_dev *dev);
struct resource *pci_find_resource(struct pci_dev *dev, struct resource *res);

int __attribute__((__warn_unused_result__)) pci_request_regions(struct pci_dev *, const char *);
int __attribute__((__warn_unused_result__)) pci_request_regions_exclusive(struct pci_dev *, const char *);
void pci_release_regions(struct pci_dev *);
int __attribute__((__warn_unused_result__)) pci_request_region(struct pci_dev *, int, const char *);
void pci_release_region(struct pci_dev *, int);
int pci_request_selected_regions(struct pci_dev *, int, const char *);
int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);
void pci_release_selected_regions(struct pci_dev *, int);


void pci_add_resource(struct list_head *resources, struct resource *res);
void pci_add_resource_offset(struct list_head *resources, struct resource *res,
        resource_size_t offset);
void pci_free_resource_list(struct list_head *resources);
void pci_bus_add_resource(struct pci_bus *bus, struct resource *res,
     unsigned int flags);
struct resource *pci_bus_resource_n(const struct pci_bus *bus, int n);
void pci_bus_remove_resources(struct pci_bus *bus);
int devm_request_pci_bus_resources(struct device *dev,
       struct list_head *resources);


int pci_bridge_secondary_bus_reset(struct pci_dev *dev);






int __attribute__((__warn_unused_result__)) pci_bus_alloc_resource(struct pci_bus *bus,
   struct resource *res, resource_size_t size,
   resource_size_t align, resource_size_t min,
   unsigned long type_mask,
   resource_size_t (*alignf)(void *,
        const struct resource *,
        resource_size_t,
        resource_size_t),
   void *alignf_data);


int pci_register_io_range(struct fwnode_handle *fwnode, phys_addr_t addr,
   resource_size_t size);
unsigned long pci_address_to_pio(phys_addr_t addr);
phys_addr_t pci_pio_to_address(unsigned long pio);
int pci_remap_iospace(const struct resource *res, phys_addr_t phys_addr);
int devm_pci_remap_iospace(struct device *dev, const struct resource *res,
      phys_addr_t phys_addr);
void pci_unmap_iospace(struct resource *res);
void *devm_pci_remap_cfgspace(struct device *dev,
          resource_size_t offset,
          resource_size_t size);
void *devm_pci_remap_cfg_resource(struct device *dev,
       struct resource *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pci_bus_addr_t pci_bus_address(struct pci_dev *pdev, int bar)
{
 struct pci_bus_region region;

 pcibios_resource_to_bus(pdev->bus, &region, &pdev->resource[bar]);
 return region.start;
}


int __attribute__((__warn_unused_result__)) __pci_register_driver(struct pci_driver *, struct module *,
           const char *mod_name);





void pci_unregister_driver(struct pci_driver *dev);
# 1465 "./include/linux/pci.h"
struct pci_driver *pci_dev_driver(const struct pci_dev *dev);
int pci_add_dynid(struct pci_driver *drv,
    unsigned int vendor, unsigned int device,
    unsigned int subvendor, unsigned int subdevice,
    unsigned int class, unsigned int class_mask,
    unsigned long driver_data);
const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,
      struct pci_dev *dev);
int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max,
      int pass);

void pci_walk_bus(struct pci_bus *top, int (*cb)(struct pci_dev *, void *),
    void *userdata);
int pci_cfg_space_size(struct pci_dev *dev);
unsigned char pci_bus_max_busnr(struct pci_bus *bus);
void pci_setup_bridge(struct pci_bus *bus);
resource_size_t pcibios_window_alignment(struct pci_bus *bus,
      unsigned long type);




int pci_set_vga_state(struct pci_dev *pdev, bool decode,
        unsigned int command_bits, u32 flags);
# 1503 "./include/linux/pci.h"
# 1 "./include/linux/dmapool.h" 1
# 14 "./include/linux/dmapool.h"
# 1 "./include/linux/scatterlist.h" 1
# 11 "./include/linux/scatterlist.h"
struct scatterlist {
 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;



};
# 36 "./include/linux/scatterlist.h"
struct sg_table {
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;
};

struct sg_append_table {
 struct sg_table sgt;
 struct scatterlist *prv;
 unsigned int total_nents;
};
# 87 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & (0x01UL | 0x02UL);





 do { if (__builtin_expect(!!((unsigned long) page & (0x01UL | 0x02UL)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/scatterlist.h"), "i" (95), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 do { if (__builtin_expect(!!(((sg)->page_link & 0x01UL)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/scatterlist.h"), "i" (97), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 sg->page_link = page_link | (unsigned long) page;
}
# 116 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *sg_page(struct scatterlist *sg)
{

 do { if (__builtin_expect(!!(((sg)->page_link & 0x01UL)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/scatterlist.h"), "i" (127), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 return (struct page *)((sg)->page_link & ~(0x01UL | 0x02UL));
}
# 139 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_set_buf(struct scatterlist *sg, const void *buf,
         unsigned int buflen)
{

 do { if (__builtin_expect(!!(!({ unsigned long _addr = (unsigned long)buf; (unsigned long)(_addr) >= (0xffffffe000000000UL) && (((((((({ unsigned long _x = (unsigned long)(_addr); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) >= (riscv_pfn_base)) && (((((((({ unsigned long _x = (unsigned long)(_addr); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) - (riscv_pfn_base)) < max_mapnr)); })), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/scatterlist.h"), "i" (143), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 sg_set_page(sg, ((mem_map + ((((((({ unsigned long _x = (unsigned long)(buf); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) - (riscv_pfn_base)))), buflen, ((unsigned long)(buf) & ~(~(((1UL) << (12)) - 1))));
}
# 168 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sg_chain(struct scatterlist *chain_sg,
         struct scatterlist *sgl)
{



 chain_sg->offset = 0;
 chain_sg->length = 0;





 chain_sg->page_link = ((unsigned long) sgl | 0x01UL) & ~0x02UL;
}
# 194 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{
 __sg_chain(&prv[prv_nents - 1], sgl);
}
# 209 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_mark_end(struct scatterlist *sg)
{



 sg->page_link |= 0x02UL;
 sg->page_link &= ~0x01UL;
}
# 226 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_unmark_end(struct scatterlist *sg)
{
 sg->page_link &= ~0x02UL;
}
# 241 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t sg_phys(struct scatterlist *sg)
{
 return ((((phys_addr_t)(((unsigned long)((sg_page(sg)) - mem_map) + (riscv_pfn_base))) << (12)))) + sg->offset;
}
# 256 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_init_marker(struct scatterlist *sgl,
      unsigned int nents)
{
 sg_mark_end(&sgl[nents - 1]);
}

int sg_nents(struct scatterlist *sg);
int sg_nents_for_len(struct scatterlist *sg, u64 len);
struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, const void *, unsigned int);
int sg_split(struct scatterlist *in, const int in_mapped_nents,
      const off_t skip, const int nb_splits,
      const size_t *split_sizes,
      struct scatterlist **out, int *out_mapped_nents,
      gfp_t gfp_mask);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, unsigned int,
       sg_free_fn *, unsigned int);
void sg_free_table(struct sg_table *);
void sg_free_append_table(struct sg_append_table *sgt);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int,
       struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
int sg_alloc_append_table_from_pages(struct sg_append_table *sgt,
         struct page **pages, unsigned int n_pages,
         unsigned int offset, unsigned long size,
         unsigned int max_segment,
         unsigned int left_pages, gfp_t gfp_mask);
int sg_alloc_table_from_pages_segment(struct sg_table *sgt, struct page **pages,
          unsigned int n_pages, unsigned int offset,
          unsigned long size,
          unsigned int max_segment, gfp_t gfp_mask);
# 325 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sg_alloc_table_from_pages(struct sg_table *sgt,
         struct page **pages,
         unsigned int n_pages,
         unsigned int offset,
         unsigned long size, gfp_t gfp_mask)
{
 return sg_alloc_table_from_pages_segment(sgt, pages, n_pages, offset,
       size, (~0U), gfp_mask);
}
# 346 "./include/linux/scatterlist.h"
size_t sg_copy_buffer(struct scatterlist *sgl, unsigned int nents, void *buf,
        size_t buflen, off_t skip, bool to_buffer);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      const void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);

size_t sg_pcopy_from_buffer(struct scatterlist *sgl, unsigned int nents,
       const void *buf, size_t buflen, off_t skip);
size_t sg_pcopy_to_buffer(struct scatterlist *sgl, unsigned int nents,
     void *buf, size_t buflen, off_t skip);
size_t sg_zero_buffer(struct scatterlist *sgl, unsigned int nents,
         size_t buflen, off_t skip);
# 387 "./include/linux/scatterlist.h"
void sg_free_table_chained(struct sg_table *table,
      unsigned nents_first_chunk);
int sg_alloc_table_chained(struct sg_table *table, int nents,
      struct scatterlist *first_chunk,
      unsigned nents_first_chunk);
# 404 "./include/linux/scatterlist.h"
struct sg_page_iter {
 struct scatterlist *sg;
 unsigned int sg_pgoffset;


 unsigned int __nents;
 int __pg_advance;

};
# 421 "./include/linux/scatterlist.h"
struct sg_dma_page_iter {
 struct sg_page_iter base;
};

bool __sg_page_iter_next(struct sg_page_iter *piter);
bool __sg_page_iter_dma_next(struct sg_dma_page_iter *dma_iter);
void __sg_page_iter_start(struct sg_page_iter *piter,
     struct scatterlist *sglist, unsigned int nents,
     unsigned long pgoffset);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *sg_page_iter_page(struct sg_page_iter *piter)
{
 return ((sg_page(piter->sg)) + (piter->sg_pgoffset));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t
sg_page_iter_dma_address(struct sg_dma_page_iter *dma_iter)
{
 return ((dma_iter->base.sg)->dma_address) +
        (dma_iter->base.sg_pgoffset << (12));
}
# 529 "./include/linux/scatterlist.h"
struct sg_mapping_iter {

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;
 struct sg_page_iter piter;


 unsigned int __offset;
 unsigned int __remaining;
 unsigned int __flags;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_skip(struct sg_mapping_iter *miter, off_t offset);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);
# 15 "./include/linux/dmapool.h" 2


struct device;



struct dma_pool *dma_pool_create(const char *name, struct device *dev,
   size_t size, size_t align, size_t allocation);

void dma_pool_destroy(struct dma_pool *pool);

void *dma_pool_alloc(struct dma_pool *pool, gfp_t mem_flags,
       dma_addr_t *handle);
void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t addr);




struct dma_pool *dmam_pool_create(const char *name, struct device *dev,
      size_t size, size_t align, size_t allocation);
void dmam_pool_destroy(struct dma_pool *pool);
# 52 "./include/linux/dmapool.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_pool_zalloc(struct dma_pool *pool, gfp_t mem_flags,
        dma_addr_t *handle)
{
 return dma_pool_alloc(pool, mem_flags | (( gfp_t)0x100u), handle);
}
# 1504 "./include/linux/pci.h" 2
# 1514 "./include/linux/pci.h"
struct msix_entry {
 u32 vector;
 u16 entry;
};


int pci_msi_vec_count(struct pci_dev *dev);
void pci_disable_msi(struct pci_dev *dev);
int pci_msix_vec_count(struct pci_dev *dev);
void pci_disable_msix(struct pci_dev *dev);
void pci_restore_msi_state(struct pci_dev *dev);
int pci_msi_enabled(void);
int pci_enable_msi(struct pci_dev *dev);
int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
     int minvec, int maxvec);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_enable_msix_exact(struct pci_dev *dev,
     struct msix_entry *entries, int nvec)
{
 int rc = pci_enable_msix_range(dev, entries, nvec, nvec);
 if (rc < 0)
  return rc;
 return 0;
}
int pci_alloc_irq_vectors_affinity(struct pci_dev *dev, unsigned int min_vecs,
       unsigned int max_vecs, unsigned int flags,
       struct irq_affinity *affd);

void pci_free_irq_vectors(struct pci_dev *dev);
int pci_irq_vector(struct pci_dev *dev, unsigned int nr);
const struct cpumask *pci_irq_get_affinity(struct pci_dev *pdev, int vec);
# 1604 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_irqd_intx_xlate(struct irq_domain *d,
          struct device_node *node,
          const u32 *intspec,
          unsigned int intsize,
          unsigned long *out_hwirq,
          unsigned int *out_type)
{
 const u32 intx = intspec[0];

 if (intx < PCI_INTERRUPT_INTA || intx > PCI_INTERRUPT_INTD)
  return -22;

 *out_hwirq = intx - PCI_INTERRUPT_INTA;
 return 0;
}


extern bool pcie_ports_disabled;
extern bool pcie_ports_native;
# 1637 "./include/linux/pci.h"
int pci_disable_link_state(struct pci_dev *pdev, int state);
int pci_disable_link_state_locked(struct pci_dev *pdev, int state);
void pcie_no_aspm(void);
bool pcie_aspm_support_enabled(void);
bool pcie_aspm_enabled(struct pci_dev *pdev);
# 1655 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_aer_available(void) { return false; }


bool pci_ats_disabled(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_enable_ptm(struct pci_dev *dev, u8 *granularity)
{ return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pcie_ptm_enabled(struct pci_dev *dev)
{ return false; }


void pci_cfg_access_lock(struct pci_dev *dev);
bool pci_cfg_access_trylock(struct pci_dev *dev);
void pci_cfg_access_unlock(struct pci_dev *dev);

int pci_dev_trylock(struct pci_dev *dev);
void pci_dev_unlock(struct pci_dev *dev);







extern int pci_domains_supported;
# 1696 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_domain_nr(struct pci_bus *bus)
{
 return bus->domain_nr;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_pci_bus_find_domain_nr(struct pci_bus *bus)
{ return 0; }

int pci_bus_find_domain_nr(struct pci_bus *bus, struct device *parent);



typedef int (*arch_set_vga_state_t)(struct pci_dev *pdev, bool decode,
        unsigned int command_bits, u32 flags);
void pci_register_set_vga_state(arch_set_vga_state_t func);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_request_io_regions(struct pci_dev *pdev, const char *name)
{
 return pci_request_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000100), name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_release_io_regions(struct pci_dev *pdev)
{
 return pci_release_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000100));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_request_mem_regions(struct pci_dev *pdev, const char *name)
{
 return pci_request_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000200), name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_release_mem_regions(struct pci_dev *pdev)
{
 return pci_release_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000200));
}
# 1878 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs,
        unsigned int max_vecs, unsigned int flags)
{
 return pci_alloc_irq_vectors_affinity(dev, min_vecs, max_vecs, flags,
           ((void *)0));
}



# 1 "./arch/riscv/include/asm/pci.h" 1
# 11 "./arch/riscv/include/asm/pci.h"
# 1 "./include/linux/dma-mapping.h" 1








# 1 "./include/linux/dma-direction.h" 1




enum dma_data_direction {
 DMA_BIDIRECTIONAL = 0,
 DMA_TO_DEVICE = 1,
 DMA_FROM_DEVICE = 2,
 DMA_NONE = 3,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_dma_direction(enum dma_data_direction dir)
{
 return dir == DMA_BIDIRECTIONAL || dir == DMA_TO_DEVICE ||
  dir == DMA_FROM_DEVICE;
}
# 10 "./include/linux/dma-mapping.h" 2


# 1 "./include/linux/mem_encrypt.h" 1
# 21 "./include/linux/mem_encrypt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_encrypt_active(void) { return false; }
# 13 "./include/linux/dma-mapping.h" 2
# 83 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_mapping_error(struct device *dev,
  dma_addr_t dma_addr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_map_single(struct device *dev, const void *addr,
  unsigned long len)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
 debug_dma_mapping_error(dev, dma_addr);

 if (__builtin_expect(!!(dma_addr == (~(dma_addr_t)0)), 0))
  return -12;
 return 0;
}

dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page,
  size_t offset, size_t size, enum dma_data_direction dir,
  unsigned long attrs);
void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size,
  enum dma_data_direction dir, unsigned long attrs);
unsigned int dma_map_sg_attrs(struct device *dev, struct scatterlist *sg,
  int nents, enum dma_data_direction dir, unsigned long attrs);
void dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg,
          int nents, enum dma_data_direction dir,
          unsigned long attrs);
int dma_map_sgtable(struct device *dev, struct sg_table *sgt,
  enum dma_data_direction dir, unsigned long attrs);
dma_addr_t dma_map_resource(struct device *dev, phys_addr_t phys_addr,
  size_t size, enum dma_data_direction dir, unsigned long attrs);
void dma_unmap_resource(struct device *dev, dma_addr_t addr, size_t size,
  enum dma_data_direction dir, unsigned long attrs);
void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size,
  enum dma_data_direction dir);
void dma_sync_single_for_device(struct device *dev, dma_addr_t addr,
  size_t size, enum dma_data_direction dir);
void dma_sync_sg_for_cpu(struct device *dev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir);
void dma_sync_sg_for_device(struct device *dev, struct scatterlist *sg,
         int nelems, enum dma_data_direction dir);
void *dma_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
  gfp_t flag, unsigned long attrs);
void dma_free_attrs(struct device *dev, size_t size, void *cpu_addr,
  dma_addr_t dma_handle, unsigned long attrs);
void *dmam_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
  gfp_t gfp, unsigned long attrs);
void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
  dma_addr_t dma_handle);
int dma_get_sgtable_attrs(struct device *dev, struct sg_table *sgt,
  void *cpu_addr, dma_addr_t dma_addr, size_t size,
  unsigned long attrs);
int dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma,
  void *cpu_addr, dma_addr_t dma_addr, size_t size,
  unsigned long attrs);
bool dma_can_mmap(struct device *dev);
int dma_supported(struct device *dev, u64 mask);
int dma_set_mask(struct device *dev, u64 mask);
int dma_set_coherent_mask(struct device *dev, u64 mask);
u64 dma_get_required_mask(struct device *dev);
size_t dma_max_mapping_size(struct device *dev);
bool dma_need_sync(struct device *dev, dma_addr_t dma_addr);
unsigned long dma_get_merge_boundary(struct device *dev);
struct sg_table *dma_alloc_noncontiguous(struct device *dev, size_t size,
  enum dma_data_direction dir, gfp_t gfp, unsigned long attrs);
void dma_free_noncontiguous(struct device *dev, size_t size,
  struct sg_table *sgt, enum dma_data_direction dir);
void *dma_vmap_noncontiguous(struct device *dev, size_t size,
  struct sg_table *sgt);
void dma_vunmap_noncontiguous(struct device *dev, void *vaddr);
int dma_mmap_noncontiguous(struct device *dev, struct vm_area_struct *vma,
  size_t size, struct sg_table *sgt);
# 302 "./include/linux/dma-mapping.h"
struct page *dma_alloc_pages(struct device *dev, size_t size,
  dma_addr_t *dma_handle, enum dma_data_direction dir, gfp_t gfp);
void dma_free_pages(struct device *dev, size_t size, struct page *page,
  dma_addr_t dma_handle, enum dma_data_direction dir);
int dma_mmap_pages(struct device *dev, struct vm_area_struct *vma,
  size_t size, struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_alloc_noncoherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, enum dma_data_direction dir, gfp_t gfp)
{
 struct page *page = dma_alloc_pages(dev, size, dma_handle, dir, gfp);
 return page ? lowmem_page_address(page) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_free_noncoherent(struct device *dev, size_t size,
  void *vaddr, dma_addr_t dma_handle, enum dma_data_direction dir)
{
 dma_free_pages(dev, size, ((mem_map + ((((((({ unsigned long _x = (unsigned long)(vaddr); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) - (riscv_pfn_base)))), dma_handle, dir);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr,
  size_t size, enum dma_data_direction dir, unsigned long attrs)
{

 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(is_vmalloc_addr(ptr)); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("%s %s: " "rejecting DMA map of vmalloc memory\n", dev_driver_string(dev), dev_name(dev)); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (327), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); }))

  return (~(dma_addr_t)0);
 debug_dma_map_single(dev, ptr, size);
 return dma_map_page_attrs(dev, ((mem_map + ((((((({ unsigned long _x = (unsigned long)(ptr); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) - (riscv_pfn_base)))), ((unsigned long)(ptr) & ~(~(((1UL) << (12)) - 1))),
   size, dir, attrs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr,
  size_t size, enum dma_data_direction dir, unsigned long attrs)
{
 return dma_unmap_page_attrs(dev, addr, size, dir, attrs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_single_range_for_cpu(struct device *dev,
  dma_addr_t addr, unsigned long offset, size_t size,
  enum dma_data_direction dir)
{
 return dma_sync_single_for_cpu(dev, addr + offset, size, dir);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_single_range_for_device(struct device *dev,
  dma_addr_t addr, unsigned long offset, size_t size,
  enum dma_data_direction dir)
{
 return dma_sync_single_for_device(dev, addr + offset, size, dir);
}
# 365 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_unmap_sgtable(struct device *dev, struct sg_table *sgt,
  enum dma_data_direction dir, unsigned long attrs)
{
 dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents, dir, attrs);
}
# 383 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_sgtable_for_cpu(struct device *dev,
  struct sg_table *sgt, enum dma_data_direction dir)
{
 dma_sync_sg_for_cpu(dev, sgt->sgl, sgt->orig_nents, dir);
}
# 400 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_sgtable_for_device(struct device *dev,
  struct sg_table *sgt, enum dma_data_direction dir)
{
 dma_sync_sg_for_device(dev, sgt->sgl, sgt->orig_nents, dir);
}
# 415 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_alloc_coherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t gfp)
{
 return dma_alloc_attrs(dev, size, dma_handle, gfp,
   (gfp & (( gfp_t)0x2000u)) ? (1UL << 8) : 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_free_coherent(struct device *dev, size_t size,
  void *cpu_addr, dma_addr_t dma_handle)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_handle, 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 dma_get_mask(struct device *dev)
{
 if (dev->dma_mask && *dev->dma_mask)
  return *dev->dma_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
 int rc = dma_set_mask(dev, mask);
 if (rc == 0)
  dma_set_coherent_mask(dev, mask);
 return rc;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_coerce_mask_and_coherent(struct device *dev, u64 mask)
{
 dev->dma_mask = &dev->coherent_dma_mask;
 return dma_set_mask_and_coherent(dev, mask);
}
# 468 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_addressing_limited(struct device *dev)
{
 return ({ typeof(dma_get_mask(dev)) __x = (dma_get_mask(dev)); typeof(dev->bus_dma_limit) __y = (dev->bus_dma_limit); __x == 0 ? __y : ((__y == 0) ? __x : __builtin_choose_expr(((!!(sizeof((typeof(__x) *)1 == (typeof(__y) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(__x) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(__y) * 0l)) : (int *)8))))), ((__x) < (__y) ? (__x) : (__y)), ({ typeof(__x) __UNIQUE_ID___x246 = (__x); typeof(__y) __UNIQUE_ID___y247 = (__y); ((__UNIQUE_ID___x246) < (__UNIQUE_ID___y247) ? (__UNIQUE_ID___x246) : (__UNIQUE_ID___y247)); }))); }) <
       dma_get_required_mask(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dma_get_max_seg_size(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->max_segment_size)
  return dev->dma_parms->max_segment_size;
 return 0x00010000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_max_seg_size(struct device *dev, unsigned int size)
{
 if (dev->dma_parms) {
  dev->dma_parms->max_segment_size = size;
  return 0;
 }
 return -5;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dma_get_seg_boundary(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->segment_boundary_mask)
  return dev->dma_parms->segment_boundary_mask;
 return (~0UL);
}
# 508 "./include/linux/dma-mapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dma_get_seg_boundary_nr_pages(struct device *dev,
  unsigned int page_shift)
{
 if (!dev)
  return (((u32)~0U) >> page_shift) + 1;
 return (dma_get_seg_boundary(dev) >> page_shift) + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_seg_boundary(struct device *dev, unsigned long mask)
{
 if (dev->dma_parms) {
  dev->dma_parms->segment_boundary_mask = mask;
  return 0;
 }
 return -5;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dma_get_min_align_mask(struct device *dev)
{
 if (dev->dma_parms)
  return dev->dma_parms->min_align_mask;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_min_align_mask(struct device *dev,
  unsigned int min_align_mask)
{
 if (({ int __ret_warn_on = !!(!dev->dma_parms); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (535), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return -5;
 dev->dma_parms->min_align_mask = min_align_mask;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_get_cache_alignment(void)
{



 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dmam_alloc_coherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t gfp)
{
 return dmam_alloc_attrs(dev, size, dma_handle, gfp,
   (gfp & (( gfp_t)0x2000u)) ? (1UL << 8) : 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_alloc_wc(struct device *dev, size_t size,
     dma_addr_t *dma_addr, gfp_t gfp)
{
 unsigned long attrs = (1UL << 2);

 if (gfp & (( gfp_t)0x2000u))
  attrs |= (1UL << 8);

 return dma_alloc_attrs(dev, size, dma_addr, gfp, attrs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_free_wc(struct device *dev, size_t size,
          void *cpu_addr, dma_addr_t dma_addr)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_addr,
         (1UL << 2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_mmap_wc(struct device *dev,
         struct vm_area_struct *vma,
         void *cpu_addr, dma_addr_t dma_addr,
         size_t size)
{
 return dma_mmap_attrs(dev, vma, cpu_addr, dma_addr, size,
         (1UL << 2));
}
# 12 "./arch/riscv/include/asm/pci.h" 2
# 23 "./arch/riscv/include/asm/pci.h"
extern int isa_dma_bridge_buggy;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_get_legacy_ide_irq(struct pci_dev *dev, int channel)
{

 return -19;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_proc_domain(struct pci_bus *bus)
{

 return 1;
}
# 1889 "./include/linux/pci.h" 2
# 1902 "./include/linux/pci.h"
int pci_mmap_resource_range(struct pci_dev *dev, int bar,
       struct vm_area_struct *vma,
       enum pci_mmap_state mmap_state, int write_combine);
int pci_mmap_page_range(struct pci_dev *pdev, int bar,
   struct vm_area_struct *vma,
   enum pci_mmap_state mmap_state, int write_combine);
# 1942 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_get_drvdata(struct pci_dev *pdev)
{
 return dev_get_drvdata(&pdev->dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
 dev_set_drvdata(&pdev->dev, data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *pci_name(const struct pci_dev *pdev)
{
 return dev_name(&pdev->dev);
}

void pci_resource_to_user(const struct pci_dev *dev, int bar,
     const struct resource *rsrc,
     resource_size_t *start, resource_size_t *end);
# 1968 "./include/linux/pci.h"
struct pci_fixup {
 u16 vendor;
 u16 device;
 u32 class;
 unsigned int class_shift;



 void (*hook)(struct pci_dev *dev);

};

enum pci_fixup_pass {
 pci_fixup_early,
 pci_fixup_header,
 pci_fixup_final,
 pci_fixup_enable,
 pci_fixup_resume,
 pci_fixup_suspend,
 pci_fixup_resume_early,
 pci_fixup_suspend_late,
};
# 2096 "./include/linux/pci.h"
void pci_fixup_device(enum pci_fixup_pass pass, struct pci_dev *dev);





void *pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen);
void pcim_iounmap(struct pci_dev *pdev, void *addr);
void * const *pcim_iomap_table(struct pci_dev *pdev);
int pcim_iomap_regions(struct pci_dev *pdev, int mask, const char *name);
int pcim_iomap_regions_request_all(struct pci_dev *pdev, int mask,
       const char *name);
void pcim_iounmap_regions(struct pci_dev *pdev, int mask);

extern int pci_pci_problems;
# 2119 "./include/linux/pci.h"
extern unsigned long pci_cardbus_io_size;
extern unsigned long pci_cardbus_mem_size;
extern u8 pci_dfl_cache_line_size;
extern u8 pci_cache_line_size;


void pcibios_disable_device(struct pci_dev *dev);
void pcibios_set_master(struct pci_dev *dev);
int pcibios_set_pcie_reset_state(struct pci_dev *dev,
     enum pcie_reset_state state);
int pcibios_add_device(struct pci_dev *dev);
void pcibios_release_device(struct pci_dev *dev);

void pcibios_penalize_isa_irq(int irq, int active);



int pcibios_alloc_irq(struct pci_dev *dev);
void pcibios_free_irq(struct pci_dev *dev);
resource_size_t pcibios_default_alignment(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_mmcfg_early_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_mmcfg_late_init(void) { }


int pci_ext_cfg_avail(void);

void *pci_ioremap_bar(struct pci_dev *pdev, int bar);
void *pci_ioremap_wc_bar(struct pci_dev *pdev, int bar);
# 2176 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_iov_virtfn_bus(struct pci_dev *dev, int id)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_iov_virtfn_devfn(struct pci_dev *dev, int id)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn)
{ return -19; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_iov_sysfs_link(struct pci_dev *dev,
         struct pci_dev *virtfn, int id)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_iov_add_virtfn(struct pci_dev *dev, int id)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_iov_remove_virtfn(struct pci_dev *dev,
      int id) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_disable_sriov(struct pci_dev *dev) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_num_vf(struct pci_dev *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_vfs_assigned(struct pci_dev *dev)
{ return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_sriov_set_totalvfs(struct pci_dev *dev, u16 numvfs)
{ return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_sriov_get_totalvfs(struct pci_dev *dev)
{ return 0; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t pci_iov_resource_size(struct pci_dev *dev, int resno)
{ return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_vf_drivers_autoprobe(struct pci_dev *dev, bool probe) { }
# 2228 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_pcie_cap(struct pci_dev *dev)
{
 return dev->pcie_cap;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_pcie(struct pci_dev *dev)
{
 return pci_pcie_cap(dev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 pcie_caps_reg(const struct pci_dev *dev)
{
 return dev->pcie_flags_reg;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_pcie_type(const struct pci_dev *dev)
{
 return (pcie_caps_reg(dev) & 0x00f0) >> 4;
}
# 2269 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *pcie_find_root_port(struct pci_dev *dev)
{
 while (dev) {
  if (pci_is_pcie(dev) &&
      pci_pcie_type(dev) == 0x4)
   return dev;
  dev = pci_upstream_bridge(dev);
 }

 return ((void *)0);
}

void pci_request_acs(void);
bool pci_acs_enabled(struct pci_dev *pdev, u16 acs_flags);
bool pci_acs_path_enabled(struct pci_dev *start,
     struct pci_dev *end, u16 acs_flags);
int pci_enable_atomic_ops_to_root(struct pci_dev *dev, u32 cap_mask);
# 2312 "./include/linux/pci.h"
void *pci_vpd_alloc(struct pci_dev *dev, unsigned int *size);
# 2322 "./include/linux/pci.h"
int pci_vpd_find_id_string(const u8 *buf, unsigned int len, unsigned int *size);
# 2334 "./include/linux/pci.h"
int pci_vpd_find_ro_info_keyword(const void *buf, unsigned int len,
     const char *kw, unsigned int *size);
# 2344 "./include/linux/pci.h"
int pci_vpd_check_csum(const void *buf, unsigned int len);



struct device_node;
struct irq_domain;
struct irq_domain *pci_host_bridge_of_msi_domain(struct pci_bus *bus);
bool pci_host_of_has_msi_map(struct device *dev);


struct device_node *pcibios_get_phb_of_node(struct pci_bus *bus);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *
pci_device_to_OF_node(const struct pci_dev *pdev)
{
 return pdev ? pdev->dev.of_node : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *pci_bus_to_OF_node(struct pci_bus *bus)
{
 return bus ? bus->dev.of_node : ((void *)0);
}
# 2380 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *
pci_host_bridge_acpi_msi_domain(struct pci_bus *bus) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_pr3_present(struct pci_dev *pdev) { return false; }
# 2392 "./include/linux/pci.h"
void pci_add_dma_alias(struct pci_dev *dev, u8 devfn_from, unsigned nr_devfns);
bool pci_devs_are_dma_aliases(struct pci_dev *dev1, struct pci_dev *dev2);
int pci_for_each_dma_alias(struct pci_dev *pdev,
      int (*fn)(struct pci_dev *pdev,
         u16 alias, void *data), void *data);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_set_dev_assigned(struct pci_dev *pdev)
{
 pdev->dev_flags |= PCI_DEV_FLAGS_ASSIGNED;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_clear_dev_assigned(struct pci_dev *pdev)
{
 pdev->dev_flags &= ~PCI_DEV_FLAGS_ASSIGNED;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_dev_assigned(struct pci_dev *pdev)
{
 return (pdev->dev_flags & PCI_DEV_FLAGS_ASSIGNED) == PCI_DEV_FLAGS_ASSIGNED;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_ari_enabled(struct pci_bus *bus)
{
 return bus->self && bus->self->ari_enabled;
}
# 2431 "./include/linux/pci.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_thunderbolt_attached(struct pci_dev *pdev)
{
 struct pci_dev *parent = pdev;

 if (pdev->is_thunderbolt)
  return true;

 while ((parent = pci_upstream_bridge(parent)))
  if (parent->is_thunderbolt)
   return true;

 return false;
}


void pci_uevent_ers(struct pci_dev *pdev, enum pci_ers_result err_type);



# 1 "./include/linux/pci-dma-compat.h" 1
# 16 "./include/linux/pci-dma-compat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
pci_alloc_consistent(struct pci_dev *hwdev, size_t size,
       dma_addr_t *dma_handle)
{
 return dma_alloc_coherent(&hwdev->dev, size, dma_handle, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
pci_zalloc_consistent(struct pci_dev *hwdev, size_t size,
        dma_addr_t *dma_handle)
{
 return dma_alloc_coherent(&hwdev->dev, size, dma_handle, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_free_consistent(struct pci_dev *hwdev, size_t size,
      void *vaddr, dma_addr_t dma_handle)
{
 dma_free_coherent(&hwdev->dev, size, vaddr, dma_handle);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t
pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
 return dma_map_single_attrs(&hwdev->dev, ptr, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr,
   size_t size, int direction)
{
 dma_unmap_single_attrs(&hwdev->dev, dma_addr, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t
pci_map_page(struct pci_dev *hwdev, struct page *page,
      unsigned long offset, size_t size, int direction)
{
 return dma_map_page_attrs(&hwdev->dev, page, offset, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address,
        size_t size, int direction)
{
 dma_unmap_page_attrs(&hwdev->dev, dma_address, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_map_sg(struct pci_dev *hwdev, struct scatterlist *sg,
    int nents, int direction)
{
 return dma_map_sg_attrs(&hwdev->dev, sg, nents, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_unmap_sg(struct pci_dev *hwdev, struct scatterlist *sg,
      int nents, int direction)
{
 dma_unmap_sg_attrs(&hwdev->dev, sg, nents, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 dma_sync_single_for_cpu(&hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 dma_sync_single_for_device(&hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_sg_for_cpu(struct pci_dev *hwdev, struct scatterlist *sg,
  int nelems, int direction)
{
 dma_sync_sg_for_cpu(&hwdev->dev, sg, nelems, (enum dma_data_direction)direction);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_sg_for_device(struct pci_dev *hwdev, struct scatterlist *sg,
  int nelems, int direction)
{
 dma_sync_sg_for_device(&hwdev->dev, sg, nelems, (enum dma_data_direction)direction);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
 return dma_mapping_error(&pdev->dev, dma_addr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
 return dma_set_mask(&dev->dev, mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
 return dma_set_coherent_mask(&dev->dev, mask);
}
# 2451 "./include/linux/pci.h" 2
# 27 "drivers/gpu/drm/radeon/evergreen.c" 2


# 1 "./include/drm/drm_vblank.h" 1
# 29 "./include/drm/drm_vblank.h"
# 1 "./include/linux/poll.h" 1
# 13 "./include/linux/poll.h"
# 1 "./include/uapi/linux/poll.h" 1
# 1 "./arch/riscv/include/generated/uapi/asm/poll.h" 1
# 1 "./include/uapi/asm-generic/poll.h" 1
# 36 "./include/uapi/asm-generic/poll.h"
struct pollfd {
 int fd;
 short events;
 short revents;
};
# 2 "./arch/riscv/include/generated/uapi/asm/poll.h" 2
# 2 "./include/uapi/linux/poll.h" 2
# 14 "./include/linux/poll.h" 2
# 1 "./include/uapi/linux/eventpoll.h" 1
# 77 "./include/uapi/linux/eventpoll.h"
struct epoll_event {
 __poll_t events;
 __u64 data;
} ;
# 89 "./include/uapi/linux/eventpoll.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ep_take_care_of_epollwakeup(struct epoll_event *epev)
{
 epev->events &= ~(( __poll_t)(1U << 29));
}
# 15 "./include/linux/poll.h" 2

extern struct ctl_table epoll_table[];
# 32 "./include/linux/poll.h"
struct poll_table_struct;




typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);





typedef struct poll_table_struct {
 poll_queue_proc _qproc;
 __poll_t _key;
} poll_table;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
 if (p && p->_qproc && wait_address)
  p->_qproc(filp, wait_address, p);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool poll_does_not_wait(const poll_table *p)
{
 return p == ((void *)0) || p->_qproc == ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t poll_requested_events(const poll_table *p)
{
 return p ? p->_key : ~(__poll_t)0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
{
 pt->_qproc = qproc;
 pt->_key = ~(__poll_t)0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_can_poll(struct file *file)
{
 return file->f_op->poll;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t vfs_poll(struct file *file, struct poll_table_struct *pt)
{
 if (__builtin_expect(!!(!file->f_op->poll), 0))
  return (( __poll_t)0x00000001 | ( __poll_t)0x00000004 | ( __poll_t)0x00000040 | ( __poll_t)0x00000100);
 return file->f_op->poll(file, pt);
}

struct poll_table_entry {
 struct file *filp;
 __poll_t key;
 wait_queue_entry_t wait;
 wait_queue_head_t *wait_address;
};




struct poll_wqueues {
 poll_table pt;
 struct poll_table_page *table;
 struct task_struct *polling_task;
 int triggered;
 int error;
 int inline_index;
 struct poll_table_entry inline_entries[((768 - 256) / sizeof(struct poll_table_entry))];
};

extern void poll_initwait(struct poll_wqueues *pwq);
extern void poll_freewait(struct poll_wqueues *pwq);
extern u64 select_estimate_accuracy(struct timespec64 *tv);



extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
      fd_set *exp, struct timespec64 *end_time);

extern int poll_select_set_timeout(struct timespec64 *to, time64_t sec,
       long nsec);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 mangle_poll(__poll_t val)
{
 __u16 v = ( __u16)val;

 return (( __u16)( __poll_t)0x00000001 < 0x0001 ? (v & ( __u16)( __poll_t)0x00000001) * (0x0001/( __u16)( __poll_t)0x00000001) : (v & ( __u16)( __poll_t)0x00000001) / (( __u16)( __poll_t)0x00000001/0x0001)) | (( __u16)( __poll_t)0x00000004 < 0x0004 ? (v & ( __u16)( __poll_t)0x00000004) * (0x0004/( __u16)( __poll_t)0x00000004) : (v & ( __u16)( __poll_t)0x00000004) / (( __u16)( __poll_t)0x00000004/0x0004)) | (( __u16)( __poll_t)0x00000002 < 0x0002 ? (v & ( __u16)( __poll_t)0x00000002) * (0x0002/( __u16)( __poll_t)0x00000002) : (v & ( __u16)( __poll_t)0x00000002) / (( __u16)( __poll_t)0x00000002/0x0002)) | (( __u16)( __poll_t)0x00000008 < 0x0008 ? (v & ( __u16)( __poll_t)0x00000008) * (0x0008/( __u16)( __poll_t)0x00000008) : (v & ( __u16)( __poll_t)0x00000008) / (( __u16)( __poll_t)0x00000008/0x0008)) | (( __u16)( __poll_t)0x00000020 < 0x0020 ? (v & ( __u16)( __poll_t)0x00000020) * (0x0020/( __u16)( __poll_t)0x00000020) : (v & ( __u16)( __poll_t)0x00000020) / (( __u16)( __poll_t)0x00000020/0x0020)) |
  (( __u16)( __poll_t)0x00000040 < 0x0040 ? (v & ( __u16)( __poll_t)0x00000040) * (0x0040/( __u16)( __poll_t)0x00000040) : (v & ( __u16)( __poll_t)0x00000040) / (( __u16)( __poll_t)0x00000040/0x0040)) | (( __u16)( __poll_t)0x00000080 < 0x0080 ? (v & ( __u16)( __poll_t)0x00000080) * (0x0080/( __u16)( __poll_t)0x00000080) : (v & ( __u16)( __poll_t)0x00000080) / (( __u16)( __poll_t)0x00000080/0x0080)) | (( __u16)( __poll_t)0x00000100 < 0x0100 ? (v & ( __u16)( __poll_t)0x00000100) * (0x0100/( __u16)( __poll_t)0x00000100) : (v & ( __u16)( __poll_t)0x00000100) / (( __u16)( __poll_t)0x00000100/0x0100)) | (( __u16)( __poll_t)0x00000200 < 0x0200 ? (v & ( __u16)( __poll_t)0x00000200) * (0x0200/( __u16)( __poll_t)0x00000200) : (v & ( __u16)( __poll_t)0x00000200) / (( __u16)( __poll_t)0x00000200/0x0200)) |
  (( __u16)( __poll_t)0x00000010 < 0x0010 ? (v & ( __u16)( __poll_t)0x00000010) * (0x0010/( __u16)( __poll_t)0x00000010) : (v & ( __u16)( __poll_t)0x00000010) / (( __u16)( __poll_t)0x00000010/0x0010)) | (( __u16)( __poll_t)0x00002000 < 0x2000 ? (v & ( __u16)( __poll_t)0x00002000) * (0x2000/( __u16)( __poll_t)0x00002000) : (v & ( __u16)( __poll_t)0x00002000) / (( __u16)( __poll_t)0x00002000/0x2000)) | (( __u16)( __poll_t)0x00000400 < 0x0400 ? (v & ( __u16)( __poll_t)0x00000400) * (0x0400/( __u16)( __poll_t)0x00000400) : (v & ( __u16)( __poll_t)0x00000400) / (( __u16)( __poll_t)0x00000400/0x0400));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t demangle_poll(u16 val)
{

 return ( __poll_t)(0x0001 < ( __u16)( __poll_t)0x00000001 ? (val & 0x0001) * (( __u16)( __poll_t)0x00000001/0x0001) : (val & 0x0001) / (0x0001/( __u16)( __poll_t)0x00000001)) | ( __poll_t)(0x0004 < ( __u16)( __poll_t)0x00000004 ? (val & 0x0004) * (( __u16)( __poll_t)0x00000004/0x0004) : (val & 0x0004) / (0x0004/( __u16)( __poll_t)0x00000004)) | ( __poll_t)(0x0002 < ( __u16)( __poll_t)0x00000002 ? (val & 0x0002) * (( __u16)( __poll_t)0x00000002/0x0002) : (val & 0x0002) / (0x0002/( __u16)( __poll_t)0x00000002)) | ( __poll_t)(0x0008 < ( __u16)( __poll_t)0x00000008 ? (val & 0x0008) * (( __u16)( __poll_t)0x00000008/0x0008) : (val & 0x0008) / (0x0008/( __u16)( __poll_t)0x00000008)) | ( __poll_t)(0x0020 < ( __u16)( __poll_t)0x00000020 ? (val & 0x0020) * (( __u16)( __poll_t)0x00000020/0x0020) : (val & 0x0020) / (0x0020/( __u16)( __poll_t)0x00000020)) |
  ( __poll_t)(0x0040 < ( __u16)( __poll_t)0x00000040 ? (val & 0x0040) * (( __u16)( __poll_t)0x00000040/0x0040) : (val & 0x0040) / (0x0040/( __u16)( __poll_t)0x00000040)) | ( __poll_t)(0x0080 < ( __u16)( __poll_t)0x00000080 ? (val & 0x0080) * (( __u16)( __poll_t)0x00000080/0x0080) : (val & 0x0080) / (0x0080/( __u16)( __poll_t)0x00000080)) | ( __poll_t)(0x0100 < ( __u16)( __poll_t)0x00000100 ? (val & 0x0100) * (( __u16)( __poll_t)0x00000100/0x0100) : (val & 0x0100) / (0x0100/( __u16)( __poll_t)0x00000100)) | ( __poll_t)(0x0200 < ( __u16)( __poll_t)0x00000200 ? (val & 0x0200) * (( __u16)( __poll_t)0x00000200/0x0200) : (val & 0x0200) / (0x0200/( __u16)( __poll_t)0x00000200)) |
  ( __poll_t)(0x0010 < ( __u16)( __poll_t)0x00000010 ? (val & 0x0010) * (( __u16)( __poll_t)0x00000010/0x0010) : (val & 0x0010) / (0x0010/( __u16)( __poll_t)0x00000010)) | ( __poll_t)(0x2000 < ( __u16)( __poll_t)0x00002000 ? (val & 0x2000) * (( __u16)( __poll_t)0x00002000/0x2000) : (val & 0x2000) / (0x2000/( __u16)( __poll_t)0x00002000)) | ( __poll_t)(0x0400 < ( __u16)( __poll_t)0x00000400 ? (val & 0x0400) * (( __u16)( __poll_t)0x00000400/0x0400) : (val & 0x0400) / (0x0400/( __u16)( __poll_t)0x00000400));

}
# 30 "./include/drm/drm_vblank.h" 2
# 1 "./include/linux/kthread.h" 1







struct mm_struct;

__attribute__((__format__(printf, 4, 5)))
struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),
        void *data,
        int node,
        const char namefmt[], ...);
# 31 "./include/linux/kthread.h"
struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
       void *data,
       unsigned int cpu,
       const char *namefmt);

void set_kthread_struct(struct task_struct *p);

void kthread_set_per_cpu(struct task_struct *k, int cpu);
bool kthread_is_per_cpu(struct task_struct *k);
# 59 "./include/linux/kthread.h"
void free_kthread_struct(struct task_struct *k);
void kthread_bind(struct task_struct *k, unsigned int cpu);
void kthread_bind_mask(struct task_struct *k, const struct cpumask *mask);
int kthread_stop(struct task_struct *k);
bool kthread_should_stop(void);
bool kthread_should_park(void);
bool __kthread_should_park(struct task_struct *k);
bool kthread_freezable_should_stop(bool *was_frozen);
void *kthread_func(struct task_struct *k);
void *kthread_data(struct task_struct *k);
void *kthread_probe_data(struct task_struct *k);
int kthread_park(struct task_struct *k);
void kthread_unpark(struct task_struct *k);
void kthread_parkme(void);

int kthreadd(void *unused);
extern struct task_struct *kthreadd_task;
extern int tsk_fork_get_node(struct task_struct *tsk);
# 86 "./include/linux/kthread.h"
struct kthread_work;
typedef void (*kthread_work_func_t)(struct kthread_work *work);
void kthread_delayed_work_timer_fn(struct timer_list *t);

enum {
 KTW_FREEZABLE = 1 << 0,
};

struct kthread_worker {
 unsigned int flags;
 raw_spinlock_t lock;
 struct list_head work_list;
 struct list_head delayed_work_list;
 struct task_struct *task;
 struct kthread_work *current_work;
};

struct kthread_work {
 struct list_head node;
 kthread_work_func_t func;
 struct kthread_worker *worker;

 int canceling;
};

struct kthread_delayed_work {
 struct kthread_work work;
 struct timer_list timer;
};
# 156 "./include/linux/kthread.h"
extern void __kthread_init_worker(struct kthread_worker *worker,
   const char *name, struct lock_class_key *key);
# 180 "./include/linux/kthread.h"
int kthread_worker_fn(void *worker_ptr);

__attribute__((__format__(printf, 2, 3)))
struct kthread_worker *
kthread_create_worker(unsigned int flags, const char namefmt[], ...);

__attribute__((__format__(printf, 3, 4))) struct kthread_worker *
kthread_create_worker_on_cpu(int cpu, unsigned int flags,
        const char namefmt[], ...);

bool kthread_queue_work(struct kthread_worker *worker,
   struct kthread_work *work);

bool kthread_queue_delayed_work(struct kthread_worker *worker,
    struct kthread_delayed_work *dwork,
    unsigned long delay);

bool kthread_mod_delayed_work(struct kthread_worker *worker,
         struct kthread_delayed_work *dwork,
         unsigned long delay);

void kthread_flush_work(struct kthread_work *work);
void kthread_flush_worker(struct kthread_worker *worker);

bool kthread_cancel_work_sync(struct kthread_work *work);
bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *work);

void kthread_destroy_worker(struct kthread_worker *worker);

void kthread_use_mm(struct mm_struct *mm);
void kthread_unuse_mm(struct mm_struct *mm);

struct cgroup_subsys_state;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kthread_associate_blkcg(struct cgroup_subsys_state *css) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *kthread_blkcg(void)
{
 return ((void *)0);
}
# 31 "./include/drm/drm_vblank.h" 2

# 1 "./include/drm/drm_file.h" 1
# 37 "./include/drm/drm_file.h"
# 1 "./include/uapi/drm/drm.h" 1
# 41 "./include/uapi/drm/drm.h"
# 1 "./arch/riscv/include/generated/uapi/asm/ioctl.h" 1
# 42 "./include/uapi/drm/drm.h" 2
typedef unsigned int drm_handle_t;
# 83 "./include/uapi/drm/drm.h"
typedef unsigned int drm_context_t;
typedef unsigned int drm_drawable_t;
typedef unsigned int drm_magic_t;
# 96 "./include/uapi/drm/drm.h"
struct drm_clip_rect {
 unsigned short x1;
 unsigned short y1;
 unsigned short x2;
 unsigned short y2;
};




struct drm_drawable_info {
 unsigned int num_rects;
 struct drm_clip_rect *rects;
};




struct drm_tex_region {
 unsigned char next;
 unsigned char prev;
 unsigned char in_use;
 unsigned char padding;
 unsigned int age;
};
# 129 "./include/uapi/drm/drm.h"
struct drm_hw_lock {
 __volatile__ unsigned int lock;
 char padding[60];
};






struct drm_version {
 int version_major;
 int version_minor;
 int version_patchlevel;
 __kernel_size_t name_len;
 char *name;
 __kernel_size_t date_len;
 char *date;
 __kernel_size_t desc_len;
 char *desc;
};






struct drm_unique {
 __kernel_size_t unique_len;
 char *unique;
};

struct drm_list {
 int count;
 struct drm_version *version;
};

struct drm_block {
 int unused;
};






struct drm_control {
 enum {
  DRM_ADD_COMMAND,
  DRM_RM_COMMAND,
  DRM_INST_HANDLER,
  DRM_UNINST_HANDLER
 } func;
 int irq;
};




enum drm_map_type {
 _DRM_FRAME_BUFFER = 0,
 _DRM_REGISTERS = 1,
 _DRM_SHM = 2,
 _DRM_AGP = 3,
 _DRM_SCATTER_GATHER = 4,
 _DRM_CONSISTENT = 5
};




enum drm_map_flags {
 _DRM_RESTRICTED = 0x01,
 _DRM_READ_ONLY = 0x02,
 _DRM_LOCKED = 0x04,
 _DRM_KERNEL = 0x08,
 _DRM_WRITE_COMBINING = 0x10,
 _DRM_CONTAINS_LOCK = 0x20,
 _DRM_REMOVABLE = 0x40,
 _DRM_DRIVER = 0x80
};

struct drm_ctx_priv_map {
 unsigned int ctx_id;
 void *handle;
};







struct drm_map {
 unsigned long offset;
 unsigned long size;
 enum drm_map_type type;
 enum drm_map_flags flags;
 void *handle;

 int mtrr;

};




struct drm_client {
 int idx;
 int auth;
 unsigned long pid;
 unsigned long uid;
 unsigned long magic;
 unsigned long iocs;
};

enum drm_stat_type {
 _DRM_STAT_LOCK,
 _DRM_STAT_OPENS,
 _DRM_STAT_CLOSES,
 _DRM_STAT_IOCTLS,
 _DRM_STAT_LOCKS,
 _DRM_STAT_UNLOCKS,
 _DRM_STAT_VALUE,
 _DRM_STAT_BYTE,
 _DRM_STAT_COUNT,

 _DRM_STAT_IRQ,
 _DRM_STAT_PRIMARY,
 _DRM_STAT_SECONDARY,
 _DRM_STAT_DMA,
 _DRM_STAT_SPECIAL,
 _DRM_STAT_MISSED

};




struct drm_stats {
 unsigned long count;
 struct {
  unsigned long value;
  enum drm_stat_type type;
 } data[15];
};




enum drm_lock_flags {
 _DRM_LOCK_READY = 0x01,
 _DRM_LOCK_QUIESCENT = 0x02,
 _DRM_LOCK_FLUSH = 0x04,
 _DRM_LOCK_FLUSH_ALL = 0x08,



 _DRM_HALT_ALL_QUEUES = 0x10,
 _DRM_HALT_CUR_QUEUES = 0x20
};






struct drm_lock {
 int context;
 enum drm_lock_flags flags;
};
# 309 "./include/uapi/drm/drm.h"
enum drm_dma_flags {

 _DRM_DMA_BLOCK = 0x01,
# 321 "./include/uapi/drm/drm.h"
 _DRM_DMA_WHILE_LOCKED = 0x02,
 _DRM_DMA_PRIORITY = 0x04,


 _DRM_DMA_WAIT = 0x10,
 _DRM_DMA_SMALLER_OK = 0x20,
 _DRM_DMA_LARGER_OK = 0x40
};






struct drm_buf_desc {
 int count;
 int size;
 int low_mark;
 int high_mark;
 enum {
  _DRM_PAGE_ALIGN = 0x01,
  _DRM_AGP_BUFFER = 0x02,
  _DRM_SG_BUFFER = 0x04,
  _DRM_FB_BUFFER = 0x08,
  _DRM_PCI_BUFFER_RO = 0x10
 } flags;
 unsigned long agp_start;



};




struct drm_buf_info {
 int count;
 struct drm_buf_desc *list;
};




struct drm_buf_free {
 int count;
 int *list;
};






struct drm_buf_pub {
 int idx;
 int total;
 int used;
 void *address;
};




struct drm_buf_map {
 int count;



 void *virtual;

 struct drm_buf_pub *list;
};
# 401 "./include/uapi/drm/drm.h"
struct drm_dma {
 int context;
 int send_count;
 int *send_indices;
 int *send_sizes;
 enum drm_dma_flags flags;
 int request_count;
 int request_size;
 int *request_indices;
 int *request_sizes;
 int granted_count;
};

enum drm_ctx_flags {
 _DRM_CONTEXT_PRESERVED = 0x01,
 _DRM_CONTEXT_2DONLY = 0x02
};






struct drm_ctx {
 drm_context_t handle;
 enum drm_ctx_flags flags;
};




struct drm_ctx_res {
 int count;
 struct drm_ctx *contexts;
};




struct drm_draw {
 drm_drawable_t handle;
};




typedef enum {
 DRM_DRAWABLE_CLIPRECTS
} drm_drawable_info_type_t;

struct drm_update_draw {
 drm_drawable_t handle;
 unsigned int type;
 unsigned int num;
 unsigned long long data;
};




struct drm_auth {
 drm_magic_t magic;
};






struct drm_irq_busid {
 int irq;
 int busnum;
 int devnum;
 int funcnum;
};

enum drm_vblank_seq_type {
 _DRM_VBLANK_ABSOLUTE = 0x0,
 _DRM_VBLANK_RELATIVE = 0x1,

 _DRM_VBLANK_HIGH_CRTC_MASK = 0x0000003e,
 _DRM_VBLANK_EVENT = 0x4000000,
 _DRM_VBLANK_FLIP = 0x8000000,
 _DRM_VBLANK_NEXTONMISS = 0x10000000,
 _DRM_VBLANK_SECONDARY = 0x20000000,
 _DRM_VBLANK_SIGNAL = 0x40000000
};






struct drm_wait_vblank_request {
 enum drm_vblank_seq_type type;
 unsigned int sequence;
 unsigned long signal;
};

struct drm_wait_vblank_reply {
 enum drm_vblank_seq_type type;
 unsigned int sequence;
 long tval_sec;
 long tval_usec;
};






union drm_wait_vblank {
 struct drm_wait_vblank_request request;
 struct drm_wait_vblank_reply reply;
};
# 525 "./include/uapi/drm/drm.h"
struct drm_modeset_ctl {
 __u32 crtc;
 __u32 cmd;
};






struct drm_agp_mode {
 unsigned long mode;
};






struct drm_agp_buffer {
 unsigned long size;
 unsigned long handle;
 unsigned long type;
 unsigned long physical;
};






struct drm_agp_binding {
 unsigned long handle;
 unsigned long offset;
};
# 568 "./include/uapi/drm/drm.h"
struct drm_agp_info {
 int agp_version_major;
 int agp_version_minor;
 unsigned long mode;
 unsigned long aperture_base;
 unsigned long aperture_size;
 unsigned long memory_allowed;
 unsigned long memory_used;


 unsigned short id_vendor;
 unsigned short id_device;
};




struct drm_scatter_gather {
 unsigned long size;
 unsigned long handle;
};




struct drm_set_version {
 int drm_di_major;
 int drm_di_minor;
 int drm_dd_major;
 int drm_dd_minor;
};


struct drm_gem_close {

 __u32 handle;
 __u32 pad;
};


struct drm_gem_flink {

 __u32 handle;


 __u32 name;
};


struct drm_gem_open {

 __u32 name;


 __u32 handle;


 __u64 size;
};
# 772 "./include/uapi/drm/drm.h"
struct drm_get_cap {
 __u64 capability;
 __u64 value;
};
# 840 "./include/uapi/drm/drm.h"
struct drm_set_client_cap {
 __u64 capability;
 __u64 value;
};



struct drm_prime_handle {
 __u32 handle;


 __u32 flags;


 __s32 fd;
};

struct drm_syncobj_create {
 __u32 handle;

 __u32 flags;
};

struct drm_syncobj_destroy {
 __u32 handle;
 __u32 pad;
};



struct drm_syncobj_handle {
 __u32 handle;
 __u32 flags;

 __s32 fd;
 __u32 pad;
};

struct drm_syncobj_transfer {
 __u32 src_handle;
 __u32 dst_handle;
 __u64 src_point;
 __u64 dst_point;
 __u32 flags;
 __u32 pad;
};




struct drm_syncobj_wait {
 __u64 handles;

 __s64 timeout_nsec;
 __u32 count_handles;
 __u32 flags;
 __u32 first_signaled;
 __u32 pad;
};

struct drm_syncobj_timeline_wait {
 __u64 handles;

 __u64 points;

 __s64 timeout_nsec;
 __u32 count_handles;
 __u32 flags;
 __u32 first_signaled;
 __u32 pad;
};


struct drm_syncobj_array {
 __u64 handles;
 __u32 count_handles;
 __u32 pad;
};


struct drm_syncobj_timeline_array {
 __u64 handles;
 __u64 points;
 __u32 count_handles;
 __u32 flags;
};



struct drm_crtc_get_sequence {
 __u32 crtc_id;
 __u32 active;
 __u64 sequence;
 __s64 sequence_ns;
};
# 943 "./include/uapi/drm/drm.h"
struct drm_crtc_queue_sequence {
 __u32 crtc_id;
 __u32 flags;
 __u64 sequence;
 __u64 user_data;
};





# 1 "./include/uapi/drm/drm_mode.h" 1
# 30 "./include/uapi/drm/drm_mode.h"
# 1 "./include/uapi/drm/drm.h" 1
# 31 "./include/uapi/drm/drm_mode.h" 2
# 242 "./include/uapi/drm/drm_mode.h"
struct drm_mode_modeinfo {
 __u32 clock;
 __u16 hdisplay;
 __u16 hsync_start;
 __u16 hsync_end;
 __u16 htotal;
 __u16 hskew;
 __u16 vdisplay;
 __u16 vsync_start;
 __u16 vsync_end;
 __u16 vtotal;
 __u16 vscan;

 __u32 vrefresh;

 __u32 flags;
 __u32 type;
 char name[32];
};

struct drm_mode_card_res {
 __u64 fb_id_ptr;
 __u64 crtc_id_ptr;
 __u64 connector_id_ptr;
 __u64 encoder_id_ptr;
 __u32 count_fbs;
 __u32 count_crtcs;
 __u32 count_connectors;
 __u32 count_encoders;
 __u32 min_width;
 __u32 max_width;
 __u32 min_height;
 __u32 max_height;
};

struct drm_mode_crtc {
 __u64 set_connectors_ptr;
 __u32 count_connectors;

 __u32 crtc_id;
 __u32 fb_id;

 __u32 x;
 __u32 y;

 __u32 gamma_size;
 __u32 mode_valid;
 struct drm_mode_modeinfo mode;
};





struct drm_mode_set_plane {
 __u32 plane_id;
 __u32 crtc_id;
 __u32 fb_id;
 __u32 flags;


 __s32 crtc_x;
 __s32 crtc_y;
 __u32 crtc_w;
 __u32 crtc_h;


 __u32 src_x;
 __u32 src_y;
 __u32 src_h;
 __u32 src_w;
};
# 329 "./include/uapi/drm/drm_mode.h"
struct drm_mode_get_plane {




 __u32 plane_id;


 __u32 crtc_id;

 __u32 fb_id;







 __u32 possible_crtcs;

 __u32 gamma_size;


 __u32 count_format_types;




 __u64 format_type_ptr;
};

struct drm_mode_get_plane_res {
 __u64 plane_id_ptr;
 __u32 count_planes;
};
# 375 "./include/uapi/drm/drm_mode.h"
struct drm_mode_get_encoder {
 __u32 encoder_id;
 __u32 encoder_type;

 __u32 crtc_id;

 __u32 possible_crtcs;
 __u32 possible_clones;
};



enum drm_mode_subconnector {
 DRM_MODE_SUBCONNECTOR_Automatic = 0,
 DRM_MODE_SUBCONNECTOR_Unknown = 0,
 DRM_MODE_SUBCONNECTOR_VGA = 1,
 DRM_MODE_SUBCONNECTOR_DVID = 3,
 DRM_MODE_SUBCONNECTOR_DVIA = 4,
 DRM_MODE_SUBCONNECTOR_Composite = 5,
 DRM_MODE_SUBCONNECTOR_SVIDEO = 6,
 DRM_MODE_SUBCONNECTOR_Component = 8,
 DRM_MODE_SUBCONNECTOR_SCART = 9,
 DRM_MODE_SUBCONNECTOR_DisplayPort = 10,
 DRM_MODE_SUBCONNECTOR_HDMIA = 11,
 DRM_MODE_SUBCONNECTOR_Native = 15,
 DRM_MODE_SUBCONNECTOR_Wireless = 18,
};
# 458 "./include/uapi/drm/drm_mode.h"
struct drm_mode_get_connector {

 __u64 encoders_ptr;

 __u64 modes_ptr;

 __u64 props_ptr;

 __u64 prop_values_ptr;


 __u32 count_modes;

 __u32 count_props;

 __u32 count_encoders;


 __u32 encoder_id;

 __u32 connector_id;





 __u32 connector_type;







 __u32 connector_type_id;






 __u32 connection;

 __u32 mm_width;

 __u32 mm_height;





 __u32 subpixel;


 __u32 pad;
};
# 551 "./include/uapi/drm/drm_mode.h"
struct drm_mode_property_enum {
 __u64 value;
 char name[32];
};
# 587 "./include/uapi/drm/drm_mode.h"
struct drm_mode_get_property {

 __u64 values_ptr;

 __u64 enum_blob_ptr;





 __u32 prop_id;




 __u32 flags;




 char name[32];


 __u32 count_values;

 __u32 count_enum_blobs;
};

struct drm_mode_connector_set_property {
 __u64 value;
 __u32 prop_id;
 __u32 connector_id;
};
# 631 "./include/uapi/drm/drm_mode.h"
struct drm_mode_obj_get_properties {
 __u64 props_ptr;
 __u64 prop_values_ptr;
 __u32 count_props;
 __u32 obj_id;
 __u32 obj_type;
};

struct drm_mode_obj_set_property {
 __u64 value;
 __u32 prop_id;
 __u32 obj_id;
 __u32 obj_type;
};

struct drm_mode_get_blob {
 __u32 blob_id;
 __u32 length;
 __u64 data;
};

struct drm_mode_fb_cmd {
 __u32 fb_id;
 __u32 width;
 __u32 height;
 __u32 pitch;
 __u32 bpp;
 __u32 depth;

 __u32 handle;
};




struct drm_mode_fb_cmd2 {
 __u32 fb_id;
 __u32 width;
 __u32 height;
 __u32 pixel_format;
 __u32 flags;
# 697 "./include/uapi/drm/drm_mode.h"
 __u32 handles[4];
 __u32 pitches[4];
 __u32 offsets[4];
 __u64 modifier[4];
};
# 736 "./include/uapi/drm/drm_mode.h"
struct drm_mode_fb_dirty_cmd {
 __u32 fb_id;
 __u32 flags;
 __u32 color;
 __u32 num_clips;
 __u64 clips_ptr;
};

struct drm_mode_mode_cmd {
 __u32 connector_id;
 struct drm_mode_modeinfo mode;
};
# 767 "./include/uapi/drm/drm_mode.h"
struct drm_mode_cursor {
 __u32 flags;
 __u32 crtc_id;
 __s32 x;
 __s32 y;
 __u32 width;
 __u32 height;

 __u32 handle;
};

struct drm_mode_cursor2 {
 __u32 flags;
 __u32 crtc_id;
 __s32 x;
 __s32 y;
 __u32 width;
 __u32 height;

 __u32 handle;
 __s32 hot_x;
 __s32 hot_y;
};

struct drm_mode_crtc_lut {
 __u32 crtc_id;
 __u32 gamma_size;


 __u64 red;
 __u64 green;
 __u64 blue;
};

struct drm_color_ctm {




 __u64 matrix[9];
};

struct drm_color_lut {




 __u16 red;
 __u16 green;
 __u16 blue;
 __u16 reserved;
};
# 829 "./include/uapi/drm/drm_mode.h"
struct hdr_metadata_infoframe {




 __u8 eotf;



 __u8 metadata_type;
# 847 "./include/uapi/drm/drm_mode.h"
 struct {
  __u16 x, y;
  } display_primaries[3];
# 858 "./include/uapi/drm/drm_mode.h"
 struct {
  __u16 x, y;
  } white_point;





 __u16 max_display_mastering_luminance;






 __u16 min_display_mastering_luminance;





 __u16 max_cll;





 __u16 max_fall;
};






struct hdr_output_metadata {



 __u32 metadata_type;



 union {
  struct hdr_metadata_infoframe hdmi_metadata_type1;
 };
};
# 940 "./include/uapi/drm/drm_mode.h"
struct drm_mode_crtc_page_flip {
 __u32 crtc_id;
 __u32 fb_id;
 __u32 flags;
 __u32 reserved;
 __u64 user_data;
};
# 968 "./include/uapi/drm/drm_mode.h"
struct drm_mode_crtc_page_flip_target {
 __u32 crtc_id;
 __u32 fb_id;
 __u32 flags;
 __u32 sequence;
 __u64 user_data;
};


struct drm_mode_create_dumb {
 __u32 height;
 __u32 width;
 __u32 bpp;
 __u32 flags;

 __u32 handle;
 __u32 pitch;
 __u64 size;
};


struct drm_mode_map_dumb {

 __u32 handle;
 __u32 pad;





 __u64 offset;
};

struct drm_mode_destroy_dumb {
 __u32 handle;
};
# 1017 "./include/uapi/drm/drm_mode.h"
struct drm_mode_atomic {
 __u32 flags;
 __u32 count_objs;
 __u64 objs_ptr;
 __u64 count_props_ptr;
 __u64 props_ptr;
 __u64 prop_values_ptr;
 __u64 reserved;
 __u64 user_data;
};

struct drm_format_modifier_blob {


 __u32 version;


 __u32 flags;


 __u32 count_formats;


 __u32 formats_offset;


 __u32 count_modifiers;


 __u32 modifiers_offset;



};

struct drm_format_modifier {
# 1070 "./include/uapi/drm/drm_mode.h"
 __u64 formats;
 __u32 offset;
 __u32 pad;


 __u64 modifier;
};







struct drm_mode_create_blob {

 __u64 data;

 __u32 length;

 __u32 blob_id;
};
# 1105 "./include/uapi/drm/drm_mode.h"
struct drm_mode_destroy_blob {
 __u32 blob_id;
};






struct drm_mode_create_lease {

 __u64 object_ids;

 __u32 object_count;

 __u32 flags;


 __u32 lessee_id;

 __u32 fd;
};






struct drm_mode_list_lessees {
# 1143 "./include/uapi/drm/drm_mode.h"
 __u32 count_lessees;

 __u32 pad;






 __u64 lessees_ptr;
};






struct drm_mode_get_lease {
# 1170 "./include/uapi/drm/drm_mode.h"
 __u32 count_objects;

 __u32 pad;






 __u64 objects_ptr;
};




struct drm_mode_revoke_lease {

 __u32 lessee_id;
};
# 1202 "./include/uapi/drm/drm_mode.h"
struct drm_mode_rect {
 __s32 x1;
 __s32 y1;
 __s32 x2;
 __s32 y2;
};
# 955 "./include/uapi/drm/drm.h" 2
# 1124 "./include/uapi/drm/drm.h"
struct drm_event {
 __u32 type;
 __u32 length;
};





struct drm_event_vblank {
 struct drm_event base;
 __u64 user_data;
 __u32 tv_sec;
 __u32 tv_usec;
 __u32 sequence;
 __u32 crtc_id;
};




struct drm_event_crtc_sequence {
 struct drm_event base;
 __u64 user_data;
 __s64 time_ns;
 __u64 sequence;
};
# 38 "./include/drm/drm_file.h" 2

# 1 "./include/drm/drm_prime.h" 1
# 45 "./include/drm/drm_prime.h"
struct drm_prime_file_private {

 struct mutex lock;
 struct rb_root dmabufs;
 struct rb_root handles;
};

struct device;

struct dma_buf_export_info;
struct dma_buf;
struct dma_buf_attachment;
struct dma_buf_map;

enum dma_data_direction;

struct drm_device;
struct drm_gem_object;
struct drm_file;


struct dma_buf *drm_gem_dmabuf_export(struct drm_device *dev,
          struct dma_buf_export_info *exp_info);
void drm_gem_dmabuf_release(struct dma_buf *dma_buf);

int drm_gem_prime_fd_to_handle(struct drm_device *dev,
          struct drm_file *file_priv, int prime_fd, uint32_t *handle);
int drm_gem_prime_handle_to_fd(struct drm_device *dev,
          struct drm_file *file_priv, uint32_t handle, uint32_t flags,
          int *prime_fd);


int drm_gem_map_attach(struct dma_buf *dma_buf,
         struct dma_buf_attachment *attach);
void drm_gem_map_detach(struct dma_buf *dma_buf,
   struct dma_buf_attachment *attach);
struct sg_table *drm_gem_map_dma_buf(struct dma_buf_attachment *attach,
         enum dma_data_direction dir);
void drm_gem_unmap_dma_buf(struct dma_buf_attachment *attach,
      struct sg_table *sgt,
      enum dma_data_direction dir);
int drm_gem_dmabuf_vmap(struct dma_buf *dma_buf, struct dma_buf_map *map);
void drm_gem_dmabuf_vunmap(struct dma_buf *dma_buf, struct dma_buf_map *map);

int drm_gem_prime_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma);
int drm_gem_dmabuf_mmap(struct dma_buf *dma_buf, struct vm_area_struct *vma);

struct sg_table *drm_prime_pages_to_sg(struct drm_device *dev,
           struct page **pages, unsigned int nr_pages);
struct dma_buf *drm_gem_prime_export(struct drm_gem_object *obj,
         int flags);

unsigned long drm_prime_get_contiguous_size(struct sg_table *sgt);


struct drm_gem_object *drm_gem_prime_import_dev(struct drm_device *dev,
      struct dma_buf *dma_buf,
      struct device *attach_dev);
struct drm_gem_object *drm_gem_prime_import(struct drm_device *dev,
         struct dma_buf *dma_buf);

void drm_prime_gem_destroy(struct drm_gem_object *obj, struct sg_table *sg);

int drm_prime_sg_to_page_array(struct sg_table *sgt, struct page **pages,
          int max_pages);
int drm_prime_sg_to_dma_addr_array(struct sg_table *sgt, dma_addr_t *addrs,
       int max_pages);
# 40 "./include/drm/drm_file.h" 2

struct dma_fence;
struct drm_file;
struct drm_device;
struct device;
struct file;
# 55 "./include/drm/drm_file.h"
enum drm_minor_type {
 DRM_MINOR_PRIMARY,
 DRM_MINOR_CONTROL,
 DRM_MINOR_RENDER,
};
# 70 "./include/drm/drm_file.h"
struct drm_minor {

 int index;
 int type;
 struct device *kdev;
 struct drm_device *dev;

 struct dentry *debugfs_root;

 struct list_head debugfs_list;
 struct mutex debugfs_lock;
};
# 90 "./include/drm/drm_file.h"
struct drm_pending_event {







 struct completion *completion;
# 107 "./include/drm/drm_file.h"
 void (*completion_release)(struct completion *completion);
# 117 "./include/drm/drm_file.h"
 struct drm_event *event;







 struct dma_fence *fence;







 struct drm_file *file_priv;
# 142 "./include/drm/drm_file.h"
 struct list_head link;
# 151 "./include/drm/drm_file.h"
 struct list_head pending_link;
};






struct drm_file {
# 169 "./include/drm/drm_file.h"
 bool authenticated;






 bool stereo_allowed;







 bool universal_planes;


 bool atomic;







 bool aspect_ratio_allowed;






 bool writeback_connectors;
# 213 "./include/drm/drm_file.h"
 bool was_master;
# 224 "./include/drm/drm_file.h"
 bool is_master;
# 249 "./include/drm/drm_file.h"
 struct drm_master *master;


 spinlock_t master_lookup_lock;


 struct pid *pid;


 drm_magic_t magic;







 struct list_head lhead;


 struct drm_minor *minor;







 struct idr object_idr;


 spinlock_t table_lock;


 struct idr syncobj_idr;

 spinlock_t syncobj_table_lock;


 struct file *filp;







 void *driver_priv;
# 307 "./include/drm/drm_file.h"
 struct list_head fbs;


 struct mutex fbs_lock;
# 320 "./include/drm/drm_file.h"
 struct list_head blobs;


 wait_queue_head_t event_wait;
# 334 "./include/drm/drm_file.h"
 struct list_head pending_event_list;
# 344 "./include/drm/drm_file.h"
 struct list_head event_list;
# 353 "./include/drm/drm_file.h"
 int event_space;


 struct mutex event_read_lock;






 struct drm_prime_file_private prime;





};
# 381 "./include/drm/drm_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_is_primary_client(const struct drm_file *file_priv)
{
 return file_priv->minor->type == DRM_MINOR_PRIMARY;
}
# 395 "./include/drm/drm_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_is_render_client(const struct drm_file *file_priv)
{
 return file_priv->minor->type == DRM_MINOR_RENDER;
}

int drm_open(struct inode *inode, struct file *filp);
ssize_t drm_read(struct file *filp, char *buffer,
   size_t count, loff_t *offset);
int drm_release(struct inode *inode, struct file *filp);
int drm_release_noglobal(struct inode *inode, struct file *filp);
__poll_t drm_poll(struct file *filp, struct poll_table_struct *wait);
int drm_event_reserve_init_locked(struct drm_device *dev,
      struct drm_file *file_priv,
      struct drm_pending_event *p,
      struct drm_event *e);
int drm_event_reserve_init(struct drm_device *dev,
      struct drm_file *file_priv,
      struct drm_pending_event *p,
      struct drm_event *e);
void drm_event_cancel_free(struct drm_device *dev,
      struct drm_pending_event *p);
void drm_send_event_locked(struct drm_device *dev, struct drm_pending_event *e);
void drm_send_event(struct drm_device *dev, struct drm_pending_event *e);
void drm_send_event_timestamp_locked(struct drm_device *dev,
         struct drm_pending_event *e,
         ktime_t timestamp);

struct file *mock_drm_getfile(struct drm_minor *minor, unsigned int flags);


struct drm_vma_offset_manager;
unsigned long drm_get_unmapped_area(struct file *file,
        unsigned long uaddr, unsigned long len,
        unsigned long pgoff, unsigned long flags,
        struct drm_vma_offset_manager *mgr);
# 33 "./include/drm/drm_vblank.h" 2
# 1 "./include/drm/drm_modes.h" 1
# 30 "./include/drm/drm_modes.h"
# 1 "./include/linux/hdmi.h" 1
# 30 "./include/linux/hdmi.h"
enum hdmi_packet_type {
 HDMI_PACKET_TYPE_NULL = 0x00,
 HDMI_PACKET_TYPE_AUDIO_CLOCK_REGEN = 0x01,
 HDMI_PACKET_TYPE_AUDIO_SAMPLE = 0x02,
 HDMI_PACKET_TYPE_GENERAL_CONTROL = 0x03,
 HDMI_PACKET_TYPE_ACP = 0x04,
 HDMI_PACKET_TYPE_ISRC1 = 0x05,
 HDMI_PACKET_TYPE_ISRC2 = 0x06,
 HDMI_PACKET_TYPE_ONE_BIT_AUDIO_SAMPLE = 0x07,
 HDMI_PACKET_TYPE_DST_AUDIO = 0x08,
 HDMI_PACKET_TYPE_HBR_AUDIO_STREAM = 0x09,
 HDMI_PACKET_TYPE_GAMUT_METADATA = 0x0a,

};

enum hdmi_infoframe_type {
 HDMI_INFOFRAME_TYPE_VENDOR = 0x81,
 HDMI_INFOFRAME_TYPE_AVI = 0x82,
 HDMI_INFOFRAME_TYPE_SPD = 0x83,
 HDMI_INFOFRAME_TYPE_AUDIO = 0x84,
 HDMI_INFOFRAME_TYPE_DRM = 0x87,
};
# 65 "./include/linux/hdmi.h"
struct hdmi_any_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
};

enum hdmi_colorspace {
 HDMI_COLORSPACE_RGB,
 HDMI_COLORSPACE_YUV422,
 HDMI_COLORSPACE_YUV444,
 HDMI_COLORSPACE_YUV420,
 HDMI_COLORSPACE_RESERVED4,
 HDMI_COLORSPACE_RESERVED5,
 HDMI_COLORSPACE_RESERVED6,
 HDMI_COLORSPACE_IDO_DEFINED,
};

enum hdmi_scan_mode {
 HDMI_SCAN_MODE_NONE,
 HDMI_SCAN_MODE_OVERSCAN,
 HDMI_SCAN_MODE_UNDERSCAN,
 HDMI_SCAN_MODE_RESERVED,
};

enum hdmi_colorimetry {
 HDMI_COLORIMETRY_NONE,
 HDMI_COLORIMETRY_ITU_601,
 HDMI_COLORIMETRY_ITU_709,
 HDMI_COLORIMETRY_EXTENDED,
};

enum hdmi_picture_aspect {
 HDMI_PICTURE_ASPECT_NONE,
 HDMI_PICTURE_ASPECT_4_3,
 HDMI_PICTURE_ASPECT_16_9,
 HDMI_PICTURE_ASPECT_64_27,
 HDMI_PICTURE_ASPECT_256_135,
 HDMI_PICTURE_ASPECT_RESERVED,
};

enum hdmi_active_aspect {
 HDMI_ACTIVE_ASPECT_16_9_TOP = 2,
 HDMI_ACTIVE_ASPECT_14_9_TOP = 3,
 HDMI_ACTIVE_ASPECT_16_9_CENTER = 4,
 HDMI_ACTIVE_ASPECT_PICTURE = 8,
 HDMI_ACTIVE_ASPECT_4_3 = 9,
 HDMI_ACTIVE_ASPECT_16_9 = 10,
 HDMI_ACTIVE_ASPECT_14_9 = 11,
 HDMI_ACTIVE_ASPECT_4_3_SP_14_9 = 13,
 HDMI_ACTIVE_ASPECT_16_9_SP_14_9 = 14,
 HDMI_ACTIVE_ASPECT_16_9_SP_4_3 = 15,
};

enum hdmi_extended_colorimetry {
 HDMI_EXTENDED_COLORIMETRY_XV_YCC_601,
 HDMI_EXTENDED_COLORIMETRY_XV_YCC_709,
 HDMI_EXTENDED_COLORIMETRY_S_YCC_601,
 HDMI_EXTENDED_COLORIMETRY_OPYCC_601,
 HDMI_EXTENDED_COLORIMETRY_OPRGB,


 HDMI_EXTENDED_COLORIMETRY_BT2020_CONST_LUM,
 HDMI_EXTENDED_COLORIMETRY_BT2020,
 HDMI_EXTENDED_COLORIMETRY_RESERVED,
};

enum hdmi_quantization_range {
 HDMI_QUANTIZATION_RANGE_DEFAULT,
 HDMI_QUANTIZATION_RANGE_LIMITED,
 HDMI_QUANTIZATION_RANGE_FULL,
 HDMI_QUANTIZATION_RANGE_RESERVED,
};


enum hdmi_nups {
 HDMI_NUPS_UNKNOWN,
 HDMI_NUPS_HORIZONTAL,
 HDMI_NUPS_VERTICAL,
 HDMI_NUPS_BOTH,
};

enum hdmi_ycc_quantization_range {
 HDMI_YCC_QUANTIZATION_RANGE_LIMITED,
 HDMI_YCC_QUANTIZATION_RANGE_FULL,
};

enum hdmi_content_type {
 HDMI_CONTENT_TYPE_GRAPHICS,
 HDMI_CONTENT_TYPE_PHOTO,
 HDMI_CONTENT_TYPE_CINEMA,
 HDMI_CONTENT_TYPE_GAME,
};

enum hdmi_metadata_type {
 HDMI_STATIC_METADATA_TYPE1 = 0,
};

enum hdmi_eotf {
 HDMI_EOTF_TRADITIONAL_GAMMA_SDR,
 HDMI_EOTF_TRADITIONAL_GAMMA_HDR,
 HDMI_EOTF_SMPTE_ST2084,
 HDMI_EOTF_BT_2100_HLG,
};

struct hdmi_avi_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 enum hdmi_colorspace colorspace;
 enum hdmi_scan_mode scan_mode;
 enum hdmi_colorimetry colorimetry;
 enum hdmi_picture_aspect picture_aspect;
 enum hdmi_active_aspect active_aspect;
 bool itc;
 enum hdmi_extended_colorimetry extended_colorimetry;
 enum hdmi_quantization_range quantization_range;
 enum hdmi_nups nups;
 unsigned char video_code;
 enum hdmi_ycc_quantization_range ycc_quantization_range;
 enum hdmi_content_type content_type;
 unsigned char pixel_repeat;
 unsigned short top_bar;
 unsigned short bottom_bar;
 unsigned short left_bar;
 unsigned short right_bar;
};


struct hdmi_drm_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 enum hdmi_eotf eotf;
 enum hdmi_metadata_type metadata_type;
 struct {
  u16 x, y;
 } display_primaries[3];
 struct {
  u16 x, y;
 } white_point;
 u16 max_display_mastering_luminance;
 u16 min_display_mastering_luminance;
 u16 max_cll;
 u16 max_fall;
};

void hdmi_avi_infoframe_init(struct hdmi_avi_infoframe *frame);
ssize_t hdmi_avi_infoframe_pack(struct hdmi_avi_infoframe *frame, void *buffer,
    size_t size);
ssize_t hdmi_avi_infoframe_pack_only(const struct hdmi_avi_infoframe *frame,
         void *buffer, size_t size);
int hdmi_avi_infoframe_check(struct hdmi_avi_infoframe *frame);
int hdmi_drm_infoframe_init(struct hdmi_drm_infoframe *frame);
ssize_t hdmi_drm_infoframe_pack(struct hdmi_drm_infoframe *frame, void *buffer,
    size_t size);
ssize_t hdmi_drm_infoframe_pack_only(const struct hdmi_drm_infoframe *frame,
         void *buffer, size_t size);
int hdmi_drm_infoframe_check(struct hdmi_drm_infoframe *frame);
int hdmi_drm_infoframe_unpack_only(struct hdmi_drm_infoframe *frame,
       const void *buffer, size_t size);

enum hdmi_spd_sdi {
 HDMI_SPD_SDI_UNKNOWN,
 HDMI_SPD_SDI_DSTB,
 HDMI_SPD_SDI_DVDP,
 HDMI_SPD_SDI_DVHS,
 HDMI_SPD_SDI_HDDVR,
 HDMI_SPD_SDI_DVC,
 HDMI_SPD_SDI_DSC,
 HDMI_SPD_SDI_VCD,
 HDMI_SPD_SDI_GAME,
 HDMI_SPD_SDI_PC,
 HDMI_SPD_SDI_BD,
 HDMI_SPD_SDI_SACD,
 HDMI_SPD_SDI_HDDVD,
 HDMI_SPD_SDI_PMP,
};

struct hdmi_spd_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 char vendor[8];
 char product[16];
 enum hdmi_spd_sdi sdi;
};

int hdmi_spd_infoframe_init(struct hdmi_spd_infoframe *frame,
       const char *vendor, const char *product);
ssize_t hdmi_spd_infoframe_pack(struct hdmi_spd_infoframe *frame, void *buffer,
    size_t size);
ssize_t hdmi_spd_infoframe_pack_only(const struct hdmi_spd_infoframe *frame,
         void *buffer, size_t size);
int hdmi_spd_infoframe_check(struct hdmi_spd_infoframe *frame);

enum hdmi_audio_coding_type {
 HDMI_AUDIO_CODING_TYPE_STREAM,
 HDMI_AUDIO_CODING_TYPE_PCM,
 HDMI_AUDIO_CODING_TYPE_AC3,
 HDMI_AUDIO_CODING_TYPE_MPEG1,
 HDMI_AUDIO_CODING_TYPE_MP3,
 HDMI_AUDIO_CODING_TYPE_MPEG2,
 HDMI_AUDIO_CODING_TYPE_AAC_LC,
 HDMI_AUDIO_CODING_TYPE_DTS,
 HDMI_AUDIO_CODING_TYPE_ATRAC,
 HDMI_AUDIO_CODING_TYPE_DSD,
 HDMI_AUDIO_CODING_TYPE_EAC3,
 HDMI_AUDIO_CODING_TYPE_DTS_HD,
 HDMI_AUDIO_CODING_TYPE_MLP,
 HDMI_AUDIO_CODING_TYPE_DST,
 HDMI_AUDIO_CODING_TYPE_WMA_PRO,
 HDMI_AUDIO_CODING_TYPE_CXT,
};

enum hdmi_audio_sample_size {
 HDMI_AUDIO_SAMPLE_SIZE_STREAM,
 HDMI_AUDIO_SAMPLE_SIZE_16,
 HDMI_AUDIO_SAMPLE_SIZE_20,
 HDMI_AUDIO_SAMPLE_SIZE_24,
};

enum hdmi_audio_sample_frequency {
 HDMI_AUDIO_SAMPLE_FREQUENCY_STREAM,
 HDMI_AUDIO_SAMPLE_FREQUENCY_32000,
 HDMI_AUDIO_SAMPLE_FREQUENCY_44100,
 HDMI_AUDIO_SAMPLE_FREQUENCY_48000,
 HDMI_AUDIO_SAMPLE_FREQUENCY_88200,
 HDMI_AUDIO_SAMPLE_FREQUENCY_96000,
 HDMI_AUDIO_SAMPLE_FREQUENCY_176400,
 HDMI_AUDIO_SAMPLE_FREQUENCY_192000,
};

enum hdmi_audio_coding_type_ext {

 HDMI_AUDIO_CODING_TYPE_EXT_CT,






 HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC,
 HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC_V2,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG_SURROUND,


 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_V2,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC,
 HDMI_AUDIO_CODING_TYPE_EXT_DRA,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_SURROUND,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC_SURROUND = 10,
};

struct hdmi_audio_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 unsigned char channels;
 enum hdmi_audio_coding_type coding_type;
 enum hdmi_audio_sample_size sample_size;
 enum hdmi_audio_sample_frequency sample_frequency;
 enum hdmi_audio_coding_type_ext coding_type_ext;
 unsigned char channel_allocation;
 unsigned char level_shift_value;
 bool downmix_inhibit;

};

int hdmi_audio_infoframe_init(struct hdmi_audio_infoframe *frame);
ssize_t hdmi_audio_infoframe_pack(struct hdmi_audio_infoframe *frame,
      void *buffer, size_t size);
ssize_t hdmi_audio_infoframe_pack_only(const struct hdmi_audio_infoframe *frame,
           void *buffer, size_t size);
int hdmi_audio_infoframe_check(struct hdmi_audio_infoframe *frame);

enum hdmi_3d_structure {
 HDMI_3D_STRUCTURE_INVALID = -1,
 HDMI_3D_STRUCTURE_FRAME_PACKING = 0,
 HDMI_3D_STRUCTURE_FIELD_ALTERNATIVE,
 HDMI_3D_STRUCTURE_LINE_ALTERNATIVE,
 HDMI_3D_STRUCTURE_SIDE_BY_SIDE_FULL,
 HDMI_3D_STRUCTURE_L_DEPTH,
 HDMI_3D_STRUCTURE_L_DEPTH_GFX_GFX_DEPTH,
 HDMI_3D_STRUCTURE_TOP_AND_BOTTOM,
 HDMI_3D_STRUCTURE_SIDE_BY_SIDE_HALF = 8,
};


struct hdmi_vendor_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 unsigned int oui;
 u8 vic;
 enum hdmi_3d_structure s3d_struct;
 unsigned int s3d_ext_data;
};


struct hdr_static_metadata {
 __u8 eotf;
 __u8 metadata_type;
 __u16 max_cll;
 __u16 max_fall;
 __u16 min_cll;
};






struct hdr_sink_metadata {



 __u32 metadata_type;



 union {
  struct hdr_static_metadata hdmi_type1;
 };
};

int hdmi_vendor_infoframe_init(struct hdmi_vendor_infoframe *frame);
ssize_t hdmi_vendor_infoframe_pack(struct hdmi_vendor_infoframe *frame,
       void *buffer, size_t size);
ssize_t hdmi_vendor_infoframe_pack_only(const struct hdmi_vendor_infoframe *frame,
     void *buffer, size_t size);
int hdmi_vendor_infoframe_check(struct hdmi_vendor_infoframe *frame);

union hdmi_vendor_any_infoframe {
 struct {
  enum hdmi_infoframe_type type;
  unsigned char version;
  unsigned char length;
  unsigned int oui;
 } any;
 struct hdmi_vendor_infoframe hdmi;
};
# 421 "./include/linux/hdmi.h"
union hdmi_infoframe {
 struct hdmi_any_infoframe any;
 struct hdmi_avi_infoframe avi;
 struct hdmi_spd_infoframe spd;
 union hdmi_vendor_any_infoframe vendor;
 struct hdmi_audio_infoframe audio;
 struct hdmi_drm_infoframe drm;
};

ssize_t hdmi_infoframe_pack(union hdmi_infoframe *frame, void *buffer,
       size_t size);
ssize_t hdmi_infoframe_pack_only(const union hdmi_infoframe *frame,
     void *buffer, size_t size);
int hdmi_infoframe_check(union hdmi_infoframe *frame);
int hdmi_infoframe_unpack(union hdmi_infoframe *frame,
     const void *buffer, size_t size);
void hdmi_infoframe_log(const char *level, struct device *dev,
   const union hdmi_infoframe *frame);
# 31 "./include/drm/drm_modes.h" 2

# 1 "./include/drm/drm_mode_object.h" 1
# 27 "./include/drm/drm_mode_object.h"
# 1 "./include/drm/drm_lease.h" 1








struct drm_file;
struct drm_device;
struct drm_master;

struct drm_master *drm_lease_owner(struct drm_master *master);

void drm_lease_destroy(struct drm_master *lessee);

bool drm_lease_held(struct drm_file *file_priv, int id);

bool _drm_lease_held(struct drm_file *file_priv, int id);

void drm_lease_revoke(struct drm_master *master);

uint32_t drm_lease_filter_crtcs(struct drm_file *file_priv, uint32_t crtcs);

int drm_mode_create_lease_ioctl(struct drm_device *dev,
    void *data, struct drm_file *file_priv);

int drm_mode_list_lessees_ioctl(struct drm_device *dev,
    void *data, struct drm_file *file_priv);

int drm_mode_get_lease_ioctl(struct drm_device *dev,
        void *data, struct drm_file *file_priv);

int drm_mode_revoke_lease_ioctl(struct drm_device *dev,
    void *data, struct drm_file *file_priv);
# 28 "./include/drm/drm_mode_object.h" 2
struct drm_object_properties;
struct drm_property;
struct drm_device;
struct drm_file;
# 55 "./include/drm/drm_mode_object.h"
struct drm_mode_object {
 uint32_t id;
 uint32_t type;
 struct drm_object_properties *properties;
 struct kref refcount;
 void (*free_cb)(struct kref *kref);
};





struct drm_object_properties {





 int count;
# 82 "./include/drm/drm_mode_object.h"
 struct drm_property *properties[24];
# 102 "./include/drm/drm_mode_object.h"
 uint64_t values[24];
};
# 117 "./include/drm/drm_mode_object.h"
struct drm_mode_object *drm_mode_object_find(struct drm_device *dev,
          struct drm_file *file_priv,
          uint32_t id, uint32_t type);
void drm_mode_object_get(struct drm_mode_object *obj);
void drm_mode_object_put(struct drm_mode_object *obj);

int drm_object_property_set_value(struct drm_mode_object *obj,
      struct drm_property *property,
      uint64_t val);
int drm_object_property_get_value(struct drm_mode_object *obj,
      struct drm_property *property,
      uint64_t *value);

void drm_object_attach_property(struct drm_mode_object *obj,
    struct drm_property *property,
    uint64_t init_val);

bool drm_mode_object_lease_required(uint32_t type);
# 33 "./include/drm/drm_modes.h" 2
# 1 "./include/drm/drm_connector.h" 1
# 28 "./include/drm/drm_connector.h"
# 1 "./include/linux/ctype.h" 1
# 21 "./include/linux/ctype.h"
extern const unsigned char _ctype[];
# 43 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isdigit(int c)
{
 return '0' <= c && c <= '9';
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __tolower(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x01)) != 0))
  c -= 'A'-'a';
 return c;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __toupper(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x02)) != 0))
  c -= 'a'-'A';
 return c;
}
# 70 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char _tolower(const char c)
{
 return c | 0x20;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isodigit(const char c)
{
 return c >= '0' && c <= '7';
}
# 29 "./include/drm/drm_connector.h" 2


# 1 "./include/drm/drm_util.h" 1
# 36 "./include/drm/drm_util.h"
# 1 "./include/linux/kgdb.h" 1
# 19 "./include/linux/kgdb.h"
# 1 "./include/linux/kprobes.h" 1
# 29 "./include/linux/kprobes.h"
# 1 "./include/linux/ftrace.h" 1
# 10 "./include/linux/ftrace.h"
# 1 "./include/linux/trace_recursion.h" 1
# 11 "./include/linux/ftrace.h" 2
# 1 "./include/linux/trace_clock.h" 1
# 16 "./include/linux/trace_clock.h"
# 1 "./arch/riscv/include/generated/asm/trace_clock.h" 1
# 1 "./include/asm-generic/trace_clock.h" 1
# 2 "./arch/riscv/include/generated/asm/trace_clock.h" 2
# 17 "./include/linux/trace_clock.h" 2

extern u64 __attribute__((__no_instrument_function__)) trace_clock_local(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock_jiffies(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock_global(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock_counter(void);
# 12 "./include/linux/ftrace.h" 2
# 1 "./include/linux/kallsyms.h" 1
# 10 "./include/linux/kallsyms.h"
# 1 "./include/linux/buildid.h" 1








int build_id_parse(struct vm_area_struct *vma, unsigned char *build_id,
     __u32 *size);
int build_id_parse_buf(const void *buf, unsigned char *build_id, u32 buf_size);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_vmlinux_build_id(void) { }
# 11 "./include/linux/kallsyms.h" 2



# 1 "./include/linux/module.h" 1
# 17 "./include/linux/module.h"
# 1 "./include/linux/kmod.h" 1








# 1 "./include/linux/umh.h" 1
# 11 "./include/linux/umh.h"
struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 10 "./include/linux/kmod.h" 2
# 20 "./include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((__format__(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 18 "./include/linux/module.h" 2

# 1 "./include/linux/elf.h" 1





# 1 "./arch/riscv/include/asm/elf.h" 1
# 11 "./arch/riscv/include/asm/elf.h"
# 1 "./arch/riscv/include/uapi/asm/elf.h" 1
# 18 "./arch/riscv/include/uapi/asm/elf.h"
typedef unsigned long elf_greg_t;
typedef struct user_regs_struct elf_gregset_t;



typedef __u64 elf_fpreg_t;
typedef union __riscv_fp_state elf_fpregset_t;
# 12 "./arch/riscv/include/asm/elf.h" 2


# 1 "./arch/riscv/include/asm/cacheinfo.h" 1








# 1 "./include/linux/cacheinfo.h" 1





# 1 "./include/linux/cpu.h" 1
# 17 "./include/linux/cpu.h"
# 1 "./include/linux/node.h" 1
# 31 "./include/linux/node.h"
struct node_hmem_attrs {
 unsigned int read_bandwidth;
 unsigned int write_bandwidth;
 unsigned int read_latency;
 unsigned int write_latency;
};

enum cache_indexing {
 NODE_CACHE_DIRECT_MAP,
 NODE_CACHE_INDEXED,
 NODE_CACHE_OTHER,
};

enum cache_write_policy {
 NODE_CACHE_WRITE_BACK,
 NODE_CACHE_WRITE_THROUGH,
 NODE_CACHE_WRITE_OTHER,
};
# 59 "./include/linux/node.h"
struct node_cache_attrs {
 enum cache_indexing indexing;
 enum cache_write_policy write_policy;
 u64 size;
 u16 line_size;
 u8 level;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_add_cache(unsigned int nid,
      struct node_cache_attrs *cache_attrs)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_perf_attrs(unsigned int nid,
           struct node_hmem_attrs *hmem_attrs,
           unsigned access)
{
}


struct node {
 struct device dev;
 struct list_head access_list;
# 95 "./include/linux/node.h"
};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void link_mem_sections(int nid, unsigned long start_pfn,
         unsigned long end_pfn,
         enum meminit_context context)
{
}


extern void unregister_node(struct node *node);
# 152 "./include/linux/node.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __register_one_node(int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_one_node(int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_one_node(int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_cpu_under_node(unsigned int cpu, unsigned int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_cpu_under_node(unsigned int cpu, unsigned int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_memory_block_under_nodes(struct memory_block *mem_blk)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void register_hugetlbfs_with_node(node_registration_func_t reg,
      node_registration_func_t unreg)
{
}
# 18 "./include/linux/cpu.h" 2


# 1 "./include/linux/cpuhotplug.h" 1
# 57 "./include/linux/cpuhotplug.h"
enum cpuhp_state {
 CPUHP_INVALID = -1,


 CPUHP_OFFLINE = 0,
 CPUHP_CREATE_THREADS,
 CPUHP_PERF_PREPARE,
 CPUHP_PERF_X86_PREPARE,
 CPUHP_PERF_X86_AMD_UNCORE_PREP,
 CPUHP_PERF_POWER,
 CPUHP_PERF_SUPERH,
 CPUHP_X86_HPET_DEAD,
 CPUHP_X86_APB_DEAD,
 CPUHP_X86_MCE_DEAD,
 CPUHP_VIRT_NET_DEAD,
 CPUHP_SLUB_DEAD,
 CPUHP_DEBUG_OBJ_DEAD,
 CPUHP_MM_WRITEBACK_DEAD,
 CPUHP_MM_VMSTAT_DEAD,
 CPUHP_SOFTIRQ_DEAD,
 CPUHP_NET_MVNETA_DEAD,
 CPUHP_CPUIDLE_DEAD,
 CPUHP_ARM64_FPSIMD_DEAD,
 CPUHP_ARM_OMAP_WAKE_DEAD,
 CPUHP_IRQ_POLL_DEAD,
 CPUHP_BLOCK_SOFTIRQ_DEAD,
 CPUHP_BIO_DEAD,
 CPUHP_ACPI_CPUDRV_DEAD,
 CPUHP_S390_PFAULT_DEAD,
 CPUHP_BLK_MQ_DEAD,
 CPUHP_FS_BUFF_DEAD,
 CPUHP_PRINTK_DEAD,
 CPUHP_MM_MEMCQ_DEAD,
 CPUHP_XFS_DEAD,
 CPUHP_PERCPU_CNT_DEAD,
 CPUHP_RADIX_DEAD,
 CPUHP_PAGE_ALLOC,
 CPUHP_NET_DEV_DEAD,
 CPUHP_PCI_XGENE_DEAD,
 CPUHP_IOMMU_IOVA_DEAD,
 CPUHP_LUSTRE_CFS_DEAD,
 CPUHP_AP_ARM_CACHE_B15_RAC_DEAD,
 CPUHP_PADATA_DEAD,
 CPUHP_WORKQUEUE_PREP,
 CPUHP_POWER_NUMA_PREPARE,
 CPUHP_HRTIMERS_PREPARE,
 CPUHP_PROFILE_PREPARE,
 CPUHP_X2APIC_PREPARE,
 CPUHP_SMPCFD_PREPARE,
 CPUHP_RELAY_PREPARE,
 CPUHP_SLAB_PREPARE,
 CPUHP_MD_RAID5_PREPARE,
 CPUHP_RCUTREE_PREP,
 CPUHP_CPUIDLE_COUPLED_PREPARE,
 CPUHP_POWERPC_PMAC_PREPARE,
 CPUHP_POWERPC_MMU_CTX_PREPARE,
 CPUHP_XEN_PREPARE,
 CPUHP_XEN_EVTCHN_PREPARE,
 CPUHP_ARM_SHMOBILE_SCU_PREPARE,
 CPUHP_SH_SH3X_PREPARE,
 CPUHP_NET_FLOW_PREPARE,
 CPUHP_TOPOLOGY_PREPARE,
 CPUHP_NET_IUCV_PREPARE,
 CPUHP_ARM_BL_PREPARE,
 CPUHP_TRACE_RB_PREPARE,
 CPUHP_MM_ZS_PREPARE,
 CPUHP_MM_ZSWP_MEM_PREPARE,
 CPUHP_MM_ZSWP_POOL_PREPARE,
 CPUHP_KVM_PPC_BOOK3S_PREPARE,
 CPUHP_ZCOMP_PREPARE,
 CPUHP_TIMERS_PREPARE,
 CPUHP_MIPS_SOC_PREPARE,
 CPUHP_BP_PREPARE_DYN,
 CPUHP_BP_PREPARE_DYN_END = CPUHP_BP_PREPARE_DYN + 20,
 CPUHP_BRINGUP_CPU,





 CPUHP_AP_IDLE_DEAD,
 CPUHP_AP_OFFLINE,
 CPUHP_AP_SCHED_STARTING,
 CPUHP_AP_RCUTREE_DYING,
 CPUHP_AP_CPU_PM_STARTING,
 CPUHP_AP_IRQ_GIC_STARTING,
 CPUHP_AP_IRQ_HIP04_STARTING,
 CPUHP_AP_IRQ_APPLE_AIC_STARTING,
 CPUHP_AP_IRQ_ARMADA_XP_STARTING,
 CPUHP_AP_IRQ_BCM2836_STARTING,
 CPUHP_AP_IRQ_MIPS_GIC_STARTING,
 CPUHP_AP_IRQ_RISCV_STARTING,
 CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING,
 CPUHP_AP_ARM_MVEBU_COHERENCY,
 CPUHP_AP_MICROCODE_LOADER,
 CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 CPUHP_AP_PERF_X86_STARTING,
 CPUHP_AP_PERF_X86_AMD_IBS_STARTING,
 CPUHP_AP_PERF_X86_CQM_STARTING,
 CPUHP_AP_PERF_X86_CSTATE_STARTING,
 CPUHP_AP_PERF_XTENSA_STARTING,
 CPUHP_AP_MIPS_OP_LOONGSON3_STARTING,
 CPUHP_AP_ARM_SDEI_STARTING,
 CPUHP_AP_ARM_VFP_STARTING,
 CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING,
 CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING,
 CPUHP_AP_PERF_ARM_ACPI_STARTING,
 CPUHP_AP_PERF_ARM_STARTING,
 CPUHP_AP_ARM_L2X0_STARTING,
 CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING,
 CPUHP_AP_ARM_ARCH_TIMER_STARTING,
 CPUHP_AP_ARM_GLOBAL_TIMER_STARTING,
 CPUHP_AP_JCORE_TIMER_STARTING,
 CPUHP_AP_ARM_TWD_STARTING,
 CPUHP_AP_QCOM_TIMER_STARTING,
 CPUHP_AP_TEGRA_TIMER_STARTING,
 CPUHP_AP_ARMADA_TIMER_STARTING,
 CPUHP_AP_MARCO_TIMER_STARTING,
 CPUHP_AP_MIPS_GIC_TIMER_STARTING,
 CPUHP_AP_ARC_TIMER_STARTING,
 CPUHP_AP_RISCV_TIMER_STARTING,
 CPUHP_AP_CLINT_TIMER_STARTING,
 CPUHP_AP_CSKY_TIMER_STARTING,
 CPUHP_AP_TI_GP_TIMER_STARTING,
 CPUHP_AP_HYPERV_TIMER_STARTING,
 CPUHP_AP_KVM_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_STARTING,
 CPUHP_AP_KVM_ARM_TIMER_STARTING,

 CPUHP_AP_DUMMY_TIMER_STARTING,
 CPUHP_AP_ARM_XEN_STARTING,
 CPUHP_AP_ARM_CORESIGHT_STARTING,
 CPUHP_AP_ARM_CORESIGHT_CTI_STARTING,
 CPUHP_AP_ARM64_ISNDEP_STARTING,
 CPUHP_AP_SMPCFD_DYING,
 CPUHP_AP_X86_TBOOT_DYING,
 CPUHP_AP_ARM_CACHE_B15_RAC_DYING,
 CPUHP_AP_ONLINE,
 CPUHP_TEARDOWN_CPU,


 CPUHP_AP_ONLINE_IDLE,
 CPUHP_AP_SCHED_WAIT_EMPTY,
 CPUHP_AP_SMPBOOT_THREADS,
 CPUHP_AP_X86_VDSO_VMA_ONLINE,
 CPUHP_AP_IRQ_AFFINITY_ONLINE,
 CPUHP_AP_BLK_MQ_ONLINE,
 CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS,
 CPUHP_AP_X86_INTEL_EPB_ONLINE,
 CPUHP_AP_PERF_ONLINE,
 CPUHP_AP_PERF_X86_ONLINE,
 CPUHP_AP_PERF_X86_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_POWER_ONLINE,
 CPUHP_AP_PERF_X86_RAPL_ONLINE,
 CPUHP_AP_PERF_X86_CQM_ONLINE,
 CPUHP_AP_PERF_X86_CSTATE_ONLINE,
 CPUHP_AP_PERF_X86_IDXD_ONLINE,
 CPUHP_AP_PERF_S390_CF_ONLINE,
 CPUHP_AP_PERF_S390_SF_ONLINE,
 CPUHP_AP_PERF_ARM_CCI_ONLINE,
 CPUHP_AP_PERF_ARM_CCN_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_L3_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_PA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_SLLC_ONLINE,
 CPUHP_AP_PERF_ARM_L2X0_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE,
 CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE,
 CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE,
 CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE,
 CPUHP_AP_PERF_CSKY_ONLINE,
 CPUHP_AP_WATCHDOG_ONLINE,
 CPUHP_AP_WORKQUEUE_ONLINE,
 CPUHP_AP_RCUTREE_ONLINE,
 CPUHP_AP_BASE_CACHEINFO_ONLINE,
 CPUHP_AP_ONLINE_DYN,
 CPUHP_AP_ONLINE_DYN_END = CPUHP_AP_ONLINE_DYN + 30,
 CPUHP_AP_X86_HPET_ONLINE,
 CPUHP_AP_X86_KVM_CLK_ONLINE,
 CPUHP_AP_DTPM_CPU_ONLINE,
 CPUHP_AP_ACTIVE,
 CPUHP_ONLINE,
};

int __cpuhp_setup_state(enum cpuhp_state state, const char *name, bool invoke,
   int (*startup)(unsigned int cpu),
   int (*teardown)(unsigned int cpu), bool multi_instance);

int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char *name,
       bool invoke,
       int (*startup)(unsigned int cpu),
       int (*teardown)(unsigned int cpu),
       bool multi_instance);
# 270 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state(enum cpuhp_state state,
        const char *name,
        int (*startup)(unsigned int cpu),
        int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, true, startup, teardown, false);
}
# 290 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_cpuslocked(enum cpuhp_state state,
            const char *name,
            int (*startup)(unsigned int cpu),
            int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, true, startup,
           teardown, false);
}
# 310 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_nocalls(enum cpuhp_state state,
         const char *name,
         int (*startup)(unsigned int cpu),
         int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, false, startup, teardown,
       false);
}
# 332 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_nocalls_cpuslocked(enum cpuhp_state state,
           const char *name,
           int (*startup)(unsigned int cpu),
           int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, false, startup,
         teardown, false);
}
# 353 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_multi(enum cpuhp_state state,
       const char *name,
       int (*startup)(unsigned int cpu,
        struct hlist_node *node),
       int (*teardown)(unsigned int cpu,
         struct hlist_node *node))
{
 return __cpuhp_setup_state(state, name, false,
       (void *) startup,
       (void *) teardown, true);
}

int __cpuhp_state_add_instance(enum cpuhp_state state, struct hlist_node *node,
          bool invoke);
int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state state,
       struct hlist_node *node, bool invoke);
# 381 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_add_instance(enum cpuhp_state state,
        struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, true);
}
# 397 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_add_instance_nocalls(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, false);
}
# 414 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
cpuhp_state_add_instance_nocalls_cpuslocked(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance_cpuslocked(state, node, false);
}

void __cpuhp_remove_state(enum cpuhp_state state, bool invoke);
void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke);
# 431 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, true);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state_nocalls(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}
# 454 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state_nocalls_cpuslocked(enum cpuhp_state state)
{
 __cpuhp_remove_state_cpuslocked(state, false);
}
# 467 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_multi_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

int __cpuhp_state_remove_instance(enum cpuhp_state state,
      struct hlist_node *node, bool invoke);
# 484 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_remove_instance(enum cpuhp_state state,
           struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, true);
}
# 498 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_remove_instance_nocalls(enum cpuhp_state state,
            struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, false);
}


void cpuhp_online_idle(enum cpuhp_state state);
# 21 "./include/linux/cpu.h" 2

struct device;
struct device_node;
struct attribute_group;

struct cpu {
 int node_id;
 int hotpluggable;
 struct device dev;
};

extern void boot_cpu_init(void);
extern void boot_cpu_hotplug_init(void);
extern void cpu_init(void);
extern void trap_init(void);

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);

extern ssize_t cpu_show_meltdown(struct device *dev,
     struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v1(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v2(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spec_store_bypass(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_l1tf(struct device *dev,
        struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_mds(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_tsx_async_abort(struct device *dev,
     struct device_attribute *attr,
     char *buf);
extern ssize_t cpu_show_itlb_multihit(struct device *dev,
          struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_srbds(struct device *dev, struct device_attribute *attr, char *buf);

extern __attribute__((__format__(printf, 4, 5)))
struct device *cpu_device_create(struct device *parent, void *drvdata,
     const struct attribute_group **groups,
     const char *fmt, ...);

extern void unregister_cpu(struct cpu *cpu);
extern ssize_t arch_cpu_probe(const char *, size_t);
extern ssize_t arch_cpu_release(const char *, size_t);
# 91 "./include/linux/cpu.h"
extern bool cpuhp_tasks_frozen;
int add_cpu(unsigned int cpu);
int cpu_device_up(struct device *dev);
void notify_cpu_starting(unsigned int cpu);
extern void cpu_maps_update_begin(void);
extern void cpu_maps_update_done(void);
int bringup_hibernate_cpu(unsigned int sleep_cpu);
void bringup_nonboot_cpus(unsigned int setup_max_cpus);
# 114 "./include/linux/cpu.h"
extern struct bus_type cpu_subsys;

extern int lockdep_is_cpus_held(void);


extern void cpus_write_lock(void);
extern void cpus_write_unlock(void);
extern void cpus_read_lock(void);
extern void cpus_read_unlock(void);
extern int cpus_read_trylock(void);
extern void lockdep_assert_cpus_held(void);
extern void cpu_hotplug_disable(void);
extern void cpu_hotplug_enable(void);
void clear_tasks_mm_cpumask(int cpu);
int remove_cpu(unsigned int cpu);
int cpu_device_down(struct device *dev);
extern void smp_shutdown_nonboot_cpus(unsigned int primary_cpu);
# 165 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void thaw_secondary_cpus(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int suspend_disable_secondary_cpus(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void suspend_enable_secondary_cpus(void) { }


void cpu_startup_entry(enum cpuhp_state state);

void cpu_idle_poll_ctrl(bool enable);




bool cpu_in_idle(unsigned long pc);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);

int cpu_report_state(int cpu);
int cpu_check_up_prepare(int cpu);
void cpu_set_state_online(int cpu);
void play_idle_precise(u64 duration_ns, u64 latency_ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void play_idle(unsigned long duration_us)
{
 play_idle_precise(duration_us * 1000L, ((u64)~0ULL));
}


bool cpu_wait_death(unsigned int cpu, int seconds);
bool cpu_report_death(void);
void cpuhp_report_idle_dead(void);




enum cpuhp_smt_control {
 CPU_SMT_ENABLED,
 CPU_SMT_DISABLED,
 CPU_SMT_FORCE_DISABLED,
 CPU_SMT_NOT_SUPPORTED,
 CPU_SMT_NOT_IMPLEMENTED,
};
# 220 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_smt_disable(bool force) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_smt_check_topology(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_smt_possible(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_smt_enable(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval) { return 0; }


extern bool cpu_mitigations_off(void);
extern bool cpu_mitigations_auto_nosmt(void);
# 7 "./include/linux/cacheinfo.h" 2



struct device_node;
struct attribute;

enum cache_type {
 CACHE_TYPE_NOCACHE = 0,
 CACHE_TYPE_INST = ((((1UL))) << (0)),
 CACHE_TYPE_DATA = ((((1UL))) << (1)),
 CACHE_TYPE_SEPARATE = CACHE_TYPE_INST | CACHE_TYPE_DATA,
 CACHE_TYPE_UNIFIED = ((((1UL))) << (2)),
};

extern unsigned int coherency_max_size;
# 50 "./include/linux/cacheinfo.h"
struct cacheinfo {
 unsigned int id;
 enum cache_type type;
 unsigned int level;
 unsigned int coherency_line_size;
 unsigned int number_of_sets;
 unsigned int ways_of_associativity;
 unsigned int physical_line_partition;
 unsigned int size;
 cpumask_t shared_cpu_map;
 unsigned int attributes;
# 70 "./include/linux/cacheinfo.h"
 void *fw_token;
 bool disable_sysfs;
 void *priv;
};

struct cpu_cacheinfo {
 struct cacheinfo *info_list;
 unsigned int num_levels;
 unsigned int num_leaves;
 bool cpu_map_populated;
};

struct cpu_cacheinfo *get_cpu_cacheinfo(unsigned int cpu);
int init_cache_level(unsigned int cpu);
int populate_cache_leaves(unsigned int cpu);
int cache_setup_acpi(unsigned int cpu);
# 95 "./include/linux/cacheinfo.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_find_last_cache_level(unsigned int cpu)
{
 return 0;
}




const struct attribute_group *cache_get_priv_group(struct cacheinfo *this_leaf);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_cpu_cacheinfo_id(int cpu, int level)
{
 struct cpu_cacheinfo *ci = get_cpu_cacheinfo(cpu);
 int i;

 for (i = 0; i < ci->num_leaves; i++) {
  if (ci->info_list[i].level == level) {
   if (ci->info_list[i].attributes & ((((1UL))) << (4)))
    return ci->info_list[i].id;
   return -1;
  }
 }

 return -1;
}
# 10 "./arch/riscv/include/asm/cacheinfo.h" 2

struct riscv_cacheinfo_ops {
 const struct attribute_group * (*get_priv_group)(struct cacheinfo
       *this_leaf);
};

void riscv_set_cacheinfo_ops(struct riscv_cacheinfo_ops *ops);
uintptr_t get_cache_size(u32 level, enum cache_type type);
uintptr_t get_cache_geometry(u32 level, enum cache_type type);
# 15 "./arch/riscv/include/asm/elf.h" 2
# 54 "./arch/riscv/include/asm/elf.h"
extern unsigned long elf_hwcap;
# 82 "./arch/riscv/include/asm/elf.h"
struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
 int uses_interp);
# 7 "./include/linux/elf.h" 2
# 1 "./include/uapi/linux/elf.h" 1





# 1 "./include/uapi/linux/elf-em.h" 1
# 7 "./include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 139 "./include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 162 "./include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 304 "./include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 440 "./include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 8 "./include/linux/elf.h" 2
# 52 "./include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 65 "./include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 81 "./include/linux/elf.h"
struct gnu_property {
 u32 pr_type;
 u32 pr_datasz;
};

struct arch_elf_state;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_parse_elf_property(u32 type, const void *data,
       size_t datasz, bool compat,
       struct arch_elf_state *arch)
{
 return 0;
}
# 104 "./include/linux/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_elf_adjust_prot(int prot,
           const struct arch_elf_state *state,
           bool has_interp, bool is_interp)
{
 return prot;
}
# 20 "./include/linux/module.h" 2


# 1 "./include/linux/moduleparam.h" 1
# 36 "./include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 304 "./include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 372 "./include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 382 "./include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 411 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);
int param_set_uint_minmax(const char *val, const struct kernel_param *kp,
  unsigned int min, unsigned int max);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_hexint;
extern int param_set_hexint(const char *val, const struct kernel_param *kp);
extern int param_get_hexint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 526 "./include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 587 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 23 "./include/linux/module.h" 2


# 1 "./include/linux/rbtree_latch.h" 1
# 40 "./include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_latch_t seq;
 struct rb_root tree[2];
};
# 64 "./include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); do { extern void __compiletime_assert_248(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) && !__builtin_types_compatible_p(typeof(*(node)), typeof(void))))) __compiletime_assert_248(); } while (0); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ do { extern void __compiletime_assert_249(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ltr->tree[idx].rb_node) == sizeof(char) || sizeof(ltr->tree[idx].rb_node) == sizeof(short) || sizeof(ltr->tree[idx].rb_node) == sizeof(int) || sizeof(ltr->tree[idx].rb_node) == sizeof(long)) || sizeof(ltr->tree[idx].rb_node) == sizeof(long long))) __compiletime_assert_249(); } while (0); (*(const volatile typeof( _Generic((ltr->tree[idx].rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ltr->tree[idx].rb_node))) *)&(ltr->tree[idx].rb_node)); }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ do { extern void __compiletime_assert_250(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_left) == sizeof(char) || sizeof(node->rb_left) == sizeof(short) || sizeof(node->rb_left) == sizeof(int) || sizeof(node->rb_left) == sizeof(long)) || sizeof(node->rb_left) == sizeof(long long))) __compiletime_assert_250(); } while (0); (*(const volatile typeof( _Generic((node->rb_left), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_left))) *)&(node->rb_left)); }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ do { extern void __compiletime_assert_251(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_right) == sizeof(char) || sizeof(node->rb_right) == sizeof(short) || sizeof(node->rb_right) == sizeof(int) || sizeof(node->rb_right) == sizeof(long)) || sizeof(node->rb_right) == sizeof(long long))) __compiletime_assert_251(); } while (0); (*(const volatile typeof( _Generic((node->rb_right), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_right))) *)&(node->rb_right)); }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 143 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 170 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 199 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_latch_retry(&root->seq, seq));

 return node;
}
# 26 "./include/linux/module.h" 2
# 1 "./include/linux/error-injection.h" 1





# 1 "./include/asm-generic/error-injection.h" 1





enum {
 EI_ETYPE_NONE,
 EI_ETYPE_NULL,
 EI_ETYPE_ERRNO,
 EI_ETYPE_ERRNO_NULL,
 EI_ETYPE_TRUE,
};

struct error_injection_entry {
 unsigned long addr;
 int etype;
};

struct pt_regs;
# 38 "./include/asm-generic/error-injection.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void override_function_with_return(struct pt_regs *regs) { }
# 7 "./include/linux/error-injection.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_error_injection_list(unsigned long addr)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_injectable_error_type(unsigned long addr)
{
 return EI_ETYPE_NONE;
}
# 27 "./include/linux/module.h" 2



# 1 "./include/linux/cfi.h" 1
# 31 "./include/linux/module.h" 2


# 1 "./arch/riscv/include/asm/module.h" 1






# 1 "./include/asm-generic/module.h" 1
# 8 "./arch/riscv/include/asm/module.h" 2

struct module;
unsigned long module_emit_got_entry(struct module *mod, unsigned long val);
unsigned long module_emit_plt_entry(struct module *mod, unsigned long val);


struct mod_section {
 Elf64_Shdr *shdr;
 int num_entries;
 int max_entries;
};

struct mod_arch_specific {
 struct mod_section got;
 struct mod_section plt;
 struct mod_section got_plt;
};

struct got_entry {
 unsigned long symbol_addr;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct got_entry emit_got_entry(unsigned long val)
{
 return (struct got_entry) {val};
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct got_entry *get_got_entry(unsigned long val,
           const struct mod_section *sec)
{
 struct got_entry *got = (struct got_entry *)(sec->shdr->sh_addr);
 int i;
 for (i = 0; i < sec->num_entries; i++) {
  if (got[i].symbol_addr == val)
   return &got[i];
 }
 return ((void *)0);
}

struct plt_entry {




 u32 insn_auipc;
 u32 insn_ld;
 u32 insn_jr;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plt_entry emit_plt_entry(unsigned long val,
           unsigned long plt,
           unsigned long got_plt)
{
# 79 "./arch/riscv/include/asm/module.h"
 unsigned long offset = got_plt - plt;
 u32 hi20 = (offset + 0x800) & 0xfffff000;
 u32 lo12 = (offset - hi20);
 return (struct plt_entry) {
  0x0017 | (0x5 << 7) | hi20,
  0x3003 | (lo12 << 20) | (0x5 << 15) | (0x6 << 7),
  0x0067 | (0x6 << 15)
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_got_plt_idx(unsigned long val, const struct mod_section *sec)
{
 struct got_entry *got_plt = (struct got_entry *)sec->shdr->sh_addr;
 int i;
 for (i = 0; i < sec->num_entries; i++) {
  if (got_plt[i].symbol_addr == val)
   return i;
 }
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plt_entry *get_plt_entry(unsigned long val,
           const struct mod_section *sec_plt,
           const struct mod_section *sec_got_plt)
{
 struct plt_entry *plt = (struct plt_entry *)sec_plt->shdr->sh_addr;
 int got_plt_idx = get_got_plt_idx(val, sec_got_plt);
 if (got_plt_idx >= 0)
  return plt + got_plt_idx;
 else
  return ((void *)0);
}
# 34 "./include/linux/module.h" 2



struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
};

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 295 "./include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;




};
# 348 "./include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 364 "./include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];







 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
 bool using_gplonly_symbols;






 bool async_probe_requested;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout ;
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;

 void *noinstr_text_start;
 unsigned int noinstr_text_size;






 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;
# 478 "./include/linux/module.h"
 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;
# 521 "./include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 541 "./include/linux/module.h"
} __attribute__((__aligned__((1 << 6)))) ;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 642 "./include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, const unsigned char **modbuildid,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 823 "./include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 835 "./include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 852 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}
# 864 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_sig_ok(struct module *module)
{
 return true;
}


int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);
# 15 "./include/linux/kallsyms.h" 2
# 24 "./include/linux/kallsyms.h"
struct cred;
struct module;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel_inittext(unsigned long addr)
{
 if (addr >= (unsigned long)_sinittext
     && addr <= (unsigned long)_einittext)
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel_text(unsigned long addr)
{
 if ((addr >= (unsigned long)_stext && addr <= (unsigned long)_etext) ||
     arch_is_kernel_text(addr))
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel(unsigned long addr)
{
 if (addr >= (unsigned long)_stext && addr <= (unsigned long)_end)
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_ksym_addr(unsigned long addr)
{
 if (0)
  return is_kernel(addr);

 return is_kernel_text(addr) || is_kernel_inittext(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dereference_symbol_descriptor(void *ptr)
{
# 74 "./include/linux/kallsyms.h"
 return ptr;
}

int kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,
          unsigned long),
       void *data);



unsigned long kallsyms_lookup_name(const char *name);

extern int kallsyms_lookup_size_offset(unsigned long addr,
      unsigned long *symbolsize,
      unsigned long *offset);


const char *kallsyms_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, char *namebuf);


extern int sprint_symbol(char *buffer, unsigned long address);
extern int sprint_symbol_build_id(char *buffer, unsigned long address);
extern int sprint_symbol_no_offset(char *buffer, unsigned long address);
extern int sprint_backtrace(char *buffer, unsigned long address);
extern int sprint_backtrace_build_id(char *buffer, unsigned long address);

int lookup_symbol_name(unsigned long addr, char *symname);
int lookup_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


extern bool kallsyms_show_value(const struct cred *cred);
# 177 "./include/linux/kallsyms.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_ip_sym(const char *loglvl, unsigned long ip)
{
 ({ do {} while (0); _printk("%s[<%px>] %pS\n", loglvl, (void *) ip, (void *) ip); });
}
# 13 "./include/linux/ftrace.h" 2


# 1 "./include/linux/ptrace.h" 1
# 10 "./include/linux/ptrace.h"
# 1 "./include/linux/pid_namespace.h" 1
# 10 "./include/linux/pid_namespace.h"
# 1 "./include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "./include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct time_namespace *time_ns;
 struct time_namespace *time_ns_for_children;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 53 "./include/linux/nsproxy.h"
struct nsset {
 unsigned flags;
 struct nsproxy *nsproxy;
 struct fs_struct *fs;
 const struct cred *cred;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *nsset_cred(struct nsset *set)
{
 if (set->flags & 0x10000000)
  return (struct cred *)set->cred;

 return ((void *)0);
}
# 94 "./include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) nsproxy_cache_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 11 "./include/linux/pid_namespace.h" 2
# 1 "./include/linux/ns_common.h" 1






struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
 refcount_t count;
};
# 12 "./include/linux/pid_namespace.h" 2





struct fs_pin;

struct pid_namespace {
 struct idr idr;
 struct callback_head rcu;
 unsigned int pid_allocated;
 struct task_struct *child_reaper;
 struct kmem_cache *pid_cachep;
 unsigned int level;
 struct pid_namespace *parent;



 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 int reboot;
 struct ns_common ns;
} ;

extern struct pid_namespace init_pid_ns;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *get_pid_ns(struct pid_namespace *ns)
{
 if (ns != &init_pid_ns)
  refcount_inc(&ns->ns.count);
 return ns;
}

extern struct pid_namespace *copy_pid_ns(unsigned long flags,
 struct user_namespace *user_ns, struct pid_namespace *ns);
extern void zap_pid_ns_processes(struct pid_namespace *pid_ns);
extern int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd);
extern void put_pid_ns(struct pid_namespace *ns);
# 85 "./include/linux/pid_namespace.h"
extern struct pid_namespace *task_active_pid_ns(struct task_struct *tsk);
void pidhash_init(void);
void pid_idr_init(void);
# 11 "./include/linux/ptrace.h" 2
# 1 "./include/uapi/linux/ptrace.h" 1
# 59 "./include/uapi/linux/ptrace.h"
struct ptrace_peeksiginfo_args {
 __u64 off;
 __u32 flags;
 __s32 nr;
};







struct seccomp_metadata {
 __u64 filter_off;
 __u64 flags;
};







struct ptrace_syscall_info {
 __u8 op;
 __u8 pad[3];
 __u32 arch;
 __u64 instruction_pointer;
 __u64 stack_pointer;
 union {
  struct {
   __u64 nr;
   __u64 args[6];
  } entry;
  struct {
   __s64 rval;
   __u8 is_error;
  } exit;
  struct {
   __u64 nr;
   __u64 args[6];
   __u32 ret_data;
  } seccomp;
 };
};



struct ptrace_rseq_configuration {
 __u64 rseq_abi_pointer;
 __u32 rseq_abi_size;
 __u32 signature;
 __u32 flags;
 __u32 pad;
};
# 12 "./include/linux/ptrace.h" 2



struct syscall_info {
 __u64 sp;
 struct seccomp_data data;
};

extern int ptrace_access_vm(struct task_struct *tsk, unsigned long addr,
       void *buf, int len, unsigned int gup_flags);
# 56 "./include/linux/ptrace.h"
extern long arch_ptrace(struct task_struct *child, long request,
   unsigned long addr, unsigned long data);
extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);
extern int ptrace_writedata(struct task_struct *tsk, char *src, unsigned long dst, int len);
extern void ptrace_disable(struct task_struct *);
extern int ptrace_request(struct task_struct *child, long request,
     unsigned long addr, unsigned long data);
extern void ptrace_notify(int exit_code);
extern void __ptrace_link(struct task_struct *child,
     struct task_struct *new_parent,
     const struct cred *ptracer_cred);
extern void __ptrace_unlink(struct task_struct *child);
extern void exit_ptrace(struct task_struct *tracer, struct list_head *dead);
# 95 "./include/linux/ptrace.h"
extern bool ptrace_may_access(struct task_struct *task, unsigned int mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptrace_reparented(struct task_struct *child)
{
 return !same_thread_group(child->real_parent, child->parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_unlink(struct task_struct *child)
{
 if (__builtin_expect(!!(child->ptrace), 0))
  __ptrace_unlink(child);
}

int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
# 124 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *ptrace_parent(struct task_struct *task)
{
 if (__builtin_expect(!!(task->ptrace), 0))
  return ({ typeof(*(task->parent)) *________p1 = (typeof(*(task->parent)) *)({ do { extern void __compiletime_assert_252(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((task->parent)) == sizeof(char) || sizeof((task->parent)) == sizeof(short) || sizeof((task->parent)) == sizeof(int) || sizeof((task->parent)) == sizeof(long)) || sizeof((task->parent)) == sizeof(long long))) __compiletime_assert_252(); } while (0); (*(const volatile typeof( _Generic(((task->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((task->parent)))) *)&((task->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(task->parent)) *)(________p1)); });
 return ((void *)0);
}
# 140 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptrace_event_enabled(struct task_struct *task, int event)
{
 return task->ptrace & (1 << (3 + (event)));
}
# 155 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_event(int event, unsigned long message)
{
 if (__builtin_expect(!!(ptrace_event_enabled(get_current(), event)), 0)) {
  get_current()->ptrace_message = message;
  ptrace_notify((event << 8) | 5);
 } else if (event == 4) {

  if ((get_current()->ptrace & (0x00000001|0x00010000)) == 0x00000001)
   send_sig(5, get_current(), 0);
 }
}
# 178 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_event_pid(int event, struct pid *pid)
{






 unsigned long message = 0;
 struct pid_namespace *ns;

 rcu_read_lock();
 ns = task_active_pid_ns(({ typeof(*(get_current()->parent)) *________p1 = (typeof(*(get_current()->parent)) *)({ do { extern void __compiletime_assert_253(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((get_current()->parent)) == sizeof(char) || sizeof((get_current()->parent)) == sizeof(short) || sizeof((get_current()->parent)) == sizeof(int) || sizeof((get_current()->parent)) == sizeof(long)) || sizeof((get_current()->parent)) == sizeof(long long))) __compiletime_assert_253(); } while (0); (*(const volatile typeof( _Generic(((get_current()->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((get_current()->parent)))) *)&((get_current()->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(get_current()->parent)) *)(________p1)); }));
 if (ns)
  message = pid_nr_ns(pid, ns);
 rcu_read_unlock();

 ptrace_event(event, message);
}
# 208 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_init_task(struct task_struct *child, bool ptrace)
{
 INIT_LIST_HEAD(&child->ptrace_entry);
 INIT_LIST_HEAD(&child->ptraced);
 child->jobctl = 0;
 child->ptrace = 0;
 child->parent = child->real_parent;

 if (__builtin_expect(!!(ptrace), 0) && get_current()->ptrace) {
  child->ptrace = get_current()->ptrace;
  __ptrace_link(child, get_current()->parent, get_current()->ptracer_cred);

  if (child->ptrace & 0x00010000)
   task_set_jobctl_pending(child, (1UL << 19));
  else
   sigaddset(&child->pending.signal, 19);
 }
 else
  child->ptracer_cred = ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_release_task(struct task_struct *task)
{
 do { if (__builtin_expect(!!(!list_empty(&task->ptraced)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ptrace.h"), "i" (237), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 ptrace_unlink(task);
 do { if (__builtin_expect(!!(!list_empty(&task->ptrace_entry)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ptrace.h"), "i" (239), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
}
# 295 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_enable_single_step(struct task_struct *task)
{
 do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ptrace.h"), "i" (297), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);
}
# 309 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_disable_single_step(struct task_struct *task)
{
}
# 338 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_enable_block_step(struct task_struct *task)
{
 do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/ptrace.h"), "i" (340), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_single_step_report(struct pt_regs *regs)
{
 kernel_siginfo_t info;
 clear_siginfo(&info);
 info.si_signo = 5;
 info.si_errno = 0;
 info.si_code = 0;
 info._sifields._kill._pid = 0;
 info._sifields._kill._uid = 0;
 force_sig_info(&info);
}
# 417 "./include/linux/ptrace.h"
extern int task_current_syscall(struct task_struct *target, struct syscall_info *info);

extern void sigaction_compat_abi(struct k_sigaction *act, struct k_sigaction *oact);
# 16 "./include/linux/ftrace.h" 2






# 1 "./arch/riscv/include/asm/ftrace.h" 1
# 28 "./arch/riscv/include/asm/ftrace.h"
void _mcount(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ftrace_call_adjust(unsigned long addr)
{
 return addr;
}

struct dyn_arch_ftrace {
};
# 23 "./include/linux/ftrace.h" 2
# 49 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void early_trace_init(void) { }


struct module;
struct ftrace_hash;
struct ftrace_direct_func;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *
ftrace_mod_address_lookup(unsigned long addr, unsigned long *size,
     unsigned long *off, char **modname, char *sym)
{
 return ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ftrace_mod_get_kallsym(unsigned int symnum, unsigned long *value,
      char *type, char *name,
      char *module_name, int *exported)
{
 return -1;
}
# 295 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_kill(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_free_init_mem(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_free_mem(struct module *mod, void *start, void *end) { }


struct ftrace_func_entry {
 struct hlist_node hlist;
 unsigned long ip;
 unsigned long direct;
};

struct dyn_ftrace;
# 321 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_ftrace_direct(unsigned long ip, unsigned long addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_ftrace_direct(unsigned long ip, unsigned long addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int modify_ftrace_direct(unsigned long ip,
           unsigned long old_addr, unsigned long new_addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ftrace_direct_func *ftrace_find_direct_func(unsigned long addr)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ftrace_modify_direct_caller(struct ftrace_func_entry *entry,
           struct dyn_ftrace *rec,
           unsigned long old_addr,
           unsigned long new_addr)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ftrace_find_rec_direct(unsigned long ip)
{
 return 0;
}
# 365 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_ftrace_set_direct_caller(struct pt_regs *regs,
       unsigned long addr) { }
# 411 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void stack_tracer_disable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void stack_tracer_enable(void) { }
# 757 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skip_trace(unsigned long ip) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_disable_daemon(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_enable_daemon(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_module_init(struct module *mod) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_module_enable(struct module *mod) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_release_mod(struct module *mod) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ftrace_text_reserved(const void *start, const void *end)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ftrace_location(unsigned long ip)
{
 return 0;
}
# 785 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t ftrace_filter_write(struct file *file, const char *ubuf,
       size_t cnt, loff_t *ppos) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t ftrace_notrace_write(struct file *file, const char *ubuf,
        size_t cnt, loff_t *ppos) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
ftrace_regex_release(struct inode *inode, struct file *file) { return -19; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_ftrace_trampoline(unsigned long addr)
{
 return false;
}



void ftrace_kill(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracer_disable(void)
{



}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ftrace_enabled_save(void)
{





 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ftrace_enabled_restore(int enabled)
{



}
# 853 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_lock_parent_ip(void)
{
 unsigned long addr = ((unsigned long)__builtin_return_address(0));

 if (!in_lock_functions(addr))
  return addr;
 addr = ((unsigned long)__builtin_return_address(1));
 if (!in_lock_functions(addr))
  return addr;
 return ((unsigned long)__builtin_return_address(2));
}
# 885 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_init(void) { }







struct ftrace_graph_ent {
 unsigned long func;
 int depth;
} __attribute__((__packed__));






struct ftrace_graph_ret {
 unsigned long func;
 int depth;

 unsigned int overrun;
 unsigned long long calltime;
 unsigned long long rettime;
} __attribute__((__packed__));


typedef void (*trace_func_graph_ret_t)(struct ftrace_graph_ret *);
typedef int (*trace_func_graph_ent_t)(struct ftrace_graph_ent *);

extern int ftrace_graph_entry_stub(struct ftrace_graph_ent *trace);
# 999 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_graph_init_task(struct task_struct *t) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_graph_exit_task(struct task_struct *t) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_graph_init_idle_task(struct task_struct *t, int cpu) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
ftrace_graph_ret_addr(struct task_struct *task, int *idx, unsigned long ret,
        unsigned long *retp)
{
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pause_graph_tracing(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unpause_graph_tracing(void) { }
# 1072 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_trace_on_warning(void) { }
# 30 "./include/linux/kprobes.h" 2

# 1 "./include/linux/freelist.h" 1
# 18 "./include/linux/freelist.h"
struct freelist_node {
 atomic_t refs;
 struct freelist_node *next;
};

struct freelist_head {
 struct freelist_node *head;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __freelist_add(struct freelist_node *node, struct freelist_head *list)
{
# 46 "./include/linux/freelist.h"
 struct freelist_node *head = ({ do { extern void __compiletime_assert_254(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->head) == sizeof(char) || sizeof(list->head) == sizeof(short) || sizeof(list->head) == sizeof(int) || sizeof(list->head) == sizeof(long)) || sizeof(list->head) == sizeof(long long))) __compiletime_assert_254(); } while (0); (*(const volatile typeof( _Generic((list->head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (list->head))) *)&(list->head)); });

 for (;;) {
  do { do { extern void __compiletime_assert_255(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->next) == sizeof(char) || sizeof(node->next) == sizeof(short) || sizeof(node->next) == sizeof(int) || sizeof(node->next) == sizeof(long)) || sizeof(node->next) == sizeof(long long))) __compiletime_assert_255(); } while (0); do { *(volatile typeof(node->next) *)&(node->next) = (head); } while (0); } while (0);
  atomic_set_release(&node->refs, 1);

  if (!({ typeof(&list->head) __ai_ptr = (&list->head); typeof(&head) __ai_oldp = (&head); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); instrument_atomic_write(__ai_oldp, sizeof(*__ai_oldp)); ({ typeof(*(__ai_ptr)) *___op = (__ai_oldp), ___o = *___op, ___r; ___r = ({ __typeof__(*((__ai_ptr))) _o_ = (___o); __typeof__(*((__ai_ptr))) _n_ = ((node)); (__typeof__(*((__ai_ptr)))) ({ __typeof__(((__ai_ptr))) __ptr = (((__ai_ptr))); __typeof__(*(((__ai_ptr)))) __old = (_o_); __typeof__(*(((__ai_ptr)))) __new = (_n_); __typeof__(*(((__ai_ptr)))) __ret; register unsigned int __rc; switch (sizeof(*((__ai_ptr)))) { case 4: __asm__ __volatile__ ( "\tfence rw,  w\n" "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "\tfence rw,  w\n" "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_256(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_256(); } while (0); } __ret; }); }); if (__builtin_expect(!!(___r != ___o), 0)) *___op = ___r; __builtin_expect(!!(___r == ___o), 1); }); })) {




   if (atomic_fetch_add_release(0x80000000 - 1, &node->refs) == 1)
    continue;
  }
  return;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void freelist_add(struct freelist_node *node, struct freelist_head *list)
{




 if (!atomic_fetch_add_release(0x80000000, &node->refs)) {




  __freelist_add(node, list);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct freelist_node *freelist_try_get(struct freelist_head *list)
{
 struct freelist_node *prev, *next, *head = ({ typeof(*&list->head) ___p1 = ({ do { extern void __compiletime_assert_257(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&list->head) == sizeof(char) || sizeof(*&list->head) == sizeof(short) || sizeof(*&list->head) == sizeof(int) || sizeof(*&list->head) == sizeof(long)) || sizeof(*&list->head) == sizeof(long long))) __compiletime_assert_257(); } while (0); (*(const volatile typeof( _Generic((*&list->head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&list->head))) *)&(*&list->head)); }); do { extern void __compiletime_assert_258(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&list->head) == sizeof(char) || sizeof(*&list->head) == sizeof(short) || sizeof(*&list->head) == sizeof(int) || sizeof(*&list->head) == sizeof(long)))) __compiletime_assert_258(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
 unsigned int refs;

 while (head) {
  prev = head;
  refs = atomic_read(&head->refs);
  if ((refs & 0x7FFFFFFF) == 0 ||
      !atomic_try_cmpxchg_acquire(&head->refs, &refs, refs+1)) {
   head = ({ typeof(*&list->head) ___p1 = ({ do { extern void __compiletime_assert_259(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&list->head) == sizeof(char) || sizeof(*&list->head) == sizeof(short) || sizeof(*&list->head) == sizeof(int) || sizeof(*&list->head) == sizeof(long)) || sizeof(*&list->head) == sizeof(long long))) __compiletime_assert_259(); } while (0); (*(const volatile typeof( _Generic((*&list->head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&list->head))) *)&(*&list->head)); }); do { extern void __compiletime_assert_260(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&list->head) == sizeof(char) || sizeof(*&list->head) == sizeof(short) || sizeof(*&list->head) == sizeof(int) || sizeof(*&list->head) == sizeof(long)))) __compiletime_assert_260(); } while (0); __asm__ __volatile__ ("fence " "r" "," "rw" : : : "memory"); ___p1; });
   continue;
  }






  next = ({ do { extern void __compiletime_assert_261(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_261(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); });
  if (({ typeof(&list->head) __ai_ptr = (&list->head); typeof(&head) __ai_oldp = (&head); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); instrument_atomic_write(__ai_oldp, sizeof(*__ai_oldp)); ({ typeof(*(__ai_ptr)) *___op = (__ai_oldp), ___o = *___op, ___r; ___r = ({ __typeof__(*((__ai_ptr))) _o_ = (___o); __typeof__(*((__ai_ptr))) _n_ = ((next)); (__typeof__(*((__ai_ptr)))) ({ __typeof__(((__ai_ptr))) __ptr = (((__ai_ptr))); __typeof__(*(((__ai_ptr)))) __old = (_o_); __typeof__(*(((__ai_ptr)))) __new = (_n_); __typeof__(*(((__ai_ptr)))) __ret; register unsigned int __rc; switch (sizeof(*((__ai_ptr)))) { case 4: __asm__ __volatile__ ( "0:	lr.w %0, %2\n" "	bne  %0, %z3, 1f\n" "	sc.w %1, %z4, %2\n" "	bnez %1, 0b\n" "\tfence r , rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" ((long)__old), "rJ" (__new) : "memory"); break; case 8: __asm__ __volatile__ ( "0:	lr.d %0, %2\n" "	bne %0, %z3, 1f\n" "	sc.d %1, %z4, %2\n" "	bnez %1, 0b\n" "\tfence r , rw\n" "1:\n" : "=&r" (__ret), "=&r" (__rc), "+A" (*__ptr) : "rJ" (__old), "rJ" (__new) : "memory"); break; default: do { extern void __compiletime_assert_262(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_262(); } while (0); } __ret; }); }); if (__builtin_expect(!!(___r != ___o), 0)) *___op = ___r; __builtin_expect(!!(___r == ___o), 1); }); })) {






   ({ int __ret_warn_on = !!(atomic_read(&head->refs) & 0x80000000); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/freelist.h"), "i" (106), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });





   atomic_fetch_add(-2, &head->refs);

   return head;
  }





  refs = atomic_fetch_add(-1, &prev->refs);
  if (refs == 0x80000000 + 1)
   __freelist_add(prev, list);
 }

 return ((void *)0);
}
# 32 "./include/linux/kprobes.h" 2
# 1 "./arch/riscv/include/asm/kprobes.h" 1
# 12 "./arch/riscv/include/asm/kprobes.h"
# 1 "./include/asm-generic/kprobes.h" 1
# 13 "./arch/riscv/include/asm/kprobes.h" 2
# 33 "./include/linux/kprobes.h" 2
# 44 "./include/linux/kprobes.h"
typedef int kprobe_opcode_t;
struct arch_specific_insn {
 int dummy;
};


struct kprobe;
struct pt_regs;
struct kretprobe;
struct kretprobe_instance;
typedef int (*kprobe_pre_handler_t) (struct kprobe *, struct pt_regs *);
typedef void (*kprobe_post_handler_t) (struct kprobe *, struct pt_regs *,
           unsigned long flags);
typedef int (*kretprobe_handler_t) (struct kretprobe_instance *,
        struct pt_regs *);

struct kprobe {
 struct hlist_node hlist;


 struct list_head list;


 unsigned long nmissed;


 kprobe_opcode_t *addr;


 const char *symbol_name;


 unsigned int offset;


 kprobe_pre_handler_t pre_handler;


 kprobe_post_handler_t post_handler;


 kprobe_opcode_t opcode;


 struct arch_specific_insn ainsn;





 u32 flags;
};
# 108 "./include/linux/kprobes.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobe_gone(struct kprobe *p)
{
 return p->flags & 1;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobe_disabled(struct kprobe *p)
{
 return p->flags & (2 | 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobe_optimized(struct kprobe *p)
{
 return p->flags & 4;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobe_ftrace(struct kprobe *p)
{
 return p->flags & 8;
}
# 141 "./include/linux/kprobes.h"
struct kretprobe_holder {
 struct kretprobe *rp;
 refcount_t ref;
};

struct kretprobe {
 struct kprobe kp;
 kretprobe_handler_t handler;
 kretprobe_handler_t entry_handler;
 int maxactive;
 int nmissed;
 size_t data_size;
 struct freelist_head freelist;
 struct kretprobe_holder *rph;
};

struct kretprobe_instance {
 union {
  struct freelist_node freelist;
  struct callback_head rcu;
 };
 struct llist_node llist;
 struct kretprobe_holder *rph;
 kprobe_opcode_t *ret_addr;
 void *fp;
 char data[];
};

struct kretprobe_blackpoint {
 const char *name;
 void *addr;
};

struct kprobe_blacklist_entry {
 struct list_head list;
 unsigned long start_addr;
 unsigned long end_addr;
};
# 413 "./include/linux/kprobes.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobes_built_in(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobe_fault_handler(struct pt_regs *regs, int trapnr)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kprobe *get_kprobe(void *addr)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kprobe *kprobe_running(void)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_kprobe(struct kprobe *p)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_kprobes(struct kprobe **kps, int num)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_kprobe(struct kprobe *p)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_kprobes(struct kprobe **kps, int num)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_kretprobe(struct kretprobe *rp)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_kretprobes(struct kretprobe **rps, int num)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_kretprobe(struct kretprobe *rp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_kretprobes(struct kretprobe **rps, int num)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kprobe_flush_task(struct task_struct *tk)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kprobe_free_init_mem(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disable_kprobe(struct kprobe *kp)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int enable_kprobe(struct kprobe *kp)
{
 return -38;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_kprobe_blacklist(unsigned long addr)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kprobe_get_kallsym(unsigned int symnum, unsigned long *value,
         char *type, char *sym)
{
 return -34;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disable_kretprobe(struct kretprobe *rp)
{
 return disable_kprobe(&rp->kp);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int enable_kretprobe(struct kretprobe *rp)
{
 return enable_kprobe(&rp->kp);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kprobe_insn_slot(unsigned long addr)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kprobe_optinsn_slot(unsigned long addr)
{
 return false;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprobe_page_fault(struct pt_regs *regs,
           unsigned int trap)
{
 if (!kprobes_built_in())
  return false;
 if ((((regs)->status & (0x00000100UL)) == 0))
  return false;




 if ((preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })))
  return false;
 if (!kprobe_running())
  return false;
 return kprobe_fault_handler(regs, trap);
}
# 20 "./include/linux/kgdb.h" 2

# 1 "./arch/riscv/include/asm/kgdb.h" 1
# 22 "./arch/riscv/include/asm/kgdb.h"
extern unsigned long kgdb_compiled_break;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_kgdb_breakpoint(void)
{
 asm(".global kgdb_compiled_break\n"
     ".option norvc\n"
     "kgdb_compiled_break: ebreak\n"
     ".option rvc\n");
}
# 108 "./arch/riscv/include/asm/kgdb.h"
extern const char riscv_gdb_stub_feature[64];
# 22 "./include/linux/kgdb.h" 2
# 366 "./include/linux/kgdb.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kgdb_panic(const char *msg) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kgdb_free_init_mem(void) { }
# 37 "./include/drm/drm_util.h" 2
# 76 "./include/drm/drm_util.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_can_sleep(void)
{
 if ((preempt_count() != 0) || (0) || ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }))
  return false;
 return true;
}
# 32 "./include/drm/drm_connector.h" 2



struct drm_connector_helper_funcs;
struct drm_modeset_acquire_ctx;
struct drm_device;
struct drm_crtc;
struct drm_encoder;
struct drm_property;
struct drm_property_blob;
struct drm_printer;
struct edid;
struct i2c_adapter;

enum drm_connector_force {
 DRM_FORCE_UNSPECIFIED,
 DRM_FORCE_OFF,
 DRM_FORCE_ON,
 DRM_FORCE_ON_DIGITAL,
};







enum drm_connector_status {




 connector_status_connected = 1,







 connector_status_disconnected = 2,
# 83 "./include/drm/drm_connector.h"
 connector_status_unknown = 3,
};
# 94 "./include/drm/drm_connector.h"
enum drm_connector_registration_state {






 DRM_CONNECTOR_INITIALIZING = 0,







 DRM_CONNECTOR_REGISTERED = 1,
# 130 "./include/drm/drm_connector.h"
 DRM_CONNECTOR_UNREGISTERED = 2,
};

enum subpixel_order {
 SubPixelUnknown = 0,
 SubPixelHorizontalRGB,
 SubPixelHorizontalBGR,
 SubPixelVerticalRGB,
 SubPixelVerticalBGR,
 SubPixelNone,

};




struct drm_scrambling {



 bool supported;



 bool low_rates;
};







struct drm_scdc {



 bool supported;



 bool read_request;



 struct drm_scrambling scrambling;
};
# 185 "./include/drm/drm_connector.h"
struct drm_hdmi_dsc_cap {

 bool v_1p2;


 bool native_420;





 bool all_bpp;




 u8 bpc_supported;


 u8 max_slices;


 int clk_per_slice;


 u8 max_lanes;


 u8 max_frl_rate_per_lane;


 u8 total_chunk_kbytes;
};







struct drm_hdmi_info {

 struct drm_scdc scdc;







 unsigned long y420_vdb_modes[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];







 unsigned long y420_cmdb_modes[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 u64 y420_cmdb_map;


 u8 y420_dc_modes;


 u8 max_frl_rate_per_lane;


 u8 max_lanes;


 struct drm_hdmi_dsc_cap dsc_cap;
};
# 272 "./include/drm/drm_connector.h"
enum drm_link_status {
 DRM_LINK_STATUS_GOOD = 0,
 DRM_LINK_STATUS_BAD = 1,
};
# 298 "./include/drm/drm_connector.h"
enum drm_panel_orientation {
 DRM_MODE_PANEL_ORIENTATION_UNKNOWN = -1,
 DRM_MODE_PANEL_ORIENTATION_NORMAL = 0,
 DRM_MODE_PANEL_ORIENTATION_BOTTOM_UP,
 DRM_MODE_PANEL_ORIENTATION_LEFT_UP,
 DRM_MODE_PANEL_ORIENTATION_RIGHT_UP,
};
# 318 "./include/drm/drm_connector.h"
struct drm_monitor_range_info {
 u8 min_vfreq;
 u8 max_vfreq;
};
# 373 "./include/drm/drm_connector.h"
enum drm_bus_flags {





 DRM_BUS_FLAG_DE_LOW = ((((1UL))) << (0)),






 DRM_BUS_FLAG_DE_HIGH = ((((1UL))) << (1)),






 DRM_BUS_FLAG_PIXDATA_DRIVE_POSEDGE = ((((1UL))) << (2)),






 DRM_BUS_FLAG_PIXDATA_DRIVE_NEGEDGE = ((((1UL))) << (3)),






 DRM_BUS_FLAG_PIXDATA_SAMPLE_POSEDGE = DRM_BUS_FLAG_PIXDATA_DRIVE_NEGEDGE,






 DRM_BUS_FLAG_PIXDATA_SAMPLE_NEGEDGE = DRM_BUS_FLAG_PIXDATA_DRIVE_POSEDGE,






 DRM_BUS_FLAG_DATA_MSB_TO_LSB = ((((1UL))) << (4)),






 DRM_BUS_FLAG_DATA_LSB_TO_MSB = ((((1UL))) << (5)),






 DRM_BUS_FLAG_SYNC_DRIVE_POSEDGE = ((((1UL))) << (6)),






 DRM_BUS_FLAG_SYNC_DRIVE_NEGEDGE = ((((1UL))) << (7)),






 DRM_BUS_FLAG_SYNC_SAMPLE_POSEDGE = DRM_BUS_FLAG_SYNC_DRIVE_NEGEDGE,






 DRM_BUS_FLAG_SYNC_SAMPLE_NEGEDGE = DRM_BUS_FLAG_SYNC_DRIVE_POSEDGE,






 DRM_BUS_FLAG_SHARP_SIGNALS = ((((1UL))) << (8)),
};
# 477 "./include/drm/drm_connector.h"
struct drm_display_info {



 unsigned int width_mm;




 unsigned int height_mm;




 unsigned int bpc;




 enum subpixel_order subpixel_order;
# 510 "./include/drm/drm_connector.h"
 int panel_orientation;







 u32 color_formats;






 const u32 *bus_formats;



 unsigned int num_bus_formats;






 u32 bus_flags;





 int max_tmds_clock;




 bool dvi_dual;







 bool is_hdmi;




 bool has_hdmi_infoframe;





 bool rgb_quant_range_selectable;





 u8 edid_hdmi_dc_modes;




 u8 cea_rev;




 struct drm_hdmi_info hdmi;




 bool non_desktop;




 struct drm_monitor_range_info monitor_range;
};

int drm_display_info_set_bus_formats(struct drm_display_info *info,
         const u32 *formats,
         unsigned int num_formats);







struct drm_connector_tv_margins {



 unsigned int bottom;




 unsigned int left;




 unsigned int right;




 unsigned int top;
};
# 639 "./include/drm/drm_connector.h"
struct drm_tv_connector_state {
 enum drm_mode_subconnector subconnector;
 struct drm_connector_tv_margins margins;
 unsigned int mode;
 unsigned int brightness;
 unsigned int contrast;
 unsigned int flicker_reduction;
 unsigned int overscan;
 unsigned int saturation;
 unsigned int hue;
};




struct drm_connector_state {

 struct drm_connector *connector;







 struct drm_crtc *crtc;
# 682 "./include/drm/drm_connector.h"
 struct drm_encoder *best_encoder;





 enum drm_link_status link_status;


 struct drm_atomic_state *state;






 struct drm_crtc_commit *commit;


 struct drm_tv_connector_state tv;
# 715 "./include/drm/drm_connector.h"
 bool self_refresh_aware;
# 724 "./include/drm/drm_connector.h"
 enum hdmi_picture_aspect picture_aspect_ratio;







 unsigned int content_type;





 unsigned int hdcp_content_type;





 unsigned int scaling_mode;





 unsigned int content_protection;






 u32 colorspace;
# 770 "./include/drm/drm_connector.h"
 struct drm_writeback_job *writeback_job;





 u8 max_requested_bpc;





 u8 max_bpc;





 struct drm_property_blob *hdr_output_metadata;
};
# 798 "./include/drm/drm_connector.h"
struct drm_connector_funcs {
# 815 "./include/drm/drm_connector.h"
 int (*dpms)(struct drm_connector *connector, int mode);
# 827 "./include/drm/drm_connector.h"
 void (*reset)(struct drm_connector *connector);
# 860 "./include/drm/drm_connector.h"
 enum drm_connector_status (*detect)(struct drm_connector *connector,
         bool force);
# 877 "./include/drm/drm_connector.h"
 void (*force)(struct drm_connector *connector);
# 902 "./include/drm/drm_connector.h"
 int (*fill_modes)(struct drm_connector *connector, uint32_t max_width, uint32_t max_height);
# 918 "./include/drm/drm_connector.h"
 int (*set_property)(struct drm_connector *connector, struct drm_property *property,
        uint64_t val);
# 937 "./include/drm/drm_connector.h"
 int (*late_register)(struct drm_connector *connector);
# 950 "./include/drm/drm_connector.h"
 void (*early_unregister)(struct drm_connector *connector);
# 960 "./include/drm/drm_connector.h"
 void (*destroy)(struct drm_connector *connector);
# 993 "./include/drm/drm_connector.h"
 struct drm_connector_state *(*atomic_duplicate_state)(struct drm_connector *connector);
# 1003 "./include/drm/drm_connector.h"
 void (*atomic_destroy_state)(struct drm_connector *connector,
         struct drm_connector_state *state);
# 1048 "./include/drm/drm_connector.h"
 int (*atomic_set_property)(struct drm_connector *connector,
       struct drm_connector_state *state,
       struct drm_property *property,
       uint64_t val);
# 1071 "./include/drm/drm_connector.h"
 int (*atomic_get_property)(struct drm_connector *connector,
       const struct drm_connector_state *state,
       struct drm_property *property,
       uint64_t *val);
# 1085 "./include/drm/drm_connector.h"
 void (*atomic_print_state)(struct drm_printer *p,
       const struct drm_connector_state *state);
};
# 1097 "./include/drm/drm_connector.h"
struct drm_cmdline_mode {





 char name[32];






 bool specified;






 bool refresh_specified;






 bool bpp_specified;






 int xres;






 int yres;






 int bpp;






 int refresh;






 bool rb;






 bool interlace;







 bool cvt;







 bool margins;







 enum drm_connector_force force;
# 1200 "./include/drm/drm_connector.h"
 unsigned int rotation_reflection;







 enum drm_panel_orientation panel_orientation;




 struct drm_connector_tv_margins tv_margins;
};
# 1224 "./include/drm/drm_connector.h"
struct drm_connector {

 struct drm_device *dev;

 struct device *kdev;

 struct device_attribute *attr;
# 1240 "./include/drm/drm_connector.h"
 struct list_head head;


 struct drm_mode_object base;


 char *name;






 struct mutex mutex;







 unsigned index;





 int connector_type;

 int connector_type_id;





 bool interlace_allowed;





 bool doublescan_allowed;





 bool stereo_allowed;







 bool ycbcr_420_allowed;







 enum drm_connector_registration_state registration_state;






 struct list_head modes;






 enum drm_connector_status status;







 struct list_head probed_modes;
# 1336 "./include/drm/drm_connector.h"
 struct drm_display_info display_info;


 const struct drm_connector_funcs *funcs;






 struct drm_property_blob *edid_blob_ptr;


 struct drm_object_properties properties;





 struct drm_property *scaling_mode_property;
# 1366 "./include/drm/drm_connector.h"
 struct drm_property *vrr_capable_property;





 struct drm_property *colorspace_property;







 struct drm_property_blob *path_blob_ptr;





 struct drm_property *max_bpc_property;
# 1413 "./include/drm/drm_connector.h"
 uint8_t polled;







 int dpms;


 const struct drm_connector_helper_funcs *helper_private;


 struct drm_cmdline_mode cmdline_mode;

 enum drm_connector_force force;

 bool override_edid;

 u64 epoch_counter;






 u32 possible_encoders;







 struct drm_encoder *encoder;



 uint8_t eld[128];

 bool latency_present[2];




 int video_latency[2];




 int audio_latency[2];
# 1475 "./include/drm/drm_connector.h"
 struct i2c_adapter *ddc;





 int null_edid_counter;


 unsigned bad_edid_counter;






 bool edid_corrupt;





 u8 real_edid_checksum;


 struct dentry *debugfs_entry;
# 1516 "./include/drm/drm_connector.h"
 struct drm_connector_state *state;
# 1533 "./include/drm/drm_connector.h"
 struct drm_property_blob *tile_blob_ptr;


 bool has_tile;

 struct drm_tile_group *tile_group;

 bool tile_is_single_monitor;



 uint8_t num_h_tile, num_v_tile;


 uint8_t tile_h_loc, tile_v_loc;


 uint16_t tile_h_size, tile_v_size;
# 1559 "./include/drm/drm_connector.h"
 struct llist_node free_node;


 struct hdr_sink_metadata hdr_sink_metadata;
};



int drm_connector_init(struct drm_device *dev,
         struct drm_connector *connector,
         const struct drm_connector_funcs *funcs,
         int connector_type);
int drm_connector_init_with_ddc(struct drm_device *dev,
    struct drm_connector *connector,
    const struct drm_connector_funcs *funcs,
    int connector_type,
    struct i2c_adapter *ddc);
void drm_connector_attach_edid_property(struct drm_connector *connector);
int drm_connector_register(struct drm_connector *connector);
void drm_connector_unregister(struct drm_connector *connector);
int drm_connector_attach_encoder(struct drm_connector *connector,
          struct drm_encoder *encoder);

void drm_connector_cleanup(struct drm_connector *connector);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_connector_index(const struct drm_connector *connector)
{
 return connector->index;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_connector_mask(const struct drm_connector *connector)
{
 return 1 << connector->index;
}
# 1603 "./include/drm/drm_connector.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector *drm_connector_lookup(struct drm_device *dev,
  struct drm_file *file_priv,
  uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xc0c0c0c0);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_263(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_connector *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_263(); } while (0); ((struct drm_connector *)(__mptr - __builtin_offsetof(struct drm_connector, base))); }) : ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_connector_get(struct drm_connector *connector)
{
 drm_mode_object_get(&connector->base);
}
# 1630 "./include/drm/drm_connector.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_connector_put(struct drm_connector *connector)
{
 drm_mode_object_put(&connector->base);
}
# 1646 "./include/drm/drm_connector.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_connector_is_unregistered(struct drm_connector *connector)
{
 return ({ do { extern void __compiletime_assert_264(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(connector->registration_state) == sizeof(char) || sizeof(connector->registration_state) == sizeof(short) || sizeof(connector->registration_state) == sizeof(int) || sizeof(connector->registration_state) == sizeof(long)) || sizeof(connector->registration_state) == sizeof(long long))) __compiletime_assert_264(); } while (0); (*(const volatile typeof( _Generic((connector->registration_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (connector->registration_state))) *)&(connector->registration_state)); }) ==
  DRM_CONNECTOR_UNREGISTERED;
}

const char *drm_get_connector_type_name(unsigned int connector_type);
const char *drm_get_connector_status_name(enum drm_connector_status status);
const char *drm_get_subpixel_order_name(enum subpixel_order order);
const char *drm_get_dpms_name(int val);
const char *drm_get_dvi_i_subconnector_name(int val);
const char *drm_get_dvi_i_select_name(int val);
const char *drm_get_tv_subconnector_name(int val);
const char *drm_get_tv_select_name(int val);
const char *drm_get_dp_subconnector_name(int val);
const char *drm_get_content_protection_name(int val);
const char *drm_get_hdcp_content_type_name(int val);

int drm_mode_create_dvi_i_properties(struct drm_device *dev);
void drm_connector_attach_dp_subconnector_property(struct drm_connector *connector);

int drm_mode_create_tv_margin_properties(struct drm_device *dev);
int drm_mode_create_tv_properties(struct drm_device *dev,
      unsigned int num_modes,
      const char * const modes[]);
void drm_connector_attach_tv_margin_properties(struct drm_connector *conn);
int drm_mode_create_scaling_mode_property(struct drm_device *dev);
int drm_connector_attach_content_type_property(struct drm_connector *dev);
int drm_connector_attach_scaling_mode_property(struct drm_connector *connector,
            u32 scaling_mode_mask);
int drm_connector_attach_vrr_capable_property(
  struct drm_connector *connector);
int drm_connector_attach_colorspace_property(struct drm_connector *connector);
int drm_connector_attach_hdr_output_metadata_property(struct drm_connector *connector);
bool drm_connector_atomic_hdr_metadata_equal(struct drm_connector_state *old_state,
          struct drm_connector_state *new_state);
int drm_mode_create_aspect_ratio_property(struct drm_device *dev);
int drm_mode_create_hdmi_colorspace_property(struct drm_connector *connector);
int drm_mode_create_dp_colorspace_property(struct drm_connector *connector);
int drm_mode_create_content_type_property(struct drm_device *dev);
void drm_hdmi_avi_infoframe_content_type(struct hdmi_avi_infoframe *frame,
      const struct drm_connector_state *conn_state);

int drm_mode_create_suggested_offset_properties(struct drm_device *dev);

int drm_connector_set_path_property(struct drm_connector *connector,
        const char *path);
int drm_connector_set_tile_property(struct drm_connector *connector);
int drm_connector_update_edid_property(struct drm_connector *connector,
           const struct edid *edid);
void drm_connector_set_link_status_property(struct drm_connector *connector,
         uint64_t link_status);
void drm_connector_set_vrr_capable_property(
  struct drm_connector *connector, bool capable);
int drm_connector_set_panel_orientation(
 struct drm_connector *connector,
 enum drm_panel_orientation panel_orientation);
int drm_connector_set_panel_orientation_with_quirk(
 struct drm_connector *connector,
 enum drm_panel_orientation panel_orientation,
 int width, int height);
int drm_connector_attach_max_bpc_property(struct drm_connector *connector,
       int min, int max);
# 1721 "./include/drm/drm_connector.h"
struct drm_tile_group {
 struct kref refcount;
 struct drm_device *dev;
 int id;
 u8 group_data[8];
};

struct drm_tile_group *drm_mode_create_tile_group(struct drm_device *dev,
        const char topology[8]);
struct drm_tile_group *drm_mode_get_tile_group(struct drm_device *dev,
            const char topology[8]);
void drm_mode_put_tile_group(struct drm_device *dev,
        struct drm_tile_group *tg);
# 1749 "./include/drm/drm_connector.h"
struct drm_connector_list_iter {

 struct drm_device *dev;
 struct drm_connector *conn;
};

void drm_connector_list_iter_begin(struct drm_device *dev,
       struct drm_connector_list_iter *iter);
struct drm_connector *
drm_connector_list_iter_next(struct drm_connector_list_iter *iter);
void drm_connector_list_iter_end(struct drm_connector_list_iter *iter);

bool drm_connector_has_possible_encoder(struct drm_connector *connector,
     struct drm_encoder *encoder);
# 34 "./include/drm/drm_modes.h" 2

struct videomode;
# 91 "./include/drm/drm_modes.h"
enum drm_mode_status {
 MODE_OK = 0,
 MODE_HSYNC,
 MODE_VSYNC,
 MODE_H_ILLEGAL,
 MODE_V_ILLEGAL,
 MODE_BAD_WIDTH,
 MODE_NOMODE,
 MODE_NO_INTERLACE,
 MODE_NO_DBLESCAN,
 MODE_NO_VSCAN,
 MODE_MEM,
 MODE_VIRTUAL_X,
 MODE_VIRTUAL_Y,
 MODE_MEM_VIRT,
 MODE_NOCLOCK,
 MODE_CLOCK_HIGH,
 MODE_CLOCK_LOW,
 MODE_CLOCK_RANGE,
 MODE_BAD_HVALUE,
 MODE_BAD_VVALUE,
 MODE_BAD_VSCAN,
 MODE_HSYNC_NARROW,
 MODE_HSYNC_WIDE,
 MODE_HBLANK_NARROW,
 MODE_HBLANK_WIDE,
 MODE_VSYNC_NARROW,
 MODE_VSYNC_WIDE,
 MODE_VBLANK_NARROW,
 MODE_VBLANK_WIDE,
 MODE_PANEL,
 MODE_INTERLACE_WIDTH,
 MODE_ONE_WIDTH,
 MODE_ONE_HEIGHT,
 MODE_ONE_SIZE,
 MODE_NO_REDUCED,
 MODE_NO_STEREO,
 MODE_NO_420,
 MODE_STALE = -3,
 MODE_BAD = -2,
 MODE_ERROR = -1
};
# 227 "./include/drm/drm_modes.h"
struct drm_display_mode {





 int clock;
 u16 hdisplay;
 u16 hsync_start;
 u16 hsync_end;
 u16 htotal;
 u16 hskew;
 u16 vdisplay;
 u16 vsync_start;
 u16 vsync_end;
 u16 vtotal;
 u16 vscan;
# 278 "./include/drm/drm_modes.h"
 u32 flags;
# 295 "./include/drm/drm_modes.h"
 int crtc_clock;
 u16 crtc_hdisplay;
 u16 crtc_hblank_start;
 u16 crtc_hblank_end;
 u16 crtc_hsync_start;
 u16 crtc_hsync_end;
 u16 crtc_htotal;
 u16 crtc_hskew;
 u16 crtc_vdisplay;
 u16 crtc_vblank_start;
 u16 crtc_vblank_end;
 u16 crtc_vsync_start;
 u16 crtc_vsync_end;
 u16 crtc_vtotal;







 u16 width_mm;







 u16 height_mm;
# 353 "./include/drm/drm_modes.h"
 u8 type;
# 364 "./include/drm/drm_modes.h"
 bool expose_to_userspace;






 struct list_head head;






 char name[32];







 enum drm_mode_status status;






 enum hdmi_picture_aspect picture_aspect_ratio;

};
# 422 "./include/drm/drm_modes.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mode_is_stereo(const struct drm_display_mode *mode)
{
 return mode->flags & (0x1f<<14);
}

struct drm_connector;
struct drm_cmdline_mode;

struct drm_display_mode *drm_mode_create(struct drm_device *dev);
void drm_mode_destroy(struct drm_device *dev, struct drm_display_mode *mode);
void drm_mode_convert_to_umode(struct drm_mode_modeinfo *out,
          const struct drm_display_mode *in);
int drm_mode_convert_umode(struct drm_device *dev,
      struct drm_display_mode *out,
      const struct drm_mode_modeinfo *in);
void drm_mode_probed_add(struct drm_connector *connector, struct drm_display_mode *mode);
void drm_mode_debug_printmodeline(const struct drm_display_mode *mode);
bool drm_mode_is_420_only(const struct drm_display_info *display,
     const struct drm_display_mode *mode);
bool drm_mode_is_420_also(const struct drm_display_info *display,
     const struct drm_display_mode *mode);
bool drm_mode_is_420(const struct drm_display_info *display,
       const struct drm_display_mode *mode);

struct drm_display_mode *drm_cvt_mode(struct drm_device *dev,
          int hdisplay, int vdisplay, int vrefresh,
          bool reduced, bool interlaced,
          bool margins);
struct drm_display_mode *drm_gtf_mode(struct drm_device *dev,
          int hdisplay, int vdisplay, int vrefresh,
          bool interlaced, int margins);
struct drm_display_mode *drm_gtf_mode_complex(struct drm_device *dev,
           int hdisplay, int vdisplay,
           int vrefresh, bool interlaced,
           int margins,
           int GTF_M, int GTF_2C,
           int GTF_K, int GTF_2J);
void drm_display_mode_from_videomode(const struct videomode *vm,
         struct drm_display_mode *dmode);
void drm_display_mode_to_videomode(const struct drm_display_mode *dmode,
       struct videomode *vm);
void drm_bus_flags_from_videomode(const struct videomode *vm, u32 *bus_flags);


int of_get_drm_display_mode(struct device_node *np,
       struct drm_display_mode *dmode, u32 *bus_flags,
       int index);
# 478 "./include/drm/drm_modes.h"
void drm_mode_set_name(struct drm_display_mode *mode);
int drm_mode_vrefresh(const struct drm_display_mode *mode);
void drm_mode_get_hv_timing(const struct drm_display_mode *mode,
       int *hdisplay, int *vdisplay);

void drm_mode_set_crtcinfo(struct drm_display_mode *p,
      int adjust_flags);
void drm_mode_copy(struct drm_display_mode *dst,
     const struct drm_display_mode *src);
struct drm_display_mode *drm_mode_duplicate(struct drm_device *dev,
         const struct drm_display_mode *mode);
bool drm_mode_match(const struct drm_display_mode *mode1,
      const struct drm_display_mode *mode2,
      unsigned int match_flags);
bool drm_mode_equal(const struct drm_display_mode *mode1,
      const struct drm_display_mode *mode2);
bool drm_mode_equal_no_clocks(const struct drm_display_mode *mode1,
         const struct drm_display_mode *mode2);
bool drm_mode_equal_no_clocks_no_stereo(const struct drm_display_mode *mode1,
     const struct drm_display_mode *mode2);


enum drm_mode_status drm_mode_validate_driver(struct drm_device *dev,
           const struct drm_display_mode *mode);
enum drm_mode_status drm_mode_validate_size(const struct drm_display_mode *mode,
         int maxX, int maxY);
enum drm_mode_status
drm_mode_validate_ycbcr420(const struct drm_display_mode *mode,
      struct drm_connector *connector);
void drm_mode_prune_invalid(struct drm_device *dev,
       struct list_head *mode_list, bool verbose);
void drm_mode_sort(struct list_head *mode_list);
void drm_connector_list_update(struct drm_connector *connector);


bool
drm_mode_parse_command_line_for_connector(const char *mode_option,
       const struct drm_connector *connector,
       struct drm_cmdline_mode *mode);
struct drm_display_mode *
drm_mode_create_from_cmdline_mode(struct drm_device *dev,
      struct drm_cmdline_mode *cmd);
# 34 "./include/drm/drm_vblank.h" 2

struct drm_device;
struct drm_crtc;
struct drm_vblank_work;




struct drm_pending_vblank_event {



 struct drm_pending_event base;



 unsigned int pipe;



 u64 sequence;



 union {



  struct drm_event base;
# 72 "./include/drm/drm_vblank.h"
  struct drm_event_vblank vbl;




  struct drm_event_crtc_sequence seq;
 } event;
};
# 91 "./include/drm/drm_vblank.h"
struct drm_vblank_crtc {



 struct drm_device *dev;



 wait_queue_head_t queue;






 struct timer_list disable_timer;




 seqlock_t seqlock;
# 127 "./include/drm/drm_vblank.h"
 atomic64_t count;



 ktime_t time;






 atomic_t refcount;



 u32 last;
# 162 "./include/drm/drm_vblank.h"
 u32 max_vblank_count;
# 171 "./include/drm/drm_vblank.h"
 unsigned int inmodeset;




 unsigned int pipe;





 int framedur_ns;





 int linedur_ns;
# 199 "./include/drm/drm_vblank.h"
 struct drm_display_mode hwmode;







 bool enabled;




 struct kthread_worker *worker;





 struct list_head pending_work;






 wait_queue_head_t work_wait_queue;
};

int drm_vblank_init(struct drm_device *dev, unsigned int num_crtcs);
bool drm_dev_has_vblank(const struct drm_device *dev);
u64 drm_crtc_vblank_count(struct drm_crtc *crtc);
u64 drm_crtc_vblank_count_and_time(struct drm_crtc *crtc,
       ktime_t *vblanktime);
void drm_crtc_send_vblank_event(struct drm_crtc *crtc,
          struct drm_pending_vblank_event *e);
void drm_crtc_arm_vblank_event(struct drm_crtc *crtc,
         struct drm_pending_vblank_event *e);
void drm_vblank_set_event(struct drm_pending_vblank_event *e,
     u64 *seq,
     ktime_t *now);
bool drm_handle_vblank(struct drm_device *dev, unsigned int pipe);
bool drm_crtc_handle_vblank(struct drm_crtc *crtc);
int drm_crtc_vblank_get(struct drm_crtc *crtc);
void drm_crtc_vblank_put(struct drm_crtc *crtc);
void drm_wait_one_vblank(struct drm_device *dev, unsigned int pipe);
void drm_crtc_wait_one_vblank(struct drm_crtc *crtc);
void drm_crtc_vblank_off(struct drm_crtc *crtc);
void drm_crtc_vblank_reset(struct drm_crtc *crtc);
void drm_crtc_vblank_on(struct drm_crtc *crtc);
u64 drm_crtc_accurate_vblank_count(struct drm_crtc *crtc);
void drm_crtc_vblank_restore(struct drm_crtc *crtc);

void drm_calc_timestamping_constants(struct drm_crtc *crtc,
         const struct drm_display_mode *mode);
wait_queue_head_t *drm_crtc_vblank_waitqueue(struct drm_crtc *crtc);
void drm_crtc_set_max_vblank_count(struct drm_crtc *crtc,
       u32 max_vblank_count);





typedef bool (*drm_vblank_get_scanout_position_func)(struct drm_crtc *crtc,
           bool in_vblank_irq,
           int *vpos, int *hpos,
           ktime_t *stime,
           ktime_t *etime,
           const struct drm_display_mode *mode);

bool
drm_crtc_vblank_helper_get_vblank_timestamp_internal(struct drm_crtc *crtc,
           int *max_error,
           ktime_t *vblank_time,
           bool in_vblank_irq,
           drm_vblank_get_scanout_position_func get_scanout_position);
bool drm_crtc_vblank_helper_get_vblank_timestamp(struct drm_crtc *crtc,
       int *max_error,
       ktime_t *vblank_time,
       bool in_vblank_irq);
# 30 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "./include/uapi/drm/radeon_drm.h" 1
# 188 "./include/uapi/drm/radeon_drm.h"
typedef union {
 int i;
 struct {
  unsigned char cmd_type, pad0, pad1, pad2;
 } header;
 struct {
  unsigned char cmd_type, packet_id, pad0, pad1;
 } packet;
 struct {
  unsigned char cmd_type, offset, stride, count;
 } scalars;
 struct {
  unsigned char cmd_type, offset, stride, count;
 } vectors;
 struct {
  unsigned char cmd_type, addr_lo, addr_hi, count;
 } veclinear;
 struct {
  unsigned char cmd_type, buf_idx, pad0, pad1;
 } dma;
 struct {
  unsigned char cmd_type, flags, pad0, pad1;
 } wait;
} drm_radeon_cmd_header_t;
# 251 "./include/uapi/drm/radeon_drm.h"
typedef union {
 unsigned int u;
 struct {
  unsigned char cmd_type, pad0, pad1, pad2;
 } header;
 struct {
  unsigned char cmd_type, count, reglo, reghi;
 } packet0;
 struct {
  unsigned char cmd_type, count, adrlo, adrhi;
 } vpu;
 struct {
  unsigned char cmd_type, packet, pad0, pad1;
 } packet3;
 struct {
  unsigned char cmd_type, packet;
  unsigned short count;
 } delay;
 struct {
  unsigned char cmd_type, buf_idx, pad0, pad1;
 } dma;
 struct {
  unsigned char cmd_type, flags, pad0, pad1;
 } wait;
 struct {
  unsigned char cmd_type, reg, n_bufs, flags;
 } scratch;
 struct {
  unsigned char cmd_type, count, adrlo, adrhi_flags;
 } r500fp;
} drm_r300_cmd_header_t;
# 340 "./include/uapi/drm/radeon_drm.h"
typedef struct {
 unsigned int red;
 unsigned int green;
 unsigned int blue;
 unsigned int alpha;
} radeon_color_regs_t;

typedef struct {

 unsigned int pp_misc;
 unsigned int pp_fog_color;
 unsigned int re_solid_color;
 unsigned int rb3d_blendcntl;
 unsigned int rb3d_depthoffset;
 unsigned int rb3d_depthpitch;
 unsigned int rb3d_zstencilcntl;

 unsigned int pp_cntl;
 unsigned int rb3d_cntl;
 unsigned int rb3d_coloroffset;
 unsigned int re_width_height;
 unsigned int rb3d_colorpitch;
 unsigned int se_cntl;


 unsigned int se_coord_fmt;


 unsigned int re_line_pattern;
 unsigned int re_line_state;

 unsigned int se_line_width;


 unsigned int pp_lum_matrix;

 unsigned int pp_rot_matrix_0;
 unsigned int pp_rot_matrix_1;


 unsigned int rb3d_stencilrefmask;
 unsigned int rb3d_ropcntl;
 unsigned int rb3d_planemask;


 unsigned int se_vport_xscale;
 unsigned int se_vport_xoffset;
 unsigned int se_vport_yscale;
 unsigned int se_vport_yoffset;
 unsigned int se_vport_zscale;
 unsigned int se_vport_zoffset;


 unsigned int se_cntl_status;


 unsigned int re_top_left;
 unsigned int re_misc;
} drm_radeon_context_regs_t;

typedef struct {

 unsigned int se_zbias_factor;
 unsigned int se_zbias_constant;
} drm_radeon_context2_regs_t;



typedef struct {
 unsigned int pp_txfilter;
 unsigned int pp_txformat;
 unsigned int pp_txoffset;
 unsigned int pp_txcblend;
 unsigned int pp_txablend;
 unsigned int pp_tfactor;
 unsigned int pp_border_color;
} drm_radeon_texture_regs_t;

typedef struct {
 unsigned int start;
 unsigned int finish;
 unsigned int prim:8;
 unsigned int stateidx:8;
 unsigned int numverts:16;
 unsigned int vc_format;
} drm_radeon_prim_t;

typedef struct {
 drm_radeon_context_regs_t context;
 drm_radeon_texture_regs_t tex[3];
 drm_radeon_context2_regs_t context2;
 unsigned int dirty;
} drm_radeon_state_t;

typedef struct {




 drm_radeon_context_regs_t context_state;
 drm_radeon_texture_regs_t tex_state[3];
 unsigned int dirty;
 unsigned int vertsize;
 unsigned int vc_format;



 struct drm_clip_rect boxes[12];
 unsigned int nbox;



 unsigned int last_frame;
 unsigned int last_dispatch;
 unsigned int last_clear;

 struct drm_tex_region tex_list[2][64 +
             1];
 unsigned int tex_age[2];
 int ctx_owner;
 int pfState;
 int pfCurrentPage;
 int crtc2_base;
 int tiling_enabled;
} drm_radeon_sarea_t;
# 564 "./include/uapi/drm/radeon_drm.h"
typedef struct drm_radeon_init {
 enum {
  RADEON_INIT_CP = 0x01,
  RADEON_CLEANUP_CP = 0x02,
  RADEON_INIT_R200_CP = 0x03,
  RADEON_INIT_R300_CP = 0x04,
  RADEON_INIT_R600_CP = 0x05
 } func;
 unsigned long sarea_priv_offset;
 int is_pci;
 int cp_mode;
 int gart_size;
 int ring_size;
 int usec_timeout;

 unsigned int fb_bpp;
 unsigned int front_offset, front_pitch;
 unsigned int back_offset, back_pitch;
 unsigned int depth_bpp;
 unsigned int depth_offset, depth_pitch;

 unsigned long fb_offset;
 unsigned long mmio_offset;
 unsigned long ring_offset;
 unsigned long ring_rptr_offset;
 unsigned long buffers_offset;
 unsigned long gart_textures_offset;
} drm_radeon_init_t;

typedef struct drm_radeon_cp_stop {
 int flush;
 int idle;
} drm_radeon_cp_stop_t;

typedef struct drm_radeon_fullscreen {
 enum {
  RADEON_INIT_FULLSCREEN = 0x01,
  RADEON_CLEANUP_FULLSCREEN = 0x02
 } func;
} drm_radeon_fullscreen_t;







typedef union drm_radeon_clear_rect {
 float f[5];
 unsigned int ui[5];
} drm_radeon_clear_rect_t;

typedef struct drm_radeon_clear {
 unsigned int flags;
 unsigned int clear_color;
 unsigned int clear_depth;
 unsigned int color_mask;
 unsigned int depth_mask;
 drm_radeon_clear_rect_t *depth_boxes;
} drm_radeon_clear_t;

typedef struct drm_radeon_vertex {
 int prim;
 int idx;
 int count;
 int discard;
} drm_radeon_vertex_t;

typedef struct drm_radeon_indices {
 int prim;
 int idx;
 int start;
 int end;
 int discard;
} drm_radeon_indices_t;





typedef struct drm_radeon_vertex2 {
 int idx;
 int discard;
 int nr_states;
 drm_radeon_state_t *state;
 int nr_prims;
 drm_radeon_prim_t *prim;
} drm_radeon_vertex2_t;
# 663 "./include/uapi/drm/radeon_drm.h"
typedef struct drm_radeon_cmd_buffer {
 int bufsz;
 char *buf;
 int nbox;
 struct drm_clip_rect *boxes;
} drm_radeon_cmd_buffer_t;

typedef struct drm_radeon_tex_image {
 unsigned int x, y;
 unsigned int width, height;
 const void *data;
} drm_radeon_tex_image_t;

typedef struct drm_radeon_texture {
 unsigned int offset;
 int pitch;
 int format;
 int width;
 int height;
 drm_radeon_tex_image_t *image;
} drm_radeon_texture_t;

typedef struct drm_radeon_stipple {
 unsigned int *mask;
} drm_radeon_stipple_t;

typedef struct drm_radeon_indirect {
 int idx;
 int start;
 int end;
 int discard;
} drm_radeon_indirect_t;
# 724 "./include/uapi/drm/radeon_drm.h"
typedef struct drm_radeon_getparam {
 int param;
 void *value;
} drm_radeon_getparam_t;






typedef struct drm_radeon_mem_alloc {
 int region;
 int alignment;
 int size;
 int *region_offset;
} drm_radeon_mem_alloc_t;

typedef struct drm_radeon_mem_free {
 int region;
 int region_offset;
} drm_radeon_mem_free_t;

typedef struct drm_radeon_mem_init_heap {
 int region;
 int size;
 int start;
} drm_radeon_mem_init_heap_t;



typedef struct drm_radeon_irq_emit {
 int *irq_seq;
} drm_radeon_irq_emit_t;

typedef struct drm_radeon_irq_wait {
 int irq_seq;
} drm_radeon_irq_wait_t;





typedef struct drm_radeon_setparam {
 unsigned int param;
 __s64 value;
} drm_radeon_setparam_t;
# 779 "./include/uapi/drm/radeon_drm.h"
typedef struct drm_radeon_surface_alloc {
 unsigned int address;
 unsigned int size;
 unsigned int flags;
} drm_radeon_surface_alloc_t;

typedef struct drm_radeon_surface_free {
 unsigned int address;
} drm_radeon_surface_free_t;
# 799 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_gem_info {
 __u64 gart_size;
 __u64 vram_size;
 __u64 vram_visible;
};
# 813 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_gem_create {
 __u64 size;
 __u64 alignment;
 __u32 handle;
 __u32 initial_domain;
 __u32 flags;
};
# 831 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_gem_userptr {
 __u64 addr;
 __u64 size;
 __u32 flags;
 __u32 handle;
};
# 856 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_gem_set_tiling {
 __u32 handle;
 __u32 tiling_flags;
 __u32 pitch;
};

struct drm_radeon_gem_get_tiling {
 __u32 handle;
 __u32 tiling_flags;
 __u32 pitch;
};

struct drm_radeon_gem_mmap {
 __u32 handle;
 __u32 pad;
 __u64 offset;
 __u64 size;
 __u64 addr_ptr;
};

struct drm_radeon_gem_set_domain {
 __u32 handle;
 __u32 read_domains;
 __u32 write_domain;
};

struct drm_radeon_gem_wait_idle {
 __u32 handle;
 __u32 pad;
};

struct drm_radeon_gem_busy {
 __u32 handle;
 __u32 domain;
};

struct drm_radeon_gem_pread {

 __u32 handle;
 __u32 pad;

 __u64 offset;

 __u64 size;


 __u64 data_ptr;
};

struct drm_radeon_gem_pwrite {

 __u32 handle;
 __u32 pad;

 __u64 offset;

 __u64 size;


 __u64 data_ptr;
};


struct drm_radeon_gem_op {
 __u32 handle;
 __u32 op;
 __u64 value;
};
# 941 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_gem_va {
 __u32 handle;
 __u32 operation;
 __u32 vm_id;
 __u32 flags;
 __u64 offset;
};
# 967 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_cs_chunk {
 __u32 chunk_id;
 __u32 length_dw;
 __u64 chunk_data;
};




struct drm_radeon_cs_reloc {
 __u32 handle;
 __u32 read_domains;
 __u32 write_domain;
 __u32 flags;
};

struct drm_radeon_cs {
 __u32 num_chunks;
 __u32 cs_id;

 __u64 chunks;

 __u64 gart_limit;
 __u64 vram_limit;
};
# 1048 "./include/uapi/drm/radeon_drm.h"
struct drm_radeon_info {
 __u32 request;
 __u32 pad;
 __u64 value;
};
# 31 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "./include/drm/drm_fourcc.h" 1
# 26 "./include/drm/drm_fourcc.h"
# 1 "./include/uapi/drm/drm_fourcc.h" 1
# 739 "./include/uapi/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64
drm_fourcc_canonicalize_nvidia_format_mod(__u64 modifier)
{
 if (!(modifier & 0x10) || (modifier & (0xff << 12)))
  return modifier;
 else
  return modifier | (0xfe << 12);
}
# 27 "./include/drm/drm_fourcc.h" 2
# 55 "./include/drm/drm_fourcc.h"
struct drm_device;
struct drm_mode_fb_cmd2;




struct drm_format_info {

 u32 format;
# 72 "./include/drm/drm_fourcc.h"
 u8 depth;


 u8 num_planes;

 union {
# 86 "./include/drm/drm_fourcc.h"
  u8 cpp[4u];
# 112 "./include/drm/drm_fourcc.h"
  u8 char_per_block[4u];
 };







 u8 block_w[4u];







 u8 block_h[4u];


 u8 hsub;

 u8 vsub;


 bool has_alpha;


 bool is_yuv;
};
# 151 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_packed(const struct drm_format_info *info)
{
 return info->is_yuv && info->num_planes == 1;
}
# 165 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_semiplanar(const struct drm_format_info *info)
{
 return info->is_yuv && info->num_planes == 2;
}
# 179 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_planar(const struct drm_format_info *info)
{
 return info->is_yuv && info->num_planes == 3;
}
# 194 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_sampling_410(const struct drm_format_info *info)
{
 return info->is_yuv && info->hsub == 4 && info->vsub == 4;
}
# 209 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_sampling_411(const struct drm_format_info *info)
{
 return info->is_yuv && info->hsub == 4 && info->vsub == 1;
}
# 224 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_sampling_420(const struct drm_format_info *info)
{
 return info->is_yuv && info->hsub == 2 && info->vsub == 2;
}
# 239 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_sampling_422(const struct drm_format_info *info)
{
 return info->is_yuv && info->hsub == 2 && info->vsub == 1;
}
# 254 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_format_info_is_yuv_sampling_444(const struct drm_format_info *info)
{
 return info->is_yuv && info->hsub == 1 && info->vsub == 1;
}
# 269 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int drm_format_info_plane_width(const struct drm_format_info *info, int width,
    int plane)
{
 if (!info || plane >= info->num_planes)
  return 0;

 if (plane == 0)
  return width;

 return width / info->hsub;
}
# 291 "./include/drm/drm_fourcc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int drm_format_info_plane_height(const struct drm_format_info *info, int height,
     int plane)
{
 if (!info || plane >= info->num_planes)
  return 0;

 if (plane == 0)
  return height;

 return height / info->vsub;
}

const struct drm_format_info *__drm_format_info(u32 format);
const struct drm_format_info *drm_format_info(u32 format);
const struct drm_format_info *
drm_get_format_info(struct drm_device *dev,
      const struct drm_mode_fb_cmd2 *mode_cmd);
uint32_t drm_mode_legacy_fb_format(uint32_t bpp, uint32_t depth);
uint32_t drm_driver_legacy_fb_format(struct drm_device *dev,
         uint32_t bpp, uint32_t depth);
unsigned int drm_format_info_block_width(const struct drm_format_info *info,
      int plane);
unsigned int drm_format_info_block_height(const struct drm_format_info *info,
       int plane);
uint64_t drm_format_info_min_pitch(const struct drm_format_info *info,
       int plane, unsigned int buffer_width);
# 32 "drivers/gpu/drm/radeon/evergreen.c" 2

# 1 "drivers/gpu/drm/radeon/atom.h" 1
# 113 "drivers/gpu/drm/radeon/atom.h"
struct card_info {
 struct drm_device *dev;
 void (* reg_write)(struct card_info *, uint32_t, uint32_t);
        uint32_t (* reg_read)(struct card_info *, uint32_t);
 void (* ioreg_write)(struct card_info *, uint32_t, uint32_t);
        uint32_t (* ioreg_read)(struct card_info *, uint32_t);
 void (* mc_write)(struct card_info *, uint32_t, uint32_t);
        uint32_t (* mc_read)(struct card_info *, uint32_t);
 void (* pll_write)(struct card_info *, uint32_t, uint32_t);
        uint32_t (* pll_read)(struct card_info *, uint32_t);
};

struct atom_context {
 struct card_info *card;
 struct mutex mutex;
 struct mutex scratch_mutex;
 void *bios;
 uint32_t cmd_table, data_table;
 uint16_t *iio;

 uint16_t data_block;
 uint32_t fb_base;
 uint32_t divmul[2];
 uint16_t io_attr;
 uint16_t reg_block;
 uint8_t shift;
 int cs_equal, cs_above;
 int io_mode;
 uint32_t *scratch;
 int scratch_size_bytes;
};

extern int atom_debug;

struct atom_context *atom_parse(struct card_info *, void *);
int atom_execute_table(struct atom_context *, int, uint32_t *);
int atom_execute_table_scratch_unlocked(struct atom_context *, int, uint32_t *);
int atom_asic_init(struct atom_context *);
void atom_destroy(struct atom_context *);
bool atom_parse_data_header(struct atom_context *ctx, int index, uint16_t *size,
       uint8_t *frev, uint8_t *crev, uint16_t *data_start);
bool atom_parse_cmd_header(struct atom_context *ctx, int index,
      uint8_t *frev, uint8_t *crev);
int atom_allocate_fb_scratch(struct atom_context *ctx);

struct i2c_msg;
struct i2c_adapter;
int radeon_atom_hw_i2c_xfer(struct i2c_adapter *i2c_adap,
       struct i2c_msg *msgs, int num);
u32 radeon_atom_hw_i2c_func(struct i2c_adapter *adap);

# 1 "drivers/gpu/drm/radeon/atom-types.h" 1
# 30 "drivers/gpu/drm/radeon/atom-types.h"
typedef uint16_t USHORT;
typedef uint32_t ULONG;
typedef uint8_t UCHAR;
# 165 "drivers/gpu/drm/radeon/atom.h" 2
# 1 "drivers/gpu/drm/radeon/atombios.h" 1
# 184 "drivers/gpu/drm/radeon/atombios.h"
#pragma pack(1)
# 200 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_COMMON_TABLE_HEADER
{
  USHORT usStructureSize;
  UCHAR ucTableFormatRevision;
  UCHAR ucTableContentRevision;

}ATOM_COMMON_TABLE_HEADER;




typedef struct _ATOM_ROM_HEADER
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR uaFirmWareSignature[4];

  USHORT usBiosRuntimeSegmentAddress;
  USHORT usProtectedModeInfoOffset;
  USHORT usConfigFilenameOffset;
  USHORT usCRC_BlockOffset;
  USHORT usBIOS_BootupMessageOffset;
  USHORT usInt10Offset;
  USHORT usPciBusDevInitCode;
  USHORT usIoBaseAddress;
  USHORT usSubsystemVendorID;
  USHORT usSubsystemID;
  USHORT usPCI_InfoOffset;
  USHORT usMasterCommandTableOffset;
  USHORT usMasterDataTableOffset;
  UCHAR ucExtendedFunctionCode;
  UCHAR ucReserved;
}ATOM_ROM_HEADER;
# 243 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_MASTER_LIST_OF_COMMAND_TABLES{
  USHORT ASIC_Init;
  USHORT GetDisplaySurfaceSize;
  USHORT ASIC_RegistersInit;
  USHORT VRAM_BlockVenderDetection;
  USHORT DIGxEncoderControl;
  USHORT MemoryControllerInit;
  USHORT EnableCRTCMemReq;
  USHORT MemoryParamAdjust;
  USHORT DVOEncoderControl;
  USHORT GPIOPinControl;
  USHORT SetEngineClock;
  USHORT SetMemoryClock;
  USHORT SetPixelClock;
  USHORT EnableDispPowerGating;
  USHORT ResetMemoryDLL;
  USHORT ResetMemoryDevice;
  USHORT MemoryPLLInit;
  USHORT AdjustDisplayPll;
  USHORT AdjustMemoryController;
  USHORT EnableASIC_StaticPwrMgt;
  USHORT SetUniphyInstance;
  USHORT DAC_LoadDetection;
  USHORT LVTMAEncoderControl;
  USHORT HW_Misc_Operation;
  USHORT DAC1EncoderControl;
  USHORT DAC2EncoderControl;
  USHORT DVOOutputControl;
  USHORT CV1OutputControl;
  USHORT GetConditionalGoldenSetting;
  USHORT TVEncoderControl;
  USHORT PatchMCSetting;
  USHORT MC_SEQ_Control;
  USHORT Gfx_Harvesting;
  USHORT EnableScaler;
  USHORT BlankCRTC;
  USHORT EnableCRTC;
  USHORT GetPixelClock;
  USHORT EnableVGA_Render;
  USHORT GetSCLKOverMCLKRatio;
  USHORT SetCRTC_Timing;
  USHORT SetCRTC_OverScan;
  USHORT SetCRTC_Replication;
  USHORT SelectCRTC_Source;
  USHORT EnableGraphSurfaces;
  USHORT UpdateCRTC_DoubleBufferRegisters;
  USHORT LUT_AutoFill;
  USHORT EnableHW_IconCursor;
  USHORT GetMemoryClock;
  USHORT GetEngineClock;
  USHORT SetCRTC_UsingDTDTiming;
  USHORT ExternalEncoderControl;
  USHORT LVTMAOutputControl;
  USHORT VRAM_BlockDetectionByStrap;
  USHORT MemoryCleanUp;
  USHORT ProcessI2cChannelTransaction;
  USHORT WriteOneByteToHWAssistedI2C;
  USHORT ReadHWAssistedI2CStatus;
  USHORT SpeedFanControl;
  USHORT PowerConnectorDetection;
  USHORT MC_Synchronization;
  USHORT ComputeMemoryEnginePLL;
  USHORT MemoryRefreshConversion;
  USHORT VRAM_GetCurrentInfoBlock;
  USHORT DynamicMemorySettings;
  USHORT MemoryTraining;
  USHORT EnableSpreadSpectrumOnPPLL;
  USHORT TMDSAOutputControl;
  USHORT SetVoltage;
  USHORT DAC1OutputControl;
  USHORT DAC2OutputControl;
  USHORT ComputeMemoryClockParam;
  USHORT ClockSource;
  USHORT MemoryDeviceInit;
  USHORT GetDispObjectInfo;
  USHORT DIG1EncoderControl;
  USHORT DIG2EncoderControl;
  USHORT DIG1TransmitterControl;
  USHORT DIG2TransmitterControl;
  USHORT ProcessAuxChannelTransaction;
  USHORT DPEncoderService;
  USHORT GetVoltageInfo;
}ATOM_MASTER_LIST_OF_COMMAND_TABLES;
# 345 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_MASTER_COMMAND_TABLE
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_MASTER_LIST_OF_COMMAND_TABLES ListOfCommandTables;
}ATOM_MASTER_COMMAND_TABLE;




typedef struct _ATOM_TABLE_ATTRIBUTE
{





  USHORT WS_SizeInBytes:8;
  USHORT PS_SizeInBytes:7;
  USHORT UpdatedByUtility:1;

}ATOM_TABLE_ATTRIBUTE;

typedef union _ATOM_TABLE_ATTRIBUTE_ACCESS
{
  ATOM_TABLE_ATTRIBUTE sbfAccess;
  USHORT susAccess;
}ATOM_TABLE_ATTRIBUTE_ACCESS;






typedef struct _ATOM_COMMON_ROM_COMMAND_TABLE_HEADER
{
  ATOM_COMMON_TABLE_HEADER CommonHeader;
  ATOM_TABLE_ATTRIBUTE TableAttribute;
}ATOM_COMMON_ROM_COMMAND_TABLE_HEADER;
# 394 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_ADJUST_MEMORY_CLOCK_FREQ
{





  ULONG ulClockFreq:24;
  ULONG ulMemoryModuleNumber:7;
  ULONG ulPointerReturnFlag:1;

}ATOM_ADJUST_MEMORY_CLOCK_FREQ;


typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS
{
  ULONG ulClock;
  UCHAR ucAction;
  UCHAR ucReserved;
  UCHAR ucFbDiv;
  UCHAR ucPostDiv;
}COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS;

typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V2
{
  ULONG ulClock;
  UCHAR ucAction;
  USHORT usFbDiv;
  UCHAR ucPostDiv;
}COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V2;
# 441 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_COMPUTE_CLOCK_FREQ
{




  ULONG ulClockFreq:24;
  ULONG ulComputeClockFlag:8;

}ATOM_COMPUTE_CLOCK_FREQ;

typedef struct _ATOM_S_MPLL_FB_DIVIDER
{
  USHORT usFbDivFrac;
  USHORT usFbDiv;
}ATOM_S_MPLL_FB_DIVIDER;

typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V3
{
  union
  {
    ATOM_COMPUTE_CLOCK_FREQ ulClock;
    ULONG ulClockParams;
    ATOM_S_MPLL_FB_DIVIDER ulFbDiv;
  };
  UCHAR ucRefDiv;
  UCHAR ucPostDiv;
  UCHAR ucCntlFlag;
  UCHAR ucReserved;
}COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V3;
# 480 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V4
{




  ULONG ulClock:24;
  ULONG ucPostDiv:8;

}COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V4;

typedef struct _COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V5
{
  union
  {
    ATOM_COMPUTE_CLOCK_FREQ ulClock;
    ULONG ulClockParams;
    ATOM_S_MPLL_FB_DIVIDER ulFbDiv;
  };
  UCHAR ucRefDiv;
  UCHAR ucPostDiv;
  union
  {
    UCHAR ucCntlFlag;
    UCHAR ucInputFlag;
  };
  UCHAR ucReserved;
}COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V5;


typedef struct _COMPUTE_GPU_CLOCK_INPUT_PARAMETERS_V1_6
{
  ATOM_COMPUTE_CLOCK_FREQ ulClock;
  ULONG ulReserved[2];
}COMPUTE_GPU_CLOCK_INPUT_PARAMETERS_V1_6;






typedef struct _COMPUTE_GPU_CLOCK_OUTPUT_PARAMETERS_V1_6
{
  COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS_V4 ulClock;
  ATOM_S_MPLL_FB_DIVIDER ulFbDiv;
  UCHAR ucPllRefDiv;
  UCHAR ucPllPostDiv;
  UCHAR ucPllCntlFlag;
  UCHAR ucReserved;
}COMPUTE_GPU_CLOCK_OUTPUT_PARAMETERS_V1_6;
# 539 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _COMPUTE_MEMORY_CLOCK_PARAM_PARAMETERS_V2_1
{
  union
  {
    ULONG ulClock;
    ATOM_S_MPLL_FB_DIVIDER ulFbDiv;
  };
  UCHAR ucDllSpeed;
  UCHAR ucPostDiv;
  union{
    UCHAR ucInputFlag;
    UCHAR ucPllCntlFlag;
  };
  UCHAR ucBWCntl;
}COMPUTE_MEMORY_CLOCK_PARAM_PARAMETERS_V2_1;
# 566 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DYNAMICE_MEMORY_SETTINGS_PARAMETER
{
  ATOM_COMPUTE_CLOCK_FREQ ulClock;
  ULONG ulReserved[2];
}DYNAMICE_MEMORY_SETTINGS_PARAMETER;

typedef struct _DYNAMICE_ENGINE_SETTINGS_PARAMETER
{
  ATOM_COMPUTE_CLOCK_FREQ ulClock;
  ULONG ulMemoryClock;
  ULONG ulReserved;
}DYNAMICE_ENGINE_SETTINGS_PARAMETER;




typedef struct _SET_ENGINE_CLOCK_PARAMETERS
{
  ULONG ulTargetEngineClock;
}SET_ENGINE_CLOCK_PARAMETERS;

typedef struct _SET_ENGINE_CLOCK_PS_ALLOCATION
{
  ULONG ulTargetEngineClock;
  COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS sReserved;
}SET_ENGINE_CLOCK_PS_ALLOCATION;




typedef struct _SET_MEMORY_CLOCK_PARAMETERS
{
  ULONG ulTargetMemoryClock;
}SET_MEMORY_CLOCK_PARAMETERS;

typedef struct _SET_MEMORY_CLOCK_PS_ALLOCATION
{
  ULONG ulTargetMemoryClock;
  COMPUTE_MEMORY_ENGINE_PLL_PARAMETERS sReserved;
}SET_MEMORY_CLOCK_PS_ALLOCATION;




typedef struct _ASIC_INIT_PARAMETERS
{
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
}ASIC_INIT_PARAMETERS;

typedef struct _ASIC_INIT_PS_ALLOCATION
{
  ASIC_INIT_PARAMETERS sASICInitClocks;
  SET_ENGINE_CLOCK_PS_ALLOCATION sReserved;
}ASIC_INIT_PS_ALLOCATION;




typedef struct _DYNAMIC_CLOCK_GATING_PARAMETERS
{
  UCHAR ucEnable;
  UCHAR ucPadding[3];
}DYNAMIC_CLOCK_GATING_PARAMETERS;





typedef struct _ENABLE_DISP_POWER_GATING_PARAMETERS_V2_1
{
  UCHAR ucDispPipeId;
  UCHAR ucEnable;
  UCHAR ucPadding[2];
}ENABLE_DISP_POWER_GATING_PARAMETERS_V2_1;




typedef struct _ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS
{
  UCHAR ucEnable;
  UCHAR ucPadding[3];
}ENABLE_ASIC_STATIC_PWR_MGT_PARAMETERS;





typedef struct _DAC_LOAD_DETECTION_PARAMETERS
{
  USHORT usDeviceID;
  UCHAR ucDacType;
  UCHAR ucMisc;
}DAC_LOAD_DETECTION_PARAMETERS;




typedef struct _DAC_LOAD_DETECTION_PS_ALLOCATION
{
  DAC_LOAD_DETECTION_PARAMETERS sDacload;
  ULONG Reserved[2];
}DAC_LOAD_DETECTION_PS_ALLOCATION;




typedef struct _DAC_ENCODER_CONTROL_PARAMETERS
{
  USHORT usPixelClock;
  UCHAR ucDacStandard;
  UCHAR ucAction;


}DAC_ENCODER_CONTROL_PARAMETERS;
# 690 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DIG_ENCODER_CONTROL_PARAMETERS
{
  USHORT usPixelClock;
  UCHAR ucConfig;







  UCHAR ucAction;

  UCHAR ucEncoderMode;





  UCHAR ucLaneNum;
  UCHAR ucReserved[2];
}DIG_ENCODER_CONTROL_PARAMETERS;
# 749 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DIG_ENCODER_CONFIG_V2
{







    UCHAR ucDPLinkRate:1;
    UCHAR ucReserved:1;
    UCHAR ucLinkSel:1;
    UCHAR ucTransmitterSel:2;
    UCHAR ucReserved1:2;

}ATOM_DIG_ENCODER_CONFIG_V2;


typedef struct _DIG_ENCODER_CONTROL_PARAMETERS_V2
{
  USHORT usPixelClock;
  ATOM_DIG_ENCODER_CONFIG_V2 acConfig;
  UCHAR ucAction;
  UCHAR ucEncoderMode;





  UCHAR ucLaneNum;
  UCHAR ucStatus;
  UCHAR ucReserved;
}DIG_ENCODER_CONTROL_PARAMETERS_V2;
# 816 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DIG_ENCODER_CONFIG_V3
{






    UCHAR ucDPLinkRate:1;
    UCHAR ucReserved:3;
    UCHAR ucDigSel:3;
    UCHAR ucReserved1:1;

}ATOM_DIG_ENCODER_CONFIG_V3;
# 842 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DIG_ENCODER_CONTROL_PARAMETERS_V3
{
  USHORT usPixelClock;
  ATOM_DIG_ENCODER_CONFIG_V3 acConfig;
  UCHAR ucAction;
  union {
    UCHAR ucEncoderMode;






    UCHAR ucPanelMode;



  };
  UCHAR ucLaneNum;
  UCHAR ucBitPerColor;
  UCHAR ucReserved;
}DIG_ENCODER_CONTROL_PARAMETERS_V3;





typedef struct _ATOM_DIG_ENCODER_CONFIG_V4
{






    UCHAR ucDPLinkRate:2;
    UCHAR ucReserved:2;
    UCHAR ucDigSel:3;
    UCHAR ucReserved1:1;

}ATOM_DIG_ENCODER_CONFIG_V4;
# 898 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DIG_ENCODER_CONTROL_PARAMETERS_V4
{
  USHORT usPixelClock;
  union{
  ATOM_DIG_ENCODER_CONFIG_V4 acConfig;
  UCHAR ucConfig;
  };
  UCHAR ucAction;
  union {
    UCHAR ucEncoderMode;






    UCHAR ucPanelMode;



  };
  UCHAR ucLaneNum;
  UCHAR ucBitPerColor;
  UCHAR ucHPD_ID;
}DIG_ENCODER_CONTROL_PARAMETERS_V4;
# 942 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DP_VS_MODE
{
  UCHAR ucLaneSel;
  UCHAR ucLaneSet;
}ATOM_DP_VS_MODE;

typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS
{
 union
 {
  USHORT usPixelClock;
 USHORT usInitInfo;
  ATOM_DP_VS_MODE asMode;
 };
  UCHAR ucConfig;
# 970 "drivers/gpu/drm/radeon/atombios.h"
 UCHAR ucAction;

  UCHAR ucReserved[4];
}DIG_TRANSMITTER_CONTROL_PARAMETERS;
# 1022 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V2
{
# 1037 "drivers/gpu/drm/radeon/atombios.h"
  UCHAR fDualLinkConnector:1;
  UCHAR fCoherentMode:1;
  UCHAR ucLinkSel:1;

  UCHAR ucEncoderSel:1;
  UCHAR fDPConnector:1;
  UCHAR ucReserved:1;
  UCHAR ucTransmitterSel:2;



}ATOM_DIG_TRANSMITTER_CONFIG_V2;
# 1076 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V2
{
 union
 {
  USHORT usPixelClock;
 USHORT usInitInfo;
  ATOM_DP_VS_MODE asMode;
 };
  ATOM_DIG_TRANSMITTER_CONFIG_V2 acConfig;
 UCHAR ucAction;
  UCHAR ucReserved[4];
}DIG_TRANSMITTER_CONTROL_PARAMETERS_V2;

typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V3
{
# 1102 "drivers/gpu/drm/radeon/atombios.h"
  UCHAR fDualLinkConnector:1;
  UCHAR fCoherentMode:1;
  UCHAR ucLinkSel:1;

  UCHAR ucEncoderSel:1;
  UCHAR ucRefClkSource:2;
  UCHAR ucTransmitterSel:2;



}ATOM_DIG_TRANSMITTER_CONFIG_V3;


typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V3
{
 union
 {
    USHORT usPixelClock;
   USHORT usInitInfo;
    ATOM_DP_VS_MODE asMode;
 };
  ATOM_DIG_TRANSMITTER_CONFIG_V3 acConfig;
 UCHAR ucAction;
  UCHAR ucLaneNum;
  UCHAR ucReserved[3];
}DIG_TRANSMITTER_CONTROL_PARAMETERS_V3;
# 1165 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DP_VS_MODE_V4
{
  UCHAR ucLaneSel;
  union
  {
    UCHAR ucLaneSet;
    struct {





     UCHAR ucVOLTAGE_SWING:3;
     UCHAR ucPRE_EMPHASIS:3;
     UCHAR ucPOST_CURSOR2:2;

   };
  };
}ATOM_DP_VS_MODE_V4;

typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V4
{
# 1198 "drivers/gpu/drm/radeon/atombios.h"
  UCHAR fDualLinkConnector:1;
  UCHAR fCoherentMode:1;
  UCHAR ucLinkSel:1;

  UCHAR ucEncoderSel:1;
  UCHAR ucRefClkSource:2;
  UCHAR ucTransmitterSel:2;



}ATOM_DIG_TRANSMITTER_CONFIG_V4;

typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V4
{
  union
  {
    USHORT usPixelClock;
    USHORT usInitInfo;
    ATOM_DP_VS_MODE_V4 asMode;
  };
  union
  {
  ATOM_DIG_TRANSMITTER_CONFIG_V4 acConfig;
  UCHAR ucConfig;
  };
  UCHAR ucAction;
  UCHAR ucLaneNum;
  UCHAR ucReserved[3];
}DIG_TRANSMITTER_CONTROL_PARAMETERS_V4;
# 1254 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DIG_TRANSMITTER_CONFIG_V5
{







  UCHAR ucReserved:1;
  UCHAR ucCoherentMode:1;
  UCHAR ucPhyClkSrcId:2;
  UCHAR ucHPDSel:3;
  UCHAR ucReservd1:1;

}ATOM_DIG_TRANSMITTER_CONFIG_V5;

typedef struct _DIG_TRANSMITTER_CONTROL_PARAMETERS_V1_5
{
  USHORT usSymClock;
  UCHAR ucPhyId;
  UCHAR ucAction;
  UCHAR ucLaneNum;
  UCHAR ucConnObjId;
  UCHAR ucDigMode;
  union{
  ATOM_DIG_TRANSMITTER_CONFIG_V5 asConfig;
  UCHAR ucConfig;
  };
  UCHAR ucDigEncoderSel;
  UCHAR ucDPLaneSet;
  UCHAR ucReserved;
  UCHAR ucReserved1;
}DIG_TRANSMITTER_CONTROL_PARAMETERS_V1_5;
# 1361 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _EXTERNAL_ENCODER_CONTROL_PARAMETERS_V3
{
  union{
  USHORT usPixelClock;
  USHORT usConnectorId;
  };
  UCHAR ucConfig;
  UCHAR ucAction;
  UCHAR ucEncoderMode;
  UCHAR ucLaneNum;
  UCHAR ucBitPerColor;
  UCHAR ucReserved;
}EXTERNAL_ENCODER_CONTROL_PARAMETERS_V3;
# 1395 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION_V3
{
  EXTERNAL_ENCODER_CONTROL_PARAMETERS_V3 sExtEncoder;
  ULONG ulReserved[2];
}EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION_V3;
# 1408 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS
{
  UCHAR ucAction;




  UCHAR aucPadding[3];
}DISPLAY_DEVICE_OUTPUT_CONTROL_PARAMETERS;
# 1449 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _BLANK_CRTC_PARAMETERS
{
  UCHAR ucCRTC;
  UCHAR ucBlanking;
  USHORT usBlackColorRCr;
  USHORT usBlackColorGY;
  USHORT usBlackColorBCb;
}BLANK_CRTC_PARAMETERS;







typedef struct _ENABLE_CRTC_PARAMETERS
{
  UCHAR ucCRTC;
  UCHAR ucEnable;
  UCHAR ucPadding[2];
}ENABLE_CRTC_PARAMETERS;





typedef struct _SET_CRTC_OVERSCAN_PARAMETERS
{
  USHORT usOverscanRight;
  USHORT usOverscanLeft;
  USHORT usOverscanBottom;
  USHORT usOverscanTop;
  UCHAR ucCRTC;
  UCHAR ucPadding[3];
}SET_CRTC_OVERSCAN_PARAMETERS;





typedef struct _SET_CRTC_REPLICATION_PARAMETERS
{
  UCHAR ucH_Replication;
  UCHAR ucV_Replication;
  UCHAR usCRTC;
  UCHAR ucPadding;
}SET_CRTC_REPLICATION_PARAMETERS;





typedef struct _SELECT_CRTC_SOURCE_PARAMETERS
{
  UCHAR ucCRTC;
  UCHAR ucDevice;
  UCHAR ucPadding[2];
}SELECT_CRTC_SOURCE_PARAMETERS;


typedef struct _SELECT_CRTC_SOURCE_PARAMETERS_V2
{
  UCHAR ucCRTC;
  UCHAR ucEncoderID;
  UCHAR ucEncodeMode;
  UCHAR ucPadding;
}SELECT_CRTC_SOURCE_PARAMETERS_V2;
# 1542 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _PIXEL_CLOCK_PARAMETERS
{
  USHORT usPixelClock;

  USHORT usRefDiv;
  USHORT usFbDiv;
  UCHAR ucPostDiv;
  UCHAR ucFracFbDiv;
  UCHAR ucPpll;
  UCHAR ucRefDivSrc;
  UCHAR ucCRTC;
  UCHAR ucPadding;
}PIXEL_CLOCK_PARAMETERS;







typedef struct _PIXEL_CLOCK_PARAMETERS_V2
{
  USHORT usPixelClock;

  USHORT usRefDiv;
  USHORT usFbDiv;
  UCHAR ucPostDiv;
  UCHAR ucFracFbDiv;
  UCHAR ucPpll;
  UCHAR ucRefDivSrc;
  UCHAR ucCRTC;
  UCHAR ucMiscInfo;
}PIXEL_CLOCK_PARAMETERS_V2;
# 1609 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _PIXEL_CLOCK_PARAMETERS_V3
{
  USHORT usPixelClock;

  USHORT usRefDiv;
  USHORT usFbDiv;
  UCHAR ucPostDiv;
  UCHAR ucFracFbDiv;
  UCHAR ucPpll;
  UCHAR ucTransmitterId;
 union
 {
  UCHAR ucEncoderMode;
 UCHAR ucDVOConfig;
 };
  UCHAR ucMiscInfo;


}PIXEL_CLOCK_PARAMETERS_V3;




typedef struct _PIXEL_CLOCK_PARAMETERS_V5
{
  UCHAR ucCRTC;

  union{
  UCHAR ucReserved;
  UCHAR ucFracFbDiv;
  };
  USHORT usPixelClock;

  USHORT usFbDiv;
  UCHAR ucPostDiv;
  UCHAR ucRefDiv;
  UCHAR ucPpll;
  UCHAR ucTransmitterID;

  UCHAR ucEncoderMode;
  UCHAR ucMiscInfo;







  ULONG ulFbDivDecFrac;

}PIXEL_CLOCK_PARAMETERS_V5;
# 1669 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _CRTC_PIXEL_CLOCK_FREQ
{






  ULONG ulPixelClock:24;

  ULONG ucCRTC:8;


}CRTC_PIXEL_CLOCK_FREQ;

typedef struct _PIXEL_CLOCK_PARAMETERS_V6
{
  union{
    CRTC_PIXEL_CLOCK_FREQ ulCrtcPclkFreq;
    ULONG ulDispEngClkFreq;
  };
  USHORT usFbDiv;
  UCHAR ucPostDiv;
  UCHAR ucRefDiv;
  UCHAR ucPpll;
  UCHAR ucTransmitterID;

  UCHAR ucEncoderMode;
  UCHAR ucMiscInfo;







  ULONG ulFbDivDecFrac;

}PIXEL_CLOCK_PARAMETERS_V6;
# 1721 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V2
{
  PIXEL_CLOCK_PARAMETERS_V3 sDispClkInput;
}GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V2;

typedef struct _GET_DISP_PLL_STATUS_OUTPUT_PARAMETERS_V2
{
  UCHAR ucStatus;
  UCHAR ucRefDivSrc;
  UCHAR ucReserved[2];
}GET_DISP_PLL_STATUS_OUTPUT_PARAMETERS_V2;

typedef struct _GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V3
{
  PIXEL_CLOCK_PARAMETERS_V5 sDispClkInput;
}GET_DISP_PLL_STATUS_INPUT_PARAMETERS_V3;




typedef struct _ADJUST_DISPLAY_PLL_PARAMETERS
{
 USHORT usPixelClock;
 UCHAR ucTransmitterID;
 UCHAR ucEncodeMode;
 union
 {
  UCHAR ucDVOConfig;
  UCHAR ucConfig;
 };
 UCHAR ucReserved[3];
}ADJUST_DISPLAY_PLL_PARAMETERS;




typedef struct _ADJUST_DISPLAY_PLL_INPUT_PARAMETERS_V3
{
 USHORT usPixelClock;
 UCHAR ucTransmitterID;
 UCHAR ucEncodeMode;
  UCHAR ucDispPllConfig;
  UCHAR ucExtTransmitterID;
 UCHAR ucReserved[2];
}ADJUST_DISPLAY_PLL_INPUT_PARAMETERS_V3;
# 1780 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ADJUST_DISPLAY_PLL_OUTPUT_PARAMETERS_V3
{
  ULONG ulDispPllFreq;
  UCHAR ucRefDiv;
  UCHAR ucPostDiv;
  UCHAR ucReserved[2];
}ADJUST_DISPLAY_PLL_OUTPUT_PARAMETERS_V3;

typedef struct _ADJUST_DISPLAY_PLL_PS_ALLOCATION_V3
{
  union
  {
    ADJUST_DISPLAY_PLL_INPUT_PARAMETERS_V3 sInput;
    ADJUST_DISPLAY_PLL_OUTPUT_PARAMETERS_V3 sOutput;
  };
} ADJUST_DISPLAY_PLL_PS_ALLOCATION_V3;




typedef struct _ENABLE_YUV_PARAMETERS
{
  UCHAR ucEnable;
  UCHAR ucCRTC;
  UCHAR ucPadding[2];
}ENABLE_YUV_PARAMETERS;





typedef struct _GET_MEMORY_CLOCK_PARAMETERS
{
  ULONG ulReturnMemoryClock;
} GET_MEMORY_CLOCK_PARAMETERS;





typedef struct _GET_ENGINE_CLOCK_PARAMETERS
{
  ULONG ulReturnEngineClock;
} GET_ENGINE_CLOCK_PARAMETERS;







typedef struct _READ_EDID_FROM_HW_I2C_DATA_PARAMETERS
{
  USHORT usPrescale;
  USHORT usVRAMAddress;
  USHORT usStatus;

  UCHAR ucSlaveAddr;
  UCHAR ucLineNumber;
}READ_EDID_FROM_HW_I2C_DATA_PARAMETERS;
# 1849 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS
{
  USHORT usPrescale;
  USHORT usByteOffset;






  UCHAR ucData;
  UCHAR ucStatus;
  UCHAR ucSlaveAddr;
  UCHAR ucLineNumber;
}WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS;



typedef struct _SET_UP_HW_I2C_DATA_PARAMETERS
{
  USHORT usPrescale;
  UCHAR ucSlaveAddr;
  UCHAR ucLineNumber;
}SET_UP_HW_I2C_DATA_PARAMETERS;
# 1882 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _POWER_CONNECTOR_DETECTION_PARAMETERS
{
  UCHAR ucPowerConnectorStatus;
 UCHAR ucPwrBehaviorId;
 USHORT usPwrBudget;
}POWER_CONNECTOR_DETECTION_PARAMETERS;

typedef struct POWER_CONNECTOR_DETECTION_PS_ALLOCATION
{
  UCHAR ucPowerConnectorStatus;
 UCHAR ucReserved;
 USHORT usPwrBudget;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}POWER_CONNECTOR_DETECTION_PS_ALLOCATION;






typedef struct _ENABLE_LVDS_SS_PARAMETERS
{
  USHORT usSpreadSpectrumPercentage;
  UCHAR ucSpreadSpectrumType;
  UCHAR ucSpreadSpectrumStepSize_Delay;
  UCHAR ucEnable;
  UCHAR ucPadding[3];
}ENABLE_LVDS_SS_PARAMETERS;


typedef struct _ENABLE_LVDS_SS_PARAMETERS_V2
{
  USHORT usSpreadSpectrumPercentage;
  UCHAR ucSpreadSpectrumType;
  UCHAR ucSpreadSpectrumStep;
  UCHAR ucEnable;
  UCHAR ucSpreadSpectrumDelay;
  UCHAR ucSpreadSpectrumRange;
  UCHAR ucPadding;
}ENABLE_LVDS_SS_PARAMETERS_V2;


typedef struct _ENABLE_SPREAD_SPECTRUM_ON_PPLL
{
  USHORT usSpreadSpectrumPercentage;
  UCHAR ucSpreadSpectrumType;
  UCHAR ucSpreadSpectrumStep;
  UCHAR ucEnable;
  UCHAR ucSpreadSpectrumDelay;
  UCHAR ucSpreadSpectrumRange;
  UCHAR ucPpll;
}ENABLE_SPREAD_SPECTRUM_ON_PPLL;

typedef struct _ENABLE_SPREAD_SPECTRUM_ON_PPLL_V2
{
  USHORT usSpreadSpectrumPercentage;
  UCHAR ucSpreadSpectrumType;



  UCHAR ucEnable;
  USHORT usSpreadSpectrumAmount;
  USHORT usSpreadSpectrumStep;
}ENABLE_SPREAD_SPECTRUM_ON_PPLL_V2;
# 1960 "drivers/gpu/drm/radeon/atombios.h"
 typedef struct _ENABLE_SPREAD_SPECTRUM_ON_PPLL_V3
{
  USHORT usSpreadSpectrumAmountFrac;
  UCHAR ucSpreadSpectrumType;



  UCHAR ucEnable;
  USHORT usSpreadSpectrumAmount;
  USHORT usSpreadSpectrumStep;
}ENABLE_SPREAD_SPECTRUM_ON_PPLL_V3;
# 1989 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _SET_PIXEL_CLOCK_PS_ALLOCATION
{
  PIXEL_CLOCK_PARAMETERS sPCLKInput;
  ENABLE_SPREAD_SPECTRUM_ON_PPLL sReserved;
}SET_PIXEL_CLOCK_PS_ALLOCATION;






typedef struct _MEMORY_TRAINING_PARAMETERS
{
  ULONG ulTargetMemoryClock;
}MEMORY_TRAINING_PARAMETERS;
# 2015 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _LVDS_ENCODER_CONTROL_PARAMETERS
{
  USHORT usPixelClock;
  UCHAR ucMisc;



  UCHAR ucAction;

}LVDS_ENCODER_CONTROL_PARAMETERS;
# 2036 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _LVDS_ENCODER_CONTROL_PARAMETERS_V2
{
  USHORT usPixelClock;
  UCHAR ucMisc;
  UCHAR ucAction;

  UCHAR ucTruncate;



  UCHAR ucSpatial;



  UCHAR ucTemporal;





  UCHAR ucFRC;







}LVDS_ENCODER_CONTROL_PARAMETERS_V2;
# 2086 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS
{
  UCHAR ucEnable;
  UCHAR ucMisc;
  UCHAR ucPadding[2];
}ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS;

typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION
{
  ENABLE_EXTERNAL_TMDS_ENCODER_PARAMETERS sXTmdsEncoder;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION;



typedef struct _ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION_V2
{
  LVDS_ENCODER_CONTROL_PARAMETERS_V2 sXTmdsEncoder;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}ENABLE_EXTERNAL_TMDS_ENCODER_PS_ALLOCATION_V2;

typedef struct _EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION
{
  DIG_ENCODER_CONTROL_PARAMETERS sDigEncoder;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}EXTERNAL_ENCODER_CONTROL_PS_ALLOCATION;
# 2127 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DVO_ENCODER_CONTROL_PARAMETERS_V3
{
  USHORT usPixelClock;
  UCHAR ucDVOConfig;
  UCHAR ucAction;
  UCHAR ucReseved[4];
}DVO_ENCODER_CONTROL_PARAMETERS_V3;


typedef struct _DVO_ENCODER_CONTROL_PARAMETERS_V1_4
{
  USHORT usPixelClock;
  UCHAR ucDVOConfig;
  UCHAR ucAction;
  UCHAR ucBitPerColor;
  UCHAR ucReseved[3];
}DVO_ENCODER_CONTROL_PARAMETERS_V1_4;
# 2213 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _SET_VOLTAGE_PARAMETERS
{
  UCHAR ucVoltageType;
  UCHAR ucVoltageMode;
  UCHAR ucVoltageIndex;
  UCHAR ucReserved;
}SET_VOLTAGE_PARAMETERS;

typedef struct _SET_VOLTAGE_PARAMETERS_V2
{
  UCHAR ucVoltageType;
  UCHAR ucVoltageMode;
  USHORT usVoltageLevel;
}SET_VOLTAGE_PARAMETERS_V2;


typedef struct _SET_VOLTAGE_PARAMETERS_V1_3
{
  UCHAR ucVoltageType;
  UCHAR ucVoltageMode;
  USHORT usVoltageLevel;
}SET_VOLTAGE_PARAMETERS_V1_3;
# 2260 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _SET_VOLTAGE_PS_ALLOCATION
{
  SET_VOLTAGE_PARAMETERS sASICSetVoltage;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}SET_VOLTAGE_PS_ALLOCATION;


typedef struct _GET_VOLTAGE_INFO_INPUT_PARAMETER_V1_1
{
  UCHAR ucVoltageType;
  UCHAR ucVoltageMode;
  USHORT usVoltageLevel;
  ULONG ulReserved;
}GET_VOLTAGE_INFO_INPUT_PARAMETER_V1_1;


typedef struct _GET_VOLTAGE_INFO_OUTPUT_PARAMETER_V1_1
{
  ULONG ulVotlageGpioState;
  ULONG ulVoltageGPioMask;
}GET_VOLTAGE_INFO_OUTPUT_PARAMETER_V1_1;


typedef struct _GET_LEAKAGE_VOLTAGE_INFO_OUTPUT_PARAMETER_V1_1
{
  USHORT usVoltageLevel;
  USHORT usVoltageId;
  ULONG ulReseved;
}GET_LEAKAGE_VOLTAGE_INFO_OUTPUT_PARAMETER_V1_1;
# 2306 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _GET_VOLTAGE_INFO_INPUT_PARAMETER_V1_2
{
  UCHAR ucVoltageType;
  UCHAR ucVoltageMode;
  USHORT usVoltageLevel;
  ULONG ulSCLKFreq;
}GET_VOLTAGE_INFO_INPUT_PARAMETER_V1_2;





typedef struct _GET_EVV_VOLTAGE_INFO_OUTPUT_PARAMETER_V1_2
{
  USHORT usVoltageLevel;
  USHORT usVoltageId;
  ULONG ulReseved;
}GET_EVV_VOLTAGE_INFO_OUTPUT_PARAMETER_V1_2;




typedef struct _TV_ENCODER_CONTROL_PARAMETERS
{
  USHORT usPixelClock;
  UCHAR ucTvStandard;
  UCHAR ucAction;

}TV_ENCODER_CONTROL_PARAMETERS;

typedef struct _TV_ENCODER_CONTROL_PS_ALLOCATION
{
  TV_ENCODER_CONTROL_PARAMETERS sTVEncoder;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}TV_ENCODER_CONTROL_PS_ALLOCATION;






typedef struct _ATOM_MASTER_LIST_OF_DATA_TABLES
{
  USHORT UtilityPipeLine;
  USHORT MultimediaCapabilityInfo;
  USHORT MultimediaConfigInfo;
  USHORT StandardVESA_Timing;
  USHORT FirmwareInfo;
  USHORT PaletteData;
  USHORT LCD_Info;
  USHORT DIGTransmitterInfo;
  USHORT AnalogTV_Info;
  USHORT SupportedDevicesInfo;
  USHORT GPIO_I2C_Info;
  USHORT VRAM_UsageByFirmware;
  USHORT GPIO_Pin_LUT;
  USHORT VESA_ToInternalModeLUT;
  USHORT ComponentVideoInfo;
  USHORT PowerPlayInfo;
  USHORT CompassionateData;
  USHORT SaveRestoreInfo;
  USHORT PPLL_SS_Info;
  USHORT OemInfo;
  USHORT XTMDS_Info;
  USHORT MclkSS_Info;
  USHORT Object_Header;
  USHORT IndirectIOAccess;
  USHORT MC_InitParameter;
  USHORT ASIC_VDDC_Info;
  USHORT ASIC_InternalSS_Info;
  USHORT TV_VideoMode;
  USHORT VRAM_Info;
  USHORT MemoryTrainingInfo;
  USHORT IntegratedSystemInfo;
  USHORT ASIC_ProfilingInfo;
  USHORT VoltageObjectInfo;
 USHORT PowerSourceInfo;
}ATOM_MASTER_LIST_OF_DATA_TABLES;

typedef struct _ATOM_MASTER_DATA_TABLE
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_MASTER_LIST_OF_DATA_TABLES ListOfDataTables;
}ATOM_MASTER_DATA_TABLE;
# 2399 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_MULTIMEDIA_CAPABILITY_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulSignature;
  UCHAR ucI2C_Type;
  UCHAR ucTV_OutInfo;
  UCHAR ucVideoPortInfo;
  UCHAR ucHostPortInfo;
}ATOM_MULTIMEDIA_CAPABILITY_INFO;




typedef struct _ATOM_MULTIMEDIA_CONFIG_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulSignature;
  UCHAR ucTunerInfo;
  UCHAR ucAudioChipInfo;
  UCHAR ucProductID;
  UCHAR ucMiscInfo1;
  UCHAR ucMiscInfo2;
  UCHAR ucMiscInfo3;
  UCHAR ucMiscInfo4;
  UCHAR ucVideoInput0Info;
  UCHAR ucVideoInput1Info;
  UCHAR ucVideoInput2Info;
  UCHAR ucVideoInput3Info;
  UCHAR ucVideoInput4Info;
}ATOM_MULTIMEDIA_CONFIG_INFO;
# 2458 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_FIRMWARE_CAPABILITY
{
# 2475 "drivers/gpu/drm/radeon/atombios.h"
  USHORT FirmwarePosted:1;
  USHORT DualCRTC_Support:1;
  USHORT ExtendedDesktopSupport:1;
  USHORT MemoryClockSS_Support:1;
  USHORT EngineClockSS_Support:1;
  USHORT GPUControlsBL:1;
  USHORT WMI_SUPPORT:1;
  USHORT PPMode_Assigned:1;
  USHORT HyperMemory_Support:1;
  USHORT HyperMemory_Size:4;
  USHORT PostWithoutModeSet:1;
  USHORT SCL2Redefined:1;
  USHORT Reserved:1;

}ATOM_FIRMWARE_CAPABILITY;

typedef union _ATOM_FIRMWARE_CAPABILITY_ACCESS
{
  ATOM_FIRMWARE_CAPABILITY sbfAccess;
  USHORT susAccess;
}ATOM_FIRMWARE_CAPABILITY_ACCESS;
# 2506 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_FIRMWARE_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulFirmwareRevision;
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
  ULONG ulDriverTargetEngineClock;
  ULONG ulDriverTargetMemoryClock;
  ULONG ulMaxEngineClockPLL_Output;
  ULONG ulMaxMemoryClockPLL_Output;
  ULONG ulMaxPixelClockPLL_Output;
  ULONG ulASICMaxEngineClock;
  ULONG ulASICMaxMemoryClock;
  UCHAR ucASICMaxTemperature;
  UCHAR ucPadding[3];
  ULONG aulReservedForBIOS[3];
  USHORT usMinEngineClockPLL_Input;
  USHORT usMaxEngineClockPLL_Input;
  USHORT usMinEngineClockPLL_Output;
  USHORT usMinMemoryClockPLL_Input;
  USHORT usMaxMemoryClockPLL_Input;
  USHORT usMinMemoryClockPLL_Output;
  USHORT usMaxPixelClock;
  USHORT usMinPixelClockPLL_Input;
  USHORT usMaxPixelClockPLL_Input;
  USHORT usMinPixelClockPLL_Output;
  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;
  USHORT usReferenceClock;
  USHORT usPM_RTS_Location;
  UCHAR ucPM_RTS_StreamSize;
  UCHAR ucDesign_ID;
  UCHAR ucMemoryModule_ID;
}ATOM_FIRMWARE_INFO;

typedef struct _ATOM_FIRMWARE_INFO_V1_2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulFirmwareRevision;
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
  ULONG ulDriverTargetEngineClock;
  ULONG ulDriverTargetMemoryClock;
  ULONG ulMaxEngineClockPLL_Output;
  ULONG ulMaxMemoryClockPLL_Output;
  ULONG ulMaxPixelClockPLL_Output;
  ULONG ulASICMaxEngineClock;
  ULONG ulASICMaxMemoryClock;
  UCHAR ucASICMaxTemperature;
  UCHAR ucMinAllowedBL_Level;
  UCHAR ucPadding[2];
  ULONG aulReservedForBIOS[2];
  ULONG ulMinPixelClockPLL_Output;
  USHORT usMinEngineClockPLL_Input;
  USHORT usMaxEngineClockPLL_Input;
  USHORT usMinEngineClockPLL_Output;
  USHORT usMinMemoryClockPLL_Input;
  USHORT usMaxMemoryClockPLL_Input;
  USHORT usMinMemoryClockPLL_Output;
  USHORT usMaxPixelClock;
  USHORT usMinPixelClockPLL_Input;
  USHORT usMaxPixelClockPLL_Input;
  USHORT usMinPixelClockPLL_Output;
  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;
  USHORT usReferenceClock;
  USHORT usPM_RTS_Location;
  UCHAR ucPM_RTS_StreamSize;
  UCHAR ucDesign_ID;
  UCHAR ucMemoryModule_ID;
}ATOM_FIRMWARE_INFO_V1_2;

typedef struct _ATOM_FIRMWARE_INFO_V1_3
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulFirmwareRevision;
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
  ULONG ulDriverTargetEngineClock;
  ULONG ulDriverTargetMemoryClock;
  ULONG ulMaxEngineClockPLL_Output;
  ULONG ulMaxMemoryClockPLL_Output;
  ULONG ulMaxPixelClockPLL_Output;
  ULONG ulASICMaxEngineClock;
  ULONG ulASICMaxMemoryClock;
  UCHAR ucASICMaxTemperature;
  UCHAR ucMinAllowedBL_Level;
  UCHAR ucPadding[2];
  ULONG aulReservedForBIOS;
  ULONG ul3DAccelerationEngineClock;
  ULONG ulMinPixelClockPLL_Output;
  USHORT usMinEngineClockPLL_Input;
  USHORT usMaxEngineClockPLL_Input;
  USHORT usMinEngineClockPLL_Output;
  USHORT usMinMemoryClockPLL_Input;
  USHORT usMaxMemoryClockPLL_Input;
  USHORT usMinMemoryClockPLL_Output;
  USHORT usMaxPixelClock;
  USHORT usMinPixelClockPLL_Input;
  USHORT usMaxPixelClockPLL_Input;
  USHORT usMinPixelClockPLL_Output;
  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;
  USHORT usReferenceClock;
  USHORT usPM_RTS_Location;
  UCHAR ucPM_RTS_StreamSize;
  UCHAR ucDesign_ID;
  UCHAR ucMemoryModule_ID;
}ATOM_FIRMWARE_INFO_V1_3;

typedef struct _ATOM_FIRMWARE_INFO_V1_4
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulFirmwareRevision;
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
  ULONG ulDriverTargetEngineClock;
  ULONG ulDriverTargetMemoryClock;
  ULONG ulMaxEngineClockPLL_Output;
  ULONG ulMaxMemoryClockPLL_Output;
  ULONG ulMaxPixelClockPLL_Output;
  ULONG ulASICMaxEngineClock;
  ULONG ulASICMaxMemoryClock;
  UCHAR ucASICMaxTemperature;
  UCHAR ucMinAllowedBL_Level;
  USHORT usBootUpVDDCVoltage;
  USHORT usLcdMinPixelClockPLL_Output;
  USHORT usLcdMaxPixelClockPLL_Output;
  ULONG ul3DAccelerationEngineClock;
  ULONG ulMinPixelClockPLL_Output;
  USHORT usMinEngineClockPLL_Input;
  USHORT usMaxEngineClockPLL_Input;
  USHORT usMinEngineClockPLL_Output;
  USHORT usMinMemoryClockPLL_Input;
  USHORT usMaxMemoryClockPLL_Input;
  USHORT usMinMemoryClockPLL_Output;
  USHORT usMaxPixelClock;
  USHORT usMinPixelClockPLL_Input;
  USHORT usMaxPixelClockPLL_Input;
  USHORT usMinPixelClockPLL_Output;
  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;
  USHORT usReferenceClock;
  USHORT usPM_RTS_Location;
  UCHAR ucPM_RTS_StreamSize;
  UCHAR ucDesign_ID;
  UCHAR ucMemoryModule_ID;
}ATOM_FIRMWARE_INFO_V1_4;


typedef struct _ATOM_FIRMWARE_INFO_V2_1
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulFirmwareRevision;
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
  ULONG ulReserved1;
  ULONG ulReserved2;
  ULONG ulMaxEngineClockPLL_Output;
  ULONG ulMaxMemoryClockPLL_Output;
  ULONG ulMaxPixelClockPLL_Output;
  ULONG ulBinaryAlteredInfo;
  ULONG ulDefaultDispEngineClkFreq;
  UCHAR ucReserved1;
  UCHAR ucMinAllowedBL_Level;
  USHORT usBootUpVDDCVoltage;
  USHORT usLcdMinPixelClockPLL_Output;
  USHORT usLcdMaxPixelClockPLL_Output;
  ULONG ulReserved4;
  ULONG ulMinPixelClockPLL_Output;
  USHORT usMinEngineClockPLL_Input;
  USHORT usMaxEngineClockPLL_Input;
  USHORT usMinEngineClockPLL_Output;
  USHORT usMinMemoryClockPLL_Input;
  USHORT usMaxMemoryClockPLL_Input;
  USHORT usMinMemoryClockPLL_Output;
  USHORT usMaxPixelClock;
  USHORT usMinPixelClockPLL_Input;
  USHORT usMaxPixelClockPLL_Input;
  USHORT usMinPixelClockPLL_Output;
  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;
  USHORT usCoreReferenceClock;
  USHORT usMemoryReferenceClock;
  USHORT usUniphyDPModeExtClkFreq;
  UCHAR ucMemoryModule_ID;
  UCHAR ucReserved4[3];
}ATOM_FIRMWARE_INFO_V2_1;




typedef struct _ATOM_FIRMWARE_INFO_V2_2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulFirmwareRevision;
  ULONG ulDefaultEngineClock;
  ULONG ulDefaultMemoryClock;
  ULONG ulSPLL_OutputFreq;
  ULONG ulGPUPLL_OutputFreq;
  ULONG ulReserved1;
  ULONG ulReserved2;
  ULONG ulMaxPixelClockPLL_Output;
  ULONG ulBinaryAlteredInfo;
  ULONG ulDefaultDispEngineClkFreq;
  UCHAR ucReserved3;
  UCHAR ucMinAllowedBL_Level;
  USHORT usBootUpVDDCVoltage;
  USHORT usLcdMinPixelClockPLL_Output;
  USHORT usLcdMaxPixelClockPLL_Output;
  ULONG ulReserved4;
  ULONG ulMinPixelClockPLL_Output;
  UCHAR ucRemoteDisplayConfig;
  UCHAR ucReserved5[3];
  ULONG ulReserved6;
  ULONG ulReserved7;
  USHORT usReserved11;
  USHORT usMinPixelClockPLL_Input;
  USHORT usMaxPixelClockPLL_Input;
  USHORT usBootUpVDDCIVoltage;
  ATOM_FIRMWARE_CAPABILITY_ACCESS usFirmwareCapability;
  USHORT usCoreReferenceClock;
  USHORT usMemoryReferenceClock;
  USHORT usUniphyDPModeExtClkFreq;
  UCHAR ucMemoryModule_ID;
  UCHAR ucReserved9[3];
  USHORT usBootUpMVDDCVoltage;
  USHORT usReserved12;
  ULONG ulReserved10[3];
}ATOM_FIRMWARE_INFO_V2_2;
# 2747 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_INTEGRATED_SYSTEM_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulBootUpEngineClock;
  ULONG ulBootUpMemoryClock;
  ULONG ulMaxSystemMemoryClock;
  ULONG ulMinSystemMemoryClock;
  UCHAR ucNumberOfCyclesInPeriodHi;
  UCHAR ucLCDTimingSel;
  USHORT usReserved1;
  USHORT usInterNBVoltageLow;
  USHORT usInterNBVoltageHigh;
  ULONG ulReserved[2];

  USHORT usFSBClock;
  USHORT usCapabilityFlag;


  USHORT usPCIENBCfgReg7;
  USHORT usK8MemoryClock;
  USHORT usK8SyncStartDelay;
  USHORT usK8DataReturnTime;
  UCHAR ucMaxNBVoltage;
  UCHAR ucMinNBVoltage;
  UCHAR ucMemoryType;
  UCHAR ucNumberOfCyclesInPeriod;
  UCHAR ucStartingPWM_HighTime;
  UCHAR ucHTLinkWidth;
  UCHAR ucMaxNBVoltageHigh;
  UCHAR ucMinNBVoltageHigh;
}ATOM_INTEGRATED_SYSTEM_INFO;
# 2819 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulBootUpEngineClock;
  ULONG ulReserved1[2];
  ULONG ulBootUpUMAClock;
  ULONG ulBootUpSidePortClock;
  ULONG ulMinSidePortClock;
  ULONG ulReserved2[6];
  ULONG ulSystemConfig;
  ULONG ulBootUpReqDisplayVector;
  ULONG ulOtherDisplayMisc;
  ULONG ulDDISlot1Config;
  ULONG ulDDISlot2Config;
  UCHAR ucMemoryType;
  UCHAR ucUMAChannelNumber;
  UCHAR ucDockingPinBit;
  UCHAR ucDockingPinPolarity;
  ULONG ulDockingPinCFGInfo;
  ULONG ulCPUCapInfo;
  USHORT usNumberOfCyclesInPeriod;
  USHORT usMaxNBVoltage;
  USHORT usMinNBVoltage;
  USHORT usBootUpNBVoltage;
  ULONG ulHTLinkFreq;
  USHORT usMinHTLinkWidth;
  USHORT usMaxHTLinkWidth;
  USHORT usUMASyncStartDelay;
  USHORT usUMADataReturnTime;
  USHORT usLinkStatusZeroTime;
  USHORT usDACEfuse;
  ULONG ulHighVoltageHTLinkFreq;
  ULONG ulLowVoltageHTLinkFreq;
  USHORT usMaxUpStreamHTLinkWidth;
  USHORT usMaxDownStreamHTLinkWidth;
  USHORT usMinUpStreamHTLinkWidth;
  USHORT usMinDownStreamHTLinkWidth;
  USHORT usFirmwareVersion;
  USHORT usFullT0Time;
  ULONG ulReserved3[96];
}ATOM_INTEGRATED_SYSTEM_INFO_V2;
# 2992 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V5
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulBootUpEngineClock;
  ULONG ulDentistVCOFreq;
  ULONG ulLClockFreq;
  ULONG ulBootUpUMAClock;
  ULONG ulReserved1[8];
  ULONG ulBootUpReqDisplayVector;
  ULONG ulOtherDisplayMisc;
  ULONG ulReserved2[4];
  ULONG ulSystemConfig;
  ULONG ulCPUCapInfo;
  USHORT usMaxNBVoltage;
  USHORT usMinNBVoltage;
  USHORT usBootUpNBVoltage;
  UCHAR ucHtcTmpLmt;
  UCHAR ucTjOffset;
  ULONG ulReserved3[4];
  ULONG ulDDISlot1Config;
  ULONG ulDDISlot2Config;
  ULONG ulDDISlot3Config;
  ULONG ulDDISlot4Config;
  ULONG ulReserved4[4];
  UCHAR ucMemoryType;
  UCHAR ucUMAChannelNumber;
  USHORT usReserved;
  ULONG ulReserved5[4];
  ULONG ulCSR_M3_ARB_CNTL_DEFAULT[10];
  ULONG ulCSR_M3_ARB_CNTL_UVD[10];
  ULONG ulCSR_M3_ARB_CNTL_FS3D[10];
  ULONG ulReserved6[61];
}ATOM_INTEGRATED_SYSTEM_INFO_V5;
# 3181 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_I2C_ID_CONFIG
{





  UCHAR bfI2C_LineMux:4;
  UCHAR bfHW_EngineID:3;
  UCHAR bfHW_Capable:1;

}ATOM_I2C_ID_CONFIG;

typedef union _ATOM_I2C_ID_CONFIG_ACCESS
{
  ATOM_I2C_ID_CONFIG sbfAccess;
  UCHAR ucAccess;
}ATOM_I2C_ID_CONFIG_ACCESS;





typedef struct _ATOM_GPIO_I2C_ASSIGMENT
{
  USHORT usClkMaskRegisterIndex;
  USHORT usClkEnRegisterIndex;
  USHORT usClkY_RegisterIndex;
  USHORT usClkA_RegisterIndex;
  USHORT usDataMaskRegisterIndex;
  USHORT usDataEnRegisterIndex;
  USHORT usDataY_RegisterIndex;
  USHORT usDataA_RegisterIndex;
  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;
  UCHAR ucClkMaskShift;
  UCHAR ucClkEnShift;
  UCHAR ucClkY_Shift;
  UCHAR ucClkA_Shift;
  UCHAR ucDataMaskShift;
  UCHAR ucDataEnShift;
  UCHAR ucDataY_Shift;
  UCHAR ucDataA_Shift;
  UCHAR ucReserved1;
  UCHAR ucReserved2;
}ATOM_GPIO_I2C_ASSIGMENT;

typedef struct _ATOM_GPIO_I2C_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_GPIO_I2C_ASSIGMENT asGPIO_Info[(0x0000000F +1)];
}ATOM_GPIO_I2C_INFO;
# 3240 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_MODE_MISC_INFO
{
# 3255 "drivers/gpu/drm/radeon/atombios.h"
  USHORT HorizontalCutOff:1;
  USHORT HSyncPolarity:1;
  USHORT VSyncPolarity:1;
  USHORT VerticalCutOff:1;
  USHORT H_ReplicationBy2:1;
  USHORT V_ReplicationBy2:1;
  USHORT CompositeSync:1;
  USHORT Interlace:1;
  USHORT DoubleClock:1;
  USHORT RGB888:1;
  USHORT Reserved:6;

}ATOM_MODE_MISC_INFO;

typedef union _ATOM_MODE_MISC_INFO_ACCESS
{
  ATOM_MODE_MISC_INFO sbfAccess;
  USHORT usAccess;
}ATOM_MODE_MISC_INFO_ACCESS;
# 3321 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _SET_CRTC_USING_DTD_TIMING_PARAMETERS
{
  USHORT usH_Size;
  USHORT usH_Blanking_Time;
  USHORT usV_Size;
  USHORT usV_Blanking_Time;
  USHORT usH_SyncOffset;
  USHORT usH_SyncWidth;
  USHORT usV_SyncOffset;
  USHORT usV_SyncWidth;
  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;
  UCHAR ucH_Border;
  UCHAR ucV_Border;
  UCHAR ucCRTC;
  UCHAR ucPadding[3];
}SET_CRTC_USING_DTD_TIMING_PARAMETERS;




typedef struct _SET_CRTC_TIMING_PARAMETERS
{
  USHORT usH_Total;
  USHORT usH_Disp;
  USHORT usH_SyncStart;
  USHORT usH_SyncWidth;
  USHORT usV_Total;
  USHORT usV_Disp;
  USHORT usV_SyncStart;
  USHORT usV_SyncWidth;
  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;
  UCHAR ucCRTC;
  UCHAR ucOverscanRight;
  UCHAR ucOverscanLeft;
  UCHAR ucOverscanBottom;
  UCHAR ucOverscanTop;
  UCHAR ucReserved;
}SET_CRTC_TIMING_PARAMETERS;







typedef struct _ATOM_MODE_TIMING
{
  USHORT usCRTC_H_Total;
  USHORT usCRTC_H_Disp;
  USHORT usCRTC_H_SyncStart;
  USHORT usCRTC_H_SyncWidth;
  USHORT usCRTC_V_Total;
  USHORT usCRTC_V_Disp;
  USHORT usCRTC_V_SyncStart;
  USHORT usCRTC_V_SyncWidth;
  USHORT usPixelClock;
  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;
  USHORT usCRTC_OverscanRight;
  USHORT usCRTC_OverscanLeft;
  USHORT usCRTC_OverscanBottom;
  USHORT usCRTC_OverscanTop;
  USHORT usReserve;
  UCHAR ucInternalModeNumber;
  UCHAR ucRefreshRate;
}ATOM_MODE_TIMING;

typedef struct _ATOM_DTD_FORMAT
{
  USHORT usPixClk;
  USHORT usHActive;
  USHORT usHBlanking_Time;
  USHORT usVActive;
  USHORT usVBlanking_Time;
  USHORT usHSyncOffset;
  USHORT usHSyncWidth;
  USHORT usVSyncOffset;
  USHORT usVSyncWidth;
  USHORT usImageHSize;
  USHORT usImageVSize;
  UCHAR ucHBorder;
  UCHAR ucVBorder;
  ATOM_MODE_MISC_INFO_ACCESS susModeMiscInfo;
  UCHAR ucInternalModeNumber;
  UCHAR ucRefreshRate;
}ATOM_DTD_FORMAT;
# 3418 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_LVDS_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_DTD_FORMAT sLCDTiming;
  USHORT usModePatchTableOffset;
  USHORT usSupportedRefreshRate;
  USHORT usOffDelayInMs;
  UCHAR ucPowerSequenceDigOntoDEin10Ms;
  UCHAR ucPowerSequenceDEtoBLOnin10Ms;
  UCHAR ucLVDS_Misc;



  UCHAR ucPanelDefaultRefreshRate;
  UCHAR ucPanelIdentification;
  UCHAR ucSS_Id;
}ATOM_LVDS_INFO;



typedef struct _ATOM_LVDS_INFO_V12
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_DTD_FORMAT sLCDTiming;
  USHORT usExtInfoTableOffset;
  USHORT usSupportedRefreshRate;
  USHORT usOffDelayInMs;
  UCHAR ucPowerSequenceDigOntoDEin10Ms;
  UCHAR ucPowerSequenceDEtoBLOnin10Ms;
  UCHAR ucLVDS_Misc;



  UCHAR ucPanelDefaultRefreshRate;
  UCHAR ucPanelIdentification;
  UCHAR ucSS_Id;
  USHORT usLCDVenderID;
  USHORT usLCDProductID;
  UCHAR ucLCDPanel_SpecialHandlingCap;
 UCHAR ucPanelInfoSize;
  UCHAR ucReserved[2];
}ATOM_LVDS_INFO_V12;
# 3501 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_LCD_INFO_V13
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_DTD_FORMAT sLCDTiming;
  USHORT usExtInfoTableOffset;
  USHORT usSupportedRefreshRate;
  ULONG ulReserved0;
  UCHAR ucLCD_Misc;





  UCHAR ucPanelDefaultRefreshRate;
  UCHAR ucPanelIdentification;
  UCHAR ucSS_Id;
  USHORT usLCDVenderID;
  USHORT usLCDProductID;
  UCHAR ucLCDPanel_SpecialHandlingCap;




  UCHAR ucPanelInfoSize;
  USHORT usBacklightPWM;

  UCHAR ucPowerSequenceDIGONtoDE_in4Ms;
  UCHAR ucPowerSequenceDEtoVARY_BL_in4Ms;
  UCHAR ucPowerSequenceVARY_BLtoDE_in4Ms;
  UCHAR ucPowerSequenceDEtoDIGON_in4Ms;

  UCHAR ucOffDelay_in4Ms;
  UCHAR ucPowerSequenceVARY_BLtoBLON_in4Ms;
  UCHAR ucPowerSequenceBLONtoVARY_BL_in4Ms;
  UCHAR ucReserved1;

  UCHAR ucDPCD_eDP_CONFIGURATION_CAP;
  UCHAR ucDPCD_MAX_LINK_RATE;
  UCHAR ucDPCD_MAX_LANE_COUNT;
  UCHAR ucDPCD_MAX_DOWNSPREAD;

  USHORT usMaxPclkFreqInSingleLink;
  UCHAR uceDPToLVDSRxId;
  UCHAR ucLcdReservd;
  ULONG ulReserved[2];
}ATOM_LCD_INFO_V13;
# 3589 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_PATCH_RECORD_MODE
{
  UCHAR ucRecordType;
  USHORT usHDisp;
  USHORT usVDisp;
}ATOM_PATCH_RECORD_MODE;

typedef struct _ATOM_LCD_RTS_RECORD
{
  UCHAR ucRecordType;
  UCHAR ucRTSValue;
}ATOM_LCD_RTS_RECORD;



typedef struct _ATOM_LCD_MODE_CONTROL_CAP
{
  UCHAR ucRecordType;
  USHORT usLCDCap;
}ATOM_LCD_MODE_CONTROL_CAP;





typedef struct _ATOM_FAKE_EDID_PATCH_RECORD
{
  UCHAR ucRecordType;
  UCHAR ucFakeEDIDLength;
  UCHAR ucFakeEDIDString[1];
} ATOM_FAKE_EDID_PATCH_RECORD;

typedef struct _ATOM_PANEL_RESOLUTION_PATCH_RECORD
{
   UCHAR ucRecordType;
   USHORT usHSize;
   USHORT usVSize;
}ATOM_PANEL_RESOLUTION_PATCH_RECORD;
# 3640 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_SPREAD_SPECTRUM_ASSIGNMENT
{
  USHORT usSpreadSpectrumPercentage;
  UCHAR ucSpreadSpectrumType;
  UCHAR ucSS_Step;
  UCHAR ucSS_Delay;
  UCHAR ucSS_Id;
  UCHAR ucRecommendedRef_Div;
  UCHAR ucSS_Range;
}ATOM_SPREAD_SPECTRUM_ASSIGNMENT;
# 3668 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_SPREAD_SPECTRUM_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_SPREAD_SPECTRUM_ASSIGNMENT asSS_Info[16];
}ATOM_SPREAD_SPECTRUM_INFO;
# 3701 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_ANALOG_TV_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucTV_SupportedStandard;
  UCHAR ucTV_BootUpDefaultStandard;
  UCHAR ucExt_TV_ASIC_ID;
  UCHAR ucExt_TV_ASIC_SlaveAddr;

  ATOM_MODE_TIMING aModeTimings[2];
}ATOM_ANALOG_TV_INFO;



typedef struct _ATOM_ANALOG_TV_INFO_V1_2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucTV_SupportedStandard;
  UCHAR ucTV_BootUpDefaultStandard;
  UCHAR ucExt_TV_ASIC_ID;
  UCHAR ucExt_TV_ASIC_SlaveAddr;
  ATOM_DTD_FORMAT aModeTimings[3];
}ATOM_ANALOG_TV_INFO_V1_2;

typedef struct _ATOM_DPCD_INFO
{
  UCHAR ucRevisionNumber;
  UCHAR ucMaxLinkRate;
  UCHAR ucMaxLane;
  UCHAR ucMaxDownSpread;
}ATOM_DPCD_INFO;
# 3848 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_FIRMWARE_VRAM_RESERVE_INFO
{
  ULONG ulStartAddrUsedByFirmware;
  USHORT usFirmwareUseInKb;
  USHORT usReserved;
}ATOM_FIRMWARE_VRAM_RESERVE_INFO;

typedef struct _ATOM_VRAM_USAGE_BY_FIRMWARE
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_FIRMWARE_VRAM_RESERVE_INFO asFirmwareVramReserveInfo[1];
}ATOM_VRAM_USAGE_BY_FIRMWARE;


typedef struct _ATOM_FIRMWARE_VRAM_RESERVE_INFO_V1_5
{
  ULONG ulStartAddrUsedByFirmware;
  USHORT usFirmwareUseInKb;
  USHORT usFBUsedByDrvInKb;
}ATOM_FIRMWARE_VRAM_RESERVE_INFO_V1_5;

typedef struct _ATOM_VRAM_USAGE_BY_FIRMWARE_V1_5
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_FIRMWARE_VRAM_RESERVE_INFO_V1_5 asFirmwareVramReserveInfo[1];
}ATOM_VRAM_USAGE_BY_FIRMWARE_V1_5;




typedef struct _ATOM_GPIO_PIN_ASSIGNMENT
{
  USHORT usGpioPin_AIndex;
  UCHAR ucGpioPinBitShift;
  UCHAR ucGPIO_ID;
}ATOM_GPIO_PIN_ASSIGNMENT;
# 3893 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_GPIO_PIN_LUT
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_GPIO_PIN_ASSIGNMENT asGPIO_Pin[1];
}ATOM_GPIO_PIN_LUT;
# 3911 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_GPIO_INFO
{
  USHORT usAOffset;
  UCHAR ucSettings;
  UCHAR ucReserved;
}ATOM_GPIO_INFO;
# 3950 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_COMPONENT_VIDEO_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usMask_PinRegisterIndex;
  USHORT usEN_PinRegisterIndex;
  USHORT usY_PinRegisterIndex;
  USHORT usA_PinRegisterIndex;
  UCHAR ucBitShift;
  UCHAR ucPinActiveState;
  ATOM_DTD_FORMAT sReserved;
  UCHAR ucMiscInfo;
  UCHAR uc480i;
  UCHAR uc480p;
  UCHAR uc720p;
  UCHAR uc1080i;
  UCHAR ucLetterBoxMode;
  UCHAR ucReserved[3];
  UCHAR ucNumOfWbGpioBlocks;
  ATOM_GPIO_INFO aWbGpioStateBlock[5];
  ATOM_DTD_FORMAT aModeTimings[5];
}ATOM_COMPONENT_VIDEO_INFO;



typedef struct _ATOM_COMPONENT_VIDEO_INFO_V21
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucMiscInfo;
  UCHAR uc480i;
  UCHAR uc480p;
  UCHAR uc720p;
  UCHAR uc1080i;
  UCHAR ucReserved;
  UCHAR ucLetterBoxMode;
  UCHAR ucNumOfWbGpioBlocks;
  ATOM_GPIO_INFO aWbGpioStateBlock[5];
  ATOM_DTD_FORMAT aModeTimings[5];
}ATOM_COMPONENT_VIDEO_INFO_V21;






typedef struct _ATOM_OBJECT_HEADER
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDeviceSupport;
  USHORT usConnectorObjectTableOffset;
  USHORT usRouterObjectTableOffset;
  USHORT usEncoderObjectTableOffset;
  USHORT usProtectionObjectTableOffset;
  USHORT usDisplayPathTableOffset;
}ATOM_OBJECT_HEADER;

typedef struct _ATOM_OBJECT_HEADER_V3
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDeviceSupport;
  USHORT usConnectorObjectTableOffset;
  USHORT usRouterObjectTableOffset;
  USHORT usEncoderObjectTableOffset;
  USHORT usProtectionObjectTableOffset;
  USHORT usDisplayPathTableOffset;
  USHORT usMiscObjectTableOffset;
}ATOM_OBJECT_HEADER_V3;

typedef struct _ATOM_DISPLAY_OBJECT_PATH
{
  USHORT usDeviceTag;
  USHORT usSize;
  USHORT usConnObjectId;
  USHORT usGPUObjectId;
  USHORT usGraphicObjIds[1];
}ATOM_DISPLAY_OBJECT_PATH;

typedef struct _ATOM_DISPLAY_EXTERNAL_OBJECT_PATH
{
  USHORT usDeviceTag;
  USHORT usSize;
  USHORT usConnObjectId;
  USHORT usGPUObjectId;
  USHORT usGraphicObjIds[2];
}ATOM_DISPLAY_EXTERNAL_OBJECT_PATH;

typedef struct _ATOM_DISPLAY_OBJECT_PATH_TABLE
{
  UCHAR ucNumOfDispPath;
  UCHAR ucVersion;
  UCHAR ucPadding[2];
  ATOM_DISPLAY_OBJECT_PATH asDispPath[1];
}ATOM_DISPLAY_OBJECT_PATH_TABLE;


typedef struct _ATOM_OBJECT
{
  USHORT usObjectID;
  USHORT usSrcDstTableOffset;
  USHORT usRecordOffset;
  USHORT usReserved;
}ATOM_OBJECT;

typedef struct _ATOM_OBJECT_TABLE
{
  UCHAR ucNumberOfObjects;
  UCHAR ucPadding[3];
  ATOM_OBJECT asObjects[1];
}ATOM_OBJECT_TABLE;

typedef struct _ATOM_SRC_DST_TABLE_FOR_ONE_OBJECT
{
  UCHAR ucNumberOfSrc;
  USHORT usSrcObjectID[1];
  UCHAR ucNumberOfDst;
  USHORT usDstObjectID[1];
}ATOM_SRC_DST_TABLE_FOR_ONE_OBJECT;
# 4096 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DP_CONN_CHANNEL_MAPPING
{






  UCHAR ucDP_Lane0_Source:2;
  UCHAR ucDP_Lane1_Source:2;
  UCHAR ucDP_Lane2_Source:2;
  UCHAR ucDP_Lane3_Source:2;

}ATOM_DP_CONN_CHANNEL_MAPPING;






typedef struct _ATOM_DVI_CONN_CHANNEL_MAPPING
{






  UCHAR ucDVI_DATA2_Source:2;
  UCHAR ucDVI_DATA1_Source:2;
  UCHAR ucDVI_DATA0_Source:2;
  UCHAR ucDVI_CLK_Source:2;

}ATOM_DVI_CONN_CHANNEL_MAPPING;

typedef struct _EXT_DISPLAY_PATH
{
  USHORT usDeviceTag;
  USHORT usDeviceACPIEnum;
  USHORT usDeviceConnector;
  UCHAR ucExtAUXDDCLutIndex;
  UCHAR ucExtHPDPINLutIndex;
  USHORT usExtEncoderObjId;
  union{
    UCHAR ucChannelMapping;
    ATOM_DP_CONN_CHANNEL_MAPPING asDPMapping;
    ATOM_DVI_CONN_CHANNEL_MAPPING asDVIMapping;
  };
  UCHAR ucChPNInvert;
  USHORT usCaps;
  USHORT usReserved;
}EXT_DISPLAY_PATH;
# 4156 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucGuid [16];
  EXT_DISPLAY_PATH sPath[7];
  UCHAR ucChecksum;
  UCHAR uc3DStereoPinId;
  UCHAR ucRemoteDisplayConfig;
  UCHAR uceDPToLVDSRxId;
  UCHAR ucFixDPVoltageSwing;
  UCHAR Reserved[3];
}ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO;


typedef struct _ATOM_COMMON_RECORD_HEADER
{
  UCHAR ucRecordType;
  UCHAR ucRecordSize;
}ATOM_COMMON_RECORD_HEADER;
# 4202 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_I2C_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  ATOM_I2C_ID_CONFIG sucI2cId;
  UCHAR ucI2CAddr;
}ATOM_I2C_RECORD;

typedef struct _ATOM_HPD_INT_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucHPDIntGPIOID;
  UCHAR ucPlugged_PinState;
}ATOM_HPD_INT_RECORD;


typedef struct _ATOM_OUTPUT_PROTECTION_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucProtectionFlag;
  UCHAR ucReserved;
}ATOM_OUTPUT_PROTECTION_RECORD;

typedef struct _ATOM_CONNECTOR_DEVICE_TAG
{
  ULONG ulACPIDeviceEnum;
  USHORT usDeviceID;
  USHORT usPadding;
}ATOM_CONNECTOR_DEVICE_TAG;

typedef struct _ATOM_CONNECTOR_DEVICE_TAG_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucNumberOfDevice;
  UCHAR ucReserved;
  ATOM_CONNECTOR_DEVICE_TAG asDeviceTag[1];
}ATOM_CONNECTOR_DEVICE_TAG_RECORD;


typedef struct _ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucConfigGPIOID;
  UCHAR ucConfigGPIOState;
  UCHAR ucFlowinGPIPID;
  UCHAR ucExtInGPIPID;
}ATOM_CONNECTOR_DVI_EXT_INPUT_RECORD;

typedef struct _ATOM_ENCODER_FPGA_CONTROL_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucCTL1GPIO_ID;
  UCHAR ucCTL1GPIOState;
  UCHAR ucCTL2GPIO_ID;
  UCHAR ucCTL2GPIOState;
  UCHAR ucCTL3GPIO_ID;
  UCHAR ucCTL3GPIOState;
  UCHAR ucCTLFPGA_IN_ID;
  UCHAR ucPadding[3];
}ATOM_ENCODER_FPGA_CONTROL_RECORD;

typedef struct _ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucGPIOID;
  UCHAR ucTVActiveState;
}ATOM_CONNECTOR_CVTV_SHARE_DIN_RECORD;

typedef struct _ATOM_JTAG_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucTMSGPIO_ID;
  UCHAR ucTMSGPIOState;
  UCHAR ucTCKGPIO_ID;
  UCHAR ucTCKGPIOState;
  UCHAR ucTDOGPIO_ID;
  UCHAR ucTDOGPIOState;
  UCHAR ucTDIGPIO_ID;
  UCHAR ucTDIGPIOState;
  UCHAR ucPadding[2];
}ATOM_JTAG_RECORD;



typedef struct _ATOM_GPIO_PIN_CONTROL_PAIR
{
  UCHAR ucGPIOID;
  UCHAR ucGPIO_PinState;
}ATOM_GPIO_PIN_CONTROL_PAIR;

typedef struct _ATOM_OBJECT_GPIO_CNTL_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucFlags;
  UCHAR ucNumberOfPins;
  ATOM_GPIO_PIN_CONTROL_PAIR asGpio[1];
}ATOM_OBJECT_GPIO_CNTL_RECORD;
# 4323 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_ENCODER_DVO_CF_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  ULONG ulStrengthControl;
  UCHAR ucPadding[2];
}ATOM_ENCODER_DVO_CF_RECORD;





typedef struct _ATOM_ENCODER_CAP_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  union {
    USHORT usEncoderCap;
    struct {





      USHORT usHBR2Cap:1;
      USHORT usHBR2En:1;
      USHORT usReserved:14;

    };
  };
}ATOM_ENCODER_CAP_RECORD;





typedef struct _ATOM_CONNECTOR_CF_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  USHORT usMaxPixClk;
  UCHAR ucFlowCntlGpioId;
  UCHAR ucSwapCntlGpioId;
  UCHAR ucConnectedDvoBundle;
  UCHAR ucPadding;
}ATOM_CONNECTOR_CF_RECORD;

typedef struct _ATOM_CONNECTOR_HARDCODE_DTD_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
 ATOM_DTD_FORMAT asTiming;
}ATOM_CONNECTOR_HARDCODE_DTD_RECORD;

typedef struct _ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucSubConnectorType;
  UCHAR ucReserved;
}ATOM_CONNECTOR_PCIE_SUBCONNECTOR_RECORD;


typedef struct _ATOM_ROUTER_DDC_PATH_SELECT_RECORD
{
 ATOM_COMMON_RECORD_HEADER sheader;
 UCHAR ucMuxType;
 UCHAR ucMuxControlPin;
 UCHAR ucMuxState[2];
}ATOM_ROUTER_DDC_PATH_SELECT_RECORD;

typedef struct _ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD
{
 ATOM_COMMON_RECORD_HEADER sheader;
 UCHAR ucMuxType;
 UCHAR ucMuxControlPin;
 UCHAR ucMuxState[2];
}ATOM_ROUTER_DATA_CLOCK_PATH_SELECT_RECORD;





typedef struct _ATOM_CONNECTOR_HPDPIN_LUT_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucHPDPINMap[(7 +1)];
}ATOM_CONNECTOR_HPDPIN_LUT_RECORD;

typedef struct _ATOM_CONNECTOR_AUXDDC_LUT_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  ATOM_I2C_ID_CONFIG ucAUXDDCMap[(7 +1)];
}ATOM_CONNECTOR_AUXDDC_LUT_RECORD;

typedef struct _ATOM_OBJECT_LINK_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  USHORT usObjectID;
}ATOM_OBJECT_LINK_RECORD;

typedef struct _ATOM_CONNECTOR_REMOTE_CAP_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  USHORT usReserved;
}ATOM_CONNECTOR_REMOTE_CAP_RECORD;

typedef struct _ATOM_CONNECTOR_LAYOUT_INFO
{
   USHORT usConnectorObjectId;
   UCHAR ucConnectorType;
   UCHAR ucPosition;
}ATOM_CONNECTOR_LAYOUT_INFO;
# 4440 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_BRACKET_LAYOUT_RECORD
{
  ATOM_COMMON_RECORD_HEADER sheader;
  UCHAR ucLength;
  UCHAR ucWidth;
  UCHAR ucConnNum;
  UCHAR ucReserved;
  ATOM_CONNECTOR_LAYOUT_INFO asConnInfo[1];
}ATOM_BRACKET_LAYOUT_RECORD;




typedef struct _ATOM_VOLTAGE_INFO_HEADER
{
   USHORT usVDDCBaseLevel;
   USHORT usReserved;
   UCHAR ucNumOfVoltageEntries;
   UCHAR ucBytesPerVoltageEntry;
   UCHAR ucVoltageStep;
   UCHAR ucDefaultVoltageEntry;
   UCHAR ucVoltageControlI2cLine;
   UCHAR ucVoltageControlAddress;
   UCHAR ucVoltageControlOffset;
}ATOM_VOLTAGE_INFO_HEADER;

typedef struct _ATOM_VOLTAGE_INFO
{
   ATOM_COMMON_TABLE_HEADER sHeader;
   ATOM_VOLTAGE_INFO_HEADER viHeader;
   UCHAR ucVoltageEntries[64];
}ATOM_VOLTAGE_INFO;


typedef struct _ATOM_VOLTAGE_FORMULA
{
   USHORT usVoltageBaseLevel;
   USHORT usVoltageStep;
  UCHAR ucNumOfVoltageEntries;
  UCHAR ucFlag;
  UCHAR ucBaseVID;
  UCHAR ucReserved;
  UCHAR ucVIDAdjustEntries[32];
}ATOM_VOLTAGE_FORMULA;

typedef struct _VOLTAGE_LUT_ENTRY
{
  USHORT usVoltageCode;
  USHORT usVoltageValue;
}VOLTAGE_LUT_ENTRY;

typedef struct _ATOM_VOLTAGE_FORMULA_V2
{
  UCHAR ucNumOfVoltageEntries;
  UCHAR ucReserved[3];
  VOLTAGE_LUT_ENTRY asVIDAdjustEntries[32];
}ATOM_VOLTAGE_FORMULA_V2;

typedef struct _ATOM_VOLTAGE_CONTROL
{
 UCHAR ucVoltageControlId;
  UCHAR ucVoltageControlI2cLine;
  UCHAR ucVoltageControlAddress;
  UCHAR ucVoltageControlOffset;
  USHORT usGpioPin_AIndex;
  UCHAR ucGpioPinBitShift[9];
 UCHAR ucReserved;
}ATOM_VOLTAGE_CONTROL;
# 4531 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_VOLTAGE_OBJECT
{
   UCHAR ucVoltageType;
  UCHAR ucSize;
  ATOM_VOLTAGE_CONTROL asControl;
   ATOM_VOLTAGE_FORMULA asFormula;
}ATOM_VOLTAGE_OBJECT;

typedef struct _ATOM_VOLTAGE_OBJECT_V2
{
   UCHAR ucVoltageType;
  UCHAR ucSize;
  ATOM_VOLTAGE_CONTROL asControl;
   ATOM_VOLTAGE_FORMULA_V2 asFormula;
}ATOM_VOLTAGE_OBJECT_V2;

typedef struct _ATOM_VOLTAGE_OBJECT_INFO
{
   ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_VOLTAGE_OBJECT asVoltageObj[3];
}ATOM_VOLTAGE_OBJECT_INFO;

typedef struct _ATOM_VOLTAGE_OBJECT_INFO_V2
{
   ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_VOLTAGE_OBJECT_V2 asVoltageObj[3];
}ATOM_VOLTAGE_OBJECT_INFO_V2;

typedef struct _ATOM_LEAKID_VOLTAGE
{
 UCHAR ucLeakageId;
 UCHAR ucReserved;
 USHORT usVoltage;
}ATOM_LEAKID_VOLTAGE;

typedef struct _ATOM_VOLTAGE_OBJECT_HEADER_V3{
   UCHAR ucVoltageType;
   UCHAR ucVoltageMode;
  USHORT usSize;
}ATOM_VOLTAGE_OBJECT_HEADER_V3;
# 4582 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _VOLTAGE_LUT_ENTRY_V2
{
  ULONG ulVoltageId;
  USHORT usVoltageValue;
}VOLTAGE_LUT_ENTRY_V2;

typedef struct _LEAKAGE_VOLTAGE_LUT_ENTRY_V2
{
  USHORT usVoltageLevel;
  USHORT usVoltageId;
 USHORT usLeakageId;
}LEAKAGE_VOLTAGE_LUT_ENTRY_V2;

typedef struct _ATOM_I2C_VOLTAGE_OBJECT_V3
{
   ATOM_VOLTAGE_OBJECT_HEADER_V3 sHeader;
   UCHAR ucVoltageRegulatorId;
   UCHAR ucVoltageControlI2cLine;
   UCHAR ucVoltageControlAddress;
   UCHAR ucVoltageControlOffset;
   ULONG ulReserved;
   VOLTAGE_LUT_ENTRY asVolI2cLut[1];
}ATOM_I2C_VOLTAGE_OBJECT_V3;





typedef struct _ATOM_GPIO_VOLTAGE_OBJECT_V3
{
   ATOM_VOLTAGE_OBJECT_HEADER_V3 sHeader;
   UCHAR ucVoltageGpioCntlId;
   UCHAR ucGpioEntryNum;
   UCHAR ucPhaseDelay;
   UCHAR ucReserved;
   ULONG ulGpioMaskVal;
   VOLTAGE_LUT_ENTRY_V2 asVolGpioLut[1];
}ATOM_GPIO_VOLTAGE_OBJECT_V3;

typedef struct _ATOM_LEAKAGE_VOLTAGE_OBJECT_V3
{
   ATOM_VOLTAGE_OBJECT_HEADER_V3 sHeader;
   UCHAR ucLeakageCntlId;
   UCHAR ucLeakageEntryNum;
   UCHAR ucReserved[2];
   ULONG ulMaxVoltageLevel;
   LEAKAGE_VOLTAGE_LUT_ENTRY_V2 asLeakageIdLut[1];
}ATOM_LEAKAGE_VOLTAGE_OBJECT_V3;


typedef struct _ATOM_SVID2_VOLTAGE_OBJECT_V3
{
   ATOM_VOLTAGE_OBJECT_HEADER_V3 sHeader;





   USHORT usLoadLine_PSI;

   UCHAR ucSVDGpioId;
   UCHAR ucSVCGpioId;
   ULONG ulReserved;
}ATOM_SVID2_VOLTAGE_OBJECT_V3;

typedef union _ATOM_VOLTAGE_OBJECT_V3{
  ATOM_GPIO_VOLTAGE_OBJECT_V3 asGpioVoltageObj;
  ATOM_I2C_VOLTAGE_OBJECT_V3 asI2cVoltageObj;
  ATOM_LEAKAGE_VOLTAGE_OBJECT_V3 asLeakageObj;
  ATOM_SVID2_VOLTAGE_OBJECT_V3 asSVID2Obj;
}ATOM_VOLTAGE_OBJECT_V3;

typedef struct _ATOM_VOLTAGE_OBJECT_INFO_V3_1
{
   ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_VOLTAGE_OBJECT_V3 asVoltageObj[3];
}ATOM_VOLTAGE_OBJECT_INFO_V3_1;

typedef struct _ATOM_ASIC_PROFILE_VOLTAGE
{
 UCHAR ucProfileId;
 UCHAR ucReserved;
 USHORT usSize;
 USHORT usEfuseSpareStartAddr;
 USHORT usFuseIndex[8];
 ATOM_LEAKID_VOLTAGE asLeakVol[2];
}ATOM_ASIC_PROFILE_VOLTAGE;






typedef struct _ATOM_ASIC_PROFILING_INFO
{
  ATOM_COMMON_TABLE_HEADER asHeader;
 ATOM_ASIC_PROFILE_VOLTAGE asVoltage;
}ATOM_ASIC_PROFILING_INFO;

typedef struct _ATOM_ASIC_PROFILING_INFO_V2_1
{
  ATOM_COMMON_TABLE_HEADER asHeader;
  UCHAR ucLeakageBinNum;
  USHORT usLeakageBinArrayOffset;

  UCHAR ucElbVDDC_Num;
  USHORT usElbVDDC_IdArrayOffset;
  USHORT usElbVDDC_LevelArrayOffset;

  UCHAR ucElbVDDCI_Num;
  USHORT usElbVDDCI_IdArrayOffset;
  USHORT usElbVDDCI_LevelArrayOffset;
}ATOM_ASIC_PROFILING_INFO_V2_1;

typedef struct _ATOM_ASIC_PROFILING_INFO_V3_1
{
  ATOM_COMMON_TABLE_HEADER asHeader;
  ULONG ulEvvDerateTdp;
  ULONG ulEvvDerateTdc;
  ULONG ulBoardCoreTemp;
  ULONG ulMaxVddc;
  ULONG ulMinVddc;
  ULONG ulLoadLineSlop;
  ULONG ulLeakageTemp;
  ULONG ulLeakageVoltage;
  ULONG ulCACmEncodeRange;
  ULONG ulCACmEncodeAverage;
  ULONG ulCACbEncodeRange;
  ULONG ulCACbEncodeAverage;
  ULONG ulKt_bEncodeRange;
  ULONG ulKt_bEncodeAverage;
  ULONG ulKv_mEncodeRange;
  ULONG ulKv_mEncodeAverage;
  ULONG ulKv_bEncodeRange;
  ULONG ulKv_bEncodeAverage;
  ULONG ulLkgEncodeLn_MaxDivMin;
  ULONG ulLkgEncodeMin;
  ULONG ulEfuseLogisticAlpha;
  USHORT usPowerDpm0;
  USHORT usCurrentDpm0;
  USHORT usPowerDpm1;
  USHORT usCurrentDpm1;
  USHORT usPowerDpm2;
  USHORT usCurrentDpm2;
  USHORT usPowerDpm3;
  USHORT usCurrentDpm3;
  USHORT usPowerDpm4;
  USHORT usCurrentDpm4;
  USHORT usPowerDpm5;
  USHORT usCurrentDpm5;
  USHORT usPowerDpm6;
  USHORT usCurrentDpm6;
  USHORT usPowerDpm7;
  USHORT usCurrentDpm7;
}ATOM_ASIC_PROFILING_INFO_V3_1;


typedef struct _ATOM_POWER_SOURCE_OBJECT
{
 UCHAR ucPwrSrcId;
 UCHAR ucPwrSensorType;
 UCHAR ucPwrSensId;
 UCHAR ucPwrSensSlaveAddr;
 UCHAR ucPwrSensRegIndex;
 UCHAR ucPwrSensRegBitMask;
 UCHAR ucPwrSensActiveState;
 UCHAR ucReserve[3];
 USHORT usSensPwr;
}ATOM_POWER_SOURCE_OBJECT;

typedef struct _ATOM_POWER_SOURCE_INFO
{
  ATOM_COMMON_TABLE_HEADER asHeader;
  UCHAR asPwrbehave[16];
  ATOM_POWER_SOURCE_OBJECT asPwrObj[1];
}ATOM_POWER_SOURCE_INFO;
# 4772 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_CLK_VOLT_CAPABILITY
{
  ULONG ulVoltageIndex;
  ULONG ulMaximumSupportedCLK;
}ATOM_CLK_VOLT_CAPABILITY;

typedef struct _ATOM_AVAILABLE_SCLK_LIST
{
  ULONG ulSupportedSCLK;
  USHORT usVoltageIndex;
  USHORT usVoltageID;
}ATOM_AVAILABLE_SCLK_LIST;





typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V6
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulBootUpEngineClock;
  ULONG ulDentistVCOFreq;
  ULONG ulBootUpUMAClock;
  ATOM_CLK_VOLT_CAPABILITY sDISPCLK_Voltage[4];
  ULONG ulBootUpReqDisplayVector;
  ULONG ulOtherDisplayMisc;
  ULONG ulGPUCapInfo;
  ULONG ulSB_MMIO_Base_Addr;
  USHORT usRequestedPWMFreqInHz;
  UCHAR ucHtcTmpLmt;
  UCHAR ucHtcHystLmt;
  ULONG ulMinEngineClock;
  ULONG ulSystemConfig;
  ULONG ulCPUCapInfo;
  USHORT usNBP0Voltage;
  USHORT usNBP1Voltage;
  USHORT usBootUpNBVoltage;
  USHORT usExtDispConnInfoOffset;
  USHORT usPanelRefreshRateRange;
  UCHAR ucMemoryType;
  UCHAR ucUMAChannelNumber;
  ULONG ulCSR_M3_ARB_CNTL_DEFAULT[10];
  ULONG ulCSR_M3_ARB_CNTL_UVD[10];
  ULONG ulCSR_M3_ARB_CNTL_FS3D[10];
  ATOM_AVAILABLE_SCLK_LIST sAvail_SCLK[5];
  ULONG ulGMCRestoreResetTime;
  ULONG ulMinimumNClk;
  ULONG ulIdleNClk;
  ULONG ulDDR_DLL_PowerUpTime;
  ULONG ulDDR_PLL_PowerUpTime;
  USHORT usPCIEClkSSPercentage;
  USHORT usPCIEClkSSType;
  USHORT usLvdsSSPercentage;
  USHORT usLvdsSSpreadRateIn10Hz;
  USHORT usHDMISSPercentage;
  USHORT usHDMISSpreadRateIn10Hz;
  USHORT usDVISSPercentage;
  USHORT usDVISSpreadRateIn10Hz;
  ULONG SclkDpmBoostMargin;
  ULONG SclkDpmThrottleMargin;
  USHORT SclkDpmTdpLimitPG;
  USHORT SclkDpmTdpLimitBoost;
  ULONG ulBoostEngineCLock;
  UCHAR ulBoostVid_2bit;
  UCHAR EnableBoost;
  USHORT GnbTdpLimit;
  USHORT usMaxLVDSPclkFreqInSingleLink;
  UCHAR ucLvdsMisc;
  UCHAR ucLVDSReserved;
  ULONG ulReserved3[15];
  ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO sExtDispConnInfo;
}ATOM_INTEGRATED_SYSTEM_INFO_V6;
# 4952 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_FUSION_SYSTEM_INFO_V1
{
  ATOM_INTEGRATED_SYSTEM_INFO_V6 sIntegratedSysInfo;
  ULONG ulPowerplayTable[128];
}ATOM_FUSION_SYSTEM_INFO_V1;


typedef struct _ATOM_TDP_CONFIG_BITS
{






  ULONG uCTDP_Enable:2;
  ULONG uCTDP_Value:14;
  ULONG uTDP_Value:14;
  ULONG uReserved:2;

}ATOM_TDP_CONFIG_BITS;

typedef union _ATOM_TDP_CONFIG
{
  ATOM_TDP_CONFIG_BITS TDP_config;
  ULONG TDP_config_all;
}ATOM_TDP_CONFIG;
# 4987 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V1_7
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulBootUpEngineClock;
  ULONG ulDentistVCOFreq;
  ULONG ulBootUpUMAClock;
  ATOM_CLK_VOLT_CAPABILITY sDISPCLK_Voltage[4];
  ULONG ulBootUpReqDisplayVector;
  ULONG ulOtherDisplayMisc;
  ULONG ulGPUCapInfo;
  ULONG ulSB_MMIO_Base_Addr;
  USHORT usRequestedPWMFreqInHz;
  UCHAR ucHtcTmpLmt;
  UCHAR ucHtcHystLmt;
  ULONG ulMinEngineClock;
  ULONG ulSystemConfig;
  ULONG ulCPUCapInfo;
  USHORT usNBP0Voltage;
  USHORT usNBP1Voltage;
  USHORT usBootUpNBVoltage;
  USHORT usExtDispConnInfoOffset;
  USHORT usPanelRefreshRateRange;
  UCHAR ucMemoryType;
  UCHAR ucUMAChannelNumber;
  UCHAR strVBIOSMsg[40];
  ATOM_TDP_CONFIG asTdpConfig;
  ULONG ulReserved[19];
  ATOM_AVAILABLE_SCLK_LIST sAvail_SCLK[5];
  ULONG ulGMCRestoreResetTime;
  ULONG ulMinimumNClk;
  ULONG ulIdleNClk;
  ULONG ulDDR_DLL_PowerUpTime;
  ULONG ulDDR_PLL_PowerUpTime;
  USHORT usPCIEClkSSPercentage;
  USHORT usPCIEClkSSType;
  USHORT usLvdsSSPercentage;
  USHORT usLvdsSSpreadRateIn10Hz;
  USHORT usHDMISSPercentage;
  USHORT usHDMISSpreadRateIn10Hz;
  USHORT usDVISSPercentage;
  USHORT usDVISSpreadRateIn10Hz;
  ULONG SclkDpmBoostMargin;
  ULONG SclkDpmThrottleMargin;
  USHORT SclkDpmTdpLimitPG;
  USHORT SclkDpmTdpLimitBoost;
  ULONG ulBoostEngineCLock;
  UCHAR ulBoostVid_2bit;
  UCHAR EnableBoost;
  USHORT GnbTdpLimit;
  USHORT usMaxLVDSPclkFreqInSingleLink;
  UCHAR ucLvdsMisc;
  UCHAR ucTravisLVDSVolAdjust;
  UCHAR ucLVDSPwrOnSeqDIGONtoDE_in4Ms;
  UCHAR ucLVDSPwrOnSeqDEtoVARY_BL_in4Ms;
  UCHAR ucLVDSPwrOffSeqVARY_BLtoDE_in4Ms;
  UCHAR ucLVDSPwrOffSeqDEtoDIGON_in4Ms;
  UCHAR ucLVDSOffToOnDelay_in4Ms;
  UCHAR ucLVDSPwrOnSeqVARY_BLtoBLON_in4Ms;
  UCHAR ucLVDSPwrOffSeqBLONtoVARY_BL_in4Ms;
  UCHAR ucMinAllowedBL_Level;
  ULONG ulLCDBitDepthControlVal;
  ULONG ulNbpStateMemclkFreq[4];
  USHORT usNBP2Voltage;
  USHORT usNBP3Voltage;
  ULONG ulNbpStateNClkFreq[4];
  UCHAR ucNBDPMEnable;
  UCHAR ucReserved[3];
  UCHAR ucDPMState0VclkFid;
  UCHAR ucDPMState0DclkFid;
  UCHAR ucDPMState1VclkFid;
  UCHAR ucDPMState1DclkFid;
  UCHAR ucDPMState2VclkFid;
  UCHAR ucDPMState2DclkFid;
  UCHAR ucDPMState3VclkFid;
  UCHAR ucDPMState3DclkFid;
  ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO sExtDispConnInfo;
}ATOM_INTEGRATED_SYSTEM_INFO_V1_7;
# 5214 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_INTEGRATED_SYSTEM_INFO_V1_8
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ULONG ulBootUpEngineClock;
  ULONG ulDentistVCOFreq;
  ULONG ulBootUpUMAClock;
  ATOM_CLK_VOLT_CAPABILITY sDISPCLK_Voltage[4];
  ULONG ulBootUpReqDisplayVector;
  ULONG ulVBIOSMisc;
  ULONG ulGPUCapInfo;
  ULONG ulDISP_CLK2Freq;
  USHORT usRequestedPWMFreqInHz;
  UCHAR ucHtcTmpLmt;
  UCHAR ucHtcHystLmt;
  ULONG ulReserved2;
  ULONG ulSystemConfig;
  ULONG ulCPUCapInfo;
  ULONG ulReserved3;
  USHORT usGPUReservedSysMemSize;
  USHORT usExtDispConnInfoOffset;
  USHORT usPanelRefreshRateRange;
  UCHAR ucMemoryType;
  UCHAR ucUMAChannelNumber;
  UCHAR strVBIOSMsg[40];
  ATOM_TDP_CONFIG asTdpConfig;
  ULONG ulReserved[19];
  ATOM_AVAILABLE_SCLK_LIST sAvail_SCLK[5];
  ULONG ulGMCRestoreResetTime;
  ULONG ulReserved4;
  ULONG ulIdleNClk;
  ULONG ulDDR_DLL_PowerUpTime;
  ULONG ulDDR_PLL_PowerUpTime;
  USHORT usPCIEClkSSPercentage;
  USHORT usPCIEClkSSType;
  USHORT usLvdsSSPercentage;
  USHORT usLvdsSSpreadRateIn10Hz;
  USHORT usHDMISSPercentage;
  USHORT usHDMISSpreadRateIn10Hz;
  USHORT usDVISSPercentage;
  USHORT usDVISSpreadRateIn10Hz;
  ULONG ulGPUReservedSysMemBaseAddrLo;
  ULONG ulGPUReservedSysMemBaseAddrHi;
  ULONG ulReserved5[3];
  USHORT usMaxLVDSPclkFreqInSingleLink;
  UCHAR ucLvdsMisc;
  UCHAR ucTravisLVDSVolAdjust;
  UCHAR ucLVDSPwrOnSeqDIGONtoDE_in4Ms;
  UCHAR ucLVDSPwrOnSeqDEtoVARY_BL_in4Ms;
  UCHAR ucLVDSPwrOffSeqVARY_BLtoDE_in4Ms;
  UCHAR ucLVDSPwrOffSeqDEtoDIGON_in4Ms;
  UCHAR ucLVDSOffToOnDelay_in4Ms;
  UCHAR ucLVDSPwrOnSeqVARY_BLtoBLON_in4Ms;
  UCHAR ucLVDSPwrOffSeqBLONtoVARY_BL_in4Ms;
  UCHAR ucMinAllowedBL_Level;
  ULONG ulLCDBitDepthControlVal;
  ULONG ulNbpStateMemclkFreq[4];
  ULONG ulReserved6;
  ULONG ulNbpStateNClkFreq[4];
  USHORT usNBPStateVoltage[4];
  USHORT usBootUpNBVoltage;
  USHORT usReserved2;
  ATOM_EXTERNAL_DISPLAY_CONNECTION_INFO sExtDispConnInfo;
}ATOM_INTEGRATED_SYSTEM_INFO_V1_8;
# 5425 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_FUSION_SYSTEM_INFO_V2
{
  ATOM_INTEGRATED_SYSTEM_INFO_V1_8 sIntegratedSysInfo;
  ULONG ulPowerplayTable[128];
}ATOM_FUSION_SYSTEM_INFO_V2;
# 5440 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_I2C_DATA_RECORD
{
  UCHAR ucNunberOfBytes;
  UCHAR ucI2CData[1];
}ATOM_I2C_DATA_RECORD;



typedef struct _ATOM_I2C_DEVICE_SETUP_INFO
{
  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;
  UCHAR ucSSChipID;
  UCHAR ucSSChipSlaveAddr;
  UCHAR ucNumOfI2CDataRecords;
  ATOM_I2C_DATA_RECORD asI2CData[1];
}ATOM_I2C_DEVICE_SETUP_INFO;


typedef struct _ATOM_ASIC_MVDD_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_I2C_DEVICE_SETUP_INFO asI2CSetup[1];
}ATOM_ASIC_MVDD_INFO;







typedef struct _ATOM_ASIC_SS_ASSIGNMENT
{
 ULONG ulTargetClockRange;
  USHORT usSpreadSpectrumPercentage;
 USHORT usSpreadRateInKhz;
  UCHAR ucClockIndication;
 UCHAR ucSpreadSpectrumMode;
 UCHAR ucReserved[2];
}ATOM_ASIC_SS_ASSIGNMENT;
# 5495 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_ASIC_SS_ASSIGNMENT_V2
{
 ULONG ulTargetClockRange;

  USHORT usSpreadSpectrumPercentage;
 USHORT usSpreadRateIn10Hz;
  UCHAR ucClockIndication;
 UCHAR ucSpreadSpectrumMode;
 UCHAR ucReserved[2];
}ATOM_ASIC_SS_ASSIGNMENT_V2;
# 5514 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_ASIC_INTERNAL_SS_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_ASIC_SS_ASSIGNMENT asSpreadSpectrum[4];
}ATOM_ASIC_INTERNAL_SS_INFO;

typedef struct _ATOM_ASIC_INTERNAL_SS_INFO_V2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_ASIC_SS_ASSIGNMENT_V2 asSpreadSpectrum[1];
}ATOM_ASIC_INTERNAL_SS_INFO_V2;

typedef struct _ATOM_ASIC_SS_ASSIGNMENT_V3
{
 ULONG ulTargetClockRange;

  USHORT usSpreadSpectrumPercentage;
 USHORT usSpreadRateIn10Hz;
  UCHAR ucClockIndication;
 UCHAR ucSpreadSpectrumMode;
 UCHAR ucReserved[2];
}ATOM_ASIC_SS_ASSIGNMENT_V3;






typedef struct _ATOM_ASIC_INTERNAL_SS_INFO_V3
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_ASIC_SS_ASSIGNMENT_V3 asSpreadSpectrum[1];
}ATOM_ASIC_INTERNAL_SS_INFO_V3;
# 6002 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _MEMORY_PLLINIT_PARAMETERS
{
  ULONG ulTargetMemoryClock;
  UCHAR ucAction;
  UCHAR ucFbDiv_Hi;
  UCHAR ucFbDiv;
  UCHAR ucPostDiv;
}MEMORY_PLLINIT_PARAMETERS;







typedef struct _GPIO_PIN_CONTROL_PARAMETERS
{
  UCHAR ucGPIO_ID;
  UCHAR ucGPIOBitShift;
 UCHAR ucGPIOBitVal;
  UCHAR ucAction;
}GPIO_PIN_CONTROL_PARAMETERS;

typedef struct _ENABLE_SCALER_PARAMETERS
{
  UCHAR ucScaler;
  UCHAR ucEnable;
  UCHAR ucTVStandard;
  UCHAR ucPadding[1];
}ENABLE_SCALER_PARAMETERS;
# 6040 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS
{
  ULONG usHWIconHorzVertPosn;
  UCHAR ucHWIconVertOffset;
  UCHAR ucHWIconHorzOffset;
  UCHAR ucSelection;
  UCHAR ucEnable;
}ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS;

typedef struct _ENABLE_HARDWARE_ICON_CURSOR_PS_ALLOCATION
{
  ENABLE_HARDWARE_ICON_CURSOR_PARAMETERS sEnableIcon;
  ENABLE_CRTC_PARAMETERS sReserved;
}ENABLE_HARDWARE_ICON_CURSOR_PS_ALLOCATION;

typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS
{
  USHORT usHight;
  USHORT usWidth;
  UCHAR ucSurface;
  UCHAR ucPadding[3];
}ENABLE_GRAPH_SURFACE_PARAMETERS;

typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS_V1_2
{
  USHORT usHight;
  USHORT usWidth;
  UCHAR ucSurface;
  UCHAR ucEnable;
  UCHAR ucPadding[2];
}ENABLE_GRAPH_SURFACE_PARAMETERS_V1_2;

typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS_V1_3
{
  USHORT usHight;
  USHORT usWidth;
  UCHAR ucSurface;
  UCHAR ucEnable;
  USHORT usDeviceId;
}ENABLE_GRAPH_SURFACE_PARAMETERS_V1_3;

typedef struct _ENABLE_GRAPH_SURFACE_PARAMETERS_V1_4
{
  USHORT usHight;
  USHORT usWidth;
  USHORT usGraphPitch;
  UCHAR ucColorDepth;
  UCHAR ucPixelFormat;
  UCHAR ucSurface;
  UCHAR ucEnable;
  UCHAR ucModeType;
  UCHAR ucReserved;
}ENABLE_GRAPH_SURFACE_PARAMETERS_V1_4;





typedef struct _ENABLE_GRAPH_SURFACE_PS_ALLOCATION
{
  ENABLE_GRAPH_SURFACE_PARAMETERS sSetSurface;
  ENABLE_YUV_PARAMETERS sReserved;
}ENABLE_GRAPH_SURFACE_PS_ALLOCATION;

typedef struct _MEMORY_CLEAN_UP_PARAMETERS
{
  USHORT usMemoryStart;
  USHORT usMemorySize;
}MEMORY_CLEAN_UP_PARAMETERS;


typedef struct _GET_DISPLAY_SURFACE_SIZE_PARAMETERS
{
  USHORT usX_Size;
  USHORT usY_Size;
}GET_DISPLAY_SURFACE_SIZE_PARAMETERS;

typedef struct _GET_DISPLAY_SURFACE_SIZE_PARAMETERS_V2
{
  union{
    USHORT usX_Size;
    USHORT usSurface;
  };
  USHORT usY_Size;
  USHORT usDispXStart;
  USHORT usDispYStart;
}GET_DISPLAY_SURFACE_SIZE_PARAMETERS_V2;


typedef struct _PALETTE_DATA_CONTROL_PARAMETERS_V3
{
  UCHAR ucLutId;
  UCHAR ucAction;
  USHORT usLutStartIndex;
  USHORT usLutLength;
  USHORT usLutOffsetInVram;
}PALETTE_DATA_CONTROL_PARAMETERS_V3;







typedef struct _INTERRUPT_SERVICE_PARAMETERS_V2
{
  UCHAR ucInterruptId;
  UCHAR ucServiceId;
  UCHAR ucStatus;
  UCHAR ucReserved;
}INTERRUPT_SERVICE_PARAMETER_V2;
# 6169 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _INDIRECT_IO_ACCESS
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR IOAccessSequence[256];
} INDIRECT_IO_ACCESS;
# 6199 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_OEM_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;
}ATOM_OEM_INFO;

typedef struct _ATOM_TV_MODE
{
   UCHAR ucVMode_Num;
   UCHAR ucTV_Mode_Num;
}ATOM_TV_MODE;

typedef struct _ATOM_BIOS_INT_TVSTD_MODE
{
  ATOM_COMMON_TABLE_HEADER sHeader;
   USHORT usTV_Mode_LUT_Offset;
   USHORT usTV_FIFO_Offset;
   USHORT usNTSC_Tbl_Offset;
   USHORT usPAL_Tbl_Offset;
   USHORT usCV_Tbl_Offset;
}ATOM_BIOS_INT_TVSTD_MODE;


typedef struct _ATOM_TV_MODE_SCALER_PTR
{
   USHORT ucFilter0_Offset;
   USHORT usFilter1_Offset;
   UCHAR ucTV_Mode_Num;
}ATOM_TV_MODE_SCALER_PTR;

typedef struct _ATOM_STANDARD_VESA_TIMING
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_DTD_FORMAT aModeTimings[16];
}ATOM_STANDARD_VESA_TIMING;


typedef struct _ATOM_STD_FORMAT
{
  USHORT usSTD_HDisp;
  USHORT usSTD_VDisp;
  USHORT usSTD_RefreshRate;
  USHORT usReserved;
}ATOM_STD_FORMAT;

typedef struct _ATOM_VESA_TO_EXTENDED_MODE
{
  USHORT usVESA_ModeNumber;
  USHORT usExtendedModeNumber;
}ATOM_VESA_TO_EXTENDED_MODE;

typedef struct _ATOM_VESA_TO_INTENAL_MODE_LUT
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  ATOM_VESA_TO_EXTENDED_MODE asVESA_ToExtendedModeInfo[76];
}ATOM_VESA_TO_INTENAL_MODE_LUT;


typedef struct _ATOM_MEMORY_VENDOR_BLOCK{
 UCHAR ucMemoryType;
 UCHAR ucMemoryVendor;
 UCHAR ucAdjMCId;
 UCHAR ucDynClkId;
 ULONG ulDllResetClkRange;
}ATOM_MEMORY_VENDOR_BLOCK;


typedef struct _ATOM_MEMORY_SETTING_ID_CONFIG{




 ULONG ulMemClockRange:24;
 ULONG ucMemBlkId:8;

}ATOM_MEMORY_SETTING_ID_CONFIG;

typedef union _ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS
{
  ATOM_MEMORY_SETTING_ID_CONFIG slAccess;
  ULONG ulAccess;
}ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS;


typedef struct _ATOM_MEMORY_SETTING_DATA_BLOCK{
 ATOM_MEMORY_SETTING_ID_CONFIG_ACCESS ulMemoryID;
 ULONG aulMemData[1];
}ATOM_MEMORY_SETTING_DATA_BLOCK;


typedef struct _ATOM_INIT_REG_INDEX_FORMAT{
  USHORT usRegIndex;
  UCHAR ucPreRegDataLength;
}ATOM_INIT_REG_INDEX_FORMAT;


typedef struct _ATOM_INIT_REG_BLOCK{
 USHORT usRegIndexTblSize;
 USHORT usRegDataBlkSize;
 ATOM_INIT_REG_INDEX_FORMAT asRegIndexBuf[1];
 ATOM_MEMORY_SETTING_DATA_BLOCK asRegDataBuf[1];
}ATOM_INIT_REG_BLOCK;
# 6317 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_MC_INIT_PARAM_TABLE
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usAdjustARB_SEQDataOffset;
  USHORT usMCInitMemTypeTblOffset;
  USHORT usMCInitCommonTblOffset;
  USHORT usMCInitPowerDownTblOffset;
 ULONG ulARB_SEQDataBuf[32];
 ATOM_INIT_REG_BLOCK asMCInitMemType;
 ATOM_INIT_REG_BLOCK asMCInitCommon;
}ATOM_MC_INIT_PARAM_TABLE;
# 6373 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _MCuCodeHeader
{
  ULONG ulSignature;
  UCHAR ucRevision;
  UCHAR ucChecksum;
  UCHAR ucReserved1;
  UCHAR ucReserved2;
  USHORT usParametersLength;
  USHORT usUCodeLength;
  USHORT usReserved1;
  USHORT usReserved2;
} MCuCodeHeader;






typedef struct _ATOM_VRAM_MODULE_V1
{
  ULONG ulReserved;
  USHORT usEMRSValue;
  USHORT usMRSValue;
  USHORT usReserved;
  UCHAR ucExtMemoryID;
  UCHAR ucMemoryType;
  UCHAR ucMemoryVenderID;
  UCHAR ucMemoryDeviceCfg;
  UCHAR ucRow;
  UCHAR ucColumn;
  UCHAR ucBank;
  UCHAR ucRank;
  UCHAR ucChannelNum;
  UCHAR ucChannelConfig;
  UCHAR ucDefaultMVDDQ_ID;
  UCHAR ucDefaultMVDDC_ID;
  UCHAR ucReserved[2];
}ATOM_VRAM_MODULE_V1;


typedef struct _ATOM_VRAM_MODULE_V2
{
  ULONG ulReserved;
  ULONG ulFlags;
  ULONG ulEngineClock;
  ULONG ulMemoryClock;
  USHORT usEMRS2Value;
  USHORT usEMRS3Value;
  USHORT usEMRSValue;
  USHORT usMRSValue;
  USHORT usReserved;
  UCHAR ucExtMemoryID;
  UCHAR ucMemoryType;
  UCHAR ucMemoryVenderID;
  UCHAR ucMemoryDeviceCfg;
  UCHAR ucRow;
  UCHAR ucColumn;
  UCHAR ucBank;
  UCHAR ucRank;
  UCHAR ucChannelNum;
  UCHAR ucChannelConfig;
  UCHAR ucDefaultMVDDQ_ID;
  UCHAR ucDefaultMVDDC_ID;
  UCHAR ucRefreshRateFactor;
  UCHAR ucReserved[3];
}ATOM_VRAM_MODULE_V2;


typedef struct _ATOM_MEMORY_TIMING_FORMAT
{
 ULONG ulClkRange;
  union{
   USHORT usMRS;
    USHORT usDDR3_MR0;
  };
  union{
   USHORT usEMRS;
    USHORT usDDR3_MR1;
  };
 UCHAR ucCL;
 UCHAR ucWL;
 UCHAR uctRAS;
 UCHAR uctRC;
 UCHAR uctRFC;
 UCHAR uctRCDR;
 UCHAR uctRCDW;
 UCHAR uctRP;
 UCHAR uctRRD;
 UCHAR uctWR;
 UCHAR uctWTR;
 UCHAR uctPDIX;
 UCHAR uctFAW;
 UCHAR uctAOND;
  union
  {
    struct {
     UCHAR ucflag;
     UCHAR ucReserved;
    };
    USHORT usDDR3_MR2;
  };
}ATOM_MEMORY_TIMING_FORMAT;


typedef struct _ATOM_MEMORY_TIMING_FORMAT_V1
{
 ULONG ulClkRange;
 USHORT usMRS;
 USHORT usEMRS;
 UCHAR ucCL;
 UCHAR ucWL;
 UCHAR uctRAS;
 UCHAR uctRC;
 UCHAR uctRFC;
 UCHAR uctRCDR;
 UCHAR uctRCDW;
 UCHAR uctRP;
 UCHAR uctRRD;
 UCHAR uctWR;
 UCHAR uctWTR;
 UCHAR uctPDIX;
 UCHAR uctFAW;
 UCHAR uctAOND;
 UCHAR ucflag;

 UCHAR uctCCDL;
 UCHAR uctCRCRL;
 UCHAR uctCRCWL;
 UCHAR uctCKE;
 UCHAR uctCKRSE;
 UCHAR uctCKRSX;
 UCHAR uctFAW32;
 UCHAR ucMR5lo;
 UCHAR ucMR5hi;
 UCHAR ucTerminator;
}ATOM_MEMORY_TIMING_FORMAT_V1;

typedef struct _ATOM_MEMORY_TIMING_FORMAT_V2
{
 ULONG ulClkRange;
 USHORT usMRS;
 USHORT usEMRS;
 UCHAR ucCL;
 UCHAR ucWL;
 UCHAR uctRAS;
 UCHAR uctRC;
 UCHAR uctRFC;
 UCHAR uctRCDR;
 UCHAR uctRCDW;
 UCHAR uctRP;
 UCHAR uctRRD;
 UCHAR uctWR;
 UCHAR uctWTR;
 UCHAR uctPDIX;
 UCHAR uctFAW;
 UCHAR uctAOND;
 UCHAR ucflag;

 UCHAR uctCCDL;
 UCHAR uctCRCRL;
 UCHAR uctCRCWL;
 UCHAR uctCKE;
 UCHAR uctCKRSE;
 UCHAR uctCKRSX;
 UCHAR uctFAW32;
 UCHAR ucMR4lo;
 UCHAR ucMR4hi;
 UCHAR ucMR5lo;
 UCHAR ucMR5hi;
 UCHAR ucTerminator;
 UCHAR ucReserved;
}ATOM_MEMORY_TIMING_FORMAT_V2;

typedef struct _ATOM_MEMORY_FORMAT
{
 ULONG ulDllDisClock;
  union{
    USHORT usEMRS2Value;
    USHORT usDDR3_Reserved;
  };
  union{
    USHORT usEMRS3Value;
    USHORT usDDR3_MR3;
  };
  UCHAR ucMemoryType;
  UCHAR ucMemoryVenderID;
  UCHAR ucRow;
  UCHAR ucColumn;
  UCHAR ucBank;
  UCHAR ucRank;
 UCHAR ucBurstSize;
  UCHAR ucDllDisBit;
  UCHAR ucRefreshRateFactor;
 UCHAR ucDensity;
 UCHAR ucPreamble;
  UCHAR ucMemAttrib;
 ATOM_MEMORY_TIMING_FORMAT asMemTiming[5];
}ATOM_MEMORY_FORMAT;


typedef struct _ATOM_VRAM_MODULE_V3
{
 ULONG ulChannelMapCfg;
 USHORT usSize;
  USHORT usDefaultMVDDQ;
  USHORT usDefaultMVDDC;
 UCHAR ucExtMemoryID;
  UCHAR ucChannelNum;
 UCHAR ucChannelSize;
 UCHAR ucVREFI;
 UCHAR ucNPL_RT;
 UCHAR ucFlag;
 ATOM_MEMORY_FORMAT asMemory;
}ATOM_VRAM_MODULE_V3;
# 6595 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_VRAM_MODULE_V4
{
  ULONG ulChannelMapCfg;
  USHORT usModuleSize;
  USHORT usPrivateReserved;

  USHORT usReserved;
  UCHAR ucExtMemoryID;
  UCHAR ucMemoryType;
  UCHAR ucChannelNum;
  UCHAR ucChannelWidth;
 UCHAR ucDensity;
 UCHAR ucFlag;
 UCHAR ucMisc;
  UCHAR ucVREFI;
  UCHAR ucNPL_RT;
  UCHAR ucPreamble;
  UCHAR ucMemorySize;

  UCHAR ucReserved[3];


  union{
    USHORT usEMRS2Value;
    USHORT usDDR3_Reserved;
  };
  union{
    USHORT usEMRS3Value;
    USHORT usDDR3_MR3;
  };
  UCHAR ucMemoryVenderID;
  UCHAR ucRefreshRateFactor;
  UCHAR ucReserved2[2];
  ATOM_MEMORY_TIMING_FORMAT asMemTiming[5];
}ATOM_VRAM_MODULE_V4;







typedef struct _ATOM_VRAM_MODULE_V5
{
  ULONG ulChannelMapCfg;
  USHORT usModuleSize;
  USHORT usPrivateReserved;

  USHORT usReserved;
  UCHAR ucExtMemoryID;
  UCHAR ucMemoryType;
  UCHAR ucChannelNum;
  UCHAR ucChannelWidth;
 UCHAR ucDensity;
 UCHAR ucFlag;
 UCHAR ucMisc;
  UCHAR ucVREFI;
  UCHAR ucNPL_RT;
  UCHAR ucPreamble;
  UCHAR ucMemorySize;

  UCHAR ucReserved[3];


  USHORT usEMRS2Value;
  USHORT usEMRS3Value;
  UCHAR ucMemoryVenderID;
  UCHAR ucRefreshRateFactor;
  UCHAR ucFIFODepth;
  UCHAR ucCDR_Bandwidth;
  ATOM_MEMORY_TIMING_FORMAT_V1 asMemTiming[5];
}ATOM_VRAM_MODULE_V5;

typedef struct _ATOM_VRAM_MODULE_V6
{
  ULONG ulChannelMapCfg;
  USHORT usModuleSize;
  USHORT usPrivateReserved;

  USHORT usReserved;
  UCHAR ucExtMemoryID;
  UCHAR ucMemoryType;
  UCHAR ucChannelNum;
  UCHAR ucChannelWidth;
 UCHAR ucDensity;
 UCHAR ucFlag;
 UCHAR ucMisc;
  UCHAR ucVREFI;
  UCHAR ucNPL_RT;
  UCHAR ucPreamble;
  UCHAR ucMemorySize;

  UCHAR ucReserved[3];


  USHORT usEMRS2Value;
  USHORT usEMRS3Value;
  UCHAR ucMemoryVenderID;
  UCHAR ucRefreshRateFactor;
  UCHAR ucFIFODepth;
  UCHAR ucCDR_Bandwidth;
  ATOM_MEMORY_TIMING_FORMAT_V2 asMemTiming[5];
}ATOM_VRAM_MODULE_V6;

typedef struct _ATOM_VRAM_MODULE_V7
{

  ULONG ulChannelMapCfg;
  USHORT usModuleSize;
  USHORT usPrivateReserved;
  USHORT usEnableChannels;
  UCHAR ucExtMemoryID;
  UCHAR ucMemoryType;
  UCHAR ucChannelNum;
  UCHAR ucChannelWidth;
  UCHAR ucDensity;
  UCHAR ucReserve;
  UCHAR ucMisc;
  UCHAR ucVREFI;
  UCHAR ucNPL_RT;
  UCHAR ucPreamble;
  UCHAR ucMemorySize;
  USHORT usSEQSettingOffset;
  UCHAR ucReserved;

  USHORT usEMRS2Value;
  USHORT usEMRS3Value;
  UCHAR ucMemoryVenderID;
  UCHAR ucRefreshRateFactor;
  UCHAR ucFIFODepth;
  UCHAR ucCDR_Bandwidth;
  char strMemPNString[20];
}ATOM_VRAM_MODULE_V7;

typedef struct _ATOM_VRAM_INFO_V2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucNumOfVRAMModule;
  ATOM_VRAM_MODULE_V3 aVramInfo[16];
}ATOM_VRAM_INFO_V2;

typedef struct _ATOM_VRAM_INFO_V3
{
  ATOM_COMMON_TABLE_HEADER sHeader;
 USHORT usMemAdjustTblOffset;
 USHORT usMemClkPatchTblOffset;
 USHORT usRerseved;
 UCHAR aVID_PinsShift[9];
  UCHAR ucNumOfVRAMModule;
  ATOM_VRAM_MODULE_V3 aVramInfo[16];
 ATOM_INIT_REG_BLOCK asMemPatch;

}ATOM_VRAM_INFO_V3;



typedef struct _ATOM_VRAM_INFO_V4
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usMemAdjustTblOffset;
  USHORT usMemClkPatchTblOffset;
  USHORT usRerseved;
  UCHAR ucMemDQ7_0ByteRemap;
  ULONG ulMemDQ7_0BitRemap;
  UCHAR ucReservde[4];
  UCHAR ucNumOfVRAMModule;
  ATOM_VRAM_MODULE_V4 aVramInfo[16];
 ATOM_INIT_REG_BLOCK asMemPatch;

}ATOM_VRAM_INFO_V4;

typedef struct _ATOM_VRAM_INFO_HEADER_V2_1
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usMemAdjustTblOffset;
  USHORT usMemClkPatchTblOffset;
  USHORT usPerBytePresetOffset;
  USHORT usReserved[3];
  UCHAR ucNumOfVRAMModule;
  UCHAR ucMemoryClkPatchTblVer;
  UCHAR ucVramModuleVer;
  UCHAR ucReserved;
  ATOM_VRAM_MODULE_V7 aVramInfo[16];
}ATOM_VRAM_INFO_HEADER_V2_1;


typedef struct _ATOM_VRAM_GPIO_DETECTION_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR aVID_PinsShift[9];
}ATOM_VRAM_GPIO_DETECTION_INFO;


typedef struct _ATOM_MEMORY_TRAINING_INFO
{
 ATOM_COMMON_TABLE_HEADER sHeader;
 UCHAR ucTrainingLoop;
 UCHAR ucReserved[3];
 ATOM_INIT_REG_BLOCK asMemTrainingSetting;
}ATOM_MEMORY_TRAINING_INFO;


typedef struct SW_I2C_CNTL_DATA_PARAMETERS
{
  UCHAR ucControl;
  UCHAR ucData;
  UCHAR ucSatus;
  UCHAR ucTemp;
} SW_I2C_CNTL_DATA_PARAMETERS;



typedef struct _SW_I2C_IO_DATA_PARAMETERS
{
  USHORT GPIO_Info;
  UCHAR ucAct;
  UCHAR ucData;
 } SW_I2C_IO_DATA_PARAMETERS;
# 6843 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _PTR_32_BIT_STRUCTURE
{
 USHORT Offset16;
 USHORT Segment16;
} PTR_32_BIT_STRUCTURE;

typedef union _PTR_32_BIT_UNION
{
 PTR_32_BIT_STRUCTURE SegmentOffset;
 ULONG Ptr32_Bit;
} PTR_32_BIT_UNION;

typedef struct _VBE_1_2_INFO_BLOCK_UPDATABLE
{
 UCHAR VbeSignature[4];
 USHORT VbeVersion;
 PTR_32_BIT_UNION OemStringPtr;
 UCHAR Capabilities[4];
 PTR_32_BIT_UNION VideoModePtr;
 USHORT TotalMemory;
} VBE_1_2_INFO_BLOCK_UPDATABLE;


typedef struct _VBE_2_0_INFO_BLOCK_UPDATABLE
{
 VBE_1_2_INFO_BLOCK_UPDATABLE CommonBlock;
 USHORT OemSoftRev;
 PTR_32_BIT_UNION OemVendorNamePtr;
 PTR_32_BIT_UNION OemProductNamePtr;
 PTR_32_BIT_UNION OemProductRevPtr;
} VBE_2_0_INFO_BLOCK_UPDATABLE;

typedef union _VBE_VERSION_UNION
{
 VBE_2_0_INFO_BLOCK_UPDATABLE VBE_2_0_InfoBlock;
 VBE_1_2_INFO_BLOCK_UPDATABLE VBE_1_2_InfoBlock;
} VBE_VERSION_UNION;

typedef struct _VBE_INFO_BLOCK
{
 VBE_VERSION_UNION UpdatableVBE_Info;
 UCHAR Reserved[222];
 UCHAR OemData[256];
} VBE_INFO_BLOCK;

typedef struct _VBE_FP_INFO
{
  USHORT HSize;
 USHORT VSize;
 USHORT FPType;
 UCHAR RedBPP;
 UCHAR GreenBPP;
 UCHAR BlueBPP;
 UCHAR ReservedBPP;
 ULONG RsvdOffScrnMemSize;
 ULONG RsvdOffScrnMEmPtr;
 UCHAR Reserved[14];
} VBE_FP_INFO;

typedef struct _VESA_MODE_INFO_BLOCK
{

  USHORT ModeAttributes;
 UCHAR WinAAttributes;
 UCHAR WinBAttributes;
 USHORT WinGranularity;
 USHORT WinSize;
 USHORT WinASegment;
 USHORT WinBSegment;
 ULONG WinFuncPtr;
 USHORT BytesPerScanLine;


  USHORT XResolution;
 USHORT YResolution;
 UCHAR XCharSize;
 UCHAR YCharSize;
 UCHAR NumberOfPlanes;
 UCHAR BitsPerPixel;
 UCHAR NumberOfBanks;
 UCHAR MemoryModel;
 UCHAR BankSize;
 UCHAR NumberOfImagePages;
 UCHAR ReservedForPageFunction;


 UCHAR RedMaskSize;
 UCHAR RedFieldPosition;
 UCHAR GreenMaskSize;
 UCHAR GreenFieldPosition;
 UCHAR BlueMaskSize;
 UCHAR BlueFieldPosition;
 UCHAR RsvdMaskSize;
 UCHAR RsvdFieldPosition;
 UCHAR DirectColorModeInfo;


 ULONG PhysBasePtr;
 ULONG Reserved_1;
 USHORT Reserved_2;


 USHORT LinBytesPerScanLine;
 UCHAR BnkNumberOfImagePages;
 UCHAR LinNumberOfImagPages;
 UCHAR LinRedMaskSize;
 UCHAR LinRedFieldPosition;
 UCHAR LinGreenMaskSize;
 UCHAR LinGreenFieldPosition;
 UCHAR LinBlueMaskSize;
 UCHAR LinBlueFieldPosition;
 UCHAR LinRsvdMaskSize;
 UCHAR LinRsvdFieldPosition;
 ULONG MaxPixelClock;
 UCHAR Reserved;
} VESA_MODE_INFO_BLOCK;
# 7009 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ASIC_TRANSMITTER_INFO
{
 USHORT usTransmitterObjId;
 USHORT usSupportDevice;
  UCHAR ucTransmitterCmdTblId;
 UCHAR ucConfig;
 UCHAR ucEncoderID;
 UCHAR ucOptionEncoderID;
 UCHAR uc2ndEncoderID;
 UCHAR ucReserved;
}ASIC_TRANSMITTER_INFO;
# 7031 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ASIC_ENCODER_INFO
{
 UCHAR ucEncoderID;
 UCHAR ucEncoderConfig;
  USHORT usEncoderCmdTblId;
}ASIC_ENCODER_INFO;

typedef struct _ATOM_DISP_OUT_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
 USHORT ptrTransmitterInfo;
 USHORT ptrEncoderInfo;
 ASIC_TRANSMITTER_INFO asTransmitterInfo[1];
 ASIC_ENCODER_INFO asEncoderInfo[1];
}ATOM_DISP_OUT_INFO;

typedef struct _ATOM_DISP_OUT_INFO_V2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
 USHORT ptrTransmitterInfo;
 USHORT ptrEncoderInfo;
  USHORT ptrMainCallParserFar;
 ASIC_TRANSMITTER_INFO asTransmitterInfo[1];
 ASIC_ENCODER_INFO asEncoderInfo[1];
}ATOM_DISP_OUT_INFO_V2;


typedef struct _ATOM_DISP_CLOCK_ID {
  UCHAR ucPpllId;
  UCHAR ucPpllAttribute;
}ATOM_DISP_CLOCK_ID;







typedef struct _ASIC_TRANSMITTER_INFO_V2
{
 USHORT usTransmitterObjId;
 USHORT usDispClkIdOffset;
  UCHAR ucTransmitterCmdTblId;
 UCHAR ucConfig;
 UCHAR ucEncoderID;
 UCHAR ucOptionEncoderID;
 UCHAR uc2ndEncoderID;
 UCHAR ucReserved;
}ASIC_TRANSMITTER_INFO_V2;

typedef struct _ATOM_DISP_OUT_INFO_V3
{
  ATOM_COMMON_TABLE_HEADER sHeader;
 USHORT ptrTransmitterInfo;
 USHORT ptrEncoderInfo;
  USHORT ptrMainCallParserFar;
  USHORT usReserved;
  UCHAR ucDCERevision;
  UCHAR ucMaxDispEngineNum;
  UCHAR ucMaxActiveDispEngineNum;
  UCHAR ucMaxPPLLNum;
  UCHAR ucCoreRefClkSource;
  UCHAR ucDispCaps;
  UCHAR ucReserved[2];
  ASIC_TRANSMITTER_INFO_V2 asTransmitterInfo[1];
}ATOM_DISP_OUT_INFO_V3;





typedef enum CORE_REF_CLK_SOURCE{
  CLOCK_SRC_XTALIN=0,
  CLOCK_SRC_XO_IN=1,
  CLOCK_SRC_XO_IN2=2,
}CORE_REF_CLK_SOURCE;


typedef struct _ATOM_DISPLAY_DEVICE_PRIORITY_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
 USHORT asDevicePriority[16];
}ATOM_DISPLAY_DEVICE_PRIORITY_INFO;


typedef struct _PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS
{
 USHORT lpAuxRequest;
 USHORT lpDataOut;
 UCHAR ucChannelID;
 union
 {
  UCHAR ucReplyStatus;
 UCHAR ucDelay;
 };
  UCHAR ucDataOutLen;
 UCHAR ucReserved;
}PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS;


typedef struct _PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS_V2
{
 USHORT lpAuxRequest;
 USHORT lpDataOut;
 UCHAR ucChannelID;
 union
 {
  UCHAR ucReplyStatus;
 UCHAR ucDelay;
 };
  UCHAR ucDataOutLen;
 UCHAR ucHPD_ID;
}PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS_V2;





typedef struct _DP_ENCODER_SERVICE_PARAMETERS
{
 USHORT ucLinkClock;
 union
 {
 UCHAR ucConfig;
 UCHAR ucI2cId;
 };
 UCHAR ucAction;
 UCHAR ucStatus;
 UCHAR ucLaneNum;
 UCHAR ucReserved[2];
}DP_ENCODER_SERVICE_PARAMETERS;
# 7185 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DP_ENCODER_SERVICE_PARAMETERS_V2
{
 USHORT usExtEncoderObjId;
  UCHAR ucAuxId;
  UCHAR ucAction;
  UCHAR ucSinkType;
  UCHAR ucHPDId;
 UCHAR ucReserved[2];
}DP_ENCODER_SERVICE_PARAMETERS_V2;

typedef struct _DP_ENCODER_SERVICE_PS_ALLOCATION_V2
{
  DP_ENCODER_SERVICE_PARAMETERS_V2 asDPServiceParam;
  PROCESS_AUX_CHANNEL_TRANSACTION_PARAMETERS_V2 asAuxParam;
}DP_ENCODER_SERVICE_PS_ALLOCATION_V2;
# 7221 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS
{
 UCHAR ucI2CSpeed;
  union
 {
   UCHAR ucRegIndex;
   UCHAR ucStatus;
 };
 USHORT lpI2CDataOut;
  UCHAR ucFlag;
  UCHAR ucTransBytes;
  UCHAR ucSlaveAddr;
  UCHAR ucLineNumber;
}PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS;
# 7246 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_HW_MISC_OPERATION_INPUT_PARAMETER_V1_1
{
  UCHAR ucCmd;
  UCHAR ucReserved[3];
  ULONG ulReserved;
}ATOM_HW_MISC_OPERATION_INPUT_PARAMETER_V1_1;

typedef struct _ATOM_HW_MISC_OPERATION_OUTPUT_PARAMETER_V1_1
{
  UCHAR ucReturnCode;
  UCHAR ucReserved[3];
  ULONG ulReserved;
}ATOM_HW_MISC_OPERATION_OUTPUT_PARAMETER_V1_1;
# 7268 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_HW_MISC_OPERATION_PS_ALLOCATION
{
 ATOM_HW_MISC_OPERATION_INPUT_PARAMETER_V1_1 sInput_Output;
 PROCESS_I2C_CHANNEL_TRANSACTION_PARAMETERS sReserved;
}ATOM_HW_MISC_OPERATION_PS_ALLOCATION;



typedef struct _SET_HWBLOCK_INSTANCE_PARAMETER_V2
{
   UCHAR ucHWBlkInst;
   UCHAR ucReserved[3];
}SET_HWBLOCK_INSTANCE_PARAMETER_V2;
# 7297 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _DIG_TRANSMITTER_INFO_HEADER_V3_1{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDPVsPreEmphSettingOffset;
  USHORT usPhyAnalogRegListOffset;
  USHORT usPhyAnalogSettingOffset;
  USHORT usPhyPllRegListOffset;
  USHORT usPhyPllSettingOffset;
}DIG_TRANSMITTER_INFO_HEADER_V3_1;

typedef struct _DIG_TRANSMITTER_INFO_HEADER_V3_2{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDPVsPreEmphSettingOffset;
  USHORT usPhyAnalogRegListOffset;
  USHORT usPhyAnalogSettingOffset;
  USHORT usPhyPllRegListOffset;
  USHORT usPhyPllSettingOffset;
  USHORT usDPSSRegListOffset;
  USHORT usDPSSSettingOffset;
}DIG_TRANSMITTER_INFO_HEADER_V3_2;

typedef struct _CLOCK_CONDITION_REGESTER_INFO{
  USHORT usRegisterIndex;
  UCHAR ucStartBit;
  UCHAR ucEndBit;
}CLOCK_CONDITION_REGESTER_INFO;

typedef struct _CLOCK_CONDITION_SETTING_ENTRY{
  USHORT usMaxClockFreq;
  UCHAR ucEncodeMode;
  UCHAR ucPhySel;
  ULONG ulAnalogSetting[1];
}CLOCK_CONDITION_SETTING_ENTRY;

typedef struct _CLOCK_CONDITION_SETTING_INFO{
  USHORT usEntrySize;
  CLOCK_CONDITION_SETTING_ENTRY asClkCondSettingEntry[1];
}CLOCK_CONDITION_SETTING_INFO;

typedef struct _PHY_CONDITION_REG_VAL{
  ULONG ulCondition;
  ULONG ulRegVal;
}PHY_CONDITION_REG_VAL;

typedef struct _PHY_CONDITION_REG_VAL_V2{
  ULONG ulCondition;
  UCHAR ucCondition2;
  ULONG ulRegVal;
}PHY_CONDITION_REG_VAL_V2;

typedef struct _PHY_CONDITION_REG_INFO{
  USHORT usRegIndex;
  USHORT usSize;
  PHY_CONDITION_REG_VAL asRegVal[1];
}PHY_CONDITION_REG_INFO;

typedef struct _PHY_CONDITION_REG_INFO_V2{
  USHORT usRegIndex;
  USHORT usSize;
  PHY_CONDITION_REG_VAL_V2 asRegVal[1];
}PHY_CONDITION_REG_INFO_V2;

typedef struct _PHY_ANALOG_SETTING_INFO{
  UCHAR ucEncodeMode;
  UCHAR ucPhySel;
  USHORT usSize;
  PHY_CONDITION_REG_INFO asAnalogSetting[1];
}PHY_ANALOG_SETTING_INFO;

typedef struct _PHY_ANALOG_SETTING_INFO_V2{
  UCHAR ucEncodeMode;
  UCHAR ucPhySel;
  USHORT usSize;
  PHY_CONDITION_REG_INFO_V2 asAnalogSetting[1];
}PHY_ANALOG_SETTING_INFO_V2;

typedef struct _GFX_HAVESTING_PARAMETERS {
  UCHAR ucGfxBlkId;
  UCHAR ucReserved;
  UCHAR ucActiveUnitNumPerSH;
  UCHAR ucMaxUnitNumPerSH;
} GFX_HAVESTING_PARAMETERS;
# 7411 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_DAC_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usMaxFrequency;
  USHORT usReserved;
}ATOM_DAC_INFO;


typedef struct _COMPASSIONATE_DATA
{
  ATOM_COMMON_TABLE_HEADER sHeader;


  UCHAR ucDAC1_BG_Adjustment;
  UCHAR ucDAC1_DAC_Adjustment;
  USHORT usDAC1_FORCE_Data;

  UCHAR ucDAC2_CRT2_BG_Adjustment;
  UCHAR ucDAC2_CRT2_DAC_Adjustment;
  USHORT usDAC2_CRT2_FORCE_Data;
  USHORT usDAC2_CRT2_MUX_RegisterIndex;
  UCHAR ucDAC2_CRT2_MUX_RegisterInfo;
  UCHAR ucDAC2_NTSC_BG_Adjustment;
  UCHAR ucDAC2_NTSC_DAC_Adjustment;
  USHORT usDAC2_TV1_FORCE_Data;
  USHORT usDAC2_TV1_MUX_RegisterIndex;
  UCHAR ucDAC2_TV1_MUX_RegisterInfo;
  UCHAR ucDAC2_CV_BG_Adjustment;
  UCHAR ucDAC2_CV_DAC_Adjustment;
  USHORT usDAC2_CV_FORCE_Data;
  USHORT usDAC2_CV_MUX_RegisterIndex;
  UCHAR ucDAC2_CV_MUX_RegisterInfo;
  UCHAR ucDAC2_PAL_BG_Adjustment;
  UCHAR ucDAC2_PAL_DAC_Adjustment;
  USHORT usDAC2_TV2_FORCE_Data;
}COMPASSIONATE_DATA;
# 7472 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_CONNECTOR_INFO
{




  UCHAR bfAssociatedDAC:4;
  UCHAR bfConnectorType:4;

}ATOM_CONNECTOR_INFO;

typedef union _ATOM_CONNECTOR_INFO_ACCESS
{
  ATOM_CONNECTOR_INFO sbfAccess;
  UCHAR ucAccess;
}ATOM_CONNECTOR_INFO_ACCESS;

typedef struct _ATOM_CONNECTOR_INFO_I2C
{
  ATOM_CONNECTOR_INFO_ACCESS sucConnectorInfo;
  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;
}ATOM_CONNECTOR_INFO_I2C;


typedef struct _ATOM_SUPPORTED_DEVICES_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDeviceSupport;
  ATOM_CONNECTOR_INFO_I2C asConnInfo[(0x00000009 +1)];
}ATOM_SUPPORTED_DEVICES_INFO;



typedef struct _ATOM_CONNECTOR_INC_SRC_BITMAP
{
  UCHAR ucIntSrcBitmap;
}ATOM_CONNECTOR_INC_SRC_BITMAP;

typedef struct _ATOM_SUPPORTED_DEVICES_INFO_2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDeviceSupport;
  ATOM_CONNECTOR_INFO_I2C asConnInfo[(0x00000009 +1)];
  ATOM_CONNECTOR_INC_SRC_BITMAP asIntSrcInfo[(0x00000009 +1)];
}ATOM_SUPPORTED_DEVICES_INFO_2;

typedef struct _ATOM_SUPPORTED_DEVICES_INFO_2d1
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usDeviceSupport;
  ATOM_CONNECTOR_INFO_I2C asConnInfo[(0x0000000F +1)];
  ATOM_CONNECTOR_INC_SRC_BITMAP asIntSrcInfo[(0x0000000F +1)];
}ATOM_SUPPORTED_DEVICES_INFO_2d1;





typedef struct _ATOM_MISC_CONTROL_INFO
{
   USHORT usFrequency;
   UCHAR ucPLL_ChargePump;
   UCHAR ucPLL_DutyCycle;
   UCHAR ucPLL_VCO_Gain;
   UCHAR ucPLL_VoltageSwing;
}ATOM_MISC_CONTROL_INFO;




typedef struct _ATOM_TMDS_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usMaxFrequency;
  ATOM_MISC_CONTROL_INFO asMiscInfo[4];
}ATOM_TMDS_INFO;


typedef struct _ATOM_ENCODER_ANALOG_ATTRIBUTE
{
  UCHAR ucTVStandard;
  UCHAR ucPadding[1];
}ATOM_ENCODER_ANALOG_ATTRIBUTE;

typedef struct _ATOM_ENCODER_DIGITAL_ATTRIBUTE
{
  UCHAR ucAttribute;
  UCHAR ucPadding[1];
}ATOM_ENCODER_DIGITAL_ATTRIBUTE;

typedef union _ATOM_ENCODER_ATTRIBUTE
{
  ATOM_ENCODER_ANALOG_ATTRIBUTE sAlgAttrib;
  ATOM_ENCODER_DIGITAL_ATTRIBUTE sDigAttrib;
}ATOM_ENCODER_ATTRIBUTE;


typedef struct _DVO_ENCODER_CONTROL_PARAMETERS
{
  USHORT usPixelClock;
  USHORT usEncoderID;
  UCHAR ucDeviceType;
  UCHAR ucAction;
  ATOM_ENCODER_ATTRIBUTE usDevAttr;
}DVO_ENCODER_CONTROL_PARAMETERS;

typedef struct _DVO_ENCODER_CONTROL_PS_ALLOCATION
{
  DVO_ENCODER_CONTROL_PARAMETERS sDVOEncoder;
  WRITE_ONE_BYTE_HW_I2C_DATA_PARAMETERS sReserved;
}DVO_ENCODER_CONTROL_PS_ALLOCATION;
# 7593 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_XTMDS_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  USHORT usSingleLinkMaxFrequency;
  ATOM_I2C_ID_CONFIG_ACCESS sucI2cId;
  UCHAR ucXtransimitterID;
  UCHAR ucSupportedLink;
  UCHAR ucSequnceAlterID;

  UCHAR ucMasterAddress;
  UCHAR ucSlaveAddress;
}ATOM_XTMDS_INFO;

typedef struct _DFP_DPMS_STATUS_CHANGE_PARAMETERS
{
  UCHAR ucEnable;
  UCHAR ucDevice;
  UCHAR ucPadding[2];
}DFP_DPMS_STATUS_CHANGE_PARAMETERS;
# 7671 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_POWERMODE_INFO
{
  ULONG ulMiscInfo;
  ULONG ulReserved1;
  ULONG ulReserved2;
  USHORT usEngineClock;
  USHORT usMemoryClock;
  UCHAR ucVoltageDropIndex;
  UCHAR ucSelectedPanel_RefreshRate;
  UCHAR ucMinTemperature;
  UCHAR ucMaxTemperature;
  UCHAR ucNumPciELanes;
}ATOM_POWERMODE_INFO;



typedef struct _ATOM_POWERMODE_INFO_V2
{
  ULONG ulMiscInfo;
  ULONG ulMiscInfo2;
  ULONG ulEngineClock;
  ULONG ulMemoryClock;
  UCHAR ucVoltageDropIndex;
  UCHAR ucSelectedPanel_RefreshRate;
  UCHAR ucMinTemperature;
  UCHAR ucMaxTemperature;
  UCHAR ucNumPciELanes;
}ATOM_POWERMODE_INFO_V2;



typedef struct _ATOM_POWERMODE_INFO_V3
{
  ULONG ulMiscInfo;
  ULONG ulMiscInfo2;
  ULONG ulEngineClock;
  ULONG ulMemoryClock;
  UCHAR ucVoltageDropIndex;
  UCHAR ucSelectedPanel_RefreshRate;
  UCHAR ucMinTemperature;
  UCHAR ucMaxTemperature;
  UCHAR ucNumPciELanes;
  UCHAR ucVDDCI_VoltageDropIndex;
}ATOM_POWERMODE_INFO_V3;
# 7731 "drivers/gpu/drm/radeon/atombios.h"
typedef struct _ATOM_POWERPLAY_INFO
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucOverdriveThermalController;
  UCHAR ucOverdriveI2cLine;
  UCHAR ucOverdriveIntBitmap;
  UCHAR ucOverdriveControllerAddress;
  UCHAR ucSizeOfPowerModeEntry;
  UCHAR ucNumOfPowerModeEntries;
  ATOM_POWERMODE_INFO asPowerPlayInfo[8];
}ATOM_POWERPLAY_INFO;

typedef struct _ATOM_POWERPLAY_INFO_V2
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucOverdriveThermalController;
  UCHAR ucOverdriveI2cLine;
  UCHAR ucOverdriveIntBitmap;
  UCHAR ucOverdriveControllerAddress;
  UCHAR ucSizeOfPowerModeEntry;
  UCHAR ucNumOfPowerModeEntries;
  ATOM_POWERMODE_INFO_V2 asPowerPlayInfo[8];
}ATOM_POWERPLAY_INFO_V2;

typedef struct _ATOM_POWERPLAY_INFO_V3
{
  ATOM_COMMON_TABLE_HEADER sHeader;
  UCHAR ucOverdriveThermalController;
  UCHAR ucOverdriveI2cLine;
  UCHAR ucOverdriveIntBitmap;
  UCHAR ucOverdriveControllerAddress;
  UCHAR ucSizeOfPowerModeEntry;
  UCHAR ucNumOfPowerModeEntries;
  ATOM_POWERMODE_INFO_V3 asPowerPlayInfo[8];
}ATOM_POWERPLAY_INFO_V3;
# 7912 "drivers/gpu/drm/radeon/atombios.h"
#pragma pack()




#pragma pack(1)

typedef struct {
  ULONG Signature;
  ULONG TableLength;
  UCHAR Revision;
  UCHAR Checksum;
  UCHAR OemId[6];
  UCHAR OemTableId[8];
  ULONG OemRevision;
  ULONG CreatorId;
  ULONG CreatorRevision;
} AMD_ACPI_DESCRIPTION_HEADER;
# 7944 "drivers/gpu/drm/radeon/atombios.h"
typedef struct {
  AMD_ACPI_DESCRIPTION_HEADER SHeader;
  UCHAR TableUUID[16];
  ULONG VBIOSImageOffset;
  ULONG Lib1ImageOffset;
  ULONG Reserved[4];
}UEFI_ACPI_VFCT;

typedef struct {
  ULONG PCIBus;
  ULONG PCIDevice;
  ULONG PCIFunction;
  USHORT VendorID;
  USHORT DeviceID;
  USHORT SSVID;
  USHORT SSID;
  ULONG Revision;
  ULONG ImageLength;
}VFCT_IMAGE_HEADER;


typedef struct {
  VFCT_IMAGE_HEADER VbiosHeader;
  UCHAR VbiosContent[1];
}GOP_VBIOS_CONTENT;

typedef struct {
  VFCT_IMAGE_HEADER Lib1Header;
  UCHAR Lib1Content[1];
}GOP_LIB1_CONTENT;

#pragma pack()




# 1 "drivers/gpu/drm/radeon/pptable.h" 1
# 26 "drivers/gpu/drm/radeon/pptable.h"
#pragma pack(1)

typedef struct _ATOM_PPLIB_THERMALCONTROLLER

{
    UCHAR ucType;
    UCHAR ucI2cLine;
    UCHAR ucI2cAddress;
    UCHAR ucFanParameters;
    UCHAR ucFanMinRPM;
    UCHAR ucFanMaxRPM;
    UCHAR ucReserved;
    UCHAR ucFlags;
} ATOM_PPLIB_THERMALCONTROLLER;
# 74 "drivers/gpu/drm/radeon/pptable.h"
typedef struct _ATOM_PPLIB_STATE
{
    UCHAR ucNonClockStateIndex;
    UCHAR ucClockStateIndices[1];
} ATOM_PPLIB_STATE;


typedef struct _ATOM_PPLIB_FANTABLE
{
    UCHAR ucFanTableFormat;
    UCHAR ucTHyst;
    USHORT usTMin;
    USHORT usTMed;
    USHORT usTHigh;
    USHORT usPWMMin;
    USHORT usPWMMed;
    USHORT usPWMHigh;
} ATOM_PPLIB_FANTABLE;

typedef struct _ATOM_PPLIB_FANTABLE2
{
    ATOM_PPLIB_FANTABLE basicTable;
    USHORT usTMax;
} ATOM_PPLIB_FANTABLE2;

typedef struct _ATOM_PPLIB_FANTABLE3
{
 ATOM_PPLIB_FANTABLE2 basicTable2;
 UCHAR ucFanControlMode;
 USHORT usFanPWMMax;
 USHORT usFanOutputSensitivity;
} ATOM_PPLIB_FANTABLE3;

typedef struct _ATOM_PPLIB_EXTENDEDHEADER
{
    USHORT usSize;
    ULONG ulMaxEngineClock;
    ULONG ulMaxMemoryClock;

    USHORT usVCETableOffset;
    USHORT usUVDTableOffset;
    USHORT usSAMUTableOffset;
    USHORT usPPMTableOffset;
    USHORT usACPTableOffset;
    USHORT usPowerTuneTableOffset;
} ATOM_PPLIB_EXTENDEDHEADER;
# 147 "drivers/gpu/drm/radeon/pptable.h"
typedef struct _ATOM_PPLIB_POWERPLAYTABLE
{
      ATOM_COMMON_TABLE_HEADER sHeader;

      UCHAR ucDataRevision;

      UCHAR ucNumStates;
      UCHAR ucStateEntrySize;
      UCHAR ucClockInfoSize;
      UCHAR ucNonClockSize;


      USHORT usStateArrayOffset;



      USHORT usClockInfoArrayOffset;


      USHORT usNonClockInfoArrayOffset;

      USHORT usBackbiasTime;
      USHORT usVoltageTime;
      USHORT usTableSize;

      ULONG ulPlatformCaps;

      ATOM_PPLIB_THERMALCONTROLLER sThermalController;

      USHORT usBootClockInfoOffset;
      USHORT usBootNonClockInfoOffset;

} ATOM_PPLIB_POWERPLAYTABLE;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE2
{
    ATOM_PPLIB_POWERPLAYTABLE basicTable;
    UCHAR ucNumCustomThermalPolicy;
    USHORT usCustomThermalPolicyArrayOffset;
}ATOM_PPLIB_POWERPLAYTABLE2, *LPATOM_PPLIB_POWERPLAYTABLE2;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE3
{
    ATOM_PPLIB_POWERPLAYTABLE2 basicTable2;
    USHORT usFormatID;
    USHORT usFanTableOffset;
    USHORT usExtendendedHeaderOffset;
} ATOM_PPLIB_POWERPLAYTABLE3, *LPATOM_PPLIB_POWERPLAYTABLE3;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE4
{
    ATOM_PPLIB_POWERPLAYTABLE3 basicTable3;
    ULONG ulGoldenPPID;
    ULONG ulGoldenRevision;
    USHORT usVddcDependencyOnSCLKOffset;
    USHORT usVddciDependencyOnMCLKOffset;
    USHORT usVddcDependencyOnMCLKOffset;
    USHORT usMaxClockVoltageOnDCOffset;
    USHORT usVddcPhaseShedLimitsTableOffset;
    USHORT usMvddDependencyOnMCLKOffset;
} ATOM_PPLIB_POWERPLAYTABLE4, *LPATOM_PPLIB_POWERPLAYTABLE4;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE5
{
    ATOM_PPLIB_POWERPLAYTABLE4 basicTable4;
    ULONG ulTDPLimit;
    ULONG ulNearTDPLimit;
    ULONG ulSQRampingThreshold;
    USHORT usCACLeakageTableOffset;
    ULONG ulCACLeakage;
    USHORT usTDPODLimit;
    USHORT usLoadLineSlope;
} ATOM_PPLIB_POWERPLAYTABLE5, *LPATOM_PPLIB_POWERPLAYTABLE5;
# 286 "drivers/gpu/drm/radeon/pptable.h"
typedef struct _ATOM_PPLIB_THERMAL_STATE
{
    UCHAR ucMinTemperature;
    UCHAR ucMaxTemperature;
    UCHAR ucThermalAction;
}ATOM_PPLIB_THERMAL_STATE, *LPATOM_PPLIB_THERMAL_STATE;






typedef struct _ATOM_PPLIB_NONCLOCK_INFO
{
      USHORT usClassification;
      UCHAR ucMinTemperature;
      UCHAR ucMaxTemperature;
      ULONG ulCapsAndSettings;
      UCHAR ucRequiredPower;
      USHORT usClassification2;
      ULONG ulVCLK;
      ULONG ulDCLK;
      UCHAR ucUnused[5];
} ATOM_PPLIB_NONCLOCK_INFO;




typedef struct _ATOM_PPLIB_R600_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR ucMemoryClockHigh;

      USHORT usVDDC;
      USHORT usUnused1;
      USHORT usUnused2;

      ULONG ulFlags;

} ATOM_PPLIB_R600_CLOCK_INFO;
# 338 "drivers/gpu/drm/radeon/pptable.h"
typedef struct _ATOM_PPLIB_RS780_CLOCK_INFO

{
      USHORT usLowEngineClockLow;
      UCHAR ucLowEngineClockHigh;
      USHORT usHighEngineClockLow;
      UCHAR ucHighEngineClockHigh;
      USHORT usMemoryClockLow;
      UCHAR ucMemoryClockHigh;
      UCHAR ucPadding;
      USHORT usVDDC;
      UCHAR ucMaxHTLinkWidth;
      UCHAR ucMinHTLinkWidth;
      USHORT usHTLinkFreq;
      ULONG ulFlags;
} ATOM_PPLIB_RS780_CLOCK_INFO;
# 368 "drivers/gpu/drm/radeon/pptable.h"
typedef struct _ATOM_PPLIB_EVERGREEN_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR ucMemoryClockHigh;

      USHORT usVDDC;
      USHORT usVDDCI;
      USHORT usUnused;

      ULONG ulFlags;

} ATOM_PPLIB_EVERGREEN_CLOCK_INFO;

typedef struct _ATOM_PPLIB_SI_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR ucMemoryClockHigh;

      USHORT usVDDC;
      USHORT usVDDCI;
      UCHAR ucPCIEGen;
      UCHAR ucUnused1;

      ULONG ulFlags;

} ATOM_PPLIB_SI_CLOCK_INFO;

typedef struct _ATOM_PPLIB_CI_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR ucMemoryClockHigh;

      UCHAR ucPCIEGen;
      USHORT usPCIELane;
} ATOM_PPLIB_CI_CLOCK_INFO;

typedef struct _ATOM_PPLIB_SUMO_CLOCK_INFO{
      USHORT usEngineClockLow;
      UCHAR ucEngineClockHigh;
      UCHAR vddcIndex;
      USHORT tdpLimit;

      USHORT rsv1;

      ULONG rsv2[2];
}ATOM_PPLIB_SUMO_CLOCK_INFO;

typedef struct _ATOM_PPLIB_STATE_V2
{


      UCHAR ucNumDPMLevels;


      UCHAR nonClockInfoIndex;



      UCHAR clockInfoIndex[1];
} ATOM_PPLIB_STATE_V2;

typedef struct _StateArray{

    UCHAR ucNumEntries;

    ATOM_PPLIB_STATE_V2 states[1];
}StateArray;


typedef struct _ClockInfoArray{

    UCHAR ucNumEntries;


    UCHAR ucEntrySize;

    UCHAR clockInfo[1];
}ClockInfoArray;

typedef struct _NonClockInfoArray{


    UCHAR ucNumEntries;

    UCHAR ucEntrySize;

    ATOM_PPLIB_NONCLOCK_INFO nonClockInfo[1];
}NonClockInfoArray;

typedef struct _ATOM_PPLIB_Clock_Voltage_Dependency_Record
{
    USHORT usClockLow;
    UCHAR ucClockHigh;
    USHORT usVoltage;
}ATOM_PPLIB_Clock_Voltage_Dependency_Record;

typedef struct _ATOM_PPLIB_Clock_Voltage_Dependency_Table
{
    UCHAR ucNumEntries;
    ATOM_PPLIB_Clock_Voltage_Dependency_Record entries[1];
}ATOM_PPLIB_Clock_Voltage_Dependency_Table;

typedef struct _ATOM_PPLIB_Clock_Voltage_Limit_Record
{
    USHORT usSclkLow;
    UCHAR ucSclkHigh;
    USHORT usMclkLow;
    UCHAR ucMclkHigh;
    USHORT usVddc;
    USHORT usVddci;
}ATOM_PPLIB_Clock_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_Clock_Voltage_Limit_Table
{
    UCHAR ucNumEntries;
    ATOM_PPLIB_Clock_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_Clock_Voltage_Limit_Table;

union _ATOM_PPLIB_CAC_Leakage_Record
{
    struct
    {
        USHORT usVddc;
        ULONG ulLeakageValue;

    };
    struct
     {
        USHORT usVddc1;
        USHORT usVddc2;
        USHORT usVddc3;
     };
};

typedef union _ATOM_PPLIB_CAC_Leakage_Record ATOM_PPLIB_CAC_Leakage_Record;

typedef struct _ATOM_PPLIB_CAC_Leakage_Table
{
    UCHAR ucNumEntries;
    ATOM_PPLIB_CAC_Leakage_Record entries[1];
}ATOM_PPLIB_CAC_Leakage_Table;

typedef struct _ATOM_PPLIB_PhaseSheddingLimits_Record
{
    USHORT usVoltage;
    USHORT usSclkLow;
    UCHAR ucSclkHigh;
    USHORT usMclkLow;
    UCHAR ucMclkHigh;
}ATOM_PPLIB_PhaseSheddingLimits_Record;

typedef struct _ATOM_PPLIB_PhaseSheddingLimits_Table
{
    UCHAR ucNumEntries;
    ATOM_PPLIB_PhaseSheddingLimits_Record entries[1];
}ATOM_PPLIB_PhaseSheddingLimits_Table;

typedef struct _VCEClockInfo{
    USHORT usEVClkLow;
    UCHAR ucEVClkHigh;
    USHORT usECClkLow;
    UCHAR ucECClkHigh;
}VCEClockInfo;

typedef struct _VCEClockInfoArray{
    UCHAR ucNumEntries;
    VCEClockInfo entries[1];
}VCEClockInfoArray;

typedef struct _ATOM_PPLIB_VCE_Clock_Voltage_Limit_Record
{
    USHORT usVoltage;
    UCHAR ucVCEClockInfoIndex;
}ATOM_PPLIB_VCE_Clock_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_VCE_Clock_Voltage_Limit_Table
{
    UCHAR numEntries;
    ATOM_PPLIB_VCE_Clock_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_VCE_Clock_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_VCE_State_Record
{
    UCHAR ucVCEClockInfoIndex;
    UCHAR ucClockInfoIndex;
}ATOM_PPLIB_VCE_State_Record;

typedef struct _ATOM_PPLIB_VCE_State_Table
{
    UCHAR numEntries;
    ATOM_PPLIB_VCE_State_Record entries[1];
}ATOM_PPLIB_VCE_State_Table;


typedef struct _ATOM_PPLIB_VCE_Table
{
      UCHAR revid;



}ATOM_PPLIB_VCE_Table;


typedef struct _UVDClockInfo{
    USHORT usVClkLow;
    UCHAR ucVClkHigh;
    USHORT usDClkLow;
    UCHAR ucDClkHigh;
}UVDClockInfo;

typedef struct _UVDClockInfoArray{
    UCHAR ucNumEntries;
    UVDClockInfo entries[1];
}UVDClockInfoArray;

typedef struct _ATOM_PPLIB_UVD_Clock_Voltage_Limit_Record
{
    USHORT usVoltage;
    UCHAR ucUVDClockInfoIndex;
}ATOM_PPLIB_UVD_Clock_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_UVD_Clock_Voltage_Limit_Table
{
    UCHAR numEntries;
    ATOM_PPLIB_UVD_Clock_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_UVD_Clock_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_UVD_Table
{
      UCHAR revid;


}ATOM_PPLIB_UVD_Table;

typedef struct _ATOM_PPLIB_SAMClk_Voltage_Limit_Record
{
      USHORT usVoltage;
      USHORT usSAMClockLow;
      UCHAR ucSAMClockHigh;
}ATOM_PPLIB_SAMClk_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_SAMClk_Voltage_Limit_Table{
    UCHAR numEntries;
    ATOM_PPLIB_SAMClk_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_SAMClk_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_SAMU_Table
{
      UCHAR revid;
      ATOM_PPLIB_SAMClk_Voltage_Limit_Table limits;
}ATOM_PPLIB_SAMU_Table;

typedef struct _ATOM_PPLIB_ACPClk_Voltage_Limit_Record
{
      USHORT usVoltage;
      USHORT usACPClockLow;
      UCHAR ucACPClockHigh;
}ATOM_PPLIB_ACPClk_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_ACPClk_Voltage_Limit_Table{
    UCHAR numEntries;
    ATOM_PPLIB_ACPClk_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_ACPClk_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_ACP_Table
{
      UCHAR revid;
      ATOM_PPLIB_ACPClk_Voltage_Limit_Table limits;
}ATOM_PPLIB_ACP_Table;

typedef struct _ATOM_PowerTune_Table{
    USHORT usTDP;
    USHORT usConfigurableTDP;
    USHORT usTDC;
    USHORT usBatteryPowerLimit;
    USHORT usSmallPowerLimit;
    USHORT usLowCACLeakage;
    USHORT usHighCACLeakage;
}ATOM_PowerTune_Table;

typedef struct _ATOM_PPLIB_POWERTUNE_Table
{
      UCHAR revid;
      ATOM_PowerTune_Table power_tune_table;
}ATOM_PPLIB_POWERTUNE_Table;

typedef struct _ATOM_PPLIB_POWERTUNE_Table_V1
{
      UCHAR revid;
      ATOM_PowerTune_Table power_tune_table;
      USHORT usMaximumPowerDeliveryLimit;
      USHORT usReserve[7];
} ATOM_PPLIB_POWERTUNE_Table_V1;



typedef struct _ATOM_PPLIB_PPM_Table
{
      UCHAR ucRevId;
      UCHAR ucPpmDesign;
      USHORT usCpuCoreNumber;
      ULONG ulPlatformTDP;
      ULONG ulSmallACPlatformTDP;
      ULONG ulPlatformTDC;
      ULONG ulSmallACPlatformTDC;
      ULONG ulApuTDP;
      ULONG ulDGpuTDP;
      ULONG ulDGpuUlvPower;
      ULONG ulTjmax;
} ATOM_PPLIB_PPM_Table;

#pragma pack()
# 7981 "drivers/gpu/drm/radeon/atombios.h" 2
# 166 "drivers/gpu/drm/radeon/atom.h" 2
# 1 "drivers/gpu/drm/radeon/ObjectID.h" 1
# 167 "drivers/gpu/drm/radeon/atom.h" 2
# 34 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/avivod.h" 1
# 35 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/cik.h" 1
# 26 "drivers/gpu/drm/radeon/cik.h"
struct radeon_device;

void cik_enter_rlc_safe_mode(struct radeon_device *rdev);
void cik_exit_rlc_safe_mode(struct radeon_device *rdev);
int ci_mc_load_microcode(struct radeon_device *rdev);
void cik_update_cg(struct radeon_device *rdev, u32 block, bool enable);
u32 cik_gpu_check_soft_reset(struct radeon_device *rdev);
void cik_init_cp_pg_table(struct radeon_device *rdev);
u32 cik_get_csb_size(struct radeon_device *rdev);
void cik_get_csb_buffer(struct radeon_device *rdev, volatile u32 *buffer);

int cik_sdma_resume(struct radeon_device *rdev);
void cik_sdma_enable(struct radeon_device *rdev, bool enable);
void cik_sdma_fini(struct radeon_device *rdev);
# 36 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/ni.h" 1
# 29 "drivers/gpu/drm/radeon/ni.h"
struct radeon_device;

void cayman_cp_int_cntl_setup(struct radeon_device *rdev,
         int ring, u32 cp_int_cntl);
void cayman_vm_decode_fault(struct radeon_device *rdev,
       u32 status, u32 addr);
u32 cayman_gpu_check_soft_reset(struct radeon_device *rdev);
# 37 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/rv770.h" 1
# 31 "drivers/gpu/drm/radeon/rv770.h"
struct radeon_device;
struct radeon_ps;

void rv770_set_clk_bypass_mode(struct radeon_device *rdev);

struct rv7xx_ps *rv770_get_ps(struct radeon_ps *rps);
struct rv7xx_power_info *rv770_get_pi(struct radeon_device *rdev);
# 38 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/evergreen.h" 1
# 29 "drivers/gpu/drm/radeon/evergreen.h"
struct evergreen_mc_save;
struct evergreen_power_info;
struct radeon_device;

bool evergreen_is_display_hung(struct radeon_device *rdev);
void evergreen_print_gpu_status_regs(struct radeon_device *rdev);
void evergreen_mc_stop(struct radeon_device *rdev, struct evergreen_mc_save *save);
void evergreen_mc_resume(struct radeon_device *rdev, struct evergreen_mc_save *save);
int evergreen_mc_wait_for_idle(struct radeon_device *rdev);
void evergreen_mc_program(struct radeon_device *rdev);
void evergreen_irq_suspend(struct radeon_device *rdev);
int evergreen_mc_init(struct radeon_device *rdev);
void evergreen_fix_pci_max_read_req_size(struct radeon_device *rdev);
void evergreen_pcie_gen2_enable(struct radeon_device *rdev);
void evergreen_program_aspm(struct radeon_device *rdev);
void sumo_rlc_fini(struct radeon_device *rdev);
int sumo_rlc_init(struct radeon_device *rdev);
void evergreen_gpu_pci_config_reset(struct radeon_device *rdev);
u32 evergreen_get_number_of_dram_channels(struct radeon_device *rdev);
u32 evergreen_gpu_check_soft_reset(struct radeon_device *rdev);
int evergreen_rlc_resume(struct radeon_device *rdev);
struct evergreen_power_info *evergreen_get_pi(struct radeon_device *rdev);
# 39 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/evergreen_blit_shaders.h" 1
# 28 "drivers/gpu/drm/radeon/evergreen_blit_shaders.h"
extern const u32 evergreen_ps[];
extern const u32 evergreen_vs[];
extern const u32 evergreen_default_state[];

extern const u32 evergreen_ps_size, evergreen_vs_size;
extern const u32 evergreen_default_size;
# 40 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/evergreen_reg.h" 1
# 41 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/evergreend.h" 1
# 42 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/radeon.h" 1
# 63 "drivers/gpu/drm/radeon/radeon.h"
# 1 "./include/linux/agp_backend.h" 1
# 35 "./include/linux/agp_backend.h"
enum chipset_type {
 NOT_SUPPORTED,
 SUPPORTED,
};

struct agp_version {
 u16 major;
 u16 minor;
};

struct agp_kern_info {
 struct agp_version version;
 struct pci_dev *device;
 enum chipset_type chipset;
 unsigned long mode;
 unsigned long aper_base;
 size_t aper_size;
 int max_memory;
 int current_memory;
 bool cant_use_aperture;
 unsigned long page_mask;
 const struct vm_operations_struct *vm_ops;
};
# 67 "./include/linux/agp_backend.h"
struct agp_bridge_data;

struct agp_memory {
 struct agp_memory *next;
 struct agp_memory *prev;
 struct agp_bridge_data *bridge;
 struct page **pages;
 size_t page_count;
 int key;
 int num_scratch_pages;
 off_t pg_start;
 u32 type;
 u32 physical;
 bool is_bound;
 bool is_flushed;

 struct list_head mapped_list;

 struct scatterlist *sg_list;
 int num_sg;
};







extern struct agp_bridge_data *agp_bridge;
extern struct list_head agp_bridges;

extern struct agp_bridge_data *(*agp_find_bridge)(struct pci_dev *);

extern void agp_free_memory(struct agp_memory *);
extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);
extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);
extern int agp_bind_memory(struct agp_memory *, off_t);
extern int agp_unbind_memory(struct agp_memory *);
extern void agp_enable(struct agp_bridge_data *, u32);
extern struct agp_bridge_data *agp_backend_acquire(struct pci_dev *);
extern void agp_backend_release(struct agp_bridge_data *);
# 64 "drivers/gpu/drm/radeon/radeon.h" 2




# 1 "./include/linux/interval_tree.h" 1






struct interval_tree_node {
 struct rb_node rb;
 unsigned long start;
 unsigned long last;
 unsigned long __subtree_last;
};

extern void
interval_tree_insert(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern void
interval_tree_remove(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern struct interval_tree_node *
interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);

extern struct interval_tree_node *
interval_tree_iter_next(struct interval_tree_node *node,
   unsigned long start, unsigned long last);
# 69 "drivers/gpu/drm/radeon/radeon.h" 2
# 1 "./include/linux/hashtable.h" 1
# 34 "./include/linux/hashtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hash_init(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  ((&ht[i])->first = ((void *)0));
}
# 76 "./include/linux/hashtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hash_hashed(struct hlist_node *node)
{
 return !hlist_unhashed(node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __hash_empty(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  if (!hlist_empty(&ht[i]))
   return false;

 return true;
}
# 105 "./include/linux/hashtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash_del(struct hlist_node *node)
{
 hlist_del_init(node);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash_del_rcu(struct hlist_node *node)
{
 hlist_del_init_rcu(node);
}
# 70 "drivers/gpu/drm/radeon/radeon.h" 2
# 1 "./include/linux/dma-fence.h" 1
# 25 "./include/linux/dma-fence.h"
struct dma_fence;
struct dma_fence_ops;
struct dma_fence_cb;
# 65 "./include/linux/dma-fence.h"
struct dma_fence {
 spinlock_t *lock;
 const struct dma_fence_ops *ops;
# 84 "./include/linux/dma-fence.h"
 union {
  struct list_head cb_list;

  ktime_t timestamp;

  struct callback_head rcu;
 };
 u64 context;
 u64 seqno;
 unsigned long flags;
 struct kref refcount;
 int error;
};

enum dma_fence_flag_bits {
 DMA_FENCE_FLAG_SIGNALED_BIT,
 DMA_FENCE_FLAG_TIMESTAMP_BIT,
 DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT,
 DMA_FENCE_FLAG_USER_BITS,
};

typedef void (*dma_fence_func_t)(struct dma_fence *fence,
     struct dma_fence_cb *cb);
# 116 "./include/linux/dma-fence.h"
struct dma_fence_cb {
 struct list_head node;
 dma_fence_func_t func;
};





struct dma_fence_ops {






 bool use_64bit_seqno;
# 143 "./include/linux/dma-fence.h"
 const char * (*get_driver_name)(struct dma_fence *fence);
# 155 "./include/linux/dma-fence.h"
 const char * (*get_timeline_name)(struct dma_fence *fence);
# 192 "./include/linux/dma-fence.h"
 bool (*enable_signaling)(struct dma_fence *fence);
# 209 "./include/linux/dma-fence.h"
 bool (*signaled)(struct dma_fence *fence);
# 231 "./include/linux/dma-fence.h"
 signed long (*wait)(struct dma_fence *fence,
       bool intr, signed long timeout);
# 242 "./include/linux/dma-fence.h"
 void (*release)(struct dma_fence *fence);
# 252 "./include/linux/dma-fence.h"
 void (*fence_value_str)(struct dma_fence *fence, char *str, int size);
# 262 "./include/linux/dma-fence.h"
 void (*timeline_value_str)(struct dma_fence *fence,
       char *str, int size);
};

void dma_fence_init(struct dma_fence *fence, const struct dma_fence_ops *ops,
      spinlock_t *lock, u64 context, u64 seqno);

void dma_fence_release(struct kref *kref);
void dma_fence_free(struct dma_fence *fence);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_fence_put(struct dma_fence *fence)
{
 if (fence)
  kref_put(&fence->refcount, dma_fence_release);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *dma_fence_get(struct dma_fence *fence)
{
 if (fence)
  kref_get(&fence->refcount);
 return fence;
}
# 302 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *dma_fence_get_rcu(struct dma_fence *fence)
{
 if (kref_get_unless_zero(&fence->refcount))
  return fence;
 else
  return ((void *)0);
}
# 326 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *
dma_fence_get_rcu_safe(struct dma_fence **fencep)
{
 do {
  struct dma_fence *fence;

  fence = ({ typeof(*(*fencep)) *________p1 = (typeof(*(*fencep)) *)({ do { extern void __compiletime_assert_265(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*fencep)) == sizeof(char) || sizeof((*fencep)) == sizeof(short) || sizeof((*fencep)) == sizeof(int) || sizeof((*fencep)) == sizeof(long)) || sizeof((*fencep)) == sizeof(long long))) __compiletime_assert_265(); } while (0); (*(const volatile typeof( _Generic(((*fencep)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*fencep)))) *)&((*fencep))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(*fencep)) *)(________p1)); });
  if (!fence)
   return ((void *)0);

  if (!dma_fence_get_rcu(fence))
   continue;
# 353 "./include/linux/dma-fence.h"
  if (fence == ({ typeof(*(*fencep)) *_________p1 = (typeof(*(*fencep)) *)({ do { extern void __compiletime_assert_266(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*fencep)) == sizeof(char) || sizeof((*fencep)) == sizeof(short) || sizeof((*fencep)) == sizeof(int) || sizeof((*fencep)) == sizeof(long)) || sizeof((*fencep)) == sizeof(long long))) __compiletime_assert_266(); } while (0); (*(const volatile typeof( _Generic(((*fencep)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*fencep)))) *)&((*fencep))); }); ; ((typeof(*(*fencep)) *)(_________p1)); }))
   return (fence);

  dma_fence_put(fence);
 } while (1);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_fence_begin_signalling(void)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_fence_end_signalling(bool cookie) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dma_fence_might_wait(void) {}


int dma_fence_signal(struct dma_fence *fence);
int dma_fence_signal_locked(struct dma_fence *fence);
int dma_fence_signal_timestamp(struct dma_fence *fence, ktime_t timestamp);
int dma_fence_signal_timestamp_locked(struct dma_fence *fence,
          ktime_t timestamp);
signed long dma_fence_default_wait(struct dma_fence *fence,
       bool intr, signed long timeout);
int dma_fence_add_callback(struct dma_fence *fence,
      struct dma_fence_cb *cb,
      dma_fence_func_t func);
bool dma_fence_remove_callback(struct dma_fence *fence,
          struct dma_fence_cb *cb);
void dma_fence_enable_sw_signaling(struct dma_fence *fence);
# 401 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
dma_fence_is_signaled_locked(struct dma_fence *fence)
{
 if (arch_test_bit(DMA_FENCE_FLAG_SIGNALED_BIT, &fence->flags))
  return true;

 if (fence->ops->signaled && fence->ops->signaled(fence)) {
  dma_fence_signal_locked(fence);
  return true;
 }

 return false;
}
# 431 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
dma_fence_is_signaled(struct dma_fence *fence)
{
 if (arch_test_bit(DMA_FENCE_FLAG_SIGNALED_BIT, &fence->flags))
  return true;

 if (fence->ops->signaled && fence->ops->signaled(fence)) {
  dma_fence_signal(fence);
  return true;
 }

 return false;
}
# 454 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __dma_fence_is_later(u64 f1, u64 f2,
     const struct dma_fence_ops *ops)
{




 if (ops->use_64bit_seqno)
  return f1 > f2;

 return (int)(((u32)((f1) & 0xffffffff)) - ((u32)((f2) & 0xffffffff))) > 0;
}
# 475 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_fence_is_later(struct dma_fence *f1,
          struct dma_fence *f2)
{
 if (({ int __ret_warn_on = !!(f1->context != f2->context); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/dma-fence.h"), "i" (478), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;

 return __dma_fence_is_later(f1->seqno, f2->seqno, f1->ops);
}
# 493 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *dma_fence_later(struct dma_fence *f1,
      struct dma_fence *f2)
{
 if (({ int __ret_warn_on = !!(f1->context != f2->context); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/dma-fence.h"), "i" (496), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return ((void *)0);






 if (dma_fence_is_later(f1, f2))
  return dma_fence_is_signaled(f1) ? ((void *)0) : f1;
 else
  return dma_fence_is_signaled(f2) ? ((void *)0) : f2;
}
# 524 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_fence_get_status_locked(struct dma_fence *fence)
{
 if (dma_fence_is_signaled_locked(fence))
  return fence->error ?: 1;
 else
  return 0;
}

int dma_fence_get_status(struct dma_fence *fence);
# 545 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_fence_set_error(struct dma_fence *fence,
           int error)
{
 ({ int __ret_warn_on = !!(arch_test_bit(DMA_FENCE_FLAG_SIGNALED_BIT, &fence->flags)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/dma-fence.h"), "i" (548), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(error >= 0 || error < -4095); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/dma-fence.h"), "i" (549), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 fence->error = error;
}

signed long dma_fence_wait_timeout(struct dma_fence *,
       bool intr, signed long timeout);
signed long dma_fence_wait_any_timeout(struct dma_fence **fences,
           uint32_t count,
           bool intr, signed long timeout,
           uint32_t *idx);
# 576 "./include/linux/dma-fence.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) signed long dma_fence_wait(struct dma_fence *fence, bool intr)
{
 signed long ret;





 ret = dma_fence_wait_timeout(fence, intr, ((long)(~0UL >> 1)));

 return ret < 0 ? ret : 0;
}

struct dma_fence *dma_fence_get_stub(void);
struct dma_fence *dma_fence_allocate_private_stub(void);
u64 dma_fence_context_alloc(unsigned num);
# 71 "drivers/gpu/drm/radeon/radeon.h" 2





# 1 "./include/drm/ttm/ttm_bo_api.h" 1
# 34 "./include/drm/ttm/ttm_bo_api.h"
# 1 "./include/drm/drm_gem.h" 1
# 38 "./include/drm/drm_gem.h"
# 1 "./include/linux/dma-resv.h" 1
# 48 "./include/linux/dma-resv.h"
extern struct ww_class reservation_ww_class;
# 57 "./include/linux/dma-resv.h"
struct dma_resv_list {
 struct callback_head rcu;
 u32 shared_count, shared_max;
 struct dma_fence *shared[];
};
# 70 "./include/linux/dma-resv.h"
struct dma_resv {
 struct ww_mutex lock;
 seqcount_ww_mutex_t seq;

 struct dma_fence *fence_excl;
 struct dma_resv_list *fence;
};





void dma_resv_reset_shared_max(struct dma_resv *obj);
# 102 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_resv_lock(struct dma_resv *obj,
    struct ww_acquire_ctx *ctx)
{
 return ww_mutex_lock(&obj->lock, ctx);
}
# 123 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_resv_lock_interruptible(struct dma_resv *obj,
           struct ww_acquire_ctx *ctx)
{
 return ww_mutex_lock_interruptible(&obj->lock, ctx);
}
# 138 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_resv_lock_slow(struct dma_resv *obj,
          struct ww_acquire_ctx *ctx)
{
 ww_mutex_lock_slow(&obj->lock, ctx);
}
# 154 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_resv_lock_slow_interruptible(struct dma_resv *obj,
         struct ww_acquire_ctx *ctx)
{
 return ww_mutex_lock_slow_interruptible(&obj->lock, ctx);
}
# 174 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) dma_resv_trylock(struct dma_resv *obj)
{
 return ww_mutex_trylock(&obj->lock);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_resv_is_locked(struct dma_resv *obj)
{
 return ww_mutex_is_locked(&obj->lock);
}
# 197 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ww_acquire_ctx *dma_resv_locking_ctx(struct dma_resv *obj)
{
 return ({ do { extern void __compiletime_assert_267(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(obj->lock.ctx) == sizeof(char) || sizeof(obj->lock.ctx) == sizeof(short) || sizeof(obj->lock.ctx) == sizeof(int) || sizeof(obj->lock.ctx) == sizeof(long)) || sizeof(obj->lock.ctx) == sizeof(long long))) __compiletime_assert_267(); } while (0); (*(const volatile typeof( _Generic((obj->lock.ctx), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (obj->lock.ctx))) *)&(obj->lock.ctx)); });
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_resv_unlock(struct dma_resv *obj)
{
 dma_resv_reset_shared_max(obj);
 ww_mutex_unlock(&obj->lock);
}
# 225 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *
dma_resv_excl_fence(struct dma_resv *obj)
{
 return ({ typeof(*(obj->fence_excl)) *________p1 = (typeof(*(obj->fence_excl)) *)({ do { extern void __compiletime_assert_268(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((obj->fence_excl)) == sizeof(char) || sizeof((obj->fence_excl)) == sizeof(short) || sizeof((obj->fence_excl)) == sizeof(int) || sizeof((obj->fence_excl)) == sizeof(long)) || sizeof((obj->fence_excl)) == sizeof(long long))) __compiletime_assert_268(); } while (0); (*(const volatile typeof( _Generic(((obj->fence_excl)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((obj->fence_excl)))) *)&((obj->fence_excl))); }); do { } while (0 && (!((lockdep_is_held(&(obj)->lock.base)) || rcu_read_lock_held()))); ; ((typeof(*(obj->fence_excl)) *)(________p1)); });
}
# 242 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *
dma_resv_get_excl_unlocked(struct dma_resv *obj)
{
 struct dma_fence *fence;

 if (!({ typeof(*(obj->fence_excl)) *_________p1 = (typeof(*(obj->fence_excl)) *)({ do { extern void __compiletime_assert_269(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((obj->fence_excl)) == sizeof(char) || sizeof((obj->fence_excl)) == sizeof(short) || sizeof((obj->fence_excl)) == sizeof(int) || sizeof((obj->fence_excl)) == sizeof(long)) || sizeof((obj->fence_excl)) == sizeof(long long))) __compiletime_assert_269(); } while (0); (*(const volatile typeof( _Generic(((obj->fence_excl)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((obj->fence_excl)))) *)&((obj->fence_excl))); }); ; ((typeof(*(obj->fence_excl)) *)(_________p1)); }))
  return ((void *)0);

 rcu_read_lock();
 fence = dma_fence_get_rcu_safe(&obj->fence_excl);
 rcu_read_unlock();

 return fence;
}
# 265 "./include/linux/dma-resv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_resv_list *dma_resv_shared_list(struct dma_resv *obj)
{
 return ({ typeof(*(obj->fence)) *________p1 = (typeof(*(obj->fence)) *)({ do { extern void __compiletime_assert_270(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((obj->fence)) == sizeof(char) || sizeof((obj->fence)) == sizeof(short) || sizeof((obj->fence)) == sizeof(int) || sizeof((obj->fence)) == sizeof(long)) || sizeof((obj->fence)) == sizeof(long long))) __compiletime_assert_270(); } while (0); (*(const volatile typeof( _Generic(((obj->fence)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((obj->fence)))) *)&((obj->fence))); }); do { } while (0 && (!((lockdep_is_held(&(obj)->lock.base)) || rcu_read_lock_held()))); ; ((typeof(*(obj->fence)) *)(________p1)); });
}

void dma_resv_init(struct dma_resv *obj);
void dma_resv_fini(struct dma_resv *obj);
int dma_resv_reserve_shared(struct dma_resv *obj, unsigned int num_fences);
void dma_resv_add_shared_fence(struct dma_resv *obj, struct dma_fence *fence);
void dma_resv_add_excl_fence(struct dma_resv *obj, struct dma_fence *fence);
int dma_resv_get_fences(struct dma_resv *obj, struct dma_fence **pfence_excl,
   unsigned *pshared_count, struct dma_fence ***pshared);
int dma_resv_copy_fences(struct dma_resv *dst, struct dma_resv *src);
long dma_resv_wait_timeout(struct dma_resv *obj, bool wait_all, bool intr,
      unsigned long timeout);
bool dma_resv_test_signaled(struct dma_resv *obj, bool test_all);
# 39 "./include/drm/drm_gem.h" 2

# 1 "./include/drm/drm_vma_manager.h" 1
# 26 "./include/drm/drm_vma_manager.h"
# 1 "./include/drm/drm_mm.h" 1
# 49 "./include/drm/drm_mm.h"
# 1 "./include/drm/drm_print.h" 1
# 31 "./include/drm/drm_print.h"
# 1 "./include/linux/seq_file.h" 1
# 14 "./include/linux/seq_file.h"
struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 50 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 63 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/seq_file.h"), "i" (65), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 83 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/seq_file.h"), "i" (88), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
  m->count += num;
 }
}
# 101 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
ssize_t seq_read_iter(struct kiocb *iocb, struct iov_iter *iter);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape_mem(struct seq_file *m, const char *src, size_t len,
      unsigned int flags, const char *esc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_escape_str(struct seq_file *m, const char *src,
      unsigned int flags, const char *esc)
{
 seq_escape_mem(m, src, strlen(src), flags, esc);
}

void seq_escape(struct seq_file *m, const char *s, const char *esc);

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);


void seq_bprintf(struct seq_file *m, const char *f, const u32 *binary);
# 207 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{

 return seq->file->f_cred->user_ns;




}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 257 "./include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 32 "./include/drm/drm_print.h" 2

# 1 "./include/linux/debugfs.h" 1
# 21 "./include/linux/debugfs.h"
struct device;
struct file_operations;

struct debugfs_blob_wrapper {
 void *data;
 unsigned long size;
};

struct debugfs_reg32 {
 char *name;
 unsigned long offset;
};

struct debugfs_regset32 {
 const struct debugfs_reg32 *regs;
 int nregs;
 void *base;
 struct device *dev;
};

struct debugfs_u32_array {
 u32 *array;
 u32 n_elements;
};

extern struct dentry *arch_debugfs_dir;
# 63 "./include/linux/debugfs.h"
typedef struct vfsmount *(*debugfs_automount_t)(struct dentry *, void *);



struct dentry *debugfs_lookup(const char *name, struct dentry *parent);

struct dentry *debugfs_create_file(const char *name, umode_t mode,
       struct dentry *parent, void *data,
       const struct file_operations *fops);
struct dentry *debugfs_create_file_unsafe(const char *name, umode_t mode,
       struct dentry *parent, void *data,
       const struct file_operations *fops);

void debugfs_create_file_size(const char *name, umode_t mode,
         struct dentry *parent, void *data,
         const struct file_operations *fops,
         loff_t file_size);

struct dentry *debugfs_create_dir(const char *name, struct dentry *parent);

struct dentry *debugfs_create_symlink(const char *name, struct dentry *parent,
          const char *dest);

struct dentry *debugfs_create_automount(const char *name,
     struct dentry *parent,
     debugfs_automount_t f,
     void *data);

void debugfs_remove(struct dentry *dentry);


const struct file_operations *debugfs_real_fops(const struct file *filp);

int debugfs_file_get(struct dentry *dentry);
void debugfs_file_put(struct dentry *dentry);

ssize_t debugfs_attr_read(struct file *file, char *buf,
   size_t len, loff_t *ppos);
ssize_t debugfs_attr_write(struct file *file, const char *buf,
   size_t len, loff_t *ppos);

struct dentry *debugfs_rename(struct dentry *old_dir, struct dentry *old_dentry,
                struct dentry *new_dir, const char *new_name);

void debugfs_create_u8(const char *name, umode_t mode, struct dentry *parent,
         u8 *value);
void debugfs_create_u16(const char *name, umode_t mode, struct dentry *parent,
   u16 *value);
void debugfs_create_u32(const char *name, umode_t mode, struct dentry *parent,
   u32 *value);
void debugfs_create_u64(const char *name, umode_t mode, struct dentry *parent,
   u64 *value);
void debugfs_create_ulong(const char *name, umode_t mode, struct dentry *parent,
     unsigned long *value);
void debugfs_create_x8(const char *name, umode_t mode, struct dentry *parent,
         u8 *value);
void debugfs_create_x16(const char *name, umode_t mode, struct dentry *parent,
   u16 *value);
void debugfs_create_x32(const char *name, umode_t mode, struct dentry *parent,
   u32 *value);
void debugfs_create_x64(const char *name, umode_t mode, struct dentry *parent,
   u64 *value);
void debugfs_create_size_t(const char *name, umode_t mode,
      struct dentry *parent, size_t *value);
void debugfs_create_atomic_t(const char *name, umode_t mode,
        struct dentry *parent, atomic_t *value);
void debugfs_create_bool(const char *name, umode_t mode, struct dentry *parent,
    bool *value);
void debugfs_create_str(const char *name, umode_t mode,
   struct dentry *parent, char **value);

struct dentry *debugfs_create_blob(const char *name, umode_t mode,
      struct dentry *parent,
      struct debugfs_blob_wrapper *blob);

void debugfs_create_regset32(const char *name, umode_t mode,
        struct dentry *parent,
        struct debugfs_regset32 *regset);

void debugfs_print_regs32(struct seq_file *s, const struct debugfs_reg32 *regs,
     int nregs, void *base, char *prefix);

void debugfs_create_u32_array(const char *name, umode_t mode,
         struct dentry *parent,
         struct debugfs_u32_array *array);

void debugfs_create_devm_seqfile(struct device *dev, const char *name,
     struct dentry *parent,
     int (*read_fn)(struct seq_file *s, void *data));

bool debugfs_initialized(void);

ssize_t debugfs_read_file_bool(struct file *file, char *user_buf,
          size_t count, loff_t *ppos);

ssize_t debugfs_write_file_bool(struct file *file, const char *user_buf,
    size_t count, loff_t *ppos);

ssize_t debugfs_read_file_str(struct file *file, char *user_buf,
         size_t count, loff_t *ppos);
# 373 "./include/linux/debugfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debugfs_create_xul(const char *name, umode_t mode,
          struct dentry *parent,
          unsigned long *value)
{
 if (sizeof(*value) == sizeof(u32))
  debugfs_create_x32(name, mode, parent, (u32 *)value);
 else
  debugfs_create_x64(name, mode, parent, (u64 *)value);
}
# 34 "./include/drm/drm_print.h" 2




extern unsigned int __drm_debug;
# 75 "./include/drm/drm_print.h"
struct drm_printer {

 void (*printfn)(struct drm_printer *p, struct va_format *vaf);
 void (*puts)(struct drm_printer *p, const char *str);
 void *arg;
 const char *prefix;
};

void __drm_printfn_coredump(struct drm_printer *p, struct va_format *vaf);
void __drm_puts_coredump(struct drm_printer *p, const char *str);
void __drm_printfn_seq_file(struct drm_printer *p, struct va_format *vaf);
void __drm_puts_seq_file(struct drm_printer *p, const char *str);
void __drm_printfn_info(struct drm_printer *p, struct va_format *vaf);
void __drm_printfn_debug(struct drm_printer *p, struct va_format *vaf);
void __drm_printfn_err(struct drm_printer *p, struct va_format *vaf);

__attribute__((__format__(printf, 2, 3)))
void drm_printf(struct drm_printer *p, const char *f, ...);
void drm_puts(struct drm_printer *p, const char *str);
void drm_print_regset32(struct drm_printer *p, struct debugfs_regset32 *regset);
void drm_print_bits(struct drm_printer *p, unsigned long value,
      const char * const bits[], unsigned int nbits);

__attribute__((__format__(printf, 2, 0)))






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
drm_vprintf(struct drm_printer *p, const char *fmt, va_list *va)
{
 struct va_format vaf = { .fmt = fmt, .va = va };

 p->printfn(p, &vaf);
}
# 128 "./include/drm/drm_print.h"
struct drm_print_iterator {
 void *data;
 ssize_t start;
 ssize_t remain;

 ssize_t offset;
};
# 172 "./include/drm/drm_print.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer
drm_coredump_printer(struct drm_print_iterator *iter)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_coredump,
  .puts = __drm_puts_coredump,
  .arg = iter,
 };


 iter->offset = 0;

 return p;
}
# 194 "./include/drm/drm_print.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_seq_file_printer(struct seq_file *f)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_seq_file,
  .puts = __drm_puts_seq_file,
  .arg = f,
 };
 return p;
}
# 211 "./include/drm/drm_print.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_info_printer(struct device *dev)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_info,
  .arg = dev,
 };
 return p;
}
# 227 "./include/drm/drm_print.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_debug_printer(const char *prefix)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_debug,
  .prefix = prefix
 };
 return p;
}
# 243 "./include/drm/drm_print.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_err_printer(const char *prefix)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_err,
  .prefix = prefix
 };
 return p;
}
# 277 "./include/drm/drm_print.h"
enum drm_debug_category {




 DRM_UT_CORE = 0x01,




 DRM_UT_DRIVER = 0x02,



 DRM_UT_KMS = 0x04,



 DRM_UT_PRIME = 0x08,



 DRM_UT_ATOMIC = 0x10,



 DRM_UT_VBL = 0x20,



 DRM_UT_STATE = 0x40,



 DRM_UT_LEASE = 0x80,



 DRM_UT_DP = 0x100,



 DRM_UT_DRMRES = 0x200,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_debug_enabled(enum drm_debug_category category)
{
 return __builtin_expect(!!(__drm_debug & category), 0);
}







__attribute__((__format__(printf, 3, 4)))
void drm_dev_printk(const struct device *dev, const char *level,
      const char *format, ...);
__attribute__((__format__(printf, 3, 4)))
void drm_dev_dbg(const struct device *dev, enum drm_debug_category category,
   const char *format, ...);
# 473 "./include/drm/drm_print.h"
__attribute__((__format__(printf, 2, 3)))
void __drm_dbg(enum drm_debug_category category, const char *format, ...);
__attribute__((__format__(printf, 1, 2)))
void __drm_err(const char *format, ...);
# 50 "./include/drm/drm_mm.h" 2
# 68 "./include/drm/drm_mm.h"
enum drm_mm_insert_mode {
# 77 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_BEST = 0,
# 87 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_LOW,
# 99 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_HIGH,
# 111 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_EVICT,
# 121 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_ONCE = ((((1UL))) << (31)),
# 132 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_HIGHEST = DRM_MM_INSERT_HIGH | DRM_MM_INSERT_ONCE,
# 143 "./include/drm/drm_mm.h"
 DRM_MM_INSERT_LOWEST = DRM_MM_INSERT_LOW | DRM_MM_INSERT_ONCE,
};
# 155 "./include/drm/drm_mm.h"
struct drm_mm_node {

 unsigned long color;

 u64 start;

 u64 size;

 struct drm_mm *mm;
 struct list_head node_list;
 struct list_head hole_stack;
 struct rb_node rb;
 struct rb_node rb_hole_size;
 struct rb_node rb_hole_addr;
 u64 __subtree_last;
 u64 hole_size;
 u64 subtree_max_hole;
 unsigned long flags;





};
# 188 "./include/drm/drm_mm.h"
struct drm_mm {
# 198 "./include/drm/drm_mm.h"
 void (*color_adjust)(const struct drm_mm_node *node,
        unsigned long color,
        u64 *start, u64 *end);



 struct list_head hole_stack;


 struct drm_mm_node head_node;

 struct rb_root_cached interval_tree;
 struct rb_root_cached holes_size;
 struct rb_root holes_addr;

 unsigned long scan_active;
};
# 225 "./include/drm/drm_mm.h"
struct drm_mm_scan {

 struct drm_mm *mm;

 u64 size;
 u64 alignment;
 u64 remainder_mask;

 u64 range_start;
 u64 range_end;

 u64 hit_start;
 u64 hit_end;

 unsigned long color;
 enum drm_mm_insert_mode mode;
};
# 256 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_node_allocated(const struct drm_mm_node *node)
{
 return arch_test_bit(0, &node->flags);
}
# 274 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_initialized(const struct drm_mm *mm)
{
 return ({ do { extern void __compiletime_assert_271(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(mm->hole_stack.next) == sizeof(char) || sizeof(mm->hole_stack.next) == sizeof(short) || sizeof(mm->hole_stack.next) == sizeof(int) || sizeof(mm->hole_stack.next) == sizeof(long)) || sizeof(mm->hole_stack.next) == sizeof(long long))) __compiletime_assert_271(); } while (0); (*(const volatile typeof( _Generic((mm->hole_stack.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (mm->hole_stack.next))) *)&(mm->hole_stack.next)); });
}
# 291 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_hole_follows(const struct drm_mm_node *node)
{
 return node->hole_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __drm_mm_hole_node_start(const struct drm_mm_node *hole_node)
{
 return hole_node->start + hole_node->size;
}
# 312 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 drm_mm_hole_node_start(const struct drm_mm_node *hole_node)
{
 ((void)(sizeof(( long)(!drm_mm_hole_follows(hole_node)))));
 return __drm_mm_hole_node_start(hole_node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __drm_mm_hole_node_end(const struct drm_mm_node *hole_node)
{
 return ({ void *__mptr = (void *)((hole_node)->node_list.next); do { extern void __compiletime_assert_272(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((hole_node)->node_list.next)), typeof(((typeof(*(hole_node)) *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*((hole_node)->node_list.next)), typeof(void))))) __compiletime_assert_272(); } while (0); ((typeof(*(hole_node)) *)(__mptr - __builtin_offsetof(typeof(*(hole_node)), node_list))); })->start;
}
# 334 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 drm_mm_hole_node_end(const struct drm_mm_node *hole_node)
{
 return __drm_mm_hole_node_end(hole_node);
}
# 404 "./include/drm/drm_mm.h"
int drm_mm_reserve_node(struct drm_mm *mm, struct drm_mm_node *node);
int drm_mm_insert_node_in_range(struct drm_mm *mm,
    struct drm_mm_node *node,
    u64 size,
    u64 alignment,
    unsigned long color,
    u64 start,
    u64 end,
    enum drm_mm_insert_mode mode);
# 431 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_mm_insert_node_generic(struct drm_mm *mm, struct drm_mm_node *node,
      u64 size, u64 alignment,
      unsigned long color,
      enum drm_mm_insert_mode mode)
{
 return drm_mm_insert_node_in_range(mm, node,
        size, alignment, color,
        0, ((u64)~0ULL), mode);
}
# 456 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_mm_insert_node(struct drm_mm *mm,
         struct drm_mm_node *node,
         u64 size)
{
 return drm_mm_insert_node_generic(mm, node, size, 0, 0, 0);
}

void drm_mm_remove_node(struct drm_mm_node *node);
void drm_mm_replace_node(struct drm_mm_node *old, struct drm_mm_node *new);
void drm_mm_init(struct drm_mm *mm, u64 start, u64 size);
void drm_mm_takedown(struct drm_mm *mm);
# 476 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_clean(const struct drm_mm *mm)
{
 return list_empty((&(mm)->head_node.node_list));
}

struct drm_mm_node *
__drm_mm_interval_first(const struct drm_mm *mm, u64 start, u64 last);
# 506 "./include/drm/drm_mm.h"
void drm_mm_scan_init_with_range(struct drm_mm_scan *scan,
     struct drm_mm *mm,
     u64 size, u64 alignment, unsigned long color,
     u64 start, u64 end,
     enum drm_mm_insert_mode mode);
# 531 "./include/drm/drm_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_mm_scan_init(struct drm_mm_scan *scan,
        struct drm_mm *mm,
        u64 size,
        u64 alignment,
        unsigned long color,
        enum drm_mm_insert_mode mode)
{
 drm_mm_scan_init_with_range(scan, mm,
        size, alignment, color,
        0, ((u64)~0ULL), mode);
}

bool drm_mm_scan_add_block(struct drm_mm_scan *scan,
      struct drm_mm_node *node);
bool drm_mm_scan_remove_block(struct drm_mm_scan *scan,
         struct drm_mm_node *node);
struct drm_mm_node *drm_mm_scan_color_evict(struct drm_mm_scan *scan);

void drm_mm_print(const struct drm_mm *mm, struct drm_printer *p);
# 27 "./include/drm/drm_vma_manager.h" 2
# 44 "./include/drm/drm_vma_manager.h"
struct drm_file;

struct drm_vma_offset_file {
 struct rb_node vm_rb;
 struct drm_file *vm_tag;
 unsigned long vm_count;
};

struct drm_vma_offset_node {
 rwlock_t vm_lock;
 struct drm_mm_node vm_node;
 struct rb_root vm_files;
 void *driver_private;
};

struct drm_vma_offset_manager {
 rwlock_t vm_lock;
 struct drm_mm vm_addr_space_mm;
};

void drm_vma_offset_manager_init(struct drm_vma_offset_manager *mgr,
     unsigned long page_offset, unsigned long size);
void drm_vma_offset_manager_destroy(struct drm_vma_offset_manager *mgr);

struct drm_vma_offset_node *drm_vma_offset_lookup_locked(struct drm_vma_offset_manager *mgr,
          unsigned long start,
          unsigned long pages);
int drm_vma_offset_add(struct drm_vma_offset_manager *mgr,
         struct drm_vma_offset_node *node, unsigned long pages);
void drm_vma_offset_remove(struct drm_vma_offset_manager *mgr,
      struct drm_vma_offset_node *node);

int drm_vma_node_allow(struct drm_vma_offset_node *node, struct drm_file *tag);
void drm_vma_node_revoke(struct drm_vma_offset_node *node,
    struct drm_file *tag);
bool drm_vma_node_is_allowed(struct drm_vma_offset_node *node,
        struct drm_file *tag);
# 94 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_vma_offset_node *
drm_vma_offset_exact_lookup_locked(struct drm_vma_offset_manager *mgr,
       unsigned long start,
       unsigned long pages)
{
 struct drm_vma_offset_node *node;

 node = drm_vma_offset_lookup_locked(mgr, start, pages);
 return (node && node->vm_node.start == start) ? node : ((void *)0);
}
# 121 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_offset_lock_lookup(struct drm_vma_offset_manager *mgr)
{
 _raw_read_lock(&mgr->vm_lock);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_offset_unlock_lookup(struct drm_vma_offset_manager *mgr)
{
 _raw_read_unlock(&mgr->vm_lock);
}
# 147 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_node_reset(struct drm_vma_offset_node *node)
{
 memset(node, 0, sizeof(*node));
 node->vm_files = (struct rb_root) { ((void *)0), };
 do { static struct lock_class_key __key; __rwlock_init((&node->vm_lock), "&node->vm_lock", &__key); } while (0);
}
# 168 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long drm_vma_node_start(const struct drm_vma_offset_node *node)
{
 return node->vm_node.start;
}
# 185 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long drm_vma_node_size(struct drm_vma_offset_node *node)
{
 return node->vm_node.size;
}
# 202 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 drm_vma_node_offset_addr(struct drm_vma_offset_node *node)
{
 return ((__u64)node->vm_node.start) << (12);
}
# 219 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_node_unmap(struct drm_vma_offset_node *node,
          struct address_space *file_mapping)
{
 if (drm_mm_node_allocated(&node->vm_node))
  unmap_mapping_range(file_mapping,
        drm_vma_node_offset_addr(node),
        drm_vma_node_size(node) << (12), 1);
}
# 240 "./include/drm/drm_vma_manager.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_vma_node_verify_access(struct drm_vma_offset_node *node,
          struct drm_file *tag)
{
 return drm_vma_node_is_allowed(node, tag) ? 0 : -13;
}
# 41 "./include/drm/drm_gem.h" 2

struct dma_buf_map;
struct drm_gem_object;




struct drm_gem_object_funcs {







 void (*free)(struct drm_gem_object *obj);
# 65 "./include/drm/drm_gem.h"
 int (*open)(struct drm_gem_object *obj, struct drm_file *file);
# 74 "./include/drm/drm_gem.h"
 void (*close)(struct drm_gem_object *obj, struct drm_file *file);
# 89 "./include/drm/drm_gem.h"
 void (*print_info)(struct drm_printer *p, unsigned int indent,
      const struct drm_gem_object *obj);
# 100 "./include/drm/drm_gem.h"
 struct dma_buf *(*export)(struct drm_gem_object *obj, int flags);
# 109 "./include/drm/drm_gem.h"
 int (*pin)(struct drm_gem_object *obj);
# 118 "./include/drm/drm_gem.h"
 void (*unpin)(struct drm_gem_object *obj);
# 132 "./include/drm/drm_gem.h"
 struct sg_table *(*get_sg_table)(struct drm_gem_object *obj);
# 142 "./include/drm/drm_gem.h"
 int (*vmap)(struct drm_gem_object *obj, struct dma_buf_map *map);
# 152 "./include/drm/drm_gem.h"
 void (*vunmap)(struct drm_gem_object *obj, struct dma_buf_map *map);
# 165 "./include/drm/drm_gem.h"
 int (*mmap)(struct drm_gem_object *obj, struct vm_area_struct *vma);
# 174 "./include/drm/drm_gem.h"
 const struct vm_operations_struct *vm_ops;
};
# 185 "./include/drm/drm_gem.h"
struct drm_gem_object {
# 195 "./include/drm/drm_gem.h"
 struct kref refcount;
# 208 "./include/drm/drm_gem.h"
 unsigned handle_count;




 struct drm_device *dev;
# 223 "./include/drm/drm_gem.h"
 struct file *filp;
# 235 "./include/drm/drm_gem.h"
 struct drm_vma_offset_node vma_node;







 size_t size;
# 252 "./include/drm/drm_gem.h"
 int name;
# 265 "./include/drm/drm_gem.h"
 struct dma_buf *dma_buf;
# 285 "./include/drm/drm_gem.h"
 struct dma_buf_attachment *import_attach;
# 294 "./include/drm/drm_gem.h"
 struct dma_resv *resv;
# 303 "./include/drm/drm_gem.h"
 struct dma_resv _resv;
# 314 "./include/drm/drm_gem.h"
 const struct drm_gem_object_funcs *funcs;
};
# 343 "./include/drm/drm_gem.h"
void drm_gem_object_release(struct drm_gem_object *obj);
void drm_gem_object_free(struct kref *kref);
int drm_gem_object_init(struct drm_device *dev,
   struct drm_gem_object *obj, size_t size);
void drm_gem_private_object_init(struct drm_device *dev,
     struct drm_gem_object *obj, size_t size);
void drm_gem_vm_open(struct vm_area_struct *vma);
void drm_gem_vm_close(struct vm_area_struct *vma);
int drm_gem_mmap_obj(struct drm_gem_object *obj, unsigned long obj_size,
       struct vm_area_struct *vma);
int drm_gem_mmap(struct file *filp, struct vm_area_struct *vma);
# 362 "./include/drm/drm_gem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_gem_object_get(struct drm_gem_object *obj)
{
 kref_get(&obj->refcount);
}

__attribute__((nonnull))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__drm_gem_object_put(struct drm_gem_object *obj)
{
 kref_put(&obj->refcount, drm_gem_object_free);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
drm_gem_object_put(struct drm_gem_object *obj)
{
 if (obj)
  __drm_gem_object_put(obj);
}

int drm_gem_handle_create(struct drm_file *file_priv,
     struct drm_gem_object *obj,
     u32 *handlep);
int drm_gem_handle_delete(struct drm_file *filp, u32 handle);


void drm_gem_free_mmap_offset(struct drm_gem_object *obj);
int drm_gem_create_mmap_offset(struct drm_gem_object *obj);
int drm_gem_create_mmap_offset_size(struct drm_gem_object *obj, size_t size);

struct page **drm_gem_get_pages(struct drm_gem_object *obj);
void drm_gem_put_pages(struct drm_gem_object *obj, struct page **pages,
  bool dirty, bool accessed);

int drm_gem_objects_lookup(struct drm_file *filp, void *bo_handles,
      int count, struct drm_gem_object ***objs_out);
struct drm_gem_object *drm_gem_object_lookup(struct drm_file *filp, u32 handle);
long drm_gem_dma_resv_wait(struct drm_file *filep, u32 handle,
        bool wait_all, unsigned long timeout);
int drm_gem_lock_reservations(struct drm_gem_object **objs, int count,
         struct ww_acquire_ctx *acquire_ctx);
void drm_gem_unlock_reservations(struct drm_gem_object **objs, int count,
     struct ww_acquire_ctx *acquire_ctx);
int drm_gem_fence_array_add(struct xarray *fence_array,
       struct dma_fence *fence);
int drm_gem_fence_array_add_implicit(struct xarray *fence_array,
         struct drm_gem_object *obj,
         bool write);
int drm_gem_dumb_map_offset(struct drm_file *file, struct drm_device *dev,
       u32 handle, u64 *offset);
# 35 "./include/drm/ttm/ttm_bo_api.h" 2
# 1 "./include/drm/drm_hashtab.h" 1
# 42 "./include/drm/drm_hashtab.h"
struct drm_hash_item {
 struct hlist_node head;
 unsigned long key;
};

struct drm_open_hash {
 struct hlist_head *table;
 u8 order;
};

int drm_ht_create(struct drm_open_hash *ht, unsigned int order);
int drm_ht_insert_item(struct drm_open_hash *ht, struct drm_hash_item *item);
int drm_ht_just_insert_please(struct drm_open_hash *ht, struct drm_hash_item *item,
         unsigned long seed, int bits, int shift,
         unsigned long add);
int drm_ht_find_item(struct drm_open_hash *ht, unsigned long key, struct drm_hash_item **item);

void drm_ht_verbose_list(struct drm_open_hash *ht, unsigned long key);
int drm_ht_remove_key(struct drm_open_hash *ht, unsigned long key);
int drm_ht_remove_item(struct drm_open_hash *ht, struct drm_hash_item *item);
void drm_ht_remove(struct drm_open_hash *ht);
# 36 "./include/drm/ttm/ttm_bo_api.h" 2
# 45 "./include/drm/ttm/ttm_bo_api.h"
# 1 "./include/drm/ttm/ttm_resource.h" 1
# 30 "./include/drm/ttm/ttm_resource.h"
# 1 "./include/linux/dma-buf-map.h" 1
# 115 "./include/linux/dma-buf-map.h"
struct dma_buf_map {
 union {
  void *vaddr_iomem;
  void *vaddr;
 };
 bool is_iomem;
};
# 140 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_buf_map_set_vaddr(struct dma_buf_map *map, void *vaddr)
{
 map->vaddr = vaddr;
 map->is_iomem = false;
}
# 153 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_buf_map_set_vaddr_iomem(struct dma_buf_map *map,
            void *vaddr_iomem)
{
 map->vaddr_iomem = vaddr_iomem;
 map->is_iomem = true;
}
# 171 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_buf_map_is_equal(const struct dma_buf_map *lhs,
     const struct dma_buf_map *rhs)
{
 if (lhs->is_iomem != rhs->is_iomem)
  return false;
 else if (lhs->is_iomem)
  return lhs->vaddr_iomem == rhs->vaddr_iomem;
 else
  return lhs->vaddr == rhs->vaddr;
}
# 192 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_buf_map_is_null(const struct dma_buf_map *map)
{
 if (map->is_iomem)
  return !map->vaddr_iomem;
 return !map->vaddr;
}
# 209 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_buf_map_is_set(const struct dma_buf_map *map)
{
 return !dma_buf_map_is_null(map);
}
# 222 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_buf_map_clear(struct dma_buf_map *map)
{
 if (map->is_iomem) {
  map->vaddr_iomem = ((void *)0);
  map->is_iomem = false;
 } else {
  map->vaddr = ((void *)0);
 }
}
# 242 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_buf_map_memcpy_to(struct dma_buf_map *dst, const void *src, size_t len)
{
 if (dst->is_iomem)
  memcpy_toio(dst->vaddr_iomem, src, len);
 else
  memcpy(dst->vaddr, src, len);
}
# 258 "./include/linux/dma-buf-map.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_buf_map_incr(struct dma_buf_map *map, size_t incr)
{
 if (map->is_iomem)
  map->vaddr_iomem += incr;
 else
  map->vaddr += incr;
}
# 31 "./include/drm/ttm/ttm_resource.h" 2


# 1 "./include/drm/ttm/ttm_caching.h" 1
# 30 "./include/drm/ttm/ttm_caching.h"
enum ttm_caching {
 ttm_uncached,
 ttm_write_combined,
 ttm_cached
};

pgprot_t ttm_prot_from_caching(enum ttm_caching caching, pgprot_t tmp);
# 34 "./include/drm/ttm/ttm_resource.h" 2
# 1 "./include/drm/ttm/ttm_kmap_iter.h" 1
# 10 "./include/drm/ttm/ttm_kmap_iter.h"
struct ttm_kmap_iter;
struct dma_buf_map;
# 21 "./include/drm/ttm/ttm_kmap_iter.h"
struct ttm_kmap_iter_ops {
# 31 "./include/drm/ttm/ttm_kmap_iter.h"
 void (*map_local)(struct ttm_kmap_iter *res_iter,
     struct dma_buf_map *dmap, unsigned long i);
# 41 "./include/drm/ttm/ttm_kmap_iter.h"
 void (*unmap_local)(struct ttm_kmap_iter *res_iter,
       struct dma_buf_map *dmap);
 bool maps_tt;
};
# 57 "./include/drm/ttm/ttm_kmap_iter.h"
struct ttm_kmap_iter {
 const struct ttm_kmap_iter_ops *ops;
};
# 35 "./include/drm/ttm/ttm_resource.h" 2



struct ttm_device;
struct ttm_resource_manager;
struct ttm_resource;
struct ttm_place;
struct ttm_buffer_object;
struct dma_buf_map;
struct io_mapping;
struct sg_table;
struct scatterlist;

struct ttm_resource_manager_func {
# 70 "./include/drm/ttm/ttm_resource.h"
 int (*alloc)(struct ttm_resource_manager *man,
        struct ttm_buffer_object *bo,
        const struct ttm_place *place,
        struct ttm_resource **res);
# 84 "./include/drm/ttm/ttm_resource.h"
 void (*free)(struct ttm_resource_manager *man,
       struct ttm_resource *res);
# 97 "./include/drm/ttm/ttm_resource.h"
 void (*debug)(struct ttm_resource_manager *man,
        struct drm_printer *printer);
};
# 118 "./include/drm/ttm/ttm_resource.h"
struct ttm_resource_manager {



 bool use_type;
 bool use_tt;
 uint64_t size;
 const struct ttm_resource_manager_func *func;
 spinlock_t move_lock;





 struct list_head lru[4U];




 struct dma_fence *move;
};
# 149 "./include/drm/ttm/ttm_resource.h"
struct ttm_bus_placement {
 void *addr;
 phys_addr_t offset;
 bool is_iomem;
 enum ttm_caching caching;
};
# 168 "./include/drm/ttm/ttm_resource.h"
struct ttm_resource {
 unsigned long start;
 unsigned long num_pages;
 uint32_t mem_type;
 uint32_t placement;
 struct ttm_bus_placement bus;
};
# 190 "./include/drm/ttm/ttm_resource.h"
struct ttm_kmap_iter_iomap {
 struct ttm_kmap_iter base;
 struct io_mapping *iomap;
 struct sg_table *st;
 resource_size_t start;
 struct {
  struct scatterlist *sg;
  unsigned long i;
  unsigned long end;
  unsigned long offs;
 } cache;
};







struct ttm_kmap_iter_linear_io {
 struct ttm_kmap_iter base;
 struct dma_buf_map dmap;
 bool needs_unmap;
};
# 224 "./include/drm/ttm/ttm_resource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ttm_resource_manager_set_used(struct ttm_resource_manager *man, bool used)
{
 int i;

 for (i = 0; i < 4U; i++)
  ({ int __ret_warn_on = !!(!list_empty(&man->lru[i])); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_resource.h"), "i" (230), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 man->use_type = used;
}
# 243 "./include/drm/ttm/ttm_resource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ttm_resource_manager_used(struct ttm_resource_manager *man)
{
 return man->use_type;
}
# 255 "./include/drm/ttm/ttm_resource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ttm_resource_manager_cleanup(struct ttm_resource_manager *man)
{
 dma_fence_put(man->move);
 man->move = ((void *)0);
}

void ttm_resource_init(struct ttm_buffer_object *bo,
                       const struct ttm_place *place,
                       struct ttm_resource *res);
int ttm_resource_alloc(struct ttm_buffer_object *bo,
         const struct ttm_place *place,
         struct ttm_resource **res);
void ttm_resource_free(struct ttm_buffer_object *bo, struct ttm_resource **res);

void ttm_resource_manager_init(struct ttm_resource_manager *man,
          unsigned long p_size);

int ttm_resource_manager_evict_all(struct ttm_device *bdev,
       struct ttm_resource_manager *man);

void ttm_resource_manager_debug(struct ttm_resource_manager *man,
    struct drm_printer *p);

struct ttm_kmap_iter *
ttm_kmap_iter_iomap_init(struct ttm_kmap_iter_iomap *iter_io,
    struct io_mapping *iomap,
    struct sg_table *st,
    resource_size_t start);

struct ttm_kmap_iter_linear_io;

struct ttm_kmap_iter *
ttm_kmap_iter_linear_io_init(struct ttm_kmap_iter_linear_io *iter_io,
        struct ttm_device *bdev,
        struct ttm_resource *mem);

void ttm_kmap_iter_linear_io_fini(struct ttm_kmap_iter_linear_io *iter_io,
      struct ttm_device *bdev,
      struct ttm_resource *mem);
# 46 "./include/drm/ttm/ttm_bo_api.h" 2

struct ttm_global;

struct ttm_device;

struct dma_buf_map;

struct drm_mm_node;

struct ttm_placement;

struct ttm_place;

struct ttm_lru_bulk_move;
# 75 "./include/drm/ttm/ttm_bo_api.h"
enum ttm_bo_type {
 ttm_bo_type_device,
 ttm_bo_type_kernel,
 ttm_bo_type_sg
};

struct ttm_tt;
# 118 "./include/drm/ttm/ttm_bo_api.h"
struct ttm_buffer_object {
 struct drm_gem_object base;





 struct ttm_device *bdev;
 enum ttm_bo_type type;
 uint32_t page_alignment;
 void (*destroy) (struct ttm_buffer_object *);




 struct kref kref;





 struct ttm_resource *resource;
 struct ttm_tt *ttm;
 bool deleted;





 struct list_head lru;
 struct list_head ddestroy;





 struct dma_fence *moving;
 unsigned priority;
 unsigned pin_count;







 struct sg_table *sg;
};
# 181 "./include/drm/ttm/ttm_bo_api.h"
struct ttm_bo_kmap_obj {
 void *virtual;
 struct page *page;
 enum {
  ttm_bo_map_iomap = 1 | 0x80,
  ttm_bo_map_vmap = 2,
  ttm_bo_map_kmap = 3,
  ttm_bo_map_premapped = 4 | 0x80,
 } bo_kmap_type;
 struct ttm_buffer_object *bo;
};
# 208 "./include/drm/ttm/ttm_bo_api.h"
struct ttm_operation_ctx {
 bool interruptible;
 bool no_wait_gpu;
 bool gfp_retry_mayfail;
 bool allow_res_evict;
 bool force_alloc;
 struct dma_resv *resv;
 uint64_t bytes_moved;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_get(struct ttm_buffer_object *bo)
{
 kref_get(&bo->kref);
}
# 238 "./include/drm/ttm/ttm_bo_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) struct ttm_buffer_object *
ttm_bo_get_unless_zero(struct ttm_buffer_object *bo)
{
 if (!kref_get_unless_zero(&bo->kref))
  return ((void *)0);
 return bo;
}
# 260 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_wait(struct ttm_buffer_object *bo, bool interruptible, bool no_wait);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ttm_bo_wait_ctx(struct ttm_buffer_object *bo, struct ttm_operation_ctx *ctx)
{
 return ttm_bo_wait(bo, ctx->interruptible, ctx->no_wait_gpu);
}
# 276 "./include/drm/ttm/ttm_bo_api.h"
bool ttm_bo_mem_compat(struct ttm_placement *placement, struct ttm_resource *mem,
         uint32_t *new_flags);
# 294 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_validate(struct ttm_buffer_object *bo,
      struct ttm_placement *placement,
      struct ttm_operation_ctx *ctx);
# 305 "./include/drm/ttm/ttm_bo_api.h"
void ttm_bo_put(struct ttm_buffer_object *bo);
# 318 "./include/drm/ttm/ttm_bo_api.h"
void ttm_bo_move_to_lru_tail(struct ttm_buffer_object *bo,
        struct ttm_resource *mem,
        struct ttm_lru_bulk_move *bulk);
# 330 "./include/drm/ttm/ttm_bo_api.h"
void ttm_bo_bulk_move_lru_tail(struct ttm_lru_bulk_move *bulk);
# 339 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_lock_delayed_workqueue(struct ttm_device *bdev);






void ttm_bo_unlock_delayed_workqueue(struct ttm_device *bdev, int resched);
# 356 "./include/drm/ttm/ttm_bo_api.h"
bool ttm_bo_eviction_valuable(struct ttm_buffer_object *bo,
         const struct ttm_place *place);
# 393 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_init_reserved(struct ttm_device *bdev,
    struct ttm_buffer_object *bo,
    size_t size, enum ttm_bo_type type,
    struct ttm_placement *placement,
    uint32_t page_alignment,
    struct ttm_operation_ctx *ctx,
    struct sg_table *sg, struct dma_resv *resv,
    void (*destroy) (struct ttm_buffer_object *));
# 438 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_init(struct ttm_device *bdev, struct ttm_buffer_object *bo,
  size_t size, enum ttm_bo_type type,
  struct ttm_placement *placement,
  uint32_t page_alignment, bool interrubtible,
  struct sg_table *sg, struct dma_resv *resv,
  void (*destroy) (struct ttm_buffer_object *));
# 456 "./include/drm/ttm/ttm_bo_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ttm_kmap_obj_virtual(struct ttm_bo_kmap_obj *map,
      bool *is_iomem)
{
 *is_iomem = !!(map->bo_kmap_type & 0x80);
 return map->virtual;
}
# 479 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_kmap(struct ttm_buffer_object *bo, unsigned long start_page,
  unsigned long num_pages, struct ttm_bo_kmap_obj *map);
# 489 "./include/drm/ttm/ttm_bo_api.h"
void ttm_bo_kunmap(struct ttm_bo_kmap_obj *map);
# 505 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_vmap(struct ttm_buffer_object *bo, struct dma_buf_map *map);
# 515 "./include/drm/ttm/ttm_bo_api.h"
void ttm_bo_vunmap(struct ttm_buffer_object *bo, struct dma_buf_map *map);
# 525 "./include/drm/ttm/ttm_bo_api.h"
int ttm_bo_mmap_obj(struct vm_area_struct *vma, struct ttm_buffer_object *bo);
# 547 "./include/drm/ttm/ttm_bo_api.h"
ssize_t ttm_bo_io(struct ttm_device *bdev, struct file *filp,
    const char *wbuf, char *rbuf,
    size_t count, loff_t *f_pos, bool write);

int ttm_bo_swapout(struct ttm_buffer_object *bo, struct ttm_operation_ctx *ctx,
     gfp_t gfp_flags);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_pin(struct ttm_buffer_object *bo)
{
 do { (void)(&(bo->base.resv)->lock.base); } while (0);
 ({ int __ret_warn_on = !!(!kref_read(&bo->kref)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_bo_api.h"), "i" (563), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ++bo->pin_count;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_unpin(struct ttm_buffer_object *bo)
{
 do { (void)(&(bo->base.resv)->lock.base); } while (0);
 ({ int __ret_warn_on = !!(!kref_read(&bo->kref)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_bo_api.h"), "i" (576), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 if (bo->pin_count)
  --bo->pin_count;
 else
  ({ int __ret_warn_on = !!(true); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_bo_api.h"), "i" (580), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

int ttm_mem_evict_first(struct ttm_device *bdev,
   struct ttm_resource_manager *man,
   const struct ttm_place *place,
   struct ttm_operation_ctx *ctx,
   struct ww_acquire_ctx *ticket);




vm_fault_t ttm_bo_vm_reserve(struct ttm_buffer_object *bo,
        struct vm_fault *vmf);

vm_fault_t ttm_bo_vm_fault_reserved(struct vm_fault *vmf,
        pgprot_t prot,
        unsigned long num_prefault,
        unsigned long fault_page_size);

vm_fault_t ttm_bo_vm_fault(struct vm_fault *vmf);

void ttm_bo_vm_open(struct vm_area_struct *vma);

void ttm_bo_vm_close(struct vm_area_struct *vma);

int ttm_bo_vm_access(struct vm_area_struct *vma, unsigned long addr,
       void *buf, int len, int write);
bool ttm_bo_delayed_delete(struct ttm_device *bdev, bool remove_all);

vm_fault_t ttm_bo_vm_dummy_page(struct vm_fault *vmf, pgprot_t prot);
# 77 "drivers/gpu/drm/radeon/radeon.h" 2
# 1 "./include/drm/ttm/ttm_bo_driver.h" 1
# 40 "./include/drm/ttm/ttm_bo_driver.h"
# 1 "./include/drm/ttm/ttm_device.h" 1
# 31 "./include/drm/ttm/ttm_device.h"
# 1 "./include/drm/ttm/ttm_pool.h" 1
# 34 "./include/drm/ttm/ttm_pool.h"
struct device;
struct ttm_tt;
struct ttm_pool;
struct ttm_operation_ctx;
# 49 "./include/drm/ttm/ttm_pool.h"
struct ttm_pool_type {
 struct ttm_pool *pool;
 unsigned int order;
 enum ttm_caching caching;

 struct list_head shrinker_list;

 spinlock_t lock;
 struct list_head pages;
};
# 67 "./include/drm/ttm/ttm_pool.h"
struct ttm_pool {
 struct device *dev;

 bool use_dma_alloc;
 bool use_dma32;

 struct {
  struct ttm_pool_type orders[11];
 } caching[3];
};

int ttm_pool_alloc(struct ttm_pool *pool, struct ttm_tt *tt,
     struct ttm_operation_ctx *ctx);
void ttm_pool_free(struct ttm_pool *pool, struct ttm_tt *tt);

void ttm_pool_init(struct ttm_pool *pool, struct device *dev,
     bool use_dma_alloc, bool use_dma32);
void ttm_pool_fini(struct ttm_pool *pool);

int ttm_pool_debugfs(struct ttm_pool *pool, struct seq_file *m);

int ttm_pool_mgr_init(unsigned long num_pages);
void ttm_pool_mgr_fini(void);
# 32 "./include/drm/ttm/ttm_device.h" 2



struct ttm_device;
struct ttm_placement;
struct ttm_buffer_object;
struct ttm_operation_ctx;
# 52 "./include/drm/ttm/ttm_device.h"
extern struct ttm_global {





 struct page *dummy_read_page;




 struct list_head device_list;




 atomic_t bo_count;
} ttm_glob;

struct ttm_device_funcs {
# 83 "./include/drm/ttm/ttm_device.h"
 struct ttm_tt *(*ttm_tt_create)(struct ttm_buffer_object *bo,
     uint32_t page_flags);
# 95 "./include/drm/ttm/ttm_device.h"
 int (*ttm_tt_populate)(struct ttm_device *bdev,
          struct ttm_tt *ttm,
          struct ttm_operation_ctx *ctx);
# 106 "./include/drm/ttm/ttm_device.h"
 void (*ttm_tt_unpopulate)(struct ttm_device *bdev,
      struct ttm_tt *ttm);
# 118 "./include/drm/ttm/ttm_device.h"
 void (*ttm_tt_destroy)(struct ttm_device *bdev, struct ttm_tt *ttm);
# 129 "./include/drm/ttm/ttm_device.h"
 bool (*eviction_valuable)(struct ttm_buffer_object *bo,
      const struct ttm_place *place);
# 143 "./include/drm/ttm/ttm_device.h"
 void (*evict_flags)(struct ttm_buffer_object *bo,
       struct ttm_placement *placement);
# 159 "./include/drm/ttm/ttm_device.h"
 int (*move)(struct ttm_buffer_object *bo, bool evict,
      struct ttm_operation_ctx *ctx,
      struct ttm_resource *new_mem,
      struct ttm_place *hop);




 void (*delete_mem_notify)(struct ttm_buffer_object *bo);




 void (*swap_notify)(struct ttm_buffer_object *bo);







 int (*io_mem_reserve)(struct ttm_device *bdev,
         struct ttm_resource *mem);
 void (*io_mem_free)(struct ttm_device *bdev,
       struct ttm_resource *mem);







 unsigned long (*io_mem_pfn)(struct ttm_buffer_object *bo,
        unsigned long page_offset);
# 208 "./include/drm/ttm/ttm_device.h"
 int (*access_memory)(struct ttm_buffer_object *bo, unsigned long offset,
        void *buf, int len, int write);
# 218 "./include/drm/ttm/ttm_device.h"
 void (*del_from_lru_notify)(struct ttm_buffer_object *bo);
# 228 "./include/drm/ttm/ttm_device.h"
 void (*release_notify)(struct ttm_buffer_object *bo);
};
# 244 "./include/drm/ttm/ttm_device.h"
struct ttm_device {



 struct list_head device_list;
 struct ttm_device_funcs *funcs;




 struct ttm_resource_manager sysman;
 struct ttm_resource_manager *man_drv[8];




 struct drm_vma_offset_manager *vma_manager;
 struct ttm_pool pool;




 spinlock_t lru_lock;
 struct list_head ddestroy;




 struct address_space *dev_mapping;




 struct delayed_work wq;
};

int ttm_global_swapout(struct ttm_operation_ctx *ctx, gfp_t gfp_flags);
int ttm_device_swapout(struct ttm_device *bdev, struct ttm_operation_ctx *ctx,
         gfp_t gfp_flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ttm_resource_manager *
ttm_manager_type(struct ttm_device *bdev, int mem_type)
{
 return bdev->man_drv[mem_type];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_set_driver_manager(struct ttm_device *bdev, int type,
       struct ttm_resource_manager *manager)
{
 bdev->man_drv[type] = manager;
}

int ttm_device_init(struct ttm_device *bdev, struct ttm_device_funcs *funcs,
      struct device *dev, struct address_space *mapping,
      struct drm_vma_offset_manager *vma_manager,
      bool use_dma_alloc, bool use_dma32);
void ttm_device_fini(struct ttm_device *bdev);
# 41 "./include/drm/ttm/ttm_bo_driver.h" 2



# 1 "./include/drm/ttm/ttm_placement.h" 1
# 65 "./include/drm/ttm/ttm_placement.h"
struct ttm_place {
 unsigned fpfn;
 unsigned lpfn;
 uint32_t mem_type;
 uint32_t flags;
};
# 82 "./include/drm/ttm/ttm_placement.h"
struct ttm_placement {
 unsigned num_placement;
 const struct ttm_place *placement;
 unsigned num_busy_placement;
 const struct ttm_place *busy_placement;
};
# 45 "./include/drm/ttm/ttm_bo_driver.h" 2
# 1 "./include/drm/ttm/ttm_tt.h" 1
# 30 "./include/drm/ttm/ttm_tt.h"
# 1 "./include/linux/pagemap.h" 1
# 11 "./include/linux/pagemap.h"
# 1 "./include/linux/highmem.h" 1
# 12 "./include/linux/highmem.h"
# 1 "./arch/riscv/include/asm/cacheflush.h" 1
# 11 "./arch/riscv/include/asm/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_icache_all(void)
{
 asm volatile ("fence.i" ::: "memory");
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_page(struct page *page)
{
 if (arch_test_bit(PG_arch_1, &page->flags))
  clear_bit(PG_arch_1, &page->flags);
}
# 40 "./arch/riscv/include/asm/cacheflush.h"
void flush_icache_all(void);
void flush_icache_mm(struct mm_struct *mm, bool local);
# 51 "./arch/riscv/include/asm/cacheflush.h"
# 1 "./include/asm-generic/cacheflush.h" 1




struct mm_struct;
struct vm_area_struct;
struct page;
struct address_space;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_all(void)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_mm(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_dup_mm(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_range(struct vm_area_struct *vma,
         unsigned long start,
         unsigned long end)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_page(struct vm_area_struct *vma,
        unsigned long vmaddr,
        unsigned long pfn)
{
}
# 57 "./include/asm-generic/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_mmap_lock(struct address_space *mapping)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_mmap_unlock(struct address_space *mapping)
{
}
# 79 "./include/asm-generic/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_icache_page(struct vm_area_struct *vma,
         struct page *page)
{
}
# 94 "./include/asm-generic/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vmap(unsigned long start, unsigned long end)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vunmap(unsigned long start, unsigned long end)
{
}
# 52 "./arch/riscv/include/asm/cacheflush.h" 2
# 13 "./include/linux/highmem.h" 2

# 1 "././include/linux/highmem-internal.h" 1
# 20 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_local_fork(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_assert_nomap(void) { }
# 148 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr)
{
 return ((mem_map + ((((((({ unsigned long _x = (unsigned long)(addr); ((_x) >= (0xffffffe000000000UL) && (!1 || (_x) < kernel_map.virt_addr)) ? ((unsigned long)(_x) - kernel_map.va_pa_offset) : ({ unsigned long _y = _x; (0 && _y < kernel_map.virt_addr + 0) ? ((unsigned long)(_y) - kernel_map.va_kernel_xip_pa_offset) : ((unsigned long)(_y) - kernel_map.va_kernel_pa_offset - 0); }); })) >> (12))))) - (riscv_pfn_base))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page)
{
 do { __might_sleep("./include/linux/highmem-internal.h", 155, 0); do { } while (0); } while (0);
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap_high(struct page *page) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_flush_unused(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page(struct page *page)
{
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page_prot(struct page *page, pgprot_t prot)
{
 return kmap_local_page(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_pfn(unsigned long pfn)
{
 return kmap_local_page((mem_map + ((pfn) - (riscv_pfn_base))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_local(void *addr)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page)
{
 if (0)
  migrate_disable();
 else
  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 pagefault_disable();
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic_prot(struct page *page, pgprot_t prot)
{
 return kmap_atomic(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic_pfn(unsigned long pfn)
{
 return kmap_atomic((mem_map + ((pfn) - (riscv_pfn_base))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_atomic(void *addr)
{



 pagefault_enable();
 if (0)
  migrate_enable();
 else
  do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void) { return 0UL; }
# 15 "./include/linux/highmem.h" 2
# 37 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page);
# 46 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_flush_unused(void);
# 97 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page(struct page *page);
# 110 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page);
# 124 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_anon_page(struct vm_area_struct *vma, struct page *page, unsigned long vmaddr)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_kernel_vmap_range(void *vaddr, int size)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_kernel_vmap_range(void *vaddr, int size)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_user_highpage(struct page *page, unsigned long vaddr)
{
 void *addr = kmap_atomic(page);
 memset((addr), 0, ((1UL) << (12)));
 do { do { extern void __compiletime_assert_273(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_273(); } while (0); __kunmap_atomic(addr); } while (0);
}
# 165 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
alloc_zeroed_user_highpage_movable(struct vm_area_struct *vma,
       unsigned long vaddr)
{
 struct page *page = alloc_pages(((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x02u)) | (( gfp_t)0x08u) | (( gfp_t)0x1000000u)), 0);

 if (page)
  clear_user_highpage(page, vaddr);

 return page;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_highpage(struct page *page)
{
 void *kaddr = kmap_atomic(page);
 memset((kaddr), 0, ((1UL) << (12)));
 do { do { extern void __compiletime_assert_274(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((kaddr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_274(); } while (0); __kunmap_atomic(kaddr); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tag_clear_highpage(struct page *page)
{
}
# 201 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segments(struct page *page,
  unsigned start1, unsigned end1,
  unsigned start2, unsigned end2)
{
 void *kaddr = kmap_atomic(page);
 unsigned int i;

 do { if (__builtin_expect(!!(end1 > page_size(page) || end2 > page_size(page)), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/highmem.h"), "i" (208), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 if (end1 > start1)
  memset(kaddr + start1, 0, end1 - start1);

 if (end2 > start2)
  memset(kaddr + start2, 0, end2 - start2);

 do { do { extern void __compiletime_assert_275(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((kaddr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_275(); } while (0); __kunmap_atomic(kaddr); } while (0);
 for (i = 0; i < compound_nr(page); i++)
  flush_dcache_page(page + i);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segment(struct page *page,
 unsigned start, unsigned end)
{
 zero_user_segments(page, start, end, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user(struct page *page,
 unsigned start, unsigned size)
{
 zero_user_segments(page, start, start + size, 0, 0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_user_highpage(struct page *to, struct page *from,
 unsigned long vaddr, struct vm_area_struct *vma)
{
 char *vfrom, *vto;

 vfrom = kmap_atomic(from);
 vto = kmap_atomic(to);
 memcpy((vto), (vfrom), ((1UL) << (12)));
 do { do { extern void __compiletime_assert_276(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vto), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_276(); } while (0); __kunmap_atomic(vto); } while (0);
 do { do { extern void __compiletime_assert_277(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vfrom), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_277(); } while (0); __kunmap_atomic(vfrom); } while (0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_highpage(struct page *to, struct page *from)
{
 char *vfrom, *vto;

 vfrom = kmap_atomic(from);
 vto = kmap_atomic(to);
 memcpy((vto), (vfrom), ((1UL) << (12)));
 do { do { extern void __compiletime_assert_278(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vto), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_278(); } while (0); __kunmap_atomic(vto); } while (0);
 do { do { extern void __compiletime_assert_279(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vfrom), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_279(); } while (0); __kunmap_atomic(vfrom); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 do { if (__builtin_expect(!!(dst_off + len > ((1UL) << (12)) || src_off + len > ((1UL) << (12))), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/highmem.h"), "i" (272), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 memcpy(dst + dst_off, src + src_off, len);
 do { do { extern void __compiletime_assert_280(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((src), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_280(); } while (0); __kunmap_local(src); } while (0);
 do { do { extern void __compiletime_assert_281(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((dst), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_281(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memmove_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 do { if (__builtin_expect(!!(dst_off + len > ((1UL) << (12)) || src_off + len > ((1UL) << (12))), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/highmem.h"), "i" (285), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 memmove(dst + dst_off, src + src_off, len);
 do { do { extern void __compiletime_assert_282(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((src), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_282(); } while (0); __kunmap_local(src); } while (0);
 do { do { extern void __compiletime_assert_283(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((dst), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_283(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_page(struct page *page, size_t offset, int val,
          size_t len)
{
 char *addr = kmap_local_page(page);

 do { if (__builtin_expect(!!(offset + len > ((1UL) << (12))), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/highmem.h"), "i" (296), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 memset(addr + offset, val, len);
 do { do { extern void __compiletime_assert_284(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_284(); } while (0); __kunmap_local(addr); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_from_page(char *to, struct page *page,
        size_t offset, size_t len)
{
 char *from = kmap_local_page(page);

 do { if (__builtin_expect(!!(offset + len > ((1UL) << (12))), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/highmem.h"), "i" (306), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 memcpy(to, from + offset, len);
 do { do { extern void __compiletime_assert_285(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((from), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((from)), typeof(struct page *))))) __compiletime_assert_285(); } while (0); __kunmap_local(from); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_to_page(struct page *page, size_t offset,
      const char *from, size_t len)
{
 char *to = kmap_local_page(page);

 do { if (__builtin_expect(!!(offset + len > ((1UL) << (12))), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/highmem.h"), "i" (316), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 memcpy(to + offset, from, len);
 flush_dcache_page(page);
 do { do { extern void __compiletime_assert_286(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((to), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((to)), typeof(struct page *))))) __compiletime_assert_286(); } while (0); __kunmap_local(to); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_page(struct page *page, size_t offset, size_t len)
{
 char *addr = kmap_local_page(page);
 memset(addr + offset, 0, len);
 flush_dcache_page(page);
 do { do { extern void __compiletime_assert_287(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_287(); } while (0); __kunmap_local(addr); } while (0);
}
# 12 "./include/linux/pagemap.h" 2





# 1 "./include/linux/hugetlb_inline.h" 1
# 16 "./include/linux/hugetlb_inline.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_hugetlb_page(struct vm_area_struct *vma)
{
 return false;
}
# 18 "./include/linux/pagemap.h" 2

struct pagevec;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_empty(struct address_space *mapping)
{
 return xa_empty(&mapping->i_pages);
}




enum mapping_flags {
 AS_EIO = 0,
 AS_ENOSPC = 1,
 AS_MM_ALL_LOCKS = 2,
 AS_UNEVICTABLE = 3,
 AS_EXITING = 4,

 AS_NO_WRITEBACK_TAGS = 5,
 AS_THP_SUPPORT = 6,
};
# 54 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_error(struct address_space *mapping, int error)
{
 if (__builtin_expect(!!(!error), 1))
  return;


 __filemap_set_wb_err(mapping, error);


 if (mapping->host)
  errseq_set(&mapping->host->i_sb->s_wb_err, error);


 if (error == -28)
  set_bit(AS_ENOSPC, &mapping->flags);
 else
  set_bit(AS_EIO, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_unevictable(struct address_space *mapping)
{
 set_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_clear_unevictable(struct address_space *mapping)
{
 clear_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_unevictable(struct address_space *mapping)
{
 return mapping && arch_test_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_exiting(struct address_space *mapping)
{
 set_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_exiting(struct address_space *mapping)
{
 return arch_test_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_no_writeback_tags(struct address_space *mapping)
{
 set_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_use_writeback_tags(struct address_space *mapping)
{
 return !arch_test_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_mask(struct address_space * mapping)
{
 return mapping->gfp_mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_constraint(struct address_space *mapping,
  gfp_t gfp_mask)
{
 return mapping_gfp_mask(mapping) & gfp_mask;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)
{
 m->gfp_mask = mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_thp_support(struct address_space *mapping)
{
 return arch_test_bit(AS_THP_SUPPORT, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_nr_thps(struct address_space *mapping)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_nr_thps_inc(struct address_space *mapping)
{




 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (149), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_nr_thps_dec(struct address_space *mapping)
{




 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (159), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

}

void release_pages(struct page **pages, int nr);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *page_mapping_file(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return ((void *)0);
 return page_mapping(page);
}
# 219 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __page_cache_add_speculative(struct page *page, int count)
{
# 238 "./include/linux/pagemap.h"
 if (__builtin_expect(!!(!page_ref_add_unless(page, count, 0)), 0)) {





  return 0;
 }

 do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (247), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);

 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cache_get_speculative(struct page *page)
{
 return __page_cache_add_speculative(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cache_add_speculative(struct page *page, int count)
{
 return __page_cache_add_speculative(page, count);
}
# 270 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void attach_page_private(struct page *page, void *data)
{
 get_page(page);
 set_page_private(page, (unsigned long)data);
 SetPagePrivate(page);
}
# 286 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *detach_page_private(struct page *page)
{
 void *data = (void *)((page)->private);

 if (!PagePrivate(page))
  return ((void *)0);
 ClearPagePrivate(page);
 set_page_private(page, 0);
 put_page(page);

 return data;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *__page_cache_alloc(gfp_t gfp)
{
 return alloc_pages(gfp, 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *page_cache_alloc(struct address_space *x)
{
 return __page_cache_alloc(mapping_gfp_mask(x));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t readahead_gfp_mask(struct address_space *x)
{
 return mapping_gfp_mask(x) | (( gfp_t)0x10000u) | (( gfp_t)0x2000u);
}

typedef int filler_t(void *, struct page *);

unsigned long page_cache_next_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
unsigned long page_cache_prev_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
# 335 "./include/linux/pagemap.h"
struct page *pagecache_get_page(struct address_space *mapping, unsigned long offset,
  int fgp_flags, gfp_t cache_gfp_mask);
# 348 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page(struct address_space *mapping,
     unsigned long offset)
{
 return pagecache_get_page(mapping, offset, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page_flags(struct address_space *mapping,
     unsigned long offset, int fgp_flags)
{
 return pagecache_get_page(mapping, offset, fgp_flags, 0);
}
# 373 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_lock_page(struct address_space *mapping,
     unsigned long index)
{
 return pagecache_get_page(mapping, index, 0x00000002, 0);
}
# 392 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_lock_head(struct address_space *mapping,
     unsigned long index)
{
 return pagecache_get_page(mapping, index, 0x00000002 | 0x00000080, 0);
}
# 417 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_or_create_page(struct address_space *mapping,
     unsigned long index, gfp_t gfp_mask)
{
 return pagecache_get_page(mapping, index,
     0x00000002|0x00000001|0x00000004,
     gfp_mask);
}
# 438 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page_nowait(struct address_space *mapping,
    unsigned long index)
{
 return pagecache_get_page(mapping, index,
   0x00000002|0x00000004|0x00000010|0x00000020,
   mapping_gfp_mask(mapping));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_contains(struct page *head, unsigned long index)
{

 if (PageHuge(head))
  return head->index == index;
 return page_index(head) == (index & ~(thp_nr_pages(head) - 1UL));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_subpage(struct page *head, unsigned long index)
{

 if (PageHuge(head))
  return head;

 return head + (index & (thp_nr_pages(head) - 1));
}

unsigned find_get_entries(struct address_space *mapping, unsigned long start,
  unsigned long end, struct pagevec *pvec, unsigned long *indices);
unsigned find_get_pages_range(struct address_space *mapping, unsigned long *start,
   unsigned long end, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages(struct address_space *mapping,
   unsigned long *start, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range(mapping, start, (unsigned long)-1, nr_pages,
        pages);
}
unsigned find_get_pages_contig(struct address_space *mapping, unsigned long start,
          unsigned int nr_pages, struct page **pages);
unsigned find_get_pages_range_tag(struct address_space *mapping, unsigned long *index,
   unsigned long end, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages_tag(struct address_space *mapping,
   unsigned long *index, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range_tag(mapping, index, (unsigned long)-1, tag,
     nr_pages, pages);
}

struct page *grab_cache_page_write_begin(struct address_space *mapping,
   unsigned long index, unsigned flags);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page(struct address_space *mapping,
        unsigned long index)
{
 return find_or_create_page(mapping, index, mapping_gfp_mask(mapping));
}

extern struct page * read_cache_page(struct address_space *mapping,
    unsigned long index, filler_t *filler, void *data);
extern struct page * read_cache_page_gfp(struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
extern int read_cache_pages(struct address_space *mapping,
  struct list_head *pages, filler_t *filler, void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *read_mapping_page(struct address_space *mapping,
    unsigned long index, void *data)
{
 return read_cache_page(mapping, index, ((void *)0), data);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_index(struct page *page)
{
 struct page *head;

 if (__builtin_expect(!!(!PageTransTail(page)), 1))
  return page->index;

 head = ((typeof(page))_compound_head(page));




 return head->index + page - head;
}

extern unsigned long hugetlb_basepage_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_pgoff(struct page *page)
{
 if (__builtin_expect(!!(PageHuge(page)), 0))
  return hugetlb_basepage_index(page);
 return page_to_index(page);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_offset(struct page *page)
{
 return ((loff_t)page->index) << (12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_file_offset(struct page *page)
{
 return ((loff_t)page_index(page)) << (12);
}

extern unsigned long linear_hugepage_index(struct vm_area_struct *vma,
         unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long linear_page_index(struct vm_area_struct *vma,
     unsigned long address)
{
 unsigned long pgoff;
 if (__builtin_expect(!!(is_vm_hugetlb_page(vma)), 0))
  return linear_hugepage_index(vma, address);
 pgoff = (address - vma->vm_start) >> (12);
 pgoff += vma->vm_pgoff;
 return pgoff;
}

struct wait_page_key {
 struct page *page;
 int bit_nr;
 int page_match;
};

struct wait_page_queue {
 struct page *page;
 int bit_nr;
 wait_queue_entry_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wake_page_match(struct wait_page_queue *wait_page,
      struct wait_page_key *key)
{
 if (wait_page->page != key->page)
        return false;
 key->page_match = 1;

 if (wait_page->bit_nr != key->bit_nr)
  return false;

 return true;
}

extern void __lock_page(struct page *page);
extern int __lock_page_killable(struct page *page);
extern int __lock_page_async(struct page *page, struct wait_page_queue *wait);
extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,
    unsigned int flags);
extern void unlock_page(struct page *page);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int trylock_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 return (__builtin_expect(!!(!test_and_set_bit_lock(PG_locked, &page->flags)), 1));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_page(struct page *page)
{
 do { __might_sleep("include/linux/pagemap.h", 623, 0); do { } while (0); } while (0);
 if (!trylock_page(page))
  __lock_page(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_killable(struct page *page)
{
 do { __might_sleep("include/linux/pagemap.h", 635, 0); do { } while (0); } while (0);
 if (!trylock_page(page))
  return __lock_page_killable(page);
 return 0;
}
# 649 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_async(struct page *page,
      struct wait_page_queue *wait)
{
 if (!trylock_page(page))
  return __lock_page_async(page, wait);
 return 0;
}
# 664 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_or_retry(struct page *page, struct mm_struct *mm,
         unsigned int flags)
{
 do { __might_sleep("include/linux/pagemap.h", 667, 0); do { } while (0); } while (0);
 return trylock_page(page) || __lock_page_or_retry(page, mm, flags);
}





extern void wait_on_page_bit(struct page *page, int bit_nr);
extern int wait_on_page_bit_killable(struct page *page, int bit_nr);
# 685 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_on_page_locked(struct page *page)
{
 if (PageLocked(page))
  wait_on_page_bit(((typeof(page))_compound_head(page)), PG_locked);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int wait_on_page_locked_killable(struct page *page)
{
 if (!PageLocked(page))
  return 0;
 return wait_on_page_bit_killable(((typeof(page))_compound_head(page)), PG_locked);
}

int put_and_wait_on_page_locked(struct page *page, int state);
void wait_on_page_writeback(struct page *page);
int wait_on_page_writeback_killable(struct page *page);
extern void end_page_writeback(struct page *page);
void wait_for_stable_page(struct page *page);

void __set_page_dirty(struct page *, struct address_space *, int warn);
int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);

void page_endio(struct page *page, bool is_write, int err);
# 719 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_private_2(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 get_page(page);
 SetPagePrivate2(page);
}

void end_page_private_2(struct page *page);
void wait_on_page_private_2(struct page *page);
int wait_on_page_private_2_killable(struct page *page);




extern void add_page_wait_queue(struct page *page, wait_queue_entry_t *waiter);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fault_in_pages_writeable(char *uaddr, size_t size)
{
 char *end = uaddr + size - 1;

 if (__builtin_expect(!!(size == 0), 0))
  return 0;

 if (__builtin_expect(!!(uaddr > end), 0))
  return -14;




 do {
  if (__builtin_expect(!!(({ __typeof__(*(uaddr)) *__gu_ptr = (uaddr); __typeof__(*__gu_ptr) __val = (0); long __pu_err = 0; (void)0; __asm__ __volatile__ ("csrs sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); do { switch (sizeof(*__gu_ptr)) { case 1: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sb" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; case 2: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sh" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; case 4: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sw" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; case 8: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sd" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; default: do { extern void __compiletime_assert_288(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_288(); } while (0); } } while (0); __asm__ __volatile__ ("csrc sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); __pu_err; }) != 0), 0))
   return -14;
  uaddr += ((1UL) << (12));
 } while (uaddr <= end);


 if (((unsigned long)uaddr & (~(((1UL) << (12)) - 1))) ==
   ((unsigned long)end & (~(((1UL) << (12)) - 1))))
  return ({ __typeof__(*(end)) *__gu_ptr = (end); __typeof__(*__gu_ptr) __val = (0); long __pu_err = 0; (void)0; __asm__ __volatile__ ("csrs sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); do { switch (sizeof(*__gu_ptr)) { case 1: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sb" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; case 2: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sh" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; case 4: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sw" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; case 8: do { uintptr_t __tmp; __typeof__(*(__gu_ptr)) __x = (__val); __asm__ __volatile__ ( "1:\n" "	" "sd" " %z3, %2\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	jump 2b, %1\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__pu_err), "=r" (__tmp), "=m" (*(__gu_ptr)) : "rJ" (__x), "i" (-14)); } while (0); break; default: do { extern void __compiletime_assert_289(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_289(); } while (0); } } while (0); __asm__ __volatile__ ("csrc sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); __pu_err; });

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fault_in_pages_readable(const char *uaddr, size_t size)
{
 volatile char c;
 const char *end = uaddr + size - 1;

 if (__builtin_expect(!!(size == 0), 0))
  return 0;

 if (__builtin_expect(!!(uaddr > end), 0))
  return -14;

 do {
  if (__builtin_expect(!!(({ const __typeof__(*(uaddr)) *__gu_ptr = (uaddr); long __gu_err = 0; (void)0; __asm__ __volatile__ ("csrs sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); do { switch (sizeof(*__gu_ptr)) { case 1: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "lb" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; case 2: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "lh" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; case 4: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "lw" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; case 8: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "ld" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; default: do { extern void __compiletime_assert_290(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_290(); } while (0); } } while (0); __asm__ __volatile__ ("csrc sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); __gu_err; }) != 0), 0))
   return -14;
  uaddr += ((1UL) << (12));
 } while (uaddr <= end);


 if (((unsigned long)uaddr & (~(((1UL) << (12)) - 1))) ==
   ((unsigned long)end & (~(((1UL) << (12)) - 1)))) {
  return ({ const __typeof__(*(end)) *__gu_ptr = (end); long __gu_err = 0; (void)0; __asm__ __volatile__ ("csrs sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); do { switch (sizeof(*__gu_ptr)) { case 1: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "lb" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; case 2: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "lh" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; case 4: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "lw" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; case 8: do { uintptr_t __tmp; __typeof__((c)) __x; __asm__ __volatile__ ( "1:\n" "	" "ld" " %1, %3\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.balign 4\n" "3:\n" "	li %0, %4\n" "	li %1, 0\n" "	jump 2b, %2\n" "	.previous\n" "	.section __ex_table,\"a\"\n" "	.balign " "8" "\n" "	" ".dword" " 1b, 3b\n" "	.previous" : "+r" (__gu_err), "=&r" (__x), "=r" (__tmp) : "m" (*(__gu_ptr)), "i" (-14)); ((c)) = __x; } while (0); break; default: do { extern void __compiletime_assert_291(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_291(); } while (0); } } while (0); __asm__ __volatile__ ("csrc sstatus, %0" : : "r" ((0x00040000UL)) : "memory"); __gu_err; });
 }

 (void)c;
 return 0;
}

int add_to_page_cache_locked(struct page *page, struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
int add_to_page_cache_lru(struct page *page, struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
extern void delete_from_page_cache(struct page *page);
extern void __delete_from_page_cache(struct page *page, void *shadow);
void replace_page_cache_page(struct page *old, struct page *new);
void delete_from_page_cache_batch(struct address_space *mapping,
      struct pagevec *pvec);
loff_t mapping_seek_hole_data(struct address_space *, loff_t start, loff_t end,
  int whence);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_to_page_cache(struct page *page,
  struct address_space *mapping, unsigned long offset, gfp_t gfp_mask)
{
 int error;

 __SetPageLocked(page);
 error = add_to_page_cache_locked(page, mapping, offset, gfp_mask);
 if (__builtin_expect(!!(error), 0))
  __ClearPageLocked(page);
 return error;
}
# 836 "./include/linux/pagemap.h"
struct readahead_control {
 struct file *file;
 struct address_space *mapping;
 struct file_ra_state *ra;

 unsigned long _index;
 unsigned int _nr_pages;
 unsigned int _batch_count;
};
# 856 "./include/linux/pagemap.h"
void page_cache_ra_unbounded(struct readahead_control *,
  unsigned long nr_to_read, unsigned long lookahead_count);
void page_cache_sync_ra(struct readahead_control *, unsigned long req_count);
void page_cache_async_ra(struct readahead_control *, struct page *,
  unsigned long req_count);
void readahead_expand(struct readahead_control *ractl,
        loff_t new_start, size_t new_len);
# 877 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void page_cache_sync_readahead(struct address_space *mapping,
  struct file_ra_state *ra, struct file *file, unsigned long index,
  unsigned long req_count)
{
 struct readahead_control ractl = { .file = file, .mapping = mapping, .ra = ra, ._index = index, };
 page_cache_sync_ra(&ractl, req_count);
}
# 900 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void page_cache_async_readahead(struct address_space *mapping,
  struct file_ra_state *ra, struct file *file,
  struct page *page, unsigned long index, unsigned long req_count)
{
 struct readahead_control ractl = { .file = file, .mapping = mapping, .ra = ra, ._index = index, };
 page_cache_async_ra(&ractl, page, req_count);
}
# 918 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *readahead_page(struct readahead_control *rac)
{
 struct page *page;

 do { if (__builtin_expect(!!(rac->_batch_count > rac->_nr_pages), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (922), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 rac->_nr_pages -= rac->_batch_count;
 rac->_index += rac->_batch_count;

 if (!rac->_nr_pages) {
  rac->_batch_count = 0;
  return ((void *)0);
 }

 page = xa_load(&rac->mapping->i_pages, rac->_index);
 do { if (__builtin_expect(!!(!PageLocked(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageLocked(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (932), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
 rac->_batch_count = thp_nr_pages(page);

 return page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __readahead_batch(struct readahead_control *rac,
  struct page **array, unsigned int array_sz)
{
 unsigned int i = 0;
 struct xa_state xas = { .xa = &rac->mapping->i_pages, .xa_index = 0, .xa_shift = 0, .xa_sibs = 0, .xa_offset = 0, .xa_pad = 0, .xa_node = ((struct xa_node *)3UL), .xa_alloc = ((void *)0), .xa_update = ((void *)0) };
 struct page *page;

 do { if (__builtin_expect(!!(rac->_batch_count > rac->_nr_pages), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (945), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 rac->_nr_pages -= rac->_batch_count;
 rac->_index += rac->_batch_count;
 rac->_batch_count = 0;

 xas_set(&xas, rac->_index);
 rcu_read_lock();
 for (page = xas_find(&xas, rac->_index + rac->_nr_pages - 1); page; page = xas_next_entry(&xas, rac->_index + rac->_nr_pages - 1)) {
  if (xas_retry(&xas, page))
   continue;
  do { if (__builtin_expect(!!(!PageLocked(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageLocked(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (955), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
  do { if (__builtin_expect(!!(PageTail(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "PageTail(page)"")"); do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/pagemap.h"), "i" (956), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } } while (0);
  array[i++] = page;
  rac->_batch_count += thp_nr_pages(page);







  if (PageHead(page))
   xas_set(&xas, rac->_index + rac->_batch_count);

  if (i == array_sz)
   break;
 }
 rcu_read_unlock();

 return i;
}
# 995 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t readahead_pos(struct readahead_control *rac)
{
 return (loff_t)rac->_index * ((1UL) << (12));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t readahead_length(struct readahead_control *rac)
{
 return rac->_nr_pages * ((1UL) << (12));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long readahead_index(struct readahead_control *rac)
{
 return rac->_index;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int readahead_count(struct readahead_control *rac)
{
 return rac->_nr_pages;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t readahead_batch_length(struct readahead_control *rac)
{
 return rac->_batch_count * ((1UL) << (12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dir_pages(struct inode *inode)
{
 return (unsigned long)(inode->i_size + ((1UL) << (12)) - 1) >>
          (12);
}
# 1050 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mkwrite_check_truncate(struct page *page,
           struct inode *inode)
{
 loff_t size = i_size_read(inode);
 unsigned long index = size >> (12);
 int offset = ((unsigned long)(size) & ~(~(((1UL) << (12)) - 1)));

 if (page->mapping != inode->i_mapping)
  return -14;


 if (page->index < index)
  return ((1UL) << (12));

 if (page->index > index || !offset)
  return -14;

 return offset;
}
# 1081 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned int i_blocks_per_page(struct inode *inode, struct page *page)
{
 return thp_size(page) >> inode->i_blkbits;
}
# 31 "./include/drm/ttm/ttm_tt.h" 2




struct ttm_device;
struct ttm_tt;
struct ttm_resource;
struct ttm_buffer_object;
struct ttm_operation_ctx;
# 64 "./include/drm/ttm/ttm_tt.h"
struct ttm_tt {
 struct page **pages;
 uint32_t page_flags;
 uint32_t num_pages;
 struct sg_table *sg;
 dma_addr_t *dma_address;
 struct file *swap_storage;
 enum ttm_caching caching;
};







struct ttm_kmap_iter_tt {
 struct ttm_kmap_iter base;
 struct ttm_tt *tt;
 pgprot_t prot;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ttm_tt_is_populated(struct ttm_tt *tt)
{
 return tt->page_flags & (1 << 31);
}
# 100 "./include/drm/ttm/ttm_tt.h"
int ttm_tt_create(struct ttm_buffer_object *bo, bool zero_alloc);
# 115 "./include/drm/ttm/ttm_tt.h"
int ttm_tt_init(struct ttm_tt *ttm, struct ttm_buffer_object *bo,
  uint32_t page_flags, enum ttm_caching caching);
int ttm_sg_tt_init(struct ttm_tt *ttm_dma, struct ttm_buffer_object *bo,
     uint32_t page_flags, enum ttm_caching caching);
# 127 "./include/drm/ttm/ttm_tt.h"
void ttm_tt_fini(struct ttm_tt *ttm);
# 136 "./include/drm/ttm/ttm_tt.h"
void ttm_tt_destroy(struct ttm_device *bdev, struct ttm_tt *ttm);






void ttm_tt_destroy_common(struct ttm_device *bdev, struct ttm_tt *ttm);
# 152 "./include/drm/ttm/ttm_tt.h"
int ttm_tt_swapin(struct ttm_tt *ttm);
int ttm_tt_swapout(struct ttm_device *bdev, struct ttm_tt *ttm,
     gfp_t gfp_flags);
# 163 "./include/drm/ttm/ttm_tt.h"
int ttm_tt_populate(struct ttm_device *bdev, struct ttm_tt *ttm, struct ttm_operation_ctx *ctx);
# 172 "./include/drm/ttm/ttm_tt.h"
void ttm_tt_unpopulate(struct ttm_device *bdev, struct ttm_tt *ttm);
# 182 "./include/drm/ttm/ttm_tt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_tt_mark_for_clear(struct ttm_tt *ttm)
{
 ttm->page_flags |= (1 << 6);
}

void ttm_tt_mgr_init(unsigned long num_pages, unsigned long num_dma32_pages);

struct ttm_kmap_iter *ttm_kmap_iter_tt_init(struct ttm_kmap_iter_tt *iter_tt,
         struct ttm_tt *tt);
# 46 "./include/drm/ttm/ttm_bo_driver.h" 2
# 56 "./include/drm/ttm/ttm_bo_driver.h"
struct ttm_lru_bulk_move_pos {
 struct ttm_buffer_object *first;
 struct ttm_buffer_object *last;
};
# 70 "./include/drm/ttm/ttm_bo_driver.h"
struct ttm_lru_bulk_move {
 struct ttm_lru_bulk_move_pos tt[4U];
 struct ttm_lru_bulk_move_pos vram[4U];
};
# 98 "./include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_mem_space(struct ttm_buffer_object *bo,
       struct ttm_placement *placement,
       struct ttm_resource **mem,
       struct ttm_operation_ctx *ctx);






void ttm_bo_unmap_virtual(struct ttm_buffer_object *bo);
# 132 "./include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ttm_bo_reserve(struct ttm_buffer_object *bo,
     bool interruptible, bool no_wait,
     struct ww_acquire_ctx *ticket)
{
 int ret = 0;

 if (no_wait) {
  bool success;
  if (({ int __ret_warn_on = !!(ticket); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_bo_driver.h"), "i" (140), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
   return -16;

  success = dma_resv_trylock(bo->base.resv);
  return success ? 0 : -16;
 }

 if (interruptible)
  ret = dma_resv_lock_interruptible(bo->base.resv, ticket);
 else
  ret = dma_resv_lock(bo->base.resv, ticket);
 if (ret == -4)
  return -512;
 return ret;
}
# 166 "./include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ttm_bo_reserve_slowpath(struct ttm_buffer_object *bo,
       bool interruptible,
       struct ww_acquire_ctx *ticket)
{
 if (interruptible) {
  int ret = dma_resv_lock_slow_interruptible(bo->base.resv,
          ticket);
  if (ret == -4)
   ret = -512;
  return ret;
 }
 dma_resv_lock_slow(bo->base.resv, ticket);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ttm_bo_move_to_lru_tail_unlocked(struct ttm_buffer_object *bo)
{
 spin_lock(&bo->bdev->lru_lock);
 ttm_bo_move_to_lru_tail(bo, bo->resource, ((void *)0));
 spin_unlock(&bo->bdev->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_assign_mem(struct ttm_buffer_object *bo,
         struct ttm_resource *new_mem)
{
 ({ int __ret_warn_on = !!(bo->resource); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_bo_driver.h"), "i" (192), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 bo->resource = new_mem;
}
# 203 "./include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_move_null(struct ttm_buffer_object *bo,
        struct ttm_resource *new_mem)
{
 ttm_resource_free(bo, &bo->resource);
 ttm_bo_assign_mem(bo, new_mem);
}
# 217 "./include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_unreserve(struct ttm_buffer_object *bo)
{
 ttm_bo_move_to_lru_tail_unlocked(bo);
 dma_resv_unlock(bo->base.resv);
}




int ttm_mem_io_reserve(struct ttm_device *bdev,
         struct ttm_resource *mem);
void ttm_mem_io_free(struct ttm_device *bdev,
       struct ttm_resource *mem);
# 249 "./include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_move_memcpy(struct ttm_buffer_object *bo,
         struct ttm_operation_ctx *ctx,
         struct ttm_resource *new_mem);
# 269 "./include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_move_accel_cleanup(struct ttm_buffer_object *bo,
         struct dma_fence *fence, bool evict,
         bool pipeline,
         struct ttm_resource *new_mem);
# 283 "./include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_move_sync_cleanup(struct ttm_buffer_object *bo,
         struct ttm_resource *new_mem)
{
 int ret = ttm_bo_move_accel_cleanup(bo, ((void *)0), true, false, new_mem);

 ({ int __ret_warn_on = !!(ret); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/ttm/ttm_bo_driver.h"), "i" (288), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}
# 298 "./include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_pipeline_gutting(struct ttm_buffer_object *bo);
# 310 "./include/drm/ttm/ttm_bo_driver.h"
pgprot_t ttm_io_prot(struct ttm_buffer_object *bo, struct ttm_resource *res,
       pgprot_t tmp);






int ttm_bo_tt_bind(struct ttm_buffer_object *bo, struct ttm_resource *mem);




void ttm_bo_tt_destroy(struct ttm_buffer_object *bo);

void ttm_move_memcpy(struct ttm_buffer_object *bo,
       u32 num_pages,
       struct ttm_kmap_iter *dst_iter,
       struct ttm_kmap_iter *src_iter);

struct ttm_kmap_iter *
ttm_kmap_iter_iomap_init(struct ttm_kmap_iter_iomap *iter_io,
    struct io_mapping *iomap,
    struct sg_table *st,
    resource_size_t start);
# 78 "drivers/gpu/drm/radeon/radeon.h" 2

# 1 "./include/drm/ttm/ttm_execbuf_util.h" 1
# 46 "./include/drm/ttm/ttm_execbuf_util.h"
struct ttm_validate_buffer {
 struct list_head head;
 struct ttm_buffer_object *bo;
 unsigned int num_shared;
};
# 61 "./include/drm/ttm/ttm_execbuf_util.h"
void ttm_eu_backoff_reservation(struct ww_acquire_ctx *ticket,
    struct list_head *list);
# 98 "./include/drm/ttm/ttm_execbuf_util.h"
int ttm_eu_reserve_buffers(struct ww_acquire_ctx *ticket,
      struct list_head *list, bool intr,
      struct list_head *dups);
# 114 "./include/drm/ttm/ttm_execbuf_util.h"
void ttm_eu_fence_buffer_objects(struct ww_acquire_ctx *ticket,
     struct list_head *list,
     struct dma_fence *fence);
# 80 "drivers/gpu/drm/radeon/radeon.h" 2



# 1 "drivers/gpu/drm/radeon/radeon_family.h" 1
# 38 "drivers/gpu/drm/radeon/radeon_family.h"
enum radeon_family {
 CHIP_R100 = 0,
 CHIP_RV100,
 CHIP_RS100,
 CHIP_RV200,
 CHIP_RS200,
 CHIP_R200,
 CHIP_RV250,
 CHIP_RS300,
 CHIP_RV280,
 CHIP_R300,
 CHIP_R350,
 CHIP_RV350,
 CHIP_RV380,
 CHIP_R420,
 CHIP_R423,
 CHIP_RV410,
 CHIP_RS400,
 CHIP_RS480,
 CHIP_RS600,
 CHIP_RS690,
 CHIP_RS740,
 CHIP_RV515,
 CHIP_R520,
 CHIP_RV530,
 CHIP_RV560,
 CHIP_RV570,
 CHIP_R580,
 CHIP_R600,
 CHIP_RV610,
 CHIP_RV630,
 CHIP_RV670,
 CHIP_RV620,
 CHIP_RV635,
 CHIP_RS780,
 CHIP_RS880,
 CHIP_RV770,
 CHIP_RV730,
 CHIP_RV710,
 CHIP_RV740,
 CHIP_CEDAR,
 CHIP_REDWOOD,
 CHIP_JUNIPER,
 CHIP_CYPRESS,
 CHIP_HEMLOCK,
 CHIP_PALM,
 CHIP_SUMO,
 CHIP_SUMO2,
 CHIP_BARTS,
 CHIP_TURKS,
 CHIP_CAICOS,
 CHIP_CAYMAN,
 CHIP_ARUBA,
 CHIP_TAHITI,
 CHIP_PITCAIRN,
 CHIP_VERDE,
 CHIP_OLAND,
 CHIP_HAINAN,
 CHIP_BONAIRE,
 CHIP_KAVERI,
 CHIP_KABINI,
 CHIP_HAWAII,
 CHIP_MULLINS,
 CHIP_LAST,
};




enum radeon_chip_flags {
 RADEON_FAMILY_MASK = 0x0000ffffUL,
 RADEON_FLAGS_MASK = 0xffff0000UL,
 RADEON_IS_MOBILITY = 0x00010000UL,
 RADEON_IS_IGP = 0x00020000UL,
 RADEON_SINGLE_CRTC = 0x00040000UL,
 RADEON_IS_AGP = 0x00080000UL,
 RADEON_HAS_HIERZ = 0x00100000UL,
 RADEON_IS_PCIE = 0x00200000UL,
 RADEON_NEW_MEMMAP = 0x00400000UL,
 RADEON_IS_PCI = 0x00800000UL,
 RADEON_IS_IGPGART = 0x01000000UL,
 RADEON_IS_PX = 0x02000000UL,
};
# 84 "drivers/gpu/drm/radeon/radeon.h" 2
# 1 "drivers/gpu/drm/radeon/radeon_mode.h" 1
# 33 "drivers/gpu/drm/radeon/radeon_mode.h"
# 1 "./include/drm/drm_crtc.h" 1
# 28 "./include/drm/drm_crtc.h"
# 1 "./include/linux/i2c.h" 1
# 13 "./include/linux/i2c.h"
# 1 "./include/linux/acpi.h" 1
# 13 "./include/linux/acpi.h"
# 1 "./include/linux/irqdomain.h" 1
# 35 "./include/linux/irqdomain.h"
# 1 "./include/linux/of.h" 1
# 22 "./include/linux/of.h"
# 1 "./include/linux/property.h" 1
# 17 "./include/linux/property.h"
struct device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_REF,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

struct fwnode_handle *dev_fwnode(struct device *dev);

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_device_is_available(const struct fwnode_handle *fwnode);
bool fwnode_property_present(const struct fwnode_handle *fwnode,
        const char *propname);
int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(const struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(const struct fwnode_handle *fwnode,
     const char *propname, const char *string);
int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
           const char *prop, const char *nargs_prop,
           unsigned int nargs, unsigned int index,
           struct fwnode_reference_args *args);

struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *fwnode,
         const char *name,
         unsigned int index);

const char *fwnode_get_name(const struct fwnode_handle *fwnode);
const char *fwnode_get_name_prefix(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_parent(
 struct fwnode_handle *fwnode);
struct device *fwnode_get_next_parent_dev(struct fwnode_handle *fwnode);
unsigned int fwnode_count_parents(const struct fwnode_handle *fwn);
struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *fwn,
         unsigned int depth);
bool fwnode_is_ancestor_of(struct fwnode_handle *test_ancestor,
      struct fwnode_handle *test_child);
struct fwnode_handle *fwnode_get_next_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
struct fwnode_handle *fwnode_get_next_available_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
# 107 "./include/linux/property.h"
struct fwnode_handle *device_get_next_child_node(
 struct device *dev, struct fwnode_handle *child);





struct fwnode_handle *fwnode_get_named_child_node(
 const struct fwnode_handle *fwnode, const char *childname);
struct fwnode_handle *device_get_named_child_node(struct device *dev,
        const char *childname);

struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *fwnode);
void fwnode_handle_put(struct fwnode_handle *fwnode);

int fwnode_irq_get(const struct fwnode_handle *fwnode, unsigned int index);

unsigned int device_get_child_node_count(struct device *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u8(struct device *dev, const char *propname)
{
 return device_property_read_u8_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u16(struct device *dev, const char *propname)
{
 return device_property_read_u16_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u32(struct device *dev, const char *propname)
{
 return device_property_read_u32_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u64(struct device *dev, const char *propname)
{
 return device_property_read_u64_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_string_array_count(struct device *dev,
           const char *propname)
{
 return device_property_read_string_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fwnode_property_read_bool(const struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u8(const struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u16(const struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u32(const struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u64(const struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u8(const struct fwnode_handle *fwnode,
        const char *propname)
{
 return fwnode_property_read_u8_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u16(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u16_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u32(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u32_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u64(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u64_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
fwnode_property_string_array_count(const struct fwnode_handle *fwnode,
       const char *propname)
{
 return fwnode_property_read_string_array(fwnode, propname, ((void *)0), 0);
}

struct software_node;







struct software_node_ref_args {
 const struct software_node *node;
 unsigned int nargs;
 u64 args[8];
};
# 273 "./include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_inline;
 enum dev_prop_type type;
 union {
  const void *pointer;
  union {
   u8 u8_data[sizeof(u64) / sizeof(u8)];
   u16 u16_data[sizeof(u64) / sizeof(u16)];
   u32 u32_data[sizeof(u64) / sizeof(u32)];
   u64 u64_data[sizeof(u64) / sizeof(u64)];
   const char *str[sizeof(u64) / sizeof(char *)];
  } value;
 };
};
# 375 "./include/linux/property.h"
struct property_entry *
property_entries_dup(const struct property_entry *properties);

void property_entries_free(const struct property_entry *properties);

int device_add_properties(struct device *dev,
     const struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

const void *device_get_match_data(struct device *dev);

int device_get_phy_mode(struct device *dev);

void *device_get_mac_address(struct device *dev, char *addr, int alen);

int fwnode_get_phy_mode(struct fwnode_handle *fwnode);
void *fwnode_get_mac_address(struct fwnode_handle *fwnode,
        char *addr, int alen);
struct fwnode_handle *fwnode_graph_get_next_endpoint(
 const struct fwnode_handle *fwnode, struct fwnode_handle *prev);
struct fwnode_handle *
fwnode_graph_get_port_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port_parent(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_endpoint(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *
fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port,
        u32 endpoint);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fwnode_graph_is_endpoint(struct fwnode_handle *fwnode)
{
 return fwnode_property_present(fwnode, "remote-endpoint");
}
# 429 "./include/linux/property.h"
struct fwnode_handle *
fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *fwnode,
    u32 port, u32 endpoint, unsigned long flags);





int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
    struct fwnode_endpoint *endpoint);

typedef void *(*devcon_match_fn_t)(struct fwnode_handle *fwnode, const char *id,
       void *data);

void *fwnode_connection_find_match(struct fwnode_handle *fwnode,
       const char *con_id, void *data,
       devcon_match_fn_t match);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *device_connection_find_match(struct device *dev,
       const char *con_id, void *data,
       devcon_match_fn_t match)
{
 return fwnode_connection_find_match(dev_fwnode(dev), con_id, data, match);
}
# 463 "./include/linux/property.h"
struct software_node {
 const char *name;
 const struct software_node *parent;
 const struct property_entry *properties;
};

bool is_software_node(const struct fwnode_handle *fwnode);
const struct software_node *
to_software_node(const struct fwnode_handle *fwnode);
struct fwnode_handle *software_node_fwnode(const struct software_node *node);

const struct software_node *
software_node_find_by_name(const struct software_node *parent,
      const char *name);

int software_node_register_nodes(const struct software_node *nodes);
void software_node_unregister_nodes(const struct software_node *nodes);

int software_node_register_node_group(const struct software_node **node_group);
void software_node_unregister_node_group(const struct software_node **node_group);

int software_node_register(const struct software_node *node);
void software_node_unregister(const struct software_node *node);

struct fwnode_handle *
fwnode_create_software_node(const struct property_entry *properties,
       const struct fwnode_handle *parent);
void fwnode_remove_software_node(struct fwnode_handle *fwnode);

int device_add_software_node(struct device *dev, const struct software_node *node);
void device_remove_software_node(struct device *dev);

int device_create_managed_software_node(struct device *dev,
     const struct property_entry *properties,
     const struct software_node *parent);
# 23 "./include/linux/of.h" 2



# 1 "./arch/riscv/include/generated/uapi/asm/errno.h" 1
# 27 "./include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;







 struct bin_attribute attr;

};





struct device_node {
 const char *name;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;

 struct kobject kobj;

 unsigned long _flags;
 void *data;




};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
extern const struct fwnode_operations of_fwnode_ops;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_init(struct device_node *node)
{

 kobject_init(&node->kobj, &of_node_ktype);

 fwnode_init(&node->fwnode, &of_fwnode_ops);
}
# 125 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_node_get(struct device_node *node)
{
 return node;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_put(struct device_node *node) { }



extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 153 "./include/linux/of.h"
void of_core_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_of_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
}
# 178 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_have_populated_dt(void)
{
 return of_root != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_node_is_root(const struct device_node *node)
{
 return node && (node->parent == ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_check_flag(struct device_node *n, unsigned long flag)
{
 return arch_test_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return test_and_set_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_set_flag(struct device_node *n, unsigned long flag)
{
 set_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
 clear_bit(flag, &n->_flags);
}
# 226 "./include/linux/of.h"
extern struct device_node *__of_find_all_nodes(struct device_node *prev);
extern struct device_node *of_find_all_nodes(struct device_node *prev);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 of_read_number(const __be32 *cell, int size)
{
 u64 r = 0;
 for (; size--; cell++)
  r = (r << 32) | (__builtin_constant_p((__u32)(( __u32)(__be32)(*cell))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*cell)));
 return r;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long of_read_ulong(const __be32 *cell, int size)
{

 return of_read_number(cell, size);
}
# 256 "./include/linux/of.h"
extern bool of_node_name_eq(const struct device_node *np, const char *name);
extern bool of_node_name_prefix(const struct device_node *np, const char *prefix);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *of_node_full_name(const struct device_node *np)
{
 return np ? np->full_name : "<no-node>";
}




extern struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name);
extern struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type);
extern struct device_node *of_find_compatible_node(struct device_node *from,
 const char *type, const char *compat);
extern struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match);

extern struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_find_node_by_path(const char *path)
{
 return of_find_node_opts_by_path(path, ((void *)0));
}

extern struct device_node *of_find_node_by_phandle(phandle handle);
extern struct device_node *of_get_parent(const struct device_node *node);
extern struct device_node *of_get_next_parent(struct device_node *node);
extern struct device_node *of_get_next_child(const struct device_node *node,
          struct device_node *prev);
extern struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev);

extern struct device_node *of_get_compatible_child(const struct device_node *parent,
     const char *compatible);
extern struct device_node *of_get_child_by_name(const struct device_node *node,
     const char *name);


extern struct device_node *of_find_next_cache_node(const struct device_node *);
extern int of_find_last_cache_level(unsigned int cpu);
extern struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name);

extern struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp);
extern int of_property_count_elems_of_size(const struct device_node *np,
    const char *propname, int elem_size);
extern int of_property_read_u32_index(const struct device_node *np,
           const char *propname,
           u32 index, u32 *out_value);
extern int of_property_read_u64_index(const struct device_node *np,
           const char *propname,
           u32 index, u64 *out_value);
extern int of_property_read_variable_u8_array(const struct device_node *np,
     const char *propname, u8 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u16_array(const struct device_node *np,
     const char *propname, u16 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u32_array(const struct device_node *np,
     const char *propname,
     u32 *out_values,
     size_t sz_min,
     size_t sz_max);
extern int of_property_read_u64(const struct device_node *np,
    const char *propname, u64 *out_value);
extern int of_property_read_variable_u64_array(const struct device_node *np,
     const char *propname,
     u64 *out_values,
     size_t sz_min,
     size_t sz_max);

extern int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string);
extern int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string);
extern int of_property_read_string_helper(const struct device_node *np,
           const char *propname,
           const char **out_strs, size_t sz, int index);
extern int of_device_is_compatible(const struct device_node *device,
       const char *);
extern int of_device_compatible_match(struct device_node *device,
          const char *const *compat);
extern bool of_device_is_available(const struct device_node *device);
extern bool of_device_is_big_endian(const struct device_node *device);
extern const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp);
extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
extern struct device_node *of_get_next_cpu_node(struct device_node *prev);
extern struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
       int index);




extern int of_n_addr_cells(struct device_node *np);
extern int of_n_size_cells(struct device_node *np);
extern const struct of_device_id *of_match_node(
 const struct of_device_id *matches, const struct device_node *node);
extern int of_modalias_node(struct device_node *node, char *modalias, int len);
extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
extern struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index);
extern int of_parse_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_args_map(const struct device_node *np,
 const char *list_name, const char *stem_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args);
extern int of_count_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name);


extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count);

extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size);

extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
extern int of_alias_get_id(struct device_node *np, const char *stem);
extern int of_alias_get_highest_id(const char *stem);
extern int of_alias_get_alias_list(const struct of_device_id *matches,
       const char *stem, unsigned long *bitmap,
       unsigned int nbits);

extern int of_machine_is_compatible(const char *compat);

extern int of_add_property(struct device_node *np, struct property *prop);
extern int of_remove_property(struct device_node *np, struct property *prop);
extern int of_update_property(struct device_node *np, struct property *newprop);
# 413 "./include/linux/of.h"
extern int of_attach_node(struct device_node *);
extern int of_detach_node(struct device_node *);
# 438 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u8_array(const struct device_node *np,
         const char *propname,
         u8 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u8_array(np, propname, out_values,
           sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 470 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u16_array(const struct device_node *np,
          const char *propname,
          u16 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u16_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 500 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u32_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 530 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u64_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 550 "./include/linux/of.h"
const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
          u32 *pu);







const char *of_prop_next_string(struct property *prop, const char *cur);

bool of_console_check(struct device_node *dn, char *name, int index);

extern int of_cpu_node_to_id(struct device_node *np);

int of_map_id(struct device_node *np, u32 id,
        const char *map_name, const char *map_mask_name,
        struct device_node **target, u32 *id_out);

phys_addr_t of_dma_get_max_cpu_address(struct device_node *np);

struct kimage;
void *of_kexec_alloc_and_setup_fdt(const struct kimage *image,
       unsigned long initrd_load_addr,
       unsigned long initrd_len,
       const char *cmdline, size_t extra_fdt_size);
int ima_get_kexec_buffer(void **addr, size_t *size);
int ima_free_kexec_buffer(void);
# 1036 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_prop_val_eq(struct property *p1, struct property *p2)
{
 return p1->length == p2->length &&
        !memcmp(p1->value, p2->value, (size_t)p1->length);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_to_nid(struct device_node *device)
{
 return (-1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_numa_init(void)
{
 return -38;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *of_node_get_device_type(const struct device_node *np)
{
 return of_get_property(np, "device_type", ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_node_is_type(const struct device_node *np, const char *type)
{
 const char *match = of_node_get_device_type(np);

 return np && match && type && !strcmp(match, type);
}
# 1092 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 1111 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 1130 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 1149 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 1168 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 1188 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, ((void *)0), 0, 0);
}
# 1213 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 1230 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, ((void *)0));

 return prop ? true : false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 1315 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1355 "./include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef int (*of_init_fn_1_ret)(struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1380 "./include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1398 "./include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};
# 1453 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_reconfig_notifier_register(struct notifier_block *nb)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_reconfig_notifier_unregister(struct notifier_block *nb)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_reconfig_notify(unsigned long action,
         struct of_reconfig_data *arg)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_reconfig_get_state_change(unsigned long action,
      struct of_reconfig_data *arg)
{
 return -22;
}
# 1479 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}





enum of_overlay_notify_action {
 OF_OVERLAY_PRE_APPLY = 0,
 OF_OVERLAY_POST_APPLY,
 OF_OVERLAY_PRE_REMOVE,
 OF_OVERLAY_POST_REMOVE,
};

struct of_overlay_notify_data {
 struct device_node *overlay;
 struct device_node *target;
};
# 1512 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_overlay_fdt_apply(void *overlay_fdt, u32 overlay_fdt_size,
           int *ovcs_id)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_overlay_remove(int *ovcs_id)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_overlay_remove_all(void)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_overlay_notifier_register(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_overlay_notifier_unregister(struct notifier_block *nb)
{
 return 0;
}
# 36 "./include/linux/irqdomain.h" 2



struct device_node;
struct fwnode_handle;
struct irq_domain;
struct irq_chip;
struct irq_data;
struct irq_desc;
struct cpumask;
struct seq_file;
struct irq_affinity_desc;
# 61 "./include/linux/irqdomain.h"
struct irq_fwspec {
 struct fwnode_handle *fwnode;
 int param_count;
 u32 param[16];
};
# 74 "./include/linux/irqdomain.h"
enum irq_domain_bus_token {
 DOMAIN_BUS_ANY = 0,
 DOMAIN_BUS_WIRED,
 DOMAIN_BUS_GENERIC_MSI,
 DOMAIN_BUS_PCI_MSI,
 DOMAIN_BUS_PLATFORM_MSI,
 DOMAIN_BUS_NEXUS,
 DOMAIN_BUS_IPI,
 DOMAIN_BUS_FSL_MC_MSI,
 DOMAIN_BUS_TI_SCI_INTA_MSI,
 DOMAIN_BUS_WAKEUP,
 DOMAIN_BUS_VMD_MSI,
};
# 103 "./include/linux/irqdomain.h"
struct irq_domain_ops {
 int (*match)(struct irq_domain *d, struct device_node *node,
       enum irq_domain_bus_token bus_token);
 int (*select)(struct irq_domain *d, struct irq_fwspec *fwspec,
        enum irq_domain_bus_token bus_token);
 int (*map)(struct irq_domain *d, unsigned int virq, irq_hw_number_t hw);
 void (*unmap)(struct irq_domain *d, unsigned int virq);
 int (*xlate)(struct irq_domain *d, struct device_node *node,
       const u32 *intspec, unsigned int intsize,
       unsigned long *out_hwirq, unsigned int *out_type);


 int (*alloc)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs, void *arg);
 void (*free)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs);
 int (*activate)(struct irq_domain *d, struct irq_data *irqd, bool reserve);
 void (*deactivate)(struct irq_domain *d, struct irq_data *irq_data);
 int (*translate)(struct irq_domain *d, struct irq_fwspec *fwspec,
    unsigned long *out_hwirq, unsigned int *out_type);





};

extern struct irq_domain_ops irq_generic_chip_ops;

struct irq_domain_chip_generic;
# 158 "./include/linux/irqdomain.h"
struct irq_domain {
 struct list_head link;
 const char *name;
 const struct irq_domain_ops *ops;
 void *host_data;
 unsigned int flags;
 unsigned int mapcount;


 struct fwnode_handle *fwnode;
 enum irq_domain_bus_token bus_token;
 struct irq_domain_chip_generic *gc;

 struct irq_domain *parent;



 irq_hw_number_t hwirq_max;
 unsigned int revmap_size;
 struct xarray revmap_tree;
 struct mutex revmap_mutex;
 struct irq_data *revmap[];
};


enum {

 IRQ_DOMAIN_FLAG_HIERARCHY = (1 << 0),


 IRQ_DOMAIN_NAME_ALLOCATED = (1 << 1),


 IRQ_DOMAIN_FLAG_IPI_PER_CPU = (1 << 2),


 IRQ_DOMAIN_FLAG_IPI_SINGLE = (1 << 3),


 IRQ_DOMAIN_FLAG_MSI = (1 << 4),


 IRQ_DOMAIN_FLAG_MSI_REMAP = (1 << 5),






 IRQ_DOMAIN_MSI_NOMASK_QUIRK = (1 << 6),


 IRQ_DOMAIN_FLAG_NO_MAP = (1 << 7),






 IRQ_DOMAIN_FLAG_NONCORE = (1 << 16),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *irq_domain_get_of_node(struct irq_domain *d)
{
 return ({ typeof(d->fwnode) __to_of_node_fwnode = (d->fwnode); is_of_node(__to_of_node_fwnode) ? ({ void *__mptr = (void *)(__to_of_node_fwnode); do { extern void __compiletime_assert_292(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(__to_of_node_fwnode)), typeof(((struct device_node *)0)->fwnode)) && !__builtin_types_compatible_p(typeof(*(__to_of_node_fwnode)), typeof(void))))) __compiletime_assert_292(); } while (0); ((struct device_node *)(__mptr - __builtin_offsetof(struct device_node, fwnode))); }) : ((void *)0); });
}


struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int type, int id,
      const char *name, phys_addr_t *pa);

enum {
 IRQCHIP_FWNODE_REAL,
 IRQCHIP_FWNODE_NAMED,
 IRQCHIP_FWNODE_NAMED_ID,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct fwnode_handle *irq_domain_alloc_named_fwnode(const char *name)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED, 0, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct fwnode_handle *irq_domain_alloc_named_id_fwnode(const char *name, int id)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED_ID, id, name,
      ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *irq_domain_alloc_fwnode(phys_addr_t *pa)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_REAL, 0, ((void *)0), pa);
}

void irq_domain_free_fwnode(struct fwnode_handle *fwnode);
struct irq_domain *__irq_domain_add(struct fwnode_handle *fwnode, int size,
        irq_hw_number_t hwirq_max, int direct_max,
        const struct irq_domain_ops *ops,
        void *host_data);
struct irq_domain *irq_domain_create_simple(struct fwnode_handle *fwnode,
         unsigned int size,
         unsigned int first_irq,
         const struct irq_domain_ops *ops,
         void *host_data);
struct irq_domain *irq_domain_add_legacy(struct device_node *of_node,
      unsigned int size,
      unsigned int first_irq,
      irq_hw_number_t first_hwirq,
      const struct irq_domain_ops *ops,
      void *host_data);
struct irq_domain *irq_domain_create_legacy(struct fwnode_handle *fwnode,
         unsigned int size,
         unsigned int first_irq,
         irq_hw_number_t first_hwirq,
         const struct irq_domain_ops *ops,
         void *host_data);
extern struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *fwspec,
         enum irq_domain_bus_token bus_token);
extern bool irq_domain_check_msi_remap(void);
extern void irq_set_default_host(struct irq_domain *host);
extern struct irq_domain *irq_get_default_host(void);
extern int irq_domain_alloc_descs(int virq, unsigned int nr_irqs,
      irq_hw_number_t hwirq, int node,
      const struct irq_affinity_desc *affinity);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *of_node_to_fwnode(struct device_node *node)
{
 return node ? &node->fwnode : ((void *)0);
}

extern const struct fwnode_operations irqchip_fwnode_ops;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_fwnode_irqchip(struct fwnode_handle *fwnode)
{
 return fwnode && fwnode->ops == &irqchip_fwnode_ops;
}

extern void irq_domain_update_bus_token(struct irq_domain *domain,
     enum irq_domain_bus_token bus_token);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct irq_domain *irq_find_matching_fwnode(struct fwnode_handle *fwnode,
         enum irq_domain_bus_token bus_token)
{
 struct irq_fwspec fwspec = {
  .fwnode = fwnode,
 };

 return irq_find_matching_fwspec(&fwspec, bus_token);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_find_matching_host(struct device_node *node,
       enum irq_domain_bus_token bus_token)
{
 return irq_find_matching_fwnode(of_node_to_fwnode(node), bus_token);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_find_host(struct device_node *node)
{
 struct irq_domain *d;

 d = irq_find_matching_host(node, DOMAIN_BUS_WIRED);
 if (!d)
  d = irq_find_matching_host(node, DOMAIN_BUS_ANY);

 return d;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_simple(struct device_node *of_node,
             unsigned int size,
             unsigned int first_irq,
             const struct irq_domain_ops *ops,
             void *host_data)
{
 return irq_domain_create_simple(of_node_to_fwnode(of_node), size, first_irq, ops, host_data);
}
# 343 "./include/linux/irqdomain.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_linear(struct device_node *of_node,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), size, size, 0, ops, host_data);
}
# 363 "./include/linux/irqdomain.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_tree(struct device_node *of_node,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), 0, ~0, 0, ops, host_data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_create_linear(struct fwnode_handle *fwnode,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, size, size, 0, ops, host_data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_create_tree(struct fwnode_handle *fwnode,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, 0, ~0, 0, ops, host_data);
}

extern void irq_domain_remove(struct irq_domain *host);

extern int irq_domain_associate(struct irq_domain *domain, unsigned int irq,
     irq_hw_number_t hwirq);
extern void irq_domain_associate_many(struct irq_domain *domain,
          unsigned int irq_base,
          irq_hw_number_t hwirq_base, int count);

extern unsigned int irq_create_mapping_affinity(struct irq_domain *host,
          irq_hw_number_t hwirq,
          const struct irq_affinity_desc *affinity);
extern unsigned int irq_create_fwspec_mapping(struct irq_fwspec *fwspec);
extern void irq_dispose_mapping(unsigned int virq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_create_mapping(struct irq_domain *host,
           irq_hw_number_t hwirq)
{
 return irq_create_mapping_affinity(host, hwirq, ((void *)0));
}

extern struct irq_desc *__irq_resolve_mapping(struct irq_domain *domain,
           irq_hw_number_t hwirq,
           unsigned int *irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_desc *irq_resolve_mapping(struct irq_domain *domain,
         irq_hw_number_t hwirq)
{
 return __irq_resolve_mapping(domain, hwirq, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_find_mapping(struct irq_domain *domain,
         irq_hw_number_t hwirq)
{
 unsigned int irq;

 if (__irq_resolve_mapping(domain, hwirq, &irq))
  return irq;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_linear_revmap(struct irq_domain *domain,
          irq_hw_number_t hwirq)
{
 return irq_find_mapping(domain, hwirq);
}

extern const struct irq_domain_ops irq_domain_simple_ops;


int irq_domain_xlate_onecell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_twocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_onetwocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);

int irq_domain_translate_twocell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);

int irq_domain_translate_onecell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);


int irq_reserve_ipi(struct irq_domain *domain, const struct cpumask *dest);
int irq_destroy_ipi(unsigned int irq, const struct cpumask *dest);


extern struct irq_data *irq_domain_get_irq_data(struct irq_domain *domain,
      unsigned int virq);
extern void irq_domain_set_info(struct irq_domain *domain, unsigned int virq,
    irq_hw_number_t hwirq, struct irq_chip *chip,
    void *chip_data, irq_flow_handler_t handler,
    void *handler_data, const char *handler_name);
extern void irq_domain_reset_irq_data(struct irq_data *irq_data);

extern struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *parent,
   unsigned int flags, unsigned int size,
   struct fwnode_handle *fwnode,
   const struct irq_domain_ops *ops, void *host_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_hierarchy(struct irq_domain *parent,
         unsigned int flags,
         unsigned int size,
         struct device_node *node,
         const struct irq_domain_ops *ops,
         void *host_data)
{
 return irq_domain_create_hierarchy(parent, flags, size,
        of_node_to_fwnode(node),
        ops, host_data);
}

extern int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
       unsigned int nr_irqs, int node, void *arg,
       bool realloc,
       const struct irq_affinity_desc *affinity);
extern void irq_domain_free_irqs(unsigned int virq, unsigned int nr_irqs);
extern int irq_domain_activate_irq(struct irq_data *irq_data, bool early);
extern void irq_domain_deactivate_irq(struct irq_data *irq_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_domain_alloc_irqs(struct irq_domain *domain,
   unsigned int nr_irqs, int node, void *arg)
{
 return __irq_domain_alloc_irqs(domain, -1, nr_irqs, node, arg, false,
           ((void *)0));
}

extern int irq_domain_alloc_irqs_hierarchy(struct irq_domain *domain,
        unsigned int irq_base,
        unsigned int nr_irqs, void *arg);
extern int irq_domain_set_hwirq_and_chip(struct irq_domain *domain,
      unsigned int virq,
      irq_hw_number_t hwirq,
      struct irq_chip *chip,
      void *chip_data);
extern void irq_domain_free_irqs_common(struct irq_domain *domain,
     unsigned int virq,
     unsigned int nr_irqs);
extern void irq_domain_free_irqs_top(struct irq_domain *domain,
         unsigned int virq, unsigned int nr_irqs);

extern int irq_domain_push_irq(struct irq_domain *domain, int virq, void *arg);
extern int irq_domain_pop_irq(struct irq_domain *domain, int virq);

extern int irq_domain_alloc_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs, void *arg);

extern void irq_domain_free_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs);

extern int irq_domain_disconnect_hierarchy(struct irq_domain *domain,
        unsigned int virq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_hierarchy(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_HIERARCHY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_ipi(struct irq_domain *domain)
{
 return domain->flags &
  (IRQ_DOMAIN_FLAG_IPI_PER_CPU | IRQ_DOMAIN_FLAG_IPI_SINGLE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_ipi_per_cpu(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_PER_CPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_ipi_single(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_SINGLE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_msi(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_msi_remap(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI_REMAP;
}

extern bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *domain);
# 14 "./include/linux/acpi.h" 2








# 1 "./include/acpi/acpi.h" 1
# 22 "./include/acpi/acpi.h"
# 1 "./include/acpi/platform/acenv.h" 1
# 152 "./include/acpi/platform/acenv.h"
# 1 "./include/acpi/platform/acgcc.h" 1
# 153 "./include/acpi/platform/acenv.h" 2
# 163 "./include/acpi/platform/acenv.h"
# 1 "./include/acpi/platform/aclinux.h" 1
# 164 "./include/acpi/platform/acenv.h" 2
# 23 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/acnames.h" 1
# 24 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/actypes.h" 1
# 125 "./include/acpi/actypes.h"
typedef s64 acpi_native_int;

typedef u64 acpi_size;
typedef u64 acpi_io_address;
typedef u64 acpi_physical_address;
# 421 "./include/acpi/actypes.h"
typedef u32 acpi_status;
typedef u32 acpi_name;
typedef char *acpi_string;
typedef void *acpi_handle;
# 445 "./include/acpi/actypes.h"
typedef u16 acpi_owner_id;
# 472 "./include/acpi/actypes.h"
typedef u64 acpi_integer;
# 635 "./include/acpi/actypes.h"
typedef u32 acpi_object_type;
# 707 "./include/acpi/actypes.h"
typedef u32 acpi_event_type;
# 738 "./include/acpi/actypes.h"
typedef u32 acpi_event_status;
# 805 "./include/acpi/actypes.h"
typedef u8 acpi_adr_space_type;
# 899 "./include/acpi/actypes.h"
union acpi_object {
 acpi_object_type type;
 struct {
  acpi_object_type type;
  u64 value;
 } integer;

 struct {
  acpi_object_type type;
  u32 length;
  char *pointer;
 } string;

 struct {
  acpi_object_type type;
  u32 length;
  u8 *pointer;
 } buffer;

 struct {
  acpi_object_type type;
  u32 count;
  union acpi_object *elements;
 } package;

 struct {
  acpi_object_type type;
  acpi_object_type actual_type;
  acpi_handle handle;
 } reference;

 struct {
  acpi_object_type type;
  u32 proc_id;
  acpi_io_address pblk_address;
  u32 pblk_length;
 } processor;

 struct {
  acpi_object_type type;
  u32 system_level;
  u32 resource_order;
 } power_resource;
};




struct acpi_object_list {
 u32 count;
 union acpi_object *pointer;
};
# 969 "./include/acpi/actypes.h"
struct acpi_buffer {
 acpi_size length;
 void *pointer;
};
# 985 "./include/acpi/actypes.h"
struct acpi_predefined_names {
 const char *name;
 u8 type;
 char *val;
};
# 1002 "./include/acpi/actypes.h"
struct acpi_system_info {
 u32 acpi_ca_version;
 u32 flags;
 u32 timer_resolution;
 u32 reserved1;
 u32 reserved2;
 u32 debug_level;
 u32 debug_layer;
};




struct acpi_statistics {
 u32 sci_count;
 u32 gpe_count;
 u32 fixed_event_count[4 + 1];
 u32 method_count;
};




typedef u32
 ( * acpi_osd_handler) (void *context);

typedef void
 ( * acpi_osd_exec_callback) (void *context);




typedef
u32 (*acpi_sci_handler) (void *context);

typedef
void (*acpi_gbl_event_handler) (u32 event_type,
          acpi_handle device,
          u32 event_number, void *context);




typedef
u32(*acpi_event_handler) (void *context);

typedef
u32 (*acpi_gpe_handler) (acpi_handle gpe_device, u32 gpe_number, void *context);

typedef
void (*acpi_notify_handler) (acpi_handle device, u32 value, void *context);

typedef
void (*acpi_object_handler) (acpi_handle object, void *data);

typedef
acpi_status (*acpi_init_handler) (acpi_handle object, u32 function);



typedef
acpi_status (*acpi_exception_handler) (acpi_status aml_status,
           acpi_name name,
           u16 opcode,
           u32 aml_offset, void *context);



typedef
acpi_status (*acpi_table_handler) (u32 event, void *table, void *context);
# 1083 "./include/acpi/actypes.h"
typedef
acpi_status (*acpi_adr_space_handler) (u32 function,
           acpi_physical_address address,
           u32 bit_width,
           u64 *value,
           void *handler_context,
           void *region_context);





struct acpi_connection_info {
 u8 *connection;
 u16 length;
 u8 access_length;
};

typedef
acpi_status (*acpi_adr_space_setup) (acpi_handle region_handle,
         u32 function,
         void *handler_context,
         void **region_context);




typedef
acpi_status (*acpi_walk_callback) (acpi_handle object,
       u32 nesting_level,
       void *context, void **return_value);

typedef
u32 (*acpi_interface_handler) (acpi_string interface_name, u32 supported);
# 1141 "./include/acpi/actypes.h"
struct acpi_pnp_device_id {
 u32 length;
 char *string;
};

struct acpi_pnp_device_id_list {
 u32 count;
 u32 list_size;
 struct acpi_pnp_device_id ids[];
};





struct acpi_device_info {
 u32 info_size;
 u32 name;
 acpi_object_type type;
 u8 param_count;
 u16 valid;
 u8 flags;
 u8 highest_dstates[4];
 u8 lowest_dstates[5];
 u64 address;
 struct acpi_pnp_device_id hardware_id;
 struct acpi_pnp_device_id unique_id;
 struct acpi_pnp_device_id class_code;
 struct acpi_pnp_device_id_list compatible_id_list;
};
# 1197 "./include/acpi/actypes.h"
struct acpi_pci_id {
 u16 segment;
 u16 bus;
 u16 device;
 u16 function;
};

struct acpi_mem_mapping {
 acpi_physical_address physical_address;
 u8 *logical_address;
 acpi_size length;
 struct acpi_mem_mapping *next_mm;
};

struct acpi_mem_space_context {
 u32 length;
 acpi_physical_address address;
 struct acpi_mem_mapping *cur_mm;
 struct acpi_mem_mapping *first_mm;
};




struct acpi_memory_list {
 const char *list_name;
 void *list_head;
 u16 object_size;
 u16 max_depth;
 u16 current_depth;
# 1240 "./include/acpi/actypes.h"
};



typedef enum {
 ACPI_TRACE_AML_METHOD,
 ACPI_TRACE_AML_OPCODE,
 ACPI_TRACE_AML_REGION
} acpi_trace_event_type;
# 25 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/acexcep.h" 1
# 40 "./include/acpi/acexcep.h"
struct acpi_exception_info {
 char *name;




};
# 26 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/actbl.h" 1
# 47 "./include/acpi/actbl.h"
#pragma pack(1)
# 68 "./include/acpi/actbl.h"
struct acpi_table_header {
 char signature[4];
 u32 length;
 u8 revision;
 u8 checksum;
 char oem_id[6];
 char oem_table_id[8];
 u32 oem_revision;
 char asl_compiler_id[4];
 u32 asl_compiler_revision;
};
# 90 "./include/acpi/actbl.h"
struct acpi_generic_address {
 u8 space_id;
 u8 bit_width;
 u8 bit_offset;
 u8 access_width;
 u64 address;
};
# 105 "./include/acpi/actbl.h"
struct acpi_table_rsdp {
 char signature[8];
 u8 checksum;
 char oem_id[6];
 u8 revision;
 u32 rsdt_physical_address;
 u32 length;
 u64 xsdt_physical_address;
 u8 extended_checksum;
 u8 reserved[3];
};



struct acpi_rsdp_common {
 char signature[8];
 u8 checksum;
 char oem_id[6];
 u8 revision;
 u32 rsdt_physical_address;
};



struct acpi_rsdp_extension {
 u32 length;
 u64 xsdt_physical_address;
 u8 extended_checksum;
 u8 reserved[3];
};
# 143 "./include/acpi/actbl.h"
struct acpi_table_rsdt {
 struct acpi_table_header header;
 u32 table_offset_entry[1];
};

struct acpi_table_xsdt {
 struct acpi_table_header header;
 u64 table_offset_entry[1];
};
# 162 "./include/acpi/actbl.h"
struct acpi_table_facs {
 char signature[4];
 u32 length;
 u32 hardware_signature;
 u32 firmware_waking_vector;
 u32 global_lock;
 u32 flags;
 u64 xfirmware_waking_vector;
 u8 version;
 u8 reserved[3];
 u32 ospm_flags;
 u8 reserved1[24];
};
# 199 "./include/acpi/actbl.h"
struct acpi_table_fadt {
 struct acpi_table_header header;
 u32 facs;
 u32 dsdt;
 u8 model;
 u8 preferred_profile;
 u16 sci_interrupt;
 u32 smi_command;
 u8 acpi_enable;
 u8 acpi_disable;
 u8 s4_bios_request;
 u8 pstate_control;
 u32 pm1a_event_block;
 u32 pm1b_event_block;
 u32 pm1a_control_block;
 u32 pm1b_control_block;
 u32 pm2_control_block;
 u32 pm_timer_block;
 u32 gpe0_block;
 u32 gpe1_block;
 u8 pm1_event_length;
 u8 pm1_control_length;
 u8 pm2_control_length;
 u8 pm_timer_length;
 u8 gpe0_block_length;
 u8 gpe1_block_length;
 u8 gpe1_base;
 u8 cst_control;
 u16 c2_latency;
 u16 c3_latency;
 u16 flush_size;
 u16 flush_stride;
 u8 duty_offset;
 u8 duty_width;
 u8 day_alarm;
 u8 month_alarm;
 u8 century;
 u16 boot_flags;
 u8 reserved;
 u32 flags;
 struct acpi_generic_address reset_register;
 u8 reset_value;
 u16 arm_boot_flags;
 u8 minor_revision;
 u64 Xfacs;
 u64 Xdsdt;
 struct acpi_generic_address xpm1a_event_block;
 struct acpi_generic_address xpm1b_event_block;
 struct acpi_generic_address xpm1a_control_block;
 struct acpi_generic_address xpm1b_control_block;
 struct acpi_generic_address xpm2_control_block;
 struct acpi_generic_address xpm_timer_block;
 struct acpi_generic_address xgpe0_block;
 struct acpi_generic_address xgpe1_block;
 struct acpi_generic_address sleep_control;
 struct acpi_generic_address sleep_status;
 u64 hypervisor_id;
};
# 301 "./include/acpi/actbl.h"
enum acpi_preferred_pm_profiles {
 PM_UNSPECIFIED = 0,
 PM_DESKTOP = 1,
 PM_MOBILE = 2,
 PM_WORKSTATION = 3,
 PM_ENTERPRISE_SERVER = 4,
 PM_SOHO_SERVER = 5,
 PM_APPLIANCE_PC = 6,
 PM_PERFORMANCE_SERVER = 7,
 PM_TABLET = 8
};
# 322 "./include/acpi/actbl.h"
#pragma pack()




union acpi_name_union {
 u32 integer;
 char ascii[4];
};



struct acpi_table_desc {
 acpi_physical_address address;
 struct acpi_table_header *pointer;
 u32 length;
 union acpi_name_union signature;
 acpi_owner_id owner_id;
 u8 flags;
 u16 validation_count;
};
# 370 "./include/acpi/actbl.h"
# 1 "./include/acpi/actbl1.h" 1
# 70 "./include/acpi/actbl1.h"
#pragma pack(1)
# 92 "./include/acpi/actbl1.h"
struct acpi_subtable_header {
 u8 type;
 u8 length;
};



struct acpi_whea_header {
 u8 action;
 u8 instruction;
 u8 flags;
 u8 reserved;
 struct acpi_generic_address register_region;
 u64 value;
 u64 mask;
};
# 118 "./include/acpi/actbl1.h"
struct acpi_table_asf {
 struct acpi_table_header header;
};



struct acpi_asf_header {
 u8 type;
 u8 reserved;
 u16 length;
};



enum acpi_asf_type {
 ACPI_ASF_TYPE_INFO = 0,
 ACPI_ASF_TYPE_ALERT = 1,
 ACPI_ASF_TYPE_CONTROL = 2,
 ACPI_ASF_TYPE_BOOT = 3,
 ACPI_ASF_TYPE_ADDRESS = 4,
 ACPI_ASF_TYPE_RESERVED = 5
};







struct acpi_asf_info {
 struct acpi_asf_header header;
 u8 min_reset_value;
 u8 min_poll_interval;
 u16 system_id;
 u32 mfg_id;
 u8 flags;
 u8 reserved2[3];
};







struct acpi_asf_alert {
 struct acpi_asf_header header;
 u8 assert_mask;
 u8 deassert_mask;
 u8 alerts;
 u8 data_length;
};

struct acpi_asf_alert_data {
 u8 address;
 u8 command;
 u8 mask;
 u8 value;
 u8 sensor_type;
 u8 type;
 u8 offset;
 u8 source_type;
 u8 severity;
 u8 sensor_number;
 u8 entity;
 u8 instance;
};



struct acpi_asf_remote {
 struct acpi_asf_header header;
 u8 controls;
 u8 data_length;
 u16 reserved2;
};

struct acpi_asf_control_data {
 u8 function;
 u8 address;
 u8 command;
 u8 value;
};



struct acpi_asf_rmcp {
 struct acpi_asf_header header;
 u8 capabilities[7];
 u8 completion_code;
 u32 enterprise_id;
 u8 command;
 u16 parameter;
 u16 boot_options;
 u16 oem_parameters;
};



struct acpi_asf_address {
 struct acpi_asf_header header;
 u8 eprom_address;
 u8 devices;
};
# 230 "./include/acpi/actbl1.h"
struct acpi_table_bert {
 struct acpi_table_header header;
 u32 region_length;
 u64 address;
};



struct acpi_bert_region {
 u32 block_status;
 u32 raw_data_offset;
 u32 raw_data_length;
 u32 data_length;
 u32 error_severity;
};
# 256 "./include/acpi/actbl1.h"
enum acpi_bert_error_severity {
 ACPI_BERT_ERROR_CORRECTABLE = 0,
 ACPI_BERT_ERROR_FATAL = 1,
 ACPI_BERT_ERROR_CORRECTED = 2,
 ACPI_BERT_ERROR_NONE = 3,
 ACPI_BERT_ERROR_RESERVED = 4
};
# 276 "./include/acpi/actbl1.h"
struct acpi_table_bgrt {
 struct acpi_table_header header;
 u16 version;
 u8 status;
 u8 image_type;
 u64 image_address;
 u32 image_offset_x;
 u32 image_offset_y;
};
# 300 "./include/acpi/actbl1.h"
struct acpi_table_boot {
 struct acpi_table_header header;
 u8 cmos_index;
 u8 reserved[3];
};
# 315 "./include/acpi/actbl1.h"
struct acpi_table_cedt {
 struct acpi_table_header header;
};



struct acpi_cedt_header {
 u8 type;
 u8 reserved;
 u16 length;
};



enum acpi_cedt_type {
 ACPI_CEDT_TYPE_CHBS = 0,
 ACPI_CEDT_TYPE_CFMWS = 1,
 ACPI_CEDT_TYPE_RESERVED = 2,
};
# 351 "./include/acpi/actbl1.h"
struct acpi_cedt_chbs {
 struct acpi_cedt_header header;
 u32 uid;
 u32 cxl_version;
 u32 reserved;
 u64 base;
 u64 length;
};



struct acpi_cedt_cfmws {
 struct acpi_cedt_header header;
 u32 reserved1;
 u64 base_hpa;
 u64 window_size;
 u8 interleave_ways;
 u8 interleave_arithmetic;
 u16 reserved2;
 u32 granularity;
 u16 restrictions;
 u16 qtg_id;
 u32 interleave_targets[];
};
# 395 "./include/acpi/actbl1.h"
struct acpi_table_cpep {
 struct acpi_table_header header;
 u64 reserved;
};



struct acpi_cpep_polling {
 struct acpi_subtable_header header;
 u8 id;
 u8 eid;
 u32 interval;
};
# 418 "./include/acpi/actbl1.h"
struct acpi_table_csrt {
 struct acpi_table_header header;
};



struct acpi_csrt_group {
 u32 length;
 u32 vendor_id;
 u32 subvendor_id;
 u16 device_id;
 u16 subdevice_id;
 u16 revision;
 u16 reserved;
 u32 shared_info_length;


};



struct acpi_csrt_shared_info {
 u16 major_version;
 u16 minor_version;
 u32 mmio_base_low;
 u32 mmio_base_high;
 u32 gsi_interrupt;
 u8 interrupt_polarity;
 u8 interrupt_mode;
 u8 num_channels;
 u8 dma_address_width;
 u16 base_request_line;
 u16 num_handshake_signals;
 u32 max_block_size;


};



struct acpi_csrt_descriptor {
 u32 length;
 u16 type;
 u16 subtype;
 u32 uid;


};
# 490 "./include/acpi/actbl1.h"
struct acpi_table_dbg2 {
 struct acpi_table_header header;
 u32 info_offset;
 u32 info_count;
};

struct acpi_dbg2_header {
 u32 info_offset;
 u32 info_count;
};



struct acpi_dbg2_device {
 u8 revision;
 u16 length;
 u8 register_count;
 u16 namepath_length;
 u16 namepath_offset;
 u16 oem_data_length;
 u16 oem_data_offset;
 u16 port_type;
 u16 port_subtype;
 u16 reserved;
 u16 base_address_offset;
 u16 address_size_offset;







};
# 569 "./include/acpi/actbl1.h"
struct acpi_table_dbgp {
 struct acpi_table_header header;
 u8 type;
 u8 reserved[3];
 struct acpi_generic_address debug_port;
};
# 586 "./include/acpi/actbl1.h"
struct acpi_table_dmar {
 struct acpi_table_header header;
 u8 width;
 u8 flags;
 u8 reserved[10];
};
# 601 "./include/acpi/actbl1.h"
struct acpi_dmar_header {
 u16 type;
 u16 length;
};



enum acpi_dmar_type {
 ACPI_DMAR_TYPE_HARDWARE_UNIT = 0,
 ACPI_DMAR_TYPE_RESERVED_MEMORY = 1,
 ACPI_DMAR_TYPE_ROOT_ATS = 2,
 ACPI_DMAR_TYPE_HARDWARE_AFFINITY = 3,
 ACPI_DMAR_TYPE_NAMESPACE = 4,
 ACPI_DMAR_TYPE_SATC = 5,
 ACPI_DMAR_TYPE_RESERVED = 6
};



struct acpi_dmar_device_scope {
 u8 entry_type;
 u8 length;
 u16 reserved;
 u8 enumeration_id;
 u8 bus;
};



enum acpi_dmar_scope_type {
 ACPI_DMAR_SCOPE_TYPE_NOT_USED = 0,
 ACPI_DMAR_SCOPE_TYPE_ENDPOINT = 1,
 ACPI_DMAR_SCOPE_TYPE_BRIDGE = 2,
 ACPI_DMAR_SCOPE_TYPE_IOAPIC = 3,
 ACPI_DMAR_SCOPE_TYPE_HPET = 4,
 ACPI_DMAR_SCOPE_TYPE_NAMESPACE = 5,
 ACPI_DMAR_SCOPE_TYPE_RESERVED = 6
};

struct acpi_dmar_pci_path {
 u8 device;
 u8 function;
};







struct acpi_dmar_hardware_unit {
 struct acpi_dmar_header header;
 u8 flags;
 u8 reserved;
 u16 segment;
 u64 address;
};







struct acpi_dmar_reserved_memory {
 struct acpi_dmar_header header;
 u16 reserved;
 u16 segment;
 u64 base_address;
 u64 end_address;
};







struct acpi_dmar_atsr {
 struct acpi_dmar_header header;
 u8 flags;
 u8 reserved;
 u16 segment;
};







struct acpi_dmar_rhsa {
 struct acpi_dmar_header header;
 u32 reserved;
 u64 base_address;
 u32 proximity_domain;
};



struct acpi_dmar_andd {
 struct acpi_dmar_header header;
 u8 reserved[3];
 u8 device_number;
 char device_name[1];
};



struct acpi_dmar_satc {
 struct acpi_dmar_header header;
 u8 flags;
 u8 reserved;
 u16 segment;
};
# 724 "./include/acpi/actbl1.h"
struct acpi_table_drtm {
 struct acpi_table_header header;
 u64 entry_base_address;
 u64 entry_length;
 u32 entry_address32;
 u64 entry_address64;
 u64 exit_address;
 u64 log_area_address;
 u32 log_area_length;
 u64 arch_dependent_address;
 u32 flags;
};
# 746 "./include/acpi/actbl1.h"
struct acpi_drtm_vtable_list {
 u32 validated_table_count;
 u64 validated_tables[1];
};





struct acpi_drtm_resource {
 u8 size[7];
 u8 type;
 u64 address;
};

struct acpi_drtm_resource_list {
 u32 resource_count;
 struct acpi_drtm_resource resources[1];
};



struct acpi_drtm_dps_id {
 u32 dps_id_length;
 u8 dps_id[16];
};
# 780 "./include/acpi/actbl1.h"
struct acpi_table_ecdt {
 struct acpi_table_header header;
 struct acpi_generic_address control;
 struct acpi_generic_address data;
 u32 uid;
 u8 gpe;
 u8 id[1];
};
# 796 "./include/acpi/actbl1.h"
struct acpi_table_einj {
 struct acpi_table_header header;
 u32 header_length;
 u8 flags;
 u8 reserved[3];
 u32 entries;
};



struct acpi_einj_entry {
 struct acpi_whea_header whea_header;
};







enum acpi_einj_actions {
 ACPI_EINJ_BEGIN_OPERATION = 0,
 ACPI_EINJ_GET_TRIGGER_TABLE = 1,
 ACPI_EINJ_SET_ERROR_TYPE = 2,
 ACPI_EINJ_GET_ERROR_TYPE = 3,
 ACPI_EINJ_END_OPERATION = 4,
 ACPI_EINJ_EXECUTE_OPERATION = 5,
 ACPI_EINJ_CHECK_BUSY_STATUS = 6,
 ACPI_EINJ_GET_COMMAND_STATUS = 7,
 ACPI_EINJ_SET_ERROR_TYPE_WITH_ADDRESS = 8,
 ACPI_EINJ_GET_EXECUTE_TIMINGS = 9,
 ACPI_EINJ_ACTION_RESERVED = 10,
 ACPI_EINJ_TRIGGER_ERROR = 0xFF
};



enum acpi_einj_instructions {
 ACPI_EINJ_READ_REGISTER = 0,
 ACPI_EINJ_READ_REGISTER_VALUE = 1,
 ACPI_EINJ_WRITE_REGISTER = 2,
 ACPI_EINJ_WRITE_REGISTER_VALUE = 3,
 ACPI_EINJ_NOOP = 4,
 ACPI_EINJ_FLUSH_CACHELINE = 5,
 ACPI_EINJ_INSTRUCTION_RESERVED = 6
};

struct acpi_einj_error_type_with_addr {
 u32 error_type;
 u32 vendor_struct_offset;
 u32 flags;
 u32 apic_id;
 u64 address;
 u64 range;
 u32 pcie_id;
};

struct acpi_einj_vendor {
 u32 length;
 u32 pcie_id;
 u16 vendor_id;
 u16 device_id;
 u8 revision_id;
 u8 reserved[3];
};



struct acpi_einj_trigger {
 u32 header_size;
 u32 revision;
 u32 table_size;
 u32 entry_count;
};



enum acpi_einj_command_status {
 ACPI_EINJ_SUCCESS = 0,
 ACPI_EINJ_FAILURE = 1,
 ACPI_EINJ_INVALID_ACCESS = 2,
 ACPI_EINJ_STATUS_RESERVED = 3
};
# 903 "./include/acpi/actbl1.h"
struct acpi_table_erst {
 struct acpi_table_header header;
 u32 header_length;
 u32 reserved;
 u32 entries;
};



struct acpi_erst_entry {
 struct acpi_whea_header whea_header;
};







enum acpi_erst_actions {
 ACPI_ERST_BEGIN_WRITE = 0,
 ACPI_ERST_BEGIN_READ = 1,
 ACPI_ERST_BEGIN_CLEAR = 2,
 ACPI_ERST_END = 3,
 ACPI_ERST_SET_RECORD_OFFSET = 4,
 ACPI_ERST_EXECUTE_OPERATION = 5,
 ACPI_ERST_CHECK_BUSY_STATUS = 6,
 ACPI_ERST_GET_COMMAND_STATUS = 7,
 ACPI_ERST_GET_RECORD_ID = 8,
 ACPI_ERST_SET_RECORD_ID = 9,
 ACPI_ERST_GET_RECORD_COUNT = 10,
 ACPI_ERST_BEGIN_DUMMY_WRIITE = 11,
 ACPI_ERST_NOT_USED = 12,
 ACPI_ERST_GET_ERROR_RANGE = 13,
 ACPI_ERST_GET_ERROR_LENGTH = 14,
 ACPI_ERST_GET_ERROR_ATTRIBUTES = 15,
 ACPI_ERST_EXECUTE_TIMINGS = 16,
 ACPI_ERST_ACTION_RESERVED = 17
};



enum acpi_erst_instructions {
 ACPI_ERST_READ_REGISTER = 0,
 ACPI_ERST_READ_REGISTER_VALUE = 1,
 ACPI_ERST_WRITE_REGISTER = 2,
 ACPI_ERST_WRITE_REGISTER_VALUE = 3,
 ACPI_ERST_NOOP = 4,
 ACPI_ERST_LOAD_VAR1 = 5,
 ACPI_ERST_LOAD_VAR2 = 6,
 ACPI_ERST_STORE_VAR1 = 7,
 ACPI_ERST_ADD = 8,
 ACPI_ERST_SUBTRACT = 9,
 ACPI_ERST_ADD_VALUE = 10,
 ACPI_ERST_SUBTRACT_VALUE = 11,
 ACPI_ERST_STALL = 12,
 ACPI_ERST_STALL_WHILE_TRUE = 13,
 ACPI_ERST_SKIP_NEXT_IF_TRUE = 14,
 ACPI_ERST_GOTO = 15,
 ACPI_ERST_SET_SRC_ADDRESS_BASE = 16,
 ACPI_ERST_SET_DST_ADDRESS_BASE = 17,
 ACPI_ERST_MOVE_DATA = 18,
 ACPI_ERST_INSTRUCTION_RESERVED = 19
};



enum acpi_erst_command_status {
 ACPI_ERST_SUCCESS = 0,
 ACPI_ERST_NO_SPACE = 1,
 ACPI_ERST_NOT_AVAILABLE = 2,
 ACPI_ERST_FAILURE = 3,
 ACPI_ERST_RECORD_EMPTY = 4,
 ACPI_ERST_NOT_FOUND = 5,
 ACPI_ERST_STATUS_RESERVED = 6
};



struct acpi_erst_info {
 u16 signature;
 u8 data[48];
};
# 994 "./include/acpi/actbl1.h"
struct acpi_table_fpdt {
 struct acpi_table_header header;
};



struct acpi_fpdt_header {
 u16 type;
 u8 length;
 u8 revision;
};



enum acpi_fpdt_type {
 ACPI_FPDT_TYPE_BOOT = 0,
 ACPI_FPDT_TYPE_S3PERF = 1
};







struct acpi_fpdt_boot_pointer {
 struct acpi_fpdt_header header;
 u8 reserved[4];
 u64 address;
};



struct acpi_fpdt_s3pt_pointer {
 struct acpi_fpdt_header header;
 u8 reserved[4];
 u64 address;
};





struct acpi_table_s3pt {
 u8 signature[4];
 u32 length;
};







enum acpi_s3pt_type {
 ACPI_S3PT_TYPE_RESUME = 0,
 ACPI_S3PT_TYPE_SUSPEND = 1,
 ACPI_FPDT_BOOT_PERFORMANCE = 2
};

struct acpi_s3pt_resume {
 struct acpi_fpdt_header header;
 u32 resume_count;
 u64 full_resume;
 u64 average_resume;
};

struct acpi_s3pt_suspend {
 struct acpi_fpdt_header header;
 u64 suspend_start;
 u64 suspend_end;
};




struct acpi_fpdt_boot {
 struct acpi_fpdt_header header;
 u8 reserved[4];
 u64 reset_end;
 u64 load_start;
 u64 startup_start;
 u64 exit_services_entry;
 u64 exit_services_exit;
};
# 1087 "./include/acpi/actbl1.h"
struct acpi_table_gtdt {
 struct acpi_table_header header;
 u64 counter_block_addresss;
 u32 reserved;
 u32 secure_el1_interrupt;
 u32 secure_el1_flags;
 u32 non_secure_el1_interrupt;
 u32 non_secure_el1_flags;
 u32 virtual_timer_interrupt;
 u32 virtual_timer_flags;
 u32 non_secure_el2_interrupt;
 u32 non_secure_el2_flags;
 u64 counter_read_block_address;
 u32 platform_timer_count;
 u32 platform_timer_offset;
};







struct acpi_gtdt_el2 {
 u32 virtual_el2_timer_gsiv;
 u32 virtual_el2_timer_flags;
};



struct acpi_gtdt_header {
 u8 type;
 u16 length;
};



enum acpi_gtdt_type {
 ACPI_GTDT_TYPE_TIMER_BLOCK = 0,
 ACPI_GTDT_TYPE_WATCHDOG = 1,
 ACPI_GTDT_TYPE_RESERVED = 2
};





struct acpi_gtdt_timer_block {
 struct acpi_gtdt_header header;
 u8 reserved;
 u64 block_address;
 u32 timer_count;
 u32 timer_offset;
};



struct acpi_gtdt_timer_entry {
 u8 frame_number;
 u8 reserved[3];
 u64 base_address;
 u64 el0_base_address;
 u32 timer_interrupt;
 u32 timer_flags;
 u32 virtual_timer_interrupt;
 u32 virtual_timer_flags;
 u32 common_flags;
};
# 1168 "./include/acpi/actbl1.h"
struct acpi_gtdt_watchdog {
 struct acpi_gtdt_header header;
 u8 reserved;
 u64 refresh_frame_address;
 u64 control_frame_address;
 u32 timer_interrupt;
 u32 timer_flags;
};
# 1190 "./include/acpi/actbl1.h"
struct acpi_table_hest {
 struct acpi_table_header header;
 u32 error_source_count;
};



struct acpi_hest_header {
 u16 type;
 u16 source_id;
};



enum acpi_hest_types {
 ACPI_HEST_TYPE_IA32_CHECK = 0,
 ACPI_HEST_TYPE_IA32_CORRECTED_CHECK = 1,
 ACPI_HEST_TYPE_IA32_NMI = 2,
 ACPI_HEST_TYPE_NOT_USED3 = 3,
 ACPI_HEST_TYPE_NOT_USED4 = 4,
 ACPI_HEST_TYPE_NOT_USED5 = 5,
 ACPI_HEST_TYPE_AER_ROOT_PORT = 6,
 ACPI_HEST_TYPE_AER_ENDPOINT = 7,
 ACPI_HEST_TYPE_AER_BRIDGE = 8,
 ACPI_HEST_TYPE_GENERIC_ERROR = 9,
 ACPI_HEST_TYPE_GENERIC_ERROR_V2 = 10,
 ACPI_HEST_TYPE_IA32_DEFERRED_CHECK = 11,
 ACPI_HEST_TYPE_RESERVED = 12
};
# 1228 "./include/acpi/actbl1.h"
struct acpi_hest_ia_error_bank {
 u8 bank_number;
 u8 clear_status_on_init;
 u8 status_format;
 u8 reserved;
 u32 control_register;
 u64 control_data;
 u32 status_register;
 u32 address_register;
 u32 misc_register;
};



struct acpi_hest_aer_common {
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 bus;
 u16 device;
 u16 function;
 u16 device_control;
 u16 reserved2;
 u32 uncorrectable_mask;
 u32 uncorrectable_severity;
 u32 correctable_mask;
 u32 advanced_capabilities;
};
# 1275 "./include/acpi/actbl1.h"
struct acpi_hest_notify {
 u8 type;
 u8 length;
 u16 config_write_enable;
 u32 poll_interval;
 u32 vector;
 u32 polling_threshold_value;
 u32 polling_threshold_window;
 u32 error_threshold_value;
 u32 error_threshold_window;
};



enum acpi_hest_notify_types {
 ACPI_HEST_NOTIFY_POLLED = 0,
 ACPI_HEST_NOTIFY_EXTERNAL = 1,
 ACPI_HEST_NOTIFY_LOCAL = 2,
 ACPI_HEST_NOTIFY_SCI = 3,
 ACPI_HEST_NOTIFY_NMI = 4,
 ACPI_HEST_NOTIFY_CMCI = 5,
 ACPI_HEST_NOTIFY_MCE = 6,
 ACPI_HEST_NOTIFY_GPIO = 7,
 ACPI_HEST_NOTIFY_SEA = 8,
 ACPI_HEST_NOTIFY_SEI = 9,
 ACPI_HEST_NOTIFY_GSIV = 10,
 ACPI_HEST_NOTIFY_SOFTWARE_DELEGATED = 11,
 ACPI_HEST_NOTIFY_RESERVED = 12
};
# 1320 "./include/acpi/actbl1.h"
struct acpi_hest_ia_machine_check {
 struct acpi_hest_header header;
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u64 global_capability_data;
 u64 global_control_data;
 u8 num_hardware_banks;
 u8 reserved3[7];
};



struct acpi_hest_ia_corrected {
 struct acpi_hest_header header;
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 struct acpi_hest_notify notify;
 u8 num_hardware_banks;
 u8 reserved2[3];
};



struct acpi_hest_ia_nmi {
 struct acpi_hest_header header;
 u32 reserved;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 max_raw_data_length;
};





struct acpi_hest_aer_root {
 struct acpi_hest_header header;
 struct acpi_hest_aer_common aer;
 u32 root_error_command;
};



struct acpi_hest_aer {
 struct acpi_hest_header header;
 struct acpi_hest_aer_common aer;
};



struct acpi_hest_aer_bridge {
 struct acpi_hest_header header;
 struct acpi_hest_aer_common aer;
 u32 uncorrectable_mask2;
 u32 uncorrectable_severity2;
 u32 advanced_capabilities2;
};



struct acpi_hest_generic {
 struct acpi_hest_header header;
 u16 related_source_id;
 u8 reserved;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 max_raw_data_length;
 struct acpi_generic_address error_status_address;
 struct acpi_hest_notify notify;
 u32 error_block_length;
};



struct acpi_hest_generic_v2 {
 struct acpi_hest_header header;
 u16 related_source_id;
 u8 reserved;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 max_raw_data_length;
 struct acpi_generic_address error_status_address;
 struct acpi_hest_notify notify;
 u32 error_block_length;
 struct acpi_generic_address read_ack_register;
 u64 read_ack_preserve;
 u64 read_ack_write;
};



struct acpi_hest_generic_status {
 u32 block_status;
 u32 raw_data_offset;
 u32 raw_data_length;
 u32 data_length;
 u32 error_severity;
};
# 1437 "./include/acpi/actbl1.h"
struct acpi_hest_generic_data {
 u8 section_type[16];
 u32 error_severity;
 u16 revision;
 u8 validation_bits;
 u8 flags;
 u32 error_data_length;
 u8 fru_id[16];
 u8 fru_text[20];
};



struct acpi_hest_generic_data_v300 {
 u8 section_type[16];
 u32 error_severity;
 u16 revision;
 u8 validation_bits;
 u8 flags;
 u32 error_data_length;
 u8 fru_id[16];
 u8 fru_text[20];
 u64 time_stamp;
};
# 1477 "./include/acpi/actbl1.h"
struct acpi_hest_ia_deferred_check {
 struct acpi_hest_header header;
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 struct acpi_hest_notify notify;
 u8 num_hardware_banks;
 u8 reserved2[3];
};
# 1496 "./include/acpi/actbl1.h"
struct acpi_table_hmat {
 struct acpi_table_header header;
 u32 reserved;
};



enum acpi_hmat_type {
 ACPI_HMAT_TYPE_PROXIMITY = 0,
 ACPI_HMAT_TYPE_LOCALITY = 1,
 ACPI_HMAT_TYPE_CACHE = 2,
 ACPI_HMAT_TYPE_RESERVED = 3
};

struct acpi_hmat_structure {
 u16 type;
 u16 reserved;
 u32 length;
};







struct acpi_hmat_proximity_domain {
 struct acpi_hmat_structure header;
 u16 flags;
 u16 reserved1;
 u32 processor_PD;
 u32 memory_PD;
 u32 reserved2;
 u64 reserved3;
 u64 reserved4;
};
# 1541 "./include/acpi/actbl1.h"
struct acpi_hmat_locality {
 struct acpi_hmat_structure header;
 u8 flags;
 u8 data_type;
 u8 min_transfer_size;
 u8 reserved1;
 u32 number_of_initiator_Pds;
 u32 number_of_target_Pds;
 u32 reserved2;
 u64 entry_base_unit;
};
# 1579 "./include/acpi/actbl1.h"
struct acpi_hmat_cache {
 struct acpi_hmat_structure header;
 u32 memory_PD;
 u32 reserved1;
 u64 cache_size;
 u32 cache_attributes;
 u16 reserved2;
 u16 number_of_SMBIOShandles;
};
# 1619 "./include/acpi/actbl1.h"
struct acpi_table_hpet {
 struct acpi_table_header header;
 u32 id;
 struct acpi_generic_address address;
 u8 sequence;
 u16 minimum_tick;
 u8 flags;
};







enum acpi_hpet_page_protect {
 ACPI_HPET_NO_PAGE_PROTECT = 0,
 ACPI_HPET_PAGE_PROTECT4 = 1,
 ACPI_HPET_PAGE_PROTECT64 = 2
};
# 1653 "./include/acpi/actbl1.h"
struct acpi_table_ibft {
 struct acpi_table_header header;
 u8 reserved[12];
};



struct acpi_ibft_header {
 u8 type;
 u8 version;
 u16 length;
 u8 index;
 u8 flags;
};



enum acpi_ibft_type {
 ACPI_IBFT_TYPE_NOT_USED = 0,
 ACPI_IBFT_TYPE_CONTROL = 1,
 ACPI_IBFT_TYPE_INITIATOR = 2,
 ACPI_IBFT_TYPE_NIC = 3,
 ACPI_IBFT_TYPE_TARGET = 4,
 ACPI_IBFT_TYPE_EXTENSIONS = 5,
 ACPI_IBFT_TYPE_RESERVED = 6
};



struct acpi_ibft_control {
 struct acpi_ibft_header header;
 u16 extensions;
 u16 initiator_offset;
 u16 nic0_offset;
 u16 target0_offset;
 u16 nic1_offset;
 u16 target1_offset;
};

struct acpi_ibft_initiator {
 struct acpi_ibft_header header;
 u8 sns_server[16];
 u8 slp_server[16];
 u8 primary_server[16];
 u8 secondary_server[16];
 u16 name_length;
 u16 name_offset;
};

struct acpi_ibft_nic {
 struct acpi_ibft_header header;
 u8 ip_address[16];
 u8 subnet_mask_prefix;
 u8 origin;
 u8 gateway[16];
 u8 primary_dns[16];
 u8 secondary_dns[16];
 u8 dhcp[16];
 u16 vlan;
 u8 mac_address[6];
 u16 pci_address;
 u16 name_length;
 u16 name_offset;
};

struct acpi_ibft_target {
 struct acpi_ibft_header header;
 u8 target_ip_address[16];
 u16 target_ip_socket;
 u8 target_boot_lun[8];
 u8 chap_type;
 u8 nic_association;
 u16 target_name_length;
 u16 target_name_offset;
 u16 chap_name_length;
 u16 chap_name_offset;
 u16 chap_secret_length;
 u16 chap_secret_offset;
 u16 reverse_chap_name_length;
 u16 reverse_chap_name_offset;
 u16 reverse_chap_secret_length;
 u16 reverse_chap_secret_offset;
};



#pragma pack()
# 371 "./include/acpi/actbl.h" 2
# 1 "./include/acpi/actbl2.h" 1
# 56 "./include/acpi/actbl2.h"
#pragma pack(1)
# 79 "./include/acpi/actbl2.h"
struct acpi_table_aest {
 struct acpi_table_header header;
 void *node_array[];
};



struct acpi_aest_hdr {
 u8 type;
 u16 length;
 u8 reserved;
 u32 node_specific_offset;
 u32 node_interface_offset;
 u32 node_interrupt_offset;
 u32 node_interrupt_count;
 u64 timestamp_rate;
 u64 reserved1;
 u64 error_injection_rate;
};
# 114 "./include/acpi/actbl2.h"
typedef struct acpi_aest_processor {
 u32 processor_id;
 u8 resource_type;
 u8 reserved;
 u8 flags;
 u8 revision;
 u64 processor_affinity;

} acpi_aest_processor;
# 133 "./include/acpi/actbl2.h"
typedef struct acpi_aest_processor_cache {
 u32 cache_reference;
 u32 reserved;

} acpi_aest_processor_cache;
# 148 "./include/acpi/actbl2.h"
typedef struct acpi_aest_processor_tlb {
 u32 tlb_level;
 u32 reserved;

} acpi_aest_processor_tlb;



typedef struct acpi_aest_processor_generic {
 u8 *resource;

} acpi_aest_processor_generic;



typedef struct acpi_aest_memory {
 u32 srat_proximity_domain;

} acpi_aest_memory;



typedef struct acpi_aest_smmu {
 u32 iort_node_reference;
 u32 subcomponent_reference;

} acpi_aest_smmu;



typedef struct acpi_aest_vendor {
 u32 acpi_hid;
 u32 acpi_uid;
 u8 vendor_specific_data[16];

} acpi_aest_vendor;



typedef struct acpi_aest_gic {
 u32 interface_type;
 u32 instance_id;

} acpi_aest_gic;
# 203 "./include/acpi/actbl2.h"
typedef struct acpi_aest_node_interface {
 u8 type;
 u8 reserved[3];
 u32 flags;
 u64 address;
 u32 error_record_index;
 u32 error_record_count;
 u64 error_record_implemented;
 u64 error_status_reporting;
 u64 addressing_mode;

} acpi_aest_node_interface;
# 224 "./include/acpi/actbl2.h"
typedef struct acpi_aest_node_interrupt {
 u8 type;
 u8 reserved[2];
 u8 flags;
 u32 gsiv;
 u8 iort_id;
 u8 reserved1[3];

} acpi_aest_node_interrupt;
# 249 "./include/acpi/actbl2.h"
struct acpi_table_bdat {
 struct acpi_table_header header;
 struct acpi_generic_address gas;
};
# 263 "./include/acpi/actbl2.h"
struct acpi_table_iort {
 struct acpi_table_header header;
 u32 node_count;
 u32 node_offset;
 u32 reserved;
};




struct acpi_iort_node {
 u8 type;
 u16 length;
 u8 revision;
 u32 identifier;
 u32 mapping_count;
 u32 mapping_offset;
 char node_data[1];
};



enum acpi_iort_node_type {
 ACPI_IORT_NODE_ITS_GROUP = 0x00,
 ACPI_IORT_NODE_NAMED_COMPONENT = 0x01,
 ACPI_IORT_NODE_PCI_ROOT_COMPLEX = 0x02,
 ACPI_IORT_NODE_SMMU = 0x03,
 ACPI_IORT_NODE_SMMU_V3 = 0x04,
 ACPI_IORT_NODE_PMCG = 0x05,
 ACPI_IORT_NODE_RMR = 0x06,
};

struct acpi_iort_id_mapping {
 u32 input_base;
 u32 id_count;
 u32 output_base;
 u32 output_reference;
 u32 flags;
};





struct acpi_iort_memory_access {
 u32 cache_coherency;
 u8 hints;
 u16 reserved;
 u8 memory_flags;
};
# 334 "./include/acpi/actbl2.h"
struct acpi_iort_its_group {
 u32 its_count;
 u32 identifiers[1];
};

struct acpi_iort_named_component {
 u32 node_flags;
 u64 memory_properties;
 u8 memory_address_limit;
 char device_name[1];
};






struct acpi_iort_root_complex {
 u64 memory_properties;
 u32 ats_attribute;
 u32 pci_segment_number;
 u8 memory_address_limit;
 u8 reserved[3];
};







struct acpi_iort_smmu {
 u64 base_address;
 u64 span;
 u32 model;
 u32 flags;
 u32 global_interrupt_offset;
 u32 context_interrupt_count;
 u32 context_interrupt_offset;
 u32 pmu_interrupt_count;
 u32 pmu_interrupt_offset;
 u64 interrupts[1];
};
# 394 "./include/acpi/actbl2.h"
struct acpi_iort_smmu_gsi {
 u32 nsg_irpt;
 u32 nsg_irpt_flags;
 u32 nsg_cfg_irpt;
 u32 nsg_cfg_irpt_flags;
};

struct acpi_iort_smmu_v3 {
 u64 base_address;
 u32 flags;
 u32 reserved;
 u64 vatos_address;
 u32 model;
 u32 event_gsiv;
 u32 pri_gsiv;
 u32 gerr_gsiv;
 u32 sync_gsiv;
 u32 pxm;
 u32 id_mapping_index;
};
# 427 "./include/acpi/actbl2.h"
struct acpi_iort_pmcg {
 u64 page0_base_address;
 u32 overflow_gsiv;
 u32 node_reference;
 u64 page1_base_address;
};

struct acpi_iort_rmr {
 u32 flags;
 u32 rmr_count;
 u32 rmr_offset;
};

struct acpi_iort_rmr_desc {
 u64 base_address;
 u64 length;
 u32 reserved;
};
# 456 "./include/acpi/actbl2.h"
struct acpi_table_ivrs {
 struct acpi_table_header header;
 u32 info;
 u64 reserved;
};
# 470 "./include/acpi/actbl2.h"
struct acpi_ivrs_header {
 u8 type;
 u8 flags;
 u16 length;
 u16 device_id;
};



enum acpi_ivrs_type {
 ACPI_IVRS_TYPE_HARDWARE1 = 0x10,
 ACPI_IVRS_TYPE_HARDWARE2 = 0x11,
 ACPI_IVRS_TYPE_HARDWARE3 = 0x40,
 ACPI_IVRS_TYPE_MEMORY1 = 0x20,
 ACPI_IVRS_TYPE_MEMORY2 = 0x21,
 ACPI_IVRS_TYPE_MEMORY3 = 0x22
};
# 509 "./include/acpi/actbl2.h"
struct acpi_ivrs_hardware_10 {
 struct acpi_ivrs_header header;
 u16 capability_offset;
 u64 base_address;
 u16 pci_segment_group;
 u16 info;
 u32 feature_reporting;
};



struct acpi_ivrs_hardware_11 {
 struct acpi_ivrs_header header;
 u16 capability_offset;
 u64 base_address;
 u16 pci_segment_group;
 u16 info;
 u32 attributes;
 u64 efr_register_image;
 u64 reserved;
};
# 542 "./include/acpi/actbl2.h"
struct acpi_ivrs_de_header {
 u8 type;
 u16 id;
 u8 data_setting;
};







enum acpi_ivrs_device_entry_type {


 ACPI_IVRS_TYPE_PAD4 = 0,
 ACPI_IVRS_TYPE_ALL = 1,
 ACPI_IVRS_TYPE_SELECT = 2,
 ACPI_IVRS_TYPE_START = 3,
 ACPI_IVRS_TYPE_END = 4,



 ACPI_IVRS_TYPE_PAD8 = 64,
 ACPI_IVRS_TYPE_NOT_USED = 65,
 ACPI_IVRS_TYPE_ALIAS_SELECT = 66,
 ACPI_IVRS_TYPE_ALIAS_START = 67,
 ACPI_IVRS_TYPE_EXT_SELECT = 70,
 ACPI_IVRS_TYPE_EXT_START = 71,
 ACPI_IVRS_TYPE_SPECIAL = 72,



 ACPI_IVRS_TYPE_HID = 240
};
# 589 "./include/acpi/actbl2.h"
struct acpi_ivrs_device4 {
 struct acpi_ivrs_de_header header;
};



struct acpi_ivrs_device8a {
 struct acpi_ivrs_de_header header;
 u8 reserved1;
 u16 used_id;
 u8 reserved2;
};



struct acpi_ivrs_device8b {
 struct acpi_ivrs_de_header header;
 u32 extended_data;
};







struct acpi_ivrs_device8c {
 struct acpi_ivrs_de_header header;
 u8 handle;
 u16 used_id;
 u8 variety;
};
# 629 "./include/acpi/actbl2.h"
struct acpi_ivrs_device_hid {
 struct acpi_ivrs_de_header header;
 u64 acpi_hid;
 u64 acpi_cid;
 u8 uid_type;
 u8 uid_length;
};
# 645 "./include/acpi/actbl2.h"
struct acpi_ivrs_memory {
 struct acpi_ivrs_header header;
 u16 aux_data;
 u64 reserved;
 u64 start_address;
 u64 memory_length;
};
# 661 "./include/acpi/actbl2.h"
struct acpi_table_lpit {
 struct acpi_table_header header;
};



struct acpi_lpit_header {
 u32 type;
 u32 length;
 u16 unique_id;
 u16 reserved;
 u32 flags;
};



enum acpi_lpit_type {
 ACPI_LPIT_TYPE_NATIVE_CSTATE = 0x00,
 ACPI_LPIT_TYPE_RESERVED = 0x01
};
# 693 "./include/acpi/actbl2.h"
struct acpi_lpit_native {
 struct acpi_lpit_header header;
 struct acpi_generic_address entry_trigger;
 u32 residency;
 u32 latency;
 struct acpi_generic_address residency_counter;
 u64 counter_frequency;
};
# 709 "./include/acpi/actbl2.h"
struct acpi_table_madt {
 struct acpi_table_header header;
 u32 address;
 u32 flags;
};
# 726 "./include/acpi/actbl2.h"
enum acpi_madt_type {
 ACPI_MADT_TYPE_LOCAL_APIC = 0,
 ACPI_MADT_TYPE_IO_APIC = 1,
 ACPI_MADT_TYPE_INTERRUPT_OVERRIDE = 2,
 ACPI_MADT_TYPE_NMI_SOURCE = 3,
 ACPI_MADT_TYPE_LOCAL_APIC_NMI = 4,
 ACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE = 5,
 ACPI_MADT_TYPE_IO_SAPIC = 6,
 ACPI_MADT_TYPE_LOCAL_SAPIC = 7,
 ACPI_MADT_TYPE_INTERRUPT_SOURCE = 8,
 ACPI_MADT_TYPE_LOCAL_X2APIC = 9,
 ACPI_MADT_TYPE_LOCAL_X2APIC_NMI = 10,
 ACPI_MADT_TYPE_GENERIC_INTERRUPT = 11,
 ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR = 12,
 ACPI_MADT_TYPE_GENERIC_MSI_FRAME = 13,
 ACPI_MADT_TYPE_GENERIC_REDISTRIBUTOR = 14,
 ACPI_MADT_TYPE_GENERIC_TRANSLATOR = 15,
 ACPI_MADT_TYPE_MULTIPROC_WAKEUP = 16,
 ACPI_MADT_TYPE_RESERVED = 17
};







struct acpi_madt_local_apic {
 struct acpi_subtable_header header;
 u8 processor_id;
 u8 id;
 u32 lapic_flags;
};



struct acpi_madt_io_apic {
 struct acpi_subtable_header header;
 u8 id;
 u8 reserved;
 u32 address;
 u32 global_irq_base;
};



struct acpi_madt_interrupt_override {
 struct acpi_subtable_header header;
 u8 bus;
 u8 source_irq;
 u32 global_irq;
 u16 inti_flags;
};



struct acpi_madt_nmi_source {
 struct acpi_subtable_header header;
 u16 inti_flags;
 u32 global_irq;
};



struct acpi_madt_local_apic_nmi {
 struct acpi_subtable_header header;
 u8 processor_id;
 u16 inti_flags;
 u8 lint;
};



struct acpi_madt_local_apic_override {
 struct acpi_subtable_header header;
 u16 reserved;
 u64 address;
};



struct acpi_madt_io_sapic {
 struct acpi_subtable_header header;
 u8 id;
 u8 reserved;
 u32 global_irq_base;
 u64 address;
};



struct acpi_madt_local_sapic {
 struct acpi_subtable_header header;
 u8 processor_id;
 u8 id;
 u8 eid;
 u8 reserved[3];
 u32 lapic_flags;
 u32 uid;
 char uid_string[1];
};



struct acpi_madt_interrupt_source {
 struct acpi_subtable_header header;
 u16 inti_flags;
 u8 type;
 u8 id;
 u8 eid;
 u8 io_sapic_vector;
 u32 global_irq;
 u32 flags;
};







struct acpi_madt_local_x2apic {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 local_apic_id;
 u32 lapic_flags;
 u32 uid;
};



struct acpi_madt_local_x2apic_nmi {
 struct acpi_subtable_header header;
 u16 inti_flags;
 u32 uid;
 u8 lint;
 u8 reserved[3];
};



struct acpi_madt_generic_interrupt {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 cpu_interface_number;
 u32 uid;
 u32 flags;
 u32 parking_version;
 u32 performance_interrupt;
 u64 parked_address;
 u64 base_address;
 u64 gicv_base_address;
 u64 gich_base_address;
 u32 vgic_interrupt;
 u64 gicr_base_address;
 u64 arm_mpidr;
 u8 efficiency_class;
 u8 reserved2[1];
 u16 spe_interrupt;
};
# 895 "./include/acpi/actbl2.h"
struct acpi_madt_generic_distributor {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 gic_id;
 u64 base_address;
 u32 global_irq_base;
 u8 version;
 u8 reserved2[3];
};



enum acpi_madt_gic_version {
 ACPI_MADT_GIC_VERSION_NONE = 0,
 ACPI_MADT_GIC_VERSION_V1 = 1,
 ACPI_MADT_GIC_VERSION_V2 = 2,
 ACPI_MADT_GIC_VERSION_V3 = 3,
 ACPI_MADT_GIC_VERSION_V4 = 4,
 ACPI_MADT_GIC_VERSION_RESERVED = 5
};



struct acpi_madt_generic_msi_frame {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 msi_frame_id;
 u64 base_address;
 u32 flags;
 u16 spi_count;
 u16 spi_base;
};







struct acpi_madt_generic_redistributor {
 struct acpi_subtable_header header;
 u16 reserved;
 u64 base_address;
 u32 length;
};



struct acpi_madt_generic_translator {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 translation_id;
 u64 base_address;
 u32 reserved2;
};



struct acpi_madt_multiproc_wakeup {
 struct acpi_subtable_header header;
 u16 mailbox_version;
 u32 reserved;
 u64 base_address;
};




struct acpi_madt_multiproc_wakeup_mailbox {
 u16 command;
 u16 reserved;
 u32 apic_id;
 u64 wakeup_vector;
 u8 reserved_os[2032];
 u8 reserved_firmware[2048];
};
# 1008 "./include/acpi/actbl2.h"
struct acpi_table_mcfg {
 struct acpi_table_header header;
 u8 reserved[8];
};



struct acpi_mcfg_allocation {
 u64 address;
 u16 pci_segment;
 u8 start_bus_number;
 u8 end_bus_number;
 u32 reserved;
};
# 1033 "./include/acpi/actbl2.h"
struct acpi_table_mchi {
 struct acpi_table_header header;
 u8 interface_type;
 u8 protocol;
 u64 protocol_data;
 u8 interrupt_type;
 u8 gpe;
 u8 pci_device_flag;
 u32 global_interrupt;
 struct acpi_generic_address control_register;
 u8 pci_segment;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
};
# 1064 "./include/acpi/actbl2.h"
struct acpi_table_mpst {
 struct acpi_table_header header;
  u8 channel_id; u8 reserved1[3]; u16 power_node_count; u16 reserved2;
};



struct acpi_mpst_channel {
 u8 channel_id; u8 reserved1[3]; u16 power_node_count; u16 reserved2;
};



struct acpi_mpst_power_node {
 u8 flags;
 u8 reserved1;
 u16 node_id;
 u32 length;
 u64 range_address;
 u64 range_length;
 u32 num_power_states;
 u32 num_physical_components;
};
# 1096 "./include/acpi/actbl2.h"
struct acpi_mpst_power_state {
 u8 power_state;
 u8 info_index;
};



struct acpi_mpst_component {
 u16 component_id;
};



struct acpi_mpst_data_hdr {
 u16 characteristics_count;
 u16 reserved;
};

struct acpi_mpst_power_data {
 u8 structure_id;
 u8 flags;
 u16 reserved1;
 u32 average_power;
 u32 power_saving;
 u64 exit_latency;
 u64 reserved2;
};
# 1132 "./include/acpi/actbl2.h"
struct acpi_mpst_shared {
 u32 signature;
 u16 pcc_command;
 u16 pcc_status;
 u32 command_register;
 u32 status_register;
 u32 power_state_id;
 u32 power_node_id;
 u64 energy_consumed;
 u64 average_power;
};
# 1151 "./include/acpi/actbl2.h"
struct acpi_table_msct {
 struct acpi_table_header header;
 u32 proximity_offset;
 u32 max_proximity_domains;
 u32 max_clock_domains;
 u64 max_address;
};



struct acpi_msct_proximity {
 u8 revision;
 u8 length;
 u32 range_start;
 u32 range_end;
 u32 processor_capacity;
 u64 memory_capacity;
};
# 1181 "./include/acpi/actbl2.h"
struct acpi_table_msdm {
 struct acpi_table_header header;
};
# 1192 "./include/acpi/actbl2.h"
struct acpi_table_nfit {
 struct acpi_table_header header;
 u32 reserved;
};



struct acpi_nfit_header {
 u16 type;
 u16 length;
};



enum acpi_nfit_type {
 ACPI_NFIT_TYPE_SYSTEM_ADDRESS = 0,
 ACPI_NFIT_TYPE_MEMORY_MAP = 1,
 ACPI_NFIT_TYPE_INTERLEAVE = 2,
 ACPI_NFIT_TYPE_SMBIOS = 3,
 ACPI_NFIT_TYPE_CONTROL_REGION = 4,
 ACPI_NFIT_TYPE_DATA_REGION = 5,
 ACPI_NFIT_TYPE_FLUSH_ADDRESS = 6,
 ACPI_NFIT_TYPE_CAPABILITIES = 7,
 ACPI_NFIT_TYPE_RESERVED = 8
};







struct acpi_nfit_system_address {
 struct acpi_nfit_header header;
 u16 range_index;
 u16 flags;
 u32 reserved;
 u32 proximity_domain;
 u8 range_guid[16];
 u64 address;
 u64 length;
 u64 memory_mapping;
 u64 location_cookie;
};
# 1247 "./include/acpi/actbl2.h"
struct acpi_nfit_memory_map {
 struct acpi_nfit_header header;
 u32 device_handle;
 u16 physical_id;
 u16 region_id;
 u16 range_index;
 u16 region_index;
 u64 region_size;
 u64 region_offset;
 u64 address;
 u16 interleave_index;
 u16 interleave_ways;
 u16 flags;
 u16 reserved;
};
# 1275 "./include/acpi/actbl2.h"
struct acpi_nfit_interleave {
 struct acpi_nfit_header header;
 u16 interleave_index;
 u16 reserved;
 u32 line_count;
 u32 line_size;
 u32 line_offset[1];
};



struct acpi_nfit_smbios {
 struct acpi_nfit_header header;
 u32 reserved;
 u8 data[1];
};



struct acpi_nfit_control_region {
 struct acpi_nfit_header header;
 u16 region_index;
 u16 vendor_id;
 u16 device_id;
 u16 revision_id;
 u16 subsystem_vendor_id;
 u16 subsystem_device_id;
 u16 subsystem_revision_id;
 u8 valid_fields;
 u8 manufacturing_location;
 u16 manufacturing_date;
 u8 reserved[2];
 u32 serial_number;
 u16 code;
 u16 windows;
 u64 window_size;
 u64 command_offset;
 u64 command_size;
 u64 status_offset;
 u64 status_size;
 u16 flags;
 u8 reserved1[6];
};
# 1329 "./include/acpi/actbl2.h"
struct acpi_nfit_data_region {
 struct acpi_nfit_header header;
 u16 region_index;
 u16 windows;
 u64 offset;
 u64 size;
 u64 capacity;
 u64 start_address;
};



struct acpi_nfit_flush_address {
 struct acpi_nfit_header header;
 u32 device_handle;
 u16 hint_count;
 u8 reserved[6];
 u64 hint_address[1];
};



struct acpi_nfit_capabilities {
 struct acpi_nfit_header header;
 u8 highest_capability;
 u8 reserved[3];
 u32 capabilities;
 u32 reserved2;
};
# 1368 "./include/acpi/actbl2.h"
struct nfit_device_handle {
 u32 handle;
};
# 1419 "./include/acpi/actbl2.h"
struct acpi_table_pcct {
 struct acpi_table_header header;
 u32 flags;
 u64 reserved;
};







enum acpi_pcct_type {
 ACPI_PCCT_TYPE_GENERIC_SUBSPACE = 0,
 ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE = 1,
 ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2 = 2,
 ACPI_PCCT_TYPE_EXT_PCC_MASTER_SUBSPACE = 3,
 ACPI_PCCT_TYPE_EXT_PCC_SLAVE_SUBSPACE = 4,
 ACPI_PCCT_TYPE_HW_REG_COMM_SUBSPACE = 5,
 ACPI_PCCT_TYPE_RESERVED = 6
};







struct acpi_pcct_subspace {
 struct acpi_subtable_header header;
 u8 reserved[6];
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u16 min_turnaround_time;
};



struct acpi_pcct_hw_reduced {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved;
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u16 min_turnaround_time;
};



struct acpi_pcct_hw_reduced_type2 {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved;
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u16 min_turnaround_time;
 struct acpi_generic_address platform_ack_register;
 u64 ack_preserve_mask;
 u64 ack_write_mask;
};



struct acpi_pcct_ext_pcc_master {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved1;
 u64 base_address;
 u32 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u32 min_turnaround_time;
 struct acpi_generic_address platform_ack_register;
 u64 ack_preserve_mask;
 u64 ack_set_mask;
 u64 reserved2;
 struct acpi_generic_address cmd_complete_register;
 u64 cmd_complete_mask;
 struct acpi_generic_address cmd_update_register;
 u64 cmd_update_preserve_mask;
 u64 cmd_update_set_mask;
 struct acpi_generic_address error_status_register;
 u64 error_status_mask;
};



struct acpi_pcct_ext_pcc_slave {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved1;
 u64 base_address;
 u32 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u32 min_turnaround_time;
 struct acpi_generic_address platform_ack_register;
 u64 ack_preserve_mask;
 u64 ack_set_mask;
 u64 reserved2;
 struct acpi_generic_address cmd_complete_register;
 u64 cmd_complete_mask;
 struct acpi_generic_address cmd_update_register;
 u64 cmd_update_preserve_mask;
 u64 cmd_update_set_mask;
 struct acpi_generic_address error_status_register;
 u64 error_status_mask;
};



struct acpi_pcct_hw_reg {
 struct acpi_subtable_header header;
 u16 version;
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 doorbell_preserve;
 u64 doorbell_write;
 struct acpi_generic_address cmd_complete_register;
 u64 cmd_complete_mask;
 struct acpi_generic_address error_status_register;
 u64 error_status_mask;
 u32 nominal_latency;
 u32 min_turnaround_time;
};
# 1582 "./include/acpi/actbl2.h"
struct acpi_pcct_shared_memory {
 u32 signature;
 u16 command;
 u16 status;
};



struct acpi_pcct_ext_pcc_shared_memory {
 u32 signature;
 u32 flags;
 u32 length;
 u32 command;
};
# 1604 "./include/acpi/actbl2.h"
struct acpi_table_pdtt {
 struct acpi_table_header header;
 u8 trigger_count;
 u8 reserved[3];
 u32 array_offset;
};






struct acpi_pdtt_channel {
 u8 subchannel_id;
 u8 flags;
};
# 1634 "./include/acpi/actbl2.h"
struct acpi_table_phat {
 struct acpi_table_header header;
};



struct acpi_phat_header {
 u16 type;
 u16 length;
 u8 revision;
};
# 1658 "./include/acpi/actbl2.h"
struct acpi_phat_version_data {
 struct acpi_phat_header header;
 u8 reserved[3];
 u32 element_count;
};

struct acpi_phat_version_element {
 u8 guid[16];
 u64 version_value;
 u32 producer_id;
};



struct acpi_phat_health_data {
 struct acpi_phat_header header;
 u8 reserved[2];
 u8 health;
 u8 device_guid[16];
 u32 device_specific_offset;
};
# 1694 "./include/acpi/actbl2.h"
struct acpi_table_pmtt {
 struct acpi_table_header header;
 u32 memory_device_count;




};



struct acpi_pmtt_header {
 u8 type;
 u8 reserved1;
 u16 length;
 u16 flags;
 u16 reserved2;
 u32 memory_device_count;





};
# 1739 "./include/acpi/actbl2.h"
struct acpi_pmtt_socket {
 struct acpi_pmtt_header header;
 u16 socket_id;
 u16 reserved;
};







struct acpi_pmtt_controller {
 struct acpi_pmtt_header header;
 u16 controller_id;
 u16 reserved;
};







struct acpi_pmtt_physical_component {
 struct acpi_pmtt_header header;
 u32 bios_handle;
};



struct acpi_pmtt_vendor_specific {
 struct acpi_pmtt_header header;
 u8 type_uuid[16];
 u8 specific[];





};
# 1788 "./include/acpi/actbl2.h"
struct acpi_table_pptt {
 struct acpi_table_header header;
};



enum acpi_pptt_type {
 ACPI_PPTT_TYPE_PROCESSOR = 0,
 ACPI_PPTT_TYPE_CACHE = 1,
 ACPI_PPTT_TYPE_ID = 2,
 ACPI_PPTT_TYPE_RESERVED = 3
};



struct acpi_pptt_processor {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 flags;
 u32 parent;
 u32 acpi_processor_id;
 u32 number_of_priv_resources;
};
# 1822 "./include/acpi/actbl2.h"
struct acpi_pptt_cache {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 flags;
 u32 next_level_of_cache;
 u32 size;
 u32 number_of_sets;
 u8 associativity;
 u8 attributes;
 u16 line_size;
};



struct acpi_pptt_cache_v1 {
 u32 cache_id;
};
# 1873 "./include/acpi/actbl2.h"
struct acpi_pptt_id {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 vendor_id;
 u64 level1_id;
 u64 level2_id;
 u16 major_rev;
 u16 minor_rev;
 u16 spin_rev;
};
# 1891 "./include/acpi/actbl2.h"
struct acpi_table_prmt {
 struct acpi_table_header header;
};

struct acpi_table_prmt_header {
 u8 platform_guid[16];
 u32 module_info_offset;
 u32 module_info_count;
};

struct acpi_prmt_module_header {
 u16 revision;
 u16 length;
};

struct acpi_prmt_module_info {
 u16 revision;
 u16 length;
 u8 module_guid[16];
 u16 major_rev;
 u16 minor_rev;
 u16 handler_info_count;
 u32 handler_info_offset;
 u64 mmio_list_pointer;
};

struct acpi_prmt_handler_info {
 u16 revision;
 u16 length;
 u8 handler_guid[16];
 u64 handler_address;
 u64 static_data_buffer_address;
 u64 acpi_param_buffer_address;
};
# 1933 "./include/acpi/actbl2.h"
struct acpi_table_rasf {
 struct acpi_table_header header;
 u8 channel_id[12];
};



struct acpi_rasf_shared_memory {
 u32 signature;
 u16 command;
 u16 status;
 u16 version;
 u8 capabilities[16];
 u8 set_capabilities[16];
 u16 num_parameter_blocks;
 u32 set_capabilities_status;
};



struct acpi_rasf_parameter_block {
 u16 type;
 u16 version;
 u16 length;
};



struct acpi_rasf_patrol_scrub_parameter {
 struct acpi_rasf_parameter_block header;
 u16 patrol_scrub_command;
 u64 requested_address_range[2];
 u64 actual_address_range[2];
 u16 flags;
 u8 requested_speed;
};
# 1980 "./include/acpi/actbl2.h"
enum acpi_rasf_commands {
 ACPI_RASF_EXECUTE_RASF_COMMAND = 1
};



enum acpi_rasf_capabiliities {
 ACPI_HW_PATROL_SCRUB_SUPPORTED = 0,
 ACPI_SW_PATROL_SCRUB_EXPOSED = 1
};



enum acpi_rasf_patrol_scrub_commands {
 ACPI_RASF_GET_PATROL_PARAMETERS = 1,
 ACPI_RASF_START_PATROL_SCRUBBER = 2,
 ACPI_RASF_STOP_PATROL_SCRUBBER = 3
};







enum acpi_rasf_status {
 ACPI_RASF_SUCCESS = 0,
 ACPI_RASF_NOT_VALID = 1,
 ACPI_RASF_NOT_SUPPORTED = 2,
 ACPI_RASF_BUSY = 3,
 ACPI_RASF_FAILED = 4,
 ACPI_RASF_ABORTED = 5,
 ACPI_RASF_INVALID_DATA = 6
};
# 2032 "./include/acpi/actbl2.h"
struct acpi_table_rgrt {
 struct acpi_table_header header;
 u16 version;
 u8 image_type;
 u8 reserved;
 u8 image[0];
};



enum acpi_rgrt_image_type {
 ACPI_RGRT_TYPE_RESERVED0 = 0,
 ACPI_RGRT_IMAGE_TYPE_PNG = 1,
 ACPI_RGRT_TYPE_RESERVED = 2
};
# 2055 "./include/acpi/actbl2.h"
struct acpi_table_sbst {
 struct acpi_table_header header;
 u32 warning_level;
 u32 low_level;
 u32 critical_level;
};
# 2071 "./include/acpi/actbl2.h"
struct acpi_table_sdei {
 struct acpi_table_header header;
};
# 2082 "./include/acpi/actbl2.h"
struct acpi_table_sdev {
 struct acpi_table_header header;
};

struct acpi_sdev_header {
 u8 type;
 u8 flags;
 u16 length;
};



enum acpi_sdev_type {
 ACPI_SDEV_TYPE_NAMESPACE_DEVICE = 0,
 ACPI_SDEV_TYPE_PCIE_ENDPOINT_DEVICE = 1,
 ACPI_SDEV_TYPE_RESERVED = 2
};
# 2111 "./include/acpi/actbl2.h"
struct acpi_sdev_namespace {
 struct acpi_sdev_header header;
 u16 device_id_offset;
 u16 device_id_length;
 u16 vendor_data_offset;
 u16 vendor_data_length;
};

struct acpi_sdev_secure_component {
 u16 secure_component_offset;
 u16 secure_component_length;
};




struct acpi_sdev_component {
 struct acpi_sdev_header header;
};



enum acpi_sac_type {
 ACPI_SDEV_TYPE_ID_COMPONENT = 0,
 ACPI_SDEV_TYPE_MEM_COMPONENT = 1
};

struct acpi_sdev_id_component {
 struct acpi_sdev_header header;
 u16 hardware_id_offset;
 u16 hardware_id_length;
 u16 subsystem_id_offset;
 u16 subsystem_id_length;
 u16 hardware_revision;
 u8 hardware_rev_present;
 u8 class_code_present;
 u8 pci_base_class;
 u8 pci_sub_class;
 u8 pci_programming_xface;
};

struct acpi_sdev_mem_component {
 struct acpi_sdev_header header;
 u32 reserved;
 u64 memory_base_address;
 u64 memory_length;
};



struct acpi_sdev_pcie {
 struct acpi_sdev_header header;
 u16 segment;
 u16 start_bus;
 u16 path_offset;
 u16 path_length;
 u16 vendor_data_offset;
 u16 vendor_data_length;
};



struct acpi_sdev_pcie_path {
 u8 device;
 u8 function;
};
# 2187 "./include/acpi/actbl2.h"
struct acpi_table_svkl {
 struct acpi_table_header header;
 u32 count;
};

struct acpi_svkl_key {
 u16 type;
 u16 format;
 u32 size;
 u64 address;
};

enum acpi_svkl_type {
 ACPI_SVKL_TYPE_MAIN_STORAGE = 0,
 ACPI_SVKL_TYPE_RESERVED = 1
};

enum acpi_svkl_format {
 ACPI_SVKL_FORMAT_RAW_BINARY = 0,
 ACPI_SVKL_FORMAT_RESERVED = 1
};



#pragma pack()
# 372 "./include/acpi/actbl.h" 2
# 1 "./include/acpi/actbl3.h" 1
# 50 "./include/acpi/actbl3.h"
#pragma pack(1)
# 75 "./include/acpi/actbl3.h"
struct acpi_table_slic {
 struct acpi_table_header header;
};
# 86 "./include/acpi/actbl3.h"
struct acpi_table_slit {
 struct acpi_table_header header;
 u64 locality_count;
 u8 entry[1];
};
# 102 "./include/acpi/actbl3.h"
struct acpi_table_spcr {
 struct acpi_table_header header;
 u8 interface_type;
 u8 reserved[3];
 struct acpi_generic_address serial_port;
 u8 interrupt_type;
 u8 pc_interrupt;
 u32 interrupt;
 u8 baud_rate;
 u8 parity;
 u8 stop_bits;
 u8 flow_control;
 u8 terminal_type;
 u8 reserved1;
 u16 pci_device_id;
 u16 pci_vendor_id;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u32 pci_flags;
 u8 pci_segment;
 u32 reserved2;
};
# 143 "./include/acpi/actbl3.h"
struct acpi_table_spmi {
 struct acpi_table_header header;
 u8 interface_type;
 u8 reserved;
 u16 spec_revision;
 u8 interrupt_type;
 u8 gpe_number;
 u8 reserved1;
 u8 pci_device_flag;
 u32 interrupt;
 struct acpi_generic_address ipmi_register;
 u8 pci_segment;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u8 reserved2;
};



enum acpi_spmi_interface_types {
 ACPI_SPMI_NOT_USED = 0,
 ACPI_SPMI_KEYBOARD = 1,
 ACPI_SPMI_SMI = 2,
 ACPI_SPMI_BLOCK_TRANSFER = 3,
 ACPI_SPMI_SMBUS = 4,
 ACPI_SPMI_RESERVED = 5
};
# 179 "./include/acpi/actbl3.h"
struct acpi_table_srat {
 struct acpi_table_header header;
 u32 table_revision;
 u64 reserved;
};



enum acpi_srat_type {
 ACPI_SRAT_TYPE_CPU_AFFINITY = 0,
 ACPI_SRAT_TYPE_MEMORY_AFFINITY = 1,
 ACPI_SRAT_TYPE_X2APIC_CPU_AFFINITY = 2,
 ACPI_SRAT_TYPE_GICC_AFFINITY = 3,
 ACPI_SRAT_TYPE_GIC_ITS_AFFINITY = 4,
 ACPI_SRAT_TYPE_GENERIC_AFFINITY = 5,
 ACPI_SRAT_TYPE_RESERVED = 6
};







struct acpi_srat_cpu_affinity {
 struct acpi_subtable_header header;
 u8 proximity_domain_lo;
 u8 apic_id;
 u32 flags;
 u8 local_sapic_eid;
 u8 proximity_domain_hi[3];
 u32 clock_domain;
};







struct acpi_srat_mem_affinity {
 struct acpi_subtable_header header;
 u32 proximity_domain;
 u16 reserved;
 u64 base_address;
 u64 length;
 u32 reserved1;
 u32 flags;
 u64 reserved2;
};
# 238 "./include/acpi/actbl3.h"
struct acpi_srat_x2apic_cpu_affinity {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 proximity_domain;
 u32 apic_id;
 u32 flags;
 u32 clock_domain;
 u32 reserved2;
};







struct acpi_srat_gicc_affinity {
 struct acpi_subtable_header header;
 u32 proximity_domain;
 u32 acpi_processor_uid;
 u32 flags;
 u32 clock_domain;
};







struct acpi_srat_gic_its_affinity {
 struct acpi_subtable_header header;
 u32 proximity_domain;
 u16 reserved;
 u32 its_id;
};



struct acpi_srat_generic_affinity {
 struct acpi_subtable_header header;
 u8 reserved;
 u8 device_handle_type;
 u32 proximity_domain;
 u8 device_handle[16];
 u32 flags;
 u32 reserved1;
};
# 302 "./include/acpi/actbl3.h"
struct acpi_table_stao {
 struct acpi_table_header header;
 u8 ignore_uart;
};
# 324 "./include/acpi/actbl3.h"
struct acpi_table_tcpa_hdr {
 struct acpi_table_header header;
 u16 platform_class;
};
# 336 "./include/acpi/actbl3.h"
struct acpi_table_tcpa_client {
 u32 minimum_log_length;
 u64 log_address;
};

struct acpi_table_tcpa_server {
 u16 reserved;
 u64 minimum_log_length;
 u64 log_address;
 u16 spec_revision;
 u8 device_flags;
 u8 interrupt_flags;
 u8 gpe_number;
 u8 reserved2[3];
 u32 global_interrupt;
 struct acpi_generic_address address;
 u32 reserved3;
 struct acpi_generic_address config_address;
 u8 group;
 u8 bus;
 u8 device;
 u8 function;
};
# 388 "./include/acpi/actbl3.h"
struct acpi_table_tpm23 {
 struct acpi_table_header header;
 u32 reserved;
 u64 control_address;
 u32 start_method;
};
# 403 "./include/acpi/actbl3.h"
struct acpi_tmp23_trailer {
 u32 reserved;
};



struct acpi_table_tpm2 {
 struct acpi_table_header header;
 u16 platform_class;
 u16 reserved;
 u64 control_address;
 u32 start_method;


};


struct acpi_tpm2_phy {
 u8 start_method_specific[12];
 u32 log_area_minimum_length;
 u64 log_area_start_address;
};
# 444 "./include/acpi/actbl3.h"
struct acpi_tpm2_trailer {
 u8 method_parameters[12];
 u32 minimum_log_length;
 u64 log_address;
};







struct acpi_tpm2_arm_smc {
 u32 global_interrupt;
 u8 interrupt_flags;
 u8 operation_flags;
 u16 reserved;
 u32 function_id;
};
# 482 "./include/acpi/actbl3.h"
struct acpi_table_uefi {
 struct acpi_table_header header;
 u8 identifier[16];
 u16 data_offset;
};
# 495 "./include/acpi/actbl3.h"
struct acpi_table_viot {
 struct acpi_table_header header;
 u16 node_count;
 u16 node_offset;
 u8 reserved[8];
};



struct acpi_viot_header {
 u8 type;
 u8 reserved;
 u16 length;
};



enum acpi_viot_node_type {
 ACPI_VIOT_NODE_PCI_RANGE = 0x01,
 ACPI_VIOT_NODE_MMIO = 0x02,
 ACPI_VIOT_NODE_VIRTIO_IOMMU_PCI = 0x03,
 ACPI_VIOT_NODE_VIRTIO_IOMMU_MMIO = 0x04,
 ACPI_VIOT_RESERVED = 0x05
};



struct acpi_viot_pci_range {
 struct acpi_viot_header header;
 u32 endpoint_start;
 u16 segment_start;
 u16 segment_end;
 u16 bdf_start;
 u16 bdf_end;
 u16 output_node;
 u8 reserved[6];
};

struct acpi_viot_mmio {
 struct acpi_viot_header header;
 u32 endpoint;
 u64 base_address;
 u16 output_node;
 u8 reserved[6];
};

struct acpi_viot_virtio_iommu_pci {
 struct acpi_viot_header header;
 u16 segment;
 u16 bdf;
 u8 reserved[8];
};

struct acpi_viot_virtio_iommu_mmio {
 struct acpi_viot_header header;
 u8 reserved[4];
 u64 base_address;
};
# 563 "./include/acpi/actbl3.h"
struct acpi_table_waet {
 struct acpi_table_header header;
 u32 flags;
};
# 583 "./include/acpi/actbl3.h"
struct acpi_table_wdat {
 struct acpi_table_header header;
 u32 header_length;
 u16 pci_segment;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u8 reserved[3];
 u32 timer_period;
 u32 max_count;
 u32 min_count;
 u8 flags;
 u8 reserved2[3];
 u32 entries;
};
# 606 "./include/acpi/actbl3.h"
struct acpi_wdat_entry {
 u8 action;
 u8 instruction;
 u16 reserved;
 struct acpi_generic_address register_region;
 u32 value;
 u32 mask;
};



enum acpi_wdat_actions {
 ACPI_WDAT_RESET = 1,
 ACPI_WDAT_GET_CURRENT_COUNTDOWN = 4,
 ACPI_WDAT_GET_COUNTDOWN = 5,
 ACPI_WDAT_SET_COUNTDOWN = 6,
 ACPI_WDAT_GET_RUNNING_STATE = 8,
 ACPI_WDAT_SET_RUNNING_STATE = 9,
 ACPI_WDAT_GET_STOPPED_STATE = 10,
 ACPI_WDAT_SET_STOPPED_STATE = 11,
 ACPI_WDAT_GET_REBOOT = 16,
 ACPI_WDAT_SET_REBOOT = 17,
 ACPI_WDAT_GET_SHUTDOWN = 18,
 ACPI_WDAT_SET_SHUTDOWN = 19,
 ACPI_WDAT_GET_STATUS = 32,
 ACPI_WDAT_SET_STATUS = 33,
 ACPI_WDAT_ACTION_RESERVED = 34
};



enum acpi_wdat_instructions {
 ACPI_WDAT_READ_VALUE = 0,
 ACPI_WDAT_READ_COUNTDOWN = 1,
 ACPI_WDAT_WRITE_VALUE = 2,
 ACPI_WDAT_WRITE_COUNTDOWN = 3,
 ACPI_WDAT_INSTRUCTION_RESERVED = 4,
 ACPI_WDAT_PRESERVE_REGISTER = 0x80
};
# 656 "./include/acpi/actbl3.h"
struct acpi_table_wddt {
 struct acpi_table_header header;
 u16 spec_version;
 u16 table_version;
 u16 pci_vendor_id;
 struct acpi_generic_address address;
 u16 max_count;
 u16 min_count;
 u16 period;
 u16 status;
 u16 capability;
};
# 694 "./include/acpi/actbl3.h"
struct acpi_table_wdrt {
 struct acpi_table_header header;
 struct acpi_generic_address control_register;
 struct acpi_generic_address count_register;
 u16 pci_device_id;
 u16 pci_vendor_id;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u8 pci_segment;
 u16 max_count;
 u8 units;
};
# 717 "./include/acpi/actbl3.h"
struct acpi_table_wpbt {
 struct acpi_table_header header;
 u32 handoff_size;
 u64 handoff_address;
 u8 layout;
 u8 type;
 u16 arguments_length;
};

struct acpi_wpbt_unicode {
 u16 *unicode_string;
};
# 740 "./include/acpi/actbl3.h"
struct acpi_table_wsmt {
 struct acpi_table_header header;
 u32 protection_flags;
};
# 760 "./include/acpi/actbl3.h"
struct acpi_table_xenv {
 struct acpi_table_header header;
 u64 grant_table_address;
 u64 grant_table_size;
 u32 event_interrupt;
 u8 event_flags;
};



#pragma pack()
# 373 "./include/acpi/actbl.h" 2
# 27 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/acrestyp.h" 1
# 16 "./include/acpi/acrestyp.h"
typedef u16 acpi_rs_length;
typedef u32 acpi_rsdesc_size;
# 121 "./include/acpi/acrestyp.h"
#pragma pack(1)




struct acpi_uuid {
 u8 data[16];
};

struct acpi_vendor_uuid {
 u8 subtype;
 u8 data[16];
};




struct acpi_resource_irq {
 u8 descriptor_length;
 u8 triggering;
 u8 polarity;
 u8 shareable;
 u8 wake_capable;
 u8 interrupt_count;
 u8 interrupts[1];
};

struct acpi_resource_dma {
 u8 type;
 u8 bus_master;
 u8 transfer;
 u8 channel_count;
 u8 channels[1];
};

struct acpi_resource_start_dependent {
 u8 descriptor_length;
 u8 compatibility_priority;
 u8 performance_robustness;
};






struct acpi_resource_io {
 u8 io_decode;
 u8 alignment;
 u8 address_length;
 u16 minimum;
 u16 maximum;
};

struct acpi_resource_fixed_io {
 u16 address;
 u8 address_length;
};

struct acpi_resource_fixed_dma {
 u16 request_lines;
 u16 channels;
 u8 width;
};
# 195 "./include/acpi/acrestyp.h"
struct acpi_resource_vendor {
 u16 byte_length;
 u8 byte_data[1];
};



struct acpi_resource_vendor_typed {
 u16 byte_length;
 u8 uuid_subtype;
 u8 uuid[16];
 u8 byte_data[1];
};

struct acpi_resource_end_tag {
 u8 checksum;
};

struct acpi_resource_memory24 {
 u8 write_protect;
 u16 minimum;
 u16 maximum;
 u16 alignment;
 u16 address_length;
};

struct acpi_resource_memory32 {
 u8 write_protect;
 u32 minimum;
 u32 maximum;
 u32 alignment;
 u32 address_length;
};

struct acpi_resource_fixed_memory32 {
 u8 write_protect;
 u32 address;
 u32 address_length;
};

struct acpi_memory_attribute {
 u8 write_protect;
 u8 caching;
 u8 range_type;
 u8 translation;
};

struct acpi_io_attribute {
 u8 range_type;
 u8 translation;
 u8 translation_type;
 u8 reserved1;
};

union acpi_resource_attribute {
 struct acpi_memory_attribute mem;
 struct acpi_io_attribute io;



 u8 type_specific;
};

struct acpi_resource_label {
 u16 string_length;
 char *string_ptr;
};

struct acpi_resource_source {
 u8 index;
 u16 string_length;
 char *string_ptr;
};
# 279 "./include/acpi/acrestyp.h"
struct acpi_address16_attribute {
 u16 granularity;
 u16 minimum;
 u16 maximum;
 u16 translation_offset;
 u16 address_length;
};

struct acpi_address32_attribute {
 u32 granularity;
 u32 minimum;
 u32 maximum;
 u32 translation_offset;
 u32 address_length;
};

struct acpi_address64_attribute {
 u64 granularity;
 u64 minimum;
 u64 maximum;
 u64 translation_offset;
 u64 address_length;
};

struct acpi_resource_address {
u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info;};

struct acpi_resource_address16 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; struct acpi_address16_attribute address;
 struct acpi_resource_source resource_source;
};

struct acpi_resource_address32 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; struct acpi_address32_attribute address;
 struct acpi_resource_source resource_source;
};

struct acpi_resource_address64 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; struct acpi_address64_attribute address;
 struct acpi_resource_source resource_source;
};

struct acpi_resource_extended_address64 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; u8 revision_ID;
 struct acpi_address64_attribute address;
 u64 type_specific;
};

struct acpi_resource_extended_irq {
 u8 producer_consumer;
 u8 triggering;
 u8 polarity;
 u8 shareable;
 u8 wake_capable;
 u8 interrupt_count;
 struct acpi_resource_source resource_source;
 u32 interrupts[1];
};

struct acpi_resource_generic_register {
 u8 space_id;
 u8 bit_width;
 u8 bit_offset;
 u8 access_size;
 u64 address;
};

struct acpi_resource_gpio {
 u8 revision_id;
 u8 connection_type;
 u8 producer_consumer;
 u8 pin_config;
 u8 shareable;
 u8 wake_capable;
 u8 io_restriction;
 u8 triggering;
 u8 polarity;
 u16 drive_strength;
 u16 debounce_timeout;
 u16 pin_table_length;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 u16 *pin_table;
 u8 *vendor_data;
};
# 398 "./include/acpi/acrestyp.h"
struct acpi_resource_common_serialbus {
u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data;};
# 413 "./include/acpi/acrestyp.h"
struct acpi_resource_i2c_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 access_mode;
 u16 slave_address;
 u32 connection_speed;
};






struct acpi_resource_spi_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 wire_mode;
 u8 device_polarity;
 u8 data_bit_length;
 u8 clock_phase;
 u8 clock_polarity;
 u16 device_selection;
 u32 connection_speed;
};
# 454 "./include/acpi/acrestyp.h"
struct acpi_resource_uart_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 endian;
 u8 data_bits;
 u8 stop_bits;
 u8 flow_control;
 u8 parity;
 u8 lines_enabled;
 u16 rx_fifo_size;
 u16 tx_fifo_size;
 u32 default_baud_rate;
};
# 509 "./include/acpi/acrestyp.h"
struct acpi_resource_csi2_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 local_port_instance;
 u8 phy_type;
};

struct acpi_resource_pin_function {
 u8 revision_id;
 u8 pin_config;
 u8 shareable;
 u16 function_number;
 u16 pin_table_length;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 u16 *pin_table;
 u8 *vendor_data;
};

struct acpi_resource_pin_config {
 u8 revision_id;
 u8 producer_consumer;
 u8 shareable;
 u8 pin_config_type;
 u32 pin_config_value;
 u16 pin_table_length;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 u16 *pin_table;
 u8 *vendor_data;
};
# 556 "./include/acpi/acrestyp.h"
struct acpi_resource_pin_group {
 u8 revision_id;
 u8 producer_consumer;
 u16 pin_table_length;
 u16 vendor_length;
 u16 *pin_table;
 struct acpi_resource_label resource_label;
 u8 *vendor_data;
};

struct acpi_resource_pin_group_function {
 u8 revision_id;
 u8 producer_consumer;
 u8 shareable;
 u16 function_number;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 struct acpi_resource_label resource_source_label;
 u8 *vendor_data;
};

struct acpi_resource_pin_group_config {
 u8 revision_id;
 u8 producer_consumer;
 u8 shareable;
 u8 pin_config_type;
 u32 pin_config_value;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 struct acpi_resource_label resource_source_label;
 u8 *vendor_data;
};
# 620 "./include/acpi/acrestyp.h"
union acpi_resource_data {
 struct acpi_resource_irq irq;
 struct acpi_resource_dma dma;
 struct acpi_resource_start_dependent start_dpf;
 struct acpi_resource_io io;
 struct acpi_resource_fixed_io fixed_io;
 struct acpi_resource_fixed_dma fixed_dma;
 struct acpi_resource_vendor vendor;
 struct acpi_resource_vendor_typed vendor_typed;
 struct acpi_resource_end_tag end_tag;
 struct acpi_resource_memory24 memory24;
 struct acpi_resource_memory32 memory32;
 struct acpi_resource_fixed_memory32 fixed_memory32;
 struct acpi_resource_address16 address16;
 struct acpi_resource_address32 address32;
 struct acpi_resource_address64 address64;
 struct acpi_resource_extended_address64 ext_address64;
 struct acpi_resource_extended_irq extended_irq;
 struct acpi_resource_generic_register generic_reg;
 struct acpi_resource_gpio gpio;
 struct acpi_resource_i2c_serialbus i2c_serial_bus;
 struct acpi_resource_spi_serialbus spi_serial_bus;
 struct acpi_resource_uart_serialbus uart_serial_bus;
 struct acpi_resource_csi2_serialbus csi2_serial_bus;
 struct acpi_resource_common_serialbus common_serial_bus;
 struct acpi_resource_pin_function pin_function;
 struct acpi_resource_pin_config pin_config;
 struct acpi_resource_pin_group pin_group;
 struct acpi_resource_pin_group_function pin_group_function;
 struct acpi_resource_pin_group_config pin_group_config;



 struct acpi_resource_address address;
};



struct acpi_resource {
 u32 type;
 u32 length;
 union acpi_resource_data data;
};



#pragma pack()
# 677 "./include/acpi/acrestyp.h"
struct acpi_pci_routing_table {
 u32 length;
 u32 pin;
 u64 address;
 u32 source_index;
 char source[4];
};
# 28 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/platform/acenvex.h" 1
# 23 "./include/acpi/platform/acenvex.h"
# 1 "./include/acpi/platform/aclinuxex.h" 1
# 40 "./include/acpi/platform/aclinuxex.h"
acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_os_initialize(void);

acpi_status acpi_os_terminate(void);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_allocate(acpi_size size)
{
 return kmalloc(size, ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })? ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) : ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_allocate_zeroed(acpi_size size)
{
 return kzalloc(size, ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })? ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) : ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_free(void *memory)
{
 kfree(memory);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_acquire_object(struct kmem_cache * cache)
{
 return kmem_cache_zalloc(cache,
     ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })? ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) : ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 acpi_os_get_thread_id(void)
{
 return (u64) (unsigned long)get_current();
}
# 104 "./include/acpi/platform/aclinuxex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long acpi_os_acquire_raw_lock(raw_spinlock_t * lockp)
{
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(lockp); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_release_raw_lock(raw_spinlock_t * lockp,
         unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(lockp, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_delete_raw_lock(raw_spinlock_t * handle)
{
                  ;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 acpi_os_readable(void *pointer, acpi_size length)
{
 return (1 == 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_os_initialize_debugger(void)
{
 return (acpi_status) 0x0000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_terminate_debugger(void)
{
 return;
}
# 24 "./include/acpi/platform/acenvex.h" 2
# 39 "./include/acpi/platform/acenvex.h"
# 1 "./include/acpi/platform/acgccex.h" 1
# 40 "./include/acpi/platform/acenvex.h" 2
# 29 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/acoutput.h" 1
# 30 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/acpiosxf.h" 1
# 20 "./include/acpi/acpiosxf.h"
typedef enum {
 OSL_GLOBAL_LOCK_HANDLER,
 OSL_NOTIFY_HANDLER,
 OSL_GPE_HANDLER,
 OSL_DEBUGGER_MAIN_THREAD,
 OSL_DEBUGGER_EXEC_THREAD,
 OSL_EC_POLL_HANDLER,
 OSL_EC_BURST_HANDLER
} acpi_execute_type;
# 38 "./include/acpi/acpiosxf.h"
struct acpi_signal_fatal_info {
 u32 type;
 u32 code;
 u32 argument;
};
# 59 "./include/acpi/acpiosxf.h"
acpi_physical_address acpi_os_get_root_pointer(void);



acpi_status
acpi_os_predefined_override(const struct acpi_predefined_names *init_val,
       acpi_string *new_val);



acpi_status
acpi_os_table_override(struct acpi_table_header *existing_table,
         struct acpi_table_header **new_table);



acpi_status
acpi_os_physical_table_override(struct acpi_table_header *existing_table,
    acpi_physical_address *new_address,
    u32 *new_table_length);
# 89 "./include/acpi/acpiosxf.h"
void acpi_os_delete_lock(spinlock_t * handle);



unsigned long acpi_os_acquire_lock(spinlock_t * handle);



void acpi_os_release_lock(spinlock_t * handle, unsigned long flags);
# 125 "./include/acpi/acpiosxf.h"
acpi_status
acpi_os_create_semaphore(u32 max_units,
    u32 initial_units, void * * out_handle);



acpi_status acpi_os_delete_semaphore(void * handle);



acpi_status
acpi_os_wait_semaphore(void * handle, u32 units, u16 timeout);



acpi_status acpi_os_signal_semaphore(void * handle, u32 units);
# 183 "./include/acpi/acpiosxf.h"
void *acpi_os_map_memory(acpi_physical_address where, acpi_size length);



void acpi_os_unmap_memory(void *logical_address, acpi_size size);



acpi_status
acpi_os_get_physical_address(void *logical_address,
        acpi_physical_address *physical_address);






acpi_status
acpi_os_create_cache(char *cache_name,
       u16 object_size,
       u16 max_depth, struct kmem_cache ** return_cache);



acpi_status acpi_os_delete_cache(struct kmem_cache * cache);



acpi_status acpi_os_purge_cache(struct kmem_cache * cache);







acpi_status acpi_os_release_object(struct kmem_cache * cache, void *object);






acpi_status
acpi_os_install_interrupt_handler(u32 interrupt_number,
      acpi_osd_handler service_routine,
      void *context);



acpi_status
acpi_os_remove_interrupt_handler(u32 interrupt_number,
     acpi_osd_handler service_routine);
# 246 "./include/acpi/acpiosxf.h"
acpi_status
acpi_os_execute(acpi_execute_type type,
  acpi_osd_exec_callback function, void *context);



void acpi_os_wait_events_complete(void);



void acpi_os_sleep(u64 milliseconds);



void acpi_os_stall(u32 microseconds);






acpi_status acpi_os_read_port(acpi_io_address address, u32 *value, u32 width);



acpi_status acpi_os_write_port(acpi_io_address address, u32 value, u32 width);





int acpi_os_read_iomem(void *virt_addr, u64 *value, u32 width);


acpi_status
acpi_os_read_memory(acpi_physical_address address, u64 *value, u32 width);



acpi_status
acpi_os_write_memory(acpi_physical_address address, u64 value, u32 width);
# 295 "./include/acpi/acpiosxf.h"
acpi_status
acpi_os_read_pci_configuration(struct acpi_pci_id *pci_id,
          u32 reg, u64 *value, u32 width);



acpi_status
acpi_os_write_pci_configuration(struct acpi_pci_id *pci_id,
    u32 reg, u64 value, u32 width);
# 318 "./include/acpi/acpiosxf.h"
u64 acpi_os_get_timer(void);



acpi_status acpi_os_signal(u32 function, void *info);



acpi_status acpi_os_enter_sleep(u8 sleep_state, u32 rega_value, u32 regb_value);






__attribute__ ((__format__ (__printf__, 1, 1 +1)))
void acpi_os_printf(const char *format, ...);



void acpi_os_vprintf(const char *format, va_list args);
# 349 "./include/acpi/acpiosxf.h"
acpi_status acpi_os_get_line(char *buffer, u32 buffer_length, u32 *bytes_read);
# 361 "./include/acpi/acpiosxf.h"
acpi_status acpi_os_wait_command_ready(void);



acpi_status acpi_os_notify_command_complete(void);



void
acpi_os_trace_point(acpi_trace_event_type type,
      u8 begin, u8 *aml, char *pathname);
# 31 "./include/acpi/acpi.h" 2
# 1 "./include/acpi/acpixf.h" 1
# 17 "./include/acpi/acpixf.h"
# 1 "./include/acpi/acconfig.h" 1
# 18 "./include/acpi/acpixf.h" 2


# 1 "./include/acpi/acbuffer.h" 1
# 32 "./include/acpi/acbuffer.h"
struct acpi_fde_info {
 u32 floppy0;
 u32 floppy1;
 u32 floppy2;
 u32 floppy3;
 u32 tape;
};





struct acpi_grt_info {
 u16 year;
 u8 month;
 u8 day;
 u8 hour;
 u8 minute;
 u8 second;
 u8 valid;
 u16 milliseconds;
 u16 timezone;
 u8 daylight;
 u8 reserved[3];
};



struct acpi_gtm_info {
 u32 pio_speed0;
 u32 dma_speed0;
 u32 pio_speed1;
 u32 dma_speed1;
 u32 flags;
};
# 77 "./include/acpi/acbuffer.h"
struct acpi_pld_info {
 u8 revision;
 u8 ignore_color;
 u8 red;
 u8 green;
 u8 blue;
 u16 width;
 u16 height;
 u8 user_visible;
 u8 dock;
 u8 lid;
 u8 panel;
 u8 vertical_position;
 u8 horizontal_position;
 u8 shape;
 u8 group_orientation;
 u8 group_token;
 u8 group_position;
 u8 bay;
 u8 ejectable;
 u8 ospm_eject_required;
 u8 cabinet_number;
 u8 card_cage_number;
 u8 reference;
 u8 rotation;
 u8 order;
 u8 reserved;
 u16 vertical_offset;
 u16 horizontal_offset;
};
# 21 "./include/acpi/acpixf.h" 2
# 104 "./include/acpi/acpixf.h"
                                                              ;
# 113 "./include/acpi/acpixf.h"
                                                           ;






                                                      ;





                                                                ;
# 136 "./include/acpi/acpixf.h"
                                                            ;




                                                             ;







                                                       ;







                                                     ;
# 167 "./include/acpi/acpixf.h"
                                                              ;
# 176 "./include/acpi/acpixf.h"
                                                             ;







                                                           ;





                                                         ;





                                                                ;




                                                               ;





                                          ;






                                                      ;






                                                                          ;
# 231 "./include/acpi/acpixf.h"
                                                                      ;





                                              ;
                                                                ;
                                                                         ;
                                                                         ;






                                                         ;
                                        ;



                                                         ;
# 266 "./include/acpi/acpixf.h"
                                                  ;
                                        ;
                                                  ;
# 404 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_initialize_tables(struct acpi_table_desc *initial_storage, u32 initial_table_count, u8 allow_resize) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_initialize_subsystem(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_enable_subsystem(u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_initialize_objects(u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_terminate(void) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_subsystem_status(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_system_info(struct acpi_buffer *ret_buffer) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_statistics(struct acpi_statistics *stats) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *acpi_format_exception(acpi_status exception) {return(((void *)0));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_purge_cached_objects(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_interface(acpi_string interface_name) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_interface(acpi_string interface_name) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_update_interfaces(u8 action) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 acpi_check_address_range(acpi_adr_space_type space_id, acpi_physical_address address, acpi_size length, u8 warn) {return(0);}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_decode_pld_buffer(u8 *in_buffer, acpi_size length, struct acpi_pld_info **return_buffer) {return(((acpi_status) (0x001C | 0x0000)));}
# 456 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_install_table(acpi_physical_address address, u8 physical) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_load_table(struct acpi_table_header *table, u32 *table_idx) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_unload_table(u32 table_index) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_unload_parent_table(acpi_handle object) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_load_tables(void) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_reallocate_root_table(void) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) acpi_find_root_pointer(acpi_physical_address *rsdp_address) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_table_header(acpi_string signature, u32 instance, struct acpi_table_header *out_table_header) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_table(acpi_string signature, u32 instance, struct acpi_table_header **out_table) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_put_table(struct acpi_table_header *table) {return;}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_table_by_index(u32 table_index, struct acpi_table_header **out_table) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_table_handler(acpi_table_handler handler, void *context) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_table_handler(acpi_table_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_walk_namespace(acpi_object_type type, acpi_handle start_object, u32 max_depth, acpi_walk_callback descending_callback, acpi_walk_callback ascending_callback, void *context, void **return_value) {return(((acpi_status) (0x001C | 0x0000)));}
# 517 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_devices(const char *HID, acpi_walk_callback user_function, void *context, void **return_value) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_name(acpi_handle object, u32 name_type, struct acpi_buffer *ret_path_ptr) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_handle(acpi_handle parent, acpi_string pathname, acpi_handle *ret_handle) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_attach_data(acpi_handle object, acpi_object_handler handler, void *data) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_detach_data(acpi_handle object, acpi_object_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_data(acpi_handle object, acpi_object_handler handler, void **data) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_debug_trace(const char *name, u32 debug_level, u32 debug_layer, u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_evaluate_object(acpi_handle object, acpi_string pathname, struct acpi_object_list *parameter_objects, struct acpi_buffer *return_object_buffer) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_evaluate_object_typed(acpi_handle object, acpi_string pathname, struct acpi_object_list *external_params, struct acpi_buffer *return_buffer, acpi_object_type return_type) {return(((acpi_status) (0x001C | 0x0000)));}
# 563 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_object_info(acpi_handle object, struct acpi_device_info **return_buffer) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_method(u8 *buffer) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_next_object(acpi_object_type type, acpi_handle parent, acpi_handle child, acpi_handle *out_handle) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_type(acpi_handle object, acpi_object_type *out_type) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_parent(acpi_handle object, acpi_handle *out_handle) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_initialization_handler (acpi_init_handler handler, u32 function) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_sci_handler(acpi_sci_handler address, void *context) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_sci_handler(acpi_sci_handler address) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_global_event_handler (acpi_gbl_event_handler handler, void *context) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_fixed_event_handler(u32 acpi_event, acpi_event_handler handler, void *context) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_fixed_event_handler(u32 acpi_event, acpi_event_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_gpe_handler(acpi_handle gpe_device, u32 gpe_number, u32 type, acpi_gpe_handler address, void *context) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_gpe_raw_handler(acpi_handle gpe_device, u32 gpe_number, u32 type, acpi_gpe_handler address, void *context) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_gpe_handler(acpi_handle gpe_device, u32 gpe_number, acpi_gpe_handler address) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_notify_handler(acpi_handle device, u32 handler_type, acpi_notify_handler handler, void *context) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_notify_handler(acpi_handle device, u32 handler_type, acpi_notify_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_address_space_handler(acpi_handle device, acpi_adr_space_type space_id, acpi_adr_space_handler handler, acpi_adr_space_setup setup, void *context) {return(((acpi_status) (0x001C | 0x0000)));}
# 653 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_address_space_handler(acpi_handle device, acpi_adr_space_type space_id, acpi_adr_space_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_exception_handler (acpi_exception_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_interface_handler (acpi_interface_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_acquire_global_lock(u16 timeout, u32 *handle) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_release_global_lock(u32 handle) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_acquire_mutex(acpi_handle handle, acpi_string pathname, u16 timeout) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_release_mutex(acpi_handle handle, acpi_string pathname) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_event(u32 event, u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable_event(u32 event, u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_clear_event(u32 event) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_event_status(u32 event, acpi_event_status *event_status) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_update_all_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_clear_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_gpe(acpi_handle gpe_device, u32 gpe_number, u8 action) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_finish_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_mask_gpe(acpi_handle gpe_device, u32 gpe_number, u8 is_masked) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_mark_gpe_for_wake(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_setup_gpe_for_wake(acpi_handle parent_device, acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_gpe_wake_mask(acpi_handle gpe_device, u32 gpe_number, u8 action) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_gpe_status(acpi_handle gpe_device, u32 gpe_number, acpi_event_status *event_status) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 acpi_dispatch_gpe(acpi_handle gpe_device, u32 gpe_number) {return(0);}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable_all_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_all_runtime_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_all_wakeup_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 acpi_any_gpe_status_set(u32 gpe_skip_number) {return(0);}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 acpi_any_fixed_event_status_set(void) {return(0);}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_gpe_device(u32 gpe_index, acpi_handle *gpe_device) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_gpe_block(acpi_handle gpe_device, struct acpi_generic_address *gpe_block_address, u32 register_count, u32 interrupt_number) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_gpe_block(acpi_handle gpe_device) {return(((acpi_status) (0x001C | 0x0000)));}





typedef
acpi_status (*acpi_walk_resource_callback) (struct acpi_resource * resource,
         void *context);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_vendor_resource(acpi_handle device, char *name, struct acpi_vendor_uuid *uuid, struct acpi_buffer *ret_buffer) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_current_resources(acpi_handle device, struct acpi_buffer *ret_buffer) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_possible_resources(acpi_handle device, struct acpi_buffer *ret_buffer) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_event_resources(acpi_handle device_handle, struct acpi_buffer *ret_buffer) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_walk_resource_buffer(struct acpi_buffer *buffer, acpi_walk_resource_callback user_function, void *context) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_walk_resources(acpi_handle device, char *name, acpi_walk_resource_callback user_function, void *context) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_current_resources(acpi_handle device, struct acpi_buffer *in_buffer) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_irq_routing_table(acpi_handle device, struct acpi_buffer *ret_buffer) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_resource_to_address64(struct acpi_resource *resource, struct acpi_resource_address64 *out) {return(((acpi_status) (0x001C | 0x0000)));}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_buffer_to_resource(u8 *aml_buffer, u16 aml_buffer_length, struct acpi_resource **resource_ptr) {return(((acpi_status) (0x001C | 0x0000)));}
# 831 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_reset(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_read(u64 *value, struct acpi_generic_address *reg) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_write(u64 value, struct acpi_generic_address *reg) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_read_bit_register(u32 register_id, u32 *return_value) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_write_bit_register(u32 register_id, u32 value) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_sleep_type_data(u8 sleep_state, u8 *slp_typ_a, u8 *slp_typ_b) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enter_sleep_state_prep(u8 sleep_state) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enter_sleep_state(u8 sleep_state) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enter_sleep_state_s4bios(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_leave_sleep_state_prep(u8 sleep_state) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_leave_sleep_state(u8 sleep_state) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_firmware_waking_vector (acpi_physical_address physical_address, acpi_physical_address physical_address64) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_timer_resolution(u32 *resolution) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_timer(u32 *ticks) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_timer_duration(u32 start_ticks, u32 end_ticks, u32 *time_elapsed) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_error(const char *module_name, u32 line_number, const char *format, ...) {return;}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 4, 4 +1))) void acpi_exception(const char *module_name, u32 line_number, acpi_status status, const char *format, ...) {return;}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_warning(const char *module_name, u32 line_number, const char *format, ...) {return;}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 1, 1 +1))) void acpi_info(const char *format, ...) {return;}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_bios_error(const char *module_name, u32 line_number, const char *format, ...) {return;}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 4, 4 +1))) void acpi_bios_exception(const char *module_name, u32 line_number, acpi_status status, const char *format, ...) {return;}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_bios_warning(const char *module_name, u32 line_number, const char *format, ...) {return;}
# 925 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 6, 6 +1))) void acpi_debug_print(u32 requested_debug_level, u32 line_number, const char *function_name, const char *module_name, u32 component_id, const char *format, ...) {return;}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 6, 6 +1))) void acpi_debug_print_raw(u32 requested_debug_level, u32 line_number, const char *function_name, const char *module_name, u32 component_id, const char *format, ...) {return;}
# 942 "./include/acpi/acpixf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_trace_point(acpi_trace_event_type type, u8 begin, u8 *aml, char *pathname) {return;}




acpi_status acpi_initialize_debugger(void);

void acpi_terminate_debugger(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_data_full(acpi_handle object, acpi_object_handler handler, void **data, void (*callback)(void *)) {return(((acpi_status) (0x001C | 0x0000)));}





void acpi_run_debugger(char *batch_buffer);

void acpi_set_debugger_thread_id(u64 thread_id);
# 32 "./include/acpi/acpi.h" 2
# 23 "./include/linux/acpi.h" 2
# 729 "./include/linux/acpi.h"
# 1 "./include/acpi/acpi_numa.h" 1
# 26 "./include/acpi/acpi_numa.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_srat(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pxm_to_node(int pxm)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_to_pxm(int node)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_hmat(void)
{
}
# 730 "./include/linux/acpi.h" 2

struct fwnode_handle;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_dev_found(const char *hid)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_dev_present(const char *hid, const char *uid, s64 hrv)
{
 return false;
}

struct acpi_device;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
acpi_dev_hid_uid_match(struct acpi_device *adev, const char *hid2, const char *uid2)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct acpi_device *
acpi_dev_get_first_match_dev(const char *hid, const char *uid, s64 hrv)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_reduced_hardware(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_dev_put(struct acpi_device *adev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_acpi_node(const struct fwnode_handle *fwnode)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_acpi_device_node(const struct fwnode_handle *fwnode)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct acpi_device *to_acpi_device_node(const struct fwnode_handle *fwnode)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_acpi_data_node(const struct fwnode_handle *fwnode)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct acpi_data_node *to_acpi_data_node(const struct fwnode_handle *fwnode)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_data_node_match(const struct fwnode_handle *fwnode,
     const char *name)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *acpi_fwnode_handle(struct acpi_device *adev)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_acpi_companion(struct device *dev)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_preset_companion(struct device *dev,
      struct acpi_device *parent, u64 addr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *acpi_dev_name(struct acpi_device *adev)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *acpi_get_first_physical_node(struct acpi_device *adev)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_early_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_subsystem_init(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_acpi_boot_init(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_boot_init(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_boot_table_prepare(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_boot_table_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_mps_check(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_check_resource_conflict(struct resource *res)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_check_region(resource_size_t start, resource_size_t n,
        const char *name)
{
 return 0;
}

struct acpi_table_header;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_table_parse(char *id,
    int (*handler)(struct acpi_table_header *))
{
 return -19;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_nvs_register(__u64 start, __u64 size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_nvs_for_each_region(int (*func)(__u64, __u64, void *),
        void *data)
{
 return 0;
}

struct acpi_device_id;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct acpi_device_id *acpi_match_device(
 const struct acpi_device_id *ids, const struct device *dev)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const void *acpi_device_get_match_data(const struct device *dev)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_driver_match_device(struct device *dev,
         const struct device_driver *drv)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) union acpi_object *acpi_evaluate_dsm(acpi_handle handle,
         const guid_t *guid,
         u64 rev, u64 func,
         union acpi_object *argv4)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_device_uevent_modalias(struct device *dev,
    struct kobj_uevent_env *env)
{
 return -19;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_device_modalias(struct device *dev,
    char *buf, int size)
{
 return -19;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *
acpi_create_platform_device(struct acpi_device *adev,
       struct property_entry *properties)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_dma_supported(const struct acpi_device *adev)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum dev_dma_attr acpi_get_dma_attr(struct acpi_device *adev)
{
 return DEV_DMA_NOT_SUPPORTED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dma_get_range(struct device *dev, u64 *dma_addr,
         u64 *offset, u64 *size)
{
 return -19;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dma_configure(struct device *dev,
         enum dev_dma_attr attr)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dma_configure_id(struct device *dev,
     enum dev_dma_attr attr,
     const u32 *input_id)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_device_set_enumerated(struct acpi_device *adev)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_device_clear_enumerated(struct acpi_device *adev)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_reconfig_notifier_register(struct notifier_block *nb)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_reconfig_notifier_unregister(struct notifier_block *nb)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct acpi_device *acpi_resource_consumer(struct resource *res)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_get_local_address(acpi_handle handle, u32 *addr)
{
 return -19;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_ioapic_add(acpi_handle root) { return 0; }
# 1020 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_runtime_suspend(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_runtime_resume(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dev_pm_attach(struct device *dev, bool power_on)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_storage_d3(struct device *dev)
{
 return false;
}
# 1043 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_prepare(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_subsys_complete(struct device *dev) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_suspend_late(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_suspend_noirq(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_suspend(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_freeze(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_subsys_poweroff(struct device *dev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_ec_mark_gpe_for_wake(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_ec_set_gpe_wake_mask(u8 action) {}
# 1061 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 3, 4))) void
acpi_handle_printk(const char *level, void *handle, const char *fmt, ...) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_evaluation_failure_warn(acpi_handle handle,
      const char *name,
      acpi_status status) {}
# 1119 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_gpio_get_irq_resource(struct acpi_resource *ares,
           struct acpi_resource_gpio **agpio)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_gpio_get_io_resource(struct acpi_resource *ares,
          struct acpi_resource_gpio **agpio)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dev_gpio_irq_get_by(struct acpi_device *adev,
        const char *name, int index)
{
 return -6;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dev_gpio_irq_get(struct acpi_device *adev, int index)
{
 return acpi_dev_gpio_irq_get_by(adev, ((void *)0), index);
}
# 1241 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dev_get_property(struct acpi_device *adev,
     const char *name, acpi_object_type type,
     const union acpi_object **obj)
{
 return -6;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
__acpi_node_get_property_reference(const struct fwnode_handle *fwnode,
    const char *name, size_t index, size_t num_args,
    struct fwnode_reference_args *args)
{
 return -6;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
acpi_node_get_property_reference(const struct fwnode_handle *fwnode,
     const char *name, size_t index,
     struct fwnode_reference_args *args)
{
 return -6;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_node_prop_get(const struct fwnode_handle *fwnode,
         const char *propname,
         void **valptr)
{
 return -6;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *
acpi_get_next_subnode(const struct fwnode_handle *fwnode,
        struct fwnode_handle *child)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *
acpi_node_get_parent(const struct fwnode_handle *fwnode)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *
acpi_graph_get_next_endpoint(const struct fwnode_handle *fwnode,
        struct fwnode_handle *prev)
{
 return ERR_PTR(-6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
acpi_graph_get_remote_endpoint(const struct fwnode_handle *fwnode,
          struct fwnode_handle **remote,
          struct fwnode_handle **port,
          struct fwnode_handle **endpoint)
{
 return -6;
}
# 1315 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_table_upgrade(void) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_has_watchdog(void) { return false; }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_parse_spcr(bool enable_earlycon, bool enable_console)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int acpi_irq_get(acpi_handle handle, unsigned int index, struct resource *res)
{
 return -22;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lpit_read_residency_count_address(u64 *address)
{
 return -22;
}
# 1360 "./include/linux/acpi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_pptt_cpu_is_thread(unsigned int cpu)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_acpi_cpu_topology(unsigned int cpu, int level)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_acpi_cpu_topology_package(unsigned int cpu)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_acpi_cpu_topology_hetero_id(unsigned int cpu)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int find_acpi_cpu_cache_topology(unsigned int cpu, int level)
{
 return -22;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_device_notify(struct device *dev) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_device_notify_remove(struct device *dev) { }
# 14 "./include/linux/i2c.h" 2




# 1 "./include/linux/regulator/consumer.h" 1
# 35 "./include/linux/regulator/consumer.h"
# 1 "./include/linux/suspend.h" 1




# 1 "./include/linux/swap.h" 1








# 1 "./include/linux/memcontrol.h" 1
# 13 "./include/linux/memcontrol.h"
# 1 "./include/linux/cgroup.h" 1
# 16 "./include/linux/cgroup.h"
# 1 "./include/uapi/linux/cgroupstats.h" 1
# 20 "./include/uapi/linux/cgroupstats.h"
# 1 "./include/uapi/linux/taskstats.h" 1
# 41 "./include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 72 "./include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;

 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 132 "./include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;


 __u64 ac_btime64;
};
# 184 "./include/uapi/linux/taskstats.h"
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 21 "./include/uapi/linux/cgroupstats.h" 2
# 32 "./include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 17 "./include/linux/cgroup.h" 2







# 1 "./include/linux/user_namespace.h" 1
# 17 "./include/linux/user_namespace.h"
struct uid_gid_extent {
 u32 first;
 u32 lower_first;
 u32 count;
};

struct uid_gid_map {
 u32 nr_extents;
 union {
  struct uid_gid_extent extent[5];
  struct {
   struct uid_gid_extent *forward;
   struct uid_gid_extent *reverse;
  };
 };
};





struct ucounts;

enum ucount_type {
 UCOUNT_USER_NAMESPACES,
 UCOUNT_PID_NAMESPACES,
 UCOUNT_UTS_NAMESPACES,
 UCOUNT_IPC_NAMESPACES,
 UCOUNT_NET_NAMESPACES,
 UCOUNT_MNT_NAMESPACES,
 UCOUNT_CGROUP_NAMESPACES,
 UCOUNT_TIME_NAMESPACES,

 UCOUNT_INOTIFY_INSTANCES,
 UCOUNT_INOTIFY_WATCHES,





 UCOUNT_RLIMIT_NPROC,
 UCOUNT_RLIMIT_MSGQUEUE,
 UCOUNT_RLIMIT_SIGPENDING,
 UCOUNT_RLIMIT_MEMLOCK,
 UCOUNT_COUNTS,
};



struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;


 bool parent_could_setfcap;







 struct list_head keyring_name_list;
 struct key *user_keyring_register;
 struct rw_semaphore keyring_sem;






 struct work_struct work;

 struct ctl_table_set set;
 struct ctl_table_header *sysctls;

 struct ucounts *ucounts;
 long ucount_max[UCOUNT_COUNTS];
} ;

struct ucounts {
 struct hlist_node node;
 struct user_namespace *ns;
 kuid_t uid;
 atomic_t count;
 atomic_long_t ucount[UCOUNT_COUNTS];
};

extern struct user_namespace init_user_ns;
extern struct ucounts init_ucounts;

bool setup_userns_sysctls(struct user_namespace *ns);
void retire_userns_sysctls(struct user_namespace *ns);
struct ucounts *inc_ucount(struct user_namespace *ns, kuid_t uid, enum ucount_type type);
void dec_ucount(struct ucounts *ucounts, enum ucount_type type);
struct ucounts *alloc_ucounts(struct user_namespace *ns, kuid_t uid);
struct ucounts * __attribute__((__warn_unused_result__)) get_ucounts(struct ucounts *ucounts);
void put_ucounts(struct ucounts *ucounts);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long get_ucounts_value(struct ucounts *ucounts, enum ucount_type type)
{
 return atomic_long_read(&ucounts->ucount[type]);
}

long inc_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
bool dec_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
bool is_ucounts_overlimit(struct ucounts *ucounts, enum ucount_type type, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_rlimit_ucount_max(struct user_namespace *ns,
  enum ucount_type type, unsigned long max)
{
 ns->ucount_max[type] = max <= ((long)(~0UL >> 1)) ? max : ((long)(~0UL >> 1));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
 return ns;
}

extern int create_user_ns(struct cred *new);
extern int unshare_userns(unsigned long unshare_flags, struct cred **new_cred);
extern void __put_user_ns(struct user_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_user_ns(struct user_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  __put_user_ns(ns);
}

struct seq_operations;
extern const struct seq_operations proc_uid_seq_operations;
extern const struct seq_operations proc_gid_seq_operations;
extern const struct seq_operations proc_projid_seq_operations;
extern ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
extern int proc_setgroups_show(struct seq_file *m, void *v);
extern bool userns_may_setgroups(const struct user_namespace *ns);
extern bool in_userns(const struct user_namespace *ancestor,
         const struct user_namespace *child);
extern bool current_in_userns(const struct user_namespace *target_ns);
struct ns_common *ns_get_owner(struct ns_common *ns);
# 25 "./include/linux/cgroup.h" 2

# 1 "./include/linux/kernel_stat.h" 1
# 20 "./include/linux/kernel_stat.h"
enum cpu_usage_stat {
 CPUTIME_USER,
 CPUTIME_NICE,
 CPUTIME_SYSTEM,
 CPUTIME_SOFTIRQ,
 CPUTIME_IRQ,
 CPUTIME_IDLE,
 CPUTIME_IOWAIT,
 CPUTIME_STEAL,
 CPUTIME_GUEST,
 CPUTIME_GUEST_NICE,
 NR_STATS,
};

struct kernel_cpustat {
 u64 cpustat[NR_STATS];
};

struct kernel_stat {
 unsigned long irqs_sum;
 unsigned int softirqs[NR_SOFTIRQS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_stat) kstat;
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_cpustat) kernel_cpustat;







extern unsigned long long nr_context_switches(void);

extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);
extern void kstat_incr_irq_this_cpu(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kstat_incr_softirqs_this_cpu(unsigned int irq)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstat.softirqs[irq])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_softirqs_cpu(unsigned int irq, int cpu)
{
       return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).softirqs[irq];
}




extern unsigned int kstat_irqs_usr(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_cpu_irqs_sum(unsigned int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).irqs_sum;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 kcpustat_field(struct kernel_cpustat *kcpustat,
     enum cpu_usage_stat usage, int cpu)
{
 return kcpustat->cpustat[usage];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcpustat_cpu_fetch(struct kernel_cpustat *dst, int cpu)
{
 *dst = (*({ do { const void *__vpp_verify = (typeof((&(kernel_cpustat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kernel_cpustat)))) *)((&(kernel_cpustat)))); (typeof((typeof(*((&(kernel_cpustat)))) *)((&(kernel_cpustat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



extern void account_user_time(struct task_struct *, u64);
extern void account_guest_time(struct task_struct *, u64);
extern void account_system_time(struct task_struct *, int, u64);
extern void account_system_index_time(struct task_struct *, u64,
          enum cpu_usage_stat);
extern void account_steal_time(u64);
extern void account_idle_time(u64);







extern void account_process_tick(struct task_struct *, int user);


extern void account_idle_ticks(unsigned long ticks);
# 27 "./include/linux/cgroup.h" 2

# 1 "./include/linux/cgroup-defs.h" 1
# 20 "./include/linux/cgroup-defs.h"
# 1 "./include/linux/u64_stats_sync.h" 1
# 68 "./include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


# 1 "./arch/riscv/include/generated/asm/local64.h" 1
# 1 "./include/asm-generic/local64.h" 1





# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/local64.h" 2
# 22 "./include/asm-generic/local64.h"
# 1 "./arch/riscv/include/generated/asm/local.h" 1
# 1 "./include/asm-generic/local.h" 1






# 1 "./arch/riscv/include/generated/uapi/asm/types.h" 1
# 8 "./include/asm-generic/local.h" 2
# 22 "./include/asm-generic/local.h"
typedef struct
{
 atomic_long_t a;
} local_t;
# 2 "./arch/riscv/include/generated/asm/local.h" 2
# 23 "./include/asm-generic/local64.h" 2

typedef struct {
 local_t a;
} local64_t;
# 2 "./arch/riscv/include/generated/asm/local64.h" 2
# 76 "./include/linux/u64_stats_sync.h" 2

typedef struct {
 local64_t v;
} u64_stats_t ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 u64_stats_read(const u64_stats_t *p)
{
 return atomic_long_read(&(&(&p->v)->a)->a);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_add(u64_stats_t *p, unsigned long val)
{
 atomic_long_add(((val)),(&((&(&p->v)->a))->a));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_inc(u64_stats_t *p)
{
 atomic_long_inc(&(&(&p->v)->a)->a);
}
# 121 "./include/linux/u64_stats_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_init(struct u64_stats_sync *syncp)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
{
 unsigned long flags = 0;





 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
    unsigned long flags)
{




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return false;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
          unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}
# 21 "./include/linux/cgroup-defs.h" 2

# 1 "./include/linux/bpf-cgroup.h" 1




# 1 "./include/linux/bpf.h" 1






# 1 "./include/uapi/linux/bpf.h" 1
# 12 "./include/uapi/linux/bpf.h"
# 1 "./include/uapi/linux/bpf_common.h" 1
# 13 "./include/uapi/linux/bpf.h" 2
# 53 "./include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};

union bpf_iter_link_info {
 struct {
  __u32 map_fd;
 } map;
};
# 838 "./include/uapi/linux/bpf.h"
enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_RUN = BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
 BPF_MAP_LOOKUP_BATCH,
 BPF_MAP_LOOKUP_AND_DELETE_BATCH,
 BPF_MAP_UPDATE_BATCH,
 BPF_MAP_DELETE_BATCH,
 BPF_LINK_CREATE,
 BPF_LINK_UPDATE,
 BPF_LINK_GET_FD_BY_ID,
 BPF_LINK_GET_NEXT_ID,
 BPF_ENABLE_STATS,
 BPF_ITER_CREATE,
 BPF_LINK_DETACH,
 BPF_PROG_BIND_MAP,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
 BPF_MAP_TYPE_STRUCT_OPS,
 BPF_MAP_TYPE_RINGBUF,
 BPF_MAP_TYPE_INODE_STORAGE,
 BPF_MAP_TYPE_TASK_STORAGE,
};
# 919 "./include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
 BPF_PROG_TYPE_TRACING,
 BPF_PROG_TYPE_STRUCT_OPS,
 BPF_PROG_TYPE_EXT,
 BPF_PROG_TYPE_LSM,
 BPF_PROG_TYPE_SK_LOOKUP,
 BPF_PROG_TYPE_SYSCALL,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 BPF_TRACE_RAW_TP,
 BPF_TRACE_FENTRY,
 BPF_TRACE_FEXIT,
 BPF_MODIFY_RETURN,
 BPF_LSM_MAC,
 BPF_TRACE_ITER,
 BPF_CGROUP_INET4_GETPEERNAME,
 BPF_CGROUP_INET6_GETPEERNAME,
 BPF_CGROUP_INET4_GETSOCKNAME,
 BPF_CGROUP_INET6_GETSOCKNAME,
 BPF_XDP_DEVMAP,
 BPF_CGROUP_INET_SOCK_RELEASE,
 BPF_XDP_CPUMAP,
 BPF_SK_LOOKUP,
 BPF_XDP,
 BPF_SK_SKB_VERDICT,
 BPF_SK_REUSEPORT_SELECT,
 BPF_SK_REUSEPORT_SELECT_OR_MIGRATE,
 BPF_PERF_EVENT,
 __MAX_BPF_ATTACH_TYPE
};



enum bpf_link_type {
 BPF_LINK_TYPE_UNSPEC = 0,
 BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
 BPF_LINK_TYPE_TRACING = 2,
 BPF_LINK_TYPE_CGROUP = 3,
 BPF_LINK_TYPE_ITER = 4,
 BPF_LINK_TYPE_NETNS = 5,
 BPF_LINK_TYPE_XDP = 6,
 BPF_LINK_TYPE_PERF_EVENT = 7,

 MAX_BPF_LINK_TYPE,
};
# 1168 "./include/uapi/linux/bpf.h"
enum {
 BPF_ANY = 0,
 BPF_NOEXIST = 1,
 BPF_EXIST = 2,
 BPF_F_LOCK = 4,
};


enum {
 BPF_F_NO_PREALLOC = (1U << 0),






 BPF_F_NO_COMMON_LRU = (1U << 1),

 BPF_F_NUMA_NODE = (1U << 2),


 BPF_F_RDONLY = (1U << 3),
 BPF_F_WRONLY = (1U << 4),


 BPF_F_STACK_BUILD_ID = (1U << 5),


 BPF_F_ZERO_SEED = (1U << 6),


 BPF_F_RDONLY_PROG = (1U << 7),
 BPF_F_WRONLY_PROG = (1U << 8),


 BPF_F_CLONE = (1U << 9),


 BPF_F_MMAPABLE = (1U << 10),


 BPF_F_PRESERVE_ELEMS = (1U << 11),


 BPF_F_INNER_MAP = (1U << 12),
};
# 1229 "./include/uapi/linux/bpf.h"
enum bpf_stats_type {

 BPF_STATS_RUN_TIME = 0,
};

enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};


struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};



union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
  __u32 btf_vmlinux_value_type_id;



 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u64 __attribute__((aligned(8))) in_batch;


  __u64 __attribute__((aligned(8))) out_batch;
  __u64 __attribute__((aligned(8))) keys;
  __u64 __attribute__((aligned(8))) values;
  __u32 count;




  __u32 map_fd;
  __u64 elem_flags;
  __u64 flags;
 } batch;

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
  __u32 attach_btf_id;
  union {

   __u32 attach_prog_fd;

   __u32 attach_btf_obj_fd;
  };
  __u32 :32;
  __u64 __attribute__((aligned(8))) fd_array;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
  __u32 replace_bpf_fd;



 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
  __u32 flags;
  __u32 cpu;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
   __u32 link_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;

 struct {
  __u32 prog_fd;
  union {
   __u32 target_fd;
   __u32 target_ifindex;
  };
  __u32 attach_type;
  __u32 flags;
  union {
   __u32 target_btf_id;
   struct {
    __u64 __attribute__((aligned(8))) iter_info;
    __u32 iter_info_len;
   };
   struct {




    __u64 bpf_cookie;
   } perf_event;
  };
 } link_create;

 struct {
  __u32 link_fd;

  __u32 new_prog_fd;
  __u32 flags;


  __u32 old_prog_fd;
 } link_update;

 struct {
  __u32 link_fd;
 } link_detach;

 struct {
  __u32 type;
 } enable_stats;

 struct {
  __u32 link_fd;
  __u32 flags;
 } iter_create;

 struct {
  __u32 prog_fd;
  __u32 map_fd;
  __u32 flags;
 } prog_bind_map;

} __attribute__((aligned(8)));
# 5064 "./include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie, BPF_FUNC_skb_output, BPF_FUNC_probe_read_user, BPF_FUNC_probe_read_kernel, BPF_FUNC_probe_read_user_str, BPF_FUNC_probe_read_kernel_str, BPF_FUNC_tcp_send_ack, BPF_FUNC_send_signal_thread, BPF_FUNC_jiffies64, BPF_FUNC_read_branch_records, BPF_FUNC_get_ns_current_pid_tgid, BPF_FUNC_xdp_output, BPF_FUNC_get_netns_cookie, BPF_FUNC_get_current_ancestor_cgroup_id, BPF_FUNC_sk_assign, BPF_FUNC_ktime_get_boot_ns, BPF_FUNC_seq_printf, BPF_FUNC_seq_write, BPF_FUNC_sk_cgroup_id, BPF_FUNC_sk_ancestor_cgroup_id, BPF_FUNC_ringbuf_output, BPF_FUNC_ringbuf_reserve, BPF_FUNC_ringbuf_submit, BPF_FUNC_ringbuf_discard, BPF_FUNC_ringbuf_query, BPF_FUNC_csum_level, BPF_FUNC_skc_to_tcp6_sock, BPF_FUNC_skc_to_tcp_sock, BPF_FUNC_skc_to_tcp_timewait_sock, BPF_FUNC_skc_to_tcp_request_sock, BPF_FUNC_skc_to_udp6_sock, BPF_FUNC_get_task_stack, BPF_FUNC_load_hdr_opt, BPF_FUNC_store_hdr_opt, BPF_FUNC_reserve_hdr_opt, BPF_FUNC_inode_storage_get, BPF_FUNC_inode_storage_delete, BPF_FUNC_d_path, BPF_FUNC_copy_from_user, BPF_FUNC_snprintf_btf, BPF_FUNC_seq_printf_btf, BPF_FUNC_skb_cgroup_classid, BPF_FUNC_redirect_neigh, BPF_FUNC_per_cpu_ptr, BPF_FUNC_this_cpu_ptr, BPF_FUNC_redirect_peer, BPF_FUNC_task_storage_get, BPF_FUNC_task_storage_delete, BPF_FUNC_get_current_task_btf, BPF_FUNC_bprm_opts_set, BPF_FUNC_ktime_get_coarse_ns, BPF_FUNC_ima_inode_hash, BPF_FUNC_sock_from_file, BPF_FUNC_check_mtu, BPF_FUNC_for_each_map_elem, BPF_FUNC_snprintf, BPF_FUNC_sys_bpf, BPF_FUNC_btf_find_by_name_kind, BPF_FUNC_sys_close, BPF_FUNC_timer_init, BPF_FUNC_timer_set_callback, BPF_FUNC_timer_start, BPF_FUNC_timer_cancel, BPF_FUNC_get_func_ip, BPF_FUNC_get_attach_cookie, BPF_FUNC_task_pt_regs,
 __BPF_FUNC_MAX_ID,
};





enum {
 BPF_F_RECOMPUTE_CSUM = (1ULL << 0),
 BPF_F_INVALIDATE_HASH = (1ULL << 1),
};




enum {
 BPF_F_HDR_FIELD_MASK = 0xfULL,
};


enum {
 BPF_F_PSEUDO_HDR = (1ULL << 4),
 BPF_F_MARK_MANGLED_0 = (1ULL << 5),
 BPF_F_MARK_ENFORCE = (1ULL << 6),
};


enum {
 BPF_F_INGRESS = (1ULL << 0),
};


enum {
 BPF_F_TUNINFO_IPV6 = (1ULL << 0),
};


enum {
 BPF_F_SKIP_FIELD_MASK = 0xffULL,
 BPF_F_USER_STACK = (1ULL << 8),

 BPF_F_FAST_STACK_CMP = (1ULL << 9),
 BPF_F_REUSE_STACKID = (1ULL << 10),

 BPF_F_USER_BUILD_ID = (1ULL << 11),
};


enum {
 BPF_F_ZERO_CSUM_TX = (1ULL << 1),
 BPF_F_DONT_FRAGMENT = (1ULL << 2),
 BPF_F_SEQ_NUMBER = (1ULL << 3),
};




enum {
 BPF_F_INDEX_MASK = 0xffffffffULL,
 BPF_F_CURRENT_CPU = BPF_F_INDEX_MASK,

 BPF_F_CTXLEN_MASK = (0xfffffULL << 32),
};


enum {
 BPF_F_CURRENT_NETNS = (-1L),
};


enum {
 BPF_CSUM_LEVEL_QUERY,
 BPF_CSUM_LEVEL_INC,
 BPF_CSUM_LEVEL_DEC,
 BPF_CSUM_LEVEL_RESET,
};


enum {
 BPF_F_ADJ_ROOM_FIXED_GSO = (1ULL << 0),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 = (1ULL << 1),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 = (1ULL << 2),
 BPF_F_ADJ_ROOM_ENCAP_L4_GRE = (1ULL << 3),
 BPF_F_ADJ_ROOM_ENCAP_L4_UDP = (1ULL << 4),
 BPF_F_ADJ_ROOM_NO_CSUM_RESET = (1ULL << 5),
 BPF_F_ADJ_ROOM_ENCAP_L2_ETH = (1ULL << 6),
};

enum {
 BPF_ADJ_ROOM_ENCAP_L2_MASK = 0xff,
 BPF_ADJ_ROOM_ENCAP_L2_SHIFT = 56,
};






enum {
 BPF_F_SYSCTL_BASE_NAME = (1ULL << 0),
};


enum {
 BPF_LOCAL_STORAGE_GET_F_CREATE = (1ULL << 0),



 BPF_SK_STORAGE_GET_F_CREATE = BPF_LOCAL_STORAGE_GET_F_CREATE,
};


enum {
 BPF_F_GET_BRANCH_RECORDS_SIZE = (1ULL << 0),
};




enum {
 BPF_RB_NO_WAKEUP = (1ULL << 0),
 BPF_RB_FORCE_WAKEUP = (1ULL << 1),
};


enum {
 BPF_RB_AVAIL_DATA = 0,
 BPF_RB_RING_SIZE = 1,
 BPF_RB_CONS_POS = 2,
 BPF_RB_PROD_POS = 3,
};


enum {
 BPF_RINGBUF_BUSY_BIT = (1U << 31),
 BPF_RINGBUF_DISCARD_BIT = (1U << 30),
 BPF_RINGBUF_HDR_SZ = 8,
};


enum {
 BPF_SK_LOOKUP_F_REPLACE = (1ULL << 0),
 BPF_SK_LOOKUP_F_NO_REUSEPORT = (1ULL << 1),
};


enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};


enum {
 BPF_F_BPRM_SECUREEXEC = (1ULL << 0),
};


enum {
 BPF_F_BROADCAST = (1ULL << 3),
 BPF_F_EXCLUDE_INGRESS = (1ULL << 4),
};
# 5250 "./include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 __u32 gso_size;
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 5322 "./include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 5336 "./include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
 __s32 rx_queue_mapping;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};
# 5430 "./include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;

 __u32 egress_ifindex;
};






struct bpf_devmap_val {
 __u32 ifindex;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};






struct bpf_cpumap_val {
 __u32 qsize;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;

 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
# 5537 "./include/uapi/linux/bpf.h"
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_sock * migrating_sk; __u64 :64; } __attribute__((aligned(8)));
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
 __u64 recursion_misses;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 btf_vmlinux_value_type_id;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
 __u64 __attribute__((aligned(8))) name;
 __u32 name_len;
 __u32 kernel_btf;
} __attribute__((aligned(8)));

struct bpf_link_info {
 __u32 type;
 __u32 id;
 __u32 prog_id;
 union {
  struct {
   __u64 __attribute__((aligned(8))) tp_name;
   __u32 tp_name_len;
  } raw_tracepoint;
  struct {
   __u32 attach_type;
   __u32 target_obj_id;
   __u32 target_btf_id;
  } tracing;
  struct {
   __u64 cgroup_id;
   __u32 attach_type;
  } cgroup;
  struct {
   __u64 __attribute__((aligned(8))) target_name;
   __u32 target_name_len;
   union {
    struct {
     __u32 map_id;
    } map;
   };
  } iter;
  struct {
   __u32 netns_ino;
   __u32 attach_type;
  } netns;
  struct {
   __u32 ifindex;
  } xdp;
 };
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
# 5736 "./include/uapi/linux/bpf.h"
 union { void * skb_data; __u64 :64; } __attribute__((aligned(8)));
 union { void * skb_data_end; __u64 :64; } __attribute__((aligned(8)));
 __u32 skb_len;



 __u32 skb_tcp_flags;
# 5752 "./include/uapi/linux/bpf.h"
};


enum {
 BPF_SOCK_OPS_RTO_CB_FLAG = (1<<0),
 BPF_SOCK_OPS_RETRANS_CB_FLAG = (1<<1),
 BPF_SOCK_OPS_STATE_CB_FLAG = (1<<2),
 BPF_SOCK_OPS_RTT_CB_FLAG = (1<<3),
# 5778 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG = (1<<4),
# 5787 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = (1<<5),
# 5802 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG = (1<<6),

 BPF_SOCK_OPS_ALL_CB_FLAGS = 0x7F,
};




enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

 BPF_SOCK_OPS_PARSE_HDR_OPT_CB,
# 5874 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_HDR_OPT_LEN_CB,
# 5891 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB,
# 5917 "./include/uapi/linux/bpf.h"
};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};

enum {
 TCP_BPF_IW = 1001,
 TCP_BPF_SNDCWND_CLAMP = 1002,
 TCP_BPF_DELACK_MAX = 1003,
 TCP_BPF_RTO_MIN = 1004,
# 5978 "./include/uapi/linux/bpf.h"
 TCP_BPF_SYN = 1005,
 TCP_BPF_SYN_IP = 1006,
 TCP_BPF_SYN_MAC = 1007,
};

enum {
 BPF_LOAD_HDR_OPT_TCP_SYN = (1ULL << 0),
};




enum {
 BPF_WRITE_HDR_TCP_CURRENT_MSS = 1,






 BPF_WRITE_HDR_TCP_SYNACK_COOKIE = 2,


};

struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};

enum {
 BPF_DEVCG_ACC_MKNOD = (1ULL << 0),
 BPF_DEVCG_ACC_READ = (1ULL << 1),
 BPF_DEVCG_ACC_WRITE = (1ULL << 2),
};

enum {
 BPF_DEVCG_DEV_BLOCK = (1ULL << 0),
 BPF_DEVCG_DEV_CHAR = (1ULL << 1),
};

struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};




enum {
 BPF_FIB_LOOKUP_DIRECT = (1U << 0),
 BPF_FIB_LOOKUP_OUTPUT = (1U << 1),
};

enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;

 union {

  __u16 tot_len;


  __u16 mtu_result;
 };



 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

struct bpf_redir_neigh {

 __u32 nh_family;

 union {
  __be32 ipv4_nh;
  __u32 ipv6_nh[4];
 };
};


enum bpf_check_mtu_flags {
 BPF_MTU_CHK_SEGS = (1U << 0),
};

enum bpf_check_mtu_ret {
 BPF_MTU_CHK_RET_SUCCESS,
 BPF_MTU_CHK_RET_FRAG_NEEDED,
 BPF_MTU_CHK_RET_SEGS_TOOBIG,
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};

enum {
 BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG = (1U << 0),
 BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL = (1U << 1),
 BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP = (1U << 2),
};

struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};




struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_timer {
 __u64 :64;
 __u64 :64;
} __attribute__((aligned(8)));

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};

struct bpf_pidns_info {
 __u32 pid;
 __u32 tgid;
};


struct bpf_sk_lookup {
 union {
  union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
  __u64 cookie;
 };

 __u32 family;
 __u32 protocol;
 __u32 remote_ip4;
 __u32 remote_ip6[4];
 __u32 remote_port;
 __u32 local_ip4;
 __u32 local_ip6[4];
 __u32 local_port;
};
# 6239 "./include/uapi/linux/bpf.h"
struct btf_ptr {
 void *ptr;
 __u32 type_id;
 __u32 flags;
};
# 6254 "./include/uapi/linux/bpf.h"
enum {
 BTF_F_COMPACT = (1ULL << 0),
 BTF_F_NONAME = (1ULL << 1),
 BTF_F_PTR_RAW = (1ULL << 2),
 BTF_F_ZERO = (1ULL << 3),
};
# 8 "./include/linux/bpf.h" 2


# 1 "./include/linux/file.h" 1
# 14 "./include/linux/file.h"
struct file;

extern void fput(struct file *);
extern void fput_many(struct file *, unsigned int);

struct file_operations;
struct task_struct;
struct vfsmount;
struct dentry;
struct inode;
struct path;
extern struct file *alloc_file_pseudo(struct inode *, struct vfsmount *,
 const char *, int flags, const struct file_operations *);
extern struct file *alloc_file_clone(struct file *, int flags,
 const struct file_operations *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fput_light(struct file *file, int fput_needed)
{
 if (fput_needed)
  fput(file);
}

struct fd {
 struct file *file;
 unsigned int flags;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput(struct fd fd)
{
 if (fd.flags & 1)
  fput(fd.file);
}

extern struct file *fget(unsigned int fd);
extern struct file *fget_many(unsigned int fd, unsigned int refs);
extern struct file *fget_raw(unsigned int fd);
extern struct file *fget_task(struct task_struct *task, unsigned int fd);
extern unsigned long __fdget(unsigned int fd);
extern unsigned long __fdget_raw(unsigned int fd);
extern unsigned long __fdget_pos(unsigned int fd);
extern void __f_unlock_pos(struct file *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd __to_fd(unsigned long v)
{
 return (struct fd){(struct file *)(v & ~3),v & 3};
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget(unsigned int fd)
{
 return __to_fd(__fdget(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_raw(unsigned int fd)
{
 return __to_fd(__fdget_raw(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_pos(int fd)
{
 return __to_fd(__fdget_pos(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput_pos(struct fd f)
{
 if (f.flags & 2)
  __f_unlock_pos(f.file);
 fdput(f);
}

extern int f_dupfd(unsigned int from, struct file *file, unsigned flags);
extern int replace_fd(unsigned fd, struct file *file, unsigned flags);
extern void set_close_on_exec(unsigned int fd, int flag);
extern bool get_close_on_exec(unsigned int fd);
extern int __get_unused_fd_flags(unsigned flags, unsigned long nofile);
extern int get_unused_fd_flags(unsigned flags);
extern void put_unused_fd(unsigned int fd);

extern void fd_install(unsigned int fd, struct file *file);

extern int __receive_fd(struct file *file, int *ufd,
   unsigned int o_flags);

extern int receive_fd(struct file *file, unsigned int o_flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int receive_fd_user(struct file *file, int *ufd,
      unsigned int o_flags)
{
 if (ufd == ((void *)0))
  return -14;
 return __receive_fd(file, ufd, o_flags);
}
int receive_fd_replace(int new_fd, struct file *file, unsigned int o_flags);

extern void flush_delayed_fput(void);
extern void __fput_sync(struct file *);

extern unsigned int sysctl_nr_open_min, sysctl_nr_open_max;
# 11 "./include/linux/bpf.h" 2
# 22 "./include/linux/bpf.h"
# 1 "./include/linux/sched/mm.h" 1
# 10 "./include/linux/sched/mm.h"
# 1 "./include/linux/sync_core.h" 1
# 15 "./include/linux/sync_core.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sync_core_before_usermode(void)
{
}
# 11 "./include/linux/sched/mm.h" 2




extern struct mm_struct *mm_alloc(void);
# 34 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmgrab(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_count);
}

extern void __mmdrop(struct mm_struct *mm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmdrop(struct mm_struct *mm)
{





 if (__builtin_expect(!!(atomic_dec_and_test(&mm->mm_count)), 0))
  __mmdrop(mm);
}
# 68 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmget(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_users);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmget_not_zero(struct mm_struct *mm)
{
 return atomic_inc_not_zero(&mm->mm_users);
}


extern void mmput(struct mm_struct *);




void mmput_async(struct mm_struct *);



extern struct mm_struct *get_task_mm(struct task_struct *task);





extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);

extern void exit_mm_release(struct task_struct *, struct mm_struct *);

extern void exec_mm_release(struct task_struct *, struct mm_struct *);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_update_next_owner(struct mm_struct *mm)
{
}



extern void arch_pick_mmap_layout(struct mm_struct *mm,
      struct rlimit *rlim_stack);
extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_vfork(struct task_struct *tsk)
{
 bool ret;
# 142 "./include/linux/sched/mm.h"
 rcu_read_lock();
 ret = tsk->vfork_done &&
   ({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { extern void __compiletime_assert_293(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_293(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); })->mm == tsk->mm;
 rcu_read_unlock();

 return ret;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t current_gfp_context(gfp_t flags)
{
 unsigned int pflags = ({ do { extern void __compiletime_assert_294(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->flags) == sizeof(char) || sizeof(get_current()->flags) == sizeof(short) || sizeof(get_current()->flags) == sizeof(int) || sizeof(get_current()->flags) == sizeof(long)) || sizeof(get_current()->flags) == sizeof(long long))) __compiletime_assert_294(); } while (0); (*(const volatile typeof( _Generic((get_current()->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (get_current()->flags))) *)&(get_current()->flags)); });

 if (__builtin_expect(!!(pflags & (0x00080000 | 0x00040000 | 0x10000000)), 0)) {




  if (pflags & 0x00080000)
   flags &= ~((( gfp_t)0x40u) | (( gfp_t)0x80u));
  else if (pflags & 0x00040000)
   flags &= ~(( gfp_t)0x80u);

  if (pflags & 0x10000000)
   flags &= ~(( gfp_t)0x08u);
 }
 return flags;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fs_reclaim_acquire(unsigned long ip) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fs_reclaim_release(unsigned long ip) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_reclaim_acquire(gfp_t gfp_mask) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_reclaim_release(gfp_t gfp_mask) { }
# 196 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_alloc(gfp_t gfp_mask)
{
 fs_reclaim_acquire(gfp_mask);
 fs_reclaim_release(gfp_mask);

 do { if (gfpflags_allow_blocking(gfp_mask)) do { __might_sleep("include/linux/sched/mm.h", 201, 0); do { } while (0); } while (0); } while (0);
}
# 215 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_noio_save(void)
{
 unsigned int flags = get_current()->flags & 0x00080000;
 get_current()->flags |= 0x00080000;
 return flags;
}
# 230 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_noio_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00080000) | flags;
}
# 246 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_nofs_save(void)
{
 unsigned int flags = get_current()->flags & 0x00040000;
 get_current()->flags |= 0x00040000;
 return flags;
}
# 261 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_nofs_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00040000) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_noreclaim_save(void)
{
 unsigned int flags = get_current()->flags & 0x00000800;
 get_current()->flags |= 0x00000800;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_noreclaim_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00000800) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_pin_save(void)
{
 unsigned int flags = get_current()->flags & 0x10000000;

 get_current()->flags |= 0x10000000;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_pin_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x10000000) | flags;
}
# 320 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *
set_active_memcg(struct mem_cgroup *memcg)
{
 return ((void *)0);
}



enum {
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY = (1U << 0),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED = (1U << 1),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY = (1U << 2),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED = (1U << 3),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY = (1U << 4),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE = (1U << 5),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY = (1U << 6),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ = (1U << 7),
};

enum {
 MEMBARRIER_FLAG_SYNC_CORE = (1U << 0),
 MEMBARRIER_FLAG_RSEQ = (1U << 1),
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void membarrier_mm_sync_core_before_usermode(struct mm_struct *mm)
{
 if (get_current()->mm != mm)
  return;
 if (__builtin_expect(!!(!(atomic_read(&mm->membarrier_state) & MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE)), 1))

  return;
 sync_core_before_usermode();
}

extern void membarrier_exec_mmap(struct mm_struct *mm);

extern void membarrier_update_current_mm(struct mm_struct *next_mm);
# 23 "./include/linux/bpf.h" 2


# 1 "./include/linux/bpfptr.h" 1





# 1 "./include/linux/sockptr.h" 1
# 14 "./include/linux/sockptr.h"
typedef struct {
 union {
  void *kernel;
  void *user;
 };
 bool is_kernel : 1;
} sockptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sockptr_is_kernel(sockptr_t sockptr)
{
 return sockptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sockptr_t KERNEL_SOCKPTR(void *p)
{
 return (sockptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sockptr_t USER_SOCKPTR(void *p)
{
 return (sockptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sockptr_is_null(sockptr_t sockptr)
{
 if (sockptr_is_kernel(sockptr))
  return !sockptr.kernel;
 return !sockptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_sockptr_offset(void *dst, sockptr_t src,
  size_t offset, size_t size)
{
 if (!sockptr_is_kernel(src))
  return copy_from_user(dst, src.user + offset, size);
 memcpy(dst, src.kernel + offset, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_sockptr(void *dst, sockptr_t src, size_t size)
{
 return copy_from_sockptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_to_sockptr_offset(sockptr_t dst, size_t offset,
  const void *src, size_t size)
{
 if (!sockptr_is_kernel(dst))
  return copy_to_user(dst.user + offset, src, size);
 memcpy(dst.kernel + offset, src, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memdup_sockptr(sockptr_t src, size_t len)
{
 void *p = __kmalloc_track_caller(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memdup_sockptr_nul(sockptr_t src, size_t len)
{
 char *p = __kmalloc_track_caller(len + 1, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 p[len] = '\0';
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strncpy_from_sockptr(char *dst, sockptr_t src, size_t count)
{
 if (sockptr_is_kernel(src)) {
  size_t len = __builtin_choose_expr(((!!(sizeof((typeof(strnlen(src.kernel, count - 1) + 1) *)1 == (typeof(count) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(strnlen(src.kernel, count - 1) + 1) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(count) * 0l)) : (int *)8))))), ((strnlen(src.kernel, count - 1) + 1) < (count) ? (strnlen(src.kernel, count - 1) + 1) : (count)), ({ typeof(strnlen(src.kernel, count - 1) + 1) __UNIQUE_ID___x295 = (strnlen(src.kernel, count - 1) + 1); typeof(count) __UNIQUE_ID___y296 = (count); ((__UNIQUE_ID___x295) < (__UNIQUE_ID___y296) ? (__UNIQUE_ID___x295) : (__UNIQUE_ID___y296)); }));

  memcpy(dst, src.kernel, len);
  return len;
 }
 return strncpy_from_user(dst, src.user, count);
}
# 7 "./include/linux/bpfptr.h" 2

typedef sockptr_t bpfptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpfptr_is_kernel(bpfptr_t bpfptr)
{
 return bpfptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t KERNEL_BPFPTR(void *p)
{
 return (bpfptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t USER_BPFPTR(void *p)
{
 return (bpfptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t make_bpfptr(u64 addr, bool is_kernel)
{
 if (is_kernel)
  return KERNEL_BPFPTR((void*) (uintptr_t) addr);
 else
  return USER_BPFPTR(( { ({ u64 __dummy; typeof((addr)) __dummy2; (void)(&__dummy == &__dummy2); 1; }); (void *)(uintptr_t)(addr); } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpfptr_is_null(bpfptr_t bpfptr)
{
 if (bpfptr_is_kernel(bpfptr))
  return !bpfptr.kernel;
 return !bpfptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpfptr_add(bpfptr_t *bpfptr, size_t val)
{
 if (bpfptr_is_kernel(*bpfptr))
  bpfptr->kernel += val;
 else
  bpfptr->user += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_bpfptr_offset(void *dst, bpfptr_t src,
       size_t offset, size_t size)
{
 return copy_from_sockptr_offset(dst, (sockptr_t) src, offset, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_bpfptr(void *dst, bpfptr_t src, size_t size)
{
 return copy_from_bpfptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_to_bpfptr_offset(bpfptr_t dst, size_t offset,
     const void *src, size_t size)
{
 return copy_to_sockptr_offset((sockptr_t) dst, offset, src, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmemdup_bpfptr(bpfptr_t src, size_t len)
{
 void *p = kvmalloc(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_bpfptr(p, src, len)) {
  kvfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strncpy_from_bpfptr(char *dst, bpfptr_t src, size_t count)
{
 return strncpy_from_sockptr(dst, (sockptr_t) src, count);
}
# 26 "./include/linux/bpf.h" 2

struct bpf_verifier_env;
struct bpf_verifier_log;
struct perf_event;
struct bpf_prog;
struct bpf_prog_aux;
struct bpf_map;
struct sock;
struct seq_file;
struct btf;
struct btf_type;
struct exception_table_entry;
struct seq_operations;
struct bpf_iter_aux_info;
struct bpf_local_storage;
struct bpf_local_storage_map;
struct kobject;
struct mem_cgroup;
struct module;
struct bpf_func_state;

extern struct idr btf_idr;
extern spinlock_t btf_idr_lock;
extern struct kobject *btf_kobj;

typedef int (*bpf_iter_init_seq_priv_t)(void *private_data,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_fini_seq_priv_t)(void *private_data);
struct bpf_iter_seq_info {
 const struct seq_operations *seq_ops;
 bpf_iter_init_seq_priv_t init_seq_private;
 bpf_iter_fini_seq_priv_t fini_seq_private;
 u32 seq_priv_size;
};


struct bpf_map_ops {

 int (*map_alloc_check)(union bpf_attr *attr);
 struct bpf_map *(*map_alloc)(union bpf_attr *attr);
 void (*map_release)(struct bpf_map *map, struct file *map_file);
 void (*map_free)(struct bpf_map *map);
 int (*map_get_next_key)(struct bpf_map *map, void *key, void *next_key);
 void (*map_release_uref)(struct bpf_map *map);
 void *(*map_lookup_elem_sys_only)(struct bpf_map *map, void *key);
 int (*map_lookup_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_lookup_and_delete_elem)(struct bpf_map *map, void *key,
       void *value, u64 flags);
 int (*map_lookup_and_delete_batch)(struct bpf_map *map,
        const union bpf_attr *attr,
        union bpf_attr *uattr);
 int (*map_update_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_delete_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);


 void *(*map_lookup_elem)(struct bpf_map *map, void *key);
 int (*map_update_elem)(struct bpf_map *map, void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_map *map, void *key);
 int (*map_push_elem)(struct bpf_map *map, void *value, u64 flags);
 int (*map_pop_elem)(struct bpf_map *map, void *value);
 int (*map_peek_elem)(struct bpf_map *map, void *value);


 void *(*map_fd_get_ptr)(struct bpf_map *map, struct file *map_file,
    int fd);
 void (*map_fd_put_ptr)(void *ptr);
 int (*map_gen_lookup)(struct bpf_map *map, struct bpf_insn *insn_buf);
 u32 (*map_fd_sys_lookup_elem)(void *ptr);
 void (*map_seq_show_elem)(struct bpf_map *map, void *key,
      struct seq_file *m);
 int (*map_check_btf)(const struct bpf_map *map,
        const struct btf *btf,
        const struct btf_type *key_type,
        const struct btf_type *value_type);


 int (*map_poke_track)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_untrack)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_run)(struct bpf_map *map, u32 key, struct bpf_prog *old,
        struct bpf_prog *new);


 int (*map_direct_value_addr)(const struct bpf_map *map,
         u64 *imm, u32 off);
 int (*map_direct_value_meta)(const struct bpf_map *map,
         u64 imm, u32 *off);
 int (*map_mmap)(struct bpf_map *map, struct vm_area_struct *vma);
 __poll_t (*map_poll)(struct bpf_map *map, struct file *filp,
        struct poll_table_struct *pts);


 int (*map_local_storage_charge)(struct bpf_local_storage_map *smap,
     void *owner, u32 size);
 void (*map_local_storage_uncharge)(struct bpf_local_storage_map *smap,
        void *owner, u32 size);
 struct bpf_local_storage ** (*map_owner_storage_ptr)(void *owner);


 int (*map_redirect)(struct bpf_map *map, u32 ifindex, u64 flags);
# 138 "./include/linux/bpf.h"
 bool (*map_meta_equal)(const struct bpf_map *meta0,
          const struct bpf_map *meta1);


 int (*map_set_for_each_callback_args)(struct bpf_verifier_env *env,
           struct bpf_func_state *caller,
           struct bpf_func_state *callee);
 int (*map_for_each_callback)(struct bpf_map *map, void *callback_fn,
         void *callback_ctx, u64 flags);


 const char * const map_btf_name;
 int *map_btf_id;


 const struct bpf_iter_seq_info *iter_seq_info;
};

struct bpf_map {



 const struct bpf_map_ops *ops __attribute__((__aligned__((1 << 6))));
 struct bpf_map *inner_map_meta;



 enum bpf_map_type map_type;
 u32 key_size;
 u32 value_size;
 u32 max_entries;
 u32 map_flags;
 int spin_lock_off;
 int timer_off;
 u32 id;
 int numa_node;
 u32 btf_key_type_id;
 u32 btf_value_type_id;
 struct btf *btf;



 char name[16U];
 u32 btf_vmlinux_value_type_id;
 bool bypass_spec_v1;
 bool frozen;





 atomic64_t refcnt __attribute__((__aligned__((1 << 6))));
 atomic64_t usercnt;
 struct work_struct work;
 struct mutex freeze_mutex;
 u64 writecnt;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_spin_lock(const struct bpf_map *map)
{
 return map->spin_lock_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_timer(const struct bpf_map *map)
{
 return map->timer_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_and_init_map_value(struct bpf_map *map, void *dst)
{
 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0))
  *(struct bpf_spin_lock *)(dst + map->spin_lock_off) =
   (struct bpf_spin_lock){};
 if (__builtin_expect(!!(map_value_has_timer(map)), 0))
  *(struct bpf_timer *)(dst + map->timer_off) =
   (struct bpf_timer){};
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_map_value(struct bpf_map *map, void *dst, void *src)
{
 u32 s_off = 0, s_sz = 0, t_off = 0, t_sz = 0;

 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0)) {
  s_off = map->spin_lock_off;
  s_sz = sizeof(struct bpf_spin_lock);
 } else if (__builtin_expect(!!(map_value_has_timer(map)), 0)) {
  t_off = map->timer_off;
  t_sz = sizeof(struct bpf_timer);
 }

 if (__builtin_expect(!!(s_sz || t_sz), 0)) {
  if (s_off < t_off || !s_sz) {
   do { typeof(s_off) __tmp = (s_off); (s_off) = (t_off); (t_off) = __tmp; } while (0);
   do { typeof(s_sz) __tmp = (s_sz); (s_sz) = (t_sz); (t_sz) = __tmp; } while (0);
  }
  memcpy(dst, src, t_off);
  memcpy(dst + t_off + t_sz,
         src + t_off + t_sz,
         s_off - t_off - t_sz);
  memcpy(dst + s_off + s_sz,
         src + s_off + s_sz,
         map->value_size - s_off - s_sz);
 } else {
  memcpy(dst, src, map->value_size);
 }
}
void copy_map_value_locked(struct bpf_map *map, void *dst, void *src,
      bool lock_src);
void bpf_timer_cancel_and_free(void *timer);
int bpf_obj_name_cpy(char *dst, const char *src, unsigned int size);

struct bpf_offload_dev;
struct bpf_offloaded_map;

struct bpf_map_dev_ops {
 int (*map_get_next_key)(struct bpf_offloaded_map *map,
    void *key, void *next_key);
 int (*map_lookup_elem)(struct bpf_offloaded_map *map,
          void *key, void *value);
 int (*map_update_elem)(struct bpf_offloaded_map *map,
          void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_offloaded_map *map, void *key);
};

struct bpf_offloaded_map {
 struct bpf_map map;
 struct net_device *netdev;
 const struct bpf_map_dev_ops *dev_ops;
 void *dev_priv;
 struct list_head offloads;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_offloaded_map *map_to_offmap(struct bpf_map *map)
{
 return ({ void *__mptr = (void *)(map); do { extern void __compiletime_assert_297(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(map)), typeof(((struct bpf_offloaded_map *)0)->map)) && !__builtin_types_compatible_p(typeof(*(map)), typeof(void))))) __compiletime_assert_297(); } while (0); ((struct bpf_offloaded_map *)(__mptr - __builtin_offsetof(struct bpf_offloaded_map, map))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_offload_neutral(const struct bpf_map *map)
{
 return map->map_type == BPF_MAP_TYPE_PERF_EVENT_ARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_support_seq_show(const struct bpf_map *map)
{
 return (map->btf_value_type_id || map->btf_vmlinux_value_type_id) &&
  map->ops->map_seq_show_elem;
}

int map_check_no_btf(const struct bpf_map *map,
       const struct btf *btf,
       const struct btf_type *key_type,
       const struct btf_type *value_type);

bool bpf_map_meta_equal(const struct bpf_map *meta0,
   const struct bpf_map *meta1);

extern const struct bpf_map_ops bpf_map_offload_ops;


enum bpf_arg_type {
 ARG_DONTCARE = 0,




 ARG_CONST_MAP_PTR,
 ARG_PTR_TO_MAP_KEY,
 ARG_PTR_TO_MAP_VALUE,
 ARG_PTR_TO_UNINIT_MAP_VALUE,
 ARG_PTR_TO_MAP_VALUE_OR_NULL,




 ARG_PTR_TO_MEM,
 ARG_PTR_TO_MEM_OR_NULL,
 ARG_PTR_TO_UNINIT_MEM,




 ARG_CONST_SIZE,
 ARG_CONST_SIZE_OR_ZERO,

 ARG_PTR_TO_CTX,
 ARG_PTR_TO_CTX_OR_NULL,
 ARG_ANYTHING,
 ARG_PTR_TO_SPIN_LOCK,
 ARG_PTR_TO_SOCK_COMMON,
 ARG_PTR_TO_INT,
 ARG_PTR_TO_LONG,
 ARG_PTR_TO_SOCKET,
 ARG_PTR_TO_SOCKET_OR_NULL,
 ARG_PTR_TO_BTF_ID,
 ARG_PTR_TO_ALLOC_MEM,
 ARG_PTR_TO_ALLOC_MEM_OR_NULL,
 ARG_CONST_ALLOC_SIZE_OR_ZERO,
 ARG_PTR_TO_BTF_ID_SOCK_COMMON,
 ARG_PTR_TO_PERCPU_BTF_ID,
 ARG_PTR_TO_FUNC,
 ARG_PTR_TO_STACK_OR_NULL,
 ARG_PTR_TO_CONST_STR,
 ARG_PTR_TO_TIMER,
 __BPF_ARG_TYPE_MAX,
};


enum bpf_return_type {
 RET_INTEGER,
 RET_VOID,
 RET_PTR_TO_MAP_VALUE,
 RET_PTR_TO_MAP_VALUE_OR_NULL,
 RET_PTR_TO_SOCKET_OR_NULL,
 RET_PTR_TO_TCP_SOCK_OR_NULL,
 RET_PTR_TO_SOCK_COMMON_OR_NULL,
 RET_PTR_TO_ALLOC_MEM_OR_NULL,
 RET_PTR_TO_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID,
 RET_PTR_TO_BTF_ID,
};





struct bpf_func_proto {
 u64 (*func)(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
 bool gpl_only;
 bool pkt_access;
 enum bpf_return_type ret_type;
 union {
  struct {
   enum bpf_arg_type arg1_type;
   enum bpf_arg_type arg2_type;
   enum bpf_arg_type arg3_type;
   enum bpf_arg_type arg4_type;
   enum bpf_arg_type arg5_type;
  };
  enum bpf_arg_type arg_type[5];
 };
 union {
  struct {
   u32 *arg1_btf_id;
   u32 *arg2_btf_id;
   u32 *arg3_btf_id;
   u32 *arg4_btf_id;
   u32 *arg5_btf_id;
  };
  u32 *arg_btf_id[5];
 };
 int *ret_btf_id;
 bool (*allowed)(const struct bpf_prog *prog);
};





struct bpf_context;

enum bpf_access_type {
 BPF_READ = 1,
 BPF_WRITE = 2
};
# 415 "./include/linux/bpf.h"
enum bpf_reg_type {
 NOT_INIT = 0,
 SCALAR_VALUE,
 PTR_TO_CTX,
 CONST_PTR_TO_MAP,
 PTR_TO_MAP_VALUE,
 PTR_TO_MAP_VALUE_OR_NULL,
 PTR_TO_STACK,
 PTR_TO_PACKET_META,
 PTR_TO_PACKET,
 PTR_TO_PACKET_END,
 PTR_TO_FLOW_KEYS,
 PTR_TO_SOCKET,
 PTR_TO_SOCKET_OR_NULL,
 PTR_TO_SOCK_COMMON,
 PTR_TO_SOCK_COMMON_OR_NULL,
 PTR_TO_TCP_SOCK,
 PTR_TO_TCP_SOCK_OR_NULL,
 PTR_TO_TP_BUFFER,
 PTR_TO_XDP_SOCK,
# 445 "./include/linux/bpf.h"
 PTR_TO_BTF_ID,




 PTR_TO_BTF_ID_OR_NULL,
 PTR_TO_MEM,
 PTR_TO_MEM_OR_NULL,
 PTR_TO_RDONLY_BUF,
 PTR_TO_RDONLY_BUF_OR_NULL,
 PTR_TO_RDWR_BUF,
 PTR_TO_RDWR_BUF_OR_NULL,
 PTR_TO_PERCPU_BTF_ID,
 PTR_TO_FUNC,
 PTR_TO_MAP_KEY,
 __BPF_REG_TYPE_MAX,
};




struct bpf_insn_access_aux {
 enum bpf_reg_type reg_type;
 union {
  int ctx_field_size;
  struct {
   struct btf *btf;
   u32 btf_id;
  };
 };
 struct bpf_verifier_log *log;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
bpf_ctx_record_field_size(struct bpf_insn_access_aux *aux, u32 size)
{
 aux->ctx_field_size = size;
}

struct bpf_prog_ops {
 int (*test_run)(struct bpf_prog *prog, const union bpf_attr *kattr,
   union bpf_attr *uattr);
};

struct bpf_verifier_ops {

 const struct bpf_func_proto *
 (*get_func_proto)(enum bpf_func_id func_id,
     const struct bpf_prog *prog);




 bool (*is_valid_access)(int off, int size, enum bpf_access_type type,
    const struct bpf_prog *prog,
    struct bpf_insn_access_aux *info);
 int (*gen_prologue)(struct bpf_insn *insn, bool direct_write,
       const struct bpf_prog *prog);
 int (*gen_ld_abs)(const struct bpf_insn *orig,
     struct bpf_insn *insn_buf);
 u32 (*convert_ctx_access)(enum bpf_access_type type,
      const struct bpf_insn *src,
      struct bpf_insn *dst,
      struct bpf_prog *prog, u32 *target_size);
 int (*btf_struct_access)(struct bpf_verifier_log *log,
     const struct btf *btf,
     const struct btf_type *t, int off, int size,
     enum bpf_access_type atype,
     u32 *next_btf_id);
 bool (*check_kfunc_call)(u32 kfunc_btf_id);
};

struct bpf_prog_offload_ops {

 int (*insn_hook)(struct bpf_verifier_env *env,
    int insn_idx, int prev_insn_idx);
 int (*finalize)(struct bpf_verifier_env *env);

 int (*replace_insn)(struct bpf_verifier_env *env, u32 off,
       struct bpf_insn *insn);
 int (*remove_insns)(struct bpf_verifier_env *env, u32 off, u32 cnt);

 int (*prepare)(struct bpf_prog *prog);
 int (*translate)(struct bpf_prog *prog);
 void (*destroy)(struct bpf_prog *prog);
};

struct bpf_prog_offload {
 struct bpf_prog *prog;
 struct net_device *netdev;
 struct bpf_offload_dev *offdev;
 void *dev_priv;
 struct list_head offloads;
 bool dev_state;
 bool opt_failed;
 void *jited_image;
 u32 jited_len;
};

enum bpf_cgroup_storage_type {
 BPF_CGROUP_STORAGE_SHARED,
 BPF_CGROUP_STORAGE_PERCPU,
 __BPF_CGROUP_STORAGE_MAX
};
# 562 "./include/linux/bpf.h"
struct btf_func_model {
 u8 ret_size;
 u8 nr_args;
 u8 arg_size[12];
};
# 592 "./include/linux/bpf.h"
struct bpf_tramp_progs {
 struct bpf_prog *progs[38];
 int nr_progs;
};
# 617 "./include/linux/bpf.h"
struct bpf_tramp_image;
int arch_prepare_bpf_trampoline(struct bpf_tramp_image *tr, void *image, void *image_end,
    const struct btf_func_model *m, u32 flags,
    struct bpf_tramp_progs *tprogs,
    void *orig_call);

u64 __attribute__((__no_instrument_function__)) __bpf_prog_enter(struct bpf_prog *prog);
void __attribute__((__no_instrument_function__)) __bpf_prog_exit(struct bpf_prog *prog, u64 start);
u64 __attribute__((__no_instrument_function__)) __bpf_prog_enter_sleepable(struct bpf_prog *prog);
void __attribute__((__no_instrument_function__)) __bpf_prog_exit_sleepable(struct bpf_prog *prog, u64 start);
void __attribute__((__no_instrument_function__)) __bpf_tramp_enter(struct bpf_tramp_image *tr);
void __attribute__((__no_instrument_function__)) __bpf_tramp_exit(struct bpf_tramp_image *tr);

struct bpf_ksym {
 unsigned long start;
 unsigned long end;
 char name[128];
 struct list_head lnode;
 struct latch_tree_node tnode;
 bool prog;
};

enum bpf_tramp_prog_type {
 BPF_TRAMP_FENTRY,
 BPF_TRAMP_FEXIT,
 BPF_TRAMP_MODIFY_RETURN,
 BPF_TRAMP_MAX,
 BPF_TRAMP_REPLACE,
};

struct bpf_tramp_image {
 void *image;
 struct bpf_ksym ksym;
 struct percpu_ref pcref;
 void *ip_after_call;
 void *ip_epilogue;
 union {
  struct callback_head rcu;
  struct work_struct work;
 };
};

struct bpf_trampoline {

 struct hlist_node hlist;

 struct mutex mutex;
 refcount_t refcnt;
 u64 key;
 struct {
  struct btf_func_model model;
  void *addr;
  bool ftrace_managed;
 } func;




 struct bpf_prog *extension_prog;

 struct hlist_head progs_hlist[BPF_TRAMP_MAX];

 int progs_cnt[BPF_TRAMP_MAX];

 struct bpf_tramp_image *cur_image;
 u64 selector;
 struct module *mod;
};

struct bpf_attach_target_info {
 struct btf_func_model fmodel;
 long tgt_addr;
 const char *tgt_name;
 const struct btf_type *tgt_type;
};



struct bpf_dispatcher_prog {
 struct bpf_prog *prog;
 refcount_t users;
};

struct bpf_dispatcher {

 struct mutex mutex;
 void *func;
 struct bpf_dispatcher_prog progs[48];
 int num_progs;
 void *image;
 u32 image_off;
 struct bpf_ksym ksym;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__no_sanitize__("cfi"))) unsigned int bpf_dispatcher_nop_func(
 const void *ctx,
 const struct bpf_insn *insnsi,
 unsigned int (*bpf_func)(const void *,
     const struct bpf_insn *))
{
 return bpf_func(ctx, insnsi);
}
# 770 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_trampoline_link_prog(struct bpf_prog *prog,
        struct bpf_trampoline *tr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_trampoline_unlink_prog(struct bpf_prog *prog,
          struct bpf_trampoline *tr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_trampoline *bpf_trampoline_get(u64 key,
       struct bpf_attach_target_info *tgt_info)
{
 return ERR_PTR(-95);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_trampoline_put(struct bpf_trampoline *tr) {}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_dispatcher_change_prog(struct bpf_dispatcher *d,
           struct bpf_prog *from,
           struct bpf_prog *to) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_bpf_image_address(unsigned long address)
{
 return false;
}


struct bpf_func_info_aux {
 u16 linkage;
 bool unreliable;
};

enum bpf_jit_poke_reason {
 BPF_POKE_REASON_TAIL_CALL,
};


struct bpf_jit_poke_descriptor {
 void *tailcall_target;
 void *tailcall_bypass;
 void *bypass_addr;
 void *aux;
 union {
  struct {
   struct bpf_map *map;
   u32 key;
  } tail_call;
 };
 bool tailcall_target_stable;
 u8 adj_off;
 u16 reason;
 u32 insn_idx;
};


struct bpf_ctx_arg_aux {
 u32 offset;
 enum bpf_reg_type reg_type;
 u32 btf_id;
};

struct btf_mod_pair {
 struct btf *btf;
 struct module *module;
};

struct bpf_kfunc_desc_tab;

struct bpf_prog_aux {
 atomic64_t refcnt;
 u32 used_map_cnt;
 u32 used_btf_cnt;
 u32 max_ctx_offset;
 u32 max_pkt_offset;
 u32 max_tp_access;
 u32 stack_depth;
 u32 id;
 u32 func_cnt;
 u32 func_idx;
 u32 attach_btf_id;
 u32 ctx_arg_info_size;
 u32 max_rdonly_access;
 u32 max_rdwr_access;
 struct btf *attach_btf;
 const struct bpf_ctx_arg_aux *ctx_arg_info;
 struct mutex dst_mutex;
 struct bpf_prog *dst_prog;
 struct bpf_trampoline *dst_trampoline;
 enum bpf_prog_type saved_dst_prog_type;
 enum bpf_attach_type saved_dst_attach_type;
 bool verifier_zext;
 bool offload_requested;
 bool attach_btf_trace;
 bool func_proto_unreliable;
 bool sleepable;
 bool tail_call_reachable;
 struct hlist_node tramp_hlist;

 const struct btf_type *attach_func_proto;

 const char *attach_func_name;
 struct bpf_prog **func;
 void *jit_data;
 struct bpf_jit_poke_descriptor *poke_tab;
 struct bpf_kfunc_desc_tab *kfunc_tab;
 u32 size_poke_tab;
 struct bpf_ksym ksym;
 const struct bpf_prog_ops *ops;
 struct bpf_map **used_maps;
 struct mutex used_maps_mutex;
 struct btf_mod_pair *used_btfs;
 struct bpf_prog *prog;
 struct user_struct *user;
 u64 load_time;
 struct bpf_map *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
 char name[16U];



 struct bpf_prog_offload *offload;
 struct btf *btf;
 struct bpf_func_info *func_info;
 struct bpf_func_info_aux *func_info_aux;






 struct bpf_line_info *linfo;







 void **jited_linfo;
 u32 func_info_cnt;
 u32 nr_linfo;




 u32 linfo_idx;
 u32 num_exentries;
 struct exception_table_entry *extable;
 union {
  struct work_struct work;
  struct callback_head rcu;
 };
};

struct bpf_array_aux {





 enum bpf_prog_type type;
 bool jited;

 struct list_head poke_progs;
 struct bpf_map *map;
 struct mutex poke_mutex;
 struct work_struct work;
};

struct bpf_link {
 atomic64_t refcnt;
 u32 id;
 enum bpf_link_type type;
 const struct bpf_link_ops *ops;
 struct bpf_prog *prog;
 struct work_struct work;
};

struct bpf_link_ops {
 void (*release)(struct bpf_link *link);
 void (*dealloc)(struct bpf_link *link);
 int (*detach)(struct bpf_link *link);
 int (*update_prog)(struct bpf_link *link, struct bpf_prog *new_prog,
      struct bpf_prog *old_prog);
 void (*show_fdinfo)(const struct bpf_link *link, struct seq_file *seq);
 int (*fill_link_info)(const struct bpf_link *link,
         struct bpf_link_info *info);
};

struct bpf_link_primer {
 struct bpf_link *link;
 struct file *file;
 int fd;
 u32 id;
};

struct bpf_struct_ops_value;
struct btf_member;


struct bpf_struct_ops {
 const struct bpf_verifier_ops *verifier_ops;
 int (*init)(struct btf *btf);
 int (*check_member)(const struct btf_type *t,
       const struct btf_member *member);
 int (*init_member)(const struct btf_type *t,
      const struct btf_member *member,
      void *kdata, const void *udata);
 int (*reg)(void *kdata);
 void (*unreg)(void *kdata);
 const struct btf_type *type;
 const struct btf_type *value_type;
 const char *name;
 struct btf_func_model func_models[64];
 u32 type_id;
 u32 value_id;
};
# 1012 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct bpf_struct_ops *bpf_struct_ops_find(u32 type_id)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_struct_ops_init(struct btf *btf,
           struct bpf_verifier_log *log)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_try_module_get(const void *data, struct module *owner)
{
 return try_module_get(owner);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_module_put(const void *data, struct module *owner)
{
 module_put(owner);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_struct_ops_map_sys_lookup_elem(struct bpf_map *map,
           void *key,
           void *value)
{
 return -22;
}


struct bpf_array {
 struct bpf_map map;
 u32 elem_size;
 u32 index_mask;
 struct bpf_array_aux *aux;
 union {
  char value[0] __attribute__((__aligned__(8)));
  void *ptrs[0] __attribute__((__aligned__(8)));
  void *pptrs[0] __attribute__((__aligned__(8)));
 };
};
# 1059 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 bpf_map_flags_to_cap(struct bpf_map *map)
{
 u32 access_flags = map->map_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);




 if (access_flags & BPF_F_RDONLY_PROG)
  return ((((1UL))) << (0));
 else if (access_flags & BPF_F_WRONLY_PROG)
  return ((((1UL))) << (1));
 else
  return ((((1UL))) << (0)) | ((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_flags_access_ok(u32 access_flags)
{
 return (access_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG)) !=
        (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);
}

struct bpf_event_entry {
 struct perf_event *event;
 struct file *perf_file;
 struct file *map_file;
 struct callback_head rcu;
};

bool bpf_prog_array_compatible(struct bpf_array *array, const struct bpf_prog *fp);
int bpf_prog_calc_tag(struct bpf_prog *fp);

const struct bpf_func_proto *bpf_get_trace_printk_proto(void);

typedef unsigned long (*bpf_ctx_copy_t)(void *dst, const void *src,
     unsigned long off, unsigned long len);
typedef u32 (*bpf_convert_ctx_access_t)(enum bpf_access_type type,
     const struct bpf_insn *src,
     struct bpf_insn *dst,
     struct bpf_prog *prog,
     u32 *target_size);

u64 bpf_event_output(struct bpf_map *map, u64 flags, void *meta, u64 meta_size,
       void *ctx, u64 ctx_size, bpf_ctx_copy_t ctx_copy);
# 1115 "./include/linux/bpf.h"
struct bpf_prog_array_item {
 struct bpf_prog *prog;
 union {
  struct bpf_cgroup_storage *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
  u64 bpf_cookie;
 };
};

struct bpf_prog_array {
 struct callback_head rcu;
 struct bpf_prog_array_item items[];
};

struct bpf_prog_array *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
void bpf_prog_array_free(struct bpf_prog_array *progs);
int bpf_prog_array_length(struct bpf_prog_array *progs);
bool bpf_prog_array_is_empty(struct bpf_prog_array *array);
int bpf_prog_array_copy_to_user(struct bpf_prog_array *progs,
    __u32 *prog_ids, u32 cnt);

void bpf_prog_array_delete_safe(struct bpf_prog_array *progs,
    struct bpf_prog *old_prog);
int bpf_prog_array_delete_safe_at(struct bpf_prog_array *array, int index);
int bpf_prog_array_update_at(struct bpf_prog_array *array, int index,
        struct bpf_prog *prog);
int bpf_prog_array_copy_info(struct bpf_prog_array *array,
        u32 *prog_ids, u32 request_cnt,
        u32 *prog_cnt);
int bpf_prog_array_copy(struct bpf_prog_array *old_array,
   struct bpf_prog *exclude_prog,
   struct bpf_prog *include_prog,
   u64 bpf_cookie,
   struct bpf_prog_array **new_array);

struct bpf_run_ctx {};

struct bpf_cg_run_ctx {
 struct bpf_run_ctx run_ctx;
 const struct bpf_prog_array_item *prog_item;
};

struct bpf_trace_run_ctx {
 struct bpf_run_ctx run_ctx;
 u64 bpf_cookie;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_run_ctx *bpf_set_run_ctx(struct bpf_run_ctx *new_ctx)
{
 struct bpf_run_ctx *old_ctx = ((void *)0);


 old_ctx = get_current()->bpf_ctx;
 get_current()->bpf_ctx = new_ctx;

 return old_ctx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_reset_run_ctx(struct bpf_run_ctx *old_ctx)
{

 get_current()->bpf_ctx = old_ctx;

}






typedef u32 (*bpf_prog_run_fn)(const struct bpf_prog *prog, const void *ctx);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG_FLAGS(const struct bpf_prog_array *array_rcu,
       const void *ctx, bpf_prog_run_fn run_prog,
       u32 *ret_flags)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;
 u32 func_ret;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { extern void __compiletime_assert_298(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_298(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { extern void __compiletime_assert_299(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_299(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  func_ret = run_prog(prog, ctx);
  ret &= (func_ret & 1);
  *(ret_flags) |= (func_ret >> 1);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG(const struct bpf_prog_array *array_rcu,
        const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { extern void __compiletime_assert_300(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_300(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { extern void __compiletime_assert_301(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_301(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY(const struct bpf_prog_array *array_rcu,
     const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_trace_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { extern void __compiletime_assert_302(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_302(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 if (__builtin_expect(!!(!array), 0))
  goto out;
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 item = &array->items[0];
 while ((prog = ({ do { extern void __compiletime_assert_303(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_303(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.bpf_cookie = item->bpf_cookie;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
out:
 rcu_read_unlock();
 migrate_enable();
 return ret;
}
# 1311 "./include/linux/bpf.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) bpf_prog_active;
extern struct mutex bpf_stats_enabled_mutex;
# 1326 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_disable_instrumentation(void)
{
 migrate_disable();
 if (0)
  do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_enable_instrumentation(void)
{
 if (0)
  do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 migrate_enable();
}

extern const struct file_operations bpf_map_fops;
extern const struct file_operations bpf_prog_fops;
extern const struct file_operations bpf_iter_fops;







# 1 "./include/linux/bpf_types.h" 1




extern const struct bpf_prog_ops sk_filter_prog_ops; extern const struct bpf_verifier_ops sk_filter_verifier_ops;

extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;

extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;

extern const struct bpf_prog_ops xdp_prog_ops; extern const struct bpf_verifier_ops xdp_verifier_ops;


extern const struct bpf_prog_ops cg_skb_prog_ops; extern const struct bpf_verifier_ops cg_skb_verifier_ops;

extern const struct bpf_prog_ops cg_sock_prog_ops; extern const struct bpf_verifier_ops cg_sock_verifier_ops;

extern const struct bpf_prog_ops cg_sock_addr_prog_ops; extern const struct bpf_verifier_ops cg_sock_addr_verifier_ops;


extern const struct bpf_prog_ops lwt_in_prog_ops; extern const struct bpf_verifier_ops lwt_in_verifier_ops;

extern const struct bpf_prog_ops lwt_out_prog_ops; extern const struct bpf_verifier_ops lwt_out_verifier_ops;

extern const struct bpf_prog_ops lwt_xmit_prog_ops; extern const struct bpf_verifier_ops lwt_xmit_verifier_ops;

extern const struct bpf_prog_ops lwt_seg6local_prog_ops; extern const struct bpf_verifier_ops lwt_seg6local_verifier_ops;

extern const struct bpf_prog_ops sock_ops_prog_ops; extern const struct bpf_verifier_ops sock_ops_verifier_ops;

extern const struct bpf_prog_ops sk_skb_prog_ops; extern const struct bpf_verifier_ops sk_skb_verifier_ops;

extern const struct bpf_prog_ops sk_msg_prog_ops; extern const struct bpf_verifier_ops sk_msg_verifier_ops;

extern const struct bpf_prog_ops flow_dissector_prog_ops; extern const struct bpf_verifier_ops flow_dissector_verifier_ops;
# 53 "./include/linux/bpf_types.h"
extern const struct bpf_prog_ops cg_dev_prog_ops; extern const struct bpf_verifier_ops cg_dev_verifier_ops;

extern const struct bpf_prog_ops cg_sysctl_prog_ops; extern const struct bpf_verifier_ops cg_sysctl_verifier_ops;

extern const struct bpf_prog_ops cg_sockopt_prog_ops; extern const struct bpf_verifier_ops cg_sockopt_verifier_ops;







extern const struct bpf_prog_ops sk_reuseport_prog_ops; extern const struct bpf_verifier_ops sk_reuseport_verifier_ops;

extern const struct bpf_prog_ops sk_lookup_prog_ops; extern const struct bpf_verifier_ops sk_lookup_verifier_ops;
# 80 "./include/linux/bpf_types.h"
extern const struct bpf_prog_ops bpf_syscall_prog_ops; extern const struct bpf_verifier_ops bpf_syscall_verifier_ops;


extern const struct bpf_map_ops array_map_ops;
extern const struct bpf_map_ops percpu_array_map_ops;
extern const struct bpf_map_ops prog_array_map_ops;
extern const struct bpf_map_ops perf_event_array_map_ops;

extern const struct bpf_map_ops cgroup_array_map_ops;


extern const struct bpf_map_ops cgroup_storage_map_ops;
extern const struct bpf_map_ops cgroup_storage_map_ops;

extern const struct bpf_map_ops htab_map_ops;
extern const struct bpf_map_ops htab_percpu_map_ops;
extern const struct bpf_map_ops htab_lru_map_ops;
extern const struct bpf_map_ops htab_lru_percpu_map_ops;
extern const struct bpf_map_ops trie_map_ops;



extern const struct bpf_map_ops array_of_maps_map_ops;
extern const struct bpf_map_ops htab_of_maps_map_ops;

extern const struct bpf_map_ops dev_map_ops;
extern const struct bpf_map_ops dev_map_hash_ops;
extern const struct bpf_map_ops sk_storage_map_ops;



extern const struct bpf_map_ops task_storage_map_ops;
extern const struct bpf_map_ops cpu_map_ops;




extern const struct bpf_map_ops sock_map_ops;
extern const struct bpf_map_ops sock_hash_ops;
extern const struct bpf_map_ops reuseport_array_ops;


extern const struct bpf_map_ops queue_map_ops;
extern const struct bpf_map_ops stack_map_ops;



extern const struct bpf_map_ops ringbuf_map_ops;
# 1355 "./include/linux/bpf.h" 2




extern const struct bpf_prog_ops bpf_offload_prog_ops;
extern const struct bpf_verifier_ops tc_cls_act_analyzer_ops;
extern const struct bpf_verifier_ops xdp_analyzer_ops;

struct bpf_prog *bpf_prog_get(u32 ufd);
struct bpf_prog *bpf_prog_get_type_dev(u32 ufd, enum bpf_prog_type type,
           bool attach_drv);
void bpf_prog_add(struct bpf_prog *prog, int i);
void bpf_prog_sub(struct bpf_prog *prog, int i);
void bpf_prog_inc(struct bpf_prog *prog);
struct bpf_prog * __attribute__((__warn_unused_result__)) bpf_prog_inc_not_zero(struct bpf_prog *prog);
void bpf_prog_put(struct bpf_prog *prog);

void bpf_prog_free_id(struct bpf_prog *prog, bool do_idr_lock);
void bpf_map_free_id(struct bpf_map *map, bool do_idr_lock);

struct bpf_map *bpf_map_get(u32 ufd);
struct bpf_map *bpf_map_get_with_uref(u32 ufd);
struct bpf_map *__bpf_map_get(struct fd f);
void bpf_map_inc(struct bpf_map *map);
void bpf_map_inc_with_uref(struct bpf_map *map);
struct bpf_map * __attribute__((__warn_unused_result__)) bpf_map_inc_not_zero(struct bpf_map *map);
void bpf_map_put_with_uref(struct bpf_map *map);
void bpf_map_put(struct bpf_map *map);
void *bpf_map_area_alloc(u64 size, int numa_node);
void *bpf_map_area_mmapable_alloc(u64 size, int numa_node);
void bpf_map_area_free(void *base);
void bpf_map_init_from_attr(struct bpf_map *map, union bpf_attr *attr);
int generic_map_lookup_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
int generic_map_update_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
int generic_map_delete_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
struct bpf_map *bpf_map_get_curr_or_next(u32 *id);
struct bpf_prog *bpf_prog_get_curr_or_next(u32 *id);
# 1406 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
bpf_map_kmalloc_node(const struct bpf_map *map, size_t size, gfp_t flags,
       int node)
{
 return kmalloc_node(size, flags, node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
bpf_map_kzalloc(const struct bpf_map *map, size_t size, gfp_t flags)
{
 return kzalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
bpf_map_alloc_percpu(const struct bpf_map *map, size_t size, size_t align,
       gfp_t flags)
{
 return __alloc_percpu_gfp(size, align, flags);
}


extern int sysctl_unprivileged_bpf_disabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_ptr_leaks(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_uninit_stack(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_ptr_to_map_access(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_bypass_spec_v1(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_bypass_spec_v4(void)
{
 return perfmon_capable();
}

int bpf_map_new_fd(struct bpf_map *map, int flags);
int bpf_prog_new_fd(struct bpf_prog *prog);

void bpf_link_init(struct bpf_link *link, enum bpf_link_type type,
     const struct bpf_link_ops *ops, struct bpf_prog *prog);
int bpf_link_prime(struct bpf_link *link, struct bpf_link_primer *primer);
int bpf_link_settle(struct bpf_link_primer *primer);
void bpf_link_cleanup(struct bpf_link_primer *primer);
void bpf_link_inc(struct bpf_link *link);
void bpf_link_put(struct bpf_link *link);
int bpf_link_new_fd(struct bpf_link *link);
struct file *bpf_link_new_file(struct bpf_link *link, int *reserved_fd);
struct bpf_link *bpf_link_get_from_fd(u32 ufd);

int bpf_obj_pin_user(u32 ufd, const char *pathname);
int bpf_obj_get_user(const char *pathname, int flags);






struct bpf_iter_aux_info {
 struct bpf_map *map;
};

typedef int (*bpf_iter_attach_target_t)(struct bpf_prog *prog,
     union bpf_iter_link_info *linfo,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_detach_target_t)(struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_show_fdinfo_t) (const struct bpf_iter_aux_info *aux,
     struct seq_file *seq);
typedef int (*bpf_iter_fill_link_info_t)(const struct bpf_iter_aux_info *aux,
      struct bpf_link_info *info);
typedef const struct bpf_func_proto *
(*bpf_iter_get_func_proto_t)(enum bpf_func_id func_id,
        const struct bpf_prog *prog);

enum bpf_iter_feature {
 BPF_ITER_RESCHED = ((((1UL))) << (0)),
};


struct bpf_iter_reg {
 const char *target;
 bpf_iter_attach_target_t attach_target;
 bpf_iter_detach_target_t detach_target;
 bpf_iter_show_fdinfo_t show_fdinfo;
 bpf_iter_fill_link_info_t fill_link_info;
 bpf_iter_get_func_proto_t get_func_proto;
 u32 ctx_arg_info_size;
 u32 feature;
 struct bpf_ctx_arg_aux ctx_arg_info[2];
 const struct bpf_iter_seq_info *seq_info;
};

struct bpf_iter_meta {
 union { struct seq_file * seq; __u64 :64; } __attribute__((aligned(8)));
 u64 session_id;
 u64 seq_num;
};

struct bpf_iter__bpf_map_elem {
 union { struct bpf_iter_meta * meta; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_map * map; __u64 :64; } __attribute__((aligned(8)));
 union { void * key; __u64 :64; } __attribute__((aligned(8)));
 union { void * value; __u64 :64; } __attribute__((aligned(8)));
};

int bpf_iter_reg_target(const struct bpf_iter_reg *reg_info);
void bpf_iter_unreg_target(const struct bpf_iter_reg *reg_info);
bool bpf_iter_prog_supported(struct bpf_prog *prog);
const struct bpf_func_proto *
bpf_iter_get_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog);
int bpf_iter_link_attach(const union bpf_attr *attr, bpfptr_t uattr, struct bpf_prog *prog);
int bpf_iter_new_fd(struct bpf_link *link);
bool bpf_link_is_iter(struct bpf_link *link);
struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *meta, bool in_stop);
int bpf_iter_run_prog(struct bpf_prog *prog, void *ctx);
void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *aux,
         struct seq_file *seq);
int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *aux,
    struct bpf_link_info *info);

int map_set_for_each_callback_args(struct bpf_verifier_env *env,
       struct bpf_func_state *caller,
       struct bpf_func_state *callee);

int bpf_percpu_hash_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_array_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_hash_update(struct bpf_map *map, void *key, void *value,
      u64 flags);
int bpf_percpu_array_update(struct bpf_map *map, void *key, void *value,
       u64 flags);

int bpf_stackmap_copy(struct bpf_map *map, void *key, void *value);

int bpf_fd_array_map_update_elem(struct bpf_map *map, struct file *map_file,
     void *key, void *value, u64 map_flags);
int bpf_fd_array_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);
int bpf_fd_htab_map_update_elem(struct bpf_map *map, struct file *map_file,
    void *key, void *value, u64 map_flags);
int bpf_fd_htab_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);

int bpf_get_file_flag(int flags);
int bpf_check_uarg_tail_zero(bpfptr_t uaddr, size_t expected_size,
        size_t actual_size);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_long_memcpy(void *dst, const void *src, u32 size)
{
 const long *lsrc = src;
 long *ldst = dst;

 size /= sizeof(long);
 while (size--)
  *ldst++ = *lsrc++;
}


int bpf_check(struct bpf_prog **fp, union bpf_attr *attr, bpfptr_t uattr);


void bpf_patch_call_args(struct bpf_insn *insn, u32 stack_depth);


struct btf *bpf_get_btf_vmlinux(void);


struct xdp_buff;
struct sk_buff;
struct bpf_dtab_netdev;
struct bpf_cpu_map_entry;

void __dev_flush(void);
int dev_xdp_enqueue(struct net_device *dev, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_enqueue(struct bpf_dtab_netdev *dst, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_enqueue_multi(struct xdp_buff *xdp, struct net_device *dev_rx,
     struct bpf_map *map, bool exclude_ingress);
int dev_map_generic_redirect(struct bpf_dtab_netdev *dst, struct sk_buff *skb,
        struct bpf_prog *xdp_prog);
int dev_map_redirect_multi(struct net_device *dev, struct sk_buff *skb,
      struct bpf_prog *xdp_prog, struct bpf_map *map,
      bool exclude_ingress);

void __cpu_map_flush(void);
int cpu_map_enqueue(struct bpf_cpu_map_entry *rcpu, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int cpu_map_generic_redirect(struct bpf_cpu_map_entry *rcpu,
        struct sk_buff *skb);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_map_attr_numa_node(const union bpf_attr *attr)
{
 return (attr->map_flags & BPF_F_NUMA_NODE) ?
  attr->numa_node : (-1);
}

struct bpf_prog *bpf_prog_get_type_path(const char *name, enum bpf_prog_type type);
int array_map_alloc_check(union bpf_attr *attr);

int bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_tracing(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
int bpf_prog_test_run_flow_dissector(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
int bpf_prog_test_run_raw_tp(struct bpf_prog *prog,
        const union bpf_attr *kattr,
        union bpf_attr *uattr);
int bpf_prog_test_run_sk_lookup(struct bpf_prog *prog,
    const union bpf_attr *kattr,
    union bpf_attr *uattr);
bool bpf_prog_test_check_kfunc_call(u32 kfunc_id);
bool btf_ctx_access(int off, int size, enum bpf_access_type type,
      const struct bpf_prog *prog,
      struct bpf_insn_access_aux *info);
int btf_struct_access(struct bpf_verifier_log *log, const struct btf *btf,
        const struct btf_type *t, int off, int size,
        enum bpf_access_type atype,
        u32 *next_btf_id);
bool btf_struct_ids_match(struct bpf_verifier_log *log,
     const struct btf *btf, u32 id, int off,
     const struct btf *need_btf, u32 need_type_id);

int btf_distill_func_proto(struct bpf_verifier_log *log,
      struct btf *btf,
      const struct btf_type *func_proto,
      const char *func_name,
      struct btf_func_model *m);

struct bpf_reg_state;
int btf_check_subprog_arg_match(struct bpf_verifier_env *env, int subprog,
    struct bpf_reg_state *regs);
int btf_check_kfunc_arg_match(struct bpf_verifier_env *env,
         const struct btf *btf, u32 func_id,
         struct bpf_reg_state *regs);
int btf_prepare_func_args(struct bpf_verifier_env *env, int subprog,
     struct bpf_reg_state *reg);
int btf_check_type_match(struct bpf_verifier_log *log, const struct bpf_prog *prog,
    struct btf *btf, const struct btf_type *t);

struct bpf_prog *bpf_prog_by_id(u32 id);
struct bpf_link *bpf_link_by_id(u32 id);

const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id func_id);
void bpf_task_storage_free(struct task_struct *task);
bool bpf_prog_has_kfunc_call(const struct bpf_prog *prog);
const struct btf_func_model *
bpf_jit_find_kfunc_model(const struct bpf_prog *prog,
    const struct bpf_insn *insn);
# 1896 "./include/linux/bpf.h"
void __bpf_free_used_btfs(struct bpf_prog_aux *aux,
     struct btf_mod_pair *used_btfs, u32 len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_prog *bpf_prog_get_type(u32 ufd,
       enum bpf_prog_type type)
{
 return bpf_prog_get_type_dev(ufd, type, false);
}

void __bpf_free_used_maps(struct bpf_prog_aux *aux,
     struct bpf_map **used_maps, u32 len);

bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);

int bpf_prog_offload_compile(struct bpf_prog *prog);
void bpf_prog_offload_destroy(struct bpf_prog *prog);
int bpf_prog_offload_info_fill(struct bpf_prog_info *info,
          struct bpf_prog *prog);

int bpf_map_offload_info_fill(struct bpf_map_info *info, struct bpf_map *map);

int bpf_map_offload_lookup_elem(struct bpf_map *map, void *key, void *value);
int bpf_map_offload_update_elem(struct bpf_map *map,
    void *key, void *value, u64 flags);
int bpf_map_offload_delete_elem(struct bpf_map *map, void *key);
int bpf_map_offload_get_next_key(struct bpf_map *map,
     void *key, void *next_key);

bool bpf_offload_prog_map_match(struct bpf_prog *prog, struct bpf_map *map);

struct bpf_offload_dev *
bpf_offload_dev_create(const struct bpf_prog_offload_ops *ops, void *priv);
void bpf_offload_dev_destroy(struct bpf_offload_dev *offdev);
void *bpf_offload_dev_priv(struct bpf_offload_dev *offdev);
int bpf_offload_dev_netdev_register(struct bpf_offload_dev *offdev,
        struct net_device *netdev);
void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *offdev,
           struct net_device *netdev);
bool bpf_offload_dev_match(struct bpf_prog *prog, struct net_device *netdev);


int bpf_prog_offload_init(struct bpf_prog *prog, union bpf_attr *attr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_prog_is_dev_bound(const struct bpf_prog_aux *aux)
{
 return aux->offload_requested;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_is_dev_bound(struct bpf_map *map)
{
 return __builtin_expect(!!(map->ops == &bpf_map_offload_ops), 0);
}

struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *attr);
void bpf_map_offload_map_free(struct bpf_map *map);
int bpf_prog_test_run_syscall(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);

int sock_map_get_from_fd(const union bpf_attr *attr, struct bpf_prog *prog);
int sock_map_prog_detach(const union bpf_attr *attr, enum bpf_prog_type ptype);
int sock_map_update_elem_sys(struct bpf_map *map, void *key, void *value, u64 flags);
void sock_map_unhash(struct sock *sk);
void sock_map_close(struct sock *sk, long timeout);
# 2015 "./include/linux/bpf.h"
void bpf_sk_reuseport_detach(struct sock *sk);
int bpf_fd_reuseport_array_lookup_elem(struct bpf_map *map, void *key,
           void *value);
int bpf_fd_reuseport_array_update_elem(struct bpf_map *map, void *key,
           void *value, u64 map_flags);
# 2042 "./include/linux/bpf.h"
extern const struct bpf_func_proto bpf_map_lookup_elem_proto;
extern const struct bpf_func_proto bpf_map_update_elem_proto;
extern const struct bpf_func_proto bpf_map_delete_elem_proto;
extern const struct bpf_func_proto bpf_map_push_elem_proto;
extern const struct bpf_func_proto bpf_map_pop_elem_proto;
extern const struct bpf_func_proto bpf_map_peek_elem_proto;

extern const struct bpf_func_proto bpf_get_prandom_u32_proto;
extern const struct bpf_func_proto bpf_get_smp_processor_id_proto;
extern const struct bpf_func_proto bpf_get_numa_node_id_proto;
extern const struct bpf_func_proto bpf_tail_call_proto;
extern const struct bpf_func_proto bpf_ktime_get_ns_proto;
extern const struct bpf_func_proto bpf_ktime_get_boot_ns_proto;
extern const struct bpf_func_proto bpf_get_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_get_current_uid_gid_proto;
extern const struct bpf_func_proto bpf_get_current_comm_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto;
extern const struct bpf_func_proto bpf_get_stack_proto;
extern const struct bpf_func_proto bpf_get_task_stack_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto_pe;
extern const struct bpf_func_proto bpf_get_stack_proto_pe;
extern const struct bpf_func_proto bpf_sock_map_update_proto;
extern const struct bpf_func_proto bpf_sock_hash_update_proto;
extern const struct bpf_func_proto bpf_get_current_cgroup_id_proto;
extern const struct bpf_func_proto bpf_get_current_ancestor_cgroup_id_proto;
extern const struct bpf_func_proto bpf_msg_redirect_hash_proto;
extern const struct bpf_func_proto bpf_msg_redirect_map_proto;
extern const struct bpf_func_proto bpf_sk_redirect_hash_proto;
extern const struct bpf_func_proto bpf_sk_redirect_map_proto;
extern const struct bpf_func_proto bpf_spin_lock_proto;
extern const struct bpf_func_proto bpf_spin_unlock_proto;
extern const struct bpf_func_proto bpf_get_local_storage_proto;
extern const struct bpf_func_proto bpf_strtol_proto;
extern const struct bpf_func_proto bpf_strtoul_proto;
extern const struct bpf_func_proto bpf_tcp_sock_proto;
extern const struct bpf_func_proto bpf_jiffies64_proto;
extern const struct bpf_func_proto bpf_get_ns_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_event_output_data_proto;
extern const struct bpf_func_proto bpf_ringbuf_output_proto;
extern const struct bpf_func_proto bpf_ringbuf_reserve_proto;
extern const struct bpf_func_proto bpf_ringbuf_submit_proto;
extern const struct bpf_func_proto bpf_ringbuf_discard_proto;
extern const struct bpf_func_proto bpf_ringbuf_query_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp6_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_timewait_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_request_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_udp6_sock_proto;
extern const struct bpf_func_proto bpf_copy_from_user_proto;
extern const struct bpf_func_proto bpf_snprintf_btf_proto;
extern const struct bpf_func_proto bpf_snprintf_proto;
extern const struct bpf_func_proto bpf_per_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_this_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_ktime_get_coarse_ns_proto;
extern const struct bpf_func_proto bpf_sock_from_file_proto;
extern const struct bpf_func_proto bpf_get_socket_ptr_cookie_proto;
extern const struct bpf_func_proto bpf_task_storage_get_proto;
extern const struct bpf_func_proto bpf_task_storage_delete_proto;
extern const struct bpf_func_proto bpf_for_each_map_elem_proto;
extern const struct bpf_func_proto bpf_btf_find_by_name_kind_proto;
extern const struct bpf_func_proto bpf_sk_setsockopt_proto;
extern const struct bpf_func_proto bpf_sk_getsockopt_proto;

const struct bpf_func_proto *tracing_prog_func_proto(
  enum bpf_func_id func_id, const struct bpf_prog *prog);


void bpf_user_rnd_init_once(void);
u64 bpf_user_rnd_u32(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
u64 bpf_get_raw_cpu_id(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);


bool bpf_sock_common_is_valid_access(int off, int size,
         enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
bool bpf_sock_is_valid_access(int off, int size, enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
u32 bpf_sock_convert_ctx_access(enum bpf_access_type type,
    const struct bpf_insn *si,
    struct bpf_insn *insn_buf,
    struct bpf_prog *prog,
    u32 *target_size);
# 2148 "./include/linux/bpf.h"
struct sk_reuseport_kern {
 struct sk_buff *skb;
 struct sock *sk;
 struct sock *selected_sk;
 struct sock *migrating_sk;
 void *data_end;
 u32 hash;
 u32 reuseport_id;
 bool bind_inany;
};
bool bpf_tcp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);

bool bpf_xdp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);
# 2208 "./include/linux/bpf.h"
enum bpf_text_poke_type {
 BPF_MOD_CALL,
 BPF_MOD_JUMP,
};

int bpf_arch_text_poke(void *ip, enum bpf_text_poke_type t,
         void *addr1, void *addr2);

struct btf_id_set;
bool btf_id_set_contains(const struct btf_id_set *set, u32 id);

int bpf_bprintf_prepare(char *fmt, u32 fmt_size, const u64 *raw_args,
   u32 **bin_buf, u32 num_args);
void bpf_bprintf_cleanup(void);
# 6 "./include/linux/bpf-cgroup.h" 2







struct sock;
struct sockaddr;
struct cgroup;
struct sk_buff;
struct bpf_map;
struct bpf_prog;
struct bpf_sock_ops_kern;
struct bpf_cgroup_storage;
struct ctl_table;
struct ctl_table_header;
struct task_struct;


enum cgroup_bpf_attach_type {
 CGROUP_BPF_ATTACH_TYPE_INVALID = -1,
 CGROUP_INET_INGRESS = 0,
 CGROUP_INET_EGRESS,
 CGROUP_INET_SOCK_CREATE,
 CGROUP_SOCK_OPS,
 CGROUP_DEVICE,
 CGROUP_INET4_BIND,
 CGROUP_INET6_BIND,
 CGROUP_INET4_CONNECT,
 CGROUP_INET6_CONNECT,
 CGROUP_INET4_POST_BIND,
 CGROUP_INET6_POST_BIND,
 CGROUP_UDP4_SENDMSG,
 CGROUP_UDP6_SENDMSG,
 CGROUP_SYSCTL,
 CGROUP_UDP4_RECVMSG,
 CGROUP_UDP6_RECVMSG,
 CGROUP_GETSOCKOPT,
 CGROUP_SETSOCKOPT,
 CGROUP_INET4_GETPEERNAME,
 CGROUP_INET6_GETPEERNAME,
 CGROUP_INET4_GETSOCKNAME,
 CGROUP_INET6_GETSOCKNAME,
 CGROUP_INET_SOCK_RELEASE,
 MAX_CGROUP_BPF_ATTACH_TYPE
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum cgroup_bpf_attach_type
to_cgroup_bpf_attach_type(enum bpf_attach_type attach_type)
{
 switch (attach_type) {
 case BPF_CGROUP_INET_INGRESS: return CGROUP_INET_INGRESS;
 case BPF_CGROUP_INET_EGRESS: return CGROUP_INET_EGRESS;
 case BPF_CGROUP_INET_SOCK_CREATE: return CGROUP_INET_SOCK_CREATE;
 case BPF_CGROUP_SOCK_OPS: return CGROUP_SOCK_OPS;
 case BPF_CGROUP_DEVICE: return CGROUP_DEVICE;
 case BPF_CGROUP_INET4_BIND: return CGROUP_INET4_BIND;
 case BPF_CGROUP_INET6_BIND: return CGROUP_INET6_BIND;
 case BPF_CGROUP_INET4_CONNECT: return CGROUP_INET4_CONNECT;
 case BPF_CGROUP_INET6_CONNECT: return CGROUP_INET6_CONNECT;
 case BPF_CGROUP_INET4_POST_BIND: return CGROUP_INET4_POST_BIND;
 case BPF_CGROUP_INET6_POST_BIND: return CGROUP_INET6_POST_BIND;
 case BPF_CGROUP_UDP4_SENDMSG: return CGROUP_UDP4_SENDMSG;
 case BPF_CGROUP_UDP6_SENDMSG: return CGROUP_UDP6_SENDMSG;
 case BPF_CGROUP_SYSCTL: return CGROUP_SYSCTL;
 case BPF_CGROUP_UDP4_RECVMSG: return CGROUP_UDP4_RECVMSG;
 case BPF_CGROUP_UDP6_RECVMSG: return CGROUP_UDP6_RECVMSG;
 case BPF_CGROUP_GETSOCKOPT: return CGROUP_GETSOCKOPT;
 case BPF_CGROUP_SETSOCKOPT: return CGROUP_SETSOCKOPT;
 case BPF_CGROUP_INET4_GETPEERNAME: return CGROUP_INET4_GETPEERNAME;
 case BPF_CGROUP_INET6_GETPEERNAME: return CGROUP_INET6_GETPEERNAME;
 case BPF_CGROUP_INET4_GETSOCKNAME: return CGROUP_INET4_GETSOCKNAME;
 case BPF_CGROUP_INET6_GETSOCKNAME: return CGROUP_INET6_GETSOCKNAME;
 case BPF_CGROUP_INET_SOCK_RELEASE: return CGROUP_INET_SOCK_RELEASE;
 default:
  return CGROUP_BPF_ATTACH_TYPE_INVALID;
 }
}



extern struct static_key_false cgroup_bpf_enabled_key[MAX_CGROUP_BPF_ATTACH_TYPE];





struct bpf_cgroup_storage_map;

struct bpf_storage_buffer {
 struct callback_head rcu;
 char data[];
};

struct bpf_cgroup_storage {
 union {
  struct bpf_storage_buffer *buf;
  void *percpu_buf;
 };
 struct bpf_cgroup_storage_map *map;
 struct bpf_cgroup_storage_key key;
 struct list_head list_map;
 struct list_head list_cg;
 struct rb_node node;
 struct callback_head rcu;
};

struct bpf_cgroup_link {
 struct bpf_link link;
 struct cgroup *cgroup;
 enum bpf_attach_type type;
};

struct bpf_prog_list {
 struct list_head node;
 struct bpf_prog *prog;
 struct bpf_cgroup_link *link;
 struct bpf_cgroup_storage *storage[__BPF_CGROUP_STORAGE_MAX];
};

struct bpf_prog_array;

struct cgroup_bpf {

 struct bpf_prog_array *effective[MAX_CGROUP_BPF_ATTACH_TYPE];






 struct list_head progs[MAX_CGROUP_BPF_ATTACH_TYPE];
 u32 flags[MAX_CGROUP_BPF_ATTACH_TYPE];


 struct list_head storages;


 struct bpf_prog_array *inactive;


 struct percpu_ref refcnt;


 struct work_struct release_work;
};

int cgroup_bpf_inherit(struct cgroup *cgrp);
void cgroup_bpf_offline(struct cgroup *cgrp);

int __cgroup_bpf_attach(struct cgroup *cgrp,
   struct bpf_prog *prog, struct bpf_prog *replace_prog,
   struct bpf_cgroup_link *link,
   enum bpf_attach_type type, u32 flags);
int __cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
   struct bpf_cgroup_link *link,
   enum bpf_attach_type type);
int __cgroup_bpf_query(struct cgroup *cgrp, const union bpf_attr *attr,
         union bpf_attr *uattr);


int cgroup_bpf_attach(struct cgroup *cgrp,
        struct bpf_prog *prog, struct bpf_prog *replace_prog,
        struct bpf_cgroup_link *link, enum bpf_attach_type type,
        u32 flags);
int cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
        enum bpf_attach_type type);
int cgroup_bpf_query(struct cgroup *cgrp, const union bpf_attr *attr,
       union bpf_attr *uattr);

int __cgroup_bpf_run_filter_skb(struct sock *sk,
    struct sk_buff *skb,
    enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_sk(struct sock *sk,
          enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_sock_addr(struct sock *sk,
          struct sockaddr *uaddr,
          enum cgroup_bpf_attach_type atype,
          void *t_ctx,
          u32 *flags);

int __cgroup_bpf_run_filter_sock_ops(struct sock *sk,
         struct bpf_sock_ops_kern *sock_ops,
         enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_check_dev_permission(short dev_type, u32 major, u32 minor,
          short access, enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *head,
       struct ctl_table *table, int write,
       char **buf, size_t *pcount, loff_t *ppos,
       enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_setsockopt(struct sock *sock, int *level,
           int *optname, char *optval,
           int *optlen, char **kernel_optval);
int __cgroup_bpf_run_filter_getsockopt(struct sock *sk, int level,
           int optname, char *optval,
           int *optlen, int max_optlen,
           int retval);

int __cgroup_bpf_run_filter_getsockopt_kern(struct sock *sk, int level,
         int optname, void *optval,
         int *optlen, int retval);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum bpf_cgroup_storage_type cgroup_storage_type(
 struct bpf_map *map)
{
 if (map->map_type == BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE)
  return BPF_CGROUP_STORAGE_PERCPU;

 return BPF_CGROUP_STORAGE_SHARED;
}

struct bpf_cgroup_storage *
cgroup_storage_lookup(struct bpf_cgroup_storage_map *map,
        void *key, bool locked);
struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *prog,
     enum bpf_cgroup_storage_type stype);
void bpf_cgroup_storage_free(struct bpf_cgroup_storage *storage);
void bpf_cgroup_storage_link(struct bpf_cgroup_storage *storage,
        struct cgroup *cgroup,
        enum bpf_attach_type type);
void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *storage);
int bpf_cgroup_storage_assign(struct bpf_prog_aux *aux, struct bpf_map *map);

int bpf_percpu_cgroup_storage_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_cgroup_storage_update(struct bpf_map *map, void *key,
         void *value, u64 flags);
# 465 "./include/linux/bpf-cgroup.h"
int cgroup_bpf_prog_attach(const union bpf_attr *attr,
      enum bpf_prog_type ptype, struct bpf_prog *prog);
int cgroup_bpf_prog_detach(const union bpf_attr *attr,
      enum bpf_prog_type ptype);
int cgroup_bpf_link_attach(const union bpf_attr *attr, struct bpf_prog *prog);
int cgroup_bpf_prog_query(const union bpf_attr *attr,
     union bpf_attr *uattr);
# 23 "./include/linux/cgroup-defs.h" 2
# 1 "./include/linux/psi_types.h" 1
# 179 "./include/linux/psi_types.h"
struct psi_group { };
# 24 "./include/linux/cgroup-defs.h" 2



struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;
struct poll_table_struct;







enum cgroup_subsys_id {
# 1 "./include/linux/cgroup_subsys.h" 1
# 17 "./include/linux/cgroup_subsys.h"
cpu_cgrp_id,
# 45 "./include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
 CSS_DYING = (1 << 4),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,


 CGRP_FREEZE,


 CGRP_FROZEN,


 CGRP_KILL,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),






 CGRP_ROOT_NS_DELEGATE = (1 << 3),




 CGRP_ROOT_CPUSET_V2_MODE = (1 << 4),




 CGRP_ROOT_MEMORY_LOCAL_EVENTS = (1 << 5),




 CGRP_ROOT_MEMORY_RECURSIVE_PROT = (1 << 6),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NS_DELEGATABLE = (1 << 2),

 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),
 CFTYPE_DEBUG = (1 << 5),
 CFTYPE_PRESSURE = (1 << 6),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
 unsigned long notified_at;
 struct timer_list notify_timer;
};
# 142 "./include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct list_head sibling;
 struct list_head children;


 struct list_head rstat_css_node;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct work_struct destroy_work;
 struct rcu_work destroy_rwork;





 struct cgroup_subsys_state *parent;
};
# 199 "./include/linux/cgroup-defs.h"
struct css_set {





 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 refcount_t refcount;







 struct css_set *dom_cset;


 struct cgroup *dfl_cgrp;


 int nr_tasks;
# 231 "./include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;
 struct list_head dying_tasks;


 struct list_head task_iters;
# 245 "./include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head threaded_csets;
 struct list_head threaded_csets_node;





 struct hlist_node hlist;





 struct list_head cgrp_links;





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 277 "./include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup_base_stat {
 struct task_cputime cputime;
};
# 312 "./include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {




 struct u64_stats_sync bsync;
 struct cgroup_base_stat bstat;





 struct cgroup_base_stat last_bstat;
# 337 "./include/linux/cgroup-defs.h"
 struct cgroup *updated_children;
 struct cgroup *updated_next;
};

struct cgroup_freezer_state {

 bool freeze;


 int e_freeze;




 int nr_frozen_descendants;





 int nr_frozen_tasks;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;







 int level;


 int max_depth;
# 388 "./include/linux/cgroup-defs.h"
 int nr_descendants;
 int nr_dying_descendants;
 int max_descendants;
# 403 "./include/linux/cgroup-defs.h"
 int nr_populated_csets;
 int nr_populated_domain_children;
 int nr_populated_threaded_children;

 int nr_threaded_children;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 420 "./include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 443 "./include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];
# 452 "./include/linux/cgroup-defs.h"
 struct cgroup *dom_cgrp;
 struct cgroup *old_dom_cgrp;


 struct cgroup_rstat_cpu *rstat_cpu;
 struct list_head rstat_css_list;


 struct cgroup_base_stat last_bstat;
 struct cgroup_base_stat bstat;
 struct prev_cputime prev_cputime;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 struct psi_group psi;


 struct cgroup_bpf bpf;


 atomic_t congestion_count;


 struct cgroup_freezer_state freezer;


 u64 ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 u64 cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 char release_agent_path[4096];


 char name[64];
};
# 536 "./include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;

 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);




};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);
 void (*css_rstat_flush)(struct cgroup_subsys_state *css, int cpu);
 int (*css_extra_stat_show)(struct seq_file *seq,
       struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task,
   struct css_set *cset);
 void (*cancel_fork)(struct task_struct *task, struct css_set *cset);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*release)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 661 "./include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 673 "./include/linux/cgroup-defs.h"
 bool threaded:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 708 "./include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 720 "./include/linux/cgroup-defs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 761 "./include/linux/cgroup-defs.h"
struct sock_cgroup_data {
 struct cgroup *cgroup;






};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 sock_cgroup_prioidx(const struct sock_cgroup_data *skcd)
{



 return 1;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 sock_cgroup_classid(const struct sock_cgroup_data *skcd)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sock_cgroup_set_prioidx(struct sock_cgroup_data *skcd,
        u16 prioidx)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sock_cgroup_set_classid(struct sock_cgroup_data *skcd,
        u32 classid)
{



}
# 29 "./include/linux/cgroup.h" 2

struct kernel_clone_args;
# 52 "./include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;
 unsigned int flags;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *tcset_pos;
 struct list_head *tcset_head;

 struct list_head *task_pos;

 struct list_head *cur_tasks_head;
 struct css_set *cur_cset;
 struct css_set *cur_dcset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;


# 1 "./include/linux/cgroup_subsys.h" 1
# 17 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpu_cgrp_subsys;
# 76 "./include/linux/cgroup.h" 2





# 1 "./include/linux/cgroup_subsys.h" 1
# 17 "./include/linux/cgroup_subsys.h"
extern struct static_key_true cpu_cgrp_subsys_enabled_key; extern struct static_key_true cpu_cgrp_subsys_on_dfl_key;
# 82 "./include/linux/cgroup.h" 2
# 98 "./include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_e_css(struct cgroup *cgroup,
      struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);
struct cgroup *cgroup_get_from_fd(int fd);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p,
      struct kernel_clone_args *kargs);
extern void cgroup_cancel_fork(struct task_struct *p,
          struct kernel_clone_args *kargs);
extern void cgroup_post_fork(struct task_struct *p,
        struct kernel_clone_args *kargs);
void cgroup_exit(struct task_struct *p);
void cgroup_release(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);

int cgroup_parse_float(const char *input, unsigned dec_shift, s64 *v);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void css_task_iter_start(struct cgroup_subsys_state *css, unsigned int flags,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 310 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cgroup_id(const struct cgroup *cgrp)
{
 return cgrp->kn->id;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 334 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 351 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 368 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}
# 390 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_is_dying(struct cgroup_subsys_state *css)
{
 return !(css->flags & CSS_NO_REF) && percpu_ref_is_dying(&css->refcnt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 414 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_get(struct cgroup *cgrp)
{
 css_get(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_tryget(struct cgroup *cgrp)
{
 return css_tryget(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 479 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ do { extern void __compiletime_assert_304(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((task)->cgroups)) == sizeof(char) || sizeof(((task)->cgroups)) == sizeof(short) || sizeof(((task)->cgroups)) == sizeof(int) || sizeof(((task)->cgroups)) == sizeof(long)) || sizeof(((task)->cgroups)) == sizeof(long long))) __compiletime_assert_304(); } while (0); (*(const volatile typeof( _Generic((((task)->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((task)->cgroups)))) *)&(((task)->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 491 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_305(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_305(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 506 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);






  if (__builtin_expect(!!(css_tryget(css)), 1))
   break;
  cpu_relax();
 }
 rcu_read_unlock();
 return css;
}
# 536 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_306(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_306(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_dfl_cgroup(struct task_struct *task)
{
 return task_css_set(task)->dfl_cgrp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_parent(struct cgroup *cgrp)
{
 struct cgroup_subsys_state *parent_css = cgrp->self.parent;

 if (parent_css)
  return ({ void *__mptr = (void *)(parent_css); do { extern void __compiletime_assert_307(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(parent_css)), typeof(((struct cgroup *)0)->self)) && !__builtin_types_compatible_p(typeof(*(parent_css)), typeof(void))))) __compiletime_assert_307(); } while (0); ((struct cgroup *)(__mptr - __builtin_offsetof(struct cgroup, self))); });
 return ((void *)0);
}
# 571 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == cgroup_id(ancestor);
}
# 590 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_ancestor(struct cgroup *cgrp,
          int ancestor_level)
{
 if (cgrp->level < ancestor_level)
  return ((void *)0);
 while (cgrp && cgrp->level > ancestor_level)
  cgrp = cgroup_parent(cgrp);
 return cgrp;
}
# 609 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_under_cgroup_hierarchy(struct task_struct *task,
            struct cgroup *ancestor)
{
 struct css_set *cset = task_css_set(task);

 return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->nr_populated_csets + cgrp->nr_populated_domain_children +
  cgrp->nr_populated_threaded_children;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return kernfs_ino(cgrp->kn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_path(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct psi_group *cgroup_psi(struct cgroup *cgrp)
{
 return &cgrp->psi;
}

bool cgroup_psi_enabled(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_init_kthreadd(void)
{





 get_current()->no_cgroup_migration = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_kthread_ready(void)
{




 get_current()->no_cgroup_migration = 0;
}

void cgroup_path_from_kernfs_id(u64 id, char *buf, size_t buflen);
struct cgroup *cgroup_get_from_id(u64 id);
# 765 "./include/linux/cgroup.h"
void cgroup_rstat_updated(struct cgroup *cgrp, int cpu);
void cgroup_rstat_flush(struct cgroup *cgrp);
void cgroup_rstat_flush_irqsafe(struct cgroup *cgrp);
void cgroup_rstat_flush_hold(struct cgroup *cgrp);
void cgroup_rstat_flush_release(void);
# 778 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuacct_charge(struct task_struct *tsk, u64 cputime) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuacct_account_field(struct task_struct *tsk, int index,
      u64 val) {}


void __cgroup_account_cputime(struct cgroup *cgrp, u64 delta_exec);
void __cgroup_account_cputime_field(struct cgroup *cgrp,
        enum cpu_usage_stat index, u64 delta_exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime(struct task_struct *task,
       u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_charge(task, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime(cgrp, delta_exec);
 rcu_read_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime_field(struct task_struct *task,
      enum cpu_usage_stat index,
      u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_account_field(task, index, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime_field(cgrp, index, delta_exec);
 rcu_read_unlock();
}
# 832 "./include/linux/cgroup.h"
void cgroup_sk_alloc(struct sock_cgroup_data *skcd);
void cgroup_sk_clone(struct sock_cgroup_data *skcd);
void cgroup_sk_free(struct sock_cgroup_data *skcd);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *sock_cgroup_ptr(struct sock_cgroup_data *skcd)
{
 return skcd->cgroup;
}
# 849 "./include/linux/cgroup.h"
struct cgroup_namespace {
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

int cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
     struct cgroup_namespace *ns);
# 881 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  free_cgroup_ns(ns);
}



void cgroup_enter_frozen(void);
void cgroup_leave_frozen(bool always_leave);
void cgroup_update_frozen(struct cgroup *cgrp);
void cgroup_freeze(struct cgroup *cgrp, bool freeze);
void cgroup_freezer_migrate_task(struct task_struct *task, struct cgroup *src,
     struct cgroup *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_task_frozen(struct task_struct *task)
{
 return task->frozen;
}
# 919 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_get(struct cgroup *cgrp)
{
 percpu_ref_get(&cgrp->bpf.refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_put(struct cgroup *cgrp)
{
 percpu_ref_put(&cgrp->bpf.refcnt);
}
# 14 "./include/linux/memcontrol.h" 2



# 1 "./include/linux/page_counter.h" 1








struct page_counter {
 atomic_long_t usage;
 unsigned long min;
 unsigned long low;
 unsigned long high;
 unsigned long max;


 unsigned long emin;
 atomic_long_t min_usage;
 atomic_long_t children_min_usage;


 unsigned long elow;
 atomic_long_t low_usage;
 atomic_long_t children_low_usage;


 unsigned long watermark;
 unsigned long failcnt;







 struct page_counter *parent;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_counter_init(struct page_counter *counter,
         struct page_counter *parent)
{
 atomic_long_set(&counter->usage, 0);
 counter->max = (((long)(~0UL >> 1)) / ((1UL) << (12)));
 counter->parent = parent;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_counter_read(struct page_counter *counter)
{
 return atomic_long_read(&counter->usage);
}

void page_counter_cancel(struct page_counter *counter, unsigned long nr_pages);
void page_counter_charge(struct page_counter *counter, unsigned long nr_pages);
bool page_counter_try_charge(struct page_counter *counter,
        unsigned long nr_pages,
        struct page_counter **fail);
void page_counter_uncharge(struct page_counter *counter, unsigned long nr_pages);
void page_counter_set_min(struct page_counter *counter, unsigned long nr_pages);
void page_counter_set_low(struct page_counter *counter, unsigned long nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_counter_set_high(struct page_counter *counter,
      unsigned long nr_pages)
{
 do { do { extern void __compiletime_assert_308(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(counter->high) == sizeof(char) || sizeof(counter->high) == sizeof(short) || sizeof(counter->high) == sizeof(int) || sizeof(counter->high) == sizeof(long)) || sizeof(counter->high) == sizeof(long long))) __compiletime_assert_308(); } while (0); do { *(volatile typeof(counter->high) *)&(counter->high) = (nr_pages); } while (0); } while (0);
}

int page_counter_set_max(struct page_counter *counter, unsigned long nr_pages);
int page_counter_memparse(const char *buf, const char *max,
     unsigned long *nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_counter_reset_watermark(struct page_counter *counter)
{
 counter->watermark = page_counter_read(counter);
}
# 18 "./include/linux/memcontrol.h" 2
# 1 "./include/linux/vmpressure.h" 1
# 11 "./include/linux/vmpressure.h"
# 1 "./include/linux/eventfd.h" 1
# 33 "./include/linux/eventfd.h"
struct eventfd_ctx;
struct file;



void eventfd_ctx_put(struct eventfd_ctx *ctx);
struct file *eventfd_fget(int fd);
struct eventfd_ctx *eventfd_ctx_fdget(int fd);
struct eventfd_ctx *eventfd_ctx_fileget(struct file *file);
__u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n);
int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *ctx, wait_queue_entry_t *wait,
      __u64 *cnt);
void eventfd_ctx_do_read(struct eventfd_ctx *ctx, __u64 *cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool eventfd_signal_allowed(void)
{
 return !get_current()->in_eventfd_signal;
}
# 12 "./include/linux/vmpressure.h" 2

struct vmpressure {
 unsigned long scanned;
 unsigned long reclaimed;

 unsigned long tree_scanned;
 unsigned long tree_reclaimed;

 spinlock_t sr_lock;


 struct list_head events;

 struct mutex events_lock;

 struct work_struct work;
};

struct mem_cgroup;
# 47 "./include/linux/vmpressure.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmpressure(gfp_t gfp, struct mem_cgroup *memcg, bool tree,
         unsigned long scanned, unsigned long reclaimed) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmpressure_prio(gfp_t gfp, struct mem_cgroup *memcg,
       int prio) {}
# 19 "./include/linux/memcontrol.h" 2



# 1 "./include/linux/writeback.h" 1
# 11 "./include/linux/writeback.h"
# 1 "./include/linux/flex_proportions.h" 1
# 28 "./include/linux/flex_proportions.h"
struct fprop_global {

 struct percpu_counter events;

 unsigned int period;

 seqcount_t sequence;
};

int fprop_global_init(struct fprop_global *p, gfp_t gfp);
void fprop_global_destroy(struct fprop_global *p);
bool fprop_new_period(struct fprop_global *p, int periods);




struct fprop_local_single {

 unsigned long events;

 unsigned int period;
 raw_spinlock_t lock;
};





int fprop_local_init_single(struct fprop_local_single *pl);
void fprop_local_destroy_single(struct fprop_local_single *pl);
void __fprop_inc_single(struct fprop_global *p, struct fprop_local_single *pl);
void fprop_fraction_single(struct fprop_global *p,
 struct fprop_local_single *pl, unsigned long *numerator,
 unsigned long *denominator);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void fprop_inc_single(struct fprop_global *p, struct fprop_local_single *pl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __fprop_inc_single(p, pl);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}




struct fprop_local_percpu {

 struct percpu_counter events;

 unsigned int period;
 raw_spinlock_t lock;
};

int fprop_local_init_percpu(struct fprop_local_percpu *pl, gfp_t gfp);
void fprop_local_destroy_percpu(struct fprop_local_percpu *pl);
void __fprop_inc_percpu(struct fprop_global *p, struct fprop_local_percpu *pl);
void __fprop_inc_percpu_max(struct fprop_global *p, struct fprop_local_percpu *pl,
       int max_frac);
void fprop_fraction_percpu(struct fprop_global *p,
 struct fprop_local_percpu *pl, unsigned long *numerator,
 unsigned long *denominator);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void fprop_inc_percpu(struct fprop_global *p, struct fprop_local_percpu *pl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __fprop_inc_percpu(p, pl);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 12 "./include/linux/writeback.h" 2
# 1 "./include/linux/backing-dev-defs.h" 1
# 17 "./include/linux/backing-dev-defs.h"
struct page;
struct device;
struct dentry;




enum wb_state {
 WB_registered,
 WB_writeback_running,
 WB_has_dirty_io,
 WB_start_all,
};

enum wb_congested_state {
 WB_async_congested,
 WB_sync_congested,
};

enum wb_stat_item {
 WB_RECLAIMABLE,
 WB_WRITEBACK,
 WB_DIRTIED,
 WB_WRITTEN,
 NR_WB_STAT_ITEMS
};






enum wb_reason {
 WB_REASON_BACKGROUND,
 WB_REASON_VMSCAN,
 WB_REASON_SYNC,
 WB_REASON_PERIODIC,
 WB_REASON_LAPTOP_TIMER,
 WB_REASON_FS_FREE_SPACE,






 WB_REASON_FORKER_THREAD,
 WB_REASON_FOREIGN_FLUSH,

 WB_REASON_MAX,
};

struct wb_completion {
 atomic_t cnt;
 wait_queue_head_t *waitq;
};
# 107 "./include/linux/backing-dev-defs.h"
struct bdi_writeback {
 struct backing_dev_info *bdi;

 unsigned long state;
 unsigned long last_old_flush;

 struct list_head b_dirty;
 struct list_head b_io;
 struct list_head b_more_io;
 struct list_head b_dirty_time;
 spinlock_t list_lock;

 atomic_t writeback_inodes;
 struct percpu_counter stat[NR_WB_STAT_ITEMS];

 unsigned long congested;

 unsigned long bw_time_stamp;
 unsigned long dirtied_stamp;
 unsigned long written_stamp;
 unsigned long write_bandwidth;
 unsigned long avg_write_bandwidth;







 unsigned long dirty_ratelimit;
 unsigned long balanced_dirty_ratelimit;

 struct fprop_local_percpu completions;
 int dirty_exceeded;
 enum wb_reason start_all_reason;

 spinlock_t work_lock;
 struct list_head work_list;
 struct delayed_work dwork;
 struct delayed_work bw_dwork;

 unsigned long dirty_sleep;

 struct list_head bdi_node;
# 167 "./include/linux/backing-dev-defs.h"
};

struct backing_dev_info {
 u64 id;
 struct rb_node rb_node;
 struct list_head bdi_list;
 unsigned long ra_pages;
 unsigned long io_pages;

 struct kref refcnt;
 unsigned int capabilities;
 unsigned int min_ratio;
 unsigned int max_ratio, max_prop_frac;





 atomic_long_t tot_write_bandwidth;

 struct bdi_writeback wb;
 struct list_head wb_list;





 wait_queue_head_t wb_waitq;

 struct device *dev;
 char dev_name[64];
 struct device *owner;

 struct timer_list laptop_mode_wb_timer;


 struct dentry *debug_dir;

};

enum {
 BLK_RW_ASYNC = 0,
 BLK_RW_SYNC = 1,
};

void clear_bdi_congested(struct backing_dev_info *bdi, int sync);
void set_bdi_congested(struct backing_dev_info *bdi, int sync);

struct wb_lock_cookie {
 bool locked;
 unsigned long flags;
};
# 284 "./include/linux/backing-dev-defs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wb_tryget(struct bdi_writeback *wb)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_get(struct bdi_writeback *wb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_put(struct bdi_writeback *wb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_put_many(struct bdi_writeback *wb, unsigned long nr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wb_dying(struct bdi_writeback *wb)
{
 return false;
}
# 13 "./include/linux/writeback.h" 2
# 1 "./include/linux/blk_types.h" 1
# 10 "./include/linux/blk_types.h"
# 1 "./include/linux/bvec.h" 1
# 18 "./include/linux/bvec.h"
struct page;
# 32 "./include/linux/bvec.h"
struct bio_vec {
 struct page *bv_page;
 unsigned int bv_len;
 unsigned int bv_offset;
};

struct bvec_iter {
 sector_t bi_sector;

 unsigned int bi_size;

 unsigned int bi_idx;

 unsigned int bi_bvec_done;

};

struct bvec_iter_all {
 struct bio_vec bv;
 int idx;
 unsigned done;
};
# 101 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bvec_iter_advance(const struct bio_vec *bv,
  struct bvec_iter *iter, unsigned bytes)
{
 unsigned int idx = iter->bi_idx;

 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(bytes > iter->bi_size); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Attempted to advance past end of bvec iter\n"); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/bvec.h"), "i" (107), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); })) {

  iter->bi_size = 0;
  return false;
 }

 iter->bi_size -= bytes;
 bytes += iter->bi_bvec_done;

 while (bytes && bytes >= bv[idx].bv_len) {
  bytes -= bv[idx].bv_len;
  idx++;
 }

 iter->bi_idx = idx;
 iter->bi_bvec_done = bytes;
 return true;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bvec_iter_advance_single(const struct bio_vec *bv,
    struct bvec_iter *iter, unsigned int bytes)
{
 unsigned int done = iter->bi_bvec_done + bytes;

 if (done == bv[iter->bi_idx].bv_len) {
  done = 0;
  iter->bi_idx++;
 }
 iter->bi_bvec_done = done;
 iter->bi_size -= bytes;
}
# 157 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bvec_init_iter_all(struct bvec_iter_all *iter_all)
{
 iter_all->done = 0;
 iter_all->idx = 0;

 return &iter_all->bv;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bvec_advance(const struct bio_vec *bvec,
    struct bvec_iter_all *iter_all)
{
 struct bio_vec *bv = &iter_all->bv;

 if (iter_all->done) {
  bv->bv_page++;
  bv->bv_offset = 0;
 } else {
  bv->bv_page = bvec->bv_page + (bvec->bv_offset >> (12));
  bv->bv_offset = bvec->bv_offset & ~(~(((1UL) << (12)) - 1));
 }
 bv->bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(((1UL) << (12)) - bv->bv_offset)) *)1 == (typeof((unsigned int)(bvec->bv_len - iter_all->done)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(((1UL) << (12)) - bv->bv_offset)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(bvec->bv_len - iter_all->done)) * 0l)) : (int *)8))))), (((unsigned int)(((1UL) << (12)) - bv->bv_offset)) < ((unsigned int)(bvec->bv_len - iter_all->done)) ? ((unsigned int)(((1UL) << (12)) - bv->bv_offset)) : ((unsigned int)(bvec->bv_len - iter_all->done))), ({ typeof((unsigned int)(((1UL) << (12)) - bv->bv_offset)) __UNIQUE_ID___x309 = ((unsigned int)(((1UL) << (12)) - bv->bv_offset)); typeof((unsigned int)(bvec->bv_len - iter_all->done)) __UNIQUE_ID___y310 = ((unsigned int)(bvec->bv_len - iter_all->done)); ((__UNIQUE_ID___x309) < (__UNIQUE_ID___y310) ? (__UNIQUE_ID___x309) : (__UNIQUE_ID___y310)); }));

 iter_all->done += bv->bv_len;

 if (iter_all->done == bvec->bv_len) {
  iter_all->idx++;
  iter_all->done = 0;
 }
}
# 194 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bvec_kmap_local(struct bio_vec *bvec)
{
 return kmap_local_page(bvec->bv_page) + bvec->bv_offset;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_from_bvec(char *to, struct bio_vec *bvec)
{
 memcpy_from_page(to, bvec->bv_page, bvec->bv_offset, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_to_bvec(struct bio_vec *bvec, const char *from)
{
 memcpy_to_page(bvec->bv_page, bvec->bv_offset, from, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_bvec(struct bio_vec *bvec)
{
 memzero_page(bvec->bv_page, bvec->bv_offset, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bvec_virt(struct bio_vec *bvec)
{
 ({ int __ret_warn_on = !!(PageHighMem(bvec->bv_page)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/bvec.h"), "i" (240), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return lowmem_page_address(bvec->bv_page) + bvec->bv_offset;
}
# 11 "./include/linux/blk_types.h" 2



struct bio_set;
struct bio;
struct bio_integrity_payload;
struct page;
struct io_context;
struct cgroup_subsys_state;
typedef void (bio_end_io_t) (struct bio *);
struct bio_crypt_ctx;

struct block_device {
 sector_t bd_start_sect;
 struct disk_stats *bd_stats;
 unsigned long bd_stamp;
 bool bd_read_only;
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 void * bd_claiming;
 struct device bd_device;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;
 struct kobject *bd_holder_dir;
 u8 bd_partno;
 spinlock_t bd_size_lock;
 struct gendisk * bd_disk;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
 struct super_block *bd_fsfreeze_sb;

 struct partition_meta_info *bd_meta_info;



} ;
# 70 "./include/linux/blk_types.h"
typedef u8 blk_status_t;
# 149 "./include/linux/blk_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_path_error(blk_status_t error)
{
 switch (error) {
 case (( blk_status_t)1):
 case (( blk_status_t)3):
 case (( blk_status_t)5):
 case (( blk_status_t)6):
 case (( blk_status_t)7):
 case (( blk_status_t)8):
  return false;
 }


 return true;
}
# 183 "./include/linux/blk_types.h"
struct bio_issue {
 u64 value;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __bio_issue_time(u64 time)
{
 return time & ((1ULL << ((64 - 1) - 12)) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 bio_issue_time(struct bio_issue *issue)
{
 return __bio_issue_time(issue->value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t bio_issue_size(struct bio_issue *issue)
{
 return ((issue->value & (((1ULL << 12) - 1) << ((64 - 1) - 12))) >> ((64 - 1) - 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_issue_init(struct bio_issue *issue,
           sector_t size)
{
 size &= (1ULL << 12) - 1;
 issue->value = ((issue->value & (~((1ULL << (64 - 1)) - 1))) |
   (ktime_get_ns() & ((1ULL << ((64 - 1) - 12)) - 1)) |
   ((u64)size << ((64 - 1) - 12)));
}





struct bio {
 struct bio *bi_next;
 struct block_device *bi_bdev;
 unsigned int bi_opf;



 unsigned short bi_flags;
 unsigned short bi_ioprio;
 unsigned short bi_write_hint;
 blk_status_t bi_status;
 atomic_t __bi_remaining;

 struct bvec_iter bi_iter;

 bio_end_io_t *bi_end_io;

 void *bi_private;
# 251 "./include/linux/blk_types.h"
 union {



 };

 unsigned short bi_vcnt;





 unsigned short bi_max_vecs;

 atomic_t __bi_cnt;

 struct bio_vec *bi_io_vec;

 struct bio_set *bi_pool;






 struct bio_vec bi_inline_vecs[];
};







enum {
 BIO_NO_PAGE_REF,
 BIO_CLONED,
 BIO_BOUNCED,
 BIO_WORKINGSET,
 BIO_QUIET,
 BIO_CHAIN,
 BIO_REFFED,
 BIO_THROTTLED,

 BIO_TRACE_COMPLETION,

 BIO_CGROUP_ACCT,
 BIO_TRACKED,
 BIO_REMAPPED,
 BIO_ZONE_WRITE_LOCKED,
 BIO_PERCPU_CACHE,
 BIO_FLAG_LAST
};

typedef __u32 blk_mq_req_flags_t;
# 324 "./include/linux/blk_types.h"
enum req_opf {

 REQ_OP_READ = 0,

 REQ_OP_WRITE = 1,

 REQ_OP_FLUSH = 2,

 REQ_OP_DISCARD = 3,

 REQ_OP_SECURE_ERASE = 5,

 REQ_OP_WRITE_SAME = 7,

 REQ_OP_WRITE_ZEROES = 9,

 REQ_OP_ZONE_OPEN = 10,

 REQ_OP_ZONE_CLOSE = 11,

 REQ_OP_ZONE_FINISH = 12,

 REQ_OP_ZONE_APPEND = 13,

 REQ_OP_ZONE_RESET = 15,

 REQ_OP_ZONE_RESET_ALL = 17,


 REQ_OP_DRV_IN = 34,
 REQ_OP_DRV_OUT = 35,

 REQ_OP_LAST,
};

enum req_flag_bits {
 __REQ_FAILFAST_DEV =
  8,
 __REQ_FAILFAST_TRANSPORT,
 __REQ_FAILFAST_DRIVER,
 __REQ_SYNC,
 __REQ_META,
 __REQ_PRIO,
 __REQ_NOMERGE,
 __REQ_IDLE,
 __REQ_INTEGRITY,
 __REQ_FUA,
 __REQ_PREFLUSH,
 __REQ_RAHEAD,
 __REQ_BACKGROUND,
 __REQ_NOWAIT,







 __REQ_CGROUP_PUNT,


 __REQ_NOUNMAP,

 __REQ_HIPRI,


 __REQ_DRV,
 __REQ_SWAP,
 __REQ_NR_BITS,
};
# 423 "./include/linux/blk_types.h"
enum stat_group {
 STAT_READ,
 STAT_WRITE,
 STAT_DISCARD,
 STAT_FLUSH,

 NR_STAT_GROUPS
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_op_attrs(struct bio *bio, unsigned op,
  unsigned op_flags)
{
 bio->bi_opf = op | op_flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_write(unsigned int op)
{
 return (op & 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_flush(unsigned int op)
{
 return op & ((1ULL << __REQ_FUA) | (1ULL << __REQ_PREFLUSH));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_sync(unsigned int op)
{
 return (op & ((1 << 8) - 1)) == REQ_OP_READ ||
  (op & ((1ULL << __REQ_SYNC) | (1ULL << __REQ_FUA) | (1ULL << __REQ_PREFLUSH)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_discard(unsigned int op)
{
 return (op & ((1 << 8) - 1)) == REQ_OP_DISCARD;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool op_is_zone_mgmt(enum req_opf op)
{
 switch (op & ((1 << 8) - 1)) {
 case REQ_OP_ZONE_RESET:
 case REQ_OP_ZONE_OPEN:
 case REQ_OP_ZONE_CLOSE:
 case REQ_OP_ZONE_FINISH:
  return true;
 default:
  return false;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int op_stat_group(unsigned int op)
{
 if (op_is_discard(op))
  return STAT_DISCARD;
 return op_is_write(op);
}

typedef unsigned int blk_qc_t;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_qc_t_valid(blk_qc_t cookie)
{
 return cookie != -1U;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_qc_t_to_queue_num(blk_qc_t cookie)
{
 return (cookie & ~(1U << 31)) >> 16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_qc_t_to_tag(blk_qc_t cookie)
{
 return cookie & ((1u << 16) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_qc_t_is_internal(blk_qc_t cookie)
{
 return (cookie & (1U << 31)) != 0;
}

struct blk_rq_stat {
 u64 mean;
 u64 min;
 u64 max;
 u32 nr_samples;
 u64 batch;
};
# 14 "./include/linux/writeback.h" 2
# 1 "./include/linux/blk-cgroup.h" 1
# 23 "./include/linux/blk-cgroup.h"
# 1 "./include/linux/blkdev.h" 1





# 1 "./include/linux/sched/clock.h" 1
# 15 "./include/linux/sched/clock.h"
extern unsigned long long __attribute__((__no_instrument_function__)) sched_clock(void);




extern u64 running_clock(void);
extern u64 sched_clock_cpu(int cpu);


extern void sched_clock_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_clock_tick(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_sched_clock_stable(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_clock_idle_sleep_event(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_clock_idle_wakeup_event(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cpu_clock(int cpu)
{
 return sched_clock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 local_clock(void)
{
 return sched_clock();
}
# 97 "./include/linux/sched/clock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_sched_clock_irqtime(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_sched_clock_irqtime(void) {}
# 7 "./include/linux/blkdev.h" 2
# 1 "./include/uapi/linux/major.h" 1
# 8 "./include/linux/blkdev.h" 2
# 1 "./include/linux/genhd.h" 1
# 20 "./include/linux/genhd.h"
# 1 "./arch/riscv/include/generated/asm/local.h" 1
# 21 "./include/linux/genhd.h" 2

extern const struct device_type disk_type;
extern struct device_type part_type;
extern struct class block_class;
# 44 "./include/linux/genhd.h"
struct partition_meta_info {
 char uuid[(36 + 1)];
 u8 volname[64];
};
# 104 "./include/linux/genhd.h"
enum {
 DISK_EVENT_MEDIA_CHANGE = 1 << 0,
 DISK_EVENT_EJECT_REQUEST = 1 << 1,
};

enum {

 DISK_EVENT_FLAG_POLL = 1 << 0,

 DISK_EVENT_FLAG_UEVENT = 1 << 1,
};

struct disk_events;
struct badblocks;

struct blk_integrity {
 const struct blk_integrity_profile *profile;
 unsigned char flags;
 unsigned char tuple_size;
 unsigned char interval_exp;
 unsigned char tag_size;
};

struct gendisk {



 int major;
 int first_minor;
 int minors;


 char disk_name[32];

 unsigned short events;
 unsigned short event_flags;

 struct xarray part_tbl;
 struct block_device *part0;

 const struct block_device_operations *fops;
 struct request_queue *queue;
 void *private_data;

 int flags;
 unsigned long state;



 struct mutex open_mutex;
 unsigned open_partitions;

 struct backing_dev_info *bdi;
 struct kobject *slave_dir;



 struct timer_rand_state *random;
 atomic_t sync_io;
 struct disk_events *ev;




 struct cdrom_device_info *cdi;

 int node_id;
 struct badblocks *bb;
 struct lockdep_map lockdep_map;
 u64 diskseq;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool disk_live(struct gendisk *disk)
{
 return !inode_unhashed(disk->part0->bd_inode);
}
# 196 "./include/linux/genhd.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disk_max_parts(struct gendisk *disk)
{
 if (disk->flags & 0x0040)
  return 256;
 return disk->minors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool disk_part_scan_enabled(struct gendisk *disk)
{
 return disk_max_parts(disk) > 1 &&
  !(disk->flags & 0x0200);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t disk_devt(struct gendisk *disk)
{
 return (((disk->major) << 20) | (disk->first_minor));
}

void disk_uevent(struct gendisk *disk, enum kobject_action action);


int device_add_disk(struct device *parent, struct gendisk *disk,
  const struct attribute_group **groups);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_disk(struct gendisk *disk)
{
 return device_add_disk(((void *)0), disk, ((void *)0));
}
extern void del_gendisk(struct gendisk *gp);

void set_disk_ro(struct gendisk *disk, bool read_only);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_disk_ro(struct gendisk *disk)
{
 return disk->part0->bd_read_only ||
  arch_test_bit(1, &disk->state);
}

extern void disk_block_events(struct gendisk *disk);
extern void disk_unblock_events(struct gendisk *disk);
extern void disk_flush_events(struct gendisk *disk, unsigned int mask);
bool set_capacity_and_notify(struct gendisk *disk, sector_t size);
bool disk_force_media_change(struct gendisk *disk, unsigned int events);


extern void add_disk_randomness(struct gendisk *disk) ;
extern void rand_initialize_disk(struct gendisk *disk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t get_start_sect(struct block_device *bdev)
{
 return bdev->bd_start_sect;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t bdev_nr_sectors(struct block_device *bdev)
{
 return i_size_read(bdev->bd_inode) >> 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t get_capacity(struct gendisk *disk)
{
 return bdev_nr_sectors(disk->part0);
}

int bdev_disk_changed(struct gendisk *disk, bool invalidate);
void blk_drop_partitions(struct gendisk *disk);

struct gendisk *__alloc_disk_node(struct request_queue *q, int node_id,
  struct lock_class_key *lkclass);
extern void put_disk(struct gendisk *disk);
struct gendisk *__blk_alloc_disk(int node, struct lock_class_key *lkclass);
# 281 "./include/linux/genhd.h"
void blk_cleanup_disk(struct gendisk *disk);

int __register_blkdev(unsigned int major, const char *name,
  void (*probe)(dev_t devt));


void unregister_blkdev(unsigned int major, const char *name);

bool bdev_check_media_change(struct block_device *bdev);
int __invalidate_device(struct block_device *bdev, bool kill_dirty);
void set_capacity(struct gendisk *disk, sector_t size);


int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bd_link_disk_holder(struct block_device *bdev,
          struct gendisk *disk)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bd_register_pending_holders(struct gendisk *disk)
{
 return 0;
}


dev_t part_devt(struct gendisk *disk, u8 partno);
void inc_diskseq(struct gendisk *disk);
dev_t blk_lookup_devt(const char *name, int partno);
void blk_request_module(dev_t devt);

void printk_all_partitions(void);
# 9 "./include/linux/blkdev.h" 2






# 1 "./include/linux/mempool.h" 1
# 11 "./include/linux/mempool.h"
struct kmem_cache;

typedef void * (mempool_alloc_t)(gfp_t gfp_mask, void *pool_data);
typedef void (mempool_free_t)(void *element, void *pool_data);

typedef struct mempool_s {
 spinlock_t lock;
 int min_nr;
 int curr_nr;
 void **elements;

 void *pool_data;
 mempool_alloc_t *alloc;
 mempool_free_t *free;
 wait_queue_head_t wait;
} mempool_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mempool_initialized(mempool_t *pool)
{
 return pool->elements != ((void *)0);
}

void mempool_exit(mempool_t *pool);
int mempool_init_node(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
        mempool_free_t *free_fn, void *pool_data,
        gfp_t gfp_mask, int node_id);
int mempool_init(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data);

extern mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data);
extern mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data,
   gfp_t gfp_mask, int nid);

extern int mempool_resize(mempool_t *pool, int new_min_nr);
extern void mempool_destroy(mempool_t *pool);
extern void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask) __attribute__((__malloc__));
extern void mempool_free(void *element, mempool_t *pool);






void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data);
void mempool_free_slab(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
mempool_init_slab_pool(mempool_t *pool, int min_nr, struct kmem_cache *kc)
{
 return mempool_init(pool, min_nr, mempool_alloc_slab,
       mempool_free_slab, (void *) kc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mempool_t *
mempool_create_slab_pool(int min_nr, struct kmem_cache *kc)
{
 return mempool_create(min_nr, mempool_alloc_slab, mempool_free_slab,
         (void *) kc);
}





void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data);
void mempool_kfree(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mempool_init_kmalloc_pool(mempool_t *pool, int min_nr, size_t size)
{
 return mempool_init(pool, min_nr, mempool_kmalloc,
       mempool_kfree, (void *) size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mempool_t *mempool_create_kmalloc_pool(int min_nr, size_t size)
{
 return mempool_create(min_nr, mempool_kmalloc, mempool_kfree,
         (void *) size);
}





void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data);
void mempool_free_pages(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mempool_init_page_pool(mempool_t *pool, int min_nr, int order)
{
 return mempool_init(pool, min_nr, mempool_alloc_pages,
       mempool_free_pages, (void *)(long)order);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mempool_t *mempool_create_page_pool(int min_nr, int order)
{
 return mempool_create(min_nr, mempool_alloc_pages, mempool_free_pages,
         (void *)(long)order);
}
# 16 "./include/linux/blkdev.h" 2

# 1 "./include/linux/bio.h" 1
# 12 "./include/linux/bio.h"
# 1 "./include/linux/uio.h" 1
# 10 "./include/linux/uio.h"
# 1 "./include/uapi/linux/uio.h" 1
# 17 "./include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 11 "./include/linux/uio.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum iter_type {

 ITER_IOVEC,
 ITER_KVEC,
 ITER_BVEC,
 ITER_PIPE,
 ITER_XARRAY,
 ITER_DISCARD,
};

struct iov_iter_state {
 size_t iov_offset;
 size_t count;
 unsigned long nr_segs;
};

struct iov_iter {
 u8 iter_type;
 bool data_source;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct xarray *xarray;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   unsigned int head;
   unsigned int start_head;
  };
  loff_t xarray_start;
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum iter_type iov_iter_type(const struct iov_iter *i)
{
 return i->iter_type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_save_state(struct iov_iter *iter,
           struct iov_iter_state *state)
{
 state->iov_offset = iter->iov_offset;
 state->count = iter->count;
 state->nr_segs = iter->nr_segs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iter_is_iovec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_IOVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_kvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_KVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_bvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_BVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_pipe(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_PIPE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_discard(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_DISCARD;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_xarray(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_XARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char iov_iter_rw(const struct iov_iter *i)
{
 return i->data_source ? 1 : 0;
}
# 113 "./include/linux/uio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = __builtin_choose_expr(((!!(sizeof((typeof(iter->count) *)1 == (typeof(iter->iov->iov_len - iter->iov_offset) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->count) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->iov->iov_len - iter->iov_offset) * 0l)) : (int *)8))))), ((iter->count) < (iter->iov->iov_len - iter->iov_offset) ? (iter->count) : (iter->iov->iov_len - iter->iov_offset)), ({ typeof(iter->count) __UNIQUE_ID___x311 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID___y312 = (iter->iov->iov_len - iter->iov_offset); ((__UNIQUE_ID___x311) < (__UNIQUE_ID___y312) ? (__UNIQUE_ID___x311) : (__UNIQUE_ID___y312)); })),

 };
}

size_t copy_page_from_iter_atomic(struct page *page, unsigned offset,
      size_t bytes, struct iov_iter *i);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(const struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter_nocache(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
# 212 "./include/linux/uio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_mc_to_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, unsigned int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, unsigned int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, unsigned int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, unsigned int direction, struct pipe_inode_info *pipe,
   size_t count);
void iov_iter_discard(struct iov_iter *i, unsigned int direction, size_t count);
void iov_iter_xarray(struct iov_iter *i, unsigned int direction, struct xarray *xarray,
       loff_t start, size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);
void iov_iter_restore(struct iov_iter *i, struct iov_iter_state *state);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}

struct csum_state {
 __wsum csum;
 size_t off;
};

size_t csum_and_copy_to_iter(const void *addr, size_t bytes, void *csstate, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool csum_and_copy_from_iter_full(void *addr, size_t bytes,
      __wsum *csum, struct iov_iter *i)
{
 size_t copied = csum_and_copy_from_iter(addr, bytes, csum, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
size_t hash_and_copy_to_iter(const void *addr, size_t bytes, void *hashp,
  struct iov_iter *i);

struct iovec *iovec_from_user(const struct iovec *uvector,
  unsigned long nr_segs, unsigned long fast_segs,
  struct iovec *fast_iov, bool compat);
ssize_t import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i);
ssize_t __import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i, bool compat);
int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 13 "./include/linux/bio.h" 2
# 24 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bio_max_segs(unsigned int nr_segs)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(nr_segs) *)1 == (typeof(256U) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(nr_segs) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(256U) * 0l)) : (int *)8))))), ((nr_segs) < (256U) ? (nr_segs) : (256U)), ({ typeof(nr_segs) __UNIQUE_ID___x313 = (nr_segs); typeof(256U) __UNIQUE_ID___y314 = (256U); ((__UNIQUE_ID___x313) < (__UNIQUE_ID___y314) ? (__UNIQUE_ID___x313) : (__UNIQUE_ID___y314)); }));
}
# 61 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_has_data(struct bio *bio)
{
 if (bio &&
     bio->bi_iter.bi_size &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_DISCARD &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_SECURE_ERASE &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_WRITE_ZEROES)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_no_advance_iter(const struct bio *bio)
{
 return ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_DISCARD ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_SECURE_ERASE ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_WRITE_SAME ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_WRITE_ZEROES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_mergeable(struct bio *bio)
{
 if (bio->bi_opf & ((1ULL << __REQ_NOMERGE) | (1ULL << __REQ_PREFLUSH) | (1ULL << __REQ_FUA)))
  return false;

 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bio_cur_bytes(struct bio *bio)
{
 if (bio_has_data(bio))
  return ((struct bio_vec) { .bv_page = (((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_page) + (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) / ((1UL) << (12)))), .bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((bio)->bi_iter)))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((bio)->bi_iter)))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((bio)->bi_iter)))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) ? ((((((bio)->bi_iter)))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done)), ({ typeof((((((bio)->bi_iter)))).bi_size) __UNIQUE_ID___x315 = ((((((bio)->bi_iter)))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) __UNIQUE_ID___y316 = ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done); ((__UNIQUE_ID___x315) < (__UNIQUE_ID___y316) ? (__UNIQUE_ID___x315) : (__UNIQUE_ID___y316)); })))) *)1 == (typeof((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) % ((1UL) << (12))))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((bio)->bi_iter)))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((bio)->bi_iter)))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((bio)->bi_iter)))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) ? ((((((bio)->bi_iter)))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done)), ({ typeof((((((bio)->bi_iter)))).bi_size) __UNIQUE_ID___x315 = ((((((bio)->bi_iter)))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) __UNIQUE_ID___y316 = ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done); ((__UNIQUE_ID___x315) < (__UNIQUE_ID___y316) ? (__UNIQUE_ID___x315) : (__UNIQUE_ID___y316)); })))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) % ((1UL) << (12))))) * 0l)) : (int *)8))))), (((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((bio)->bi_iter)))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((bio)->bi_iter)))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((bio)->bi_iter)))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) ? ((((((bio)->bi_iter)))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done)), ({ typeof((((((bio)->bi_iter)))).bi_size) __UNIQUE_ID___x315 = ((((((bio)->bi_iter)))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) __UNIQUE_ID___y316 = ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done); ((__UNIQUE_ID___x315) < (__UNIQUE_ID___y316) ? (__UNIQUE_ID___x315) : (__UNIQUE_ID___y316)); })))) < ((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) % ((1UL) << (12))))) ? ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((bio)->bi_iter)))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((bio)->bi_iter)))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((bio)->bi_iter)))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) ? ((((((bio)->bi_iter)))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done)), ({ typeof((((((bio)->bi_iter)))).bi_size) __UNIQUE_ID___x315 = ((((((bio)->bi_iter)))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) __UNIQUE_ID___y316 = ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done); ((__UNIQUE_ID___x315) < (__UNIQUE_ID___y316) ? (__UNIQUE_ID___x315) : (__UNIQUE_ID___y316)); })))) : ((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) % ((1UL) << (12)))))), ({ typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((bio)->bi_iter)))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((bio)->bi_iter)))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((bio)->bi_iter)))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) ? ((((((bio)->bi_iter)))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done)), ({ typeof((((((bio)->bi_iter)))).bi_size) __UNIQUE_ID___x315 = ((((((bio)->bi_iter)))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) __UNIQUE_ID___y316 = ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done); ((__UNIQUE_ID___x315) < (__UNIQUE_ID___y316) ? (__UNIQUE_ID___x315) : (__UNIQUE_ID___y316)); })))) __UNIQUE_ID___x317 = ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((bio)->bi_iter)))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((bio)->bi_iter)))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((bio)->bi_iter)))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) ? ((((((bio)->bi_iter)))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done)), ({ typeof((((((bio)->bi_iter)))).bi_size) __UNIQUE_ID___x315 = ((((((bio)->bi_iter)))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done) __UNIQUE_ID___y316 = ((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_len - (((((bio)->bi_iter)))).bi_bvec_done); ((__UNIQUE_ID___x315) < (__UNIQUE_ID___y316) ? (__UNIQUE_ID___x315) : (__UNIQUE_ID___y316)); })))); typeof((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) % ((1UL) << (12))))) __UNIQUE_ID___y318 = ((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((bio)->bi_iter)))))).bi_idx])->bv_offset + ((((((bio)->bi_iter))))).bi_bvec_done) % ((1UL) << (12))))); ((__UNIQUE_ID___x317) < (__UNIQUE_ID___y318) ? (__UNIQUE_ID___x317) : (__UNIQUE_ID___y318)); })), .bv_offset = (((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_offset + (((((bio)->bi_iter)))).bi_bvec_done) % ((1UL) << (12))), }).bv_len;
 else
  return bio->bi_iter.bi_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bio_data(struct bio *bio)
{
 if (bio_has_data(bio))
  return lowmem_page_address((((&(((((bio))->bi_io_vec)))[(((((bio)->bi_iter)))).bi_idx])->bv_page) + (((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_offset + (((((bio)->bi_iter)))).bi_bvec_done) / ((1UL) << (12))))) + (((&(((((bio))->bi_io_vec)))[(((((bio)->bi_iter)))).bi_idx])->bv_offset + ((((bio)->bi_iter))).bi_bvec_done) % ((1UL) << (12)));

 return ((void *)0);
}
# 113 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_full(struct bio *bio, unsigned len)
{
 if (bio->bi_vcnt >= bio->bi_max_vecs)
  return true;

 if (bio->bi_iter.bi_size > (~0U) - len)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_next_segment(const struct bio *bio,
        struct bvec_iter_all *iter)
{
 if (iter->idx >= bio->bi_vcnt)
  return false;

 bvec_advance(&bio->bi_io_vec[iter->idx], iter);
 return true;
}
# 141 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_advance_iter(const struct bio *bio,
        struct bvec_iter *iter, unsigned int bytes)
{
 iter->bi_sector += bytes >> 9;

 if (bio_no_advance_iter(bio))
  iter->bi_size -= bytes;
 else
  bvec_iter_advance(bio->bi_io_vec, iter, bytes);

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_advance_iter_single(const struct bio *bio,
        struct bvec_iter *iter,
        unsigned int bytes)
{
 iter->bi_sector += bytes >> 9;

 if (bio_no_advance_iter(bio))
  iter->bi_size -= bytes;
 else
  bvec_iter_advance_single(bio->bi_io_vec, iter, bytes);
}
# 195 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned bio_segments(struct bio *bio)
{
 unsigned segs = 0;
 struct bio_vec bv;
 struct bvec_iter iter;






 switch (((bio)->bi_opf & ((1 << 8) - 1))) {
 case REQ_OP_DISCARD:
 case REQ_OP_SECURE_ERASE:
 case REQ_OP_WRITE_ZEROES:
  return 0;
 case REQ_OP_WRITE_SAME:
  return 1;
 default:
  break;
 }

 for (iter = ((bio)->bi_iter); (iter).bi_size && ((bv = ((struct bio_vec) { .bv_page = (((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_page) + (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) / ((1UL) << (12)))), .bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x319 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y320 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x319) < (__UNIQUE_ID___y320) ? (__UNIQUE_ID___x319) : (__UNIQUE_ID___y320)); })))) *)1 == (typeof((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << (12))))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x319 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y320 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x319) < (__UNIQUE_ID___y320) ? (__UNIQUE_ID___x319) : (__UNIQUE_ID___y320)); })))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << (12))))) * 0l)) : (int *)8))))), (((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x319 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y320 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x319) < (__UNIQUE_ID___y320) ? (__UNIQUE_ID___x319) : (__UNIQUE_ID___y320)); })))) < ((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << (12))))) ? ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x319 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y320 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x319) < (__UNIQUE_ID___y320) ? (__UNIQUE_ID___x319) : (__UNIQUE_ID___y320)); })))) : ((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << (12)))))), ({ typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x319 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y320 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x319) < (__UNIQUE_ID___y320) ? (__UNIQUE_ID___x319) : (__UNIQUE_ID___y320)); })))) __UNIQUE_ID___x321 = ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x319 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y320 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x319) < (__UNIQUE_ID___y320) ? (__UNIQUE_ID___x319) : (__UNIQUE_ID___y320)); })))); typeof((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << (12))))) __UNIQUE_ID___y322 = ((unsigned)(((1UL) << (12)) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << (12))))); ((__UNIQUE_ID___x321) < (__UNIQUE_ID___y322) ? (__UNIQUE_ID___x321) : (__UNIQUE_ID___y322)); })), .bv_offset = (((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_offset + (((((iter))))).bi_bvec_done) % ((1UL) << (12))), })), 1); bio_advance_iter_single((bio), &(iter), (bv).bv_len))
  segs++;

 return segs;
}
# 237 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_get(struct bio *bio)
{
 bio->bi_flags |= (1 << BIO_REFFED);
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 atomic_inc(&bio->__bi_cnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_cnt_set(struct bio *bio, unsigned int count)
{
 if (count != 1) {
  bio->bi_flags |= (1 << BIO_REFFED);
  __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 }
 atomic_set(&bio->__bi_cnt, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_flagged(struct bio *bio, unsigned int bit)
{
 return (bio->bi_flags & (1U << bit)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_flag(struct bio *bio, unsigned int bit)
{
 bio->bi_flags |= (1U << bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_clear_flag(struct bio *bio, unsigned int bit)
{
 bio->bi_flags &= ~(1U << bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_get_first_bvec(struct bio *bio, struct bio_vec *bv)
{
 *bv = ((struct bio_vec) { .bv_page = ((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_page), .bv_len = __builtin_choose_expr(((!!(sizeof((typeof(((bio->bi_iter)).bi_size) *)1 == (typeof((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_len - ((bio->bi_iter)).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((bio->bi_iter)).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_len - ((bio->bi_iter)).bi_bvec_done) * 0l)) : (int *)8))))), ((((bio->bi_iter)).bi_size) < ((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_len - ((bio->bi_iter)).bi_bvec_done) ? (((bio->bi_iter)).bi_size) : ((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_len - ((bio->bi_iter)).bi_bvec_done)), ({ typeof(((bio->bi_iter)).bi_size) __UNIQUE_ID___x323 = (((bio->bi_iter)).bi_size); typeof((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_len - ((bio->bi_iter)).bi_bvec_done) __UNIQUE_ID___y324 = ((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_len - ((bio->bi_iter)).bi_bvec_done); ((__UNIQUE_ID___x323) < (__UNIQUE_ID___y324) ? (__UNIQUE_ID___x323) : (__UNIQUE_ID___y324)); })), .bv_offset = ((&(((bio->bi_io_vec)))[(((bio->bi_iter))).bi_idx])->bv_offset + ((bio->bi_iter)).bi_bvec_done), });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_get_last_bvec(struct bio *bio, struct bio_vec *bv)
{
 struct bvec_iter iter = bio->bi_iter;
 int idx;

 bio_get_first_bvec(bio, bv);
 if (bv->bv_len == bio->bi_iter.bi_size)
  return;

 bio_advance_iter(bio, &iter, iter.bi_size);

 if (!iter.bi_bvec_done)
  idx = iter.bi_idx - 1;
 else
  idx = iter.bi_idx;

 *bv = bio->bi_io_vec[idx];





 if (iter.bi_bvec_done)
  bv->bv_len = iter.bi_bvec_done;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bio_first_bvec_all(struct bio *bio)
{
 ({ int __ret_warn_on = !!(bio_flagged(bio, BIO_CLONED)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/bio.h"), "i" (301), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return bio->bi_io_vec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *bio_first_page_all(struct bio *bio)
{
 return bio_first_bvec_all(bio)->bv_page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bio_last_bvec_all(struct bio *bio)
{
 ({ int __ret_warn_on = !!(bio_flagged(bio, BIO_CLONED)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/bio.h"), "i" (312), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return &bio->bi_io_vec[bio->bi_vcnt - 1];
}

enum bip_flags {
 BIP_BLOCK_INTEGRITY = 1 << 0,
 BIP_MAPPED_INTEGRITY = 1 << 1,
 BIP_CTRL_NOCHECK = 1 << 2,
 BIP_DISK_NOCHECK = 1 << 3,
 BIP_IP_CHECKSUM = 1 << 4,
};




struct bio_integrity_payload {
 struct bio *bip_bio;

 struct bvec_iter bip_iter;

 unsigned short bip_vcnt;
 unsigned short bip_max_vcnt;
 unsigned short bip_flags;

 struct bvec_iter bio_iter;

 struct work_struct bip_work;

 struct bio_vec *bip_vec;
 struct bio_vec bip_inline_vecs[];
};
# 377 "./include/linux/bio.h"
void bio_trim(struct bio *bio, sector_t offset, sector_t size);
extern struct bio *bio_split(struct bio *bio, int sectors,
        gfp_t gfp, struct bio_set *bs);
# 391 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_next_split(struct bio *bio, int sectors,
      gfp_t gfp, struct bio_set *bs)
{
 if (sectors >= (((bio)->bi_iter).bi_size >> 9))
  return bio;

 return bio_split(bio, sectors, gfp, bs);
}

enum {
 BIOSET_NEED_BVECS = ((((1UL))) << (0)),
 BIOSET_NEED_RESCUER = ((((1UL))) << (1)),
 BIOSET_PERCPU_CACHE = ((((1UL))) << (2)),
};
extern int bioset_init(struct bio_set *, unsigned int, unsigned int, int flags);
extern void bioset_exit(struct bio_set *);
extern int biovec_init_pool(mempool_t *pool, int pool_entries);
extern int bioset_init_from_src(struct bio_set *bs, struct bio_set *src);

struct bio *bio_alloc_bioset(gfp_t gfp, unsigned short nr_iovecs,
  struct bio_set *bs);
struct bio *bio_alloc_kiocb(struct kiocb *kiocb, unsigned short nr_vecs,
  struct bio_set *bs);
struct bio *bio_kmalloc(gfp_t gfp_mask, unsigned short nr_iovecs);
extern void bio_put(struct bio *);

extern void __bio_clone_fast(struct bio *, struct bio *);
extern struct bio *bio_clone_fast(struct bio *, gfp_t, struct bio_set *);

extern struct bio_set fs_bio_set;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_alloc(gfp_t gfp_mask, unsigned short nr_iovecs)
{
 return bio_alloc_bioset(gfp_mask, nr_iovecs, &fs_bio_set);
}

extern blk_qc_t submit_bio(struct bio *);

extern void bio_endio(struct bio *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_io_error(struct bio *bio)
{
 bio->bi_status = (( blk_status_t)10);
 bio_endio(bio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_wouldblock_error(struct bio *bio)
{
 bio_set_flag(bio, BIO_QUIET);
 bio->bi_status = (( blk_status_t)12);
 bio_endio(bio);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bio_iov_vecs_to_alloc(struct iov_iter *iter, int max_segs)
{
 if (iov_iter_is_bvec(iter))
  return 0;
 return iov_iter_npages(iter, max_segs);
}

struct request_queue;

extern int submit_bio_wait(struct bio *bio);
extern void bio_advance(struct bio *, unsigned);

extern void bio_init(struct bio *bio, struct bio_vec *table,
       unsigned short max_vecs);
extern void bio_uninit(struct bio *);
extern void bio_reset(struct bio *);
void bio_chain(struct bio *, struct bio *);

extern int bio_add_page(struct bio *, struct page *, unsigned int,unsigned int);
extern int bio_add_pc_page(struct request_queue *, struct bio *, struct page *,
      unsigned int, unsigned int);
int bio_add_zone_append_page(struct bio *bio, struct page *page,
        unsigned int len, unsigned int offset);
bool __bio_try_merge_page(struct bio *bio, struct page *page,
  unsigned int len, unsigned int off, bool *same_page);
void __bio_add_page(struct bio *bio, struct page *page,
  unsigned int len, unsigned int off);
int bio_iov_iter_get_pages(struct bio *bio, struct iov_iter *iter);
void bio_release_pages(struct bio *bio, bool mark_dirty);
extern void bio_set_pages_dirty(struct bio *bio);
extern void bio_check_pages_dirty(struct bio *bio);

extern void bio_copy_data_iter(struct bio *dst, struct bvec_iter *dst_iter,
          struct bio *src, struct bvec_iter *src_iter);
extern void bio_copy_data(struct bio *dst, struct bio *src);
extern void bio_free_pages(struct bio *bio);
void bio_truncate(struct bio *bio, unsigned new_size);
void guard_bio_eod(struct bio *bio);
void zero_fill_bio(struct bio *bio);

extern const char *bio_devname(struct bio *bio, char *buffer);
# 516 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_associate_blkg(struct bio *bio) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_associate_blkg_from_css(struct bio *bio,
            struct cgroup_subsys_state *css)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_clone_blkg_association(struct bio *dst,
           struct bio *src) { }
# 531 "./include/linux/bio.h"
struct bio_list {
 struct bio *head;
 struct bio *tail;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bio_list_empty(const struct bio_list *bl)
{
 return bl->head == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_init(struct bio_list *bl)
{
 bl->head = bl->tail = ((void *)0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned bio_list_size(const struct bio_list *bl)
{
 unsigned sz = 0;
 struct bio *bio;

 for (bio = (bl)->head; bio; bio = bio->bi_next)
  sz++;

 return sz;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_add(struct bio_list *bl, struct bio *bio)
{
 bio->bi_next = ((void *)0);

 if (bl->tail)
  bl->tail->bi_next = bio;
 else
  bl->head = bio;

 bl->tail = bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_add_head(struct bio_list *bl, struct bio *bio)
{
 bio->bi_next = bl->head;

 bl->head = bio;

 if (!bl->tail)
  bl->tail = bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_merge(struct bio_list *bl, struct bio_list *bl2)
{
 if (!bl2->head)
  return;

 if (bl->tail)
  bl->tail->bi_next = bl2->head;
 else
  bl->head = bl2->head;

 bl->tail = bl2->tail;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_list_merge_head(struct bio_list *bl,
           struct bio_list *bl2)
{
 if (!bl2->head)
  return;

 if (bl->head)
  bl2->tail->bi_next = bl->head;
 else
  bl->tail = bl2->tail;

 bl->head = bl2->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_list_peek(struct bio_list *bl)
{
 return bl->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_list_pop(struct bio_list *bl)
{
 struct bio *bio = bl->head;

 if (bio) {
  bl->head = bl->head->bi_next;
  if (!bl->head)
   bl->tail = ((void *)0);

  bio->bi_next = ((void *)0);
 }

 return bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio *bio_list_get(struct bio_list *bl)
{
 struct bio *bio = bl->head;

 bl->head = bl->tail = ((void *)0);

 return bio;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_inc_remaining(struct bio *bio)
{
 bio_set_flag(bio, BIO_CHAIN);
 __asm__ __volatile__ ("fence " "rw" "," "rw" : : : "memory");
 atomic_inc(&bio->__bi_remaining);
}
# 659 "./include/linux/bio.h"
struct bio_set {
 struct kmem_cache *bio_slab;
 unsigned int front_pad;




 struct bio_alloc_cache *cache;

 mempool_t bio_pool;
 mempool_t bvec_pool;





 unsigned int back_pad;




 spinlock_t rescue_lock;
 struct bio_list rescue_list;
 struct work_struct rescue_work;
 struct workqueue_struct *rescue_workqueue;




 struct hlist_node cpuhp_dead;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bioset_initialized(struct bio_set *bs)
{
 return bs->bio_slab != ((void *)0);
}
# 717 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bio_integrity(struct bio *bio)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bioset_integrity_create(struct bio_set *bs, int pool_size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bioset_integrity_free (struct bio_set *bs)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_integrity_prep(struct bio *bio)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bio_integrity_clone(struct bio *bio, struct bio *bio_src,
          gfp_t gfp_mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_integrity_advance(struct bio *bio,
      unsigned int bytes_done)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_integrity_trim(struct bio *bio)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_integrity_init(void)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bio_integrity_flagged(struct bio *bio, enum bip_flags flag)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *bio_integrity_alloc(struct bio * bio, gfp_t gfp,
        unsigned int nr)
{
 return ERR_PTR(-22);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bio_integrity_add_page(struct bio *bio, struct page *page,
     unsigned int len, unsigned int offset)
{
 return 0;
}
# 785 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_set_polled(struct bio *bio, struct kiocb *kiocb)
{
 bio->bi_opf |= (1ULL << __REQ_HIPRI);
 if (!is_sync_kiocb(kiocb))
  bio->bi_opf |= (1ULL << __REQ_NOWAIT);
}

struct bio *blk_next_bio(struct bio *bio, unsigned int nr_pages, gfp_t gfp);
# 18 "./include/linux/blkdev.h" 2






# 1 "./include/uapi/linux/blkzoned.h" 1
# 32 "./include/uapi/linux/blkzoned.h"
enum blk_zone_type {
 BLK_ZONE_TYPE_CONVENTIONAL = 0x1,
 BLK_ZONE_TYPE_SEQWRITE_REQ = 0x2,
 BLK_ZONE_TYPE_SEQWRITE_PREF = 0x3,
};
# 65 "./include/uapi/linux/blkzoned.h"
enum blk_zone_cond {
 BLK_ZONE_COND_NOT_WP = 0x0,
 BLK_ZONE_COND_EMPTY = 0x1,
 BLK_ZONE_COND_IMP_OPEN = 0x2,
 BLK_ZONE_COND_EXP_OPEN = 0x3,
 BLK_ZONE_COND_CLOSED = 0x4,
 BLK_ZONE_COND_READONLY = 0xD,
 BLK_ZONE_COND_FULL = 0xE,
 BLK_ZONE_COND_OFFLINE = 0xF,
};






enum blk_zone_report_flags {
 BLK_ZONE_REP_CAPACITY = (1 << 0),
};
# 106 "./include/uapi/linux/blkzoned.h"
struct blk_zone {
 __u64 start;
 __u64 len;
 __u64 wp;
 __u8 type;
 __u8 cond;
 __u8 non_seq;
 __u8 reset;
 __u8 resv[4];
 __u64 capacity;
 __u8 reserved[24];
};
# 129 "./include/uapi/linux/blkzoned.h"
struct blk_zone_report {
 __u64 sector;
 __u32 nr_zones;
 __u32 flags;
 struct blk_zone zones[0];
};
# 143 "./include/uapi/linux/blkzoned.h"
struct blk_zone_range {
 __u64 sector;
 __u64 nr_sectors;
};
# 25 "./include/linux/blkdev.h" 2

# 1 "./include/linux/sbitmap.h" 1
# 15 "./include/linux/sbitmap.h"
struct seq_file;




struct sbitmap_word {



 unsigned long depth;




 unsigned long word __attribute__((__aligned__((1 << 6))));




 unsigned long cleared __attribute__((__aligned__((1 << 6))));
} __attribute__((__aligned__((1 << 6))));







struct sbitmap {



 unsigned int depth;




 unsigned int shift;




 unsigned int map_nr;




 bool round_robin;




 struct sbitmap_word *map;







 unsigned int *alloc_hint;
};







struct sbq_wait_state {



 atomic_t wait_cnt;




 wait_queue_head_t wait;
} __attribute__((__aligned__((1 << 6))));
# 105 "./include/linux/sbitmap.h"
struct sbitmap_queue {



 struct sbitmap sb;





 unsigned int wake_batch;




 atomic_t wake_index;




 struct sbq_wait_state *ws;




 atomic_t ws_active;





 unsigned int min_shallow_depth;
};
# 155 "./include/linux/sbitmap.h"
int sbitmap_init_node(struct sbitmap *sb, unsigned int depth, int shift,
        gfp_t flags, int node, bool round_robin, bool alloc_hint);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_free(struct sbitmap *sb)
{
 free_percpu(sb->alloc_hint);
 kfree(sb->map);
 sb->map = ((void *)0);
}
# 177 "./include/linux/sbitmap.h"
void sbitmap_resize(struct sbitmap *sb, unsigned int depth);
# 187 "./include/linux/sbitmap.h"
int sbitmap_get(struct sbitmap *sb);
# 204 "./include/linux/sbitmap.h"
int sbitmap_get_shallow(struct sbitmap *sb, unsigned long shallow_depth);







bool sbitmap_any_bit_set(const struct sbitmap *sb);




typedef bool (*sb_for_each_fn)(struct sbitmap *, unsigned int, void *);
# 229 "./include/linux/sbitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sbitmap_for_each_set(struct sbitmap *sb,
       unsigned int start,
       sb_for_each_fn fn, void *data)
{
 unsigned int index;
 unsigned int nr;
 unsigned int scanned = 0;

 if (start >= sb->depth)
  start = 0;
 index = ((start) >> (sb)->shift);
 nr = ((start) & ((1U << (sb)->shift) - 1U));

 while (scanned < sb->depth) {
  unsigned long word;
  unsigned int depth = __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(sb->map[index].depth - nr)) *)1 == (typeof((unsigned int)(sb->depth - scanned)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(sb->map[index].depth - nr)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(sb->depth - scanned)) * 0l)) : (int *)8))))), (((unsigned int)(sb->map[index].depth - nr)) < ((unsigned int)(sb->depth - scanned)) ? ((unsigned int)(sb->map[index].depth - nr)) : ((unsigned int)(sb->depth - scanned))), ({ typeof((unsigned int)(sb->map[index].depth - nr)) __UNIQUE_ID___x325 = ((unsigned int)(sb->map[index].depth - nr)); typeof((unsigned int)(sb->depth - scanned)) __UNIQUE_ID___y326 = ((unsigned int)(sb->depth - scanned)); ((__UNIQUE_ID___x325) < (__UNIQUE_ID___y326) ? (__UNIQUE_ID___x325) : (__UNIQUE_ID___y326)); }));



  scanned += depth;
  word = sb->map[index].word & ~sb->map[index].cleared;
  if (!word)
   goto next;






  depth += nr;
  while (1) {
   nr = find_next_bit(&word, depth, nr);
   if (nr >= depth)
    break;
   if (!fn(sb, (index << sb->shift) + nr, data))
    return;

   nr++;
  }
next:
  nr = 0;
  if (++index >= sb->map_nr)
   index = 0;
 }
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_for_each_set(struct sbitmap *sb, sb_for_each_fn fn,
     void *data)
{
 __sbitmap_for_each_set(sb, 0, fn, data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *__sbitmap_word(struct sbitmap *sb,
         unsigned int bitnr)
{
 return &sb->map[((bitnr) >> (sb)->shift)].word;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_set_bit(struct sbitmap *sb, unsigned int bitnr)
{
 set_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), __sbitmap_word(sb, bitnr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_clear_bit(struct sbitmap *sb, unsigned int bitnr)
{
 clear_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), __sbitmap_word(sb, bitnr));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_deferred_clear_bit(struct sbitmap *sb, unsigned int bitnr)
{
 unsigned long *addr = &sb->map[((bitnr) >> (sb)->shift)].cleared;

 set_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), addr);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_put(struct sbitmap *sb, unsigned int bitnr)
{
 sbitmap_deferred_clear_bit(sb, bitnr);

 if (__builtin_expect(!!(sb->alloc_hint && !sb->round_robin && bitnr < sb->depth), 1))
  *({ do { const void *__vpp_verify = (typeof((sb->alloc_hint) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(sb->alloc_hint)) *)(sb->alloc_hint)); (typeof((typeof(*(sb->alloc_hint)) *)(sb->alloc_hint))) (__ptr + (((__per_cpu_offset[(((struct thread_info *)get_current())->cpu)])))); }); }) = bitnr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sbitmap_test_bit(struct sbitmap *sb, unsigned int bitnr)
{
 return arch_test_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), __sbitmap_word(sb, bitnr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sbitmap_calculate_shift(unsigned int depth)
{
 int shift = ( __builtin_constant_p(64) ? ((64) < 2 ? 0 : 63 - __builtin_clzll(64)) : (sizeof(64) <= 4) ? __ilog2_u32(64) : __ilog2_u64(64) );







 if (depth >= 4) {
  while ((4U << shift) > depth)
   shift--;
 }

 return shift;
}
# 360 "./include/linux/sbitmap.h"
void sbitmap_show(struct sbitmap *sb, struct seq_file *m);
# 370 "./include/linux/sbitmap.h"
unsigned int sbitmap_weight(const struct sbitmap *sb);
# 381 "./include/linux/sbitmap.h"
void sbitmap_bitmap_show(struct sbitmap *sb, struct seq_file *m);
# 395 "./include/linux/sbitmap.h"
int sbitmap_queue_init_node(struct sbitmap_queue *sbq, unsigned int depth,
       int shift, bool round_robin, gfp_t flags, int node);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbitmap_queue_free(struct sbitmap_queue *sbq)
{
 kfree(sbq->ws);
 sbitmap_free(&sbq->sb);
}
# 418 "./include/linux/sbitmap.h"
void sbitmap_queue_resize(struct sbitmap_queue *sbq, unsigned int depth);
# 427 "./include/linux/sbitmap.h"
int __sbitmap_queue_get(struct sbitmap_queue *sbq);
# 442 "./include/linux/sbitmap.h"
int __sbitmap_queue_get_shallow(struct sbitmap_queue *sbq,
    unsigned int shallow_depth);
# 454 "./include/linux/sbitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sbitmap_queue_get(struct sbitmap_queue *sbq,
        unsigned int *cpu)
{
 int nr;

 *cpu = ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); (((struct thread_info *)get_current())->cpu); });
 nr = __sbitmap_queue_get(sbq);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 return nr;
}
# 479 "./include/linux/sbitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sbitmap_queue_get_shallow(struct sbitmap_queue *sbq,
         unsigned int *cpu,
         unsigned int shallow_depth)
{
 int nr;

 *cpu = ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); (((struct thread_info *)get_current())->cpu); });
 nr = __sbitmap_queue_get_shallow(sbq, shallow_depth);
 do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
 return nr;
}
# 505 "./include/linux/sbitmap.h"
void sbitmap_queue_min_shallow_depth(struct sbitmap_queue *sbq,
         unsigned int min_shallow_depth);
# 515 "./include/linux/sbitmap.h"
void sbitmap_queue_clear(struct sbitmap_queue *sbq, unsigned int nr,
    unsigned int cpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sbq_index_inc(int index)
{
 return (index + 1) & (8 - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sbq_index_atomic_inc(atomic_t *index)
{
 int old = atomic_read(index);
 int new = sbq_index_inc(old);
 atomic_cmpxchg(index, old, new);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sbq_wait_state *sbq_wait_ptr(struct sbitmap_queue *sbq,
        atomic_t *wait_index)
{
 struct sbq_wait_state *ws;

 ws = &sbq->ws[atomic_read(wait_index)];
 sbq_index_atomic_inc(wait_index);
 return ws;
}






void sbitmap_queue_wake_all(struct sbitmap_queue *sbq);






void sbitmap_queue_wake_up(struct sbitmap_queue *sbq);
# 568 "./include/linux/sbitmap.h"
void sbitmap_queue_show(struct sbitmap_queue *sbq, struct seq_file *m);

struct sbq_wait {
 struct sbitmap_queue *sbq;
 struct wait_queue_entry wait;
};
# 589 "./include/linux/sbitmap.h"
void sbitmap_prepare_to_wait(struct sbitmap_queue *sbq,
    struct sbq_wait_state *ws,
    struct sbq_wait *sbq_wait, int state);




void sbitmap_finish_wait(struct sbitmap_queue *sbq, struct sbq_wait_state *ws,
    struct sbq_wait *sbq_wait);




void sbitmap_add_wait_queue(struct sbitmap_queue *sbq,
       struct sbq_wait_state *ws,
       struct sbq_wait *sbq_wait);




void sbitmap_del_wait_queue(struct sbq_wait *sbq_wait);
# 27 "./include/linux/blkdev.h" 2

struct module;
struct request_queue;
struct elevator_queue;
struct blk_trace;
struct request;
struct sg_io_hdr;
struct blkcg_gq;
struct blk_flush_queue;
struct pr_ops;
struct rq_qos;
struct blk_queue_stats;
struct blk_stat_callback;
struct blk_keyslot_manager;
# 57 "./include/linux/blkdev.h"
typedef void (rq_end_io_fn)(struct request *, blk_status_t);



typedef __u32 req_flags_t;
# 106 "./include/linux/blkdev.h"
enum mq_rq_state {
 MQ_RQ_IDLE = 0,
 MQ_RQ_IN_FLIGHT = 1,
 MQ_RQ_COMPLETE = 2,
};







struct request {
 struct request_queue *q;
 struct blk_mq_ctx *mq_ctx;
 struct blk_mq_hw_ctx *mq_hctx;

 unsigned int cmd_flags;
 req_flags_t rq_flags;

 int tag;
 int internal_tag;


 unsigned int __data_len;
 sector_t __sector;

 struct bio *bio;
 struct bio *biotail;

 struct list_head queuelist;
# 145 "./include/linux/blkdev.h"
 union {
  struct hlist_node hash;
  struct llist_node ipi_list;
 };






 union {
  struct rb_node rb_node;
  struct bio_vec special_vec;
  void *completion_data;
  int error_count;
 };







 union {
  struct {
   struct io_cq *icq;
   void *priv[2];
  } elv;

  struct {
   unsigned int seq;
   struct list_head list;
   rq_end_io_fn *saved_end_io;
  } flush;
 };

 struct gendisk *rq_disk;
 struct block_device *part;





 u64 start_time_ns;

 u64 io_start_time_ns;
# 200 "./include/linux/blkdev.h"
 unsigned short stats_sectors;





 unsigned short nr_phys_segments;
# 217 "./include/linux/blkdev.h"
 unsigned short write_hint;
 unsigned short ioprio;

 enum mq_rq_state state;
 refcount_t ref;

 unsigned int timeout;
 unsigned long deadline;

 union {
  struct __call_single_data csd;
  u64 fifo_time;
 };




 rq_end_io_fn *end_io;
 void *end_io_data;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_op_is_passthrough(unsigned int op)
{
 op &= ((1 << 8) - 1);
 return op == REQ_OP_DRV_IN || op == REQ_OP_DRV_OUT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_rq_is_passthrough(struct request *rq)
{
 return blk_op_is_passthrough(((rq)->cmd_flags & ((1 << 8) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short req_get_ioprio(struct request *req)
{
 return req->ioprio;
}

# 1 "./include/linux/elevator.h" 1
# 10 "./include/linux/elevator.h"
struct io_cq;
struct elevator_type;

struct blk_mq_debugfs_attr;





enum elv_merge {
 ELEVATOR_NO_MERGE = 0,
 ELEVATOR_FRONT_MERGE = 1,
 ELEVATOR_BACK_MERGE = 2,
 ELEVATOR_DISCARD_MERGE = 3,
};

struct blk_mq_alloc_data;
struct blk_mq_hw_ctx;

struct elevator_mq_ops {
 int (*init_sched)(struct request_queue *, struct elevator_type *);
 void (*exit_sched)(struct elevator_queue *);
 int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int);
 void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int);
 void (*depth_updated)(struct blk_mq_hw_ctx *);

 bool (*allow_merge)(struct request_queue *, struct request *, struct bio *);
 bool (*bio_merge)(struct request_queue *, struct bio *, unsigned int);
 int (*request_merge)(struct request_queue *q, struct request **, struct bio *);
 void (*request_merged)(struct request_queue *, struct request *, enum elv_merge);
 void (*requests_merged)(struct request_queue *, struct request *, struct request *);
 void (*limit_depth)(unsigned int, struct blk_mq_alloc_data *);
 void (*prepare_request)(struct request *);
 void (*finish_request)(struct request *);
 void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool);
 struct request *(*dispatch_request)(struct blk_mq_hw_ctx *);
 bool (*has_work)(struct blk_mq_hw_ctx *);
 void (*completed_request)(struct request *, u64);
 void (*requeue_request)(struct request *);
 struct request *(*former_request)(struct request_queue *, struct request *);
 struct request *(*next_request)(struct request_queue *, struct request *);
 void (*init_icq)(struct io_cq *);
 void (*exit_icq)(struct io_cq *);
};



struct elv_fs_entry {
 struct attribute attr;
 ssize_t (*show)(struct elevator_queue *, char *);
 ssize_t (*store)(struct elevator_queue *, const char *, size_t);
};




struct elevator_type
{

 struct kmem_cache *icq_cache;


 struct elevator_mq_ops ops;

 size_t icq_size;
 size_t icq_align;
 struct elv_fs_entry *elevator_attrs;
 const char *elevator_name;
 const char *elevator_alias;
 const unsigned int elevator_features;
 struct module *elevator_owner;

 const struct blk_mq_debugfs_attr *queue_debugfs_attrs;
 const struct blk_mq_debugfs_attr *hctx_debugfs_attrs;



 char icq_cache_name[(16) + 6];
 struct list_head list;
};



void elv_rqhash_del(struct request_queue *q, struct request *rq);
void elv_rqhash_add(struct request_queue *q, struct request *rq);
void elv_rqhash_reposition(struct request_queue *q, struct request *rq);
struct request *elv_rqhash_find(struct request_queue *q, sector_t offset);




struct elevator_queue
{
 struct elevator_type *type;
 void *elevator_data;
 struct kobject kobj;
 struct mutex sysfs_lock;
 unsigned int registered:1;
 struct hlist_head hash[1 << (6)];
};




extern enum elv_merge elv_merge(struct request_queue *, struct request **,
  struct bio *);
extern void elv_merge_requests(struct request_queue *, struct request *,
          struct request *);
extern void elv_merged_request(struct request_queue *, struct request *,
  enum elv_merge);
extern bool elv_attempt_insert_merge(struct request_queue *, struct request *,
         struct list_head *);
extern struct request *elv_former_request(struct request_queue *, struct request *);
extern struct request *elv_latter_request(struct request_queue *, struct request *);
void elevator_init_mq(struct request_queue *q);




extern int elv_register(struct elevator_type *);
extern void elv_unregister(struct elevator_type *);




extern ssize_t elv_iosched_show(struct request_queue *, char *);
extern ssize_t elv_iosched_store(struct request_queue *, const char *, size_t);

extern bool elv_bio_merge_ok(struct request *, struct bio *);
extern struct elevator_queue *elevator_alloc(struct request_queue *,
     struct elevator_type *);




extern struct request *elv_rb_former_request(struct request_queue *, struct request *);
extern struct request *elv_rb_latter_request(struct request_queue *, struct request *);




extern void elv_rb_add(struct rb_root *, struct request *);
extern void elv_rb_del(struct rb_root *, struct request *);
extern struct request *elv_rb_find(struct rb_root *, sector_t);
# 255 "./include/linux/blkdev.h" 2

struct blk_queue_ctx;

struct bio_vec;

enum blk_eh_timer_return {
 BLK_EH_DONE,
 BLK_EH_RESET_TIMER,
};

enum blk_queue_state {
 Queue_down,
 Queue_up,
};
# 279 "./include/linux/blkdev.h"
enum blk_zoned_model {
 BLK_ZONED_NONE = 0,
 BLK_ZONED_HA,
 BLK_ZONED_HM,
};





enum blk_bounce {
 BLK_BOUNCE_NONE,
 BLK_BOUNCE_HIGH,
};

struct queue_limits {
 enum blk_bounce bounce;
 unsigned long seg_boundary_mask;
 unsigned long virt_boundary_mask;

 unsigned int max_hw_sectors;
 unsigned int max_dev_sectors;
 unsigned int chunk_sectors;
 unsigned int max_sectors;
 unsigned int max_segment_size;
 unsigned int physical_block_size;
 unsigned int logical_block_size;
 unsigned int alignment_offset;
 unsigned int io_min;
 unsigned int io_opt;
 unsigned int max_discard_sectors;
 unsigned int max_hw_discard_sectors;
 unsigned int max_write_same_sectors;
 unsigned int max_write_zeroes_sectors;
 unsigned int max_zone_append_sectors;
 unsigned int discard_granularity;
 unsigned int discard_alignment;
 unsigned int zone_write_granularity;

 unsigned short max_segments;
 unsigned short max_integrity_segments;
 unsigned short max_discard_segments;

 unsigned char misaligned;
 unsigned char discard_misaligned;
 unsigned char raid_partial_stripes_expensive;
 enum blk_zoned_model zoned;
};

typedef int (*report_zones_cb)(struct blk_zone *zone, unsigned int idx,
          void *data);

void blk_queue_set_zoned(struct gendisk *disk, enum blk_zoned_model model);
# 352 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blkdev_nr_zones(struct gendisk *disk)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blkdev_report_zones_ioctl(struct block_device *bdev,
         fmode_t mode, unsigned int cmd,
         unsigned long arg)
{
 return -25;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blkdev_zone_mgmt_ioctl(struct block_device *bdev,
      fmode_t mode, unsigned int cmd,
      unsigned long arg)
{
 return -25;
}



struct request_queue {
 struct request *last_merge;
 struct elevator_queue *elevator;

 struct percpu_ref q_usage_counter;

 struct blk_queue_stats *stats;
 struct rq_qos *rq_qos;

 const struct blk_mq_ops *mq_ops;


 struct blk_mq_ctx *queue_ctx;

 unsigned int queue_depth;


 struct blk_mq_hw_ctx **queue_hw_ctx;
 unsigned int nr_hw_queues;





 void *queuedata;




 unsigned long queue_flags;




 atomic_t pm_only;





 int id;

 spinlock_t queue_lock;

 struct gendisk *disk;




 struct kobject kobj;




 struct kobject *mq_kobj;
# 441 "./include/linux/blkdev.h"
 unsigned long nr_requests;

 unsigned int dma_pad_mask;
 unsigned int dma_alignment;






 unsigned int rq_timeout;
 int poll_nsec;

 struct blk_stat_callback *poll_cb;
 struct blk_rq_stat poll_stat[16];

 struct timer_list timeout;
 struct work_struct timeout_work;

 atomic_t nr_active_requests_shared_sbitmap;

 struct sbitmap_queue sched_bitmap_tags;
 struct sbitmap_queue sched_breserved_tags;

 struct list_head icq_list;






 struct queue_limits limits;

 unsigned int required_elevator_features;
# 501 "./include/linux/blkdev.h"
 int node;
 struct mutex debugfs_mutex;






 struct blk_flush_queue *fq;

 struct list_head requeue_list;
 spinlock_t requeue_lock;
 struct delayed_work requeue_work;

 struct mutex sysfs_lock;
 struct mutex sysfs_dir_lock;





 struct list_head unused_hctx_list;
 spinlock_t unused_hctx_lock;

 int mq_freeze_depth;





 struct callback_head callback_head;
 wait_queue_head_t mq_freeze_wq;




 struct mutex mq_freeze_lock;

 struct blk_mq_tag_set *tag_set;
 struct list_head tag_set_list;
 struct bio_set bio_split;

 struct dentry *debugfs_dir;


 struct dentry *sched_debugfs_dir;
 struct dentry *rqos_debugfs_dir;


 bool mq_sysfs_init_done;

 size_t cmd_size;


 u64 write_hints[5];
};
# 594 "./include/linux/blkdev.h"
void blk_queue_flag_set(unsigned int flag, struct request_queue *q);
void blk_queue_flag_clear(unsigned int flag, struct request_queue *q);
bool blk_queue_flag_test_and_set(unsigned int flag, struct request_queue *q);
# 636 "./include/linux/blkdev.h"
extern void blk_set_pm_only(struct request_queue *q);
extern void blk_clear_pm_only(struct request_queue *q);
# 650 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_is_mq(struct request_queue *q)
{
 return q->mq_ops;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rpm_status queue_rpm_status(struct request_queue *q)
{
 return RPM_ACTIVE;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum blk_zoned_model
blk_queue_zoned_model(struct request_queue *q)
{
 if (0)
  return q->limits.zoned;
 return BLK_ZONED_NONE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_queue_is_zoned(struct request_queue *q)
{
 switch (blk_queue_zoned_model(q)) {
 case BLK_ZONED_HA:
 case BLK_ZONED_HM:
  return true;
 default:
  return false;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t blk_queue_zone_sectors(struct request_queue *q)
{
 return blk_queue_is_zoned(q) ? q->limits.chunk_sectors : 0;
}
# 737 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_queue_nr_zones(struct request_queue *q)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_queue_zone_is_seq(struct request_queue *q,
      sector_t sector)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_queue_zone_no(struct request_queue *q,
          sector_t sector)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_open_zones(const struct request_queue *q)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_active_zones(const struct request_queue *q)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rq_is_sync(struct request *rq)
{
 return op_is_sync(rq->cmd_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rq_mergeable(struct request *rq)
{
 if (blk_rq_is_passthrough(rq))
  return false;

 if (((rq)->cmd_flags & ((1 << 8) - 1)) == REQ_OP_FLUSH)
  return false;

 if (((rq)->cmd_flags & ((1 << 8) - 1)) == REQ_OP_WRITE_ZEROES)
  return false;

 if (((rq)->cmd_flags & ((1 << 8) - 1)) == REQ_OP_ZONE_APPEND)
  return false;

 if (rq->cmd_flags & ((1ULL << __REQ_NOMERGE) | (1ULL << __REQ_PREFLUSH) | (1ULL << __REQ_FUA)))
  return false;
 if (rq->rq_flags & ((( req_flags_t)(1 << 1)) | (( req_flags_t)(1 << 3)) | (( req_flags_t)(1 << 4)) | (( req_flags_t)(1 << 18))))
  return false;

 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_write_same_mergeable(struct bio *a, struct bio *b)
{
 if ((((&(((((a))->bi_io_vec)))[(((((a)->bi_iter)))).bi_idx])->bv_page) + (((&((((((a))->bi_io_vec))))[((((((a)->bi_iter))))).bi_idx])->bv_offset + (((((a)->bi_iter)))).bi_bvec_done) / ((1UL) << (12)))) == (((&(((((b))->bi_io_vec)))[(((((b)->bi_iter)))).bi_idx])->bv_page) + (((&((((((b))->bi_io_vec))))[((((((b)->bi_iter))))).bi_idx])->bv_offset + (((((b)->bi_iter)))).bi_bvec_done) / ((1UL) << (12)))) &&
     (((&(((((a))->bi_io_vec)))[(((((a)->bi_iter)))).bi_idx])->bv_offset + ((((a)->bi_iter))).bi_bvec_done) % ((1UL) << (12))) == (((&(((((b))->bi_io_vec)))[(((((b)->bi_iter)))).bi_idx])->bv_offset + ((((b)->bi_iter))).bi_bvec_done) % ((1UL) << (12))))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_queue_depth(struct request_queue *q)
{
 if (q->queue_depth)
  return q->queue_depth;

 return q->nr_requests;
}







struct rq_map_data {
 struct page **pages;
 int page_order;
 int nr_entries;
 unsigned long offset;
 int null_mapped;
 int from_user;
};

struct req_iterator {
 struct bvec_iter iter;
 struct bio *bio;
};
# 848 "./include/linux/blkdev.h"
extern void rq_flush_dcache_pages(struct request *rq);






extern int blk_register_queue(struct gendisk *disk);
extern void blk_unregister_queue(struct gendisk *disk);
blk_qc_t submit_bio_noacct(struct bio *bio);
extern void blk_rq_init(struct request_queue *q, struct request *rq);
extern void blk_put_request(struct request *);
extern struct request *blk_get_request(struct request_queue *, unsigned int op,
           blk_mq_req_flags_t flags);
extern int blk_lld_busy(struct request_queue *q);
extern int blk_rq_prep_clone(struct request *rq, struct request *rq_src,
        struct bio_set *bs, gfp_t gfp_mask,
        int (*bio_ctr)(struct bio *, struct bio *, void *),
        void *data);
extern void blk_rq_unprep_clone(struct request *rq);
extern blk_status_t blk_insert_cloned_request(struct request_queue *q,
         struct request *rq);
int blk_rq_append_bio(struct request *rq, struct bio *bio);
extern void blk_queue_split(struct bio **);
extern int blk_queue_enter(struct request_queue *q, blk_mq_req_flags_t flags);
extern void blk_queue_exit(struct request_queue *q);
extern void blk_sync_queue(struct request_queue *q);
extern int blk_rq_map_user(struct request_queue *, struct request *,
      struct rq_map_data *, void *, unsigned long,
      gfp_t);
extern int blk_rq_unmap_user(struct bio *);
extern int blk_rq_map_kern(struct request_queue *, struct request *, void *, unsigned int, gfp_t);
extern int blk_rq_map_user_iov(struct request_queue *, struct request *,
          struct rq_map_data *, const struct iov_iter *,
          gfp_t);
extern void blk_execute_rq_nowait(struct gendisk *,
      struct request *, int, rq_end_io_fn *);

blk_status_t blk_execute_rq(struct gendisk *bd_disk, struct request *rq,
       int at_head);


extern const char *blk_op_str(unsigned int op);

int blk_status_to_errno(blk_status_t status);
blk_status_t errno_to_blk_status(int errno);

int blk_poll(struct request_queue *q, blk_qc_t cookie, bool spin);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct request_queue *bdev_get_queue(struct block_device *bdev)
{
 return bdev->bd_disk->queue;
}
# 928 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t blk_rq_pos(const struct request *rq)
{
 return rq->__sector;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_bytes(const struct request *rq)
{
 return rq->__data_len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_rq_cur_bytes(const struct request *rq)
{
 return rq->bio ? bio_cur_bytes(rq->bio) : 0;
}

extern unsigned int blk_rq_err_bytes(const struct request *rq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_sectors(const struct request *rq)
{
 return blk_rq_bytes(rq) >> 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_cur_sectors(const struct request *rq)
{
 return blk_rq_cur_bytes(rq) >> 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_stats_sectors(const struct request *rq)
{
 return rq->stats_sectors;
}
# 994 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_payload_bytes(struct request *rq)
{
 if (rq->rq_flags & (( req_flags_t)(1 << 18)))
  return rq->special_vec.bv_len;
 return blk_rq_bytes(rq);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec req_bvec(struct request *rq)
{
 if (rq->rq_flags & (( req_flags_t)(1 << 18)))
  return rq->special_vec;
 return ((struct bio_vec) { .bv_page = ((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_page), .bv_len = __builtin_choose_expr(((!!(sizeof((typeof(((rq->bio->bi_iter)).bi_size) *)1 == (typeof((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_len - ((rq->bio->bi_iter)).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((rq->bio->bi_iter)).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_len - ((rq->bio->bi_iter)).bi_bvec_done) * 0l)) : (int *)8))))), ((((rq->bio->bi_iter)).bi_size) < ((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_len - ((rq->bio->bi_iter)).bi_bvec_done) ? (((rq->bio->bi_iter)).bi_size) : ((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_len - ((rq->bio->bi_iter)).bi_bvec_done)), ({ typeof(((rq->bio->bi_iter)).bi_size) __UNIQUE_ID___x327 = (((rq->bio->bi_iter)).bi_size); typeof((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_len - ((rq->bio->bi_iter)).bi_bvec_done) __UNIQUE_ID___y328 = ((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_len - ((rq->bio->bi_iter)).bi_bvec_done); ((__UNIQUE_ID___x327) < (__UNIQUE_ID___y328) ? (__UNIQUE_ID___x327) : (__UNIQUE_ID___y328)); })), .bv_offset = ((&(((rq->bio->bi_io_vec)))[(((rq->bio->bi_iter))).bi_idx])->bv_offset + ((rq->bio->bi_iter)).bi_bvec_done), });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_queue_get_max_sectors(struct request_queue *q,
           int op)
{
 if (__builtin_expect(!!(op == REQ_OP_DISCARD || op == REQ_OP_SECURE_ERASE), 0))
  return __builtin_choose_expr(((!!(sizeof((typeof(q->limits.max_discard_sectors) *)1 == (typeof((~0U) >> 9) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(q->limits.max_discard_sectors) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((~0U) >> 9) * 0l)) : (int *)8))))), ((q->limits.max_discard_sectors) < ((~0U) >> 9) ? (q->limits.max_discard_sectors) : ((~0U) >> 9)), ({ typeof(q->limits.max_discard_sectors) __UNIQUE_ID___x329 = (q->limits.max_discard_sectors); typeof((~0U) >> 9) __UNIQUE_ID___y330 = ((~0U) >> 9); ((__UNIQUE_ID___x329) < (__UNIQUE_ID___y330) ? (__UNIQUE_ID___x329) : (__UNIQUE_ID___y330)); }));


 if (__builtin_expect(!!(op == REQ_OP_WRITE_SAME), 0))
  return q->limits.max_write_same_sectors;

 if (__builtin_expect(!!(op == REQ_OP_WRITE_ZEROES), 0))
  return q->limits.max_write_zeroes_sectors;

 return q->limits.max_sectors;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_max_size_offset(struct request_queue *q,
            sector_t offset,
            unsigned int chunk_sectors)
{
 if (!chunk_sectors) {
  if (q->limits.chunk_sectors)
   chunk_sectors = q->limits.chunk_sectors;
  else
   return q->limits.max_sectors;
 }

 if (__builtin_expect(!!(is_power_of_2(chunk_sectors)), 1))
  chunk_sectors -= offset & (chunk_sectors - 1);
 else
  chunk_sectors -= ({ uint32_t __base = (chunk_sectors); uint32_t __rem; __rem = ((uint64_t)(offset)) % __base; (offset) = ((uint64_t)(offset)) / __base; __rem; });

 return __builtin_choose_expr(((!!(sizeof((typeof(q->limits.max_sectors) *)1 == (typeof(chunk_sectors) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(q->limits.max_sectors) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(chunk_sectors) * 0l)) : (int *)8))))), ((q->limits.max_sectors) < (chunk_sectors) ? (q->limits.max_sectors) : (chunk_sectors)), ({ typeof(q->limits.max_sectors) __UNIQUE_ID___x331 = (q->limits.max_sectors); typeof(chunk_sectors) __UNIQUE_ID___y332 = (chunk_sectors); ((__UNIQUE_ID___x331) < (__UNIQUE_ID___y332) ? (__UNIQUE_ID___x331) : (__UNIQUE_ID___y332)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_get_max_sectors(struct request *rq,
        sector_t offset)
{
 struct request_queue *q = rq->q;

 if (blk_rq_is_passthrough(rq))
  return q->limits.max_hw_sectors;

 if (!q->limits.chunk_sectors ||
     ((rq)->cmd_flags & ((1 << 8) - 1)) == REQ_OP_DISCARD ||
     ((rq)->cmd_flags & ((1 << 8) - 1)) == REQ_OP_SECURE_ERASE)
  return blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1)));

 return __builtin_choose_expr(((!!(sizeof((typeof(blk_max_size_offset(q, offset, 0)) *)1 == (typeof(blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(blk_max_size_offset(q, offset, 0)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1)))) * 0l)) : (int *)8))))), ((blk_max_size_offset(q, offset, 0)) < (blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1)))) ? (blk_max_size_offset(q, offset, 0)) : (blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1))))), ({ typeof(blk_max_size_offset(q, offset, 0)) __UNIQUE_ID___x333 = (blk_max_size_offset(q, offset, 0)); typeof(blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1)))) __UNIQUE_ID___y334 = (blk_queue_get_max_sectors(q, ((rq)->cmd_flags & ((1 << 8) - 1)))); ((__UNIQUE_ID___x333) < (__UNIQUE_ID___y334) ? (__UNIQUE_ID___x333) : (__UNIQUE_ID___y334)); }));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blk_rq_count_bios(struct request *rq)
{
 unsigned int nr_bios = 0;
 struct bio *bio;

 if ((rq->bio)) for (bio = (rq)->bio; bio; bio = bio->bi_next)
  nr_bios++;

 return nr_bios;
}

void blk_steal_bios(struct bio_list *list, struct request *rq);







extern bool blk_update_request(struct request *rq, blk_status_t error,
          unsigned int nr_bytes);

extern void blk_abort_request(struct request *);




extern void blk_cleanup_queue(struct request_queue *);
void blk_queue_bounce_limit(struct request_queue *q, enum blk_bounce limit);
extern void blk_queue_max_hw_sectors(struct request_queue *, unsigned int);
extern void blk_queue_chunk_sectors(struct request_queue *, unsigned int);
extern void blk_queue_max_segments(struct request_queue *, unsigned short);
extern void blk_queue_max_discard_segments(struct request_queue *,
  unsigned short);
extern void blk_queue_max_segment_size(struct request_queue *, unsigned int);
extern void blk_queue_max_discard_sectors(struct request_queue *q,
  unsigned int max_discard_sectors);
extern void blk_queue_max_write_same_sectors(struct request_queue *q,
  unsigned int max_write_same_sectors);
extern void blk_queue_max_write_zeroes_sectors(struct request_queue *q,
  unsigned int max_write_same_sectors);
extern void blk_queue_logical_block_size(struct request_queue *, unsigned int);
extern void blk_queue_max_zone_append_sectors(struct request_queue *q,
  unsigned int max_zone_append_sectors);
extern void blk_queue_physical_block_size(struct request_queue *, unsigned int);
void blk_queue_zone_write_granularity(struct request_queue *q,
          unsigned int size);
extern void blk_queue_alignment_offset(struct request_queue *q,
           unsigned int alignment);
void disk_update_readahead(struct gendisk *disk);
extern void blk_limits_io_min(struct queue_limits *limits, unsigned int min);
extern void blk_queue_io_min(struct request_queue *q, unsigned int min);
extern void blk_limits_io_opt(struct queue_limits *limits, unsigned int opt);
extern void blk_queue_io_opt(struct request_queue *q, unsigned int opt);
extern void blk_set_queue_depth(struct request_queue *q, unsigned int depth);
extern void blk_set_default_limits(struct queue_limits *lim);
extern void blk_set_stacking_limits(struct queue_limits *lim);
extern int blk_stack_limits(struct queue_limits *t, struct queue_limits *b,
       sector_t offset);
extern void disk_stack_limits(struct gendisk *disk, struct block_device *bdev,
         sector_t offset);
extern void blk_queue_update_dma_pad(struct request_queue *, unsigned int);
extern void blk_queue_segment_boundary(struct request_queue *, unsigned long);
extern void blk_queue_virt_boundary(struct request_queue *, unsigned long);
extern void blk_queue_dma_alignment(struct request_queue *, int);
extern void blk_queue_update_dma_alignment(struct request_queue *, int);
extern void blk_queue_rq_timeout(struct request_queue *, unsigned int);
extern void blk_queue_write_cache(struct request_queue *q, bool enabled, bool fua);
extern void blk_queue_required_elevator_features(struct request_queue *q,
       unsigned int features);
extern bool blk_queue_can_use_dma_map_merging(struct request_queue *q,
           struct device *dev);
# 1150 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short blk_rq_nr_phys_segments(struct request *rq)
{
 if (rq->rq_flags & (( req_flags_t)(1 << 18)))
  return 1;
 return rq->nr_phys_segments;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short blk_rq_nr_discard_segments(struct request *rq)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((unsigned short)(rq->nr_phys_segments)) *)1 == (typeof((unsigned short)(1)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned short)(rq->nr_phys_segments)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned short)(1)) * 0l)) : (int *)8))))), (((unsigned short)(rq->nr_phys_segments)) > ((unsigned short)(1)) ? ((unsigned short)(rq->nr_phys_segments)) : ((unsigned short)(1))), ({ typeof((unsigned short)(rq->nr_phys_segments)) __UNIQUE_ID___x335 = ((unsigned short)(rq->nr_phys_segments)); typeof((unsigned short)(1)) __UNIQUE_ID___y336 = ((unsigned short)(1)); ((__UNIQUE_ID___x335) > (__UNIQUE_ID___y336) ? (__UNIQUE_ID___x335) : (__UNIQUE_ID___y336)); }));
}

int __blk_rq_map_sg(struct request_queue *q, struct request *rq,
  struct scatterlist *sglist, struct scatterlist **last_sg);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_rq_map_sg(struct request_queue *q, struct request *rq,
  struct scatterlist *sglist)
{
 struct scatterlist *last_sg = ((void *)0);

 return __blk_rq_map_sg(q, rq, sglist, &last_sg);
}
extern void blk_dump_rq_flags(struct request *, char *);

bool __attribute__((__warn_unused_result__)) blk_get_queue(struct request_queue *);
extern void blk_put_queue(struct request_queue *);
extern void blk_set_queue_dying(struct request_queue *);
# 1194 "./include/linux/blkdev.h"
struct blk_plug {
 struct list_head mq_list;
 struct list_head cb_list;
 unsigned short rq_count;
 bool multiple_queues;
 bool nowait;
};



struct blk_plug_cb;
typedef void (*blk_plug_cb_fn)(struct blk_plug_cb *, bool);
struct blk_plug_cb {
 struct list_head list;
 blk_plug_cb_fn callback;
 void *data;
};
extern struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn unplug,
          void *data, int size);
extern void blk_start_plug(struct blk_plug *);
extern void blk_finish_plug(struct blk_plug *);
extern void blk_flush_plug_list(struct blk_plug *, bool);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_flush_plug(struct task_struct *tsk)
{
 struct blk_plug *plug = tsk->plug;

 if (plug)
  blk_flush_plug_list(plug, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_schedule_flush_plug(struct task_struct *tsk)
{
 struct blk_plug *plug = tsk->plug;

 if (plug)
  blk_flush_plug_list(plug, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_needs_flush_plug(struct task_struct *tsk)
{
 struct blk_plug *plug = tsk->plug;

 return plug &&
   (!list_empty(&plug->mq_list) ||
   !list_empty(&plug->cb_list));
}

int blkdev_issue_flush(struct block_device *bdev);
long nr_blockdev_pages(void);
# 1281 "./include/linux/blkdev.h"
extern void blk_io_schedule(void);

extern int blkdev_issue_write_same(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, struct page *page);



extern int blkdev_issue_discard(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, unsigned long flags);
extern int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, int flags,
  struct bio **biop);




extern int __blkdev_issue_zeroout(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, struct bio **biop,
  unsigned flags);
extern int blkdev_issue_zeroout(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, unsigned flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sb_issue_discard(struct super_block *sb, sector_t block,
  sector_t nr_blocks, gfp_t gfp_mask, unsigned long flags)
{
 return blkdev_issue_discard(sb->s_bdev,
        block << (sb->s_blocksize_bits -
           9),
        nr_blocks << (sb->s_blocksize_bits -
        9),
        gfp_mask, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sb_issue_zeroout(struct super_block *sb, sector_t block,
  sector_t nr_blocks, gfp_t gfp_mask)
{
 return blkdev_issue_zeroout(sb->s_bdev,
        block << (sb->s_blocksize_bits -
           9),
        nr_blocks << (sb->s_blocksize_bits -
        9),
        gfp_mask, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bdev_is_partition(struct block_device *bdev)
{
 return bdev->bd_partno;
}

enum blk_default_limits {
 BLK_MAX_SEGMENTS = 128,
 BLK_SAFE_MAX_SECTORS = 255,
 BLK_DEF_MAX_SECTORS = 2560,
 BLK_MAX_SEGMENT_SIZE = 65536,
 BLK_SEG_BOUNDARY_MASK = 0xFFFFFFFFUL,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long queue_segment_boundary(const struct request_queue *q)
{
 return q->limits.seg_boundary_mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long queue_virt_boundary(const struct request_queue *q)
{
 return q->limits.virt_boundary_mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_sectors(const struct request_queue *q)
{
 return q->limits.max_sectors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_bytes(struct request_queue *q)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(queue_max_sectors(q))) *)1 == (typeof((unsigned int)(((int)(~0U >> 1)) >> 9)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(queue_max_sectors(q))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(((int)(~0U >> 1)) >> 9)) * 0l)) : (int *)8))))), (((unsigned int)(queue_max_sectors(q))) < ((unsigned int)(((int)(~0U >> 1)) >> 9)) ? ((unsigned int)(queue_max_sectors(q))) : ((unsigned int)(((int)(~0U >> 1)) >> 9))), ({ typeof((unsigned int)(queue_max_sectors(q))) __UNIQUE_ID___x337 = ((unsigned int)(queue_max_sectors(q))); typeof((unsigned int)(((int)(~0U >> 1)) >> 9)) __UNIQUE_ID___y338 = ((unsigned int)(((int)(~0U >> 1)) >> 9)); ((__UNIQUE_ID___x337) < (__UNIQUE_ID___y338) ? (__UNIQUE_ID___x337) : (__UNIQUE_ID___y338)); })) << 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_hw_sectors(const struct request_queue *q)
{
 return q->limits.max_hw_sectors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short queue_max_segments(const struct request_queue *q)
{
 return q->limits.max_segments;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short queue_max_discard_segments(const struct request_queue *q)
{
 return q->limits.max_discard_segments;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_segment_size(const struct request_queue *q)
{
 return q->limits.max_segment_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_max_zone_append_sectors(const struct request_queue *q)
{

 const struct queue_limits *l = &q->limits;

 return __builtin_choose_expr(((!!(sizeof((typeof(l->max_zone_append_sectors) *)1 == (typeof(l->max_sectors) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(l->max_zone_append_sectors) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(l->max_sectors) * 0l)) : (int *)8))))), ((l->max_zone_append_sectors) < (l->max_sectors) ? (l->max_zone_append_sectors) : (l->max_sectors)), ({ typeof(l->max_zone_append_sectors) __UNIQUE_ID___x339 = (l->max_zone_append_sectors); typeof(l->max_sectors) __UNIQUE_ID___y340 = (l->max_sectors); ((__UNIQUE_ID___x339) < (__UNIQUE_ID___y340) ? (__UNIQUE_ID___x339) : (__UNIQUE_ID___y340)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned queue_logical_block_size(const struct request_queue *q)
{
 int retval = 512;

 if (q && q->limits.logical_block_size)
  retval = q->limits.logical_block_size;

 return retval;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bdev_logical_block_size(struct block_device *bdev)
{
 return queue_logical_block_size(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_physical_block_size(const struct request_queue *q)
{
 return q->limits.physical_block_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bdev_physical_block_size(struct block_device *bdev)
{
 return queue_physical_block_size(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_io_min(const struct request_queue *q)
{
 return q->limits.io_min;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bdev_io_min(struct block_device *bdev)
{
 return queue_io_min(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int queue_io_opt(const struct request_queue *q)
{
 return q->limits.io_opt;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bdev_io_opt(struct block_device *bdev)
{
 return queue_io_opt(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int
queue_zone_write_granularity(const struct request_queue *q)
{
 return q->limits.zone_write_granularity;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int
bdev_zone_write_granularity(struct block_device *bdev)
{
 return queue_zone_write_granularity(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queue_alignment_offset(const struct request_queue *q)
{
 if (q->limits.misaligned)
  return -1;

 return q->limits.alignment_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queue_limit_alignment_offset(struct queue_limits *lim, sector_t sector)
{
 unsigned int granularity = __builtin_choose_expr(((!!(sizeof((typeof(lim->physical_block_size) *)1 == (typeof(lim->io_min) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(lim->physical_block_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(lim->io_min) * 0l)) : (int *)8))))), ((lim->physical_block_size) > (lim->io_min) ? (lim->physical_block_size) : (lim->io_min)), ({ typeof(lim->physical_block_size) __UNIQUE_ID___x341 = (lim->physical_block_size); typeof(lim->io_min) __UNIQUE_ID___y342 = (lim->io_min); ((__UNIQUE_ID___x341) > (__UNIQUE_ID___y342) ? (__UNIQUE_ID___x341) : (__UNIQUE_ID___y342)); }));
 unsigned int alignment = ({ uint32_t __base = (granularity >> 9); uint32_t __rem; __rem = ((uint64_t)(sector)) % __base; (sector) = ((uint64_t)(sector)) / __base; __rem; })
  << 9;

 return (granularity + lim->alignment_offset - alignment) % granularity;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bdev_alignment_offset(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q->limits.misaligned)
  return -1;
 if (bdev_is_partition(bdev))
  return queue_limit_alignment_offset(&q->limits,
    bdev->bd_start_sect);
 return q->limits.alignment_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queue_discard_alignment(const struct request_queue *q)
{
 if (q->limits.discard_misaligned)
  return -1;

 return q->limits.discard_alignment;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queue_limit_discard_alignment(struct queue_limits *lim, sector_t sector)
{
 unsigned int alignment, granularity, offset;

 if (!lim->max_discard_sectors)
  return 0;


 alignment = lim->discard_alignment >> 9;
 granularity = lim->discard_granularity >> 9;
 if (!granularity)
  return 0;


 offset = ({ uint32_t __base = (granularity); uint32_t __rem; __rem = ((uint64_t)(sector)) % __base; (sector) = ((uint64_t)(sector)) / __base; __rem; });


 offset = (granularity + alignment - offset) % granularity;


 return offset << 9;
}
# 1510 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_discard_mergable(struct request *req)
{
 if (((req)->cmd_flags & ((1 << 8) - 1)) == REQ_OP_DISCARD &&
     queue_max_discard_segments(req->q) > 1)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bdev_discard_alignment(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (bdev_is_partition(bdev))
  return queue_limit_discard_alignment(&q->limits,
    bdev->bd_start_sect);
 return q->limits.discard_alignment;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bdev_write_same(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return q->limits.max_write_same_sectors;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bdev_write_zeroes_sectors(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return q->limits.max_write_zeroes_sectors;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum blk_zoned_model bdev_zoned_model(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return blk_queue_zoned_model(q);

 return BLK_ZONED_NONE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bdev_is_zoned(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return blk_queue_is_zoned(q);

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sector_t bdev_zone_sectors(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return blk_queue_zone_sectors(q);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bdev_max_open_zones(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return queue_max_open_zones(q);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bdev_max_active_zones(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return queue_max_active_zones(q);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queue_dma_alignment(const struct request_queue *q)
{
 return q ? q->dma_alignment : 511;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_rq_aligned(struct request_queue *q, unsigned long addr,
     unsigned int len)
{
 unsigned int alignment = queue_dma_alignment(q) | q->dma_pad_mask;
 return !(addr & alignment) && !(len & alignment);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blksize_bits(unsigned int size)
{
 unsigned int bits = 8;
 do {
  bits++;
  size >>= 1;
 } while (size > 256);
 return bits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int block_size(struct block_device *bdev)
{
 return 1 << bdev->bd_inode->i_blkbits;
}

int kblockd_schedule_work(struct work_struct *work);
int kblockd_mod_delayed_work_on(int cpu, struct delayed_work *dwork, unsigned long delay);
# 1742 "./include/linux/blkdev.h"
struct bio;
struct block_device;
struct gendisk;
struct blk_integrity;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_integrity_rq(struct request *rq)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_rq_count_integrity_sg(struct request_queue *q,
         struct bio *b)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_rq_map_integrity_sg(struct request_queue *q,
       struct bio *b,
       struct scatterlist *s)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blk_integrity *bdev_get_integrity(struct block_device *b)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blk_integrity *blk_get_integrity(struct gendisk *disk)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
blk_integrity_queue_supports_integrity(struct request_queue *q)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blk_integrity_compare(struct gendisk *a, struct gendisk *b)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_integrity_register(struct gendisk *d,
      struct blk_integrity *b)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_integrity_unregister(struct gendisk *d)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_queue_max_integrity_segments(struct request_queue *q,
          unsigned int segs)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short queue_max_integrity_segments(const struct request_queue *q)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bio_integrity_intervals(struct blk_integrity *bi,
         unsigned int sectors)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int bio_integrity_bytes(struct blk_integrity *bi,
            unsigned int sectors)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *rq_integrity_vec(struct request *rq)
{
 return ((void *)0);
}
# 1822 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_ksm_register(struct blk_keyslot_manager *ksm,
        struct request_queue *q)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_ksm_unregister(struct request_queue *q) { }




struct block_device_operations {
 blk_qc_t (*submit_bio) (struct bio *bio);
 int (*open) (struct block_device *, fmode_t);
 void (*release) (struct gendisk *, fmode_t);
 int (*rw_page)(struct block_device *, sector_t, struct page *, unsigned int);
 int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
 int (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
 unsigned int (*check_events) (struct gendisk *disk,
          unsigned int clearing);
 void (*unlock_native_capacity) (struct gendisk *);
 int (*getgeo)(struct block_device *, struct hd_geometry *);
 int (*set_read_only)(struct block_device *bdev, bool ro);

 void (*swap_slot_free_notify) (struct block_device *, unsigned long);
 int (*report_zones)(struct gendisk *, sector_t sector,
   unsigned int nr_zones, report_zones_cb cb, void *data);
 char *(*devnode)(struct gendisk *disk, umode_t *mode);
 struct module *owner;
 const struct pr_ops *pr_ops;






 int (*alternative_gpt_sector)(struct gendisk *disk, sector_t *sector);
};
# 1868 "./include/linux/blkdev.h"
extern int bdev_read_page(struct block_device *, sector_t, struct page *);
extern int bdev_write_page(struct block_device *, sector_t, struct page *,
      struct writeback_control *);
# 1903 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_req_needs_zone_write_lock(struct request *rq)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_req_zone_write_lock(struct request *rq)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_req_zone_write_unlock(struct request *rq)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_req_zone_is_write_locked(struct request *rq)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_req_can_dispatch_to_zone(struct request *rq)
{
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_wake_io_task(struct task_struct *waiter)
{





 if (waiter == get_current())
  do { do { ({ int __ret_warn_on = !!((((0x0000)) & (0x0004 | 0x0008 | 0x0040 | 0x0080))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/blkdev.h"), "i" (1934), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); get_current()->task_state_change = ({ __label__ __here; __here: (unsigned long)&&__here; }); } while (0); do { do { extern void __compiletime_assert_343(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_343(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = ((0x0000)); } while (0); } while (0); } while (0);
 else
  wake_up_process(waiter);
}

unsigned long disk_start_io_acct(struct gendisk *disk, unsigned int sectors,
  unsigned int op);
void disk_end_io_acct(struct gendisk *disk, unsigned int op,
  unsigned long start_time);

unsigned long bio_start_io_acct(struct bio *bio);
void bio_end_io_acct_remapped(struct bio *bio, unsigned long start_time,
  struct block_device *orig_bdev);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bio_end_io_acct(struct bio *bio, unsigned long start_time)
{
 return bio_end_io_acct_remapped(bio, start_time, bio->bi_bdev);
}

int bdev_read_only(struct block_device *bdev);
int set_blocksize(struct block_device *bdev, int size);

const char *bdevname(struct block_device *bdev, char *buffer);
int lookup_bdev(const char *pathname, dev_t *dev);

void blkdev_show(struct seq_file *seqf, off_t offset);
# 1974 "./include/linux/blkdev.h"
struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
  void *holder);
struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode, void *holder);
int bd_prepare_to_claim(struct block_device *bdev, void *holder);
void bd_abort_claiming(struct block_device *bdev, void *holder);
void blkdev_put(struct block_device *bdev, fmode_t mode);


struct block_device *blkdev_get_no_open(dev_t dev);
void blkdev_put_no_open(struct block_device *bdev);

struct block_device *bdev_alloc(struct gendisk *disk, u8 partno);
void bdev_add(struct block_device *bdev, dev_t dev);
struct block_device *I_BDEV(struct inode *inode);
int truncate_bdev_range(struct block_device *bdev, fmode_t mode, loff_t lstart,
  loff_t lend);


void invalidate_bdev(struct block_device *bdev);
int sync_blockdev(struct block_device *bdev);
# 2003 "./include/linux/blkdev.h"
int fsync_bdev(struct block_device *bdev);

int freeze_bdev(struct block_device *bdev);
int thaw_bdev(struct block_device *bdev);
# 24 "./include/linux/blk-cgroup.h" 2
# 613 "./include/linux/blk-cgroup.h"
struct blkcg {
};

struct blkg_policy_data {
};

struct blkcg_policy_data {
};

struct blkcg_gq {
};

struct blkcg_policy {
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkcg_maybe_throttle_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blk_cgroup_congested(void) { return false; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkcg_schedule_throttle(struct request_queue *q, bool use_memdelay) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blkcg_gq *blkg_lookup(struct blkcg *blkcg, void *key) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blkcg_gq *blk_queue_root_blkg(struct request_queue *q)
{ return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blkcg_init_queue(struct request_queue *q) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkcg_exit_queue(struct request_queue *q) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blkcg_policy_register(struct blkcg_policy *pol) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkcg_policy_unregister(struct blkcg_policy *pol) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blkcg_activate_policy(struct request_queue *q,
     const struct blkcg_policy *pol) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkcg_deactivate_policy(struct request_queue *q,
        const struct blkcg_policy *pol) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blkcg *__bio_blkcg(struct bio *bio) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blkcg *bio_blkcg(struct bio *bio) { return ((void *)0); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blkg_policy_data *blkg_to_pd(struct blkcg_gq *blkg,
        struct blkcg_policy *pol) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct blkcg_gq *pd_to_blkg(struct blkg_policy_data *pd) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *blkg_path(struct blkcg_gq *blkg) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkg_get(struct blkcg_gq *blkg) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkg_put(struct blkcg_gq *blkg) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool blkcg_punt_bio_submit(struct bio *bio) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blkcg_bio_issue_init(struct bio *bio) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void blk_cgroup_bio_start(struct bio *bio) { }
# 723 "./include/linux/blk-cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int blkcg_set_fc_appid(char *buf, u64 id, size_t len) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *blkcg_get_fc_appid(struct bio *bio) { return ((void *)0); }
# 15 "./include/linux/writeback.h" 2

struct bio;

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) dirty_throttle_leaks;
# 36 "./include/linux/writeback.h"
struct backing_dev_info;




enum writeback_sync_modes {
 WB_SYNC_NONE,
 WB_SYNC_ALL,
};






struct writeback_control {
 long nr_to_write;

 long pages_skipped;






 loff_t range_start;
 loff_t range_end;

 enum writeback_sync_modes sync_mode;

 unsigned for_kupdate:1;
 unsigned for_background:1;
 unsigned tagged_writepages:1;
 unsigned for_reclaim:1;
 unsigned range_cyclic:1;
 unsigned for_sync:1;







 unsigned no_cgroup_owner:1;

 unsigned punt_to_cgroup:1;
# 95 "./include/linux/writeback.h"
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int wbc_to_write_flags(struct writeback_control *wbc)
{
 int flags = 0;

 if (wbc->punt_to_cgroup)
  flags = (1ULL << __REQ_CGROUP_PUNT);

 if (wbc->sync_mode == WB_SYNC_ALL)
  flags |= (1ULL << __REQ_SYNC);
 else if (wbc->for_kupdate || wbc->for_background)
  flags |= (1ULL << __REQ_BACKGROUND);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *
wbc_blkcg_css(struct writeback_control *wbc)
{




 return ((struct cgroup_subsys_state *)ERR_PTR(-22));
}
# 129 "./include/linux/writeback.h"
struct wb_domain {
 spinlock_t lock;
# 149 "./include/linux/writeback.h"
 struct fprop_global completions;
 struct timer_list period_timer;
 unsigned long period_time;
# 163 "./include/linux/writeback.h"
 unsigned long dirty_limit_tstamp;
 unsigned long dirty_limit;
};
# 179 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wb_domain_size_changed(struct wb_domain *dom)
{
 spin_lock(&dom->lock);
 dom->dirty_limit_tstamp = jiffies;
 dom->dirty_limit = 0;
 spin_unlock(&dom->lock);
}




struct bdi_writeback;
void writeback_inodes_sb(struct super_block *, enum wb_reason reason);
void writeback_inodes_sb_nr(struct super_block *, unsigned long nr,
       enum wb_reason reason);
void try_to_writeback_inodes_sb(struct super_block *sb, enum wb_reason reason);
void sync_inodes_sb(struct super_block *);
void wakeup_flusher_threads(enum wb_reason reason);
void wakeup_flusher_threads_bdi(struct backing_dev_info *bdi,
    enum wb_reason reason);
void inode_wait_for_writeback(struct inode *inode);
void inode_io_list_del(struct inode *inode);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_on_inode(struct inode *inode)
{
 do { __might_sleep("include/linux/writeback.h", 205, 0); do { } while (0); } while (0);
 wait_on_bit(&inode->i_state, 3, 0x0002);
}
# 297 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_attach_wb(struct inode *inode, struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_detach_wb(struct inode *inode)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_attach_and_unlock_inode(struct writeback_control *wbc,
            struct inode *inode)

{
 spin_unlock(&inode->i_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_attach_fdatawrite_inode(struct writeback_control *wbc,
            struct inode *inode)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_detach_inode(struct writeback_control *wbc)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_init_bio(struct writeback_control *wbc, struct bio *bio)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wbc_account_cgroup_owner(struct writeback_control *wbc,
         struct page *page, size_t bytes)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_writeback_umount(void)
{
}






void laptop_io_completion(struct backing_dev_info *info);
void laptop_sync_completion(void);
void laptop_mode_timer_fn(struct timer_list *t);
bool node_dirty_ok(struct pglist_data *pgdat);
int wb_domain_init(struct wb_domain *dom, gfp_t gfp);




extern struct wb_domain global_wb_domain;


extern int dirty_background_ratio;
extern unsigned long dirty_background_bytes;
extern int vm_dirty_ratio;
extern unsigned long vm_dirty_bytes;
extern unsigned int dirty_writeback_interval;
extern unsigned int dirty_expire_interval;
extern unsigned int dirtytime_expire_interval;
extern int vm_highmem_is_dirtyable;
extern int laptop_mode;

int dirty_background_ratio_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_background_bytes_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_ratio_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_bytes_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirtytime_interval_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_writeback_centisecs_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);

void global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty);
unsigned long wb_calc_thresh(struct bdi_writeback *wb, unsigned long thresh);

void wb_update_bandwidth(struct bdi_writeback *wb);
void balance_dirty_pages_ratelimited(struct address_space *mapping);
bool wb_over_bg_thresh(struct bdi_writeback *wb);

typedef int (*writepage_t)(struct page *page, struct writeback_control *wbc,
    void *data);

int generic_writepages(struct address_space *mapping,
         struct writeback_control *wbc);
void tag_pages_for_writeback(struct address_space *mapping,
        unsigned long start, unsigned long end);
int write_cache_pages(struct address_space *mapping,
        struct writeback_control *wbc, writepage_t writepage,
        void *data);
int do_writepages(struct address_space *mapping, struct writeback_control *wbc);
void writeback_set_ratelimit(void);
void tag_pages_for_writeback(struct address_space *mapping,
        unsigned long start, unsigned long end);

void account_page_redirty(struct page *page);

void sb_mark_inode_writeback(struct inode *inode);
void sb_clear_inode_writeback(struct inode *inode);
# 23 "./include/linux/memcontrol.h" 2


struct mem_cgroup;
struct obj_cgroup;
struct page;
struct mm_struct;
struct kmem_cache;


enum memcg_stat_item {
 MEMCG_SWAP = NR_VM_NODE_STAT_ITEMS,
 MEMCG_SOCK,
 MEMCG_PERCPU_B,
 MEMCG_NR_STAT,
};

enum memcg_memory_event {
 MEMCG_LOW,
 MEMCG_HIGH,
 MEMCG_MAX,
 MEMCG_OOM,
 MEMCG_OOM_KILL,
 MEMCG_SWAP_HIGH,
 MEMCG_SWAP_MAX,
 MEMCG_SWAP_FAIL,
 MEMCG_NR_MEMORY_EVENTS,
};

struct mem_cgroup_reclaim_cookie {
 pg_data_t *pgdat;
 unsigned int generation;
};
# 1118 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg(struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg_rcu(struct page *page)
{
 ({ int __ret_warn_on = !!(!rcu_read_lock_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/memcontrol.h"), "i" (1125), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg_check(struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool PageMemcgKmem(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_is_root(struct mem_cgroup *memcg)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_disabled(void)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_memory_event(struct mem_cgroup *memcg,
          enum memcg_memory_event event)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_memory_event_mm(struct mm_struct *mm,
      enum memcg_memory_event event)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_protection(struct mem_cgroup *root,
      struct mem_cgroup *memcg,
      unsigned long *min,
      unsigned long *low)
{
 *min = *low = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_calculate_protection(struct mem_cgroup *root,
         struct mem_cgroup *memcg)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_below_low(struct mem_cgroup *memcg)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_below_min(struct mem_cgroup *memcg)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_charge(struct page *page, struct mm_struct *mm,
        gfp_t gfp_mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_swapin_charge_page(struct page *page,
   struct mm_struct *mm, gfp_t gfp, swp_entry_t entry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_swapin_uncharge_swap(swp_entry_t entry)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_uncharge(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_uncharge_list(struct list_head *page_list)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_migrate(struct page *old, struct page *new)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *mem_cgroup_lruvec(struct mem_cgroup *memcg,
            struct pglist_data *pgdat)
{
 return &pgdat->__lruvec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *mem_cgroup_page_lruvec(struct page *page)
{
 pg_data_t *pgdat = page_pgdat(page);

 return &pgdat->__lruvec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_memcg_debug(struct lruvec *lruvec, struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_match_cgroup(struct mm_struct *mm,
  struct mem_cgroup *memcg)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *mm)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *css)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_put(struct mem_cgroup *memcg)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *lock_page_lruvec(struct page *page)
{
 struct pglist_data *pgdat = page_pgdat(page);

 spin_lock(&pgdat->__lruvec.lru_lock);
 return &pgdat->__lruvec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *lock_page_lruvec_irq(struct page *page)
{
 struct pglist_data *pgdat = page_pgdat(page);

 spin_lock_irq(&pgdat->__lruvec.lru_lock);
 return &pgdat->__lruvec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *lock_page_lruvec_irqsave(struct page *page,
  unsigned long *flagsp)
{
 struct pglist_data *pgdat = page_pgdat(page);

 do { do { ({ unsigned long __dummy; typeof(*flagsp) __dummy2; (void)(&__dummy == &__dummy2); 1; }); *flagsp = _raw_spin_lock_irqsave(spinlock_check(&pgdat->__lruvec.lru_lock)); } while (0); } while (0);
 return &pgdat->__lruvec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *
mem_cgroup_iter(struct mem_cgroup *root,
  struct mem_cgroup *prev,
  struct mem_cgroup_reclaim_cookie *reclaim)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_iter_break(struct mem_cgroup *root,
      struct mem_cgroup *prev)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_scan_tasks(struct mem_cgroup *memcg,
  int (*fn)(struct task_struct *, void *), void *arg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short mem_cgroup_id(struct mem_cgroup *memcg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *mem_cgroup_from_id(unsigned short id)
{
 ({ int __ret_warn_on = !!(id); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/linux/memcontrol.h"), "i" (1304), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *mem_cgroup_from_seq(struct seq_file *m)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *lruvec_memcg(struct lruvec *lruvec)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_online(struct mem_cgroup *memcg)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long mem_cgroup_get_zone_lru_size(struct lruvec *lruvec,
  enum lru_list lru, int zone_idx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mem_cgroup_get_max(struct mem_cgroup *memcg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mem_cgroup_size(struct mem_cgroup *memcg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mem_cgroup_print_oom_context(struct mem_cgroup *memcg, struct task_struct *p)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mem_cgroup_print_oom_meminfo(struct mem_cgroup *memcg)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_page_memcg(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_memcg(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_handle_over_high(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_enter_user_fault(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_exit_user_fault(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_in_memcg_oom(struct task_struct *p)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_oom_synchronize(bool wait)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *mem_cgroup_get_oom_group(
 struct task_struct *victim, struct mem_cgroup *oom_domain)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_print_oom_group(struct mem_cgroup *memcg)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_memcg_state(struct mem_cgroup *memcg,
         int idx,
         int nr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_memcg_state(struct mem_cgroup *memcg,
       int idx,
       int nr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memcg_page_state(struct mem_cgroup *memcg, int idx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long lruvec_page_state(struct lruvec *lruvec,
           enum node_stat_item idx)
{
 return global_node_page_state(idx);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long lruvec_page_state_local(struct lruvec *lruvec,
          enum node_stat_item idx)
{
 return global_node_page_state(idx);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_flush_stats(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_memcg_lruvec_state(struct lruvec *lruvec,
         enum node_stat_item idx, int val)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_lruvec_kmem_state(void *p, enum node_stat_item idx,
        int val)
{
 struct page *page = virt_to_head_page(p);

 __mod_node_page_state(page_pgdat(page), idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_kmem_state(void *p, enum node_stat_item idx,
      int val)
{
 struct page *page = virt_to_head_page(p);

 mod_node_page_state(page_pgdat(page), idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_memcg_events(struct mem_cgroup *memcg,
          enum vm_event_item idx,
          unsigned long count)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_memcg_events(struct mem_cgroup *memcg,
     enum vm_event_item idx,
     unsigned long count)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_memcg_page_event(struct page *page,
       int idx)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void count_memcg_event_mm(struct mm_struct *mm, enum vm_event_item idx)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void split_page_memcg(struct page *head, unsigned int nr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *pgdat, int order,
         gfp_t gfp_mask,
         unsigned long *total_scanned)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __inc_lruvec_kmem_state(void *p, enum node_stat_item idx)
{
 __mod_lruvec_kmem_state(p, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dec_lruvec_kmem_state(void *p, enum node_stat_item idx)
{
 __mod_lruvec_kmem_state(p, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *parent_lruvec(struct lruvec *lruvec)
{
 struct mem_cgroup *memcg;

 memcg = lruvec_memcg(lruvec);
 if (!memcg)
  return ((void *)0);
 memcg = parent_mem_cgroup(memcg);
 if (!memcg)
  return ((void *)0);
 return mem_cgroup_lruvec(memcg, lruvec_pgdat(lruvec));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_lruvec(struct lruvec *lruvec)
{
 spin_unlock(&lruvec->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_lruvec_irq(struct lruvec *lruvec)
{
 spin_unlock_irq(&lruvec->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_page_lruvec_irqrestore(struct lruvec *lruvec,
  unsigned long flags)
{
 spin_unlock_irqrestore(&lruvec->lru_lock, flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_matches_lruvec(struct page *page, struct lruvec *lruvec)
{
 return lruvec_pgdat(lruvec) == page_pgdat(page) &&
        lruvec_memcg(lruvec) == page_memcg(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *relock_page_lruvec_irq(struct page *page,
  struct lruvec *locked_lruvec)
{
 if (locked_lruvec) {
  if (page_matches_lruvec(page, locked_lruvec))
   return locked_lruvec;

  unlock_page_lruvec_irq(locked_lruvec);
 }

 return lock_page_lruvec_irq(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *relock_page_lruvec_irqsave(struct page *page,
  struct lruvec *locked_lruvec, unsigned long *flags)
{
 if (locked_lruvec) {
  if (page_matches_lruvec(page, locked_lruvec))
   return locked_lruvec;

  unlock_page_lruvec_irqrestore(locked_lruvec, *flags);
 }

 return lock_page_lruvec_irqsave(page, flags);
}
# 1578 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *wb)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_wb_stats(struct bdi_writeback *wb,
           unsigned long *pfilepages,
           unsigned long *pheadroom,
           unsigned long *pdirty,
           unsigned long *pwriteback)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_track_foreign_dirty(struct page *page,
        struct bdi_writeback *wb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_flush_foreign(struct bdi_writeback *wb)
{
}



struct sock;
bool mem_cgroup_charge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages,
        gfp_t gfp_mask);
void mem_cgroup_uncharge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages);
# 1628 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_sk_alloc(struct sock *sk) { };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_sk_free(struct sock *sk) { };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_under_socket_pressure(struct mem_cgroup *memcg)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_shrinker_bit(struct mem_cgroup *memcg,
        int nid, int shrinker_id)
{
}
# 1696 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_kmem_disabled(void)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memcg_kmem_charge_page(struct page *page, gfp_t gfp,
      int order)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_kmem_uncharge_page(struct page *page, int order)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __memcg_kmem_charge_page(struct page *page, gfp_t gfp,
        int order)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __memcg_kmem_uncharge_page(struct page *page, int order)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memcg_kmem_enabled(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memcg_cache_id(struct mem_cgroup *memcg)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_get_cache_ids(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcg_put_cache_ids(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *mem_cgroup_from_obj(void *p)
{
       return ((void *)0);
}
# 10 "./include/linux/swap.h" 2






# 1 "./include/uapi/linux/mempolicy.h" 1
# 19 "./include/uapi/linux/mempolicy.h"
enum {
 MPOL_DEFAULT,
 MPOL_PREFERRED,
 MPOL_BIND,
 MPOL_INTERLEAVE,
 MPOL_LOCAL,
 MPOL_PREFERRED_MANY,
 MPOL_MAX,
};
# 17 "./include/linux/swap.h" 2


struct notifier_block;

struct bio;

struct pagevec;
# 37 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int current_is_kswapd(void)
{
 return get_current()->flags & 0x00020000;
}
# 117 "./include/linux/swap.h"
union swap_header {
 struct {
  char reserved[((1UL) << (12)) - 10];
  char magic[10];
 } magic;
 struct {
  char bootbits[1024];
  __u32 version;
  __u32 last_page;
  __u32 nr_badpages;
  unsigned char sws_uuid[16];
  unsigned char sws_volume[16];
  __u32 padding[117];
  __u32 badpages[1];
 } info;
};





struct reclaim_state {
 unsigned long reclaimed_slab;
};



struct address_space;
struct sysinfo;
struct writeback_control;
struct zone;
# 157 "./include/linux/swap.h"
struct swap_extent {
 struct rb_node rb_node;
 unsigned long start_page;
 unsigned long nr_pages;
 sector_t start_block;
};
# 171 "./include/linux/swap.h"
enum {
 SWP_USED = (1 << 0),
 SWP_WRITEOK = (1 << 1),
 SWP_DISCARDABLE = (1 << 2),
 SWP_DISCARDING = (1 << 3),
 SWP_SOLIDSTATE = (1 << 4),
 SWP_CONTINUED = (1 << 5),
 SWP_BLKDEV = (1 << 6),
 SWP_ACTIVATED = (1 << 7),
 SWP_FS_OPS = (1 << 8),
 SWP_AREA_DISCARD = (1 << 9),
 SWP_PAGE_DISCARD = (1 << 10),
 SWP_STABLE_WRITES = (1 << 11),
 SWP_SYNCHRONOUS_IO = (1 << 12),

 SWP_SCANNING = (1 << 14),
};
# 214 "./include/linux/swap.h"
struct swap_cluster_info {
 spinlock_t lock;





 unsigned int data:24;
 unsigned int flags:8;
};
# 233 "./include/linux/swap.h"
struct percpu_cluster {
 struct swap_cluster_info index;
 unsigned int next;
};

struct swap_cluster_list {
 struct swap_cluster_info head;
 struct swap_cluster_info tail;
};




struct swap_info_struct {
 struct percpu_ref users;
 unsigned long flags;
 signed short prio;
 struct plist_node list;
 signed char type;
 unsigned int max;
 unsigned char *swap_map;
 struct swap_cluster_info *cluster_info;
 struct swap_cluster_list free_clusters;
 unsigned int lowest_bit;
 unsigned int highest_bit;
 unsigned int pages;
 unsigned int inuse_pages;
 unsigned int cluster_next;
 unsigned int cluster_nr;
 unsigned int *cluster_next_cpu;
 struct percpu_cluster *percpu_cluster;
 struct rb_root swap_extent_root;
 struct block_device *bdev;
 struct file *swap_file;
 unsigned int old_block_size;
 struct completion comp;




 spinlock_t lock;
# 286 "./include/linux/swap.h"
 spinlock_t cont_lock;



 struct work_struct discard_work;
 struct swap_cluster_list discard_clusters;
 struct plist_node avail_lists[];
# 302 "./include/linux/swap.h"
};
# 312 "./include/linux/swap.h"
struct vma_swap_readahead {
 unsigned short win;
 unsigned short offset;
 unsigned short nr_pte;

 pte_t *ptes;



};


void workingset_age_nonresident(struct lruvec *lruvec, unsigned long nr_pages);
void *workingset_eviction(struct page *page, struct mem_cgroup *target_memcg);
void workingset_refault(struct page *page, void *shadow);
void workingset_activation(struct page *page);


void workingset_update_node(struct xa_node *node);






extern unsigned long totalreserve_pages;
extern unsigned long nr_free_buffer_pages(void);






extern void lru_note_cost(struct lruvec *lruvec, bool file,
     unsigned int nr_pages);
extern void lru_note_cost_page(struct page *);
extern void lru_cache_add(struct page *);
extern void mark_page_accessed(struct page *);

extern atomic_t lru_disable_count;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lru_cache_disabled(void)
{
 return atomic_read(&lru_disable_count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lru_cache_enable(void)
{
 atomic_dec(&lru_disable_count);
}

extern void lru_cache_disable(void);
extern void lru_add_drain(void);
extern void lru_add_drain_cpu(int cpu);
extern void lru_add_drain_cpu_zone(struct zone *zone);
extern void lru_add_drain_all(void);
extern void rotate_reclaimable_page(struct page *page);
extern void deactivate_file_page(struct page *page);
extern void deactivate_page(struct page *page);
extern void mark_page_lazyfree(struct page *page);
extern void swap_setup(void);

extern void lru_cache_add_inactive_or_unevictable(struct page *page,
      struct vm_area_struct *vma);


extern unsigned long zone_reclaimable_pages(struct zone *zone);
extern unsigned long try_to_free_pages(struct zonelist *zonelist, int order,
     gfp_t gfp_mask, nodemask_t *mask);
extern bool __isolate_lru_page_prepare(struct page *page, isolate_mode_t mode);
extern unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *memcg,
        unsigned long nr_pages,
        gfp_t gfp_mask,
        bool may_swap);
extern unsigned long mem_cgroup_shrink_node(struct mem_cgroup *mem,
      gfp_t gfp_mask, bool noswap,
      pg_data_t *pgdat,
      unsigned long *nr_scanned);
extern unsigned long shrink_all_memory(unsigned long nr_pages);
extern int vm_swappiness;
extern int remove_mapping(struct address_space *mapping, struct page *page);

extern unsigned long reclaim_pages(struct list_head *page_list);
# 403 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool node_reclaim_enabled(void)
{

 return 0 & ((1<<0)|(1<<1)|(1<<2));
}

extern void check_move_unevictable_pages(struct pagevec *pvec);

extern void kswapd_run(int nid);
extern void kswapd_stop(int nid);






extern int swap_readpage(struct page *page, bool do_poll);
extern int swap_writepage(struct page *page, struct writeback_control *wbc);
extern void end_swap_bio_write(struct bio *bio);
extern int __swap_writepage(struct page *page, struct writeback_control *wbc,
 bio_end_io_t end_write_func);
extern int swap_set_page_dirty(struct page *page);

int add_swap_extent(struct swap_info_struct *sis, unsigned long start_page,
  unsigned long nr_pages, sector_t start_block);
int generic_swapfile_activate(struct swap_info_struct *, struct file *,
  sector_t *);





extern struct address_space *swapper_spaces[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long total_swapcache_pages(void)
{
 return global_node_page_state(NR_SWAPCACHE);
}

extern void show_swap_cache_info(void);
extern int add_to_swap(struct page *page);
extern void *get_shadow_from_swap_cache(swp_entry_t entry);
extern int add_to_swap_cache(struct page *page, swp_entry_t entry,
   gfp_t gfp, void **shadowp);
extern void __delete_from_swap_cache(struct page *page,
   swp_entry_t entry, void *shadow);
extern void delete_from_swap_cache(struct page *);
extern void clear_shadow_from_swap_cache(int type, unsigned long begin,
    unsigned long end);
extern void free_swap_cache(struct page *);
extern void free_page_and_swap_cache(struct page *);
extern void free_pages_and_swap_cache(struct page **, int);
extern struct page *lookup_swap_cache(swp_entry_t entry,
          struct vm_area_struct *vma,
          unsigned long addr);
struct page *find_get_incore_page(struct address_space *mapping, unsigned long index);
extern struct page *read_swap_cache_async(swp_entry_t, gfp_t,
   struct vm_area_struct *vma, unsigned long addr,
   bool do_poll);
extern struct page *__read_swap_cache_async(swp_entry_t, gfp_t,
   struct vm_area_struct *vma, unsigned long addr,
   bool *new_page_allocated);
extern struct page *swap_cluster_readahead(swp_entry_t entry, gfp_t flag,
    struct vm_fault *vmf);
extern struct page *swapin_readahead(swp_entry_t entry, gfp_t flag,
    struct vm_fault *vmf);


extern atomic_long_t nr_swap_pages;
extern long total_swap_pages;
extern atomic_t nr_rotate_swap;
extern bool has_usable_swap(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vm_swap_full(void)
{
 return atomic_long_read(&nr_swap_pages) * 2 < total_swap_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long get_nr_swap_pages(void)
{
 return atomic_long_read(&nr_swap_pages);
}

extern void si_swapinfo(struct sysinfo *);
extern swp_entry_t get_swap_page(struct page *page);
extern void put_swap_page(struct page *page, swp_entry_t entry);
extern swp_entry_t get_swap_page_of_type(int);
extern int get_swap_pages(int n, swp_entry_t swp_entries[], int entry_size);
extern int add_swap_count_continuation(swp_entry_t, gfp_t);
extern void swap_shmem_alloc(swp_entry_t);
extern int swap_duplicate(swp_entry_t);
extern int swapcache_prepare(swp_entry_t);
extern void swap_free(swp_entry_t);
extern void swapcache_free_entries(swp_entry_t *entries, int n);
extern int free_swap_and_cache(swp_entry_t);
int swap_type_of(dev_t device, sector_t offset);
int find_first_swap(dev_t *device);
extern unsigned int count_swap_pages(int, int);
extern sector_t swapdev_block(int, unsigned long);
extern int page_swapcount(struct page *);
extern int __swap_count(swp_entry_t entry);
extern int __swp_swapcount(swp_entry_t entry);
extern int swp_swapcount(swp_entry_t entry);
extern struct swap_info_struct *page_swap_info(struct page *);
extern struct swap_info_struct *swp_swap_info(swp_entry_t entry);
extern bool reuse_swap_page(struct page *, int *);
extern int try_to_free_swap(struct page *);
struct backing_dev_info;
extern int init_swap_address_space(unsigned int type, unsigned long nr_pages);
extern void exit_swap_address_space(unsigned int type);
extern struct swap_info_struct *get_swap_device(swp_entry_t entry);
sector_t swap_page_sector(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_swap_device(struct swap_info_struct *si)
{
 percpu_ref_put(&si->users);
}
# 697 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int split_swap_cluster(swp_entry_t entry)
{
 return 0;
}
# 717 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_swappiness(struct mem_cgroup *mem)
{
 return vm_swappiness;
}
# 732 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_throttle_swaprate(struct page *page, gfp_t gfp_mask)
{
}
# 758 "./include/linux/swap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_swapout(struct page *page, swp_entry_t entry)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mem_cgroup_try_charge_swap(struct page *page,
          swp_entry_t entry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mem_cgroup_uncharge_swap(swp_entry_t entry,
         unsigned int nr_pages)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *memcg)
{
 return get_nr_swap_pages();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_cgroup_swap_full(struct page *page)
{
 return vm_swap_full();
}
# 6 "./include/linux/suspend.h" 2




# 1 "./include/linux/freezer.h" 1
# 272 "./include/linux/freezer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool frozen(struct task_struct *p) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool freezing(struct task_struct *p) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __thaw_task(struct task_struct *t) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __refrigerator(bool check_kthr_stop) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int freeze_processes(void) { return -38; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int freeze_kernel_threads(void) { return -38; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void thaw_processes(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void thaw_kernel_threads(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool try_to_freeze(void) { return false; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void freezer_do_not_count(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void freezer_count(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int freezer_should_skip(struct task_struct *p) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_freezable(void) {}
# 11 "./include/linux/suspend.h" 2
# 1 "./arch/riscv/include/generated/uapi/asm/errno.h" 1
# 12 "./include/linux/suspend.h" 2


extern void pm_set_vt_switch(int);
# 25 "./include/linux/suspend.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_prepare_console(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_restore_console(void)
{
}


typedef int suspend_state_t;
# 43 "./include/linux/suspend.h"
enum suspend_stat_step {
 SUSPEND_FREEZE = 1,
 SUSPEND_PREPARE,
 SUSPEND_SUSPEND,
 SUSPEND_SUSPEND_LATE,
 SUSPEND_SUSPEND_NOIRQ,
 SUSPEND_RESUME_NOIRQ,
 SUSPEND_RESUME_EARLY,
 SUSPEND_RESUME
};

struct suspend_stats {
 int success;
 int fail;
 int failed_freeze;
 int failed_prepare;
 int failed_suspend;
 int failed_suspend_late;
 int failed_suspend_noirq;
 int failed_resume;
 int failed_resume_early;
 int failed_resume_noirq;

 int last_failed_dev;
 char failed_devs[2][40];
 int last_failed_errno;
 int errno[2];
 int last_failed_step;
 enum suspend_stat_step failed_steps[2];
};

extern struct suspend_stats suspend_stats;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dpm_save_failed_dev(const char *name)
{
 strlcpy(suspend_stats.failed_devs[suspend_stats.last_failed_dev],
  name,
  sizeof(suspend_stats.failed_devs[0]));
 suspend_stats.last_failed_dev++;
 suspend_stats.last_failed_dev %= 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dpm_save_failed_errno(int err)
{
 suspend_stats.errno[suspend_stats.last_failed_errno] = err;
 suspend_stats.last_failed_errno++;
 suspend_stats.last_failed_errno %= 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dpm_save_failed_step(enum suspend_stat_step step)
{
 suspend_stats.failed_steps[suspend_stats.last_failed_step] = step;
 suspend_stats.last_failed_step++;
 suspend_stats.last_failed_step %= 2;
}
# 177 "./include/linux/suspend.h"
struct platform_suspend_ops {
 int (*valid)(suspend_state_t state);
 int (*begin)(suspend_state_t state);
 int (*prepare)(void);
 int (*prepare_late)(void);
 int (*enter)(suspend_state_t state);
 void (*wake)(void);
 void (*finish)(void);
 bool (*suspend_again)(void);
 void (*end)(void);
 void (*recover)(void);
};

struct platform_s2idle_ops {
 int (*begin)(void);
 int (*prepare)(void);
 int (*prepare_late)(void);
 bool (*wake)(void);
 void (*restore_early)(void);
 void (*restore)(void);
 void (*end)(void);
};
# 336 "./include/linux/suspend.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_suspend_clear_flags(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_set_suspend_via_firmware(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_set_resume_via_firmware(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pm_suspend_via_firmware(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pm_resume_via_firmware(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pm_suspend_no_platform(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pm_suspend_default_s2idle(void) { return false; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void suspend_set_ops(const struct platform_suspend_ops *ops) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pm_suspend(suspend_state_t state) { return -38; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sync_on_suspend_enabled(void) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool idle_should_enter_s2idle(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pm_states_init(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void s2idle_set_ops(const struct platform_s2idle_ops *ops) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void s2idle_wake(void) {}






struct pbe {
 void *address;
 void *orig_address;
 struct pbe *next;
};


extern void mark_free_pages(struct zone *zone);
# 418 "./include/linux/suspend.h"
struct platform_hibernation_ops {
 int (*begin)(pm_message_t stage);
 void (*end)(void);
 int (*pre_snapshot)(void);
 void (*finish)(void);
 int (*prepare)(void);
 int (*enter)(void);
 void (*leave)(void);
 int (*pre_restore)(void);
 void (*restore_cleanup)(void);
 void (*recover)(void);
};
# 459 "./include/linux/suspend.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void register_nosave_region(unsigned long b, unsigned long e) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void register_nosave_region_late(unsigned long b, unsigned long e) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int swsusp_page_is_forbidden(struct page *p) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void swsusp_set_page_free(struct page *p) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void swsusp_unset_page_free(struct page *p) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hibernation_set_ops(const struct platform_hibernation_ops *ops) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hibernate(void) { return -38; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_entering_hibernation(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hibernation_available(void) { return false; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hibernate_quiet_exec(int (*func)(void *data), void *data) {
 return -524;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_hibernate_resume_dev(dev_t dev) { return 0; }
# 489 "./include/linux/suspend.h"
extern struct mutex system_transition_mutex;
# 526 "./include/linux/suspend.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_pm_notifier(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_pm_notifier(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ksys_sync_helper(void) {}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pm_wakeup_pending(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_system_wakeup(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_clear(bool reset) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_system_irq_wakeup(unsigned int irq_number) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_system_sleep(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_system_sleep(void) {}
# 577 "./include/linux/suspend.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queue_up_suspend_work(void) {}
# 36 "./include/linux/regulator/consumer.h" 2

struct device;
struct notifier_block;
struct regmap;
struct regulator_dev;
# 163 "./include/linux/regulator/consumer.h"
struct pre_voltage_change_data {
 unsigned long old_uV;
 unsigned long min_uV;
 unsigned long max_uV;
};

struct regulator;
# 183 "./include/linux/regulator/consumer.h"
struct regulator_bulk_data {
 const char *supply;
 struct regulator *consumer;


 int ret;
};
# 317 "./include/linux/regulator/consumer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regulator *__attribute__((__warn_unused_result__)) regulator_get(struct device *dev,
 const char *id)
{
# 328 "./include/linux/regulator/consumer.h"
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regulator *__attribute__((__warn_unused_result__))
devm_regulator_get(struct device *dev, const char *id)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regulator *__attribute__((__warn_unused_result__))
regulator_get_exclusive(struct device *dev, const char *id)
{
 return ERR_PTR(-19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regulator *__attribute__((__warn_unused_result__))
devm_regulator_get_exclusive(struct device *dev, const char *id)
{
 return ERR_PTR(-19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regulator *__attribute__((__warn_unused_result__))
regulator_get_optional(struct device *dev, const char *id)
{
 return ERR_PTR(-19);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regulator *__attribute__((__warn_unused_result__))
devm_regulator_get_optional(struct device *dev, const char *id)
{
 return ERR_PTR(-19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regulator_put(struct regulator *regulator)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void devm_regulator_put(struct regulator *regulator)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_register_supply_alias(struct device *dev,
        const char *id,
        struct device *alias_dev,
        const char *alias_id)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regulator_unregister_supply_alias(struct device *dev,
          const char *id)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_bulk_register_supply_alias(struct device *dev,
      const char *const *id,
      struct device *alias_dev,
      const char * const *alias_id,
      int num_id)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regulator_bulk_unregister_supply_alias(struct device *dev,
      const char * const *id,
      int num_id)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_regulator_register_supply_alias(struct device *dev,
             const char *id,
             struct device *alias_dev,
             const char *alias_id)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_regulator_bulk_register_supply_alias(struct device *dev,
      const char *const *id,
      struct device *alias_dev,
      const char *const *alias_id,
      int num_id)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_enable(struct regulator *regulator)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_disable(struct regulator *regulator)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_force_disable(struct regulator *regulator)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_disable_deferred(struct regulator *regulator,
          int ms)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_is_enabled(struct regulator *regulator)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_bulk_get(struct device *dev,
         int num_consumers,
         struct regulator_bulk_data *consumers)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_regulator_bulk_get(struct device *dev, int num_consumers,
       struct regulator_bulk_data *consumers)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_bulk_enable(int num_consumers,
     struct regulator_bulk_data *consumers)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_bulk_disable(int num_consumers,
      struct regulator_bulk_data *consumers)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_bulk_force_disable(int num_consumers,
     struct regulator_bulk_data *consumers)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regulator_bulk_free(int num_consumers,
           struct regulator_bulk_data *consumers)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_voltage(struct regulator *regulator,
     int min_uV, int max_uV)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_voltage_time(struct regulator *regulator,
          int old_uV, int new_uV)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_get_voltage(struct regulator *regulator)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_sync_voltage(struct regulator *regulator)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_is_supported_voltage(struct regulator *regulator,
       int min_uV, int max_uV)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int regulator_get_linear_step(struct regulator *regulator)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_current_limit(struct regulator *regulator,
          int min_uA, int max_uA)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_get_current_limit(struct regulator *regulator)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_mode(struct regulator *regulator,
 unsigned int mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int regulator_get_mode(struct regulator *regulator)
{
 return 0x2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_get_error_flags(struct regulator *regulator,
         unsigned int *flags)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_load(struct regulator *regulator, int load_uA)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_allow_bypass(struct regulator *regulator,
      bool allow)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct regmap *regulator_get_regmap(struct regulator *regulator)
{
 return ERR_PTR(-95);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_get_hardware_vsel_register(struct regulator *regulator,
             unsigned *vsel_reg,
             unsigned *vsel_mask)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_list_hardware_vsel(struct regulator *regulator,
            unsigned selector)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_register_notifier(struct regulator *regulator,
         struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_regulator_register_notifier(struct regulator *regulator,
         struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_unregister_notifier(struct regulator *regulator,
    struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_regulator_unregister_notifier(struct regulator *regulator,
           struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_suspend_enable(struct regulator_dev *rdev,
        suspend_state_t state)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_suspend_disable(struct regulator_dev *rdev,
         suspend_state_t state)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_suspend_voltage(struct regulator *regulator,
      int min_uV, int max_uV,
      suspend_state_t state)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *regulator_get_drvdata(struct regulator *regulator)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regulator_set_drvdata(struct regulator *regulator,
 void *data)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_count_voltages(struct regulator *regulator)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_list_voltage(struct regulator *regulator, unsigned selector)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
    const char *const *supply_names,
    unsigned int num_supplies)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
regulator_is_equal(struct regulator *reg1, struct regulator *reg2)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_voltage_triplet(struct regulator *regulator,
      int min_uV, int target_uV,
      int max_uV)
{
 if (regulator_set_voltage(regulator, target_uV, max_uV) == 0)
  return 0;

 return regulator_set_voltage(regulator, min_uV, max_uV);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_set_voltage_tol(struct regulator *regulator,
         int new_uV, int tol_uV)
{
 if (regulator_set_voltage(regulator, new_uV, new_uV + tol_uV) == 0)
  return 0;
 else
  return regulator_set_voltage(regulator,
          new_uV - tol_uV, new_uV + tol_uV);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int regulator_is_supported_voltage_tol(struct regulator *regulator,
           int target_uV, int tol_uV)
{
 return regulator_is_supported_voltage(regulator,
           target_uV - tol_uV,
           target_uV + tol_uV);
}
# 19 "./include/linux/i2c.h" 2




# 1 "./include/uapi/linux/i2c.h" 1
# 73 "./include/uapi/linux/i2c.h"
struct i2c_msg {
 __u16 addr;
 __u16 flags;
# 85 "./include/uapi/linux/i2c.h"
 __u16 len;
 __u8 *buf;
};
# 141 "./include/uapi/linux/i2c.h"
union i2c_smbus_data {
 __u8 byte;
 __u16 word;
 __u8 block[32 + 2];

};
# 24 "./include/linux/i2c.h" 2

extern struct bus_type i2c_bus_type;
extern struct device_type i2c_adapter_type;
extern struct device_type i2c_client_type;



struct i2c_msg;
struct i2c_algorithm;
struct i2c_adapter;
struct i2c_client;
struct i2c_driver;
struct i2c_device_identity;
union i2c_smbus_data;
struct i2c_board_info;
enum i2c_slave_event;
typedef int (*i2c_slave_cb_t)(struct i2c_client *client,
         enum i2c_slave_event event, u8 *val);
# 51 "./include/linux/i2c.h"
struct module;
struct property_entry;



const char *i2c_freq_mode_string(u32 bus_freq_hz);
# 65 "./include/linux/i2c.h"
int i2c_transfer_buffer_flags(const struct i2c_client *client,
         char *buf, int count, u16 flags);
# 76 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_recv(const struct i2c_client *client,
      char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, buf, count, 0x0001);
};
# 91 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_recv_dmasafe(const struct i2c_client *client,
       char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, buf, count,
      0x0001 | 0x0200);
};
# 106 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_send(const struct i2c_client *client,
      const char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, (char *)buf, count, 0);
};
# 121 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_send_dmasafe(const struct i2c_client *client,
       const char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, (char *)buf, count,
      0x0200);
};



int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num);

int __i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num);






s32 i2c_smbus_xfer(struct i2c_adapter *adapter, u16 addr,
     unsigned short flags, char read_write, u8 command,
     int protocol, union i2c_smbus_data *data);


s32 __i2c_smbus_xfer(struct i2c_adapter *adapter, u16 addr,
       unsigned short flags, char read_write, u8 command,
       int protocol, union i2c_smbus_data *data);




u8 i2c_smbus_pec(u8 crc, u8 *p, size_t count);
s32 i2c_smbus_read_byte(const struct i2c_client *client);
s32 i2c_smbus_write_byte(const struct i2c_client *client, u8 value);
s32 i2c_smbus_read_byte_data(const struct i2c_client *client, u8 command);
s32 i2c_smbus_write_byte_data(const struct i2c_client *client,
         u8 command, u8 value);
s32 i2c_smbus_read_word_data(const struct i2c_client *client, u8 command);
s32 i2c_smbus_write_word_data(const struct i2c_client *client,
         u8 command, u16 value);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s32
i2c_smbus_read_word_swapped(const struct i2c_client *client, u8 command)
{
 s32 value = i2c_smbus_read_word_data(client, command);

 return (value < 0) ? value : (__builtin_constant_p((__u16)(value)) ? ((__u16)( (((__u16)(value) & (__u16)0x00ffU) << 8) | (((__u16)(value) & (__u16)0xff00U) >> 8))) : __fswab16(value));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s32
i2c_smbus_write_word_swapped(const struct i2c_client *client,
        u8 command, u16 value)
{
 return i2c_smbus_write_word_data(client, command, (__builtin_constant_p((__u16)(value)) ? ((__u16)( (((__u16)(value) & (__u16)0x00ffU) << 8) | (((__u16)(value) & (__u16)0xff00U) >> 8))) : __fswab16(value)));
}


s32 i2c_smbus_read_block_data(const struct i2c_client *client,
         u8 command, u8 *values);
s32 i2c_smbus_write_block_data(const struct i2c_client *client,
          u8 command, u8 length, const u8 *values);

s32 i2c_smbus_read_i2c_block_data(const struct i2c_client *client,
      u8 command, u8 length, u8 *values);
s32 i2c_smbus_write_i2c_block_data(const struct i2c_client *client,
       u8 command, u8 length, const u8 *values);
s32 i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *client,
           u8 command, u8 length,
           u8 *values);
int i2c_get_device_id(const struct i2c_client *client,
        struct i2c_device_identity *id);
# 199 "./include/linux/i2c.h"
struct i2c_device_identity {
 u16 manufacturer_id;
# 216 "./include/linux/i2c.h"
 u16 part_id;
 u8 die_revision;
};

enum i2c_alert_protocol {
 I2C_PROTOCOL_SMBUS_ALERT,
 I2C_PROTOCOL_SMBUS_HOST_NOTIFY,
};
# 260 "./include/linux/i2c.h"
struct i2c_driver {
 unsigned int class;


 int (*probe)(struct i2c_client *client, const struct i2c_device_id *id);
 int (*remove)(struct i2c_client *client);




 int (*probe_new)(struct i2c_client *client);


 void (*shutdown)(struct i2c_client *client);
# 282 "./include/linux/i2c.h"
 void (*alert)(struct i2c_client *client, enum i2c_alert_protocol protocol,
        unsigned int data);




 int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);

 struct device_driver driver;
 const struct i2c_device_id *id_table;


 int (*detect)(struct i2c_client *client, struct i2c_board_info *info);
 const unsigned short *address_list;
 struct list_head clients;
};
# 321 "./include/linux/i2c.h"
struct i2c_client {
 unsigned short flags;
# 332 "./include/linux/i2c.h"
 unsigned short addr;


 char name[20];
 struct i2c_adapter *adapter;
 struct device dev;
 int init_irq;
 int irq;
 struct list_head detected;



 void *devres_group_id;
};


struct i2c_adapter *i2c_verify_adapter(struct device *dev);
const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,
      const struct i2c_client *client);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct i2c_client *kobj_to_i2c_client(struct kobject *kobj)
{
 struct device * const dev = kobj_to_dev(kobj);
 return ({ void *__mptr = (void *)(dev); do { extern void __compiletime_assert_344(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(dev)), typeof(((struct i2c_client *)0)->dev)) && !__builtin_types_compatible_p(typeof(*(dev)), typeof(void))))) __compiletime_assert_344(); } while (0); ((struct i2c_client *)(__mptr - __builtin_offsetof(struct i2c_client, dev))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *i2c_get_clientdata(const struct i2c_client *client)
{
 return dev_get_drvdata(&client->dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_set_clientdata(struct i2c_client *client, void *data)
{
 dev_set_drvdata(&client->dev, data);
}
# 389 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool i2c_detect_slave_mode(struct device *dev) { return false; }
# 417 "./include/linux/i2c.h"
struct i2c_board_info {
 char type[20];
 unsigned short flags;
 unsigned short addr;
 const char *dev_name;
 void *platform_data;
 struct device_node *of_node;
 struct fwnode_handle *fwnode;
 const struct software_node *swnode;
 const struct resource *resources;
 unsigned int num_resources;
 int irq;
};
# 451 "./include/linux/i2c.h"
struct i2c_client *
i2c_new_client_device(struct i2c_adapter *adap, struct i2c_board_info const *info);







struct i2c_client *
i2c_new_scanned_device(struct i2c_adapter *adap,
         struct i2c_board_info *info,
         unsigned short const *addr_list,
         int (*probe)(struct i2c_adapter *adap, unsigned short addr));


int i2c_probe_func_quick_read(struct i2c_adapter *adap, unsigned short addr);

struct i2c_client *
i2c_new_dummy_device(struct i2c_adapter *adapter, u16 address);

struct i2c_client *
devm_i2c_new_dummy_device(struct device *dev, struct i2c_adapter *adap, u16 address);

struct i2c_client *
i2c_new_ancillary_device(struct i2c_client *client,
    const char *name,
    u16 default_addr);

void i2c_unregister_device(struct i2c_client *client);

struct i2c_client *i2c_verify_client(struct device *dev);
# 495 "./include/linux/i2c.h"
int
i2c_register_board_info(int busnum, struct i2c_board_info const *info,
   unsigned n);
# 533 "./include/linux/i2c.h"
struct i2c_algorithm {
# 543 "./include/linux/i2c.h"
 int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs,
      int num);
 int (*master_xfer_atomic)(struct i2c_adapter *adap,
       struct i2c_msg *msgs, int num);
 int (*smbus_xfer)(struct i2c_adapter *adap, u16 addr,
     unsigned short flags, char read_write,
     u8 command, int size, union i2c_smbus_data *data);
 int (*smbus_xfer_atomic)(struct i2c_adapter *adap, u16 addr,
     unsigned short flags, char read_write,
     u8 command, int size, union i2c_smbus_data *data);


 u32 (*functionality)(struct i2c_adapter *adap);





};
# 571 "./include/linux/i2c.h"
struct i2c_lock_operations {
 void (*lock_bus)(struct i2c_adapter *adapter, unsigned int flags);
 int (*trylock_bus)(struct i2c_adapter *adapter, unsigned int flags);
 void (*unlock_bus)(struct i2c_adapter *adapter, unsigned int flags);
};
# 590 "./include/linux/i2c.h"
struct i2c_timings {
 u32 bus_freq_hz;
 u32 scl_rise_ns;
 u32 scl_fall_ns;
 u32 scl_int_delay_ns;
 u32 sda_fall_ns;
 u32 sda_hold_ns;
 u32 digital_filter_width_ns;
 u32 analog_filter_cutoff_freq_hz;
};
# 632 "./include/linux/i2c.h"
struct i2c_bus_recovery_info {
 int (*recover_bus)(struct i2c_adapter *adap);

 int (*get_scl)(struct i2c_adapter *adap);
 void (*set_scl)(struct i2c_adapter *adap, int val);
 int (*get_sda)(struct i2c_adapter *adap);
 void (*set_sda)(struct i2c_adapter *adap, int val);
 int (*get_bus_free)(struct i2c_adapter *adap);

 void (*prepare_recovery)(struct i2c_adapter *adap);
 void (*unprepare_recovery)(struct i2c_adapter *adap);


 struct gpio_desc *scl_gpiod;
 struct gpio_desc *sda_gpiod;
 struct pinctrl *pinctrl;
 struct pinctrl_state *pins_default;
 struct pinctrl_state *pins_gpio;
};

int i2c_recover_bus(struct i2c_adapter *adap);


int i2c_generic_scl_recovery(struct i2c_adapter *adap);
# 678 "./include/linux/i2c.h"
struct i2c_adapter_quirks {
 u64 flags;
 int max_num_msgs;
 u16 max_write_len;
 u16 max_read_len;
 u16 max_comb_1st_msg_len;
 u16 max_comb_2nd_msg_len;
};
# 711 "./include/linux/i2c.h"
struct i2c_adapter {
 struct module *owner;
 unsigned int class;
 const struct i2c_algorithm *algo;
 void *algo_data;


 const struct i2c_lock_operations *lock_ops;
 struct rt_mutex bus_lock;
 struct rt_mutex mux_lock;

 int timeout;
 int retries;
 struct device dev;
 unsigned long locked_flags;



 int nr;
 char name[48];
 struct completion dev_released;

 struct mutex userspace_clients_lock;
 struct list_head userspace_clients;

 struct i2c_bus_recovery_info *bus_recovery_info;
 const struct i2c_adapter_quirks *quirks;

 struct irq_domain *host_notify_domain;
 struct regulator *bus_regulator;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *i2c_get_adapdata(const struct i2c_adapter *adap)
{
 return dev_get_drvdata(&adap->dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_set_adapdata(struct i2c_adapter *adap, void *data)
{
 dev_set_drvdata(&adap->dev, data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct i2c_adapter *
i2c_parent_is_i2c_adapter(const struct i2c_adapter *adapter)
{







  return ((void *)0);
}

int i2c_for_each_dev(void *data, int (*fn)(struct device *dev, void *data));
# 779 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
i2c_lock_bus(struct i2c_adapter *adapter, unsigned int flags)
{
 adapter->lock_ops->lock_bus(adapter, flags);
}
# 793 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
i2c_trylock_bus(struct i2c_adapter *adapter, unsigned int flags)
{
 return adapter->lock_ops->trylock_bus(adapter, flags);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
i2c_unlock_bus(struct i2c_adapter *adapter, unsigned int flags)
{
 adapter->lock_ops->unlock_bus(adapter, flags);
}
# 821 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_mark_adapter_suspended(struct i2c_adapter *adap)
{
 i2c_lock_bus(adap, ((((1UL))) << (0)));
 set_bit(0, &adap->locked_flags);
 i2c_unlock_bus(adap, ((((1UL))) << (0)));
}
# 836 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_mark_adapter_resumed(struct i2c_adapter *adap)
{
 i2c_lock_bus(adap, ((((1UL))) << (0)));
 clear_bit(0, &adap->locked_flags);
 i2c_unlock_bus(adap, ((((1UL))) << (0)));
}
# 863 "./include/linux/i2c.h"
int i2c_add_adapter(struct i2c_adapter *adap);
int devm_i2c_add_adapter(struct device *dev, struct i2c_adapter *adapter);
void i2c_del_adapter(struct i2c_adapter *adap);
int i2c_add_numbered_adapter(struct i2c_adapter *adap);

int i2c_register_driver(struct module *owner, struct i2c_driver *driver);
void i2c_del_driver(struct i2c_driver *driver);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool i2c_client_has_driver(struct i2c_client *client)
{
 return !IS_ERR_OR_NULL(client) && client->dev.driver;
}



void i2c_clients_command(struct i2c_adapter *adap,
    unsigned int cmd, void *arg);

struct i2c_adapter *i2c_get_adapter(int nr);
void i2c_put_adapter(struct i2c_adapter *adap);
unsigned int i2c_adapter_depth(struct i2c_adapter *adapter);

void i2c_parse_fw_timings(struct device *dev, struct i2c_timings *t, bool use_defaults);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 i2c_get_functionality(struct i2c_adapter *adap)
{
 return adap->algo->functionality(adap);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_check_functionality(struct i2c_adapter *adap, u32 func)
{
 return (func & i2c_get_functionality(adap)) == func;
}
# 910 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool i2c_check_quirks(struct i2c_adapter *adap, u64 quirks)
{
 if (!adap->quirks)
  return false;
 return (adap->quirks->flags & quirks) == quirks;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_adapter_id(struct i2c_adapter *adap)
{
 return adap->nr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 i2c_8bit_addr_from_msg(const struct i2c_msg *msg)
{
 return (msg->addr << 1) | (msg->flags & 0x0001 ? 1 : 0);
}

u8 *i2c_get_dma_safe_msg_buf(struct i2c_msg *msg, unsigned int threshold);
void i2c_put_dma_safe_msg_buf(u8 *buf, struct i2c_msg *msg, bool xferred);

int i2c_handle_smbus_host_notify(struct i2c_adapter *adap, unsigned short addr);
# 959 "./include/linux/i2c.h"
struct i2c_client *of_find_i2c_device_by_node(struct device_node *node);


struct i2c_adapter *of_find_i2c_adapter_by_node(struct device_node *node);


struct i2c_adapter *of_get_i2c_adapter_by_node(struct device_node *node);

const struct of_device_id
*i2c_of_match_device(const struct of_device_id *matches,
       struct i2c_client *client);

int of_i2c_get_board_info(struct device *dev, struct device_node *node,
     struct i2c_board_info *info);
# 1007 "./include/linux/i2c.h"
struct acpi_resource;
struct acpi_resource_i2c_serialbus;
# 1019 "./include/linux/i2c.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool i2c_acpi_get_i2c_resource(struct acpi_resource *ares,
          struct acpi_resource_i2c_serialbus **i2c)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_acpi_client_count(struct acpi_device *adev)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 i2c_acpi_find_bus_speed(struct device *dev)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct i2c_client *i2c_acpi_new_device(struct device *dev,
     int index, struct i2c_board_info *info)
{
 return ERR_PTR(-19);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct i2c_adapter *i2c_acpi_find_adapter_by_handle(acpi_handle handle)
{
 return ((void *)0);
}
# 29 "./include/drm/drm_crtc.h" 2


# 1 "./include/linux/fb.h" 1






# 1 "./include/uapi/linux/fb.h" 1
# 157 "./include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
 char id[16];
 unsigned long smem_start;

 __u32 smem_len;
 __u32 type;
 __u32 type_aux;
 __u32 visual;
 __u16 xpanstep;
 __u16 ypanstep;
 __u16 ywrapstep;
 __u32 line_length;
 unsigned long mmio_start;

 __u32 mmio_len;
 __u32 accel;

 __u16 capabilities;
 __u16 reserved[2];
};
# 188 "./include/uapi/linux/fb.h"
struct fb_bitfield {
 __u32 offset;
 __u32 length;
 __u32 msb_right;

};
# 242 "./include/uapi/linux/fb.h"
struct fb_var_screeninfo {
 __u32 xres;
 __u32 yres;
 __u32 xres_virtual;
 __u32 yres_virtual;
 __u32 xoffset;
 __u32 yoffset;

 __u32 bits_per_pixel;
 __u32 grayscale;

 struct fb_bitfield red;
 struct fb_bitfield green;
 struct fb_bitfield blue;
 struct fb_bitfield transp;

 __u32 nonstd;

 __u32 activate;

 __u32 height;
 __u32 width;

 __u32 accel_flags;


 __u32 pixclock;
 __u32 left_margin;
 __u32 right_margin;
 __u32 upper_margin;
 __u32 lower_margin;
 __u32 hsync_len;
 __u32 vsync_len;
 __u32 sync;
 __u32 vmode;
 __u32 rotate;
 __u32 colorspace;
 __u32 reserved[4];
};

struct fb_cmap {
 __u32 start;
 __u32 len;
 __u16 *red;
 __u16 *green;
 __u16 *blue;
 __u16 *transp;
};

struct fb_con2fbmap {
 __u32 console;
 __u32 framebuffer;
};
# 303 "./include/uapi/linux/fb.h"
enum {

 FB_BLANK_UNBLANK = 0,


 FB_BLANK_NORMAL = 0 + 1,


 FB_BLANK_VSYNC_SUSPEND = 1 + 1,


 FB_BLANK_HSYNC_SUSPEND = 2 + 1,


 FB_BLANK_POWERDOWN = 3 + 1
};
# 330 "./include/uapi/linux/fb.h"
struct fb_vblank {
 __u32 flags;
 __u32 count;
 __u32 vcount;
 __u32 hcount;
 __u32 reserved[4];
};





struct fb_copyarea {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 sx;
 __u32 sy;
};

struct fb_fillrect {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 color;
 __u32 rop;
};

struct fb_image {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 fg_color;
 __u32 bg_color;
 __u8 depth;
 const char *data;
 struct fb_cmap cmap;
};
# 384 "./include/uapi/linux/fb.h"
struct fbcurpos {
 __u16 x, y;
};

struct fb_cursor {
 __u16 set;
 __u16 enable;
 __u16 rop;
 const char *mask;
 struct fbcurpos hot;
 struct fb_image image;
};
# 8 "./include/linux/fb.h" 2








# 1 "./include/linux/backlight.h" 1
# 13 "./include/linux/backlight.h"
# 1 "./include/linux/fb.h" 1
# 14 "./include/linux/backlight.h" 2
# 23 "./include/linux/backlight.h"
enum backlight_update_reason {



 BACKLIGHT_UPDATE_HOTKEY,




 BACKLIGHT_UPDATE_SYSFS,
};






enum backlight_type {





 BACKLIGHT_RAW = 1,






 BACKLIGHT_PLATFORM,






 BACKLIGHT_FIRMWARE,




 BACKLIGHT_TYPE_MAX,
};







enum backlight_notification {



 BACKLIGHT_REGISTERED,




 BACKLIGHT_UNREGISTERED,
};





enum backlight_scale {



 BACKLIGHT_SCALE_UNKNOWN = 0,






 BACKLIGHT_SCALE_LINEAR,







 BACKLIGHT_SCALE_NON_LINEAR,
};

struct backlight_device;
struct fb_info;






struct backlight_ops {







 unsigned int options;
# 146 "./include/linux/backlight.h"
 int (*update_status)(struct backlight_device *);
# 160 "./include/linux/backlight.h"
 int (*get_brightness)(struct backlight_device *);
# 174 "./include/linux/backlight.h"
 int (*check_fb)(struct backlight_device *bd, struct fb_info *info);
};






struct backlight_properties {
# 194 "./include/linux/backlight.h"
 int brightness;
# 203 "./include/linux/backlight.h"
 int max_brightness;
# 219 "./include/linux/backlight.h"
 int power;
# 238 "./include/linux/backlight.h"
 int fb_blank;
# 249 "./include/linux/backlight.h"
 enum backlight_type type;
# 264 "./include/linux/backlight.h"
 unsigned int state;







 enum backlight_scale scale;
};






struct backlight_device {



 struct backlight_properties props;
# 294 "./include/linux/backlight.h"
 struct mutex update_lock;
# 303 "./include/linux/backlight.h"
 struct mutex ops_lock;
# 312 "./include/linux/backlight.h"
 const struct backlight_ops *ops;




 struct notifier_block fb_notif;




 struct list_head entry;




 struct device dev;







 bool fb_bl_on[32];




 int use_count;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_update_status(struct backlight_device *bd)
{
 int ret = -2;

 mutex_lock(&bd->update_lock);
 if (bd->ops && bd->ops->update_status)
  ret = bd->ops->update_status(bd);
 mutex_unlock(&bd->update_lock);

 return ret;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_enable(struct backlight_device *bd)
{
 if (!bd)
  return 0;

 bd->props.power = FB_BLANK_UNBLANK;
 bd->props.fb_blank = FB_BLANK_UNBLANK;
 bd->props.state &= ~(1 << 1);

 return backlight_update_status(bd);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_disable(struct backlight_device *bd)
{
 if (!bd)
  return 0;

 bd->props.power = FB_BLANK_POWERDOWN;
 bd->props.fb_blank = FB_BLANK_POWERDOWN;
 bd->props.state |= (1 << 1);

 return backlight_update_status(bd);
}
# 403 "./include/linux/backlight.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool backlight_is_blank(const struct backlight_device *bd)
{
 return bd->props.power != FB_BLANK_UNBLANK ||
        bd->props.fb_blank != FB_BLANK_UNBLANK ||
        bd->props.state & ((1 << 0) | (1 << 1));
}
# 421 "./include/linux/backlight.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_get_brightness(const struct backlight_device *bd)
{
 if (backlight_is_blank(bd))
  return 0;
 else
  return bd->props.brightness;
}

struct backlight_device *
backlight_device_register(const char *name, struct device *dev, void *devdata,
     const struct backlight_ops *ops,
     const struct backlight_properties *props);
struct backlight_device *
devm_backlight_device_register(struct device *dev, const char *name,
          struct device *parent, void *devdata,
          const struct backlight_ops *ops,
          const struct backlight_properties *props);
void backlight_device_unregister(struct backlight_device *bd);
void devm_backlight_device_unregister(struct device *dev,
          struct backlight_device *bd);
void backlight_force_update(struct backlight_device *bd,
       enum backlight_update_reason reason);
int backlight_register_notifier(struct notifier_block *nb);
int backlight_unregister_notifier(struct notifier_block *nb);
struct backlight_device *backlight_device_get_by_name(const char *name);
struct backlight_device *backlight_device_get_by_type(enum backlight_type type);
int backlight_device_set_brightness(struct backlight_device *bd,
        unsigned long brightness);
# 464 "./include/linux/backlight.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * bl_get_data(struct backlight_device *bl_dev)
{
 return dev_get_drvdata(&bl_dev->dev);
}


struct backlight_device *of_find_backlight_by_node(struct device_node *node);
# 480 "./include/linux/backlight.h"
struct backlight_device *devm_of_find_backlight(struct device *dev);
# 17 "./include/linux/fb.h" 2



struct vm_area_struct;
struct fb_info;
struct device;
struct file;
struct videomode;
struct device_node;
# 53 "./include/linux/fb.h"
struct fb_chroma {
 __u32 redx;
 __u32 greenx;
 __u32 bluex;
 __u32 whitex;
 __u32 redy;
 __u32 greeny;
 __u32 bluey;
 __u32 whitey;
};

struct fb_monspecs {
 struct fb_chroma chroma;
 struct fb_videomode *modedb;
 __u8 manufacturer[4];
 __u8 monitor[14];
 __u8 serial_no[14];
 __u8 ascii[14];
 __u32 modedb_len;
 __u32 model;
 __u32 serial;
 __u32 year;
 __u32 week;
 __u32 hfmin;
 __u32 hfmax;
 __u32 dclkmin;
 __u32 dclkmax;
 __u16 input;
 __u16 dpms;
 __u16 signal;
 __u16 vfmin;
 __u16 vfmax;
 __u16 gamma;
 __u16 gtf : 1;
 __u16 misc;
 __u8 version;
 __u8 revision;
 __u8 max_x;
 __u8 max_y;
};

struct fb_cmap_user {
 __u32 start;
 __u32 len;
 __u16 *red;
 __u16 *green;
 __u16 *blue;
 __u16 *transp;
};

struct fb_image_user {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 fg_color;
 __u32 bg_color;
 __u8 depth;
 const char *data;
 struct fb_cmap_user cmap;
};

struct fb_cursor_user {
 __u16 set;
 __u16 enable;
 __u16 rop;
 const char *mask;
 struct fbcurpos hot;
 struct fb_image_user image;
};
# 140 "./include/linux/fb.h"
struct fb_event {
 struct fb_info *info;
 void *data;
};

struct fb_blit_caps {
 u32 x;
 u32 y;
 u32 len;
 u32 flags;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fb_register_client(struct notifier_block *nb)
{
 return 0;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fb_unregister_client(struct notifier_block *nb)
{
 return 0;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fb_notifier_call_chain(unsigned long val, void *v)
{
 return 0;
};
# 186 "./include/linux/fb.h"
struct fb_pixmap {
 u8 *addr;
 u32 size;
 u32 offset;
 u32 buf_align;
 u32 scan_align;
 u32 access_align;
 u32 flags;
 u32 blit_x;
 u32 blit_y;



 void (*writeio)(struct fb_info *info, void *dst, void *src, unsigned int size);
 void (*readio) (struct fb_info *info, void *dst, void *src, unsigned int size);
};
# 229 "./include/linux/fb.h"
struct fb_ops {

 struct module *owner;
 int (*fb_open)(struct fb_info *info, int user);
 int (*fb_release)(struct fb_info *info, int user);




 ssize_t (*fb_read)(struct fb_info *info, char *buf,
      size_t count, loff_t *ppos);
 ssize_t (*fb_write)(struct fb_info *info, const char *buf,
       size_t count, loff_t *ppos);



 int (*fb_check_var)(struct fb_var_screeninfo *var, struct fb_info *info);


 int (*fb_set_par)(struct fb_info *info);


 int (*fb_setcolreg)(unsigned regno, unsigned red, unsigned green,
       unsigned blue, unsigned transp, struct fb_info *info);


 int (*fb_setcmap)(struct fb_cmap *cmap, struct fb_info *info);


 int (*fb_blank)(int blank, struct fb_info *info);


 int (*fb_pan_display)(struct fb_var_screeninfo *var, struct fb_info *info);


 void (*fb_fillrect) (struct fb_info *info, const struct fb_fillrect *rect);

 void (*fb_copyarea) (struct fb_info *info, const struct fb_copyarea *region);

 void (*fb_imageblit) (struct fb_info *info, const struct fb_image *image);


 int (*fb_cursor) (struct fb_info *info, struct fb_cursor *cursor);


 int (*fb_sync)(struct fb_info *info);


 int (*fb_ioctl)(struct fb_info *info, unsigned int cmd,
   unsigned long arg);


 int (*fb_compat_ioctl)(struct fb_info *info, unsigned cmd,
   unsigned long arg);


 int (*fb_mmap)(struct fb_info *info, struct vm_area_struct *vma);


 void (*fb_get_caps)(struct fb_info *info, struct fb_blit_caps *caps,
       struct fb_var_screeninfo *var);


 void (*fb_destroy)(struct fb_info *info);


 int (*fb_debug_enter)(struct fb_info *info);
 int (*fb_debug_leave)(struct fb_info *info);
};
# 438 "./include/linux/fb.h"
struct fb_info {
 refcount_t count;
 int node;
 int flags;




 int fbcon_rotate_hint;
 struct mutex lock;
 struct mutex mm_lock;
 struct fb_var_screeninfo var;
 struct fb_fix_screeninfo fix;
 struct fb_monspecs monspecs;
 struct work_struct queue;
 struct fb_pixmap pixmap;
 struct fb_pixmap sprite;
 struct fb_cmap cmap;
 struct list_head modelist;
 struct fb_videomode *mode;
# 474 "./include/linux/fb.h"
 const struct fb_ops *fbops;
 struct device *device;
 struct device *dev;
 int class_flag;



 union {
  char *screen_base;
  char *screen_buffer;
 };
 unsigned long screen_size;
 void *pseudo_palette;


 u32 state;
 void *fbcon_par;

 void *par;



 struct apertures_struct {
  unsigned int count;
  struct aperture {
   resource_size_t base;
   resource_size_t size;
  } ranges[0];
 } *apertures;

 bool skip_vt_switch;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct apertures_struct *alloc_apertures(unsigned int max_num) {
 struct apertures_struct *a;

 a = kzalloc(__ab_c_size(max_num, sizeof(*(a)->ranges) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof(((a)->ranges)), typeof(&((a)->ranges)[0])))); }))), sizeof(*(a))), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!a)
  return ((void *)0);
 a->count = max_num;
 return a;
}
# 589 "./include/linux/fb.h"
extern int fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var);
extern int fb_pan_display(struct fb_info *info, struct fb_var_screeninfo *var);
extern int fb_blank(struct fb_info *info, int blank);
extern void cfb_fillrect(struct fb_info *info, const struct fb_fillrect *rect);
extern void cfb_copyarea(struct fb_info *info, const struct fb_copyarea *area);
extern void cfb_imageblit(struct fb_info *info, const struct fb_image *image);



extern void sys_fillrect(struct fb_info *info, const struct fb_fillrect *rect);
extern void sys_copyarea(struct fb_info *info, const struct fb_copyarea *area);
extern void sys_imageblit(struct fb_info *info, const struct fb_image *image);
extern ssize_t fb_sys_read(struct fb_info *info, char *buf,
      size_t count, loff_t *ppos);
extern ssize_t fb_sys_write(struct fb_info *info, const char *buf,
       size_t count, loff_t *ppos);


extern int register_framebuffer(struct fb_info *fb_info);
extern void unregister_framebuffer(struct fb_info *fb_info);
extern int remove_conflicting_pci_framebuffers(struct pci_dev *pdev,
            const char *name);
extern int remove_conflicting_framebuffers(struct apertures_struct *a,
        const char *name, bool primary);
extern int fb_prepare_logo(struct fb_info *fb_info, int rotate);
extern int fb_show_logo(struct fb_info *fb_info, int rotate);
extern char* fb_get_buffer_offset(struct fb_info *info, struct fb_pixmap *buf, u32 size);
extern void fb_pad_unaligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 idx,
    u32 height, u32 shift_high, u32 shift_low, u32 mod);
extern void fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height);
extern void fb_set_suspend(struct fb_info *info, int state);
extern int fb_get_color_depth(struct fb_var_screeninfo *var,
         struct fb_fix_screeninfo *fix);
extern int fb_get_options(const char *name, char **option);
extern int fb_new_modelist(struct fb_info *info);

extern struct fb_info *registered_fb[32];
extern int num_registered_fb;
extern bool fb_center_logo;
extern int fb_logo_count;
extern struct class *fb_class;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_fb_info(struct fb_info *info)
{
 mutex_lock(&info->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_fb_info(struct fb_info *info)
{
 mutex_unlock(&info->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fb_pad_aligned_buffer(u8 *dst, u32 d_pitch,
        u8 *src, u32 s_pitch, u32 height)
{
 u32 i, j;

 d_pitch -= s_pitch;

 for (i = height; i--; ) {

  for (j = 0; j < s_pitch; j++)
   *dst++ = *src++;
  dst += d_pitch;
 }
}


int fb_deferred_io_mmap(struct fb_info *info, struct vm_area_struct *vma);
extern void fb_deferred_io_init(struct fb_info *info);
extern void fb_deferred_io_open(struct fb_info *info,
    struct inode *inode,
    struct file *file);
extern void fb_deferred_io_cleanup(struct fb_info *info);
extern int fb_deferred_io_fsync(struct file *file, loff_t start,
    loff_t end, int datasync);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fb_be_math(struct fb_info *info)
{
# 684 "./include/linux/fb.h"
 return false;


}


extern struct fb_info *framebuffer_alloc(size_t size, struct device *dev);
extern void framebuffer_release(struct fb_info *info);
extern int fb_init_device(struct fb_info *fb_info);
extern void fb_cleanup_device(struct fb_info *head);
extern void fb_bl_default_curve(struct fb_info *fb_info, u8 off, u8 min, u8 max);
# 711 "./include/linux/fb.h"
extern int fbmon_dpms(const struct fb_info *fb_info);
extern int fb_get_mode(int flags, u32 val, struct fb_var_screeninfo *var,
         struct fb_info *info);
extern int fb_validate_mode(const struct fb_var_screeninfo *var,
       struct fb_info *info);
extern int fb_parse_edid(unsigned char *edid, struct fb_var_screeninfo *var);
extern const unsigned char *fb_firmware_edid(struct device *device);
extern void fb_edid_to_monspecs(unsigned char *edid,
    struct fb_monspecs *specs);
extern void fb_destroy_modedb(struct fb_videomode *modedb);
extern int fb_find_mode_cvt(struct fb_videomode *mode, int margins, int rb);
extern unsigned char *fb_ddc_read(struct i2c_adapter *adapter);

extern int of_get_fb_videomode(struct device_node *np,
          struct fb_videomode *fb,
          int index);
extern int fb_videomode_from_videomode(const struct videomode *vm,
           struct fb_videomode *fbmode);





extern void fb_var_to_videomode(struct fb_videomode *mode,
    const struct fb_var_screeninfo *var);
extern void fb_videomode_to_var(struct fb_var_screeninfo *var,
    const struct fb_videomode *mode);
extern int fb_mode_is_equal(const struct fb_videomode *mode1,
       const struct fb_videomode *mode2);
extern int fb_add_videomode(const struct fb_videomode *mode,
       struct list_head *head);
extern void fb_delete_videomode(const struct fb_videomode *mode,
    struct list_head *head);
extern const struct fb_videomode *fb_match_mode(const struct fb_var_screeninfo *var,
      struct list_head *head);
extern const struct fb_videomode *fb_find_best_mode(const struct fb_var_screeninfo *var,
          struct list_head *head);
extern const struct fb_videomode *fb_find_nearest_mode(const struct fb_videomode *mode,
             struct list_head *head);
extern void fb_destroy_modelist(struct list_head *head);
extern void fb_videomode_to_modelist(const struct fb_videomode *modedb, int num,
         struct list_head *head);
extern const struct fb_videomode *fb_find_best_display(const struct fb_monspecs *specs,
             struct list_head *head);


extern int fb_alloc_cmap(struct fb_cmap *cmap, int len, int transp);
extern int fb_alloc_cmap_gfp(struct fb_cmap *cmap, int len, int transp, gfp_t flags);
extern void fb_dealloc_cmap(struct fb_cmap *cmap);
extern int fb_copy_cmap(const struct fb_cmap *from, struct fb_cmap *to);
extern int fb_cmap_to_user(const struct fb_cmap *from, struct fb_cmap_user *to);
extern int fb_set_cmap(struct fb_cmap *cmap, struct fb_info *fb_info);
extern int fb_set_user_cmap(struct fb_cmap_user *cmap, struct fb_info *fb_info);
extern const struct fb_cmap *fb_default_cmap(int len);
extern void fb_invert_cmaps(void);

struct fb_videomode {
 const char *name;
 u32 refresh;
 u32 xres;
 u32 yres;
 u32 pixclock;
 u32 left_margin;
 u32 right_margin;
 u32 upper_margin;
 u32 lower_margin;
 u32 hsync_len;
 u32 vsync_len;
 u32 sync;
 u32 vmode;
 u32 flag;
};

struct dmt_videomode {
 u32 dmt_id;
 u32 std_2byte_code;
 u32 cvt_3byte_code;
 const struct fb_videomode *mode;
};

extern const char *fb_mode_option;
extern const struct fb_videomode vesa_modes[];
extern const struct dmt_videomode dmt_modes[];

struct fb_modelist {
 struct list_head list;
 struct fb_videomode mode;
};

extern int fb_find_mode(struct fb_var_screeninfo *var,
   struct fb_info *info, const char *mode_option,
   const struct fb_videomode *db,
   unsigned int dbsize,
   const struct fb_videomode *default_mode,
   unsigned int default_bpp);
# 32 "./include/drm/drm_crtc.h" 2

# 1 "./include/uapi/linux/media-bus-format.h" 1
# 34 "./include/drm/drm_crtc.h" 2


# 1 "./include/drm/drm_modeset_lock.h" 1
# 29 "./include/drm/drm_modeset_lock.h"
struct drm_modeset_lock;
# 43 "./include/drm/drm_modeset_lock.h"
struct drm_modeset_acquire_ctx {

 struct ww_acquire_ctx ww_ctx;






 struct drm_modeset_lock *contended;




 struct list_head locked;




 bool trylock_only;


 bool interruptible;
};
# 76 "./include/drm/drm_modeset_lock.h"
struct drm_modeset_lock {



 struct ww_mutex mutex;





 struct list_head head;
};



void drm_modeset_acquire_init(struct drm_modeset_acquire_ctx *ctx,
  uint32_t flags);
void drm_modeset_acquire_fini(struct drm_modeset_acquire_ctx *ctx);
void drm_modeset_drop_locks(struct drm_modeset_acquire_ctx *ctx);
int drm_modeset_backoff(struct drm_modeset_acquire_ctx *ctx);

void drm_modeset_lock_init(struct drm_modeset_lock *lock);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_modeset_lock_fini(struct drm_modeset_lock *lock)
{
 ({ int __ret_warn_on = !!(!list_empty(&lock->head)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("include/drm/drm_modeset_lock.h"), "i" (105), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_modeset_is_locked(struct drm_modeset_lock *lock)
{
 return ww_mutex_is_locked(&lock->mutex);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_modeset_lock_assert_held(struct drm_modeset_lock *lock)
{
 do { (void)(&lock->mutex.base); } while (0);
}

int drm_modeset_lock(struct drm_modeset_lock *lock,
  struct drm_modeset_acquire_ctx *ctx);
int __attribute__((__warn_unused_result__)) drm_modeset_lock_single_interruptible(struct drm_modeset_lock *lock);
void drm_modeset_unlock(struct drm_modeset_lock *lock);

struct drm_device;
struct drm_crtc;
struct drm_plane;

void drm_modeset_lock_all(struct drm_device *dev);
void drm_modeset_unlock_all(struct drm_device *dev);
void drm_warn_on_modeset_not_all_locked(struct drm_device *dev);

int drm_modeset_lock_all_ctx(struct drm_device *dev,
        struct drm_modeset_acquire_ctx *ctx);
# 37 "./include/drm/drm_crtc.h" 2
# 1 "./include/drm/drm_rect.h" 1
# 46 "./include/drm/drm_rect.h"
struct drm_rect {
 int x1, y1, x2, y2;
};
# 85 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_init(struct drm_rect *r, int x, int y,
     int width, int height)
{
 r->x1 = x;
 r->y1 = y;
 r->x2 = x + width;
 r->y2 = y + height;
}
# 106 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_adjust_size(struct drm_rect *r, int dw, int dh)
{
 r->x1 -= dw >> 1;
 r->y1 -= dh >> 1;
 r->x2 += (dw + 1) >> 1;
 r->y2 += (dh + 1) >> 1;
}
# 123 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_translate(struct drm_rect *r, int dx, int dy)
{
 r->x1 += dx;
 r->y1 += dy;
 r->x2 += dx;
 r->y2 += dy;
}
# 140 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_translate_to(struct drm_rect *r, int x, int y)
{
 drm_rect_translate(r, x - r->x1, y - r->y1);
}
# 153 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_downscale(struct drm_rect *r, int horz, int vert)
{
 r->x1 /= horz;
 r->y1 /= vert;
 r->x2 /= horz;
 r->y2 /= vert;
}
# 168 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_rect_width(const struct drm_rect *r)
{
 return r->x2 - r->x1;
}
# 180 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_rect_height(const struct drm_rect *r)
{
 return r->y2 - r->y1;
}
# 192 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_rect_visible(const struct drm_rect *r)
{
 return drm_rect_width(r) > 0 && drm_rect_height(r) > 0;
}
# 205 "./include/drm/drm_rect.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_rect_equals(const struct drm_rect *r1,
       const struct drm_rect *r2)
{
 return r1->x1 == r2->x1 && r1->x2 == r2->x2 &&
  r1->y1 == r2->y1 && r1->y2 == r2->y2;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_fp_to_int(struct drm_rect *dst,
          const struct drm_rect *src)
{
 drm_rect_init(dst, src->x1 >> 16, src->y1 >> 16,
        drm_rect_width(src) >> 16,
        drm_rect_height(src) >> 16);
}

bool drm_rect_intersect(struct drm_rect *r, const struct drm_rect *clip);
bool drm_rect_clip_scaled(struct drm_rect *src, struct drm_rect *dst,
     const struct drm_rect *clip);
int drm_rect_calc_hscale(const struct drm_rect *src,
    const struct drm_rect *dst,
    int min_hscale, int max_hscale);
int drm_rect_calc_vscale(const struct drm_rect *src,
    const struct drm_rect *dst,
    int min_vscale, int max_vscale);
void drm_rect_debug_print(const char *prefix,
     const struct drm_rect *r, bool fixed_point);
void drm_rect_rotate(struct drm_rect *r,
       int width, int height,
       unsigned int rotation);
void drm_rect_rotate_inv(struct drm_rect *r,
    int width, int height,
    unsigned int rotation);
# 38 "./include/drm/drm_crtc.h" 2

# 1 "./include/drm/drm_framebuffer.h" 1
# 33 "./include/drm/drm_framebuffer.h"
struct drm_clip_rect;
struct drm_device;
struct drm_file;
struct drm_framebuffer;
struct drm_gem_object;




struct drm_framebuffer_funcs {
# 53 "./include/drm/drm_framebuffer.h"
 void (*destroy)(struct drm_framebuffer *framebuffer);
# 73 "./include/drm/drm_framebuffer.h"
 int (*create_handle)(struct drm_framebuffer *fb,
        struct drm_file *file_priv,
        unsigned int *handle);
# 97 "./include/drm/drm_framebuffer.h"
 int (*dirty)(struct drm_framebuffer *framebuffer,
       struct drm_file *file_priv, unsigned flags,
       unsigned color, struct drm_clip_rect *clips,
       unsigned num_clips);
};
# 117 "./include/drm/drm_framebuffer.h"
struct drm_framebuffer {



 struct drm_device *dev;




 struct list_head head;




 struct drm_mode_object base;




 char comm[16];




 const struct drm_format_info *format;



 const struct drm_framebuffer_funcs *funcs;




 unsigned int pitches[4u];
# 168 "./include/drm/drm_framebuffer.h"
 unsigned int offsets[4u];






 uint64_t modifier;




 unsigned int width;




 unsigned int height;




 int flags;





 int hot_x;





 int hot_y;



 struct list_head filp_head;






 struct drm_gem_object *obj[4u];
};



int drm_framebuffer_init(struct drm_device *dev,
    struct drm_framebuffer *fb,
    const struct drm_framebuffer_funcs *funcs);
struct drm_framebuffer *drm_framebuffer_lookup(struct drm_device *dev,
            struct drm_file *file_priv,
            uint32_t id);
void drm_framebuffer_remove(struct drm_framebuffer *fb);
void drm_framebuffer_cleanup(struct drm_framebuffer *fb);
void drm_framebuffer_unregister_private(struct drm_framebuffer *fb);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_framebuffer_get(struct drm_framebuffer *fb)
{
 drm_mode_object_get(&fb->base);
}
# 246 "./include/drm/drm_framebuffer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_framebuffer_put(struct drm_framebuffer *fb)
{
 drm_mode_object_put(&fb->base);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t drm_framebuffer_read_refcount(const struct drm_framebuffer *fb)
{
 return kref_read(&fb->base.refcount);
}
# 270 "./include/drm/drm_framebuffer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_framebuffer_assign(struct drm_framebuffer **p,
       struct drm_framebuffer *fb)
{
 if (fb)
  drm_framebuffer_get(fb);
 if (*p)
  drm_framebuffer_put(*p);
 *p = fb;
}
# 295 "./include/drm/drm_framebuffer.h"
int drm_framebuffer_plane_width(int width,
    const struct drm_framebuffer *fb, int plane);
int drm_framebuffer_plane_height(int height,
     const struct drm_framebuffer *fb, int plane);






struct drm_afbc_framebuffer {



 struct drm_framebuffer base;



 u32 block_width;



 u32 block_height;



 u32 aligned_width;



 u32 aligned_height;



 u32 offset;



 u32 afbc_size;
};
# 40 "./include/drm/drm_crtc.h" 2


# 1 "./include/drm/drm_device.h" 1
# 10 "./include/drm/drm_device.h"
# 1 "./include/drm/drm_mode_config.h" 1
# 34 "./include/drm/drm_mode_config.h"
struct drm_file;
struct drm_device;
struct drm_atomic_state;
struct drm_mode_fb_cmd2;
struct drm_format_info;
struct drm_display_mode;







struct drm_mode_config_funcs {
# 83 "./include/drm/drm_mode_config.h"
 struct drm_framebuffer *(*fb_create)(struct drm_device *dev,
          struct drm_file *file_priv,
          const struct drm_mode_fb_cmd2 *mode_cmd);
# 98 "./include/drm/drm_mode_config.h"
 const struct drm_format_info *(*get_format_info)(const struct drm_mode_fb_cmd2 *mode_cmd);
# 115 "./include/drm/drm_mode_config.h"
 void (*output_poll_changed)(struct drm_device *dev);
# 125 "./include/drm/drm_mode_config.h"
 enum drm_mode_status (*mode_valid)(struct drm_device *dev,
        const struct drm_display_mode *mode);
# 202 "./include/drm/drm_mode_config.h"
 int (*atomic_check)(struct drm_device *dev,
       struct drm_atomic_state *state);
# 284 "./include/drm/drm_mode_config.h"
 int (*atomic_commit)(struct drm_device *dev,
        struct drm_atomic_state *state,
        bool nonblock);
# 303 "./include/drm/drm_mode_config.h"
 struct drm_atomic_state *(*atomic_state_alloc)(struct drm_device *dev);
# 324 "./include/drm/drm_mode_config.h"
 void (*atomic_state_clear)(struct drm_atomic_state *state);
# 339 "./include/drm/drm_mode_config.h"
 void (*atomic_state_free)(struct drm_atomic_state *state);
};
# 364 "./include/drm/drm_mode_config.h"
struct drm_mode_config {
# 375 "./include/drm/drm_mode_config.h"
 struct mutex mutex;
# 385 "./include/drm/drm_mode_config.h"
 struct drm_modeset_lock connection_mutex;
# 395 "./include/drm/drm_mode_config.h"
 struct drm_modeset_acquire_ctx *acquire_ctx;







 struct mutex idr_mutex;







 struct idr object_idr;







 struct idr tile_idr;


 struct mutex fb_lock;

 int num_fb;

 struct list_head fb_list;





 spinlock_t connector_list_lock;




 int num_connector;



 struct ida connector_ida;







 struct list_head connector_list;
# 459 "./include/drm/drm_mode_config.h"
 struct llist_head connector_free_list;



 struct work_struct connector_free_work;







 int num_encoder;







 struct list_head encoder_list;
# 488 "./include/drm/drm_mode_config.h"
 int num_total_plane;






 struct list_head plane_list;







 int num_crtc;






 struct list_head crtc_list;
# 519 "./include/drm/drm_mode_config.h"
 struct list_head property_list;
# 528 "./include/drm/drm_mode_config.h"
 struct list_head privobj_list;

 int min_width, min_height;
 int max_width, max_height;
 const struct drm_mode_config_funcs *funcs;
 resource_size_t fb_base;


 bool poll_enabled;
 bool poll_running;
 bool delayed_event;
 struct delayed_work output_poll_work;







 struct mutex blob_lock;







 struct list_head property_blob_list;







 struct drm_property *edid_property;




 struct drm_property *dpms_property;




 struct drm_property *path_property;





 struct drm_property *tile_property;




 struct drm_property *link_status_property;




 struct drm_property *plane_type_property;




 struct drm_property *prop_src_x;




 struct drm_property *prop_src_y;




 struct drm_property *prop_src_w;




 struct drm_property *prop_src_h;




 struct drm_property *prop_crtc_x;




 struct drm_property *prop_crtc_y;




 struct drm_property *prop_crtc_w;




 struct drm_property *prop_crtc_h;




 struct drm_property *prop_fb_id;




 struct drm_property *prop_in_fence_fd;





 struct drm_property *prop_out_fence_ptr;




 struct drm_property *prop_crtc_id;
# 659 "./include/drm/drm_mode_config.h"
 struct drm_property *prop_fb_damage_clips;





 struct drm_property *prop_active;





 struct drm_property *prop_mode_id;




 struct drm_property *prop_vrr_enabled;





 struct drm_property *dvi_i_subconnector_property;




 struct drm_property *dvi_i_select_subconnector_property;





 struct drm_property *dp_subconnector_property;





 struct drm_property *tv_subconnector_property;




 struct drm_property *tv_select_subconnector_property;




 struct drm_property *tv_mode_property;




 struct drm_property *tv_left_margin_property;




 struct drm_property *tv_right_margin_property;




 struct drm_property *tv_top_margin_property;




 struct drm_property *tv_bottom_margin_property;




 struct drm_property *tv_brightness_property;




 struct drm_property *tv_contrast_property;




 struct drm_property *tv_flicker_reduction_property;




 struct drm_property *tv_overscan_property;




 struct drm_property *tv_saturation_property;



 struct drm_property *tv_hue_property;





 struct drm_property *scaling_mode_property;




 struct drm_property *aspect_ratio_property;




 struct drm_property *content_type_property;




 struct drm_property *degamma_lut_property;




 struct drm_property *degamma_lut_size_property;





 struct drm_property *ctm_property;





 struct drm_property *gamma_lut_property;




 struct drm_property *gamma_lut_size_property;





 struct drm_property *suggested_x_property;




 struct drm_property *suggested_y_property;






 struct drm_property *non_desktop_property;






 struct drm_property *panel_orientation_property;






 struct drm_property *writeback_fb_id_property;







 struct drm_property *writeback_pixel_formats_property;







 struct drm_property *writeback_out_fence_ptr_property;






 struct drm_property *hdr_output_metadata_property;





 struct drm_property *content_protection_property;





 struct drm_property *hdcp_content_type_property;


 uint32_t preferred_depth, prefer_shadow;






 bool prefer_shadow_fbdev;







 bool quirk_addfb_prefer_xbgr_30bpp;
# 900 "./include/drm/drm_mode_config.h"
 bool quirk_addfb_prefer_host_byte_order;





 bool async_page_flip;
# 922 "./include/drm/drm_mode_config.h"
 bool allow_fb_modifiers;







 bool normalize_zpos;





 struct drm_property *modifiers_property;


 uint32_t cursor_width, cursor_height;
# 948 "./include/drm/drm_mode_config.h"
 struct drm_atomic_state *suspend_state;

 const struct drm_mode_config_helper_funcs *helper_private;
};

int __attribute__((__warn_unused_result__)) drmm_mode_config_init(struct drm_device *dev);
# 965 "./include/drm/drm_mode_config.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_mode_config_init(struct drm_device *dev)
{
 return drmm_mode_config_init(dev);
}

void drm_mode_config_reset(struct drm_device *dev);
void drm_mode_config_cleanup(struct drm_device *dev);
# 11 "./include/drm/drm_device.h" 2

struct drm_driver;
struct drm_minor;
struct drm_master;
struct drm_device_dma;
struct drm_vblank_crtc;
struct drm_sg_mem;
struct drm_local_map;
struct drm_vma_offset_manager;
struct drm_vram_mm;
struct drm_fb_helper;

struct inode;

struct pci_dev;
struct pci_controller;






enum switch_power_state {

 DRM_SWITCH_POWER_ON = 0,


 DRM_SWITCH_POWER_OFF = 1,


 DRM_SWITCH_POWER_CHANGING = 2,


 DRM_SWITCH_POWER_DYNAMIC_OFF = 3,
};







struct drm_device {

 int if_version;


 struct kref ref;


 struct device *dev;







 struct {

  struct list_head resources;

  void *final_kfree;

  spinlock_t lock;
 } managed;


 const struct drm_driver *driver;
# 91 "./include/drm/drm_device.h"
 void *dev_private;


 struct drm_minor *primary;


 struct drm_minor *render;






 bool registered;







 struct drm_master *master;
# 122 "./include/drm/drm_device.h"
 u32 driver_features;







 bool unplugged;


 struct inode *anon_inode;


 char *unique;
# 146 "./include/drm/drm_device.h"
 struct mutex struct_mutex;






 struct mutex master_mutex;







 atomic_t open_count;


 struct mutex filelist_mutex;





 struct list_head filelist;







 struct list_head filelist_internal;






 struct mutex clientlist_mutex;






 struct list_head clientlist;
# 207 "./include/drm/drm_device.h"
 bool vblank_disable_immediate;
# 217 "./include/drm/drm_device.h"
 struct drm_vblank_crtc *vblank;






 spinlock_t vblank_time_lock;




 spinlock_t vbl_lock;
# 252 "./include/drm/drm_device.h"
 u32 max_vblank_count;


 struct list_head vblank_event_list;







 spinlock_t event_lock;


 unsigned int num_crtcs;


 struct drm_mode_config mode_config;


 struct mutex object_name_lock;


 struct idr object_name_idr;


 struct drm_vma_offset_manager *vma_offset_manager;


 struct drm_vram_mm *vram_mm;
# 291 "./include/drm/drm_device.h"
 enum switch_power_state switch_power_state;







 struct drm_fb_helper *fb_helper;
# 366 "./include/drm/drm_device.h"
};
# 43 "./include/drm/drm_crtc.h" 2
# 1 "./include/drm/drm_property.h" 1
# 40 "./include/drm/drm_property.h"
struct drm_property_enum {
# 49 "./include/drm/drm_property.h"
 uint64_t value;
 struct list_head head;
 char name[32];
};
# 80 "./include/drm/drm_property.h"
struct drm_property {



 struct list_head head;




 struct drm_mode_object base;
# 166 "./include/drm/drm_property.h"
 uint32_t flags;




 char name[32];




 uint32_t num_values;







 uint64_t *values;




 struct drm_device *dev;







 struct list_head enum_list;
};
# 216 "./include/drm/drm_property.h"
struct drm_property_blob {
 struct drm_mode_object base;
 struct drm_device *dev;
 struct list_head head_global;
 struct list_head head_file;
 size_t length;
 void *data;
};

struct drm_prop_enum_list {
 int type;
 const char *name;
};
# 241 "./include/drm/drm_property.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_property_type_is(struct drm_property *property,
     uint32_t type)
{

 if (property->flags & 0x0000ffc0)
  return (property->flags & 0x0000ffc0) == type;
 return property->flags & type;
}

struct drm_property *drm_property_create(struct drm_device *dev,
      u32 flags, const char *name,
      int num_values);
struct drm_property *drm_property_create_enum(struct drm_device *dev,
           u32 flags, const char *name,
           const struct drm_prop_enum_list *props,
           int num_values);
struct drm_property *drm_property_create_bitmask(struct drm_device *dev,
       u32 flags, const char *name,
       const struct drm_prop_enum_list *props,
       int num_props,
       uint64_t supported_bits);
struct drm_property *drm_property_create_range(struct drm_device *dev,
            u32 flags, const char *name,
            uint64_t min, uint64_t max);
struct drm_property *drm_property_create_signed_range(struct drm_device *dev,
            u32 flags, const char *name,
            int64_t min, int64_t max);
struct drm_property *drm_property_create_object(struct drm_device *dev,
      u32 flags, const char *name,
      uint32_t type);
struct drm_property *drm_property_create_bool(struct drm_device *dev,
           u32 flags, const char *name);
int drm_property_add_enum(struct drm_property *property,
     uint64_t value, const char *name);
void drm_property_destroy(struct drm_device *dev, struct drm_property *property);

struct drm_property_blob *drm_property_create_blob(struct drm_device *dev,
         size_t length,
         const void *data);
struct drm_property_blob *drm_property_lookup_blob(struct drm_device *dev,
         uint32_t id);
int drm_property_replace_global_blob(struct drm_device *dev,
         struct drm_property_blob **replace,
         size_t length,
         const void *data,
         struct drm_mode_object *obj_holds_id,
         struct drm_property *prop_holds_id);
bool drm_property_replace_blob(struct drm_property_blob **blob,
          struct drm_property_blob *new_blob);
struct drm_property_blob *drm_property_blob_get(struct drm_property_blob *blob);
void drm_property_blob_put(struct drm_property_blob *blob);
# 301 "./include/drm/drm_property.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_property *drm_property_find(struct drm_device *dev,
           struct drm_file *file_priv,
           uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xb0b0b0b0);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_345(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_property *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_345(); } while (0); ((struct drm_property *)(__mptr - __builtin_offsetof(struct drm_property, base))); }) : ((void *)0);
}
# 44 "./include/drm/drm_crtc.h" 2
# 1 "./include/drm/drm_edid.h" 1
# 30 "./include/drm/drm_edid.h"
struct drm_device;
struct i2c_adapter;
# 44 "./include/drm/drm_edid.h"
struct est_timings {
 u8 t1;
 u8 t2;
 u8 mfg_rsvd;
} __attribute__((packed));
# 58 "./include/drm/drm_edid.h"
struct std_timing {
 u8 hsize;
 u8 vfreq_aspect;
} __attribute__((packed));
# 70 "./include/drm/drm_edid.h"
struct detailed_pixel_timing {
 u8 hactive_lo;
 u8 hblank_lo;
 u8 hactive_hblank_hi;
 u8 vactive_lo;
 u8 vblank_lo;
 u8 vactive_vblank_hi;
 u8 hsync_offset_lo;
 u8 hsync_pulse_width_lo;
 u8 vsync_offset_pulse_width_lo;
 u8 hsync_vsync_offset_pulse_width_hi;
 u8 width_mm_lo;
 u8 height_mm_lo;
 u8 width_height_mm_hi;
 u8 hborder;
 u8 vborder;
 u8 misc;
} __attribute__((packed));


struct detailed_data_string {
 u8 str[13];
} __attribute__((packed));






struct detailed_data_monitor_range {
 u8 min_vfreq;
 u8 max_vfreq;
 u8 min_hfreq_khz;
 u8 max_hfreq_khz;
 u8 pixel_clock_mhz;
 u8 flags;
 union {
  struct {
   u8 reserved;
   u8 hfreq_start_khz;
   u8 c;
   __le16 m;
   u8 k;
   u8 j;
  } __attribute__((packed)) gtf2;
  struct {
   u8 version;
   u8 data1;
   u8 data2;
   u8 supported_aspects;
   u8 flags;
   u8 supported_scalings;
   u8 preferred_refresh;
  } __attribute__((packed)) cvt;
 } formula;
} __attribute__((packed));

struct detailed_data_wpindex {
 u8 white_yx_lo;
 u8 white_x_hi;
 u8 white_y_hi;
 u8 gamma;
} __attribute__((packed));

struct detailed_data_color_point {
 u8 windex1;
 u8 wpindex1[3];
 u8 windex2;
 u8 wpindex2[3];
} __attribute__((packed));

struct cvt_timing {
 u8 code[3];
} __attribute__((packed));

struct detailed_non_pixel {
 u8 pad1;
 u8 type;


 u8 pad2;
 union {
  struct detailed_data_string str;
  struct detailed_data_monitor_range range;
  struct detailed_data_wpindex color;
  struct std_timing timings[6];
  struct cvt_timing cvt[4];
 } data;
} __attribute__((packed));
# 170 "./include/drm/drm_edid.h"
struct detailed_timing {
 __le16 pixel_clock;
 union {
  struct detailed_pixel_timing pixel_data;
  struct detailed_non_pixel other_data;
 } data;
} __attribute__((packed));
# 320 "./include/drm/drm_edid.h"
struct edid {
 u8 header[8];

 u8 mfg_id[2];
 u8 prod_code[2];
 u32 serial;
 u8 mfg_week;
 u8 mfg_year;

 u8 version;
 u8 revision;

 u8 input;
 u8 width_cm;
 u8 height_cm;
 u8 gamma;
 u8 features;

 u8 red_green_lo;
 u8 blue_white_lo;
 u8 red_x;
 u8 red_y;
 u8 green_x;
 u8 green_y;
 u8 blue_x;
 u8 blue_y;
 u8 white_x;
 u8 white_y;

 struct est_timings established_timings;

 struct std_timing standard_timings[8];

 struct detailed_timing detailed_timings[4];

 u8 extensions;

 u8 checksum;
} __attribute__((packed));




struct cea_sad {
 u8 format;
 u8 channels;
 u8 freq;
 u8 byte2;
};

struct drm_encoder;
struct drm_connector;
struct drm_connector_state;
struct drm_display_mode;

int drm_edid_to_sad(struct edid *edid, struct cea_sad **sads);
int drm_edid_to_speaker_allocation(struct edid *edid, u8 **sadb);
int drm_av_sync_delay(struct drm_connector *connector,
        const struct drm_display_mode *mode);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct edid *
drm_load_edid_firmware(struct drm_connector *connector)
{
 return ERR_PTR(-2);
}


bool drm_edid_are_equal(const struct edid *edid1, const struct edid *edid2);

int
drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe *frame,
      const struct drm_connector *connector,
      const struct drm_display_mode *mode);
int
drm_hdmi_vendor_infoframe_from_display_mode(struct hdmi_vendor_infoframe *frame,
         const struct drm_connector *connector,
         const struct drm_display_mode *mode);

void
drm_hdmi_avi_infoframe_colorspace(struct hdmi_avi_infoframe *frame,
      const struct drm_connector_state *conn_state);

void
drm_hdmi_avi_infoframe_bars(struct hdmi_avi_infoframe *frame,
       const struct drm_connector_state *conn_state);

void
drm_hdmi_avi_infoframe_quant_range(struct hdmi_avi_infoframe *frame,
       const struct drm_connector *connector,
       const struct drm_display_mode *mode,
       enum hdmi_quantization_range rgb_quant_range);

int
drm_hdmi_infoframe_set_hdr_metadata(struct hdmi_drm_infoframe *frame,
        const struct drm_connector_state *conn_state);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_mnl(const uint8_t *eld)
{
 return (eld[4] & (0x1f << 0)) >> 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const uint8_t *drm_eld_sad(const uint8_t *eld)
{
 unsigned int ver, mnl;

 ver = (eld[0] & (0x1f << 3)) >> 3;
 if (ver != 2 && ver != 31)
  return ((void *)0);

 mnl = drm_eld_mnl(eld);
 if (mnl > 16)
  return ((void *)0);

 return eld + (20 + (mnl) + 3 * (0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_sad_count(const uint8_t *eld)
{
 return (eld[5] & (0xf << 4)) >>
  4;
}
# 466 "./include/drm/drm_edid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_calc_baseline_block_size(const uint8_t *eld)
{
 return 20 - 4 +
  drm_eld_mnl(eld) + drm_eld_sad_count(eld) * 3;
}
# 482 "./include/drm/drm_edid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_size(const uint8_t *eld)
{
 return 4 + eld[2] * 4;
}
# 494 "./include/drm/drm_edid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 drm_eld_get_spk_alloc(const uint8_t *eld)
{
 return eld[7] & 0x7f;
}
# 506 "./include/drm/drm_edid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 drm_eld_get_conn_type(const uint8_t *eld)
{
 return eld[5] & (3 << 2);
}

bool drm_probe_ddc(struct i2c_adapter *adapter);
struct edid *drm_do_get_edid(struct drm_connector *connector,
 int (*get_edid_block)(void *data, u8 *buf, unsigned int block,
         size_t len),
 void *data);
struct edid *drm_get_edid(struct drm_connector *connector,
     struct i2c_adapter *adapter);
struct edid *drm_get_edid_switcheroo(struct drm_connector *connector,
         struct i2c_adapter *adapter);
struct edid *drm_edid_duplicate(const struct edid *edid);
int drm_add_edid_modes(struct drm_connector *connector, struct edid *edid);
int drm_add_override_edid_modes(struct drm_connector *connector);

u8 drm_match_cea_mode(const struct drm_display_mode *to_match);
bool drm_detect_hdmi_monitor(struct edid *edid);
bool drm_detect_monitor_audio(struct edid *edid);
enum hdmi_quantization_range
drm_default_rgb_quant_range(const struct drm_display_mode *mode);
int drm_add_modes_noedid(struct drm_connector *connector,
    int hdisplay, int vdisplay);
void drm_set_preferred_mode(struct drm_connector *connector,
       int hpref, int vpref);

int drm_edid_header_is_valid(const u8 *raw_edid);
bool drm_edid_block_valid(u8 *raw_edid, int block, bool print_bad_edid,
     bool *edid_corrupt);
bool drm_edid_is_valid(struct edid *edid);
void drm_edid_get_monitor_name(struct edid *edid, char *name,
          int buflen);
struct drm_display_mode *drm_mode_find_dmt(struct drm_device *dev,
        int hsize, int vsize, int fresh,
        bool rb);
struct drm_display_mode *
drm_display_mode_from_cea_vic(struct drm_device *dev,
         u8 video_code);
const u8 *drm_find_edid_extension(const struct edid *edid,
      int ext_id, int *ext_index);
# 45 "./include/drm/drm_crtc.h" 2
# 1 "./include/drm/drm_plane.h" 1
# 29 "./include/drm/drm_plane.h"
# 1 "./include/drm/drm_color_mgmt.h" 1
# 29 "./include/drm/drm_color_mgmt.h"
struct drm_crtc;
struct drm_plane;
# 41 "./include/drm/drm_color_mgmt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_color_lut_extract(u32 user_input, int bit_precision)
{
 u32 val = user_input;
 u32 max = 0xffff >> (16 - bit_precision);


 if (bit_precision < 16) {
  val += 1UL << (16 - bit_precision - 1);
  val >>= 16 - bit_precision;
 }

 return __builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(__builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(val)) *)1 == (typeof((typeof(val))(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(val)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(0)) * 0l)) : (int *)8))))), (((typeof(val))(val)) > ((typeof(val))(0)) ? ((typeof(val))(val)) : ((typeof(val))(0))), ({ typeof((typeof(val))(val)) __UNIQUE_ID___x346 = ((typeof(val))(val)); typeof((typeof(val))(0)) __UNIQUE_ID___y347 = ((typeof(val))(0)); ((__UNIQUE_ID___x346) > (__UNIQUE_ID___y347) ? (__UNIQUE_ID___x346) : (__UNIQUE_ID___y347)); })))) *)1 == (typeof((typeof(val))(max)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(__builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(val)) *)1 == (typeof((typeof(val))(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(val)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(0)) * 0l)) : (int *)8))))), (((typeof(val))(val)) > ((typeof(val))(0)) ? ((typeof(val))(val)) : ((typeof(val))(0))), ({ typeof((typeof(val))(val)) __UNIQUE_ID___x346 = ((typeof(val))(val)); typeof((typeof(val))(0)) __UNIQUE_ID___y347 = ((typeof(val))(0)); ((__UNIQUE_ID___x346) > (__UNIQUE_ID___y347) ? (__UNIQUE_ID___x346) : (__UNIQUE_ID___y347)); })))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(max)) * 0l)) : (int *)8))))), (((typeof(val))(__builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(val)) *)1 == (typeof((typeof(val))(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(val)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(0)) * 0l)) : (int *)8))))), (((typeof(val))(val)) > ((typeof(val))(0)) ? ((typeof(val))(val)) : ((typeof(val))(0))), ({ typeof((typeof(val))(val)) __UNIQUE_ID___x346 = ((typeof(val))(val)); typeof((typeof(val))(0)) __UNIQUE_ID___y347 = ((typeof(val))(0)); ((__UNIQUE_ID___x346) > (__UNIQUE_ID___y347) ? (__UNIQUE_ID___x346) : (__UNIQUE_ID___y347)); })))) < ((typeof(val))(max)) ? ((typeof(val))(__builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(val)) *)1 == (typeof((typeof(val))(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(val)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(0)) * 0l)) : (int *)8))))), (((typeof(val))(val)) > ((typeof(val))(0)) ? ((typeof(val))(val)) : ((typeof(val))(0))), ({ typeof((typeof(val))(val)) __UNIQUE_ID___x346 = ((typeof(val))(val)); typeof((typeof(val))(0)) __UNIQUE_ID___y347 = ((typeof(val))(0)); ((__UNIQUE_ID___x346) > (__UNIQUE_ID___y347) ? (__UNIQUE_ID___x346) : (__UNIQUE_ID___y347)); })))) : ((typeof(val))(max))), ({ typeof((typeof(val))(__builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(val)) *)1 == (typeof((typeof(val))(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(val)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(0)) * 0l)) : (int *)8))))), (((typeof(val))(val)) > ((typeof(val))(0)) ? ((typeof(val))(val)) : ((typeof(val))(0))), ({ typeof((typeof(val))(val)) __UNIQUE_ID___x346 = ((typeof(val))(val)); typeof((typeof(val))(0)) __UNIQUE_ID___y347 = ((typeof(val))(0)); ((__UNIQUE_ID___x346) > (__UNIQUE_ID___y347) ? (__UNIQUE_ID___x346) : (__UNIQUE_ID___y347)); })))) __UNIQUE_ID___x348 = ((typeof(val))(__builtin_choose_expr(((!!(sizeof((typeof((typeof(val))(val)) *)1 == (typeof((typeof(val))(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(val)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((typeof(val))(0)) * 0l)) : (int *)8))))), (((typeof(val))(val)) > ((typeof(val))(0)) ? ((typeof(val))(val)) : ((typeof(val))(0))), ({ typeof((typeof(val))(val)) __UNIQUE_ID___x346 = ((typeof(val))(val)); typeof((typeof(val))(0)) __UNIQUE_ID___y347 = ((typeof(val))(0)); ((__UNIQUE_ID___x346) > (__UNIQUE_ID___y347) ? (__UNIQUE_ID___x346) : (__UNIQUE_ID___y347)); })))); typeof((typeof(val))(max)) __UNIQUE_ID___y349 = ((typeof(val))(max)); ((__UNIQUE_ID___x348) < (__UNIQUE_ID___y349) ? (__UNIQUE_ID___x348) : (__UNIQUE_ID___y349)); }));
}

u64 drm_color_ctm_s31_32_to_qm_n(u64 user_input, u32 m, u32 n);

void drm_crtc_enable_color_mgmt(struct drm_crtc *crtc,
    uint degamma_lut_size,
    bool has_ctm,
    uint gamma_lut_size);

int drm_mode_crtc_set_gamma_size(struct drm_crtc *crtc,
     int gamma_size);
# 72 "./include/drm/drm_color_mgmt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_color_lut_size(const struct drm_property_blob *blob)
{
 return blob->length / sizeof(struct drm_color_lut);
}

enum drm_color_encoding {
 DRM_COLOR_YCBCR_BT601,
 DRM_COLOR_YCBCR_BT709,
 DRM_COLOR_YCBCR_BT2020,
 DRM_COLOR_ENCODING_MAX,
};

enum drm_color_range {
 DRM_COLOR_YCBCR_LIMITED_RANGE,
 DRM_COLOR_YCBCR_FULL_RANGE,
 DRM_COLOR_RANGE_MAX,
};

int drm_plane_create_color_properties(struct drm_plane *plane,
          u32 supported_encodings,
          u32 supported_ranges,
          enum drm_color_encoding default_encoding,
          enum drm_color_range default_range);







enum drm_color_lut_tests {
# 111 "./include/drm/drm_color_mgmt.h"
 DRM_COLOR_LUT_EQUAL_CHANNELS = ((((1UL))) << (0)),







 DRM_COLOR_LUT_NON_DECREASING = ((((1UL))) << (1)),
};

int drm_color_lut_check(const struct drm_property_blob *lut, u32 tests);
# 30 "./include/drm/drm_plane.h" 2




struct drm_crtc;
struct drm_printer;
struct drm_modeset_acquire_ctx;

enum drm_scaling_filter {
 DRM_SCALING_FILTER_DEFAULT,
 DRM_SCALING_FILTER_NEAREST_NEIGHBOR,
};
# 52 "./include/drm/drm_plane.h"
struct drm_plane_state {

 struct drm_plane *plane;







 struct drm_crtc *crtc;







 struct drm_framebuffer *fb;
# 85 "./include/drm/drm_plane.h"
 struct dma_fence *fence;
# 94 "./include/drm/drm_plane.h"
 int32_t crtc_x;






 int32_t crtc_y;



 uint32_t crtc_w, crtc_h;





 uint32_t src_x;




 uint32_t src_y;


 uint32_t src_h, src_w;







 u16 alpha;







 uint16_t pixel_blend_mode;






 unsigned int rotation;
# 157 "./include/drm/drm_plane.h"
 unsigned int zpos;
# 166 "./include/drm/drm_plane.h"
 unsigned int normalized_zpos;






 enum drm_color_encoding color_encoding;






 enum drm_color_range color_range;
# 193 "./include/drm/drm_plane.h"
 struct drm_property_blob *fb_damage_clips;
# 215 "./include/drm/drm_plane.h"
 struct drm_rect src, dst;







 bool visible;






 enum drm_scaling_filter scaling_filter;







 struct drm_crtc_commit *commit;


 struct drm_atomic_state *state;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_rect
drm_plane_state_src(const struct drm_plane_state *state)
{
 struct drm_rect src = {
  .x1 = state->src_x,
  .y1 = state->src_y,
  .x2 = state->src_x + state->src_w,
  .y2 = state->src_y + state->src_h,
 };
 return src;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_rect
drm_plane_state_dest(const struct drm_plane_state *state)
{
 struct drm_rect dest = {
  .x1 = state->crtc_x,
  .y1 = state->crtc_y,
  .x2 = state->crtc_x + state->crtc_w,
  .y2 = state->crtc_y + state->crtc_h,
 };
 return dest;
}




struct drm_plane_funcs {
# 298 "./include/drm/drm_plane.h"
 int (*update_plane)(struct drm_plane *plane,
       struct drm_crtc *crtc, struct drm_framebuffer *fb,
       int crtc_x, int crtc_y,
       unsigned int crtc_w, unsigned int crtc_h,
       uint32_t src_x, uint32_t src_y,
       uint32_t src_w, uint32_t src_h,
       struct drm_modeset_acquire_ctx *ctx);
# 321 "./include/drm/drm_plane.h"
 int (*disable_plane)(struct drm_plane *plane,
        struct drm_modeset_acquire_ctx *ctx);
# 331 "./include/drm/drm_plane.h"
 void (*destroy)(struct drm_plane *plane);
# 343 "./include/drm/drm_plane.h"
 void (*reset)(struct drm_plane *plane);
# 359 "./include/drm/drm_plane.h"
 int (*set_property)(struct drm_plane *plane,
       struct drm_property *property, uint64_t val);
# 393 "./include/drm/drm_plane.h"
 struct drm_plane_state *(*atomic_duplicate_state)(struct drm_plane *plane);
# 403 "./include/drm/drm_plane.h"
 void (*atomic_destroy_state)(struct drm_plane *plane,
         struct drm_plane_state *state);
# 448 "./include/drm/drm_plane.h"
 int (*atomic_set_property)(struct drm_plane *plane,
       struct drm_plane_state *state,
       struct drm_property *property,
       uint64_t val);
# 471 "./include/drm/drm_plane.h"
 int (*atomic_get_property)(struct drm_plane *plane,
       const struct drm_plane_state *state,
       struct drm_property *property,
       uint64_t *val);
# 488 "./include/drm/drm_plane.h"
 int (*late_register)(struct drm_plane *plane);
# 499 "./include/drm/drm_plane.h"
 void (*early_unregister)(struct drm_plane *plane);
# 510 "./include/drm/drm_plane.h"
 void (*atomic_print_state)(struct drm_printer *p,
       const struct drm_plane_state *state);
# 529 "./include/drm/drm_plane.h"
 bool (*format_mod_supported)(struct drm_plane *plane, uint32_t format,
         uint64_t modifier);
};
# 555 "./include/drm/drm_plane.h"
enum drm_plane_type {






 DRM_PLANE_TYPE_OVERLAY,
# 571 "./include/drm/drm_plane.h"
 DRM_PLANE_TYPE_PRIMARY,
# 582 "./include/drm/drm_plane.h"
 DRM_PLANE_TYPE_CURSOR,
};
# 595 "./include/drm/drm_plane.h"
struct drm_plane {

 struct drm_device *dev;
# 606 "./include/drm/drm_plane.h"
 struct list_head head;


 char *name;
# 620 "./include/drm/drm_plane.h"
 struct drm_modeset_lock mutex;


 struct drm_mode_object base;





 uint32_t possible_crtcs;

 uint32_t *format_types;

 unsigned int format_count;




 bool format_default;


 uint64_t *modifiers;

 unsigned int modifier_count;
# 652 "./include/drm/drm_plane.h"
 struct drm_crtc *crtc;
# 661 "./include/drm/drm_plane.h"
 struct drm_framebuffer *fb;







 struct drm_framebuffer *old_fb;


 const struct drm_plane_funcs *funcs;


 struct drm_object_properties properties;


 enum drm_plane_type type;





 unsigned index;


 const struct drm_plane_helper_funcs *helper_private;
# 702 "./include/drm/drm_plane.h"
 struct drm_plane_state *state;






 struct drm_property *alpha_property;





 struct drm_property *zpos_property;





 struct drm_property *rotation_property;







 struct drm_property *blend_mode_property;
# 738 "./include/drm/drm_plane.h"
 struct drm_property *color_encoding_property;







 struct drm_property *color_range_property;





 struct drm_property *scaling_filter_property;
};



__attribute__((__format__(printf, 9, 10)))
int drm_universal_plane_init(struct drm_device *dev,
        struct drm_plane *plane,
        uint32_t possible_crtcs,
        const struct drm_plane_funcs *funcs,
        const uint32_t *formats,
        unsigned int format_count,
        const uint64_t *format_modifiers,
        enum drm_plane_type type,
        const char *name, ...);
int drm_plane_init(struct drm_device *dev,
     struct drm_plane *plane,
     uint32_t possible_crtcs,
     const struct drm_plane_funcs *funcs,
     const uint32_t *formats, unsigned int format_count,
     bool is_primary);
void drm_plane_cleanup(struct drm_plane *plane);

__attribute__((__format__(printf, 10, 11)))
void *__drmm_universal_plane_alloc(struct drm_device *dev,
       size_t size, size_t offset,
       uint32_t possible_crtcs,
       const struct drm_plane_funcs *funcs,
       const uint32_t *formats,
       unsigned int format_count,
       const uint64_t *format_modifiers,
       enum drm_plane_type plane_type,
       const char *name, ...);
# 824 "./include/drm/drm_plane.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_plane_index(const struct drm_plane *plane)
{
 return plane->index;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_plane_mask(const struct drm_plane *plane)
{
 return 1 << drm_plane_index(plane);
}

struct drm_plane * drm_plane_from_index(struct drm_device *dev, int idx);
void drm_plane_force_disable(struct drm_plane *plane);

int drm_mode_plane_set_obj_prop(struct drm_plane *plane,
           struct drm_property *property,
           uint64_t value);
# 854 "./include/drm/drm_plane.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane *drm_plane_find(struct drm_device *dev,
  struct drm_file *file_priv,
  uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xeeeeeeee);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_350(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_plane *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_350(); } while (0); ((struct drm_plane *)(__mptr - __builtin_offsetof(struct drm_plane, base))); }) : ((void *)0);
}
# 898 "./include/drm/drm_plane.h"
bool drm_any_plane_has_format(struct drm_device *dev,
         u32 format, u64 modifier);

void drm_plane_enable_fb_damage_clips(struct drm_plane *plane);
unsigned int
drm_plane_get_damage_clips_count(const struct drm_plane_state *state);
struct drm_mode_rect *
drm_plane_get_damage_clips(const struct drm_plane_state *state);

int drm_plane_create_scaling_filter_property(struct drm_plane *plane,
          unsigned int supported_filters);
# 46 "./include/drm/drm_crtc.h" 2
# 1 "./include/drm/drm_blend.h" 1
# 34 "./include/drm/drm_blend.h"
struct drm_device;
struct drm_atomic_state;
struct drm_plane;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_rotation_90_or_270(unsigned int rotation)
{
 return rotation & ((1<<1) | (1<<3));
}



int drm_plane_create_alpha_property(struct drm_plane *plane);
int drm_plane_create_rotation_property(struct drm_plane *plane,
           unsigned int rotation,
           unsigned int supported_rotations);
unsigned int drm_rotation_simplify(unsigned int rotation,
       unsigned int supported_rotations);

int drm_plane_create_zpos_property(struct drm_plane *plane,
       unsigned int zpos,
       unsigned int min, unsigned int max);
int drm_plane_create_zpos_immutable_property(struct drm_plane *plane,
          unsigned int zpos);
int drm_atomic_normalize_zpos(struct drm_device *dev,
         struct drm_atomic_state *state);
int drm_plane_create_blend_mode_property(struct drm_plane *plane,
      unsigned int supported_modes);
# 47 "./include/drm/drm_crtc.h" 2

# 1 "./include/drm/drm_debugfs_crc.h" 1
# 33 "./include/drm/drm_debugfs_crc.h"
struct drm_crtc_crc_entry {
 bool has_frame_counter;
 uint32_t frame;
 uint32_t crcs[10];
};
# 53 "./include/drm/drm_debugfs_crc.h"
struct drm_crtc_crc {
 spinlock_t lock;
 const char *source;
 bool opened, overflow;
 struct drm_crtc_crc_entry *entries;
 int head, tail;
 size_t values_cnt;
 wait_queue_head_t wq;
};


int drm_crtc_add_crc_entry(struct drm_crtc *crtc, bool has_frame,
      uint32_t frame, uint32_t *crcs);
# 49 "./include/drm/drm_crtc.h" 2


struct drm_device;
struct drm_mode_set;
struct drm_file;
struct drm_clip_rect;
struct drm_printer;
struct drm_self_refresh_data;
struct device_node;
struct dma_fence;
struct edid;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int64_t U642I64(uint64_t val)
{
 return (int64_t)*((int64_t *)&val);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t I642U64(int64_t val)
{
 return (uint64_t)*((uint64_t *)&val);
}

struct drm_crtc;
struct drm_pending_vblank_event;
struct drm_plane;
struct drm_bridge;
struct drm_atomic_state;

struct drm_crtc_helper_funcs;
struct drm_plane_helper_funcs;
# 99 "./include/drm/drm_crtc.h"
struct drm_crtc_state {

 struct drm_crtc *crtc;






 bool enable;
# 123 "./include/drm/drm_crtc.h"
 bool active;





 bool planes_changed : 1;
# 141 "./include/drm/drm_crtc.h"
 bool mode_changed : 1;






 bool active_changed : 1;
# 159 "./include/drm/drm_crtc.h"
 bool connectors_changed : 1;





 bool zpos_changed : 1;





 bool color_mgmt_changed : 1;
# 207 "./include/drm/drm_crtc.h"
 bool no_vblank : 1;





 u32 plane_mask;





 u32 connector_mask;





 u32 encoder_mask;
# 240 "./include/drm/drm_crtc.h"
 struct drm_display_mode adjusted_mode;
# 257 "./include/drm/drm_crtc.h"
 struct drm_display_mode mode;





 struct drm_property_blob *mode_blob;
# 272 "./include/drm/drm_crtc.h"
 struct drm_property_blob *degamma_lut;







 struct drm_property_blob *ctm;
# 289 "./include/drm/drm_crtc.h"
 struct drm_property_blob *gamma_lut;







 u32 target_vblank;







 bool async_flip;
# 314 "./include/drm/drm_crtc.h"
 bool vrr_enabled;
# 325 "./include/drm/drm_crtc.h"
 bool self_refresh_active;






 enum drm_scaling_filter scaling_filter;
# 389 "./include/drm/drm_crtc.h"
 struct drm_pending_vblank_event *event;
# 398 "./include/drm/drm_crtc.h"
 struct drm_crtc_commit *commit;


 struct drm_atomic_state *state;
};
# 416 "./include/drm/drm_crtc.h"
struct drm_crtc_funcs {
# 427 "./include/drm/drm_crtc.h"
 void (*reset)(struct drm_crtc *crtc);
# 450 "./include/drm/drm_crtc.h"
 int (*cursor_set)(struct drm_crtc *crtc, struct drm_file *file_priv,
     uint32_t handle, uint32_t width, uint32_t height);
# 472 "./include/drm/drm_crtc.h"
 int (*cursor_set2)(struct drm_crtc *crtc, struct drm_file *file_priv,
      uint32_t handle, uint32_t width, uint32_t height,
      int32_t hot_x, int32_t hot_y);
# 492 "./include/drm/drm_crtc.h"
 int (*cursor_move)(struct drm_crtc *crtc, int x, int y);
# 507 "./include/drm/drm_crtc.h"
 int (*gamma_set)(struct drm_crtc *crtc, u16 *r, u16 *g, u16 *b,
    uint32_t size,
    struct drm_modeset_acquire_ctx *ctx);
# 518 "./include/drm/drm_crtc.h"
 void (*destroy)(struct drm_crtc *crtc);
# 534 "./include/drm/drm_crtc.h"
 int (*set_config)(struct drm_mode_set *set,
     struct drm_modeset_acquire_ctx *ctx);
# 590 "./include/drm/drm_crtc.h"
 int (*page_flip)(struct drm_crtc *crtc,
    struct drm_framebuffer *fb,
    struct drm_pending_vblank_event *event,
    uint32_t flags,
    struct drm_modeset_acquire_ctx *ctx);
# 609 "./include/drm/drm_crtc.h"
 int (*page_flip_target)(struct drm_crtc *crtc,
    struct drm_framebuffer *fb,
    struct drm_pending_vblank_event *event,
    uint32_t flags, uint32_t target,
    struct drm_modeset_acquire_ctx *ctx);
# 629 "./include/drm/drm_crtc.h"
 int (*set_property)(struct drm_crtc *crtc,
       struct drm_property *property, uint64_t val);
# 663 "./include/drm/drm_crtc.h"
 struct drm_crtc_state *(*atomic_duplicate_state)(struct drm_crtc *crtc);
# 673 "./include/drm/drm_crtc.h"
 void (*atomic_destroy_state)(struct drm_crtc *crtc,
         struct drm_crtc_state *state);
# 718 "./include/drm/drm_crtc.h"
 int (*atomic_set_property)(struct drm_crtc *crtc,
       struct drm_crtc_state *state,
       struct drm_property *property,
       uint64_t val);
# 740 "./include/drm/drm_crtc.h"
 int (*atomic_get_property)(struct drm_crtc *crtc,
       const struct drm_crtc_state *state,
       struct drm_property *property,
       uint64_t *val);
# 758 "./include/drm/drm_crtc.h"
 int (*late_register)(struct drm_crtc *crtc);
# 769 "./include/drm/drm_crtc.h"
 void (*early_unregister)(struct drm_crtc *crtc);
# 798 "./include/drm/drm_crtc.h"
 int (*set_crc_source)(struct drm_crtc *crtc, const char *source);
# 814 "./include/drm/drm_crtc.h"
 int (*verify_crc_source)(struct drm_crtc *crtc, const char *source,
     size_t *values_cnt);
# 836 "./include/drm/drm_crtc.h"
 const char *const *(*get_crc_sources)(struct drm_crtc *crtc,
           size_t *count);
# 848 "./include/drm/drm_crtc.h"
 void (*atomic_print_state)(struct drm_printer *p,
       const struct drm_crtc_state *state);
# 875 "./include/drm/drm_crtc.h"
 u32 (*get_vblank_counter)(struct drm_crtc *crtc);
# 888 "./include/drm/drm_crtc.h"
 int (*enable_vblank)(struct drm_crtc *crtc);







 void (*disable_vblank)(struct drm_crtc *crtc);
# 934 "./include/drm/drm_crtc.h"
 bool (*get_vblank_timestamp)(struct drm_crtc *crtc,
         int *max_error,
         ktime_t *vblank_time,
         bool in_vblank_irq);
};







struct drm_crtc {

 struct drm_device *dev;

 struct device_node *port;







 struct list_head head;


 char *name;
# 973 "./include/drm/drm_crtc.h"
 struct drm_modeset_lock mutex;


 struct drm_mode_object base;
# 985 "./include/drm/drm_crtc.h"
 struct drm_plane *primary;
# 994 "./include/drm/drm_crtc.h"
 struct drm_plane *cursor;





 unsigned index;
# 1009 "./include/drm/drm_crtc.h"
 int cursor_x;







 int cursor_y;
# 1027 "./include/drm/drm_crtc.h"
 bool enabled;
# 1037 "./include/drm/drm_crtc.h"
 struct drm_display_mode mode;
# 1053 "./include/drm/drm_crtc.h"
 struct drm_display_mode hwmode;
# 1062 "./include/drm/drm_crtc.h"
 int x;







 int y;


 const struct drm_crtc_funcs *funcs;





 uint32_t gamma_size;





 uint16_t *gamma_store;


 const struct drm_crtc_helper_funcs *helper_private;


 struct drm_object_properties properties;





 struct drm_property *scaling_filter_property;
# 1112 "./include/drm/drm_crtc.h"
 struct drm_crtc_state *state;
# 1129 "./include/drm/drm_crtc.h"
 struct list_head commit_list;






 spinlock_t commit_lock;







 struct dentry *debugfs_entry;







 struct drm_crtc_crc crc;






 unsigned int fence_context;






 spinlock_t fence_lock;






 unsigned long fence_seqno;






 char timeline_name[32];






 struct drm_self_refresh_data *self_refresh_data;
};
# 1203 "./include/drm/drm_crtc.h"
struct drm_mode_set {
 struct drm_framebuffer *fb;
 struct drm_crtc *crtc;
 struct drm_display_mode *mode;

 uint32_t x;
 uint32_t y;

 struct drm_connector **connectors;
 size_t num_connectors;
};



__attribute__((__format__(printf, 6, 7)))
int drm_crtc_init_with_planes(struct drm_device *dev,
         struct drm_crtc *crtc,
         struct drm_plane *primary,
         struct drm_plane *cursor,
         const struct drm_crtc_funcs *funcs,
         const char *name, ...);
void drm_crtc_cleanup(struct drm_crtc *crtc);

__attribute__((__format__(printf, 7, 8)))
void *__drmm_crtc_alloc_with_planes(struct drm_device *dev,
        size_t size, size_t offset,
        struct drm_plane *primary,
        struct drm_plane *cursor,
        const struct drm_crtc_funcs *funcs,
        const char *name, ...);
# 1266 "./include/drm/drm_crtc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_crtc_index(const struct drm_crtc *crtc)
{
 return crtc->index;
}
# 1278 "./include/drm/drm_crtc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t drm_crtc_mask(const struct drm_crtc *crtc)
{
 return 1 << drm_crtc_index(crtc);
}

int drm_mode_set_config_internal(struct drm_mode_set *set);
struct drm_crtc *drm_crtc_from_index(struct drm_device *dev, int idx);
# 1296 "./include/drm/drm_crtc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc *drm_crtc_find(struct drm_device *dev,
  struct drm_file *file_priv,
  uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xcccccccc);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_351(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_crtc *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_351(); } while (0); ((struct drm_crtc *)(__mptr - __builtin_offsetof(struct drm_crtc, base))); }) : ((void *)0);
}
# 1325 "./include/drm/drm_crtc.h"
int drm_crtc_create_scaling_filter_property(struct drm_crtc *crtc,
         unsigned int supported_filters);
# 34 "drivers/gpu/drm/radeon/radeon_mode.h" 2

# 1 "./include/drm/drm_encoder.h" 1
# 33 "./include/drm/drm_encoder.h"
struct drm_encoder;






struct drm_encoder_funcs {







 void (*reset)(struct drm_encoder *encoder);
# 57 "./include/drm/drm_encoder.h"
 void (*destroy)(struct drm_encoder *encoder);
# 72 "./include/drm/drm_encoder.h"
 int (*late_register)(struct drm_encoder *encoder);
# 83 "./include/drm/drm_encoder.h"
 void (*early_unregister)(struct drm_encoder *encoder);
};
# 98 "./include/drm/drm_encoder.h"
struct drm_encoder {
 struct drm_device *dev;
 struct list_head head;

 struct drm_mode_object base;
 char *name;
# 130 "./include/drm/drm_encoder.h"
 int encoder_type;





 unsigned index;
# 149 "./include/drm/drm_encoder.h"
 uint32_t possible_crtcs;
# 170 "./include/drm/drm_encoder.h"
 uint32_t possible_clones;






 struct drm_crtc *crtc;





 struct list_head bridge_chain;

 const struct drm_encoder_funcs *funcs;
 const struct drm_encoder_helper_funcs *helper_private;
};



__attribute__((__format__(printf, 5, 6)))
int drm_encoder_init(struct drm_device *dev,
       struct drm_encoder *encoder,
       const struct drm_encoder_funcs *funcs,
       int encoder_type, const char *name, ...);

__attribute__((__format__(printf, 6, 7)))
void *__drmm_encoder_alloc(struct drm_device *dev,
      size_t size, size_t offset,
      const struct drm_encoder_funcs *funcs,
      int encoder_type,
      const char *name, ...);
# 252 "./include/drm/drm_encoder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_encoder_index(const struct drm_encoder *encoder)
{
 return encoder->index;
}
# 264 "./include/drm/drm_encoder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_encoder_mask(const struct drm_encoder *encoder)
{
 return 1 << drm_encoder_index(encoder);
}
# 276 "./include/drm/drm_encoder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_encoder_crtc_ok(struct drm_encoder *encoder,
           struct drm_crtc *crtc)
{
 return !!(encoder->possible_crtcs & drm_crtc_mask(crtc));
}
# 291 "./include/drm/drm_encoder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_encoder *drm_encoder_find(struct drm_device *dev,
         struct drm_file *file_priv,
         uint32_t id)
{
 struct drm_mode_object *mo;

 mo = drm_mode_object_find(dev, file_priv, id, 0xe0e0e0e0);

 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_352(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_encoder *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_352(); } while (0); ((struct drm_encoder *)(__mptr - __builtin_offsetof(struct drm_encoder, base))); }) : ((void *)0);
}

void drm_encoder_cleanup(struct drm_encoder *encoder);
# 36 "drivers/gpu/drm/radeon/radeon_mode.h" 2
# 1 "./include/drm/drm_dp_helper.h" 1
# 26 "./include/drm/drm_dp_helper.h"
# 1 "./include/linux/delay.h" 1
# 24 "./include/linux/delay.h"
extern unsigned long loops_per_jiffy;

# 1 "./arch/riscv/include/asm/delay.h" 1
# 10 "./arch/riscv/include/asm/delay.h"
extern unsigned long riscv_timebase;


extern void udelay(unsigned long usecs);


extern void ndelay(unsigned long nsecs);

extern void __delay(unsigned long cycles);
# 27 "./include/linux/delay.h" 2
# 56 "./include/linux/delay.h"
extern unsigned long lpj_fine;
void calibrate_delay(void);
void __attribute__((weak)) calibration_delay_done(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fsleep(unsigned long usecs)
{
 if (usecs <= 10)
  udelay(usecs);
 else if (usecs <= 20000)
  usleep_range(usecs, 2 * usecs);
 else
  msleep((((usecs) + (1000) - 1) / (1000)));
}
# 27 "./include/drm/drm_dp_helper.h" 2




struct drm_device;
struct drm_dp_aux;
struct drm_panel;
# 1323 "./include/drm/drm_dp_helper.h"
enum drm_dp_phy {
 DP_PHY_DPRX,

 DP_PHY_LTTPR1,
 DP_PHY_LTTPR2,
 DP_PHY_LTTPR3,
 DP_PHY_LTTPR4,
 DP_PHY_LTTPR5,
 DP_PHY_LTTPR6,
 DP_PHY_LTTPR7,
 DP_PHY_LTTPR8,

 DP_MAX_LTTPR_COUNT = DP_PHY_LTTPR8,
};
# 1485 "./include/drm/drm_dp_helper.h"
bool drm_dp_channel_eq_ok(const u8 link_status[6],
     int lane_count);
bool drm_dp_clock_recovery_ok(const u8 link_status[6],
         int lane_count);
u8 drm_dp_get_adjust_request_voltage(const u8 link_status[6],
         int lane);
u8 drm_dp_get_adjust_request_pre_emphasis(const u8 link_status[6],
       int lane);
u8 drm_dp_get_adjust_request_post_cursor(const u8 link_status[6],
      unsigned int lane);
# 1504 "./include/drm/drm_dp_helper.h"
void drm_dp_link_train_clock_recovery_delay(const struct drm_dp_aux *aux,
         const u8 dpcd[0xf]);
void drm_dp_lttpr_link_train_clock_recovery_delay(void);
void drm_dp_link_train_channel_eq_delay(const struct drm_dp_aux *aux,
     const u8 dpcd[0xf]);
void drm_dp_lttpr_link_train_channel_eq_delay(const struct drm_dp_aux *aux,
           const u8 caps[3]);

u8 drm_dp_link_rate_to_bw_code(int link_rate);
int drm_dp_bw_code_to_link_rate(u8 link_bw);
# 1534 "./include/drm/drm_dp_helper.h"
struct dp_sdp_header {
 u8 HB0;
 u8 HB1;
 u8 HB2;
 u8 HB3;
} __attribute__((__packed__));
# 1566 "./include/drm/drm_dp_helper.h"
struct dp_sdp {
 struct dp_sdp_header sdp_header;
 u8 db[32];
} __attribute__((__packed__));
# 1590 "./include/drm/drm_dp_helper.h"
enum dp_pixelformat {
 DP_PIXELFORMAT_RGB = 0,
 DP_PIXELFORMAT_YUV444 = 0x1,
 DP_PIXELFORMAT_YUV422 = 0x2,
 DP_PIXELFORMAT_YUV420 = 0x3,
 DP_PIXELFORMAT_Y_ONLY = 0x4,
 DP_PIXELFORMAT_RAW = 0x5,
 DP_PIXELFORMAT_RESERVED = 0x6,
};
# 1624 "./include/drm/drm_dp_helper.h"
enum dp_colorimetry {
 DP_COLORIMETRY_DEFAULT = 0,
 DP_COLORIMETRY_RGB_WIDE_FIXED = 0x1,
 DP_COLORIMETRY_BT709_YCC = 0x1,
 DP_COLORIMETRY_RGB_WIDE_FLOAT = 0x2,
 DP_COLORIMETRY_XVYCC_601 = 0x2,
 DP_COLORIMETRY_OPRGB = 0x3,
 DP_COLORIMETRY_XVYCC_709 = 0x3,
 DP_COLORIMETRY_DCI_P3_RGB = 0x4,
 DP_COLORIMETRY_SYCC_601 = 0x4,
 DP_COLORIMETRY_RGB_CUSTOM = 0x5,
 DP_COLORIMETRY_OPYCC_601 = 0x5,
 DP_COLORIMETRY_BT2020_RGB = 0x6,
 DP_COLORIMETRY_BT2020_CYCC = 0x6,
 DP_COLORIMETRY_BT2020_YCC = 0x7,
};
# 1651 "./include/drm/drm_dp_helper.h"
enum dp_dynamic_range {
 DP_DYNAMIC_RANGE_VESA = 0,
 DP_DYNAMIC_RANGE_CTA = 1,
};
# 1670 "./include/drm/drm_dp_helper.h"
enum dp_content_type {
 DP_CONTENT_TYPE_NOT_DEFINED = 0x00,
 DP_CONTENT_TYPE_GRAPHICS = 0x01,
 DP_CONTENT_TYPE_PHOTO = 0x02,
 DP_CONTENT_TYPE_VIDEO = 0x03,
 DP_CONTENT_TYPE_GAME = 0x04,
};
# 1694 "./include/drm/drm_dp_helper.h"
struct drm_dp_vsc_sdp {
 unsigned char sdp_type;
 unsigned char revision;
 unsigned char length;
 enum dp_pixelformat pixelformat;
 enum dp_colorimetry colorimetry;
 int bpc;
 enum dp_dynamic_range dynamic_range;
 enum dp_content_type content_type;
};

void drm_dp_vsc_sdp_log(const char *level, struct device *dev,
   const struct drm_dp_vsc_sdp *vsc);

int drm_dp_psr_setup_time(const u8 psr_cap[2]);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_dp_max_link_rate(const u8 dpcd[0xf])
{
 return drm_dp_bw_code_to_link_rate(dpcd[0x001]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8
drm_dp_max_lane_count(const u8 dpcd[0xf])
{
 return dpcd[0x002] & 0x1f;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_enhanced_frame_cap(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x11 &&
  (dpcd[0x002] & (1 << 7));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_fast_training_cap(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x11 &&
  (dpcd[0x003] & (1 << 6));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_tps3_supported(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x12 &&
  dpcd[0x002] & (1 << 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_tps4_supported(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x14 &&
  dpcd[0x003] & (1 << 7);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8
drm_dp_training_pattern_mask(const u8 dpcd[0xf])
{
 return (dpcd[0x000] >= 0x14) ? 0xf :
  0x3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_is_branch(const u8 dpcd[0xf])
{
 return dpcd[0x005] & (1 << 0);
}


u8 drm_dp_dsc_sink_max_slice_count(const u8 dsc_dpcd[0xf],
       bool is_edp);
u8 drm_dp_dsc_sink_line_buf_depth(const u8 dsc_dpcd[0xf]);
int drm_dp_dsc_sink_supported_input_bpcs(const u8 dsc_dpc[0xf],
      u8 dsc_bpc[3]);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_sink_supports_dsc(const u8 dsc_dpcd[0xf])
{
 return dsc_dpcd[0x060 - 0x060] &
  (1 << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16
drm_edp_dsc_sink_output_bpp(const u8 dsc_dpcd[0xf])
{
 return dsc_dpcd[0x067 - 0x060] |
  (dsc_dpcd[0x068 - 0x060] &
   (0x3 << 0) <<
   8);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
drm_dp_dsc_sink_max_slice_width(const u8 dsc_dpcd[0xf])
{

 return dsc_dpcd[0x06C - 0x060] *
  320;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_sink_supports_fec(const u8 fec_capable)
{
 return fec_capable & (1 << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_channel_coding_supported(const u8 dpcd[0xf])
{
 return dpcd[0x006] & (1 << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_alternate_scrambler_reset_cap(const u8 dpcd[0xf])
{
 return dpcd[0x00d] &
   (1 << 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_sink_can_do_video_without_timing_msa(const u8 dpcd[0xf])
{
 return dpcd[0x007] &
  (1 << 6);
}
# 1833 "./include/drm/drm_dp_helper.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_edp_backlight_supported(const u8 edp_dpcd[3])
{
 return (edp_dpcd[1] & (1 << 0)) &&
  (edp_dpcd[2] & (1 << 1));
}
# 1852 "./include/drm/drm_dp_helper.h"
struct drm_dp_aux_msg {
 unsigned int address;
 u8 request;
 u8 reply;
 void *buffer;
 size_t size;
};

struct cec_adapter;
struct edid;
struct drm_connector;
# 1871 "./include/drm/drm_dp_helper.h"
struct drm_dp_aux_cec {
 struct mutex lock;
 struct cec_adapter *adap;
 struct drm_connector *connector;
 struct delayed_work unregister_work;
};
# 1891 "./include/drm/drm_dp_helper.h"
struct drm_dp_aux {







 const char *name;





 struct i2c_adapter ddc;





 struct device *dev;
# 1924 "./include/drm/drm_dp_helper.h"
 struct drm_device *drm_dev;





 struct drm_crtc *crtc;
# 1939 "./include/drm/drm_dp_helper.h"
 struct mutex hw_mutex;




 struct work_struct crc_work;




 u8 crc_count;
# 1977 "./include/drm/drm_dp_helper.h"
 ssize_t (*transfer)(struct drm_dp_aux *aux,
       struct drm_dp_aux_msg *msg);




 unsigned i2c_nack_count;



 unsigned i2c_defer_count;



 struct drm_dp_aux_cec cec;



 bool is_remote;
};

ssize_t drm_dp_dpcd_read(struct drm_dp_aux *aux, unsigned int offset,
    void *buffer, size_t size);
ssize_t drm_dp_dpcd_write(struct drm_dp_aux *aux, unsigned int offset,
     void *buffer, size_t size);
# 2012 "./include/drm/drm_dp_helper.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t drm_dp_dpcd_readb(struct drm_dp_aux *aux,
     unsigned int offset, u8 *valuep)
{
 return drm_dp_dpcd_read(aux, offset, valuep, 1);
}
# 2027 "./include/drm/drm_dp_helper.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t drm_dp_dpcd_writeb(struct drm_dp_aux *aux,
      unsigned int offset, u8 value)
{
 return drm_dp_dpcd_write(aux, offset, &value, 1);
}

int drm_dp_read_dpcd_caps(struct drm_dp_aux *aux,
     u8 dpcd[0xf]);

int drm_dp_dpcd_read_link_status(struct drm_dp_aux *aux,
     u8 status[6]);

int drm_dp_dpcd_read_phy_link_status(struct drm_dp_aux *aux,
         enum drm_dp_phy dp_phy,
         u8 link_status[6]);

bool drm_dp_send_real_edid_checksum(struct drm_dp_aux *aux,
        u8 real_edid_checksum);

int drm_dp_read_downstream_info(struct drm_dp_aux *aux,
    const u8 dpcd[0xf],
    u8 downstream_ports[0x10]);
bool drm_dp_downstream_is_type(const u8 dpcd[0xf],
          const u8 port_cap[4], u8 type);
bool drm_dp_downstream_is_tmds(const u8 dpcd[0xf],
          const u8 port_cap[4],
          const struct edid *edid);
int drm_dp_downstream_max_dotclock(const u8 dpcd[0xf],
       const u8 port_cap[4]);
int drm_dp_downstream_max_tmds_clock(const u8 dpcd[0xf],
         const u8 port_cap[4],
         const struct edid *edid);
int drm_dp_downstream_min_tmds_clock(const u8 dpcd[0xf],
         const u8 port_cap[4],
         const struct edid *edid);
int drm_dp_downstream_max_bpc(const u8 dpcd[0xf],
         const u8 port_cap[4],
         const struct edid *edid);
bool drm_dp_downstream_420_passthrough(const u8 dpcd[0xf],
           const u8 port_cap[4]);
bool drm_dp_downstream_444_to_420_conversion(const u8 dpcd[0xf],
          const u8 port_cap[4]);
struct drm_display_mode *drm_dp_downstream_mode(struct drm_device *dev,
      const u8 dpcd[0xf],
      const u8 port_cap[4]);
int drm_dp_downstream_id(struct drm_dp_aux *aux, char id[6]);
void drm_dp_downstream_debug(struct seq_file *m,
        const u8 dpcd[0xf],
        const u8 port_cap[4],
        const struct edid *edid,
        struct drm_dp_aux *aux);
enum drm_mode_subconnector
drm_dp_subconnector_type(const u8 dpcd[0xf],
    const u8 port_cap[4]);
void drm_dp_set_subconnector_property(struct drm_connector *connector,
          enum drm_connector_status status,
          const u8 *dpcd,
          const u8 port_cap[4]);

struct drm_dp_desc;
bool drm_dp_read_sink_count_cap(struct drm_connector *connector,
    const u8 dpcd[0xf],
    const struct drm_dp_desc *desc);
int drm_dp_read_sink_count(struct drm_dp_aux *aux);

int drm_dp_read_lttpr_common_caps(struct drm_dp_aux *aux,
      u8 caps[8]);
int drm_dp_read_lttpr_phy_caps(struct drm_dp_aux *aux,
          enum drm_dp_phy dp_phy,
          u8 caps[3]);
int drm_dp_lttpr_count(const u8 cap[8]);
int drm_dp_lttpr_max_link_rate(const u8 caps[8]);
int drm_dp_lttpr_max_lane_count(const u8 caps[8]);
bool drm_dp_lttpr_voltage_swing_level_3_supported(const u8 caps[3]);
bool drm_dp_lttpr_pre_emphasis_level_3_supported(const u8 caps[3]);

void drm_dp_remote_aux_init(struct drm_dp_aux *aux);
void drm_dp_aux_init(struct drm_dp_aux *aux);
int drm_dp_aux_register(struct drm_dp_aux *aux);
void drm_dp_aux_unregister(struct drm_dp_aux *aux);

int drm_dp_start_crc(struct drm_dp_aux *aux, struct drm_crtc *crtc);
int drm_dp_stop_crc(struct drm_dp_aux *aux);

struct drm_dp_dpcd_ident {
 u8 oui[3];
 u8 device_id[6];
 u8 hw_rev;
 u8 sw_major_rev;
 u8 sw_minor_rev;
} __attribute__((__packed__));






struct drm_dp_desc {
 struct drm_dp_dpcd_ident ident;
 u32 quirks;
};

int drm_dp_read_desc(struct drm_dp_aux *aux, struct drm_dp_desc *desc,
       bool is_branch);
# 2139 "./include/drm/drm_dp_helper.h"
enum drm_dp_quirk {






 DP_DPCD_QUIRK_CONSTANT_N,






 DP_DPCD_QUIRK_NO_PSR,







 DP_DPCD_QUIRK_NO_SINK_COUNT,






 DP_DPCD_QUIRK_DSC_WITHOUT_VIRTUAL_DPCD,






 DP_DPCD_QUIRK_CAN_DO_MAX_LINK_RATE_3_24_GBPS,
};
# 2185 "./include/drm/drm_dp_helper.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_has_quirk(const struct drm_dp_desc *desc, enum drm_dp_quirk quirk)
{
 return desc->quirks & ((((1UL))) << (quirk));
}
# 2202 "./include/drm/drm_dp_helper.h"
struct drm_edp_backlight_info {
 u8 pwmgen_bit_count;
 u8 pwm_freq_pre_divider;
 u16 max;

 bool lsb_reg_used : 1;
 bool aux_enable : 1;
};

int
drm_edp_backlight_init(struct drm_dp_aux *aux, struct drm_edp_backlight_info *bl,
         u16 driver_pwm_freq_hz, const u8 edp_dpcd[3],
         u16 *current_level, u8 *current_mode);
int drm_edp_backlight_set_level(struct drm_dp_aux *aux, const struct drm_edp_backlight_info *bl,
    u16 level);
int drm_edp_backlight_enable(struct drm_dp_aux *aux, const struct drm_edp_backlight_info *bl,
        u16 level);
int drm_edp_backlight_disable(struct drm_dp_aux *aux, const struct drm_edp_backlight_info *bl);




int drm_panel_dp_aux_backlight(struct drm_panel *panel, struct drm_dp_aux *aux);
# 2244 "./include/drm/drm_dp_helper.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_irq(struct drm_dp_aux *aux)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
drm_dp_cec_register_connector(struct drm_dp_aux *aux,
         struct drm_connector *connector)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_unregister_connector(struct drm_dp_aux *aux)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_set_edid(struct drm_dp_aux *aux,
           const struct edid *edid)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_unset_edid(struct drm_dp_aux *aux)
{
}
# 2278 "./include/drm/drm_dp_helper.h"
struct drm_dp_phy_test_params {
 int link_rate;
 u8 num_lanes;
 u8 phy_pattern;
 u8 hbr2_reset[2];
 u8 custom80[10];
 bool enhanced_frame_cap;
};

int drm_dp_get_phy_test_pattern(struct drm_dp_aux *aux,
    struct drm_dp_phy_test_params *data);
int drm_dp_set_phy_test_pattern(struct drm_dp_aux *aux,
    struct drm_dp_phy_test_params *data, u8 dp_rev);
int drm_dp_get_pcon_max_frl_bw(const u8 dpcd[0xf],
          const u8 port_cap[4]);
int drm_dp_pcon_frl_prepare(struct drm_dp_aux *aux, bool enable_frl_ready_hpd);
bool drm_dp_pcon_is_frl_ready(struct drm_dp_aux *aux);
int drm_dp_pcon_frl_configure_1(struct drm_dp_aux *aux, int max_frl_gbps,
    u8 frl_mode);
int drm_dp_pcon_frl_configure_2(struct drm_dp_aux *aux, int max_frl_mask,
    u8 frl_type);
int drm_dp_pcon_reset_frl_config(struct drm_dp_aux *aux);
int drm_dp_pcon_frl_enable(struct drm_dp_aux *aux);

bool drm_dp_pcon_hdmi_link_active(struct drm_dp_aux *aux);
int drm_dp_pcon_hdmi_link_mode(struct drm_dp_aux *aux, u8 *frl_trained_mask);
void drm_dp_pcon_hdmi_frl_link_error_count(struct drm_dp_aux *aux,
        struct drm_connector *connector);
bool drm_dp_pcon_enc_is_dsc_1_2(const u8 pcon_dsc_dpcd[0xC]);
int drm_dp_pcon_dsc_max_slices(const u8 pcon_dsc_dpcd[0xC]);
int drm_dp_pcon_dsc_max_slice_width(const u8 pcon_dsc_dpcd[0xC]);
int drm_dp_pcon_dsc_bpp_incr(const u8 pcon_dsc_dpcd[0xC]);
int drm_dp_pcon_pps_default(struct drm_dp_aux *aux);
int drm_dp_pcon_pps_override_buf(struct drm_dp_aux *aux, u8 pps_buf[128]);
int drm_dp_pcon_pps_override_param(struct drm_dp_aux *aux, u8 pps_param[6]);
bool drm_dp_downstream_rgb_to_ycbcr_conversion(const u8 dpcd[0xf],
            const u8 port_cap[4], u8 color_spc);
int drm_dp_pcon_convert_rgb_to_ycbcr(struct drm_dp_aux *aux, u8 color_spc);
# 37 "drivers/gpu/drm/radeon/radeon_mode.h" 2
# 1 "./include/drm/drm_dp_mst_helper.h" 1
# 27 "./include/drm/drm_dp_mst_helper.h"
# 1 "./include/drm/drm_atomic.h" 1
# 72 "./include/drm/drm_atomic.h"
struct drm_crtc_commit {





 struct drm_crtc *crtc;
# 87 "./include/drm/drm_atomic.h"
 struct kref ref;
# 101 "./include/drm/drm_atomic.h"
 struct completion flip_done;
# 119 "./include/drm/drm_atomic.h"
 struct completion hw_done;
# 133 "./include/drm/drm_atomic.h"
 struct completion cleanup_done;







 struct list_head commit_entry;






 struct drm_pending_vblank_event *event;
# 157 "./include/drm/drm_atomic.h"
 bool abort_completion;
};

struct __drm_planes_state {
 struct drm_plane *ptr;
 struct drm_plane_state *state, *old_state, *new_state;
};

struct __drm_crtcs_state {
 struct drm_crtc *ptr;
 struct drm_crtc_state *state, *old_state, *new_state;
# 177 "./include/drm/drm_atomic.h"
 struct drm_crtc_commit *commit;

 s32 *out_fence_ptr;
 u64 last_vblank_count;
};

struct __drm_connnectors_state {
 struct drm_connector *ptr;
 struct drm_connector_state *state, *old_state, *new_state;







 s32 *out_fence_ptr;
};

struct drm_private_obj;
struct drm_private_state;
# 209 "./include/drm/drm_atomic.h"
struct drm_private_state_funcs {
# 221 "./include/drm/drm_atomic.h"
 struct drm_private_state *(*atomic_duplicate_state)(struct drm_private_obj *obj);






 void (*atomic_destroy_state)(struct drm_private_obj *obj,
         struct drm_private_state *state);
};
# 274 "./include/drm/drm_atomic.h"
struct drm_private_obj {




 struct list_head head;




 struct drm_modeset_lock lock;




 struct drm_private_state *state;







 const struct drm_private_state_funcs *funcs;
};
# 320 "./include/drm/drm_atomic.h"
struct drm_private_state {
 struct drm_atomic_state *state;
};

struct __drm_private_objs_state {
 struct drm_private_obj *ptr;
 struct drm_private_state *state, *old_state, *new_state;
};
# 346 "./include/drm/drm_atomic.h"
struct drm_atomic_state {
 struct kref ref;

 struct drm_device *dev;
# 359 "./include/drm/drm_atomic.h"
 bool allow_modeset : 1;
# 371 "./include/drm/drm_atomic.h"
 bool legacy_cursor_update : 1;
 bool async_update : 1;
# 381 "./include/drm/drm_atomic.h"
 bool duplicated : 1;
 struct __drm_planes_state *planes;
 struct __drm_crtcs_state *crtcs;
 int num_connector;
 struct __drm_connnectors_state *connectors;
 int num_private_objs;
 struct __drm_private_objs_state *private_objs;

 struct drm_modeset_acquire_ctx *acquire_ctx;
# 401 "./include/drm/drm_atomic.h"
 struct drm_crtc_commit *fake_commit;







 struct work_struct commit_work;
};

void __drm_crtc_commit_free(struct kref *kref);
# 423 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_commit *drm_crtc_commit_get(struct drm_crtc_commit *commit)
{
 kref_get(&commit->ref);
 return commit;
}
# 436 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_crtc_commit_put(struct drm_crtc_commit *commit)
{
 kref_put(&commit->ref, __drm_crtc_commit_free);
}

int drm_crtc_commit_wait(struct drm_crtc_commit *commit);

struct drm_atomic_state * __attribute__((__warn_unused_result__))
drm_atomic_state_alloc(struct drm_device *dev);
void drm_atomic_state_clear(struct drm_atomic_state *state);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_atomic_state *
drm_atomic_state_get(struct drm_atomic_state *state)
{
 kref_get(&state->ref);
 return state;
}

void __drm_atomic_state_free(struct kref *ref);
# 469 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_atomic_state_put(struct drm_atomic_state *state)
{
 kref_put(&state->ref, __drm_atomic_state_free);
}

int __attribute__((__warn_unused_result__))
drm_atomic_state_init(struct drm_device *dev, struct drm_atomic_state *state);
void drm_atomic_state_default_clear(struct drm_atomic_state *state);
void drm_atomic_state_default_release(struct drm_atomic_state *state);

struct drm_crtc_state * __attribute__((__warn_unused_result__))
drm_atomic_get_crtc_state(struct drm_atomic_state *state,
     struct drm_crtc *crtc);
struct drm_plane_state * __attribute__((__warn_unused_result__))
drm_atomic_get_plane_state(struct drm_atomic_state *state,
      struct drm_plane *plane);
struct drm_connector_state * __attribute__((__warn_unused_result__))
drm_atomic_get_connector_state(struct drm_atomic_state *state,
          struct drm_connector *connector);

void drm_atomic_private_obj_init(struct drm_device *dev,
     struct drm_private_obj *obj,
     struct drm_private_state *state,
     const struct drm_private_state_funcs *funcs);
void drm_atomic_private_obj_fini(struct drm_private_obj *obj);

struct drm_private_state * __attribute__((__warn_unused_result__))
drm_atomic_get_private_obj_state(struct drm_atomic_state *state,
     struct drm_private_obj *obj);
struct drm_private_state *
drm_atomic_get_old_private_obj_state(struct drm_atomic_state *state,
         struct drm_private_obj *obj);
struct drm_private_state *
drm_atomic_get_new_private_obj_state(struct drm_atomic_state *state,
         struct drm_private_obj *obj);

struct drm_connector *
drm_atomic_get_old_connector_for_encoder(struct drm_atomic_state *state,
      struct drm_encoder *encoder);
struct drm_connector *
drm_atomic_get_new_connector_for_encoder(struct drm_atomic_state *state,
      struct drm_encoder *encoder);
# 523 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_state *
drm_atomic_get_existing_crtc_state(struct drm_atomic_state *state,
       struct drm_crtc *crtc)
{
 return state->crtcs[drm_crtc_index(crtc)].state;
}
# 538 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_state *
drm_atomic_get_old_crtc_state(struct drm_atomic_state *state,
         struct drm_crtc *crtc)
{
 return state->crtcs[drm_crtc_index(crtc)].old_state;
}
# 552 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_state *
drm_atomic_get_new_crtc_state(struct drm_atomic_state *state,
         struct drm_crtc *crtc)
{
 return state->crtcs[drm_crtc_index(crtc)].new_state;
}
# 570 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane_state *
drm_atomic_get_existing_plane_state(struct drm_atomic_state *state,
        struct drm_plane *plane)
{
 return state->planes[drm_plane_index(plane)].state;
}
# 585 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane_state *
drm_atomic_get_old_plane_state(struct drm_atomic_state *state,
          struct drm_plane *plane)
{
 return state->planes[drm_plane_index(plane)].old_state;
}
# 600 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane_state *
drm_atomic_get_new_plane_state(struct drm_atomic_state *state,
          struct drm_plane *plane)
{
 return state->planes[drm_plane_index(plane)].new_state;
}
# 618 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector_state *
drm_atomic_get_existing_connector_state(struct drm_atomic_state *state,
     struct drm_connector *connector)
{
 int index = drm_connector_index(connector);

 if (index >= state->num_connector)
  return ((void *)0);

 return state->connectors[index].state;
}
# 638 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector_state *
drm_atomic_get_old_connector_state(struct drm_atomic_state *state,
       struct drm_connector *connector)
{
 int index = drm_connector_index(connector);

 if (index >= state->num_connector)
  return ((void *)0);

 return state->connectors[index].old_state;
}
# 658 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector_state *
drm_atomic_get_new_connector_state(struct drm_atomic_state *state,
       struct drm_connector *connector)
{
 int index = drm_connector_index(connector);

 if (index >= state->num_connector)
  return ((void *)0);

 return state->connectors[index].new_state;
}
# 696 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct drm_plane_state *
__drm_atomic_get_current_plane_state(struct drm_atomic_state *state,
         struct drm_plane *plane)
{
 if (state->planes[drm_plane_index(plane)].state)
  return state->planes[drm_plane_index(plane)].state;

 return plane->state;
}

int __attribute__((__warn_unused_result__))
drm_atomic_add_encoder_bridges(struct drm_atomic_state *state,
          struct drm_encoder *encoder);
int __attribute__((__warn_unused_result__))
drm_atomic_add_affected_connectors(struct drm_atomic_state *state,
       struct drm_crtc *crtc);
int __attribute__((__warn_unused_result__))
drm_atomic_add_affected_planes(struct drm_atomic_state *state,
          struct drm_crtc *crtc);

int __attribute__((__warn_unused_result__)) drm_atomic_check_only(struct drm_atomic_state *state);
int __attribute__((__warn_unused_result__)) drm_atomic_commit(struct drm_atomic_state *state);
int __attribute__((__warn_unused_result__)) drm_atomic_nonblocking_commit(struct drm_atomic_state *state);

void drm_state_dump(struct drm_device *dev, struct drm_printer *p);
# 1028 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_atomic_crtc_needs_modeset(const struct drm_crtc_state *state)
{
 return state->mode_changed || state->active_changed ||
        state->connectors_changed;
}
# 1044 "./include/drm/drm_atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_atomic_crtc_effectively_active(const struct drm_crtc_state *state)
{
 return state->active || state->self_refresh_active;
}
# 1066 "./include/drm/drm_atomic.h"
struct drm_bus_cfg {







 u32 format;




 u32 flags;
};




struct drm_bridge_state {



 struct drm_private_state base;




 struct drm_bridge *bridge;




 struct drm_bus_cfg input_bus_cfg;




 struct drm_bus_cfg output_bus_cfg;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_bridge_state *
drm_priv_to_bridge_state(struct drm_private_state *priv)
{
 return ({ void *__mptr = (void *)(priv); do { extern void __compiletime_assert_353(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(priv)), typeof(((struct drm_bridge_state *)0)->base)) && !__builtin_types_compatible_p(typeof(*(priv)), typeof(void))))) __compiletime_assert_353(); } while (0); ((struct drm_bridge_state *)(__mptr - __builtin_offsetof(struct drm_bridge_state, base))); });
}

struct drm_bridge_state *
drm_atomic_get_bridge_state(struct drm_atomic_state *state,
       struct drm_bridge *bridge);
struct drm_bridge_state *
drm_atomic_get_old_bridge_state(struct drm_atomic_state *state,
    struct drm_bridge *bridge);
struct drm_bridge_state *
drm_atomic_get_new_bridge_state(struct drm_atomic_state *state,
    struct drm_bridge *bridge);
# 28 "./include/drm/drm_dp_mst_helper.h" 2
# 49 "./include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_branch;
# 58 "./include/drm/drm_dp_mst_helper.h"
struct drm_dp_vcpi {
 int vcpi;
 int pbn;
 int aligned_pbn;
 int num_slots;
};
# 98 "./include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_port {




 struct kref topology_kref;






 struct kref malloc_kref;
# 120 "./include/drm/drm_dp_mst_helper.h"
 u8 port_num;
 bool input;
 bool mcs;
 bool ddps;
 u8 pdt;
 bool ldps;
 u8 dpcd_rev;
 u8 num_sdp_streams;
 u8 num_sdp_stream_sinks;
 uint16_t full_pbn;
 struct list_head next;
# 141 "./include/drm/drm_dp_mst_helper.h"
 struct drm_dp_mst_branch *mstb;
 struct drm_dp_aux aux;
 struct drm_dp_mst_branch *parent;

 struct drm_dp_vcpi vcpi;
 struct drm_connector *connector;
 struct drm_dp_mst_topology_mgr *mgr;





 struct edid *cached_edid;




 bool has_audio;





 bool fec_capable;
};


struct drm_dp_sideband_msg_hdr {
 u8 lct;
 u8 lcr;
 u8 rad[8];
 bool broadcast;
 bool path_msg;
 u8 msg_len;
 bool somt;
 bool eomt;
 bool seqno;
};

struct drm_dp_sideband_msg_rx {
 u8 chunk[48];
 u8 msg[256];
 u8 curchunk_len;
 u8 curchunk_idx;
 u8 curchunk_hdrlen;
 u8 curlen;
 bool have_somt;
 bool have_eomt;
 struct drm_dp_sideband_msg_hdr initial_hdr;
};
# 207 "./include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_branch {




 struct kref topology_kref;






 struct kref malloc_kref;
# 233 "./include/drm/drm_dp_mst_helper.h"
 struct list_head destroy_next;

 u8 rad[8];
 u8 lct;
 int num_ports;
# 249 "./include/drm/drm_dp_mst_helper.h"
 struct list_head ports;

 struct drm_dp_mst_port *port_parent;
 struct drm_dp_mst_topology_mgr *mgr;

 bool link_address_sent;


 u8 guid[16];
};


struct drm_dp_nak_reply {
 u8 guid[16];
 u8 reason;
 u8 nak_data;
};

struct drm_dp_link_address_ack_reply {
 u8 guid[16];
 u8 nports;
 struct drm_dp_link_addr_reply_port {
  bool input_port;
  u8 peer_device_type;
  u8 port_number;
  bool mcs;
  bool ddps;
  bool legacy_device_plug_status;
  u8 dpcd_revision;
  u8 peer_guid[16];
  u8 num_sdp_streams;
  u8 num_sdp_stream_sinks;
 } ports[16];
};

struct drm_dp_remote_dpcd_read_ack_reply {
 u8 port_number;
 u8 num_bytes;
 u8 bytes[255];
};

struct drm_dp_remote_dpcd_write_ack_reply {
 u8 port_number;
};

struct drm_dp_remote_dpcd_write_nak_reply {
 u8 port_number;
 u8 reason;
 u8 bytes_written_before_failure;
};

struct drm_dp_remote_i2c_read_ack_reply {
 u8 port_number;
 u8 num_bytes;
 u8 bytes[255];
};

struct drm_dp_remote_i2c_read_nak_reply {
 u8 port_number;
 u8 nak_reason;
 u8 i2c_nak_transaction;
};

struct drm_dp_remote_i2c_write_ack_reply {
 u8 port_number;
};

struct drm_dp_query_stream_enc_status_ack_reply {

 u8 stream_id;


 bool reply_signed;


 bool unauthorizable_device_present;
 bool legacy_device_present;
 bool query_capable_device_present;


 bool hdcp_1x_device_present;
 bool hdcp_2x_device_present;


 bool auth_completed;


 bool encryption_enabled;


 bool repeater_present;


 u8 state;
};


struct drm_dp_allocate_payload {
 u8 port_number;
 u8 number_sdp_streams;
 u8 vcpi;
 u16 pbn;
 u8 sdp_stream_sink[16];
};

struct drm_dp_allocate_payload_ack_reply {
 u8 port_number;
 u8 vcpi;
 u16 allocated_pbn;
};

struct drm_dp_connection_status_notify {
 u8 guid[16];
 u8 port_number;
 bool legacy_device_plug_status;
 bool displayport_device_plug_status;
 bool message_capability_status;
 bool input_port;
 u8 peer_device_type;
};

struct drm_dp_remote_dpcd_read {
 u8 port_number;
 u32 dpcd_address;
 u8 num_bytes;
};

struct drm_dp_remote_dpcd_write {
 u8 port_number;
 u32 dpcd_address;
 u8 num_bytes;
 u8 *bytes;
};


struct drm_dp_remote_i2c_read {
 u8 num_transactions;
 u8 port_number;
 struct drm_dp_remote_i2c_read_tx {
  u8 i2c_dev_id;
  u8 num_bytes;
  u8 *bytes;
  u8 no_stop_bit;
  u8 i2c_transaction_delay;
 } transactions[4];
 u8 read_i2c_device_id;
 u8 num_bytes_read;
};

struct drm_dp_remote_i2c_write {
 u8 port_number;
 u8 write_i2c_device_id;
 u8 num_bytes;
 u8 *bytes;
};

struct drm_dp_query_stream_enc_status {
 u8 stream_id;
 u8 client_id[7];
 u8 stream_event;
 bool valid_stream_event;
 u8 stream_behavior;
 u8 valid_stream_behavior;
};


struct drm_dp_port_number_req {
 u8 port_number;
};

struct drm_dp_enum_path_resources_ack_reply {
 u8 port_number;
 bool fec_capable;
 u16 full_payload_bw_number;
 u16 avail_payload_bw_number;
};


struct drm_dp_port_number_rep {
 u8 port_number;
};

struct drm_dp_query_payload {
 u8 port_number;
 u8 vcpi;
};

struct drm_dp_resource_status_notify {
 u8 port_number;
 u8 guid[16];
 u16 available_pbn;
};

struct drm_dp_query_payload_ack_reply {
 u8 port_number;
 u16 allocated_pbn;
};

struct drm_dp_sideband_msg_req_body {
 u8 req_type;
 union ack_req {
  struct drm_dp_connection_status_notify conn_stat;
  struct drm_dp_port_number_req port_num;
  struct drm_dp_resource_status_notify resource_stat;

  struct drm_dp_query_payload query_payload;
  struct drm_dp_allocate_payload allocate_payload;

  struct drm_dp_remote_dpcd_read dpcd_read;
  struct drm_dp_remote_dpcd_write dpcd_write;

  struct drm_dp_remote_i2c_read i2c_read;
  struct drm_dp_remote_i2c_write i2c_write;

  struct drm_dp_query_stream_enc_status enc_status;
 } u;
};

struct drm_dp_sideband_msg_reply_body {
 u8 reply_type;
 u8 req_type;
 union ack_replies {
  struct drm_dp_nak_reply nak;
  struct drm_dp_link_address_ack_reply link_addr;
  struct drm_dp_port_number_rep port_number;

  struct drm_dp_enum_path_resources_ack_reply path_resources;
  struct drm_dp_allocate_payload_ack_reply allocate_payload;
  struct drm_dp_query_payload_ack_reply query_payload;

  struct drm_dp_remote_dpcd_read_ack_reply remote_dpcd_read_ack;
  struct drm_dp_remote_dpcd_write_ack_reply remote_dpcd_write_ack;
  struct drm_dp_remote_dpcd_write_nak_reply remote_dpcd_write_nack;

  struct drm_dp_remote_i2c_read_ack_reply remote_i2c_read_ack;
  struct drm_dp_remote_i2c_read_nak_reply remote_i2c_read_nack;
  struct drm_dp_remote_i2c_write_ack_reply remote_i2c_write_ack;

  struct drm_dp_query_stream_enc_status_ack_reply enc_status;
 } u;
};
# 501 "./include/drm/drm_dp_mst_helper.h"
struct drm_dp_sideband_msg_tx {
 u8 msg[256];
 u8 chunk[48];
 u8 cur_offset;
 u8 cur_len;
 struct drm_dp_mst_branch *dst;
 struct list_head next;
 int seqno;
 int state;
 bool path_msg;
 struct drm_dp_sideband_msg_reply_body reply;
};


struct drm_dp_mst_topology_mgr;
struct drm_dp_mst_topology_cbs {

 struct drm_connector *(*add_connector)(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port, const char *path);
# 527 "./include/drm/drm_dp_mst_helper.h"
 void (*poll_hpd_irq)(struct drm_dp_mst_topology_mgr *mgr);
};







struct drm_dp_payload {
 int payload_state;
 int start_slot;
 int num_slots;
 int vcpi;
};



struct drm_dp_vcpi_allocation {
 struct drm_dp_mst_port *port;
 int vcpi;
 int pbn;
 bool dsc_enabled;
 struct list_head next;
};

struct drm_dp_mst_topology_state {
 struct drm_private_state base;
 struct list_head vcpis;
 struct drm_dp_mst_topology_mgr *mgr;
};
# 568 "./include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_topology_mgr {



 struct drm_private_obj base;




 struct drm_device *dev;



 const struct drm_dp_mst_topology_cbs *cbs;




 int max_dpcd_transaction_bytes;




 struct drm_dp_aux *aux;



 int max_payloads;



 int max_lane_count;



 int max_link_rate;




 int conn_base_id;




 struct drm_dp_sideband_msg_rx up_req_recv;





 struct drm_dp_sideband_msg_rx down_rep_recv;





 struct mutex lock;






 struct mutex probe_lock;





 bool mst_state : 1;





 bool payload_id_table_cleared : 1;




 struct drm_dp_mst_branch *mst_primary;




 u8 dpcd[0xf];



 u8 sink_count;



 int pbn_div;




 const struct drm_private_state_funcs *funcs;




 struct mutex qlock;




 struct list_head tx_msg_downq;




 struct mutex payload_lock;





 struct drm_dp_vcpi **proposed_vcpis;




 struct drm_dp_payload *payloads;





 unsigned long payload_mask;



 unsigned long vcpi_mask;




 wait_queue_head_t tx_waitq;



 struct work_struct work;




 struct work_struct tx_work;




 struct list_head destroy_port_list;




 struct list_head destroy_branch_device_list;




 struct mutex delayed_destroy_lock;






 struct workqueue_struct *delayed_destroy_wq;





 struct work_struct delayed_destroy_work;





 struct list_head up_req_list;



 struct mutex up_req_lock;





 struct work_struct up_req_work;
# 771 "./include/drm/drm_dp_mst_helper.h"
};

int drm_dp_mst_topology_mgr_init(struct drm_dp_mst_topology_mgr *mgr,
     struct drm_device *dev, struct drm_dp_aux *aux,
     int max_dpcd_transaction_bytes,
     int max_payloads,
     int max_lane_count, int max_link_rate,
     int conn_base_id);

void drm_dp_mst_topology_mgr_destroy(struct drm_dp_mst_topology_mgr *mgr);

bool drm_dp_read_mst_cap(struct drm_dp_aux *aux, const u8 dpcd[0xf]);
int drm_dp_mst_topology_mgr_set_mst(struct drm_dp_mst_topology_mgr *mgr, bool mst_state);

int drm_dp_mst_hpd_irq(struct drm_dp_mst_topology_mgr *mgr, u8 *esi, bool *handled);


int
drm_dp_mst_detect_port(struct drm_connector *connector,
         struct drm_modeset_acquire_ctx *ctx,
         struct drm_dp_mst_topology_mgr *mgr,
         struct drm_dp_mst_port *port);

struct edid *drm_dp_mst_get_edid(struct drm_connector *connector, struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);

int drm_dp_get_vc_payload_bw(const struct drm_dp_mst_topology_mgr *mgr,
        int link_rate, int link_lane_count);

int drm_dp_calc_pbn_mode(int clock, int bpp, bool dsc);

bool drm_dp_mst_allocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
         struct drm_dp_mst_port *port, int pbn, int slots);

int drm_dp_mst_get_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);


void drm_dp_mst_reset_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);


void drm_dp_mst_deallocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
    struct drm_dp_mst_port *port);


int drm_dp_find_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr,
      int pbn);


int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr *mgr);


int drm_dp_update_payload_part2(struct drm_dp_mst_topology_mgr *mgr);

int drm_dp_check_act_status(struct drm_dp_mst_topology_mgr *mgr);

void drm_dp_mst_dump_topology(struct seq_file *m,
         struct drm_dp_mst_topology_mgr *mgr);

void drm_dp_mst_topology_mgr_suspend(struct drm_dp_mst_topology_mgr *mgr);
int __attribute__((__warn_unused_result__))
drm_dp_mst_topology_mgr_resume(struct drm_dp_mst_topology_mgr *mgr,
          bool sync);

ssize_t drm_dp_mst_dpcd_read(struct drm_dp_aux *aux,
        unsigned int offset, void *buffer, size_t size);
ssize_t drm_dp_mst_dpcd_write(struct drm_dp_aux *aux,
         unsigned int offset, void *buffer, size_t size);

int drm_dp_mst_connector_late_register(struct drm_connector *connector,
           struct drm_dp_mst_port *port);
void drm_dp_mst_connector_early_unregister(struct drm_connector *connector,
        struct drm_dp_mst_port *port);

struct drm_dp_mst_topology_state *drm_atomic_get_mst_topology_state(struct drm_atomic_state *state,
            struct drm_dp_mst_topology_mgr *mgr);
int __attribute__((__warn_unused_result__))
drm_dp_atomic_find_vcpi_slots(struct drm_atomic_state *state,
         struct drm_dp_mst_topology_mgr *mgr,
         struct drm_dp_mst_port *port, int pbn,
         int pbn_div);
int drm_dp_mst_atomic_enable_dsc(struct drm_atomic_state *state,
     struct drm_dp_mst_port *port,
     int pbn, int pbn_div,
     bool enable);
int __attribute__((__warn_unused_result__))
drm_dp_mst_add_affected_dsc_crtcs(struct drm_atomic_state *state,
      struct drm_dp_mst_topology_mgr *mgr);
int __attribute__((__warn_unused_result__))
drm_dp_atomic_release_vcpi_slots(struct drm_atomic_state *state,
     struct drm_dp_mst_topology_mgr *mgr,
     struct drm_dp_mst_port *port);
int drm_dp_send_power_updown_phy(struct drm_dp_mst_topology_mgr *mgr,
     struct drm_dp_mst_port *port, bool power_up);
int drm_dp_send_query_stream_enc_status(struct drm_dp_mst_topology_mgr *mgr,
  struct drm_dp_mst_port *port,
  struct drm_dp_query_stream_enc_status_ack_reply *status);
int __attribute__((__warn_unused_result__)) drm_dp_mst_atomic_check(struct drm_atomic_state *state);

void drm_dp_mst_get_port_malloc(struct drm_dp_mst_port *port);
void drm_dp_mst_put_port_malloc(struct drm_dp_mst_port *port);

struct drm_dp_aux *drm_dp_mst_dsc_aux_for_port(struct drm_dp_mst_port *port);

extern const struct drm_private_state_funcs drm_dp_mst_topology_state_funcs;
# 894 "./include/drm/drm_dp_mst_helper.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
__drm_dp_mst_state_iter_get(struct drm_atomic_state *state,
       struct drm_dp_mst_topology_mgr **mgr,
       struct drm_dp_mst_topology_state **old_state,
       struct drm_dp_mst_topology_state **new_state,
       int i)
{
 struct __drm_private_objs_state *objs_state = &state->private_objs[i];

 if (objs_state->ptr->funcs != &drm_dp_mst_topology_state_funcs)
  return false;

 *mgr = ({ void *__mptr = (void *)(objs_state->ptr); do { extern void __compiletime_assert_354(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(objs_state->ptr)), typeof(((struct drm_dp_mst_topology_mgr *)0)->base)) && !__builtin_types_compatible_p(typeof(*(objs_state->ptr)), typeof(void))))) __compiletime_assert_354(); } while (0); ((struct drm_dp_mst_topology_mgr *)(__mptr - __builtin_offsetof(struct drm_dp_mst_topology_mgr, base))); });
 if (old_state)
  *old_state = ({ void *__mptr = (void *)(objs_state->old_state); do { extern void __compiletime_assert_355(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(objs_state->old_state)), typeof(((struct drm_dp_mst_topology_state *)0)->base)) && !__builtin_types_compatible_p(typeof(*(objs_state->old_state)), typeof(void))))) __compiletime_assert_355(); } while (0); ((struct drm_dp_mst_topology_state *)(__mptr - __builtin_offsetof(struct drm_dp_mst_topology_state, base))); });
 if (new_state)
  *new_state = ({ void *__mptr = (void *)(objs_state->new_state); do { extern void __compiletime_assert_356(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(objs_state->new_state)), typeof(((struct drm_dp_mst_topology_state *)0)->base)) && !__builtin_types_compatible_p(typeof(*(objs_state->new_state)), typeof(void))))) __compiletime_assert_356(); } while (0); ((struct drm_dp_mst_topology_state *)(__mptr - __builtin_offsetof(struct drm_dp_mst_topology_state, base))); });

 return true;
}
# 38 "drivers/gpu/drm/radeon/radeon_mode.h" 2
# 1 "./include/drm/drm_fixed.h" 1
# 30 "./include/drm/drm_fixed.h"
typedef union dfixed {
 u32 full;
} fixed20_12;
# 45 "./include/drm/drm_fixed.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dfixed_floor(fixed20_12 A)
{
 u32 non_frac = ((A).full >> 12);

 return (u32)(((non_frac) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dfixed_ceil(fixed20_12 A)
{
 u32 non_frac = ((A).full >> 12);

 if (A.full > (u32)(((non_frac) << 12)))
  return (u32)(((non_frac + 1) << 12));
 else
  return (u32)(((non_frac) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dfixed_div(fixed20_12 A, fixed20_12 B)
{
 u64 tmp = ((u64)A.full << 13);

 ({ uint32_t __base = (B.full); uint32_t __rem; __rem = ((uint64_t)(tmp)) % __base; (tmp) = ((uint64_t)(tmp)) / __base; __rem; });
 tmp += 1;
 tmp /= 2;
 return ((u32)((tmp) & 0xffffffff));
}
# 79 "./include/drm/drm_fixed.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_int2fixp(int a)
{
 return ((s64)a) << 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_fixp2int(s64 a)
{
 return ((s64)a) >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_fixp2int_ceil(s64 a)
{
 if (a > 0)
  return drm_fixp2int(a + ((1ULL << 32) - 1LL));
 else
  return drm_fixp2int(a - ((1ULL << 32) - 1LL));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned drm_fixp_msbset(s64 a)
{
 unsigned shift, sign = (a >> 63) & 1;

 for (shift = 62; shift > 0; --shift)
  if (((a >> shift) & 1) != sign)
   return shift;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_mul(s64 a, s64 b)
{
 unsigned shift = drm_fixp_msbset(a) + drm_fixp_msbset(b);
 s64 result;

 if (shift > 61) {
  shift = shift - 61;
  a >>= (shift >> 1) + (shift & 1);
  b >>= shift >> 1;
 } else
  shift = 0;

 result = a * b;

 if (shift > 32)
  return result << (shift - 32);

 if (shift < 32)
  return result >> (32 - shift);

 return result;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_div(s64 a, s64 b)
{
 unsigned shift = 62 - drm_fixp_msbset(a);
 s64 result;

 a <<= shift;

 if (shift < 32)
  b >>= (32 - shift);

 result = div64_s64(a, b);

 if (shift > 32)
  return result >> (shift - 32);

 return result;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_from_fraction(s64 a, s64 b)
{
 s64 res;
 bool a_neg = a < 0;
 bool b_neg = b < 0;
 u64 a_abs = a_neg ? -a : a;
 u64 b_abs = b_neg ? -b : b;
 u64 rem;


 u64 res_abs = div64_u64_rem(a_abs, b_abs, &rem);


 {
  u32 i = 32;

  do {
   rem <<= 1;
   res_abs <<= 1;
   if (rem >= b_abs) {
    res_abs |= 1;
    rem -= b_abs;
   }
  } while (--i != 0);
 }


 {
  u64 summand = (rem << 1) >= b_abs;

  res_abs += summand;
 }

 res = (s64) res_abs;
 if (a_neg ^ b_neg)
  res = -res;
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_exp(s64 x)
{
 s64 tolerance = div64_s64((1ULL << 32), 1000000);
 s64 sum = (1ULL << 32), term, y = x;
 u64 count = 1;

 if (x < 0)
  y = -1 * x;

 term = y;

 while (term >= tolerance) {
  sum = sum + term;
  count = count + 1;
  term = drm_fixp_mul(term, div64_s64(y, count));
 }

 if (x < 0)
  sum = drm_fixp_div((1ULL << 32), sum);

 return sum;
}
# 39 "drivers/gpu/drm/radeon/radeon_mode.h" 2
# 1 "./include/drm/drm_crtc_helper.h" 1
# 43 "./include/drm/drm_crtc_helper.h"
# 1 "./include/drm/drm_modeset_helper_vtables.h" 1
# 51 "./include/drm/drm_modeset_helper_vtables.h"
enum mode_set_atomic;
struct drm_writeback_connector;
struct drm_writeback_job;







struct drm_crtc_helper_funcs {
# 78 "./include/drm/drm_modeset_helper_vtables.h"
 void (*dpms)(struct drm_crtc *crtc, int mode);
# 93 "./include/drm/drm_modeset_helper_vtables.h"
 void (*prepare)(struct drm_crtc *crtc);
# 108 "./include/drm/drm_modeset_helper_vtables.h"
 void (*commit)(struct drm_crtc *crtc);
# 141 "./include/drm/drm_modeset_helper_vtables.h"
 enum drm_mode_status (*mode_valid)(struct drm_crtc *crtc,
        const struct drm_display_mode *mode);
# 187 "./include/drm/drm_modeset_helper_vtables.h"
 bool (*mode_fixup)(struct drm_crtc *crtc,
      const struct drm_display_mode *mode,
      struct drm_display_mode *adjusted_mode);
# 206 "./include/drm/drm_modeset_helper_vtables.h"
 int (*mode_set)(struct drm_crtc *crtc, struct drm_display_mode *mode,
   struct drm_display_mode *adjusted_mode, int x, int y,
   struct drm_framebuffer *old_fb);
# 231 "./include/drm/drm_modeset_helper_vtables.h"
 void (*mode_set_nofb)(struct drm_crtc *crtc);
# 250 "./include/drm/drm_modeset_helper_vtables.h"
 int (*mode_set_base)(struct drm_crtc *crtc, int x, int y,
        struct drm_framebuffer *old_fb);
# 267 "./include/drm/drm_modeset_helper_vtables.h"
 int (*mode_set_base_atomic)(struct drm_crtc *crtc,
        struct drm_framebuffer *fb, int x, int y,
        enum mode_set_atomic);
# 302 "./include/drm/drm_modeset_helper_vtables.h"
 void (*disable)(struct drm_crtc *crtc);
# 354 "./include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_crtc *crtc,
       struct drm_atomic_state *state);
# 375 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_begin)(struct drm_crtc *crtc,
        struct drm_atomic_state *state);
# 399 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_flush)(struct drm_crtc *crtc,
        struct drm_atomic_state *state);
# 421 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_enable)(struct drm_crtc *crtc,
         struct drm_atomic_state *state);
# 441 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_disable)(struct drm_crtc *crtc,
          struct drm_atomic_state *state);
# 486 "./include/drm/drm_modeset_helper_vtables.h"
 bool (*get_scanout_position)(struct drm_crtc *crtc,
         bool in_vblank_irq, int *vpos, int *hpos,
         ktime_t *stime, ktime_t *etime,
         const struct drm_display_mode *mode);
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_crtc_helper_add(struct drm_crtc *crtc,
           const struct drm_crtc_helper_funcs *funcs)
{
 crtc->helper_private = funcs;
}







struct drm_encoder_helper_funcs {
# 526 "./include/drm/drm_modeset_helper_vtables.h"
 void (*dpms)(struct drm_encoder *encoder, int mode);
# 559 "./include/drm/drm_modeset_helper_vtables.h"
 enum drm_mode_status (*mode_valid)(struct drm_encoder *crtc,
        const struct drm_display_mode *mode);
# 602 "./include/drm/drm_modeset_helper_vtables.h"
 bool (*mode_fixup)(struct drm_encoder *encoder,
      const struct drm_display_mode *mode,
      struct drm_display_mode *adjusted_mode);
# 619 "./include/drm/drm_modeset_helper_vtables.h"
 void (*prepare)(struct drm_encoder *encoder);
# 634 "./include/drm/drm_modeset_helper_vtables.h"
 void (*commit)(struct drm_encoder *encoder);
# 658 "./include/drm/drm_modeset_helper_vtables.h"
 void (*mode_set)(struct drm_encoder *encoder,
    struct drm_display_mode *mode,
    struct drm_display_mode *adjusted_mode);
# 681 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_mode_set)(struct drm_encoder *encoder,
    struct drm_crtc_state *crtc_state,
    struct drm_connector_state *conn_state);
# 700 "./include/drm/drm_modeset_helper_vtables.h"
 enum drm_connector_status (*detect)(struct drm_encoder *encoder,
         struct drm_connector *connector);
# 723 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_disable)(struct drm_encoder *encoder,
          struct drm_atomic_state *state);
# 746 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_enable)(struct drm_encoder *encoder,
         struct drm_atomic_state *state);
# 780 "./include/drm/drm_modeset_helper_vtables.h"
 void (*disable)(struct drm_encoder *encoder);
# 798 "./include/drm/drm_modeset_helper_vtables.h"
 void (*enable)(struct drm_encoder *encoder);
# 836 "./include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_encoder *encoder,
       struct drm_crtc_state *crtc_state,
       struct drm_connector_state *conn_state);
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_encoder_helper_add(struct drm_encoder *encoder,
       const struct drm_encoder_helper_funcs *funcs)
{
 encoder->helper_private = funcs;
}







struct drm_connector_helper_funcs {
# 901 "./include/drm/drm_modeset_helper_vtables.h"
 int (*get_modes)(struct drm_connector *connector);
# 927 "./include/drm/drm_modeset_helper_vtables.h"
 int (*detect_ctx)(struct drm_connector *connector,
     struct drm_modeset_acquire_ctx *ctx,
     bool force);
# 965 "./include/drm/drm_modeset_helper_vtables.h"
 enum drm_mode_status (*mode_valid)(struct drm_connector *connector,
        struct drm_display_mode *mode);
# 1004 "./include/drm/drm_modeset_helper_vtables.h"
 int (*mode_valid_ctx)(struct drm_connector *connector,
         struct drm_display_mode *mode,
         struct drm_modeset_acquire_ctx *ctx,
         enum drm_mode_status *status);
# 1037 "./include/drm/drm_modeset_helper_vtables.h"
 struct drm_encoder *(*best_encoder)(struct drm_connector *connector);
# 1063 "./include/drm/drm_modeset_helper_vtables.h"
 struct drm_encoder *(*atomic_best_encoder)(struct drm_connector *connector,
         struct drm_atomic_state *state);
# 1097 "./include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_connector *connector,
       struct drm_atomic_state *state);
# 1112 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_commit)(struct drm_connector *connector,
         struct drm_atomic_state *state);
# 1129 "./include/drm/drm_modeset_helper_vtables.h"
 int (*prepare_writeback_job)(struct drm_writeback_connector *connector,
         struct drm_writeback_job *job);
# 1144 "./include/drm/drm_modeset_helper_vtables.h"
 void (*cleanup_writeback_job)(struct drm_writeback_connector *connector,
          struct drm_writeback_job *job);
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_connector_helper_add(struct drm_connector *connector,
         const struct drm_connector_helper_funcs *funcs)
{
 connector->helper_private = funcs;
}







struct drm_plane_helper_funcs {
# 1200 "./include/drm/drm_modeset_helper_vtables.h"
 int (*prepare_fb)(struct drm_plane *plane,
     struct drm_plane_state *new_state);
# 1211 "./include/drm/drm_modeset_helper_vtables.h"
 void (*cleanup_fb)(struct drm_plane *plane,
      struct drm_plane_state *old_state);
# 1249 "./include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_plane *plane,
       struct drm_atomic_state *state);
# 1267 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_update)(struct drm_plane *plane,
         struct drm_atomic_state *state);
# 1291 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_disable)(struct drm_plane *plane,
          struct drm_atomic_state *state);
# 1310 "./include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_async_check)(struct drm_plane *plane,
      struct drm_atomic_state *state);
# 1347 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_async_update)(struct drm_plane *plane,
        struct drm_atomic_state *state);
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_plane_helper_add(struct drm_plane *plane,
     const struct drm_plane_helper_funcs *funcs)
{
 plane->helper_private = funcs;
}






struct drm_mode_config_helper_funcs {
# 1403 "./include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_commit_tail)(struct drm_atomic_state *state);
# 1424 "./include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_commit_setup)(struct drm_atomic_state *state);
};
# 44 "./include/drm/drm_crtc_helper.h" 2
# 1 "./include/drm/drm_modeset_helper.h" 1
# 26 "./include/drm/drm_modeset_helper.h"
struct drm_crtc;
struct drm_crtc_funcs;
struct drm_device;
struct drm_framebuffer;
struct drm_mode_fb_cmd2;

void drm_helper_move_panel_connectors_to_head(struct drm_device *);

void drm_helper_mode_fill_fb_struct(struct drm_device *dev,
        struct drm_framebuffer *fb,
        const struct drm_mode_fb_cmd2 *mode_cmd);

int drm_crtc_init(struct drm_device *dev, struct drm_crtc *crtc,
    const struct drm_crtc_funcs *funcs);

int drm_mode_config_helper_suspend(struct drm_device *dev);
int drm_mode_config_helper_resume(struct drm_device *dev);
# 45 "./include/drm/drm_crtc_helper.h" 2

void drm_helper_disable_unused_functions(struct drm_device *dev);
int drm_crtc_helper_set_config(struct drm_mode_set *set,
          struct drm_modeset_acquire_ctx *ctx);
bool drm_crtc_helper_set_mode(struct drm_crtc *crtc,
         struct drm_display_mode *mode,
         int x, int y,
         struct drm_framebuffer *old_fb);
bool drm_helper_crtc_in_use(struct drm_crtc *crtc);
bool drm_helper_encoder_in_use(struct drm_encoder *encoder);

int drm_helper_connector_dpms(struct drm_connector *connector, int mode);

void drm_helper_resume_force_mode(struct drm_device *dev);
int drm_helper_force_disable_all(struct drm_device *dev);
# 40 "drivers/gpu/drm/radeon/radeon_mode.h" 2

# 1 "./include/linux/i2c-algo-bit.h" 1
# 21 "./include/linux/i2c-algo-bit.h"
struct i2c_algo_bit_data {
 void *data;
 void (*setsda) (void *data, int state);
 void (*setscl) (void *data, int state);
 int (*getsda) (void *data);
 int (*getscl) (void *data);
 int (*pre_xfer) (struct i2c_adapter *);
 void (*post_xfer) (struct i2c_adapter *);


 int udelay;



 int timeout;
 bool can_do_atomic;
};

int i2c_bit_add_bus(struct i2c_adapter *);
int i2c_bit_add_numbered_bus(struct i2c_adapter *);
extern const struct i2c_algorithm i2c_bit_algo;
# 42 "drivers/gpu/drm/radeon/radeon_mode.h" 2

struct radeon_bo;
struct radeon_device;
# 54 "drivers/gpu/drm/radeon/radeon_mode.h"
enum radeon_rmx_type {
 RMX_OFF,
 RMX_FULL,
 RMX_CENTER,
 RMX_ASPECT
};

enum radeon_tv_std {
 TV_STD_NTSC,
 TV_STD_PAL,
 TV_STD_PAL_M,
 TV_STD_PAL_60,
 TV_STD_NTSC_J,
 TV_STD_SCART_PAL,
 TV_STD_SECAM,
 TV_STD_PAL_CN,
 TV_STD_PAL_N,
};

enum radeon_underscan_type {
 UNDERSCAN_OFF,
 UNDERSCAN_ON,
 UNDERSCAN_AUTO,
};

enum radeon_hpd_id {
 RADEON_HPD_1 = 0,
 RADEON_HPD_2,
 RADEON_HPD_3,
 RADEON_HPD_4,
 RADEON_HPD_5,
 RADEON_HPD_6,
 RADEON_HPD_NONE = 0xff,
};

enum radeon_output_csc {
 RADEON_OUTPUT_CSC_BYPASS = 0,
 RADEON_OUTPUT_CSC_TVRGB = 1,
 RADEON_OUTPUT_CSC_YCBCR601 = 2,
 RADEON_OUTPUT_CSC_YCBCR709 = 3,
};
# 112 "drivers/gpu/drm/radeon/radeon_mode.h"
struct radeon_i2c_bus_rec {
 bool valid;

 uint8_t i2c_id;

 enum radeon_hpd_id hpd;

 bool hw_capable;

 bool mm_i2c;

 uint32_t mask_clk_reg;
 uint32_t mask_data_reg;
 uint32_t a_clk_reg;
 uint32_t a_data_reg;
 uint32_t en_clk_reg;
 uint32_t en_data_reg;
 uint32_t y_clk_reg;
 uint32_t y_data_reg;
 uint32_t mask_clk_mask;
 uint32_t mask_data_mask;
 uint32_t a_clk_mask;
 uint32_t a_data_mask;
 uint32_t en_clk_mask;
 uint32_t en_data_mask;
 uint32_t y_clk_mask;
 uint32_t y_data_mask;
};

struct radeon_tmds_pll {
    uint32_t freq;
    uint32_t value;
};
# 165 "drivers/gpu/drm/radeon/radeon_mode.h"
struct radeon_pll {

 uint32_t reference_freq;


 uint32_t reference_div;
 uint32_t post_div;


 uint32_t pll_in_min;
 uint32_t pll_in_max;
 uint32_t pll_out_min;
 uint32_t pll_out_max;
 uint32_t lcd_pll_out_min;
 uint32_t lcd_pll_out_max;
 uint32_t best_vco;


 uint32_t min_ref_div;
 uint32_t max_ref_div;
 uint32_t min_post_div;
 uint32_t max_post_div;
 uint32_t min_feedback_div;
 uint32_t max_feedback_div;
 uint32_t min_frac_feedback_div;
 uint32_t max_frac_feedback_div;


 uint32_t flags;


 uint32_t id;
};

struct radeon_i2c_chan {
 struct i2c_adapter adapter;
 struct drm_device *dev;
 struct i2c_algo_bit_data bit;
 struct radeon_i2c_bus_rec rec;
 struct drm_dp_aux aux;
 bool has_aux;
 struct mutex mutex;
};


enum radeon_connector_table {
 CT_NONE = 0,
 CT_GENERIC,
 CT_IBOOK,
 CT_POWERBOOK_EXTERNAL,
 CT_POWERBOOK_INTERNAL,
 CT_POWERBOOK_VGA,
 CT_MINI_EXTERNAL,
 CT_MINI_INTERNAL,
 CT_IMAC_G5_ISIGHT,
 CT_EMAC,
 CT_RN50_POWER,
 CT_MAC_X800,
 CT_MAC_G5_9600,
 CT_SAM440EP,
 CT_MAC_G4_SILVER
};

enum radeon_dvo_chip {
 DVO_SIL164,
 DVO_SIL1178,
};

struct radeon_fbdev;

struct radeon_afmt {
 bool enabled;
 int offset;
 bool last_buffer_filled_status;
 int id;
};

struct radeon_mode_info {
 struct atom_context *atom_context;
 struct card_info *atom_card_info;
 enum radeon_connector_table connector_table;
 bool mode_config_initialized;
 struct radeon_crtc *crtcs[6];
 struct radeon_afmt *afmt[7];

 struct drm_property *coherent_mode_property;

 struct drm_property *load_detect_property;

 struct drm_property *tv_std_property;

 struct drm_property *tmds_pll_property;

 struct drm_property *underscan_property;
 struct drm_property *underscan_hborder_property;
 struct drm_property *underscan_vborder_property;

 struct drm_property *audio_property;

 struct drm_property *dither_property;

 struct drm_property *output_csc_property;

 struct edid *bios_hardcoded_edid;
 int bios_hardcoded_edid_size;


 struct radeon_fbdev *rfbdev;

 u16 firmware_flags;

 struct radeon_encoder *bl_encoder;


 uint32_t active_encoders;
};





struct radeon_backlight_privdata {
 struct radeon_encoder *encoder;
 uint8_t negative;
};
# 298 "drivers/gpu/drm/radeon/radeon_mode.h"
struct radeon_tv_regs {
 uint32_t tv_uv_adr;
 uint32_t timing_cntl;
 uint32_t hrestart;
 uint32_t vrestart;
 uint32_t frestart;
 uint16_t h_code_timing[32];
 uint16_t v_code_timing[32];
};

struct radeon_atom_ss {
 uint16_t percentage;
 uint16_t percentage_divider;
 uint8_t type;
 uint16_t step;
 uint8_t delay;
 uint8_t range;
 uint8_t refdiv;

 uint16_t rate;
 uint16_t amount;
};

enum radeon_flip_status {
 RADEON_FLIP_NONE,
 RADEON_FLIP_PENDING,
 RADEON_FLIP_SUBMITTED
};

struct radeon_crtc {
 struct drm_crtc base;
 int crtc_id;
 bool enabled;
 bool can_tile;
 bool cursor_out_of_bounds;
 uint32_t crtc_offset;
 struct drm_gem_object *cursor_bo;
 uint64_t cursor_addr;
 int cursor_x;
 int cursor_y;
 int cursor_hot_x;
 int cursor_hot_y;
 int cursor_width;
 int cursor_height;
 int max_cursor_width;
 int max_cursor_height;
 uint32_t legacy_display_base_addr;
 enum radeon_rmx_type rmx_type;
 u8 h_border;
 u8 v_border;
 fixed20_12 vsc;
 fixed20_12 hsc;
 struct drm_display_mode native_mode;
 int pll_id;

 struct workqueue_struct *flip_queue;
 struct radeon_flip_work *flip_work;
 enum radeon_flip_status flip_status;

 struct radeon_atom_ss ss;
 bool ss_enabled;
 u32 adjusted_clock;
 int bpc;
 u32 pll_reference_div;
 u32 pll_post_div;
 u32 pll_flags;
 struct drm_encoder *encoder;
 struct drm_connector *connector;

 u32 line_time;
 u32 wm_low;
 u32 wm_high;
 u32 lb_vblank_lead_lines;
 struct drm_display_mode hw_mode;
 enum radeon_output_csc output_csc;
};

struct radeon_encoder_primary_dac {

 uint32_t ps2_pdac_adj;
};

struct radeon_encoder_lvds {

 uint16_t panel_vcc_delay;
 uint8_t panel_pwr_delay;
 uint8_t panel_digon_delay;
 uint8_t panel_blon_delay;
 uint16_t panel_ref_divider;
 uint8_t panel_post_divider;
 uint16_t panel_fb_divider;
 bool use_bios_dividers;
 uint32_t lvds_gen_cntl;

 struct drm_display_mode native_mode;
 struct backlight_device *bl_dev;
 int dpms_mode;
 uint8_t backlight_level;
};

struct radeon_encoder_tv_dac {

 uint32_t ps2_tvdac_adj;
 uint32_t ntsc_tvdac_adj;
 uint32_t pal_tvdac_adj;

 int h_pos;
 int v_pos;
 int h_size;
 int supported_tv_stds;
 bool tv_on;
 enum radeon_tv_std tv_std;
 struct radeon_tv_regs tv;
};

struct radeon_encoder_int_tmds {

 struct radeon_tmds_pll tmds_pll[4];
};

struct radeon_encoder_ext_tmds {

 struct radeon_i2c_chan *i2c_bus;
 uint8_t slave_addr;
 enum radeon_dvo_chip dvo_chip;
};


struct radeon_encoder_atom_dig {
 bool linkb;

 bool coherent_mode;
 int dig_encoder;

 uint32_t lcd_misc;
 uint16_t panel_pwr_delay;
 uint32_t lcd_ss_id;

 struct drm_display_mode native_mode;
 struct backlight_device *bl_dev;
 int dpms_mode;
 uint8_t backlight_level;
 int panel_mode;
 struct radeon_afmt *afmt;
 struct r600_audio_pin *pin;
 int active_mst_links;
};

struct radeon_encoder_atom_dac {
 enum radeon_tv_std tv_std;
};

struct radeon_encoder_mst {
 int crtc;
 struct radeon_encoder *primary;
 struct radeon_connector *connector;
 struct drm_dp_mst_port *port;
 int pbn;
 int fe;
 bool fe_from_be;
 bool enc_active;
};

struct radeon_encoder {
 struct drm_encoder base;
 uint32_t encoder_enum;
 uint32_t encoder_id;
 uint32_t devices;
 uint32_t active_device;
 uint32_t flags;
 uint32_t pixel_clock;
 enum radeon_rmx_type rmx_type;
 enum radeon_underscan_type underscan_type;
 uint32_t underscan_hborder;
 uint32_t underscan_vborder;
 struct drm_display_mode native_mode;
 void *enc_priv;
 int audio_polling_active;
 bool is_ext_encoder;
 u16 caps;
 struct radeon_audio_funcs *audio;
 enum radeon_output_csc output_csc;
 bool can_mst;
 uint32_t offset;
 bool is_mst_encoder;

};

struct radeon_connector_atom_dig {
 uint32_t igp_lane_info;

 u8 dpcd[0xf];
 u8 dp_sink_type;
 int dp_clock;
 int dp_lane_count;
 bool edp_on;
 bool is_mst;
};

struct radeon_gpio_rec {
 bool valid;
 u8 id;
 u32 reg;
 u32 mask;
 u32 shift;
};

struct radeon_hpd {
 enum radeon_hpd_id hpd;
 u8 plugged_state;
 struct radeon_gpio_rec gpio;
};

struct radeon_router {
 u32 router_id;
 struct radeon_i2c_bus_rec i2c_info;
 u8 i2c_addr;

 bool ddc_valid;
 u8 ddc_mux_type;
 u8 ddc_mux_control_pin;
 u8 ddc_mux_state;

 bool cd_valid;
 u8 cd_mux_type;
 u8 cd_mux_control_pin;
 u8 cd_mux_state;
};

enum radeon_connector_audio {
 RADEON_AUDIO_DISABLE = 0,
 RADEON_AUDIO_ENABLE = 1,
 RADEON_AUDIO_AUTO = 2
};

enum radeon_connector_dither {
 RADEON_FMT_DITHER_DISABLE = 0,
 RADEON_FMT_DITHER_ENABLE = 1,
};

struct stream_attribs {
 uint16_t fe;
 uint16_t slots;
};

struct radeon_connector {
 struct drm_connector base;
 uint32_t connector_id;
 uint32_t devices;
 struct radeon_i2c_chan *ddc_bus;

 bool shared_ddc;
 bool use_digital;


 struct edid *edid;
 void *con_priv;
 bool dac_load_detect;
 bool detected_by_load;
 bool detected_hpd_without_ddc;
 uint16_t connector_object_id;
 struct radeon_hpd hpd;
 struct radeon_router router;
 struct radeon_i2c_chan *router_bus;
 enum radeon_connector_audio audio;
 enum radeon_connector_dither dither;
 int pixelclock_for_modeset;
 bool is_mst_connector;
 struct radeon_connector *mst_port;
 struct drm_dp_mst_port *port;
 struct drm_dp_mst_topology_mgr mst_mgr;

 struct radeon_encoder *mst_encoder;
 struct stream_attribs cur_stream_attribs[6];
 int enabled_attribs;
};




struct atom_clock_dividers {
 u32 post_div;
 union {
  struct {





   u32 frac_fb_div : 14;
   u32 whole_fb_div : 12;
   u32 reserved : 6;

  };
  u32 fb_div;
 };
 u32 ref_div;
 bool enable_post_div;
 bool enable_dithen;
 u32 vco_mode;
 u32 real_clock;

 u32 post_divider;
 u32 flags;
};

struct atom_mpll_param {
 union {
  struct {





   u32 clkf : 12;
   u32 clkfrac : 12;
   u32 reserved : 8;

  };
  u32 fb_div;
 };
 u32 post_div;
 u32 bwcntl;
 u32 dll_speed;
 u32 vco_mode;
 u32 yclk_sel;
 u32 qdr;
 u32 half_rate;
};
# 636 "drivers/gpu/drm/radeon/radeon_mode.h"
struct atom_memory_info {
 u8 mem_vendor;
 u8 mem_type;
};



struct atom_memory_clock_range_table
{
 u8 num_entries;
 u8 rsv[3];
 u32 mclk[16];
};




struct atom_mc_reg_entry {
 u32 mclk_max;
 u32 mc_data[32];
};

struct atom_mc_register_address {
 u16 s1;
 u8 pre_reg_data;
};

struct atom_mc_reg_table {
 u8 last;
 u8 num_entries;
 struct atom_mc_reg_entry mc_reg_table_entry[20];
 struct atom_mc_register_address mc_reg_address[32];
};



struct atom_voltage_table_entry
{
 u16 value;
 u32 smio_low;
};

struct atom_voltage_table
{
 u32 count;
 u32 mask_low;
 u32 phase_delay;
 struct atom_voltage_table_entry entries[32];
};
# 693 "drivers/gpu/drm/radeon/radeon_mode.h"
extern void
radeon_add_atom_connector(struct drm_device *dev,
     uint32_t connector_id,
     uint32_t supported_device,
     int connector_type,
     struct radeon_i2c_bus_rec *i2c_bus,
     uint32_t igp_lane_info,
     uint16_t connector_object_id,
     struct radeon_hpd *hpd,
     struct radeon_router *router);
extern void
radeon_add_legacy_connector(struct drm_device *dev,
       uint32_t connector_id,
       uint32_t supported_device,
       int connector_type,
       struct radeon_i2c_bus_rec *i2c_bus,
       uint16_t connector_object_id,
       struct radeon_hpd *hpd);
extern uint32_t
radeon_get_encoder_enum(struct drm_device *dev, uint32_t supported_device,
   uint8_t dac);
extern void radeon_link_encoder_connector(struct drm_device *dev);

extern enum radeon_tv_std
radeon_combios_get_tv_info(struct radeon_device *rdev);
extern enum radeon_tv_std
radeon_atombios_get_tv_info(struct radeon_device *rdev);
extern void radeon_atombios_get_default_voltages(struct radeon_device *rdev,
       u16 *vddc, u16 *vddci, u16 *mvdd);

extern void
radeon_combios_connected_scratch_regs(struct drm_connector *connector,
          struct drm_encoder *encoder,
          bool connected);
extern void
radeon_atombios_connected_scratch_regs(struct drm_connector *connector,
           struct drm_encoder *encoder,
           bool connected);

extern struct drm_connector *
radeon_get_connector_for_encoder(struct drm_encoder *encoder);
extern struct drm_connector *
radeon_get_connector_for_encoder_init(struct drm_encoder *encoder);
extern bool radeon_dig_monitor_is_duallink(struct drm_encoder *encoder,
        u32 pixel_clock);

extern u16 radeon_encoder_get_dp_bridge_encoder_id(struct drm_encoder *encoder);
extern u16 radeon_connector_encoder_get_dp_bridge_encoder_id(struct drm_connector *connector);
extern bool radeon_connector_is_dp12_capable(struct drm_connector *connector);
extern int radeon_get_monitor_bpc(struct drm_connector *connector);

extern struct edid *radeon_connector_edid(struct drm_connector *connector);

extern void radeon_connector_hotplug(struct drm_connector *connector);
extern int radeon_dp_mode_valid_helper(struct drm_connector *connector,
           struct drm_display_mode *mode);
extern void radeon_dp_set_link_config(struct drm_connector *connector,
          const struct drm_display_mode *mode);
extern void radeon_dp_link_train(struct drm_encoder *encoder,
     struct drm_connector *connector);
extern bool radeon_dp_needs_link_train(struct radeon_connector *radeon_connector);
extern u8 radeon_dp_getsinktype(struct radeon_connector *radeon_connector);
extern bool radeon_dp_getdpcd(struct radeon_connector *radeon_connector);
extern int radeon_dp_get_panel_mode(struct drm_encoder *encoder,
        struct drm_connector *connector);
extern void radeon_dp_set_rx_power_state(struct drm_connector *connector,
      u8 power_state);
extern void radeon_dp_aux_init(struct radeon_connector *radeon_connector);
extern ssize_t
radeon_dp_aux_transfer_native(struct drm_dp_aux *aux, struct drm_dp_aux_msg *msg);

extern void atombios_dig_encoder_setup(struct drm_encoder *encoder, int action, int panel_mode);
extern void atombios_dig_encoder_setup2(struct drm_encoder *encoder, int action, int panel_mode, int enc_override);
extern void radeon_atom_encoder_init(struct radeon_device *rdev);
extern void radeon_atom_disp_eng_pll_init(struct radeon_device *rdev);
extern void atombios_dig_transmitter_setup(struct drm_encoder *encoder,
        int action, uint8_t lane_num,
        uint8_t lane_set);
extern void atombios_dig_transmitter_setup2(struct drm_encoder *encoder,
         int action, uint8_t lane_num,
         uint8_t lane_set, int fe);
extern void atombios_set_mst_encoder_crtc_source(struct drm_encoder *encoder,
       int fe);
extern void radeon_atom_ext_encoder_setup_ddc(struct drm_encoder *encoder);
extern struct drm_encoder *radeon_get_external_encoder(struct drm_encoder *encoder);
void radeon_atom_copy_swap(u8 *dst, u8 *src, u8 num_bytes, bool to_le);

extern void radeon_i2c_init(struct radeon_device *rdev);
extern void radeon_i2c_fini(struct radeon_device *rdev);
extern void radeon_combios_i2c_init(struct radeon_device *rdev);
extern void radeon_atombios_i2c_init(struct radeon_device *rdev);
extern void radeon_i2c_add(struct radeon_device *rdev,
      struct radeon_i2c_bus_rec *rec,
      const char *name);
extern struct radeon_i2c_chan *radeon_i2c_lookup(struct radeon_device *rdev,
       struct radeon_i2c_bus_rec *i2c_bus);
extern struct radeon_i2c_chan *radeon_i2c_create(struct drm_device *dev,
       struct radeon_i2c_bus_rec *rec,
       const char *name);
extern void radeon_i2c_destroy(struct radeon_i2c_chan *i2c);
extern void radeon_i2c_get_byte(struct radeon_i2c_chan *i2c_bus,
    u8 slave_addr,
    u8 addr,
    u8 *val);
extern void radeon_i2c_put_byte(struct radeon_i2c_chan *i2c,
    u8 slave_addr,
    u8 addr,
    u8 val);
extern void radeon_router_select_ddc_port(struct radeon_connector *radeon_connector);
extern void radeon_router_select_cd_port(struct radeon_connector *radeon_connector);
extern bool radeon_ddc_probe(struct radeon_connector *radeon_connector, bool use_aux);

extern bool radeon_atombios_get_ppll_ss_info(struct radeon_device *rdev,
          struct radeon_atom_ss *ss,
          int id);
extern bool radeon_atombios_get_asic_ss_info(struct radeon_device *rdev,
          struct radeon_atom_ss *ss,
          int id, u32 clock);
extern struct radeon_gpio_rec radeon_atombios_lookup_gpio(struct radeon_device *rdev,
         u8 id);

extern void radeon_compute_pll_legacy(struct radeon_pll *pll,
          uint64_t freq,
          uint32_t *dot_clock_p,
          uint32_t *fb_div_p,
          uint32_t *frac_fb_div_p,
          uint32_t *ref_div_p,
          uint32_t *post_div_p);

extern void radeon_compute_pll_avivo(struct radeon_pll *pll,
         u32 freq,
         u32 *dot_clock_p,
         u32 *fb_div_p,
         u32 *frac_fb_div_p,
         u32 *ref_div_p,
         u32 *post_div_p);

extern void radeon_setup_encoder_clones(struct drm_device *dev);

struct drm_encoder *radeon_encoder_legacy_lvds_add(struct drm_device *dev, int bios_index);
struct drm_encoder *radeon_encoder_legacy_primary_dac_add(struct drm_device *dev, int bios_index, int with_tv);
struct drm_encoder *radeon_encoder_legacy_tv_dac_add(struct drm_device *dev, int bios_index, int with_tv);
struct drm_encoder *radeon_encoder_legacy_tmds_int_add(struct drm_device *dev, int bios_index);
struct drm_encoder *radeon_encoder_legacy_tmds_ext_add(struct drm_device *dev, int bios_index);
extern void atombios_dvo_setup(struct drm_encoder *encoder, int action);
extern void atombios_digital_setup(struct drm_encoder *encoder, int action);
extern int atombios_get_encoder_mode(struct drm_encoder *encoder);
extern bool atombios_set_edp_panel_power(struct drm_connector *connector, int action);
extern void radeon_encoder_set_active_device(struct drm_encoder *encoder);
extern bool radeon_encoder_is_digital(struct drm_encoder *encoder);

extern void radeon_crtc_load_lut(struct drm_crtc *crtc);
extern int atombios_crtc_set_base(struct drm_crtc *crtc, int x, int y,
       struct drm_framebuffer *old_fb);
extern int atombios_crtc_set_base_atomic(struct drm_crtc *crtc,
      struct drm_framebuffer *fb,
      int x, int y,
      enum mode_set_atomic state);
extern int atombios_crtc_mode_set(struct drm_crtc *crtc,
       struct drm_display_mode *mode,
       struct drm_display_mode *adjusted_mode,
       int x, int y,
       struct drm_framebuffer *old_fb);
extern void atombios_crtc_dpms(struct drm_crtc *crtc, int mode);

extern int radeon_crtc_set_base(struct drm_crtc *crtc, int x, int y,
     struct drm_framebuffer *old_fb);
extern int radeon_crtc_set_base_atomic(struct drm_crtc *crtc,
           struct drm_framebuffer *fb,
           int x, int y,
           enum mode_set_atomic state);
extern int radeon_crtc_do_set_base(struct drm_crtc *crtc,
       struct drm_framebuffer *fb,
       int x, int y, int atomic);
extern int radeon_crtc_cursor_set2(struct drm_crtc *crtc,
       struct drm_file *file_priv,
       uint32_t handle,
       uint32_t width,
       uint32_t height,
       int32_t hot_x,
       int32_t hot_y);
extern int radeon_crtc_cursor_move(struct drm_crtc *crtc,
       int x, int y);
extern void radeon_cursor_reset(struct drm_crtc *crtc);

extern int radeon_get_crtc_scanoutpos(struct drm_device *dev, unsigned int pipe,
          unsigned int flags, int *vpos, int *hpos,
          ktime_t *stime, ktime_t *etime,
          const struct drm_display_mode *mode);

extern bool
radeon_get_crtc_scanout_position(struct drm_crtc *crtc, bool in_vblank_irq,
     int *vpos, int *hpos,
     ktime_t *stime, ktime_t *etime,
     const struct drm_display_mode *mode);

extern bool radeon_combios_check_hardcoded_edid(struct radeon_device *rdev);
extern struct edid *
radeon_bios_get_hardcoded_edid(struct radeon_device *rdev);
extern bool radeon_atom_get_clock_info(struct drm_device *dev);
extern bool radeon_combios_get_clock_info(struct drm_device *dev);
extern struct radeon_encoder_atom_dig *
radeon_atombios_get_lvds_info(struct radeon_encoder *encoder);
extern bool radeon_atombios_get_tmds_info(struct radeon_encoder *encoder,
       struct radeon_encoder_int_tmds *tmds);
extern bool radeon_legacy_get_tmds_info_from_combios(struct radeon_encoder *encoder,
           struct radeon_encoder_int_tmds *tmds);
extern bool radeon_legacy_get_tmds_info_from_table(struct radeon_encoder *encoder,
         struct radeon_encoder_int_tmds *tmds);
extern bool radeon_legacy_get_ext_tmds_info_from_combios(struct radeon_encoder *encoder,
        struct radeon_encoder_ext_tmds *tmds);
extern bool radeon_legacy_get_ext_tmds_info_from_table(struct radeon_encoder *encoder,
             struct radeon_encoder_ext_tmds *tmds);
extern struct radeon_encoder_primary_dac *
radeon_atombios_get_primary_dac_info(struct radeon_encoder *encoder);
extern struct radeon_encoder_tv_dac *
radeon_atombios_get_tv_dac_info(struct radeon_encoder *encoder);
extern struct radeon_encoder_lvds *
radeon_combios_get_lvds_info(struct radeon_encoder *encoder);
extern void radeon_combios_get_ext_tmds_info(struct radeon_encoder *encoder);
extern struct radeon_encoder_tv_dac *
radeon_combios_get_tv_dac_info(struct radeon_encoder *encoder);
extern struct radeon_encoder_primary_dac *
radeon_combios_get_primary_dac_info(struct radeon_encoder *encoder);
extern bool radeon_combios_external_tmds_setup(struct drm_encoder *encoder);
extern void radeon_external_tmds_setup(struct drm_encoder *encoder);
extern void radeon_combios_output_lock(struct drm_encoder *encoder, bool lock);
extern void radeon_combios_initialize_bios_scratch_regs(struct drm_device *dev);
extern void radeon_atom_output_lock(struct drm_encoder *encoder, bool lock);
extern void radeon_atom_initialize_bios_scratch_regs(struct drm_device *dev);
extern void radeon_save_bios_scratch_regs(struct radeon_device *rdev);
extern void radeon_restore_bios_scratch_regs(struct radeon_device *rdev);
extern void
radeon_atombios_encoder_crtc_scratch_regs(struct drm_encoder *encoder, int crtc);
extern void
radeon_atombios_encoder_dpms_scratch_regs(struct drm_encoder *encoder, bool on);
extern void
radeon_combios_encoder_crtc_scratch_regs(struct drm_encoder *encoder, int crtc);
extern void
radeon_combios_encoder_dpms_scratch_regs(struct drm_encoder *encoder, bool on);
int radeon_framebuffer_init(struct drm_device *dev,
        struct drm_framebuffer *rfb,
        const struct drm_mode_fb_cmd2 *mode_cmd,
        struct drm_gem_object *obj);

int radeonfb_remove(struct drm_device *dev, struct drm_framebuffer *fb);
bool radeon_get_legacy_connector_info_from_bios(struct drm_device *dev);
bool radeon_get_legacy_connector_info_from_table(struct drm_device *dev);
void radeon_atombios_init_crtc(struct drm_device *dev,
          struct radeon_crtc *radeon_crtc);
void radeon_legacy_init_crtc(struct drm_device *dev,
        struct radeon_crtc *radeon_crtc);

void radeon_get_clock_info(struct drm_device *dev);

extern bool radeon_get_atom_connector_info_from_object_table(struct drm_device *dev);
extern bool radeon_get_atom_connector_info_from_supported_devices_table(struct drm_device *dev);

void radeon_enc_destroy(struct drm_encoder *encoder);
void radeon_copy_fb(struct drm_device *dev, struct drm_gem_object *dst_obj);
void radeon_combios_asic_init(struct drm_device *dev);
bool radeon_crtc_scaling_mode_fixup(struct drm_crtc *crtc,
     const struct drm_display_mode *mode,
     struct drm_display_mode *adjusted_mode);
void radeon_panel_mode_fixup(struct drm_encoder *encoder,
        struct drm_display_mode *adjusted_mode);
void atom_rv515_force_tv_scaler(struct radeon_device *rdev, struct radeon_crtc *radeon_crtc);


void radeon_legacy_tv_adjust_crtc_reg(struct drm_encoder *encoder,
          uint32_t *h_total_disp, uint32_t *h_sync_strt_wid,
          uint32_t *v_total_disp, uint32_t *v_sync_strt_wid);
void radeon_legacy_tv_adjust_pll1(struct drm_encoder *encoder,
      uint32_t *htotal_cntl, uint32_t *ppll_ref_div,
      uint32_t *ppll_div_3, uint32_t *pixclks_cntl);
void radeon_legacy_tv_adjust_pll2(struct drm_encoder *encoder,
      uint32_t *htotal2_cntl, uint32_t *p2pll_ref_div,
      uint32_t *p2pll_div_0, uint32_t *pixclks_cntl);
void radeon_legacy_tv_mode_set(struct drm_encoder *encoder,
          struct drm_display_mode *mode,
          struct drm_display_mode *adjusted_mode);


void avivo_program_fmt(struct drm_encoder *encoder);
void dce3_program_fmt(struct drm_encoder *encoder);
void dce4_program_fmt(struct drm_encoder *encoder);
void dce8_program_fmt(struct drm_encoder *encoder);


int radeon_fbdev_init(struct radeon_device *rdev);
void radeon_fbdev_fini(struct radeon_device *rdev);
void radeon_fbdev_set_suspend(struct radeon_device *rdev, int state);
bool radeon_fbdev_robj_is_fb(struct radeon_device *rdev, struct radeon_bo *robj);

void radeon_crtc_handle_vblank(struct radeon_device *rdev, int crtc_id);

void radeon_crtc_handle_flip(struct radeon_device *rdev, int crtc_id);

int radeon_align_pitch(struct radeon_device *rdev, int width, int bpp, bool tiled);


int radeon_dp_mst_init(struct radeon_connector *radeon_connector);
int radeon_dp_mst_probe(struct radeon_connector *radeon_connector);
int radeon_dp_mst_check_status(struct radeon_connector *radeon_connector);
void radeon_mst_debugfs_init(struct radeon_device *rdev);
void radeon_dp_mst_prepare_pll(struct drm_crtc *crtc, struct drm_display_mode *mode);

void radeon_setup_mst_connector(struct drm_device *dev);

int radeon_atom_pick_dig_encoder(struct drm_encoder *encoder, int fe_idx);
void radeon_atom_release_dig_encoder(struct radeon_device *rdev, int enc_idx);
# 85 "drivers/gpu/drm/radeon/radeon.h" 2
# 1 "drivers/gpu/drm/radeon/radeon_reg.h" 1
# 54 "drivers/gpu/drm/radeon/radeon_reg.h"
# 1 "drivers/gpu/drm/radeon/r300_reg.h" 1
# 55 "drivers/gpu/drm/radeon/radeon_reg.h" 2
# 1 "drivers/gpu/drm/radeon/r500_reg.h" 1
# 56 "drivers/gpu/drm/radeon/radeon_reg.h" 2
# 1 "drivers/gpu/drm/radeon/r600_reg.h" 1
# 57 "drivers/gpu/drm/radeon/radeon_reg.h" 2

# 1 "drivers/gpu/drm/radeon/ni_reg.h" 1
# 59 "drivers/gpu/drm/radeon/radeon_reg.h" 2
# 1 "drivers/gpu/drm/radeon/si_reg.h" 1
# 60 "drivers/gpu/drm/radeon/radeon_reg.h" 2
# 1 "drivers/gpu/drm/radeon/cik_reg.h" 1
# 207 "drivers/gpu/drm/radeon/cik_reg.h"
enum {
 MAX_TRAPID = 8,
 MAX_WATCH_ADDRESSES = 4
};

enum {
 ADDRESS_WATCH_REG_ADDR_HI = 0,
 ADDRESS_WATCH_REG_ADDR_LO,
 ADDRESS_WATCH_REG_CNTL,
 ADDRESS_WATCH_REG_MAX
};

enum {
 ADDRESS_WATCH_REG_CNTL_ATC_BIT = 0x10000000UL,
 ADDRESS_WATCH_REG_CNTL_DEFAULT_MASK = 0x00FFFFFF,
 ADDRESS_WATCH_REG_ADDLOW_MASK_EXTENSION = 0x03000000,

 ADDRESS_WATCH_REG_ADDLOW_SHIFT = 6,
 ADDRESS_WATCH_REG_ADDHIGH_MASK = 0xFFFF
};

union TCP_WATCH_CNTL_BITS {
 struct {
  uint32_t mask:24;
  uint32_t vmid:4;
  uint32_t atc:1;
  uint32_t mode:2;
  uint32_t valid:1;
 } bitfields, bits;
 uint32_t u32All;
 signed int i32All;
 float f32All;
};
# 61 "drivers/gpu/drm/radeon/radeon_reg.h" 2
# 86 "drivers/gpu/drm/radeon/radeon.h" 2




extern int radeon_no_wb;
extern int radeon_modeset;
extern int radeon_dynclks;
extern int radeon_r4xx_atom;
extern int radeon_agpmode;
extern int radeon_vram_limit;
extern int radeon_gart_size;
extern int radeon_benchmarking;
extern int radeon_testing;
extern int radeon_connector_table;
extern int radeon_tv;
extern int radeon_audio;
extern int radeon_disp_priority;
extern int radeon_hw_i2c;
extern int radeon_pcie_gen2;
extern int radeon_msi;
extern int radeon_lockup_timeout;
extern int radeon_fastfb;
extern int radeon_dpm;
extern int radeon_aspm;
extern int radeon_runtime_pm;
extern int radeon_hard_reset;
extern int radeon_vm_size;
extern int radeon_vm_block_size;
extern int radeon_deep_color;
extern int radeon_use_pflipirq;
extern int radeon_bapm;
extern int radeon_backlight;
extern int radeon_auxch;
extern int radeon_mst;
extern int radeon_uvd;
extern int radeon_vce;
extern int radeon_si_support;
extern int radeon_cik_support;
# 237 "drivers/gpu/drm/radeon/radeon.h"
enum radeon_pll_errata {
 CHIP_ERRATA_R300_CG = 0x00000001,
 CHIP_ERRATA_PLL_DUMMYREADS = 0x00000002,
 CHIP_ERRATA_PLL_DELAY = 0x00000004
};


struct radeon_device;





bool radeon_get_bios(struct radeon_device *rdev);




struct radeon_dummy_page {
 uint64_t entry;
 struct page *page;
 dma_addr_t addr;
};
int radeon_dummy_page_init(struct radeon_device *rdev);
void radeon_dummy_page_fini(struct radeon_device *rdev);





struct radeon_clock {
 struct radeon_pll p1pll;
 struct radeon_pll p2pll;
 struct radeon_pll dcpll;
 struct radeon_pll spll;
 struct radeon_pll mpll;

 uint32_t default_mclk;
 uint32_t default_sclk;
 uint32_t default_dispclk;
 uint32_t current_dispclk;
 uint32_t dp_extclk;
 uint32_t max_pixel_clock;
 uint32_t vco_freq;
};




int radeon_pm_init(struct radeon_device *rdev);
int radeon_pm_late_init(struct radeon_device *rdev);
void radeon_pm_fini(struct radeon_device *rdev);
void radeon_pm_compute_clocks(struct radeon_device *rdev);
void radeon_pm_suspend(struct radeon_device *rdev);
void radeon_pm_resume(struct radeon_device *rdev);
void radeon_combios_get_power_modes(struct radeon_device *rdev);
void radeon_atombios_get_power_modes(struct radeon_device *rdev);
int radeon_atom_get_clock_dividers(struct radeon_device *rdev,
       u8 clock_type,
       u32 clock,
       bool strobe_mode,
       struct atom_clock_dividers *dividers);
int radeon_atom_get_memory_pll_dividers(struct radeon_device *rdev,
     u32 clock,
     bool strobe_mode,
     struct atom_mpll_param *mpll_param);
void radeon_atom_set_voltage(struct radeon_device *rdev, u16 voltage_level, u8 voltage_type);
int radeon_atom_get_voltage_gpio_settings(struct radeon_device *rdev,
       u16 voltage_level, u8 voltage_type,
       u32 *gpio_value, u32 *gpio_mask);
void radeon_atom_set_engine_dram_timings(struct radeon_device *rdev,
      u32 eng_clock, u32 mem_clock);
int radeon_atom_get_voltage_step(struct radeon_device *rdev,
     u8 voltage_type, u16 *voltage_step);
int radeon_atom_get_max_vddc(struct radeon_device *rdev, u8 voltage_type,
        u16 voltage_id, u16 *voltage);
int radeon_atom_get_leakage_vddc_based_on_leakage_idx(struct radeon_device *rdev,
            u16 *voltage,
            u16 leakage_idx);
int radeon_atom_get_leakage_id_from_vbios(struct radeon_device *rdev,
       u16 *leakage_id);
int radeon_atom_get_leakage_vddc_based_on_leakage_params(struct radeon_device *rdev,
        u16 *vddc, u16 *vddci,
        u16 virtual_voltage_id,
        u16 vbios_voltage_id);
int radeon_atom_get_voltage_evv(struct radeon_device *rdev,
    u16 virtual_voltage_id,
    u16 *voltage);
int radeon_atom_round_to_true_voltage(struct radeon_device *rdev,
          u8 voltage_type,
          u16 nominal_voltage,
          u16 *true_voltage);
int radeon_atom_get_min_voltage(struct radeon_device *rdev,
    u8 voltage_type, u16 *min_voltage);
int radeon_atom_get_max_voltage(struct radeon_device *rdev,
    u8 voltage_type, u16 *max_voltage);
int radeon_atom_get_voltage_table(struct radeon_device *rdev,
      u8 voltage_type, u8 voltage_mode,
      struct atom_voltage_table *voltage_table);
bool radeon_atom_is_voltage_gpio(struct radeon_device *rdev,
     u8 voltage_type, u8 voltage_mode);
int radeon_atom_get_svi2_info(struct radeon_device *rdev,
         u8 voltage_type,
         u8 *svd_gpio_id, u8 *svc_gpio_id);
void radeon_atom_update_memory_dll(struct radeon_device *rdev,
       u32 mem_clock);
void radeon_atom_set_ac_timing(struct radeon_device *rdev,
          u32 mem_clock);
int radeon_atom_init_mc_reg_table(struct radeon_device *rdev,
      u8 module_index,
      struct atom_mc_reg_table *reg_table);
int radeon_atom_get_memory_info(struct radeon_device *rdev,
    u8 module_index, struct atom_memory_info *mem_info);
int radeon_atom_get_mclk_range_table(struct radeon_device *rdev,
         bool gddr5, u8 module_index,
         struct atom_memory_clock_range_table *mclk_range_table);
int radeon_atom_get_max_vddc(struct radeon_device *rdev, u8 voltage_type,
        u16 voltage_id, u16 *voltage);
void rs690_pm_info(struct radeon_device *rdev);
extern void evergreen_tiling_fields(unsigned tiling_flags, unsigned *bankw,
        unsigned *bankh, unsigned *mtaspect,
        unsigned *tile_split);




struct radeon_fence_driver {
 struct radeon_device *rdev;
 uint32_t scratch_reg;
 uint64_t gpu_addr;
 volatile uint32_t *cpu_addr;

 uint64_t sync_seq[8];
 atomic64_t last_seq;
 bool initialized, delayed_irq;
 struct delayed_work lockup_work;
};

struct radeon_fence {
 struct dma_fence base;

 struct radeon_device *rdev;
 uint64_t seq;

 unsigned ring;
 bool is_vm_update;

 wait_queue_entry_t fence_wake;
};

int radeon_fence_driver_start_ring(struct radeon_device *rdev, int ring);
void radeon_fence_driver_init(struct radeon_device *rdev);
void radeon_fence_driver_fini(struct radeon_device *rdev);
void radeon_fence_driver_force_completion(struct radeon_device *rdev, int ring);
int radeon_fence_emit(struct radeon_device *rdev, struct radeon_fence **fence, int ring);
void radeon_fence_process(struct radeon_device *rdev, int ring);
bool radeon_fence_signaled(struct radeon_fence *fence);
long radeon_fence_wait_timeout(struct radeon_fence *fence, bool interruptible, long timeout);
int radeon_fence_wait(struct radeon_fence *fence, bool interruptible);
int radeon_fence_wait_next(struct radeon_device *rdev, int ring);
int radeon_fence_wait_empty(struct radeon_device *rdev, int ring);
int radeon_fence_wait_any(struct radeon_device *rdev,
     struct radeon_fence **fences,
     bool intr);
struct radeon_fence *radeon_fence_ref(struct radeon_fence *fence);
void radeon_fence_unref(struct radeon_fence **fence);
unsigned radeon_fence_count_emitted(struct radeon_device *rdev, int ring);
bool radeon_fence_need_sync(struct radeon_fence *fence, int ring);
void radeon_fence_note_sync(struct radeon_fence *fence, int ring);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct radeon_fence *radeon_fence_later(struct radeon_fence *a,
            struct radeon_fence *b)
{
 if (!a) {
  return b;
 }

 if (!b) {
  return a;
 }

 do { if (__builtin_expect(!!(a->ring != b->ring), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("drivers/gpu/drm/radeon/radeon.h"), "i" (417), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 if (a->seq > b->seq) {
  return a;
 } else {
  return b;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radeon_fence_is_earlier(struct radeon_fence *a,
        struct radeon_fence *b)
{
 if (!a) {
  return false;
 }

 if (!b) {
  return true;
 }

 do { if (__builtin_expect(!!(a->ring != b->ring), 0)) do { do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("drivers/gpu/drm/radeon/radeon.h"), "i" (437), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 return a->seq < b->seq;
}




struct radeon_surface_reg {
 struct radeon_bo *bo;
};






struct radeon_mman {
 struct ttm_device bdev;
 bool initialized;
};

struct radeon_bo_list {
 struct radeon_bo *robj;
 struct ttm_validate_buffer tv;
 uint64_t gpu_offset;
 unsigned preferred_domains;
 unsigned allowed_domains;
 uint32_t tiling_flags;
};


struct radeon_bo_va {

 struct list_head bo_list;
 uint32_t flags;
 struct radeon_fence *last_pt_update;
 unsigned ref_count;


 struct interval_tree_node it;
 struct list_head vm_status;


 struct radeon_vm *vm;
 struct radeon_bo *bo;
};

struct radeon_bo {

 struct list_head list;

 u32 initial_domain;
 struct ttm_place placements[4];
 struct ttm_placement placement;
 struct ttm_buffer_object tbo;
 struct ttm_bo_kmap_obj kmap;
 u32 flags;
 void *kptr;
 u32 tiling_flags;
 u32 pitch;
 int surface_reg;
 unsigned prime_shared_count;



 struct list_head va;

 struct radeon_device *rdev;

 pid_t pid;




};
# 538 "drivers/gpu/drm/radeon/radeon.h"
struct radeon_sa_manager {
 wait_queue_head_t wq;
 struct radeon_bo *bo;
 struct list_head *hole;
 struct list_head flist[8];
 struct list_head olist;
 unsigned size;
 uint64_t gpu_addr;
 void *cpu_ptr;
 uint32_t domain;
 uint32_t align;
};

struct radeon_sa_bo;


struct radeon_sa_bo {
 struct list_head olist;
 struct list_head flist;
 struct radeon_sa_manager *manager;
 unsigned soffset;
 unsigned eoffset;
 struct radeon_fence *fence;
};




struct radeon_gem {
 struct mutex mutex;
 struct list_head objects;
};

extern const struct drm_gem_object_funcs radeon_gem_object_funcs;

int radeon_gem_init(struct radeon_device *rdev);
void radeon_gem_fini(struct radeon_device *rdev);
int radeon_gem_object_create(struct radeon_device *rdev, unsigned long size,
    int alignment, int initial_domain,
    u32 flags, bool kernel,
    struct drm_gem_object **obj);

int radeon_mode_dumb_create(struct drm_file *file_priv,
       struct drm_device *dev,
       struct drm_mode_create_dumb *args);
int radeon_mode_dumb_mmap(struct drm_file *filp,
     struct drm_device *dev,
     uint32_t handle, uint64_t *offset_p);




struct radeon_semaphore {
 struct radeon_sa_bo *sa_bo;
 signed waiters;
 uint64_t gpu_addr;
};

int radeon_semaphore_create(struct radeon_device *rdev,
       struct radeon_semaphore **semaphore);
bool radeon_semaphore_emit_signal(struct radeon_device *rdev, int ring,
      struct radeon_semaphore *semaphore);
bool radeon_semaphore_emit_wait(struct radeon_device *rdev, int ring,
    struct radeon_semaphore *semaphore);
void radeon_semaphore_free(struct radeon_device *rdev,
      struct radeon_semaphore **semaphore,
      struct radeon_fence *fence);




struct radeon_sync {
 struct radeon_semaphore *semaphores[4];
 struct radeon_fence *sync_to[8];
 struct radeon_fence *last_vm_update;
};

void radeon_sync_create(struct radeon_sync *sync);
void radeon_sync_fence(struct radeon_sync *sync,
         struct radeon_fence *fence);
int radeon_sync_resv(struct radeon_device *rdev,
       struct radeon_sync *sync,
       struct dma_resv *resv,
       bool shared);
int radeon_sync_rings(struct radeon_device *rdev,
        struct radeon_sync *sync,
        int waiting_ring);
void radeon_sync_free(struct radeon_device *rdev, struct radeon_sync *sync,
        struct radeon_fence *fence);




struct radeon_mc;
# 644 "drivers/gpu/drm/radeon/radeon.h"
struct radeon_gart {
 dma_addr_t table_addr;
 struct radeon_bo *robj;
 void *ptr;
 unsigned num_gpu_pages;
 unsigned num_cpu_pages;
 unsigned table_size;
 struct page **pages;
 uint64_t *pages_entry;
 bool ready;
};

int radeon_gart_table_ram_alloc(struct radeon_device *rdev);
void radeon_gart_table_ram_free(struct radeon_device *rdev);
int radeon_gart_table_vram_alloc(struct radeon_device *rdev);
void radeon_gart_table_vram_free(struct radeon_device *rdev);
int radeon_gart_table_vram_pin(struct radeon_device *rdev);
void radeon_gart_table_vram_unpin(struct radeon_device *rdev);
int radeon_gart_init(struct radeon_device *rdev);
void radeon_gart_fini(struct radeon_device *rdev);
void radeon_gart_unbind(struct radeon_device *rdev, unsigned offset,
   int pages);
int radeon_gart_bind(struct radeon_device *rdev, unsigned offset,
       int pages, struct page **pagelist,
       dma_addr_t *dma_addr, uint32_t flags);





struct radeon_mc {
 resource_size_t aper_size;
 resource_size_t aper_base;
 resource_size_t agp_base;


 u64 mc_vram_size;
 u64 visible_vram_size;
 u64 gtt_size;
 u64 gtt_start;
 u64 gtt_end;
 u64 vram_start;
 u64 vram_end;
 unsigned vram_width;
 u64 real_vram_size;
 int vram_mtrr;
 bool vram_is_ddr;
 bool igp_sideport_enabled;
 u64 gtt_base_align;
 u64 mc_mask;
};

bool radeon_combios_sideport_present(struct radeon_device *rdev);
bool radeon_atombios_sideport_present(struct radeon_device *rdev);




struct radeon_scratch {
 unsigned num_reg;
 uint32_t reg_base;
 bool free[32];
 uint32_t reg[32];
};

int radeon_scratch_get(struct radeon_device *rdev, uint32_t *reg);
void radeon_scratch_free(struct radeon_device *rdev, uint32_t reg);






struct radeon_doorbell {

 resource_size_t base;
 resource_size_t size;
 u32 *ptr;
 u32 num_doorbells;
 unsigned long used[(((1024) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

int radeon_doorbell_get(struct radeon_device *rdev, u32 *page);
void radeon_doorbell_free(struct radeon_device *rdev, u32 doorbell);





struct radeon_flip_work {
 struct work_struct flip_work;
 struct work_struct unpin_work;
 struct radeon_device *rdev;
 int crtc_id;
 u32 target_vblank;
 uint64_t base;
 struct drm_pending_vblank_event *event;
 struct radeon_bo *old_rbo;
 struct dma_fence *fence;
 bool async;
};

struct r500_irq_stat_regs {
 u32 disp_int;
 u32 hdmi0_status;
};

struct r600_irq_stat_regs {
 u32 disp_int;
 u32 disp_int_cont;
 u32 disp_int_cont2;
 u32 d1grph_int;
 u32 d2grph_int;
 u32 hdmi0_status;
 u32 hdmi1_status;
};

struct evergreen_irq_stat_regs {
 u32 disp_int[6];
 u32 grph_int[6];
 u32 afmt_status[6];
};

struct cik_irq_stat_regs {
 u32 disp_int;
 u32 disp_int_cont;
 u32 disp_int_cont2;
 u32 disp_int_cont3;
 u32 disp_int_cont4;
 u32 disp_int_cont5;
 u32 disp_int_cont6;
 u32 d1grph_int;
 u32 d2grph_int;
 u32 d3grph_int;
 u32 d4grph_int;
 u32 d5grph_int;
 u32 d6grph_int;
};

union radeon_irq_stat_regs {
 struct r500_irq_stat_regs r500;
 struct r600_irq_stat_regs r600;
 struct evergreen_irq_stat_regs evergreen;
 struct cik_irq_stat_regs cik;
};

struct radeon_irq {
 bool installed;
 spinlock_t lock;
 atomic_t ring_int[8];
 bool crtc_vblank_int[6];
 atomic_t pflip[6];
 wait_queue_head_t vblank_queue;
 bool hpd[7];
 bool afmt[7];
 union radeon_irq_stat_regs stat_regs;
 bool dpm_thermal;
};

int radeon_irq_kms_init(struct radeon_device *rdev);
void radeon_irq_kms_fini(struct radeon_device *rdev);
void radeon_irq_kms_sw_irq_get(struct radeon_device *rdev, int ring);
bool radeon_irq_kms_sw_irq_get_delayed(struct radeon_device *rdev, int ring);
void radeon_irq_kms_sw_irq_put(struct radeon_device *rdev, int ring);
void radeon_irq_kms_pflip_irq_get(struct radeon_device *rdev, int crtc);
void radeon_irq_kms_pflip_irq_put(struct radeon_device *rdev, int crtc);
void radeon_irq_kms_enable_afmt(struct radeon_device *rdev, int block);
void radeon_irq_kms_disable_afmt(struct radeon_device *rdev, int block);
void radeon_irq_kms_enable_hpd(struct radeon_device *rdev, unsigned hpd_mask);
void radeon_irq_kms_disable_hpd(struct radeon_device *rdev, unsigned hpd_mask);





struct radeon_ib {
 struct radeon_sa_bo *sa_bo;
 uint32_t length_dw;
 uint64_t gpu_addr;
 uint32_t *ptr;
 int ring;
 struct radeon_fence *fence;
 struct radeon_vm *vm;
 bool is_const_ib;
 struct radeon_sync sync;
};

struct radeon_ring {
 struct radeon_device *rdev;
 struct radeon_bo *ring_obj;
 volatile uint32_t *ring;
 unsigned rptr_offs;
 unsigned rptr_save_reg;
 u64 next_rptr_gpu_addr;
 volatile u32 *next_rptr_cpu_addr;
 unsigned wptr;
 unsigned wptr_old;
 unsigned ring_size;
 unsigned ring_free_dw;
 int count_dw;
 atomic_t last_rptr;
 atomic64_t last_activity;
 uint64_t gpu_addr;
 uint32_t align_mask;
 uint32_t ptr_mask;
 bool ready;
 u32 nop;
 u32 idx;
 u64 last_semaphore_signal_addr;
 u64 last_semaphore_wait_addr;

 u32 me;
 u32 pipe;
 u32 queue;
 struct radeon_bo *mqd_obj;
 u32 doorbell_index;
 unsigned wptr_offs;
};

struct radeon_mec {
 struct radeon_bo *hpd_eop_obj;
 u64 hpd_eop_gpu_addr;
 u32 num_pipe;
 u32 num_mec;
 u32 num_queue;
};
# 901 "drivers/gpu/drm/radeon/radeon.h"
struct radeon_vm_pt {
 struct radeon_bo *bo;
 uint64_t addr;
};

struct radeon_vm_id {
 unsigned id;
 uint64_t pd_gpu_addr;

 struct radeon_fence *flushed_updates;

 struct radeon_fence *last_id_use;
};

struct radeon_vm {
 struct mutex mutex;

 struct rb_root_cached va;


 spinlock_t status_lock;


 struct list_head invalidated;


 struct list_head freed;


 struct list_head cleared;


 struct radeon_bo *page_directory;
 unsigned max_pde_used;


 struct radeon_vm_pt *page_tables;

 struct radeon_bo_va *ib_bo_va;


 struct radeon_vm_id ids[8];
};

struct radeon_vm_manager {
 struct radeon_fence *active[16];
 uint32_t max_pfn;

 unsigned nvm;

 u64 vram_base_offset;

 bool enabled;

 uint32_t saved_table_addr[16];
};




struct radeon_fpriv {
 struct radeon_vm vm;
};




struct r600_ih {
 struct radeon_bo *ring_obj;
 volatile uint32_t *ring;
 unsigned rptr;
 unsigned ring_size;
 uint64_t gpu_addr;
 uint32_t ptr_mask;
 atomic_t lock;
 bool enabled;
};




# 1 "drivers/gpu/drm/radeon/clearstate_defs.h" 1
# 26 "drivers/gpu/drm/radeon/clearstate_defs.h"
enum section_id {
    SECT_NONE,
    SECT_CONTEXT,
    SECT_CLEAR,
    SECT_CTRLCONST
};

struct cs_extent_def {
    const unsigned int *extent;
    const unsigned int reg_index;
    const unsigned int reg_count;
};

struct cs_section_def {
    const struct cs_extent_def *section;
    const enum section_id id;
};
# 983 "drivers/gpu/drm/radeon/radeon.h" 2

struct radeon_rlc {

 struct radeon_bo *save_restore_obj;
 uint64_t save_restore_gpu_addr;
 volatile uint32_t *sr_ptr;
 const u32 *reg_list;
 u32 reg_list_size;

 struct radeon_bo *clear_state_obj;
 uint64_t clear_state_gpu_addr;
 volatile uint32_t *cs_ptr;
 const struct cs_section_def *cs_data;
 u32 clear_state_size;

 struct radeon_bo *cp_table_obj;
 uint64_t cp_table_gpu_addr;
 volatile uint32_t *cp_table_ptr;
 u32 cp_table_size;
};

int radeon_ib_get(struct radeon_device *rdev, int ring,
    struct radeon_ib *ib, struct radeon_vm *vm,
    unsigned size);
void radeon_ib_free(struct radeon_device *rdev, struct radeon_ib *ib);
int radeon_ib_schedule(struct radeon_device *rdev, struct radeon_ib *ib,
         struct radeon_ib *const_ib, bool hdp_flush);
int radeon_ib_pool_init(struct radeon_device *rdev);
void radeon_ib_pool_fini(struct radeon_device *rdev);
int radeon_ib_ring_tests(struct radeon_device *rdev);

bool radeon_ring_supports_scratch_reg(struct radeon_device *rdev,
          struct radeon_ring *ring);
void radeon_ring_free_size(struct radeon_device *rdev, struct radeon_ring *cp);
int radeon_ring_alloc(struct radeon_device *rdev, struct radeon_ring *cp, unsigned ndw);
int radeon_ring_lock(struct radeon_device *rdev, struct radeon_ring *cp, unsigned ndw);
void radeon_ring_commit(struct radeon_device *rdev, struct radeon_ring *cp,
   bool hdp_flush);
void radeon_ring_unlock_commit(struct radeon_device *rdev, struct radeon_ring *cp,
          bool hdp_flush);
void radeon_ring_undo(struct radeon_ring *ring);
void radeon_ring_unlock_undo(struct radeon_device *rdev, struct radeon_ring *cp);
int radeon_ring_test(struct radeon_device *rdev, struct radeon_ring *cp);
void radeon_ring_lockup_update(struct radeon_device *rdev,
          struct radeon_ring *ring);
bool radeon_ring_test_lockup(struct radeon_device *rdev, struct radeon_ring *ring);
unsigned radeon_ring_backup(struct radeon_device *rdev, struct radeon_ring *ring,
       uint32_t **data);
int radeon_ring_restore(struct radeon_device *rdev, struct radeon_ring *ring,
   unsigned size, uint32_t *data);
int radeon_ring_init(struct radeon_device *rdev, struct radeon_ring *cp, unsigned ring_size,
       unsigned rptr_offs, u32 nop);
void radeon_ring_fini(struct radeon_device *rdev, struct radeon_ring *cp);



void r600_dma_stop(struct radeon_device *rdev);
int r600_dma_resume(struct radeon_device *rdev);
void r600_dma_fini(struct radeon_device *rdev);

void cayman_dma_stop(struct radeon_device *rdev);
int cayman_dma_resume(struct radeon_device *rdev);
void cayman_dma_fini(struct radeon_device *rdev);




struct radeon_cs_chunk {
 uint32_t length_dw;
 uint32_t *kdata;
 void *user_ptr;
};

struct radeon_cs_parser {
 struct device *dev;
 struct radeon_device *rdev;
 struct drm_file *filp;

 unsigned nchunks;
 struct radeon_cs_chunk *chunks;
 uint64_t *chunks_array;

 unsigned idx;

 unsigned nrelocs;
 struct radeon_bo_list *relocs;
 struct radeon_bo_list *vm_bos;
 struct list_head validated;
 unsigned dma_reloc_idx;

 struct radeon_cs_chunk *chunk_ib;
 struct radeon_cs_chunk *chunk_relocs;
 struct radeon_cs_chunk *chunk_flags;
 struct radeon_cs_chunk *chunk_const_ib;
 struct radeon_ib ib;
 struct radeon_ib const_ib;
 void *track;
 unsigned family;
 int parser_error;
 u32 cs_flags;
 u32 ring;
 s32 priority;
 struct ww_acquire_ctx ticket;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 radeon_get_ib_value(struct radeon_cs_parser *p, int idx)
{
 struct radeon_cs_chunk *ibc = p->chunk_ib;

 if (ibc->kdata)
  return ibc->kdata[idx];
 return p->ib.ptr[idx];
}


struct radeon_cs_packet {
 unsigned idx;
 unsigned type;
 unsigned reg;
 unsigned opcode;
 int count;
 unsigned one_reg_wr;
};

typedef int (*radeon_packet0_check_t)(struct radeon_cs_parser *p,
          struct radeon_cs_packet *pkt,
          unsigned idx, unsigned reg);





struct radeon_agp_mode {
 unsigned long mode;
};

struct radeon_agp_info {
 int agp_version_major;
 int agp_version_minor;
 unsigned long mode;
 unsigned long aperture_base;
 unsigned long aperture_size;
 unsigned long memory_allowed;
 unsigned long memory_used;


 unsigned short id_vendor;
 unsigned short id_device;
};

struct radeon_agp_head {
 struct agp_kern_info agp_info;
 struct list_head memory;
 unsigned long mode;
 struct agp_bridge_data *bridge;
 int enabled;
 int acquired;
 unsigned long base;
 int agp_mtrr;
 int cant_use_aperture;
 unsigned long page_mask;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct radeon_agp_head *radeon_agp_head_init(struct drm_device *dev)
{
 return ((void *)0);
}

int radeon_agp_init(struct radeon_device *rdev);
void radeon_agp_resume(struct radeon_device *rdev);
void radeon_agp_suspend(struct radeon_device *rdev);
void radeon_agp_fini(struct radeon_device *rdev);





struct radeon_wb {
 struct radeon_bo *wb_obj;
 volatile uint32_t *wb;
 uint64_t gpu_addr;
 bool enabled;
 bool use_event;
};
# 1205 "drivers/gpu/drm/radeon/radeon.h"
enum radeon_pm_method {
 PM_METHOD_PROFILE,
 PM_METHOD_DYNPM,
 PM_METHOD_DPM,
};

enum radeon_dynpm_state {
 DYNPM_STATE_DISABLED,
 DYNPM_STATE_MINIMUM,
 DYNPM_STATE_PAUSED,
 DYNPM_STATE_ACTIVE,
 DYNPM_STATE_SUSPENDED,
};
enum radeon_dynpm_action {
 DYNPM_ACTION_NONE,
 DYNPM_ACTION_MINIMUM,
 DYNPM_ACTION_DOWNCLOCK,
 DYNPM_ACTION_UPCLOCK,
 DYNPM_ACTION_DEFAULT
};

enum radeon_voltage_type {
 VOLTAGE_NONE = 0,
 VOLTAGE_GPIO,
 VOLTAGE_VDDC,
 VOLTAGE_SW
};

enum radeon_pm_state_type {

 POWER_STATE_TYPE_DEFAULT,
 POWER_STATE_TYPE_POWERSAVE,

 POWER_STATE_TYPE_BATTERY,
 POWER_STATE_TYPE_BALANCED,
 POWER_STATE_TYPE_PERFORMANCE,

 POWER_STATE_TYPE_INTERNAL_UVD,
 POWER_STATE_TYPE_INTERNAL_UVD_SD,
 POWER_STATE_TYPE_INTERNAL_UVD_HD,
 POWER_STATE_TYPE_INTERNAL_UVD_HD2,
 POWER_STATE_TYPE_INTERNAL_UVD_MVC,
 POWER_STATE_TYPE_INTERNAL_BOOT,
 POWER_STATE_TYPE_INTERNAL_THERMAL,
 POWER_STATE_TYPE_INTERNAL_ACPI,
 POWER_STATE_TYPE_INTERNAL_ULV,
 POWER_STATE_TYPE_INTERNAL_3DPERF,
};

enum radeon_pm_profile_type {
 PM_PROFILE_DEFAULT,
 PM_PROFILE_AUTO,
 PM_PROFILE_LOW,
 PM_PROFILE_MID,
 PM_PROFILE_HIGH,
};
# 1271 "drivers/gpu/drm/radeon/radeon.h"
struct radeon_pm_profile {
 int dpms_off_ps_idx;
 int dpms_on_ps_idx;
 int dpms_off_cm_idx;
 int dpms_on_cm_idx;
};

enum radeon_int_thermal_type {
 THERMAL_TYPE_NONE,
 THERMAL_TYPE_EXTERNAL,
 THERMAL_TYPE_EXTERNAL_GPIO,
 THERMAL_TYPE_RV6XX,
 THERMAL_TYPE_RV770,
 THERMAL_TYPE_ADT7473_WITH_INTERNAL,
 THERMAL_TYPE_EVERGREEN,
 THERMAL_TYPE_SUMO,
 THERMAL_TYPE_NI,
 THERMAL_TYPE_SI,
 THERMAL_TYPE_EMC2103_WITH_INTERNAL,
 THERMAL_TYPE_CI,
 THERMAL_TYPE_KV,
};

struct radeon_voltage {
 enum radeon_voltage_type type;

 struct radeon_gpio_rec gpio;
 u32 delay;
 bool active_high;

 u8 vddc_id;
 u8 vddci_id;
 bool vddci_enabled;

 u16 voltage;

 u16 vddci;
};




struct radeon_pm_clock_info {

 u32 mclk;

 u32 sclk;

 struct radeon_voltage voltage;

 u32 flags;
};




struct radeon_power_state {
 enum radeon_pm_state_type type;
 struct radeon_pm_clock_info *clock_info;

 int num_clock_modes;
 struct radeon_pm_clock_info *default_clock_mode;

 u32 flags;
 u32 misc;
 u32 misc2;
 int pcie_lanes;
};






enum radeon_dpm_auto_throttle_src {
 RADEON_DPM_AUTO_THROTTLE_SRC_THERMAL,
 RADEON_DPM_AUTO_THROTTLE_SRC_EXTERNAL
};

enum radeon_dpm_event_src {
 RADEON_DPM_EVENT_SRC_ANALOG = 0,
 RADEON_DPM_EVENT_SRC_EXTERNAL = 1,
 RADEON_DPM_EVENT_SRC_DIGITAL = 2,
 RADEON_DPM_EVENT_SRC_ANALOG_OR_EXTERNAL = 3,
 RADEON_DPM_EVENT_SRC_DIGIAL_OR_EXTERNAL = 4
};



enum radeon_vce_level {
 RADEON_VCE_LEVEL_AC_ALL = 0,
 RADEON_VCE_LEVEL_DC_EE = 1,
 RADEON_VCE_LEVEL_DC_LL_LOW = 2,
 RADEON_VCE_LEVEL_DC_LL_HIGH = 3,
 RADEON_VCE_LEVEL_DC_GP_LOW = 4,
 RADEON_VCE_LEVEL_DC_GP_HIGH = 5,
};

struct radeon_ps {
 u32 caps;
 u32 class;
 u32 class2;

 u32 vclk;
 u32 dclk;

 u32 evclk;
 u32 ecclk;
 bool vce_active;
 enum radeon_vce_level vce_level;

 void *ps_priv;
};

struct radeon_dpm_thermal {

 struct work_struct work;

 int min_temp;

 int max_temp;

 bool high_to_low;
};

enum radeon_clk_action
{
 RADEON_SCLK_UP = 1,
 RADEON_SCLK_DOWN
};

struct radeon_blacklist_clocks
{
 u32 sclk;
 u32 mclk;
 enum radeon_clk_action action;
};

struct radeon_clock_and_voltage_limits {
 u32 sclk;
 u32 mclk;
 u16 vddc;
 u16 vddci;
};

struct radeon_clock_array {
 u32 count;
 u32 *values;
};

struct radeon_clock_voltage_dependency_entry {
 u32 clk;
 u16 v;
};

struct radeon_clock_voltage_dependency_table {
 u32 count;
 struct radeon_clock_voltage_dependency_entry *entries;
};

union radeon_cac_leakage_entry {
 struct {
  u16 vddc;
  u32 leakage;
 };
 struct {
  u16 vddc1;
  u16 vddc2;
  u16 vddc3;
 };
};

struct radeon_cac_leakage_table {
 u32 count;
 union radeon_cac_leakage_entry *entries;
};

struct radeon_phase_shedding_limits_entry {
 u16 voltage;
 u32 sclk;
 u32 mclk;
};

struct radeon_phase_shedding_limits_table {
 u32 count;
 struct radeon_phase_shedding_limits_entry *entries;
};

struct radeon_uvd_clock_voltage_dependency_entry {
 u32 vclk;
 u32 dclk;
 u16 v;
};

struct radeon_uvd_clock_voltage_dependency_table {
 u8 count;
 struct radeon_uvd_clock_voltage_dependency_entry *entries;
};

struct radeon_vce_clock_voltage_dependency_entry {
 u32 ecclk;
 u32 evclk;
 u16 v;
};

struct radeon_vce_clock_voltage_dependency_table {
 u8 count;
 struct radeon_vce_clock_voltage_dependency_entry *entries;
};

struct radeon_ppm_table {
 u8 ppm_design;
 u16 cpu_core_number;
 u32 platform_tdp;
 u32 small_ac_platform_tdp;
 u32 platform_tdc;
 u32 small_ac_platform_tdc;
 u32 apu_tdp;
 u32 dgpu_tdp;
 u32 dgpu_ulv_power;
 u32 tj_max;
};

struct radeon_cac_tdp_table {
 u16 tdp;
 u16 configurable_tdp;
 u16 tdc;
 u16 battery_power_limit;
 u16 small_power_limit;
 u16 low_cac_leakage;
 u16 high_cac_leakage;
 u16 maximum_power_delivery_limit;
};

struct radeon_dpm_dynamic_state {
 struct radeon_clock_voltage_dependency_table vddc_dependency_on_sclk;
 struct radeon_clock_voltage_dependency_table vddci_dependency_on_mclk;
 struct radeon_clock_voltage_dependency_table vddc_dependency_on_mclk;
 struct radeon_clock_voltage_dependency_table mvdd_dependency_on_mclk;
 struct radeon_clock_voltage_dependency_table vddc_dependency_on_dispclk;
 struct radeon_uvd_clock_voltage_dependency_table uvd_clock_voltage_dependency_table;
 struct radeon_vce_clock_voltage_dependency_table vce_clock_voltage_dependency_table;
 struct radeon_clock_voltage_dependency_table samu_clock_voltage_dependency_table;
 struct radeon_clock_voltage_dependency_table acp_clock_voltage_dependency_table;
 struct radeon_clock_array valid_sclk_values;
 struct radeon_clock_array valid_mclk_values;
 struct radeon_clock_and_voltage_limits max_clock_voltage_on_dc;
 struct radeon_clock_and_voltage_limits max_clock_voltage_on_ac;
 u32 mclk_sclk_ratio;
 u32 sclk_mclk_delta;
 u16 vddc_vddci_delta;
 u16 min_vddc_for_pcie_gen2;
 struct radeon_cac_leakage_table cac_leakage_table;
 struct radeon_phase_shedding_limits_table phase_shedding_limits_table;
 struct radeon_ppm_table *ppm_table;
 struct radeon_cac_tdp_table *cac_tdp_table;
};

struct radeon_dpm_fan {
 u16 t_min;
 u16 t_med;
 u16 t_high;
 u16 pwm_min;
 u16 pwm_med;
 u16 pwm_high;
 u8 t_hyst;
 u32 cycle_delay;
 u16 t_max;
 u8 control_mode;
 u16 default_max_fan_pwm;
 u16 default_fan_output_sensitivity;
 u16 fan_output_sensitivity;
 bool ucode_fan_control;
};

enum radeon_pcie_gen {
 RADEON_PCIE_GEN1 = 0,
 RADEON_PCIE_GEN2 = 1,
 RADEON_PCIE_GEN3 = 2,
 RADEON_PCIE_GEN_INVALID = 0xffff
};

enum radeon_dpm_forced_level {
 RADEON_DPM_FORCED_LEVEL_AUTO = 0,
 RADEON_DPM_FORCED_LEVEL_LOW = 1,
 RADEON_DPM_FORCED_LEVEL_HIGH = 2,
};

struct radeon_vce_state {

 u32 evclk;
 u32 ecclk;

 u32 sclk;
 u32 mclk;
 u8 clk_idx;
 u8 pstate;
};

struct radeon_dpm {
 struct radeon_ps *ps;

 int num_ps;

 struct radeon_ps *current_ps;

 struct radeon_ps *requested_ps;

 struct radeon_ps *boot_ps;

 struct radeon_ps *uvd_ps;

 struct radeon_vce_state vce_states[6];
 enum radeon_vce_level vce_level;
 enum radeon_pm_state_type state;
 enum radeon_pm_state_type user_state;
 u32 platform_caps;
 u32 voltage_response_time;
 u32 backbias_response_time;
 void *priv;
 u32 new_active_crtcs;
 int new_active_crtc_count;
 int high_pixelclock_count;
 u32 current_active_crtcs;
 int current_active_crtc_count;
 bool single_display;
 struct radeon_dpm_dynamic_state dyn_state;
 struct radeon_dpm_fan fan;
 u32 tdp_limit;
 u32 near_tdp_limit;
 u32 near_tdp_limit_adjusted;
 u32 sq_ramping_threshold;
 u32 cac_leakage;
 u16 tdp_od_limit;
 u32 tdp_adjustment;
 u16 load_line_slope;
 bool power_control;
 bool ac_power;

 bool thermal_active;
 bool uvd_active;
 bool vce_active;

 struct radeon_dpm_thermal thermal;

 enum radeon_dpm_forced_level forced_level;

 unsigned sd;
 unsigned hd;
};

void radeon_dpm_enable_uvd(struct radeon_device *rdev, bool enable);
void radeon_dpm_enable_vce(struct radeon_device *rdev, bool enable);

struct radeon_pm {
 struct mutex mutex;

 struct rw_semaphore mclk_lock;
 u32 active_crtcs;
 int active_crtc_count;
 int req_vblank;
 bool vblank_sync;
 fixed20_12 max_bandwidth;
 fixed20_12 igp_sideport_mclk;
 fixed20_12 igp_system_mclk;
 fixed20_12 igp_ht_link_clk;
 fixed20_12 igp_ht_link_width;
 fixed20_12 k8_bandwidth;
 fixed20_12 sideport_bandwidth;
 fixed20_12 ht_bandwidth;
 fixed20_12 core_bandwidth;
 fixed20_12 sclk;
 fixed20_12 mclk;
 fixed20_12 needed_bandwidth;
 struct radeon_power_state *power_state;

 int num_power_states;
 int current_power_state_index;
 int current_clock_mode_index;
 int requested_power_state_index;
 int requested_clock_mode_index;
 int default_power_state_index;
 u32 current_sclk;
 u32 current_mclk;
 u16 current_vddc;
 u16 current_vddci;
 u32 default_sclk;
 u32 default_mclk;
 u16 default_vddc;
 u16 default_vddci;
 struct radeon_i2c_chan *i2c_bus;

 enum radeon_pm_method pm_method;

 struct delayed_work dynpm_idle_work;
 enum radeon_dynpm_state dynpm_state;
 enum radeon_dynpm_action dynpm_planned_action;
 unsigned long dynpm_action_timeout;
 bool dynpm_can_upclock;
 bool dynpm_can_downclock;

 enum radeon_pm_profile_type profile;
 int profile_index;
 struct radeon_pm_profile profiles[7];

 enum radeon_int_thermal_type int_thermal_type;
 struct device *int_hwmon_dev;

 bool no_fan;
 u8 fan_pulses_per_revolution;
 u8 fan_min_rpm;
 u8 fan_max_rpm;

 bool dpm_enabled;
 bool sysfs_initialized;
 struct radeon_dpm dpm;
};





int radeon_pm_get_type_index(struct radeon_device *rdev,
        enum radeon_pm_state_type ps_type,
        int instance);
# 1705 "drivers/gpu/drm/radeon/radeon.h"
struct radeon_uvd {
 bool fw_header_present;
 struct radeon_bo *vcpu_bo;
 void *cpu_addr;
 uint64_t gpu_addr;
 unsigned max_handles;
 atomic_t handles[30];
 struct drm_file *filp[30];
 unsigned img_size[30];
 struct delayed_work idle_work;
};

int radeon_uvd_init(struct radeon_device *rdev);
void radeon_uvd_fini(struct radeon_device *rdev);
int radeon_uvd_suspend(struct radeon_device *rdev);
int radeon_uvd_resume(struct radeon_device *rdev);
int radeon_uvd_get_create_msg(struct radeon_device *rdev, int ring,
         uint32_t handle, struct radeon_fence **fence);
int radeon_uvd_get_destroy_msg(struct radeon_device *rdev, int ring,
          uint32_t handle, struct radeon_fence **fence);
void radeon_uvd_force_into_uvd_segment(struct radeon_bo *rbo,
           uint32_t allowed_domains);
void radeon_uvd_free_handles(struct radeon_device *rdev,
        struct drm_file *filp);
int radeon_uvd_cs_parse(struct radeon_cs_parser *parser);
void radeon_uvd_note_usage(struct radeon_device *rdev);
int radeon_uvd_calc_upll_dividers(struct radeon_device *rdev,
      unsigned vclk, unsigned dclk,
      unsigned vco_min, unsigned vco_max,
      unsigned fb_factor, unsigned fb_mask,
      unsigned pd_min, unsigned pd_max,
      unsigned pd_even,
      unsigned *optimal_fb_div,
      unsigned *optimal_vclk_div,
      unsigned *optimal_dclk_div);
int radeon_uvd_send_upll_ctlreq(struct radeon_device *rdev,
                                unsigned cg_upll_func_cntl);






struct radeon_vce {
 struct radeon_bo *vcpu_bo;
 uint64_t gpu_addr;
 unsigned fw_version;
 unsigned fb_version;
 atomic_t handles[16];
 struct drm_file *filp[16];
 unsigned img_size[16];
 struct delayed_work idle_work;
 uint32_t keyselect;
};

int radeon_vce_init(struct radeon_device *rdev);
void radeon_vce_fini(struct radeon_device *rdev);
int radeon_vce_suspend(struct radeon_device *rdev);
int radeon_vce_resume(struct radeon_device *rdev);
int radeon_vce_get_create_msg(struct radeon_device *rdev, int ring,
         uint32_t handle, struct radeon_fence **fence);
int radeon_vce_get_destroy_msg(struct radeon_device *rdev, int ring,
          uint32_t handle, struct radeon_fence **fence);
void radeon_vce_free_handles(struct radeon_device *rdev, struct drm_file *filp);
void radeon_vce_note_usage(struct radeon_device *rdev);
int radeon_vce_cs_reloc(struct radeon_cs_parser *p, int lo, int hi, unsigned size);
int radeon_vce_cs_parse(struct radeon_cs_parser *p);
bool radeon_vce_semaphore_emit(struct radeon_device *rdev,
          struct radeon_ring *ring,
          struct radeon_semaphore *semaphore,
          bool emit_wait);
void radeon_vce_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
void radeon_vce_fence_emit(struct radeon_device *rdev,
      struct radeon_fence *fence);
int radeon_vce_ring_test(struct radeon_device *rdev, struct radeon_ring *ring);
int radeon_vce_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);

struct r600_audio_pin {
 int channels;
 int rate;
 int bits_per_sample;
 u8 status_bits;
 u8 category_code;
 u32 offset;
 bool connected;
 u32 id;
};

struct r600_audio {
 bool enabled;
 struct r600_audio_pin pin[7];
 int num_pins;
 struct radeon_audio_funcs *hdmi_funcs;
 struct radeon_audio_funcs *dp_funcs;
 struct radeon_audio_basic_funcs *funcs;
};




void radeon_benchmark(struct radeon_device *rdev, int test_number);





void radeon_test_moves(struct radeon_device *rdev);
void radeon_test_ring_sync(struct radeon_device *rdev,
      struct radeon_ring *cpA,
      struct radeon_ring *cpB);
void radeon_test_syncing(struct radeon_device *rdev);
# 1824 "drivers/gpu/drm/radeon/radeon.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radeon_mn_register(struct radeon_bo *bo, unsigned long addr)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radeon_mn_unregister(struct radeon_bo *bo) {}





void radeon_debugfs_fence_init(struct radeon_device *rdev);
void radeon_gem_debugfs_init(struct radeon_device *rdev);




struct radeon_asic_ring {

 u32 (*get_rptr)(struct radeon_device *rdev, struct radeon_ring *ring);
 u32 (*get_wptr)(struct radeon_device *rdev, struct radeon_ring *ring);
 void (*set_wptr)(struct radeon_device *rdev, struct radeon_ring *ring);


 int (*ib_parse)(struct radeon_device *rdev, struct radeon_ib *ib);
 int (*cs_parse)(struct radeon_cs_parser *p);


 void (*ib_execute)(struct radeon_device *rdev, struct radeon_ib *ib);
 void (*emit_fence)(struct radeon_device *rdev, struct radeon_fence *fence);
 void (*hdp_flush)(struct radeon_device *rdev, struct radeon_ring *ring);
 bool (*emit_semaphore)(struct radeon_device *rdev, struct radeon_ring *cp,
          struct radeon_semaphore *semaphore, bool emit_wait);
 void (*vm_flush)(struct radeon_device *rdev, struct radeon_ring *ring,
    unsigned vm_id, uint64_t pd_addr);


 int (*ring_test)(struct radeon_device *rdev, struct radeon_ring *cp);
 int (*ib_test)(struct radeon_device *rdev, struct radeon_ring *cp);
 bool (*is_lockup)(struct radeon_device *rdev, struct radeon_ring *cp);


 void (*ring_start)(struct radeon_device *rdev, struct radeon_ring *cp);
};




struct radeon_asic {
 int (*init)(struct radeon_device *rdev);
 void (*fini)(struct radeon_device *rdev);
 int (*resume)(struct radeon_device *rdev);
 int (*suspend)(struct radeon_device *rdev);
 void (*vga_set_state)(struct radeon_device *rdev, bool state);
 int (*asic_reset)(struct radeon_device *rdev, bool hard);

 void (*mmio_hdp_flush)(struct radeon_device *rdev);

 bool (*gui_idle)(struct radeon_device *rdev);

 int (*mc_wait_for_idle)(struct radeon_device *rdev);

 u32 (*get_xclk)(struct radeon_device *rdev);

 uint64_t (*get_gpu_clock_counter)(struct radeon_device *rdev);

 int (*get_allowed_info_register)(struct radeon_device *rdev, u32 reg, u32 *val);

 struct {
  void (*tlb_flush)(struct radeon_device *rdev);
  uint64_t (*get_page_entry)(uint64_t addr, uint32_t flags);
  void (*set_page)(struct radeon_device *rdev, unsigned i,
     uint64_t entry);
 } gart;
 struct {
  int (*init)(struct radeon_device *rdev);
  void (*fini)(struct radeon_device *rdev);
  void (*copy_pages)(struct radeon_device *rdev,
       struct radeon_ib *ib,
       uint64_t pe, uint64_t src,
       unsigned count);
  void (*write_pages)(struct radeon_device *rdev,
        struct radeon_ib *ib,
        uint64_t pe,
        uint64_t addr, unsigned count,
        uint32_t incr, uint32_t flags);
  void (*set_pages)(struct radeon_device *rdev,
      struct radeon_ib *ib,
      uint64_t pe,
      uint64_t addr, unsigned count,
      uint32_t incr, uint32_t flags);
  void (*pad_ib)(struct radeon_ib *ib);
 } vm;

 const struct radeon_asic_ring *ring[8];

 struct {
  int (*set)(struct radeon_device *rdev);
  int (*process)(struct radeon_device *rdev);
 } irq;

 struct {

  void (*bandwidth_update)(struct radeon_device *rdev);

  u32 (*get_vblank_counter)(struct radeon_device *rdev, int crtc);

  void (*wait_for_vblank)(struct radeon_device *rdev, int crtc);

  void (*set_backlight_level)(struct radeon_encoder *radeon_encoder, u8 level);

  u8 (*get_backlight_level)(struct radeon_encoder *radeon_encoder);

  void (*hdmi_enable)(struct drm_encoder *encoder, bool enable);
  void (*hdmi_setmode)(struct drm_encoder *encoder, struct drm_display_mode *mode);
 } display;

 struct {
  struct radeon_fence *(*blit)(struct radeon_device *rdev,
          uint64_t src_offset,
          uint64_t dst_offset,
          unsigned num_gpu_pages,
          struct dma_resv *resv);
  u32 blit_ring_index;
  struct radeon_fence *(*dma)(struct radeon_device *rdev,
         uint64_t src_offset,
         uint64_t dst_offset,
         unsigned num_gpu_pages,
         struct dma_resv *resv);
  u32 dma_ring_index;

  struct radeon_fence *(*copy)(struct radeon_device *rdev,
          uint64_t src_offset,
          uint64_t dst_offset,
          unsigned num_gpu_pages,
          struct dma_resv *resv);

  u32 copy_ring_index;
 } copy;

 struct {
  int (*set_reg)(struct radeon_device *rdev, int reg,
           uint32_t tiling_flags, uint32_t pitch,
           uint32_t offset, uint32_t obj_size);
  void (*clear_reg)(struct radeon_device *rdev, int reg);
 } surface;

 struct {
  void (*init)(struct radeon_device *rdev);
  void (*fini)(struct radeon_device *rdev);
  bool (*sense)(struct radeon_device *rdev, enum radeon_hpd_id hpd);
  void (*set_polarity)(struct radeon_device *rdev, enum radeon_hpd_id hpd);
 } hpd;

 struct {
  void (*misc)(struct radeon_device *rdev);
  void (*prepare)(struct radeon_device *rdev);
  void (*finish)(struct radeon_device *rdev);
  void (*init_profile)(struct radeon_device *rdev);
  void (*get_dynpm_state)(struct radeon_device *rdev);
  uint32_t (*get_engine_clock)(struct radeon_device *rdev);
  void (*set_engine_clock)(struct radeon_device *rdev, uint32_t eng_clock);
  uint32_t (*get_memory_clock)(struct radeon_device *rdev);
  void (*set_memory_clock)(struct radeon_device *rdev, uint32_t mem_clock);
  int (*get_pcie_lanes)(struct radeon_device *rdev);
  void (*set_pcie_lanes)(struct radeon_device *rdev, int lanes);
  void (*set_clock_gating)(struct radeon_device *rdev, int enable);
  int (*set_uvd_clocks)(struct radeon_device *rdev, u32 vclk, u32 dclk);
  int (*set_vce_clocks)(struct radeon_device *rdev, u32 evclk, u32 ecclk);
  int (*get_temperature)(struct radeon_device *rdev);
 } pm;

 struct {
  int (*init)(struct radeon_device *rdev);
  void (*setup_asic)(struct radeon_device *rdev);
  int (*enable)(struct radeon_device *rdev);
  int (*late_enable)(struct radeon_device *rdev);
  void (*disable)(struct radeon_device *rdev);
  int (*pre_set_power_state)(struct radeon_device *rdev);
  int (*set_power_state)(struct radeon_device *rdev);
  void (*post_set_power_state)(struct radeon_device *rdev);
  void (*display_configuration_changed)(struct radeon_device *rdev);
  void (*fini)(struct radeon_device *rdev);
  u32 (*get_sclk)(struct radeon_device *rdev, bool low);
  u32 (*get_mclk)(struct radeon_device *rdev, bool low);
  void (*print_power_state)(struct radeon_device *rdev, struct radeon_ps *ps);
  void (*debugfs_print_current_performance_level)(struct radeon_device *rdev, struct seq_file *m);
  int (*force_performance_level)(struct radeon_device *rdev, enum radeon_dpm_forced_level level);
  bool (*vblank_too_short)(struct radeon_device *rdev);
  void (*powergate_uvd)(struct radeon_device *rdev, bool gate);
  void (*enable_bapm)(struct radeon_device *rdev, bool enable);
  void (*fan_ctrl_set_mode)(struct radeon_device *rdev, u32 mode);
  u32 (*fan_ctrl_get_mode)(struct radeon_device *rdev);
  int (*set_fan_speed_percent)(struct radeon_device *rdev, u32 speed);
  int (*get_fan_speed_percent)(struct radeon_device *rdev, u32 *speed);
  u32 (*get_current_sclk)(struct radeon_device *rdev);
  u32 (*get_current_mclk)(struct radeon_device *rdev);
  u16 (*get_current_vddc)(struct radeon_device *rdev);
 } dpm;

 struct {
  void (*page_flip)(struct radeon_device *rdev, int crtc, u64 crtc_base, bool async);
  bool (*page_flip_pending)(struct radeon_device *rdev, int crtc);
 } pflip;
};




struct r100_asic {
 const unsigned *reg_safe_bm;
 unsigned reg_safe_bm_size;
 u32 hdp_cntl;
};

struct r300_asic {
 const unsigned *reg_safe_bm;
 unsigned reg_safe_bm_size;
 u32 resync_scratch;
 u32 hdp_cntl;
};

struct r600_asic {
 unsigned max_pipes;
 unsigned max_tile_pipes;
 unsigned max_simds;
 unsigned max_backends;
 unsigned max_gprs;
 unsigned max_threads;
 unsigned max_stack_entries;
 unsigned max_hw_contexts;
 unsigned max_gs_threads;
 unsigned sx_max_export_size;
 unsigned sx_max_export_pos_size;
 unsigned sx_max_export_smx_size;
 unsigned sq_num_cf_insts;
 unsigned tiling_nbanks;
 unsigned tiling_npipes;
 unsigned tiling_group_size;
 unsigned tile_config;
 unsigned backend_map;
 unsigned active_simds;
};

struct rv770_asic {
 unsigned max_pipes;
 unsigned max_tile_pipes;
 unsigned max_simds;
 unsigned max_backends;
 unsigned max_gprs;
 unsigned max_threads;
 unsigned max_stack_entries;
 unsigned max_hw_contexts;
 unsigned max_gs_threads;
 unsigned sx_max_export_size;
 unsigned sx_max_export_pos_size;
 unsigned sx_max_export_smx_size;
 unsigned sq_num_cf_insts;
 unsigned sx_num_of_sets;
 unsigned sc_prim_fifo_size;
 unsigned sc_hiz_tile_fifo_size;
 unsigned sc_earlyz_tile_fifo_fize;
 unsigned tiling_nbanks;
 unsigned tiling_npipes;
 unsigned tiling_group_size;
 unsigned tile_config;
 unsigned backend_map;
 unsigned active_simds;
};

struct evergreen_asic {
 unsigned num_ses;
 unsigned max_pipes;
 unsigned max_tile_pipes;
 unsigned max_simds;
 unsigned max_backends;
 unsigned max_gprs;
 unsigned max_threads;
 unsigned max_stack_entries;
 unsigned max_hw_contexts;
 unsigned max_gs_threads;
 unsigned sx_max_export_size;
 unsigned sx_max_export_pos_size;
 unsigned sx_max_export_smx_size;
 unsigned sq_num_cf_insts;
 unsigned sx_num_of_sets;
 unsigned sc_prim_fifo_size;
 unsigned sc_hiz_tile_fifo_size;
 unsigned sc_earlyz_tile_fifo_size;
 unsigned tiling_nbanks;
 unsigned tiling_npipes;
 unsigned tiling_group_size;
 unsigned tile_config;
 unsigned backend_map;
 unsigned active_simds;
};

struct cayman_asic {
 unsigned max_shader_engines;
 unsigned max_pipes_per_simd;
 unsigned max_tile_pipes;
 unsigned max_simds_per_se;
 unsigned max_backends_per_se;
 unsigned max_texture_channel_caches;
 unsigned max_gprs;
 unsigned max_threads;
 unsigned max_gs_threads;
 unsigned max_stack_entries;
 unsigned sx_num_of_sets;
 unsigned sx_max_export_size;
 unsigned sx_max_export_pos_size;
 unsigned sx_max_export_smx_size;
 unsigned max_hw_contexts;
 unsigned sq_num_cf_insts;
 unsigned sc_prim_fifo_size;
 unsigned sc_hiz_tile_fifo_size;
 unsigned sc_earlyz_tile_fifo_size;

 unsigned num_shader_engines;
 unsigned num_shader_pipes_per_simd;
 unsigned num_tile_pipes;
 unsigned num_simds_per_se;
 unsigned num_backends_per_se;
 unsigned backend_disable_mask_per_asic;
 unsigned backend_map;
 unsigned num_texture_channel_caches;
 unsigned mem_max_burst_length_bytes;
 unsigned mem_row_size_in_kb;
 unsigned shader_engine_tile_size;
 unsigned num_gpus;
 unsigned multi_gpu_tile_size;

 unsigned tile_config;
 unsigned active_simds;
};

struct si_asic {
 unsigned max_shader_engines;
 unsigned max_tile_pipes;
 unsigned max_cu_per_sh;
 unsigned max_sh_per_se;
 unsigned max_backends_per_se;
 unsigned max_texture_channel_caches;
 unsigned max_gprs;
 unsigned max_gs_threads;
 unsigned max_hw_contexts;
 unsigned sc_prim_fifo_size_frontend;
 unsigned sc_prim_fifo_size_backend;
 unsigned sc_hiz_tile_fifo_size;
 unsigned sc_earlyz_tile_fifo_size;

 unsigned num_tile_pipes;
 unsigned backend_enable_mask;
 unsigned backend_disable_mask_per_asic;
 unsigned backend_map;
 unsigned num_texture_channel_caches;
 unsigned mem_max_burst_length_bytes;
 unsigned mem_row_size_in_kb;
 unsigned shader_engine_tile_size;
 unsigned num_gpus;
 unsigned multi_gpu_tile_size;

 unsigned tile_config;
 uint32_t tile_mode_array[32];
 uint32_t active_cus;
};

struct cik_asic {
 unsigned max_shader_engines;
 unsigned max_tile_pipes;
 unsigned max_cu_per_sh;
 unsigned max_sh_per_se;
 unsigned max_backends_per_se;
 unsigned max_texture_channel_caches;
 unsigned max_gprs;
 unsigned max_gs_threads;
 unsigned max_hw_contexts;
 unsigned sc_prim_fifo_size_frontend;
 unsigned sc_prim_fifo_size_backend;
 unsigned sc_hiz_tile_fifo_size;
 unsigned sc_earlyz_tile_fifo_size;

 unsigned num_tile_pipes;
 unsigned backend_enable_mask;
 unsigned backend_disable_mask_per_asic;
 unsigned backend_map;
 unsigned num_texture_channel_caches;
 unsigned mem_max_burst_length_bytes;
 unsigned mem_row_size_in_kb;
 unsigned shader_engine_tile_size;
 unsigned num_gpus;
 unsigned multi_gpu_tile_size;

 unsigned tile_config;
 uint32_t tile_mode_array[32];
 uint32_t macrotile_mode_array[16];
 uint32_t active_cus;
};

union radeon_asic_config {
 struct r300_asic r300;
 struct r100_asic r100;
 struct r600_asic r600;
 struct rv770_asic rv770;
 struct evergreen_asic evergreen;
 struct cayman_asic cayman;
 struct si_asic si;
 struct cik_asic cik;
};




void radeon_agp_disable(struct radeon_device *rdev);
int radeon_asic_init(struct radeon_device *rdev);





int radeon_gem_info_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int radeon_gem_create_ioctl(struct drm_device *dev, void *data,
       struct drm_file *filp);
int radeon_gem_userptr_ioctl(struct drm_device *dev, void *data,
        struct drm_file *filp);
int radeon_gem_pin_ioctl(struct drm_device *dev, void *data,
    struct drm_file *file_priv);
int radeon_gem_unpin_ioctl(struct drm_device *dev, void *data,
      struct drm_file *file_priv);
int radeon_gem_pwrite_ioctl(struct drm_device *dev, void *data,
       struct drm_file *file_priv);
int radeon_gem_pread_ioctl(struct drm_device *dev, void *data,
      struct drm_file *file_priv);
int radeon_gem_set_domain_ioctl(struct drm_device *dev, void *data,
    struct drm_file *filp);
int radeon_gem_mmap_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int radeon_gem_busy_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int radeon_gem_wait_idle_ioctl(struct drm_device *dev, void *data,
         struct drm_file *filp);
int radeon_gem_va_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int radeon_gem_op_ioctl(struct drm_device *dev, void *data,
   struct drm_file *filp);
int radeon_cs_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);
int radeon_gem_set_tiling_ioctl(struct drm_device *dev, void *data,
    struct drm_file *filp);
int radeon_gem_get_tiling_ioctl(struct drm_device *dev, void *data,
    struct drm_file *filp);
int radeon_info_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);


struct r600_vram_scratch {
 struct radeon_bo *robj;
 volatile uint32_t *ptr;
 u64 gpu_addr;
};




struct radeon_atif_notification_cfg {
 bool enabled;
 int command_code;
};

struct radeon_atif_notifications {
 bool display_switch;
 bool expansion_mode_change;
 bool thermal_state;
 bool forced_power_state;
 bool system_power_state;
 bool display_conf_change;
 bool px_gfx_switch;
 bool brightness_change;
 bool dgpu_display_event;
};

struct radeon_atif_functions {
 bool system_params;
 bool sbios_requests;
 bool select_active_disp;
 bool lid_state;
 bool get_tv_standard;
 bool set_tv_standard;
 bool get_panel_expansion_mode;
 bool set_panel_expansion_mode;
 bool temperature_change;
 bool graphics_device_types;
};

struct radeon_atif {
 struct radeon_atif_notifications notifications;
 struct radeon_atif_functions functions;
 struct radeon_atif_notification_cfg notification_cfg;
 struct radeon_encoder *encoder_for_bl;
};

struct radeon_atcs_functions {
 bool get_ext_state;
 bool pcie_perf_req;
 bool pcie_dev_rdy;
 bool pcie_bus_width;
};

struct radeon_atcs {
 struct radeon_atcs_functions functions;
};




typedef uint32_t (*radeon_rreg_t)(struct radeon_device*, uint32_t);
typedef void (*radeon_wreg_t)(struct radeon_device*, uint32_t, uint32_t);

struct radeon_device {
 struct device *dev;
 struct drm_device *ddev;
 struct pci_dev *pdev;



 struct radeon_agp_head *agp;
 struct rw_semaphore exclusive_lock;

 union radeon_asic_config config;
 enum radeon_family family;
 unsigned long flags;
 int usec_timeout;
 enum radeon_pll_errata pll_errata;
 int num_gb_pipes;
 int num_z_pipes;
 int disp_priority;

 uint8_t *bios;
 bool is_atom_bios;
 uint16_t bios_header_start;
 struct radeon_bo *stolen_vga_memory;

 resource_size_t rmmio_base;
 resource_size_t rmmio_size;

 spinlock_t mmio_idx_lock;

 spinlock_t smc_idx_lock;

 spinlock_t pll_idx_lock;

 spinlock_t mc_idx_lock;

 spinlock_t pcie_idx_lock;

 spinlock_t pciep_idx_lock;

 spinlock_t pif_idx_lock;

 spinlock_t cg_idx_lock;

 spinlock_t uvd_idx_lock;

 spinlock_t rcu_idx_lock;

 spinlock_t didt_idx_lock;

 spinlock_t end_idx_lock;
 void *rmmio;
 radeon_rreg_t mc_rreg;
 radeon_wreg_t mc_wreg;
 radeon_rreg_t pll_rreg;
 radeon_wreg_t pll_wreg;
 uint32_t pcie_reg_mask;
 radeon_rreg_t pciep_rreg;
 radeon_wreg_t pciep_wreg;

 void *rio_mem;
 resource_size_t rio_mem_size;
 struct radeon_clock clock;
 struct radeon_mc mc;
 struct radeon_gart gart;
 struct radeon_mode_info mode_info;
 struct radeon_scratch scratch;
 struct radeon_doorbell doorbell;
 struct radeon_mman mman;
 struct radeon_fence_driver fence_drv[8];
 wait_queue_head_t fence_queue;
 u64 fence_context;
 struct mutex ring_lock;
 struct radeon_ring ring[8];
 bool ib_pool_ready;
 struct radeon_sa_manager ring_tmp_bo;
 struct radeon_irq irq;
 struct radeon_asic *asic;
 struct radeon_gem gem;
 struct radeon_pm pm;
 struct radeon_uvd uvd;
 struct radeon_vce vce;
 uint32_t bios_scratch[8];
 struct radeon_wb wb;
 struct radeon_dummy_page dummy_page;
 bool shutdown;
 bool need_swiotlb;
 bool accel_working;
 bool fastfb_working;
 bool needs_reset, in_reset;
 struct radeon_surface_reg surface_regs[8];
 const struct firmware *me_fw;
 const struct firmware *pfp_fw;
 const struct firmware *rlc_fw;
 const struct firmware *mc_fw;
 const struct firmware *ce_fw;
 const struct firmware *mec_fw;
 const struct firmware *mec2_fw;
 const struct firmware *sdma_fw;
 const struct firmware *smc_fw;
 const struct firmware *uvd_fw;
 const struct firmware *vce_fw;
 bool new_fw;
 struct r600_vram_scratch vram_scratch;
 int msi_enabled;
 struct r600_ih ih;
 struct radeon_rlc rlc;
 struct radeon_mec mec;
 struct delayed_work hotplug_work;
 struct work_struct dp_work;
 struct work_struct audio_work;
 int num_crtc;
 struct mutex dc_hw_i2c_mutex;
 bool has_uvd;
 bool has_vce;
 struct r600_audio audio;
 struct notifier_block acpi_nb;

 struct drm_file *hyperz_filp;
 struct drm_file *cmask_filp;

 struct radeon_i2c_chan *i2c_bus[16];

 struct radeon_vm_manager vm_manager;
 struct mutex gpu_clock_mutex;

 atomic64_t vram_usage;
 atomic64_t gtt_usage;
 atomic64_t num_bytes_moved;
 atomic_t gpu_reset_counter;

 struct radeon_atif atif;
 struct radeon_atcs atcs;

 struct mutex srbm_mutex;

 u32 cg_flags;
 u32 pg_flags;

 struct dev_pm_domain vga_pm_domain;
 bool have_disp_power_ref;
 u32 px_quirk_flags;


 u64 vram_pin_size;
 u64 gart_pin_size;
};

bool radeon_is_px(struct drm_device *dev);
int radeon_device_init(struct radeon_device *rdev,
         struct drm_device *ddev,
         struct pci_dev *pdev,
         uint32_t flags);
void radeon_device_fini(struct radeon_device *rdev);
int radeon_gpu_wait_for_idle(struct radeon_device *rdev);



uint32_t r100_mm_rreg_slow(struct radeon_device *rdev, uint32_t reg);
void r100_mm_wreg_slow(struct radeon_device *rdev, uint32_t reg, uint32_t v);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t r100_mm_rreg(struct radeon_device *rdev, uint32_t reg,
        bool always_indirect)
{

 if ((reg < rdev->rmmio_size || reg < 0x10000) && !always_indirect)
  return ({ u32 __v; do {} while (0); __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(((void *)rdev->rmmio) + reg))); __r; }); __asm__ __volatile__ ("fence i,r" : : : "memory"); __v; });
 else
  return r100_mm_rreg_slow(rdev, reg);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void r100_mm_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v,
    bool always_indirect)
{
 if ((reg < rdev->rmmio_size || reg < 0x10000) && !always_indirect)
  ({ __asm__ __volatile__ ("fence w,o" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)((v))), ((((void *)rdev->rmmio) + reg)))); mmiowb_set_pending(); });
 else
  r100_mm_wreg_slow(rdev, reg, v);
}

u32 r100_io_rreg(struct radeon_device *rdev, u32 reg);
void r100_io_wreg(struct radeon_device *rdev, u32 reg, u32 v);

u32 cik_mm_rdoorbell(struct radeon_device *rdev, u32 index);
void cik_mm_wdoorbell(struct radeon_device *rdev, u32 index, u32 v);




extern const struct dma_fence_ops radeon_fence_ops;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct radeon_fence *to_radeon_fence(struct dma_fence *f)
{
 struct radeon_fence *__f = ({ void *__mptr = (void *)(f); do { extern void __compiletime_assert_357(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(f)), typeof(((struct radeon_fence *)0)->base)) && !__builtin_types_compatible_p(typeof(*(f)), typeof(void))))) __compiletime_assert_357(); } while (0); ((struct radeon_fence *)(__mptr - __builtin_offsetof(struct radeon_fence, base))); });

 if (__f->base.ops == &radeon_fence_ops)
  return __f;

 return ((void *)0);
}
# 2613 "drivers/gpu/drm/radeon/radeon.h"
uint32_t rv370_pcie_rreg(struct radeon_device *rdev, uint32_t reg);
void rv370_pcie_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
u32 tn_smc_rreg(struct radeon_device *rdev, u32 reg);
void tn_smc_wreg(struct radeon_device *rdev, u32 reg, u32 v);
u32 r600_rcu_rreg(struct radeon_device *rdev, u32 reg);
void r600_rcu_wreg(struct radeon_device *rdev, u32 reg, u32 v);
u32 eg_cg_rreg(struct radeon_device *rdev, u32 reg);
void eg_cg_wreg(struct radeon_device *rdev, u32 reg, u32 v);
u32 eg_pif_phy0_rreg(struct radeon_device *rdev, u32 reg);
void eg_pif_phy0_wreg(struct radeon_device *rdev, u32 reg, u32 v);
u32 eg_pif_phy1_rreg(struct radeon_device *rdev, u32 reg);
void eg_pif_phy1_wreg(struct radeon_device *rdev, u32 reg, u32 v);
u32 r600_uvd_ctx_rreg(struct radeon_device *rdev, u32 reg);
void r600_uvd_ctx_wreg(struct radeon_device *rdev, u32 reg, u32 v);
u32 cik_didt_rreg(struct radeon_device *rdev, u32 reg);
void cik_didt_wreg(struct radeon_device *rdev, u32 reg, u32 v);

void r100_pll_errata_after_index(struct radeon_device *rdev);
# 2700 "drivers/gpu/drm/radeon/radeon.h"
int radeon_combios_init(struct radeon_device *rdev);
void radeon_combios_fini(struct radeon_device *rdev);
int radeon_atombios_init(struct radeon_device *rdev);
void radeon_atombios_fini(struct radeon_device *rdev);
# 2718 "drivers/gpu/drm/radeon/radeon.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radeon_ring_write(struct radeon_ring *ring, uint32_t v)
{
 if (ring->count_dw <= 0)
  __drm_err("radeon: writing more dwords to the ring than expected!\n");

 ring->ring[ring->wptr++] = v;
 ring->wptr &= ring->ptr_mask;
 ring->count_dw--;
 ring->ring_free_dw--;
}
# 2826 "drivers/gpu/drm/radeon/radeon.h"
extern int radeon_gpu_reset(struct radeon_device *rdev);
extern void radeon_pci_config_reset(struct radeon_device *rdev);
extern void r600_set_bios_scratch_engine_hung(struct radeon_device *rdev, bool hung);
extern void radeon_agp_disable(struct radeon_device *rdev);
extern int radeon_modeset_init(struct radeon_device *rdev);
extern void radeon_modeset_fini(struct radeon_device *rdev);
extern bool radeon_card_posted(struct radeon_device *rdev);
extern void radeon_update_bandwidth_info(struct radeon_device *rdev);
extern void radeon_update_display_priority(struct radeon_device *rdev);
extern bool radeon_boot_test_post_card(struct radeon_device *rdev);
extern void radeon_scratch_init(struct radeon_device *rdev);
extern void radeon_wb_fini(struct radeon_device *rdev);
extern int radeon_wb_init(struct radeon_device *rdev);
extern void radeon_wb_disable(struct radeon_device *rdev);
extern void radeon_surface_init(struct radeon_device *rdev);
extern int radeon_cs_parser_init(struct radeon_cs_parser *p, void *data);
extern void radeon_legacy_set_clock_gating(struct radeon_device *rdev, int enable);
extern void radeon_atom_set_clock_gating(struct radeon_device *rdev, int enable);
extern void radeon_ttm_placement_from_domain(struct radeon_bo *rbo, u32 domain);
extern bool radeon_ttm_bo_is_radeon_bo(struct ttm_buffer_object *bo);
extern int radeon_ttm_tt_set_userptr(struct radeon_device *rdev,
         struct ttm_tt *ttm, uint64_t addr,
         uint32_t flags);
extern bool radeon_ttm_tt_has_userptr(struct radeon_device *rdev, struct ttm_tt *ttm);
extern bool radeon_ttm_tt_is_readonly(struct radeon_device *rdev, struct ttm_tt *ttm);
bool radeon_ttm_tt_is_bound(struct ttm_device *bdev, struct ttm_tt *ttm);
extern void radeon_vram_location(struct radeon_device *rdev, struct radeon_mc *mc, u64 base);
extern void radeon_gtt_location(struct radeon_device *rdev, struct radeon_mc *mc);
extern int radeon_resume_kms(struct drm_device *dev, bool resume, bool fbcon);
extern int radeon_suspend_kms(struct drm_device *dev, bool suspend,
         bool fbcon, bool freeze);
extern void radeon_ttm_set_active_vram_size(struct radeon_device *rdev, u64 size);
extern void radeon_program_register_sequence(struct radeon_device *rdev,
          const u32 *registers,
          const u32 array_size);
struct radeon_device *radeon_get_rdev(struct ttm_device *bdev);



u32 radeon_get_vblank_counter_kms(struct drm_crtc *crtc);
int radeon_enable_vblank_kms(struct drm_crtc *crtc);
void radeon_disable_vblank_kms(struct drm_crtc *crtc);




int radeon_vm_manager_init(struct radeon_device *rdev);
void radeon_vm_manager_fini(struct radeon_device *rdev);
int radeon_vm_init(struct radeon_device *rdev, struct radeon_vm *vm);
void radeon_vm_fini(struct radeon_device *rdev, struct radeon_vm *vm);
struct radeon_bo_list *radeon_vm_get_bos(struct radeon_device *rdev,
       struct radeon_vm *vm,
                                          struct list_head *head);
struct radeon_fence *radeon_vm_grab_id(struct radeon_device *rdev,
           struct radeon_vm *vm, int ring);
void radeon_vm_flush(struct radeon_device *rdev,
                     struct radeon_vm *vm,
       int ring, struct radeon_fence *fence);
void radeon_vm_fence(struct radeon_device *rdev,
       struct radeon_vm *vm,
       struct radeon_fence *fence);
uint64_t radeon_vm_map_gart(struct radeon_device *rdev, uint64_t addr);
int radeon_vm_update_page_directory(struct radeon_device *rdev,
        struct radeon_vm *vm);
int radeon_vm_clear_freed(struct radeon_device *rdev,
     struct radeon_vm *vm);
int radeon_vm_clear_invalids(struct radeon_device *rdev,
        struct radeon_vm *vm);
int radeon_vm_bo_update(struct radeon_device *rdev,
   struct radeon_bo_va *bo_va,
   struct ttm_resource *mem);
void radeon_vm_bo_invalidate(struct radeon_device *rdev,
        struct radeon_bo *bo);
struct radeon_bo_va *radeon_vm_bo_find(struct radeon_vm *vm,
           struct radeon_bo *bo);
struct radeon_bo_va *radeon_vm_bo_add(struct radeon_device *rdev,
          struct radeon_vm *vm,
          struct radeon_bo *bo);
int radeon_vm_bo_set_addr(struct radeon_device *rdev,
     struct radeon_bo_va *bo_va,
     uint64_t offset,
     uint32_t flags);
void radeon_vm_bo_rmv(struct radeon_device *rdev,
        struct radeon_bo_va *bo_va);


void r600_audio_update_hdmi(struct work_struct *work);
struct r600_audio_pin *r600_audio_get_pin(struct radeon_device *rdev);
struct r600_audio_pin *dce6_audio_get_pin(struct radeon_device *rdev);
void r600_audio_enable(struct radeon_device *rdev,
         struct r600_audio_pin *pin,
         u8 enable_mask);
void dce6_audio_enable(struct radeon_device *rdev,
         struct r600_audio_pin *pin,
         u8 enable_mask);




int r600_vram_scratch_init(struct radeon_device *rdev);
void r600_vram_scratch_fini(struct radeon_device *rdev);




unsigned r600_mip_minify(unsigned size, unsigned level);
bool r600_fmt_is_valid_color(u32 format);
bool r600_fmt_is_valid_texture(u32 format, enum radeon_family family);
int r600_fmt_get_blocksize(u32 format);
int r600_fmt_get_nblocksx(u32 format, u32 w);
int r600_fmt_get_nblocksy(u32 format, u32 h);




struct radeon_hdmi_acr {
 u32 clock;

 int n_32khz;
 int cts_32khz;

 int n_44_1khz;
 int cts_44_1khz;

 int n_48khz;
 int cts_48khz;

};

extern struct radeon_hdmi_acr r600_hdmi_acr(uint32_t clock);

extern u32 r6xx_remap_render_backend(struct radeon_device *rdev,
         u32 tiling_pipe_num,
         u32 max_rb_num,
         u32 total_max_rb_num,
         u32 enabled_rb_mask);





extern int ni_init_microcode(struct radeon_device *rdev);
extern int ni_mc_load_microcode(struct radeon_device *rdev);
# 2979 "drivers/gpu/drm/radeon/radeon.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radeon_acpi_init(struct radeon_device *rdev) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radeon_acpi_fini(struct radeon_device *rdev) { }


int radeon_cs_packet_parse(struct radeon_cs_parser *p,
      struct radeon_cs_packet *pkt,
      unsigned idx);
bool radeon_cs_packet_next_is_pkt3_nop(struct radeon_cs_parser *p);
void radeon_cs_dump_packet(struct radeon_cs_parser *p,
      struct radeon_cs_packet *pkt);
int radeon_cs_packet_next_reloc(struct radeon_cs_parser *p,
    struct radeon_bo_list **cs_reloc,
    int nomm);
int r600_cs_common_vline_parse(struct radeon_cs_parser *p,
          uint32_t *vline_start_end,
          uint32_t *vline_status);


void radeon_irq_kms_set_irq_n_enabled(struct radeon_device *rdev,
          u32 reg, u32 mask,
          bool enable, const char *name,
          unsigned n);

# 1 "drivers/gpu/drm/radeon/radeon_object.h" 1
# 32 "drivers/gpu/drm/radeon/radeon_object.h"
# 1 "drivers/gpu/drm/radeon/radeon.h" 1
# 33 "drivers/gpu/drm/radeon/radeon_object.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned radeon_mem_type_to_domain(u32 mem_type)
{
 switch (mem_type) {
 case 2:
  return 0x4;
 case 1:
  return 0x2;
 case 0:
  return 0x1;
 default:
  break;
 }
 return 0;
}
# 64 "drivers/gpu/drm/radeon/radeon_object.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radeon_bo_reserve(struct radeon_bo *bo, bool no_intr)
{
 int r;

 r = ttm_bo_reserve(&bo->tbo, !no_intr, false, ((void *)0));
 if (__builtin_expect(!!(r != 0), 0)) {
  if (r != -512)
   ({ do {} while (0); _dev_err(bo->rdev->dev, "%p reserve failed\n", bo); });
  return r;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radeon_bo_unreserve(struct radeon_bo *bo)
{
 ttm_bo_unreserve(&bo->tbo);
}
# 91 "drivers/gpu/drm/radeon/radeon_object.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 radeon_bo_gpu_offset(struct radeon_bo *bo)
{
 struct radeon_device *rdev;
 u64 start = 0;

 rdev = radeon_get_rdev(bo->tbo.bdev);

 switch (bo->tbo.resource->mem_type) {
 case 1:
  start = rdev->mc.gtt_start;
  break;
 case 2:
  start = rdev->mc.vram_start;
  break;
 }

 return (bo->tbo.resource->start << (12)) + start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long radeon_bo_size(struct radeon_bo *bo)
{
 return bo->tbo.base.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned radeon_bo_ngpu_pages(struct radeon_bo *bo)
{
 return bo->tbo.base.size / 4096;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned radeon_bo_gpu_page_alignment(struct radeon_bo *bo)
{
 return (bo->tbo.page_alignment << (12)) / 4096;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 radeon_bo_mmap_offset(struct radeon_bo *bo)
{
 return drm_vma_node_offset_addr(&bo->tbo.base.vma_node);
}

extern int radeon_bo_create(struct radeon_device *rdev,
       unsigned long size, int byte_align,
       bool kernel, u32 domain, u32 flags,
       struct sg_table *sg,
       struct dma_resv *resv,
       struct radeon_bo **bo_ptr);
extern int radeon_bo_kmap(struct radeon_bo *bo, void **ptr);
extern void radeon_bo_kunmap(struct radeon_bo *bo);
extern struct radeon_bo *radeon_bo_ref(struct radeon_bo *bo);
extern void radeon_bo_unref(struct radeon_bo **bo);
extern int radeon_bo_pin(struct radeon_bo *bo, u32 domain, u64 *gpu_addr);
extern int radeon_bo_pin_restricted(struct radeon_bo *bo, u32 domain,
        u64 max_offset, u64 *gpu_addr);
extern void radeon_bo_unpin(struct radeon_bo *bo);
extern int radeon_bo_evict_vram(struct radeon_device *rdev);
extern void radeon_bo_force_delete(struct radeon_device *rdev);
extern int radeon_bo_init(struct radeon_device *rdev);
extern void radeon_bo_fini(struct radeon_device *rdev);
extern int radeon_bo_list_validate(struct radeon_device *rdev,
       struct ww_acquire_ctx *ticket,
       struct list_head *head, int ring);
extern int radeon_bo_set_tiling_flags(struct radeon_bo *bo,
    u32 tiling_flags, u32 pitch);
extern void radeon_bo_get_tiling_flags(struct radeon_bo *bo,
    u32 *tiling_flags, u32 *pitch);
extern int radeon_bo_check_tiling(struct radeon_bo *bo, bool has_moved,
    bool force_drop);
extern void radeon_bo_move_notify(struct ttm_buffer_object *bo,
      unsigned int old_type,
      struct ttm_resource *new_mem);
extern vm_fault_t radeon_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
extern int radeon_bo_get_surface_reg(struct radeon_bo *bo);
extern void radeon_bo_fence(struct radeon_bo *bo, struct radeon_fence *fence,
       bool shared);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t radeon_sa_bo_gpu_addr(struct radeon_sa_bo *sa_bo)
{
 return sa_bo->manager->gpu_addr + sa_bo->soffset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * radeon_sa_bo_cpu_addr(struct radeon_sa_bo *sa_bo)
{
 return sa_bo->manager->cpu_ptr + sa_bo->soffset;
}

extern int radeon_sa_bo_manager_init(struct radeon_device *rdev,
         struct radeon_sa_manager *sa_manager,
         unsigned size, u32 align, u32 domain,
         u32 flags);
extern void radeon_sa_bo_manager_fini(struct radeon_device *rdev,
          struct radeon_sa_manager *sa_manager);
extern int radeon_sa_bo_manager_start(struct radeon_device *rdev,
          struct radeon_sa_manager *sa_manager);
extern int radeon_sa_bo_manager_suspend(struct radeon_device *rdev,
     struct radeon_sa_manager *sa_manager);
extern int radeon_sa_bo_new(struct radeon_device *rdev,
       struct radeon_sa_manager *sa_manager,
       struct radeon_sa_bo **sa_bo,
       unsigned size, unsigned align);
extern void radeon_sa_bo_free(struct radeon_device *rdev,
         struct radeon_sa_bo **sa_bo,
         struct radeon_fence *fence);

extern void radeon_sa_bo_dump_debug_info(struct radeon_sa_manager *sa_manager,
      struct seq_file *m);
# 3003 "drivers/gpu/drm/radeon/radeon.h" 2
# 43 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/radeon_asic.h" 1
# 34 "drivers/gpu/drm/radeon/radeon_asic.h"
uint32_t radeon_legacy_get_engine_clock(struct radeon_device *rdev);
void radeon_legacy_set_engine_clock(struct radeon_device *rdev, uint32_t eng_clock);
uint32_t radeon_legacy_get_memory_clock(struct radeon_device *rdev);
void radeon_legacy_set_clock_gating(struct radeon_device *rdev, int enable);

uint32_t radeon_atom_get_engine_clock(struct radeon_device *rdev);
void radeon_atom_set_engine_clock(struct radeon_device *rdev, uint32_t eng_clock);
uint32_t radeon_atom_get_memory_clock(struct radeon_device *rdev);
void radeon_atom_set_memory_clock(struct radeon_device *rdev, uint32_t mem_clock);
void radeon_atom_set_clock_gating(struct radeon_device *rdev, int enable);

void atombios_set_backlight_level(struct radeon_encoder *radeon_encoder, u8 level);
u8 atombios_get_backlight_level(struct radeon_encoder *radeon_encoder);
void radeon_legacy_set_backlight_level(struct radeon_encoder *radeon_encoder, u8 level);
u8 radeon_legacy_get_backlight_level(struct radeon_encoder *radeon_encoder);




struct r100_mc_save {
 u32 GENMO_WT;
 u32 CRTC_EXT_CNTL;
 u32 CRTC_GEN_CNTL;
 u32 CRTC2_GEN_CNTL;
 u32 CUR_OFFSET;
 u32 CUR2_OFFSET;
};
int r100_init(struct radeon_device *rdev);
void r100_fini(struct radeon_device *rdev);
int r100_suspend(struct radeon_device *rdev);
int r100_resume(struct radeon_device *rdev);
void r100_vga_set_state(struct radeon_device *rdev, bool state);
bool r100_gpu_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
int r100_asic_reset(struct radeon_device *rdev, bool hard);
u32 r100_get_vblank_counter(struct radeon_device *rdev, int crtc);
void r100_pci_gart_tlb_flush(struct radeon_device *rdev);
uint64_t r100_pci_gart_get_page_entry(uint64_t addr, uint32_t flags);
void r100_pci_gart_set_page(struct radeon_device *rdev, unsigned i,
       uint64_t entry);
void r100_ring_start(struct radeon_device *rdev, struct radeon_ring *ring);
int r100_irq_set(struct radeon_device *rdev);
int r100_irq_process(struct radeon_device *rdev);
void r100_fence_ring_emit(struct radeon_device *rdev,
     struct radeon_fence *fence);
bool r100_semaphore_ring_emit(struct radeon_device *rdev,
         struct radeon_ring *cp,
         struct radeon_semaphore *semaphore,
         bool emit_wait);
int r100_cs_parse(struct radeon_cs_parser *p);
void r100_pll_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
uint32_t r100_pll_rreg(struct radeon_device *rdev, uint32_t reg);
struct radeon_fence *r100_copy_blit(struct radeon_device *rdev,
        uint64_t src_offset,
        uint64_t dst_offset,
        unsigned num_gpu_pages,
        struct dma_resv *resv);
int r100_set_surface_reg(struct radeon_device *rdev, int reg,
    uint32_t tiling_flags, uint32_t pitch,
    uint32_t offset, uint32_t obj_size);
void r100_clear_surface_reg(struct radeon_device *rdev, int reg);
void r100_bandwidth_update(struct radeon_device *rdev);
void r100_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
int r100_ring_test(struct radeon_device *rdev, struct radeon_ring *cp);
void r100_hpd_init(struct radeon_device *rdev);
void r100_hpd_fini(struct radeon_device *rdev);
bool r100_hpd_sense(struct radeon_device *rdev, enum radeon_hpd_id hpd);
void r100_hpd_set_polarity(struct radeon_device *rdev,
      enum radeon_hpd_id hpd);
void r100_debugfs_rbbm_init(struct radeon_device *rdev);
void r100_debugfs_cp_init(struct radeon_device *rdev);
void r100_cp_disable(struct radeon_device *rdev);
int r100_cp_init(struct radeon_device *rdev, unsigned ring_size);
void r100_cp_fini(struct radeon_device *rdev);
int r100_pci_gart_init(struct radeon_device *rdev);
void r100_pci_gart_fini(struct radeon_device *rdev);
int r100_pci_gart_enable(struct radeon_device *rdev);
void r100_pci_gart_disable(struct radeon_device *rdev);
void r100_debugfs_mc_info_init(struct radeon_device *rdev);
int r100_gui_wait_for_idle(struct radeon_device *rdev);
int r100_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);
void r100_irq_disable(struct radeon_device *rdev);
void r100_mc_stop(struct radeon_device *rdev, struct r100_mc_save *save);
void r100_mc_resume(struct radeon_device *rdev, struct r100_mc_save *save);
void r100_vram_init_sizes(struct radeon_device *rdev);
int r100_cp_reset(struct radeon_device *rdev);
void r100_vga_render_disable(struct radeon_device *rdev);
void r100_restore_sanity(struct radeon_device *rdev);
int r100_cs_track_check_pkt3_indx_buffer(struct radeon_cs_parser *p,
      struct radeon_cs_packet *pkt,
      struct radeon_bo *robj);
int r100_cs_parse_packet0(struct radeon_cs_parser *p,
     struct radeon_cs_packet *pkt,
     const unsigned *auth, unsigned n,
     radeon_packet0_check_t check);
int r100_cs_packet_parse(struct radeon_cs_parser *p,
    struct radeon_cs_packet *pkt,
    unsigned idx);
void r100_enable_bm(struct radeon_device *rdev);
void r100_set_common_regs(struct radeon_device *rdev);
void r100_bm_disable(struct radeon_device *rdev);
extern bool r100_gui_idle(struct radeon_device *rdev);
extern void r100_pm_misc(struct radeon_device *rdev);
extern void r100_pm_prepare(struct radeon_device *rdev);
extern void r100_pm_finish(struct radeon_device *rdev);
extern void r100_pm_init_profile(struct radeon_device *rdev);
extern void r100_pm_get_dynpm_state(struct radeon_device *rdev);
extern void r100_page_flip(struct radeon_device *rdev, int crtc,
      u64 crtc_base, bool async);
extern bool r100_page_flip_pending(struct radeon_device *rdev, int crtc);
extern void r100_wait_for_vblank(struct radeon_device *rdev, int crtc);
extern int r100_mc_wait_for_idle(struct radeon_device *rdev);

u32 r100_gfx_get_rptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
u32 r100_gfx_get_wptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
void r100_gfx_set_wptr(struct radeon_device *rdev,
         struct radeon_ring *ring);




struct radeon_fence *r200_copy_dma(struct radeon_device *rdev,
       uint64_t src_offset,
       uint64_t dst_offset,
       unsigned num_gpu_pages,
       struct dma_resv *resv);
void r200_set_safe_registers(struct radeon_device *rdev);




extern int r300_init(struct radeon_device *rdev);
extern void r300_fini(struct radeon_device *rdev);
extern int r300_suspend(struct radeon_device *rdev);
extern int r300_resume(struct radeon_device *rdev);
extern int r300_asic_reset(struct radeon_device *rdev, bool hard);
extern void r300_ring_start(struct radeon_device *rdev, struct radeon_ring *ring);
extern void r300_fence_ring_emit(struct radeon_device *rdev,
    struct radeon_fence *fence);
extern int r300_cs_parse(struct radeon_cs_parser *p);
extern void rv370_pcie_gart_tlb_flush(struct radeon_device *rdev);
extern uint64_t rv370_pcie_gart_get_page_entry(uint64_t addr, uint32_t flags);
extern void rv370_pcie_gart_set_page(struct radeon_device *rdev, unsigned i,
         uint64_t entry);
extern void rv370_set_pcie_lanes(struct radeon_device *rdev, int lanes);
extern int rv370_get_pcie_lanes(struct radeon_device *rdev);
extern void r300_set_reg_safe(struct radeon_device *rdev);
extern void r300_mc_program(struct radeon_device *rdev);
extern void r300_mc_init(struct radeon_device *rdev);
extern void r300_clock_startup(struct radeon_device *rdev);
extern int r300_mc_wait_for_idle(struct radeon_device *rdev);
extern int rv370_pcie_gart_init(struct radeon_device *rdev);
extern void rv370_pcie_gart_fini(struct radeon_device *rdev);
extern int rv370_pcie_gart_enable(struct radeon_device *rdev);
extern void rv370_pcie_gart_disable(struct radeon_device *rdev);




extern int r420_init(struct radeon_device *rdev);
extern void r420_fini(struct radeon_device *rdev);
extern int r420_suspend(struct radeon_device *rdev);
extern int r420_resume(struct radeon_device *rdev);
extern void r420_pm_init_profile(struct radeon_device *rdev);
extern u32 r420_mc_rreg(struct radeon_device *rdev, u32 reg);
extern void r420_mc_wreg(struct radeon_device *rdev, u32 reg, u32 v);
extern void r420_debugfs_pipes_info_init(struct radeon_device *rdev);
extern void r420_pipes_init(struct radeon_device *rdev);




extern int rs400_init(struct radeon_device *rdev);
extern void rs400_fini(struct radeon_device *rdev);
extern int rs400_suspend(struct radeon_device *rdev);
extern int rs400_resume(struct radeon_device *rdev);
void rs400_gart_tlb_flush(struct radeon_device *rdev);
uint64_t rs400_gart_get_page_entry(uint64_t addr, uint32_t flags);
void rs400_gart_set_page(struct radeon_device *rdev, unsigned i,
    uint64_t entry);
uint32_t rs400_mc_rreg(struct radeon_device *rdev, uint32_t reg);
void rs400_mc_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
int rs400_gart_init(struct radeon_device *rdev);
int rs400_gart_enable(struct radeon_device *rdev);
void rs400_gart_adjust_size(struct radeon_device *rdev);
void rs400_gart_disable(struct radeon_device *rdev);
void rs400_gart_fini(struct radeon_device *rdev);
extern int rs400_mc_wait_for_idle(struct radeon_device *rdev);




extern int rs600_asic_reset(struct radeon_device *rdev, bool hard);
extern int rs600_init(struct radeon_device *rdev);
extern void rs600_fini(struct radeon_device *rdev);
extern int rs600_suspend(struct radeon_device *rdev);
extern int rs600_resume(struct radeon_device *rdev);
int rs600_irq_set(struct radeon_device *rdev);
int rs600_irq_process(struct radeon_device *rdev);
void rs600_irq_disable(struct radeon_device *rdev);
u32 rs600_get_vblank_counter(struct radeon_device *rdev, int crtc);
void rs600_gart_tlb_flush(struct radeon_device *rdev);
uint64_t rs600_gart_get_page_entry(uint64_t addr, uint32_t flags);
void rs600_gart_set_page(struct radeon_device *rdev, unsigned i,
    uint64_t entry);
uint32_t rs600_mc_rreg(struct radeon_device *rdev, uint32_t reg);
void rs600_mc_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
void rs600_bandwidth_update(struct radeon_device *rdev);
void rs600_hpd_init(struct radeon_device *rdev);
void rs600_hpd_fini(struct radeon_device *rdev);
bool rs600_hpd_sense(struct radeon_device *rdev, enum radeon_hpd_id hpd);
void rs600_hpd_set_polarity(struct radeon_device *rdev,
       enum radeon_hpd_id hpd);
extern void rs600_pm_misc(struct radeon_device *rdev);
extern void rs600_pm_prepare(struct radeon_device *rdev);
extern void rs600_pm_finish(struct radeon_device *rdev);
extern void rs600_page_flip(struct radeon_device *rdev, int crtc,
       u64 crtc_base, bool async);
extern bool rs600_page_flip_pending(struct radeon_device *rdev, int crtc);
void rs600_set_safe_registers(struct radeon_device *rdev);
extern void avivo_wait_for_vblank(struct radeon_device *rdev, int crtc);
extern int rs600_mc_wait_for_idle(struct radeon_device *rdev);




int rs690_init(struct radeon_device *rdev);
void rs690_fini(struct radeon_device *rdev);
int rs690_resume(struct radeon_device *rdev);
int rs690_suspend(struct radeon_device *rdev);
uint32_t rs690_mc_rreg(struct radeon_device *rdev, uint32_t reg);
void rs690_mc_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
void rs690_bandwidth_update(struct radeon_device *rdev);
void rs690_line_buffer_adjust(struct radeon_device *rdev,
     struct drm_display_mode *mode1,
     struct drm_display_mode *mode2);
extern int rs690_mc_wait_for_idle(struct radeon_device *rdev);




struct rv515_mc_save {
 u32 vga_render_control;
 u32 vga_hdp_control;
 bool crtc_enabled[2];
};

int rv515_init(struct radeon_device *rdev);
void rv515_fini(struct radeon_device *rdev);
uint32_t rv515_mc_rreg(struct radeon_device *rdev, uint32_t reg);
void rv515_mc_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
void rv515_ring_start(struct radeon_device *rdev, struct radeon_ring *ring);
void rv515_bandwidth_update(struct radeon_device *rdev);
int rv515_resume(struct radeon_device *rdev);
int rv515_suspend(struct radeon_device *rdev);
void rv515_bandwidth_avivo_update(struct radeon_device *rdev);
void rv515_vga_render_disable(struct radeon_device *rdev);
void rv515_set_safe_registers(struct radeon_device *rdev);
void rv515_mc_stop(struct radeon_device *rdev, struct rv515_mc_save *save);
void rv515_mc_resume(struct radeon_device *rdev, struct rv515_mc_save *save);
void rv515_clock_startup(struct radeon_device *rdev);
void rv515_debugfs(struct radeon_device *rdev);
int rv515_mc_wait_for_idle(struct radeon_device *rdev);




int r520_init(struct radeon_device *rdev);
int r520_resume(struct radeon_device *rdev);
int r520_mc_wait_for_idle(struct radeon_device *rdev);




int r600_init(struct radeon_device *rdev);
void r600_fini(struct radeon_device *rdev);
int r600_suspend(struct radeon_device *rdev);
int r600_resume(struct radeon_device *rdev);
void r600_vga_set_state(struct radeon_device *rdev, bool state);
int r600_wb_init(struct radeon_device *rdev);
void r600_wb_fini(struct radeon_device *rdev);
void r600_pcie_gart_tlb_flush(struct radeon_device *rdev);
uint32_t r600_pciep_rreg(struct radeon_device *rdev, uint32_t reg);
void r600_pciep_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
int r600_cs_parse(struct radeon_cs_parser *p);
int r600_dma_cs_parse(struct radeon_cs_parser *p);
void r600_fence_ring_emit(struct radeon_device *rdev,
     struct radeon_fence *fence);
bool r600_semaphore_ring_emit(struct radeon_device *rdev,
         struct radeon_ring *cp,
         struct radeon_semaphore *semaphore,
         bool emit_wait);
void r600_dma_fence_ring_emit(struct radeon_device *rdev,
         struct radeon_fence *fence);
bool r600_dma_semaphore_ring_emit(struct radeon_device *rdev,
      struct radeon_ring *ring,
      struct radeon_semaphore *semaphore,
      bool emit_wait);
void r600_dma_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
bool r600_dma_is_lockup(struct radeon_device *rdev, struct radeon_ring *ring);
bool r600_gfx_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
int r600_asic_reset(struct radeon_device *rdev, bool hard);
int r600_set_surface_reg(struct radeon_device *rdev, int reg,
    uint32_t tiling_flags, uint32_t pitch,
    uint32_t offset, uint32_t obj_size);
void r600_clear_surface_reg(struct radeon_device *rdev, int reg);
int r600_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);
int r600_dma_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);
void r600_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
int r600_ring_test(struct radeon_device *rdev, struct radeon_ring *cp);
int r600_dma_ring_test(struct radeon_device *rdev, struct radeon_ring *cp);
struct radeon_fence *r600_copy_cpdma(struct radeon_device *rdev,
         uint64_t src_offset, uint64_t dst_offset,
         unsigned num_gpu_pages,
         struct dma_resv *resv);
struct radeon_fence *r600_copy_dma(struct radeon_device *rdev,
       uint64_t src_offset, uint64_t dst_offset,
       unsigned num_gpu_pages,
       struct dma_resv *resv);
void r600_hpd_init(struct radeon_device *rdev);
void r600_hpd_fini(struct radeon_device *rdev);
bool r600_hpd_sense(struct radeon_device *rdev, enum radeon_hpd_id hpd);
void r600_hpd_set_polarity(struct radeon_device *rdev,
      enum radeon_hpd_id hpd);
extern void r600_mmio_hdp_flush(struct radeon_device *rdev);
extern bool r600_gui_idle(struct radeon_device *rdev);
extern void r600_pm_misc(struct radeon_device *rdev);
extern void r600_pm_init_profile(struct radeon_device *rdev);
extern void rs780_pm_init_profile(struct radeon_device *rdev);
extern uint32_t rs780_mc_rreg(struct radeon_device *rdev, uint32_t reg);
extern void rs780_mc_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
extern void r600_pm_get_dynpm_state(struct radeon_device *rdev);
extern void r600_set_pcie_lanes(struct radeon_device *rdev, int lanes);
extern int r600_get_pcie_lanes(struct radeon_device *rdev);
bool r600_card_posted(struct radeon_device *rdev);
void r600_cp_stop(struct radeon_device *rdev);
int r600_cp_start(struct radeon_device *rdev);
void r600_ring_init(struct radeon_device *rdev, struct radeon_ring *cp, unsigned ring_size);
int r600_cp_resume(struct radeon_device *rdev);
void r600_cp_fini(struct radeon_device *rdev);
int r600_count_pipe_bits(uint32_t val);
int r600_mc_wait_for_idle(struct radeon_device *rdev);
int r600_pcie_gart_init(struct radeon_device *rdev);
void r600_scratch_init(struct radeon_device *rdev);
int r600_init_microcode(struct radeon_device *rdev);
u32 r600_gfx_get_rptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
u32 r600_gfx_get_wptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
void r600_gfx_set_wptr(struct radeon_device *rdev,
         struct radeon_ring *ring);
int r600_get_allowed_info_register(struct radeon_device *rdev,
       u32 reg, u32 *val);

int r600_irq_process(struct radeon_device *rdev);
int r600_irq_init(struct radeon_device *rdev);
void r600_irq_fini(struct radeon_device *rdev);
void r600_ih_ring_init(struct radeon_device *rdev, unsigned ring_size);
int r600_irq_set(struct radeon_device *rdev);
void r600_irq_suspend(struct radeon_device *rdev);
void r600_disable_interrupts(struct radeon_device *rdev);
void r600_rlc_stop(struct radeon_device *rdev);

void r600_audio_fini(struct radeon_device *rdev);
void r600_audio_set_dto(struct drm_encoder *encoder, u32 clock);
void r600_hdmi_update_avi_infoframe(struct drm_encoder *encoder, void *buffer,
        size_t size);
void r600_hdmi_update_ACR(struct drm_encoder *encoder, uint32_t clock);
void r600_hdmi_audio_workaround(struct drm_encoder *encoder);
int r600_hdmi_buffer_status_changed(struct drm_encoder *encoder);
void r600_hdmi_update_audio_settings(struct drm_encoder *encoder);
u32 r600_get_xclk(struct radeon_device *rdev);
uint64_t r600_get_gpu_clock_counter(struct radeon_device *rdev);
int rv6xx_get_temp(struct radeon_device *rdev);
int r600_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk);
int r600_dpm_pre_set_power_state(struct radeon_device *rdev);
void r600_dpm_post_set_power_state(struct radeon_device *rdev);
int r600_dpm_late_enable(struct radeon_device *rdev);

uint32_t r600_dma_get_rptr(struct radeon_device *rdev,
      struct radeon_ring *ring);
uint32_t r600_dma_get_wptr(struct radeon_device *rdev,
      struct radeon_ring *ring);
void r600_dma_set_wptr(struct radeon_device *rdev,
         struct radeon_ring *ring);

int rv6xx_dpm_init(struct radeon_device *rdev);
int rv6xx_dpm_enable(struct radeon_device *rdev);
void rv6xx_dpm_disable(struct radeon_device *rdev);
int rv6xx_dpm_set_power_state(struct radeon_device *rdev);
void rv6xx_setup_asic(struct radeon_device *rdev);
void rv6xx_dpm_display_configuration_changed(struct radeon_device *rdev);
void rv6xx_dpm_fini(struct radeon_device *rdev);
u32 rv6xx_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 rv6xx_dpm_get_mclk(struct radeon_device *rdev, bool low);
void rv6xx_dpm_print_power_state(struct radeon_device *rdev,
     struct radeon_ps *ps);
void rv6xx_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
             struct seq_file *m);
int rv6xx_dpm_force_performance_level(struct radeon_device *rdev,
          enum radeon_dpm_forced_level level);
u32 rv6xx_dpm_get_current_sclk(struct radeon_device *rdev);
u32 rv6xx_dpm_get_current_mclk(struct radeon_device *rdev);

int rs780_dpm_init(struct radeon_device *rdev);
int rs780_dpm_enable(struct radeon_device *rdev);
void rs780_dpm_disable(struct radeon_device *rdev);
int rs780_dpm_set_power_state(struct radeon_device *rdev);
void rs780_dpm_setup_asic(struct radeon_device *rdev);
void rs780_dpm_display_configuration_changed(struct radeon_device *rdev);
void rs780_dpm_fini(struct radeon_device *rdev);
u32 rs780_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 rs780_dpm_get_mclk(struct radeon_device *rdev, bool low);
void rs780_dpm_print_power_state(struct radeon_device *rdev,
     struct radeon_ps *ps);
void rs780_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
             struct seq_file *m);
int rs780_dpm_force_performance_level(struct radeon_device *rdev,
          enum radeon_dpm_forced_level level);
u32 rs780_dpm_get_current_sclk(struct radeon_device *rdev);
u32 rs780_dpm_get_current_mclk(struct radeon_device *rdev);




int rv770_init(struct radeon_device *rdev);
void rv770_fini(struct radeon_device *rdev);
int rv770_suspend(struct radeon_device *rdev);
int rv770_resume(struct radeon_device *rdev);
void rv770_pm_misc(struct radeon_device *rdev);
void rv770_page_flip(struct radeon_device *rdev, int crtc, u64 crtc_base,
       bool async);
bool rv770_page_flip_pending(struct radeon_device *rdev, int crtc);
void r700_vram_gtt_location(struct radeon_device *rdev, struct radeon_mc *mc);
void r700_cp_stop(struct radeon_device *rdev);
void r700_cp_fini(struct radeon_device *rdev);
struct radeon_fence *rv770_copy_dma(struct radeon_device *rdev,
        uint64_t src_offset, uint64_t dst_offset,
        unsigned num_gpu_pages,
        struct dma_resv *resv);
u32 rv770_get_xclk(struct radeon_device *rdev);
int rv770_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk);
int rv770_get_temp(struct radeon_device *rdev);

int rv770_dpm_init(struct radeon_device *rdev);
int rv770_dpm_enable(struct radeon_device *rdev);
int rv770_dpm_late_enable(struct radeon_device *rdev);
void rv770_dpm_disable(struct radeon_device *rdev);
int rv770_dpm_set_power_state(struct radeon_device *rdev);
void rv770_dpm_setup_asic(struct radeon_device *rdev);
void rv770_dpm_display_configuration_changed(struct radeon_device *rdev);
void rv770_dpm_fini(struct radeon_device *rdev);
u32 rv770_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 rv770_dpm_get_mclk(struct radeon_device *rdev, bool low);
void rv770_dpm_print_power_state(struct radeon_device *rdev,
     struct radeon_ps *ps);
void rv770_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
             struct seq_file *m);
int rv770_dpm_force_performance_level(struct radeon_device *rdev,
          enum radeon_dpm_forced_level level);
bool rv770_dpm_vblank_too_short(struct radeon_device *rdev);
u32 rv770_dpm_get_current_sclk(struct radeon_device *rdev);
u32 rv770_dpm_get_current_mclk(struct radeon_device *rdev);




struct evergreen_mc_save {
 u32 vga_render_control;
 u32 vga_hdp_control;
 bool crtc_enabled[6];
};

void evergreen_pcie_gart_tlb_flush(struct radeon_device *rdev);
int evergreen_init(struct radeon_device *rdev);
void evergreen_fini(struct radeon_device *rdev);
int evergreen_suspend(struct radeon_device *rdev);
int evergreen_resume(struct radeon_device *rdev);
bool evergreen_gfx_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
bool evergreen_dma_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
int evergreen_asic_reset(struct radeon_device *rdev, bool hard);
void evergreen_bandwidth_update(struct radeon_device *rdev);
void evergreen_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
void evergreen_hpd_init(struct radeon_device *rdev);
void evergreen_hpd_fini(struct radeon_device *rdev);
bool evergreen_hpd_sense(struct radeon_device *rdev, enum radeon_hpd_id hpd);
void evergreen_hpd_set_polarity(struct radeon_device *rdev,
    enum radeon_hpd_id hpd);
u32 evergreen_get_vblank_counter(struct radeon_device *rdev, int crtc);
int evergreen_irq_set(struct radeon_device *rdev);
int evergreen_irq_process(struct radeon_device *rdev);
extern int evergreen_cs_parse(struct radeon_cs_parser *p);
extern int evergreen_dma_cs_parse(struct radeon_cs_parser *p);
extern void evergreen_pm_misc(struct radeon_device *rdev);
extern void evergreen_pm_prepare(struct radeon_device *rdev);
extern void evergreen_pm_finish(struct radeon_device *rdev);
extern void sumo_pm_init_profile(struct radeon_device *rdev);
extern void btc_pm_init_profile(struct radeon_device *rdev);
int sumo_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk);
int evergreen_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk);
extern void evergreen_page_flip(struct radeon_device *rdev, int crtc,
    u64 crtc_base, bool async);
extern bool evergreen_page_flip_pending(struct radeon_device *rdev, int crtc);
extern void dce4_wait_for_vblank(struct radeon_device *rdev, int crtc);
void evergreen_disable_interrupt_state(struct radeon_device *rdev);
int evergreen_mc_wait_for_idle(struct radeon_device *rdev);
void evergreen_dma_fence_ring_emit(struct radeon_device *rdev,
       struct radeon_fence *fence);
void evergreen_dma_ring_ib_execute(struct radeon_device *rdev,
       struct radeon_ib *ib);
struct radeon_fence *evergreen_copy_dma(struct radeon_device *rdev,
     uint64_t src_offset, uint64_t dst_offset,
     unsigned num_gpu_pages,
     struct dma_resv *resv);
int evergreen_get_temp(struct radeon_device *rdev);
int evergreen_get_allowed_info_register(struct radeon_device *rdev,
     u32 reg, u32 *val);
int sumo_get_temp(struct radeon_device *rdev);
int tn_get_temp(struct radeon_device *rdev);
int cypress_dpm_init(struct radeon_device *rdev);
void cypress_dpm_setup_asic(struct radeon_device *rdev);
int cypress_dpm_enable(struct radeon_device *rdev);
void cypress_dpm_disable(struct radeon_device *rdev);
int cypress_dpm_set_power_state(struct radeon_device *rdev);
void cypress_dpm_display_configuration_changed(struct radeon_device *rdev);
void cypress_dpm_fini(struct radeon_device *rdev);
bool cypress_dpm_vblank_too_short(struct radeon_device *rdev);
int btc_dpm_init(struct radeon_device *rdev);
void btc_dpm_setup_asic(struct radeon_device *rdev);
int btc_dpm_enable(struct radeon_device *rdev);
void btc_dpm_disable(struct radeon_device *rdev);
int btc_dpm_pre_set_power_state(struct radeon_device *rdev);
int btc_dpm_set_power_state(struct radeon_device *rdev);
void btc_dpm_post_set_power_state(struct radeon_device *rdev);
void btc_dpm_fini(struct radeon_device *rdev);
u32 btc_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 btc_dpm_get_mclk(struct radeon_device *rdev, bool low);
bool btc_dpm_vblank_too_short(struct radeon_device *rdev);
void btc_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
           struct seq_file *m);
u32 btc_dpm_get_current_sclk(struct radeon_device *rdev);
u32 btc_dpm_get_current_mclk(struct radeon_device *rdev);
int sumo_dpm_init(struct radeon_device *rdev);
int sumo_dpm_enable(struct radeon_device *rdev);
int sumo_dpm_late_enable(struct radeon_device *rdev);
void sumo_dpm_disable(struct radeon_device *rdev);
int sumo_dpm_pre_set_power_state(struct radeon_device *rdev);
int sumo_dpm_set_power_state(struct radeon_device *rdev);
void sumo_dpm_post_set_power_state(struct radeon_device *rdev);
void sumo_dpm_setup_asic(struct radeon_device *rdev);
void sumo_dpm_display_configuration_changed(struct radeon_device *rdev);
void sumo_dpm_fini(struct radeon_device *rdev);
u32 sumo_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 sumo_dpm_get_mclk(struct radeon_device *rdev, bool low);
void sumo_dpm_print_power_state(struct radeon_device *rdev,
    struct radeon_ps *ps);
void sumo_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
            struct seq_file *m);
int sumo_dpm_force_performance_level(struct radeon_device *rdev,
         enum radeon_dpm_forced_level level);
u32 sumo_dpm_get_current_sclk(struct radeon_device *rdev);
u32 sumo_dpm_get_current_mclk(struct radeon_device *rdev);
u16 sumo_dpm_get_current_vddc(struct radeon_device *rdev);




void cayman_fence_ring_emit(struct radeon_device *rdev,
       struct radeon_fence *fence);
void cayman_pcie_gart_tlb_flush(struct radeon_device *rdev);
int cayman_init(struct radeon_device *rdev);
void cayman_fini(struct radeon_device *rdev);
int cayman_suspend(struct radeon_device *rdev);
int cayman_resume(struct radeon_device *rdev);
int cayman_asic_reset(struct radeon_device *rdev, bool hard);
void cayman_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
int cayman_vm_init(struct radeon_device *rdev);
void cayman_vm_fini(struct radeon_device *rdev);
void cayman_vm_flush(struct radeon_device *rdev, struct radeon_ring *ring,
       unsigned vm_id, uint64_t pd_addr);
uint32_t cayman_vm_page_flags(struct radeon_device *rdev, uint32_t flags);
int evergreen_ib_parse(struct radeon_device *rdev, struct radeon_ib *ib);
int evergreen_dma_ib_parse(struct radeon_device *rdev, struct radeon_ib *ib);
void cayman_dma_ring_ib_execute(struct radeon_device *rdev,
    struct radeon_ib *ib);
bool cayman_gfx_is_lockup(struct radeon_device *rdev, struct radeon_ring *ring);
bool cayman_dma_is_lockup(struct radeon_device *rdev, struct radeon_ring *ring);

void cayman_dma_vm_copy_pages(struct radeon_device *rdev,
         struct radeon_ib *ib,
         uint64_t pe, uint64_t src,
         unsigned count);
void cayman_dma_vm_write_pages(struct radeon_device *rdev,
          struct radeon_ib *ib,
          uint64_t pe,
          uint64_t addr, unsigned count,
          uint32_t incr, uint32_t flags);
void cayman_dma_vm_set_pages(struct radeon_device *rdev,
        struct radeon_ib *ib,
        uint64_t pe,
        uint64_t addr, unsigned count,
        uint32_t incr, uint32_t flags);
void cayman_dma_vm_pad_ib(struct radeon_ib *ib);

void cayman_dma_vm_flush(struct radeon_device *rdev, struct radeon_ring *ring,
    unsigned vm_id, uint64_t pd_addr);

u32 cayman_gfx_get_rptr(struct radeon_device *rdev,
   struct radeon_ring *ring);
u32 cayman_gfx_get_wptr(struct radeon_device *rdev,
   struct radeon_ring *ring);
void cayman_gfx_set_wptr(struct radeon_device *rdev,
    struct radeon_ring *ring);
uint32_t cayman_dma_get_rptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
uint32_t cayman_dma_get_wptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
void cayman_dma_set_wptr(struct radeon_device *rdev,
    struct radeon_ring *ring);
int cayman_get_allowed_info_register(struct radeon_device *rdev,
         u32 reg, u32 *val);

int ni_dpm_init(struct radeon_device *rdev);
void ni_dpm_setup_asic(struct radeon_device *rdev);
int ni_dpm_enable(struct radeon_device *rdev);
void ni_dpm_disable(struct radeon_device *rdev);
int ni_dpm_pre_set_power_state(struct radeon_device *rdev);
int ni_dpm_set_power_state(struct radeon_device *rdev);
void ni_dpm_post_set_power_state(struct radeon_device *rdev);
void ni_dpm_fini(struct radeon_device *rdev);
u32 ni_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 ni_dpm_get_mclk(struct radeon_device *rdev, bool low);
void ni_dpm_print_power_state(struct radeon_device *rdev,
         struct radeon_ps *ps);
void ni_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
          struct seq_file *m);
int ni_dpm_force_performance_level(struct radeon_device *rdev,
       enum radeon_dpm_forced_level level);
bool ni_dpm_vblank_too_short(struct radeon_device *rdev);
u32 ni_dpm_get_current_sclk(struct radeon_device *rdev);
u32 ni_dpm_get_current_mclk(struct radeon_device *rdev);
int trinity_dpm_init(struct radeon_device *rdev);
int trinity_dpm_enable(struct radeon_device *rdev);
int trinity_dpm_late_enable(struct radeon_device *rdev);
void trinity_dpm_disable(struct radeon_device *rdev);
int trinity_dpm_pre_set_power_state(struct radeon_device *rdev);
int trinity_dpm_set_power_state(struct radeon_device *rdev);
void trinity_dpm_post_set_power_state(struct radeon_device *rdev);
void trinity_dpm_setup_asic(struct radeon_device *rdev);
void trinity_dpm_display_configuration_changed(struct radeon_device *rdev);
void trinity_dpm_fini(struct radeon_device *rdev);
u32 trinity_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 trinity_dpm_get_mclk(struct radeon_device *rdev, bool low);
void trinity_dpm_print_power_state(struct radeon_device *rdev,
       struct radeon_ps *ps);
void trinity_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
        struct seq_file *m);
int trinity_dpm_force_performance_level(struct radeon_device *rdev,
     enum radeon_dpm_forced_level level);
void trinity_dpm_enable_bapm(struct radeon_device *rdev, bool enable);
u32 trinity_dpm_get_current_sclk(struct radeon_device *rdev);
u32 trinity_dpm_get_current_mclk(struct radeon_device *rdev);
int tn_set_vce_clocks(struct radeon_device *rdev, u32 evclk, u32 ecclk);


void dce6_bandwidth_update(struct radeon_device *rdev);
void dce6_audio_fini(struct radeon_device *rdev);




void si_fence_ring_emit(struct radeon_device *rdev,
   struct radeon_fence *fence);
void si_pcie_gart_tlb_flush(struct radeon_device *rdev);
int si_init(struct radeon_device *rdev);
void si_fini(struct radeon_device *rdev);
int si_suspend(struct radeon_device *rdev);
int si_resume(struct radeon_device *rdev);
bool si_gfx_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
bool si_dma_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
int si_asic_reset(struct radeon_device *rdev, bool hard);
void si_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
int si_irq_set(struct radeon_device *rdev);
int si_irq_process(struct radeon_device *rdev);
int si_vm_init(struct radeon_device *rdev);
void si_vm_fini(struct radeon_device *rdev);
void si_vm_flush(struct radeon_device *rdev, struct radeon_ring *ring,
   unsigned vm_id, uint64_t pd_addr);
int si_ib_parse(struct radeon_device *rdev, struct radeon_ib *ib);
struct radeon_fence *si_copy_dma(struct radeon_device *rdev,
     uint64_t src_offset, uint64_t dst_offset,
     unsigned num_gpu_pages,
     struct dma_resv *resv);

void si_dma_vm_copy_pages(struct radeon_device *rdev,
     struct radeon_ib *ib,
     uint64_t pe, uint64_t src,
     unsigned count);
void si_dma_vm_write_pages(struct radeon_device *rdev,
      struct radeon_ib *ib,
      uint64_t pe,
      uint64_t addr, unsigned count,
      uint32_t incr, uint32_t flags);
void si_dma_vm_set_pages(struct radeon_device *rdev,
    struct radeon_ib *ib,
    uint64_t pe,
    uint64_t addr, unsigned count,
    uint32_t incr, uint32_t flags);

void si_dma_vm_flush(struct radeon_device *rdev, struct radeon_ring *ring,
       unsigned vm_id, uint64_t pd_addr);
u32 si_get_xclk(struct radeon_device *rdev);
uint64_t si_get_gpu_clock_counter(struct radeon_device *rdev);
int si_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk);
int si_set_vce_clocks(struct radeon_device *rdev, u32 evclk, u32 ecclk);
int si_get_temp(struct radeon_device *rdev);
int si_get_allowed_info_register(struct radeon_device *rdev,
     u32 reg, u32 *val);
int si_dpm_init(struct radeon_device *rdev);
void si_dpm_setup_asic(struct radeon_device *rdev);
int si_dpm_enable(struct radeon_device *rdev);
int si_dpm_late_enable(struct radeon_device *rdev);
void si_dpm_disable(struct radeon_device *rdev);
int si_dpm_pre_set_power_state(struct radeon_device *rdev);
int si_dpm_set_power_state(struct radeon_device *rdev);
void si_dpm_post_set_power_state(struct radeon_device *rdev);
void si_dpm_fini(struct radeon_device *rdev);
void si_dpm_display_configuration_changed(struct radeon_device *rdev);
void si_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
          struct seq_file *m);
int si_dpm_force_performance_level(struct radeon_device *rdev,
       enum radeon_dpm_forced_level level);
int si_fan_ctrl_get_fan_speed_percent(struct radeon_device *rdev,
       u32 *speed);
int si_fan_ctrl_set_fan_speed_percent(struct radeon_device *rdev,
       u32 speed);
u32 si_fan_ctrl_get_mode(struct radeon_device *rdev);
void si_fan_ctrl_set_mode(struct radeon_device *rdev, u32 mode);
u32 si_dpm_get_current_sclk(struct radeon_device *rdev);
u32 si_dpm_get_current_mclk(struct radeon_device *rdev);


void dce8_bandwidth_update(struct radeon_device *rdev);




uint64_t cik_get_gpu_clock_counter(struct radeon_device *rdev);
u32 cik_get_xclk(struct radeon_device *rdev);
uint32_t cik_pciep_rreg(struct radeon_device *rdev, uint32_t reg);
void cik_pciep_wreg(struct radeon_device *rdev, uint32_t reg, uint32_t v);
int cik_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk);
int cik_set_vce_clocks(struct radeon_device *rdev, u32 evclk, u32 ecclk);
void cik_sdma_fence_ring_emit(struct radeon_device *rdev,
         struct radeon_fence *fence);
bool cik_sdma_semaphore_ring_emit(struct radeon_device *rdev,
      struct radeon_ring *ring,
      struct radeon_semaphore *semaphore,
      bool emit_wait);
void cik_sdma_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
struct radeon_fence *cik_copy_dma(struct radeon_device *rdev,
      uint64_t src_offset, uint64_t dst_offset,
      unsigned num_gpu_pages,
      struct dma_resv *resv);
struct radeon_fence *cik_copy_cpdma(struct radeon_device *rdev,
        uint64_t src_offset, uint64_t dst_offset,
        unsigned num_gpu_pages,
        struct dma_resv *resv);
int cik_sdma_ring_test(struct radeon_device *rdev, struct radeon_ring *ring);
int cik_sdma_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);
bool cik_sdma_is_lockup(struct radeon_device *rdev, struct radeon_ring *ring);
void cik_fence_gfx_ring_emit(struct radeon_device *rdev,
        struct radeon_fence *fence);
void cik_fence_compute_ring_emit(struct radeon_device *rdev,
     struct radeon_fence *fence);
bool cik_semaphore_ring_emit(struct radeon_device *rdev,
        struct radeon_ring *cp,
        struct radeon_semaphore *semaphore,
        bool emit_wait);
void cik_pcie_gart_tlb_flush(struct radeon_device *rdev);
int cik_init(struct radeon_device *rdev);
void cik_fini(struct radeon_device *rdev);
int cik_suspend(struct radeon_device *rdev);
int cik_resume(struct radeon_device *rdev);
bool cik_gfx_is_lockup(struct radeon_device *rdev, struct radeon_ring *cp);
int cik_asic_reset(struct radeon_device *rdev, bool hard);
void cik_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);
int cik_ring_test(struct radeon_device *rdev, struct radeon_ring *ring);
int cik_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);
int cik_irq_set(struct radeon_device *rdev);
int cik_irq_process(struct radeon_device *rdev);
int cik_vm_init(struct radeon_device *rdev);
void cik_vm_fini(struct radeon_device *rdev);
void cik_vm_flush(struct radeon_device *rdev, struct radeon_ring *ring,
    unsigned vm_id, uint64_t pd_addr);

void cik_sdma_vm_copy_pages(struct radeon_device *rdev,
       struct radeon_ib *ib,
       uint64_t pe, uint64_t src,
       unsigned count);
void cik_sdma_vm_write_pages(struct radeon_device *rdev,
        struct radeon_ib *ib,
        uint64_t pe,
        uint64_t addr, unsigned count,
        uint32_t incr, uint32_t flags);
void cik_sdma_vm_set_pages(struct radeon_device *rdev,
      struct radeon_ib *ib,
      uint64_t pe,
      uint64_t addr, unsigned count,
      uint32_t incr, uint32_t flags);
void cik_sdma_vm_pad_ib(struct radeon_ib *ib);

void cik_dma_vm_flush(struct radeon_device *rdev, struct radeon_ring *ring,
        unsigned vm_id, uint64_t pd_addr);
int cik_ib_parse(struct radeon_device *rdev, struct radeon_ib *ib);
u32 cik_gfx_get_rptr(struct radeon_device *rdev,
       struct radeon_ring *ring);
u32 cik_gfx_get_wptr(struct radeon_device *rdev,
       struct radeon_ring *ring);
void cik_gfx_set_wptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
u32 cik_compute_get_rptr(struct radeon_device *rdev,
    struct radeon_ring *ring);
u32 cik_compute_get_wptr(struct radeon_device *rdev,
    struct radeon_ring *ring);
void cik_compute_set_wptr(struct radeon_device *rdev,
     struct radeon_ring *ring);
u32 cik_sdma_get_rptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
u32 cik_sdma_get_wptr(struct radeon_device *rdev,
        struct radeon_ring *ring);
void cik_sdma_set_wptr(struct radeon_device *rdev,
         struct radeon_ring *ring);
int ci_get_temp(struct radeon_device *rdev);
int kv_get_temp(struct radeon_device *rdev);
int cik_get_allowed_info_register(struct radeon_device *rdev,
      u32 reg, u32 *val);

int ci_dpm_init(struct radeon_device *rdev);
int ci_dpm_enable(struct radeon_device *rdev);
int ci_dpm_late_enable(struct radeon_device *rdev);
void ci_dpm_disable(struct radeon_device *rdev);
int ci_dpm_pre_set_power_state(struct radeon_device *rdev);
int ci_dpm_set_power_state(struct radeon_device *rdev);
void ci_dpm_post_set_power_state(struct radeon_device *rdev);
void ci_dpm_setup_asic(struct radeon_device *rdev);
void ci_dpm_display_configuration_changed(struct radeon_device *rdev);
void ci_dpm_fini(struct radeon_device *rdev);
u32 ci_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 ci_dpm_get_mclk(struct radeon_device *rdev, bool low);
void ci_dpm_print_power_state(struct radeon_device *rdev,
         struct radeon_ps *ps);
void ci_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
          struct seq_file *m);
int ci_dpm_force_performance_level(struct radeon_device *rdev,
       enum radeon_dpm_forced_level level);
bool ci_dpm_vblank_too_short(struct radeon_device *rdev);
void ci_dpm_powergate_uvd(struct radeon_device *rdev, bool gate);
u32 ci_dpm_get_current_sclk(struct radeon_device *rdev);
u32 ci_dpm_get_current_mclk(struct radeon_device *rdev);

int ci_fan_ctrl_get_fan_speed_percent(struct radeon_device *rdev,
       u32 *speed);
int ci_fan_ctrl_set_fan_speed_percent(struct radeon_device *rdev,
       u32 speed);
u32 ci_fan_ctrl_get_mode(struct radeon_device *rdev);
void ci_fan_ctrl_set_mode(struct radeon_device *rdev, u32 mode);

int kv_dpm_init(struct radeon_device *rdev);
int kv_dpm_enable(struct radeon_device *rdev);
int kv_dpm_late_enable(struct radeon_device *rdev);
void kv_dpm_disable(struct radeon_device *rdev);
int kv_dpm_pre_set_power_state(struct radeon_device *rdev);
int kv_dpm_set_power_state(struct radeon_device *rdev);
void kv_dpm_post_set_power_state(struct radeon_device *rdev);
void kv_dpm_setup_asic(struct radeon_device *rdev);
void kv_dpm_display_configuration_changed(struct radeon_device *rdev);
void kv_dpm_fini(struct radeon_device *rdev);
u32 kv_dpm_get_sclk(struct radeon_device *rdev, bool low);
u32 kv_dpm_get_mclk(struct radeon_device *rdev, bool low);
void kv_dpm_print_power_state(struct radeon_device *rdev,
         struct radeon_ps *ps);
void kv_dpm_debugfs_print_current_performance_level(struct radeon_device *rdev,
          struct seq_file *m);
int kv_dpm_force_performance_level(struct radeon_device *rdev,
       enum radeon_dpm_forced_level level);
void kv_dpm_powergate_uvd(struct radeon_device *rdev, bool gate);
void kv_dpm_enable_bapm(struct radeon_device *rdev, bool enable);
u32 kv_dpm_get_current_sclk(struct radeon_device *rdev);
u32 kv_dpm_get_current_mclk(struct radeon_device *rdev);


uint32_t uvd_v1_0_get_rptr(struct radeon_device *rdev,
                           struct radeon_ring *ring);
uint32_t uvd_v1_0_get_wptr(struct radeon_device *rdev,
                           struct radeon_ring *ring);
void uvd_v1_0_set_wptr(struct radeon_device *rdev,
                       struct radeon_ring *ring);
int uvd_v1_0_resume(struct radeon_device *rdev);

int uvd_v1_0_init(struct radeon_device *rdev);
void uvd_v1_0_fini(struct radeon_device *rdev);
int uvd_v1_0_start(struct radeon_device *rdev);
void uvd_v1_0_stop(struct radeon_device *rdev);

int uvd_v1_0_ring_test(struct radeon_device *rdev, struct radeon_ring *ring);
void uvd_v1_0_fence_emit(struct radeon_device *rdev,
    struct radeon_fence *fence);
int uvd_v1_0_ib_test(struct radeon_device *rdev, struct radeon_ring *ring);
bool uvd_v1_0_semaphore_emit(struct radeon_device *rdev,
        struct radeon_ring *ring,
        struct radeon_semaphore *semaphore,
        bool emit_wait);
void uvd_v1_0_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib);


int uvd_v2_2_resume(struct radeon_device *rdev);
void uvd_v2_2_fence_emit(struct radeon_device *rdev,
    struct radeon_fence *fence);
bool uvd_v2_2_semaphore_emit(struct radeon_device *rdev,
        struct radeon_ring *ring,
        struct radeon_semaphore *semaphore,
        bool emit_wait);


bool uvd_v3_1_semaphore_emit(struct radeon_device *rdev,
        struct radeon_ring *ring,
        struct radeon_semaphore *semaphore,
        bool emit_wait);


int uvd_v4_2_resume(struct radeon_device *rdev);


uint32_t vce_v1_0_get_rptr(struct radeon_device *rdev,
      struct radeon_ring *ring);
uint32_t vce_v1_0_get_wptr(struct radeon_device *rdev,
      struct radeon_ring *ring);
void vce_v1_0_set_wptr(struct radeon_device *rdev,
         struct radeon_ring *ring);
int vce_v1_0_load_fw(struct radeon_device *rdev, uint32_t *data);
unsigned vce_v1_0_bo_size(struct radeon_device *rdev);
int vce_v1_0_resume(struct radeon_device *rdev);
int vce_v1_0_init(struct radeon_device *rdev);
int vce_v1_0_start(struct radeon_device *rdev);


unsigned vce_v2_0_bo_size(struct radeon_device *rdev);
int vce_v2_0_resume(struct radeon_device *rdev);
# 44 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/radeon_audio.h" 1
# 35 "drivers/gpu/drm/radeon/radeon_audio.h"
struct radeon_audio_basic_funcs
{
 u32 (*endpoint_rreg)(struct radeon_device *rdev, u32 offset, u32 reg);
 void (*endpoint_wreg)(struct radeon_device *rdev,
  u32 offset, u32 reg, u32 v);
 void (*enable)(struct radeon_device *rdev,
  struct r600_audio_pin *pin, u8 enable_mask);
};

struct radeon_audio_funcs
{
 void (*select_pin)(struct drm_encoder *encoder);
 struct r600_audio_pin* (*get_pin)(struct radeon_device *rdev);
 void (*write_latency_fields)(struct drm_encoder *encoder,
  struct drm_connector *connector, struct drm_display_mode *mode);
 void (*write_sad_regs)(struct drm_encoder *encoder,
  struct cea_sad *sads, int sad_count);
 void (*write_speaker_allocation)(struct drm_encoder *encoder,
  u8 *sadb, int sad_count);
 void (*set_dto)(struct radeon_device *rdev,
  struct radeon_crtc *crtc, unsigned int clock);
 void (*update_acr)(struct drm_encoder *encoder, long offset,
  const struct radeon_hdmi_acr *acr);
 void (*set_vbi_packet)(struct drm_encoder *encoder, u32 offset);
 void (*set_color_depth)(struct drm_encoder *encoder, u32 offset, int bpc);
 void (*set_avi_packet)(struct radeon_device *rdev, u32 offset,
  unsigned char *buffer, size_t size);
 void (*set_audio_packet)(struct drm_encoder *encoder, u32 offset);
 void (*set_mute)(struct drm_encoder *encoder, u32 offset, bool mute);
 void (*mode_set)(struct drm_encoder *encoder,
  struct drm_display_mode *mode);
 void (*dpms)(struct drm_encoder *encoder, bool mode);
};

int radeon_audio_init(struct radeon_device *rdev);
void radeon_audio_detect(struct drm_connector *connector,
    struct drm_encoder *encoder,
    enum drm_connector_status status);
u32 radeon_audio_endpoint_rreg(struct radeon_device *rdev,
 u32 offset, u32 reg);
void radeon_audio_endpoint_wreg(struct radeon_device *rdev,
 u32 offset, u32 reg, u32 v);
struct r600_audio_pin *radeon_audio_get_pin(struct drm_encoder *encoder);
void radeon_audio_fini(struct radeon_device *rdev);
void radeon_audio_mode_set(struct drm_encoder *encoder,
 struct drm_display_mode *mode);
void radeon_audio_dpms(struct drm_encoder *encoder, int mode);
unsigned int radeon_audio_decode_dfs_div(unsigned int div);

void dce3_2_afmt_write_sad_regs(struct drm_encoder *encoder,
    struct cea_sad *sads, int sad_count);
void dce3_2_afmt_hdmi_write_speaker_allocation(struct drm_encoder *encoder,
            u8 *sadb, int sad_count);
void dce3_2_afmt_dp_write_speaker_allocation(struct drm_encoder *encoder,
          u8 *sadb, int sad_count);
void dce3_2_audio_set_dto(struct radeon_device *rdev,
     struct radeon_crtc *crtc, unsigned int clock);
void dce3_2_hdmi_update_acr(struct drm_encoder *encoder, long offset,
       const struct radeon_hdmi_acr *acr);
void dce3_2_set_audio_packet(struct drm_encoder *encoder, u32 offset);
void dce3_2_set_mute(struct drm_encoder *encoder, u32 offset, bool mute);
# 45 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/radeon_ucode.h" 1
# 156 "drivers/gpu/drm/radeon/radeon_ucode.h"
struct common_firmware_header {
 uint32_t size_bytes;
 uint32_t header_size_bytes;
 uint16_t header_version_major;
 uint16_t header_version_minor;
 uint16_t ip_version_major;
 uint16_t ip_version_minor;
 uint32_t ucode_version;
 uint32_t ucode_size_bytes;
 uint32_t ucode_array_offset_bytes;
 uint32_t crc32;
};


struct mc_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t io_debug_size_bytes;
 uint32_t io_debug_array_offset_bytes;
};


struct smc_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_start_addr;
};


struct gfx_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t jt_offset;
 uint32_t jt_size;
};


struct rlc_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t save_and_restore_offset;
 uint32_t clear_state_descriptor_offset;
 uint32_t avail_scratch_ram_locations;
 uint32_t master_pkt_description_offset;
};


struct sdma_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t ucode_change_version;
 uint32_t jt_offset;
 uint32_t jt_size;
};


union radeon_firmware_header {
 struct common_firmware_header common;
 struct mc_firmware_header_v1_0 mc;
 struct smc_firmware_header_v1_0 smc;
 struct gfx_firmware_header_v1_0 gfx;
 struct rlc_firmware_header_v1_0 rlc;
 struct sdma_firmware_header_v1_0 sdma;
 uint8_t raw[0x100];
};

void radeon_ucode_print_mc_hdr(const struct common_firmware_header *hdr);
void radeon_ucode_print_smc_hdr(const struct common_firmware_header *hdr);
void radeon_ucode_print_gfx_hdr(const struct common_firmware_header *hdr);
void radeon_ucode_print_rlc_hdr(const struct common_firmware_header *hdr);
void radeon_ucode_print_sdma_hdr(const struct common_firmware_header *hdr);
int radeon_ucode_validate(const struct firmware *fw);
# 46 "drivers/gpu/drm/radeon/evergreen.c" 2
# 1 "drivers/gpu/drm/radeon/si.h" 1
# 27 "drivers/gpu/drm/radeon/si.h"
struct radeon_device;
struct radeon_mc;

int si_mc_load_microcode(struct radeon_device *rdev);
u32 si_gpu_check_soft_reset(struct radeon_device *rdev);
void si_vram_gtt_location(struct radeon_device *rdev, struct radeon_mc *mc);
void si_rlc_reset(struct radeon_device *rdev);
void si_init_uvd_internal_cg(struct radeon_device *rdev);
u32 si_get_csb_size(struct radeon_device *rdev);
void si_get_csb_buffer(struct radeon_device *rdev, volatile u32 *buffer);
# 47 "drivers/gpu/drm/radeon/evergreen.c" 2








u32 eg_cg_rreg(struct radeon_device *rdev, u32 reg)
{
 unsigned long flags;
 u32 r;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&rdev->cg_idx_lock)); } while (0); } while (0);
 r100_mm_wreg(rdev, (0x8f8), (((reg) & 0xffff)), false);
 r = r100_mm_rreg(rdev, (0x8fc), false);
 spin_unlock_irqrestore(&rdev->cg_idx_lock, flags);
 return r;
}

void eg_cg_wreg(struct radeon_device *rdev, u32 reg, u32 v)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&rdev->cg_idx_lock)); } while (0); } while (0);
 r100_mm_wreg(rdev, (0x8f8), (((reg) & 0xffff)), false);
 r100_mm_wreg(rdev, (0x8fc), ((v)), false);
 spin_unlock_irqrestore(&rdev->cg_idx_lock, flags);
}

u32 eg_pif_phy0_rreg(struct radeon_device *rdev, u32 reg)
{
 unsigned long flags;
 u32 r;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&rdev->pif_idx_lock)); } while (0); } while (0);
 r100_mm_wreg(rdev, (0x8), (((reg) & 0xffff)), false);
 r = r100_mm_rreg(rdev, (0xc), false);
 spin_unlock_irqrestore(&rdev->pif_idx_lock, flags);
 return r;
}

void eg_pif_phy0_wreg(struct radeon_device *rdev, u32 reg, u32 v)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&rdev->pif_idx_lock)); } while (0); } while (0);
 r100_mm_wreg(rdev, (0x8), (((reg) & 0xffff)), false);
 r100_mm_wreg(rdev, (0xc), ((v)), false);
 spin_unlock_irqrestore(&rdev->pif_idx_lock, flags);
}

u32 eg_pif_phy1_rreg(struct radeon_device *rdev, u32 reg)
{
 unsigned long flags;
 u32 r;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&rdev->pif_idx_lock)); } while (0); } while (0);
 r100_mm_wreg(rdev, (0x10), (((reg) & 0xffff)), false);
 r = r100_mm_rreg(rdev, (0x14), false);
 spin_unlock_irqrestore(&rdev->pif_idx_lock, flags);
 return r;
}

void eg_pif_phy1_wreg(struct radeon_device *rdev, u32 reg, u32 v)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&rdev->pif_idx_lock)); } while (0); } while (0);
 r100_mm_wreg(rdev, (0x10), (((reg) & 0xffff)), false);
 r100_mm_wreg(rdev, (0x14), ((v)), false);
 spin_unlock_irqrestore(&rdev->pif_idx_lock, flags);
}

static const u32 crtc_offsets[6] =
{
 (0x6df0 - 0x6df0),
 (0x79f0 - 0x6df0),
 (0x105f0 - 0x6df0),
 (0x111f0 - 0x6df0),
 (0x11df0 - 0x6df0),
 (0x129f0 - 0x6df0)
};

# 1 "drivers/gpu/drm/radeon/clearstate_evergreen.h" 1
# 24 "drivers/gpu/drm/radeon/clearstate_evergreen.h"
static const u32 SECT_CONTEXT_def_1[] =
{
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x40004000,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x80000000,
    0x40004000,
    0x0000ffff,
    0x00000000,
    0x40004000,
    0x00000000,
    0x40004000,
    0x00000000,
    0x40004000,
    0x00000000,
    0x40004000,
    0xaa99aaaa,
    0x00000000,
    0xffffffff,
    0xffffffff,
    0x80000000,
    0x40004000,
    0x00000000,
    0x00000000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x80000000,
    0x40004000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x3f800000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0xffffffff,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000001,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x00000000,
    0x00003fff,
    0x00000001,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
};
static const u32 SECT_CONTEXT_def_2[] =
{
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
};
static const u32 SECT_CONTEXT_def_3[] =
{
    0x00000000,
    0,
    0x00000000,
    0x00000200,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
};
static const u32 SECT_CONTEXT_def_4[] =
{
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
};
static const u32 SECT_CONTEXT_def_5[] =
{
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0x00000000,
};
static const u32 SECT_CONTEXT_def_6[] =
{
    0x00000000,
    0,
    0,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0x00000000,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
};
static const u32 SECT_CONTEXT_def_7[] =
{
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x00001000,
    0x00000000,
    0x00000005,
    0x3f800000,
    0x3f800000,
    0x3f800000,
    0x3f800000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0xffffffff,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0x0000000e,
    0x00000010,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
};
static const struct cs_extent_def SECT_CONTEXT_defs[] =
{
    {SECT_CONTEXT_def_1, 0x0000a000, 488 },
    {SECT_CONTEXT_def_2, 0x0000a1f5, 6 },
    {SECT_CONTEXT_def_3, 0x0000a200, 55 },
    {SECT_CONTEXT_def_4, 0x0000a23a, 98 },
    {SECT_CONTEXT_def_5, 0x0000a29e, 5 },
    {SECT_CONTEXT_def_6, 0x0000a2a5, 56 },
    {SECT_CONTEXT_def_7, 0x0000a2de, 290 },
    { 0, 0, 0 }
};
static const u32 SECT_CLEAR_def_1[] =
{
    0xffffffff,
    0xffffffff,
    0xffffffff,
};
static const struct cs_extent_def SECT_CLEAR_defs[] =
{
    {SECT_CLEAR_def_1, 0x0000ffc0, 3 },
    { 0, 0, 0 }
};
static const u32 SECT_CTRLCONST_def_1[] =
{
    0x00000000,
    0x00000000,
};
static const struct cs_extent_def SECT_CTRLCONST_defs[] =
{
    {SECT_CTRLCONST_def_1, 0x0000f3fc, 2 },
    { 0, 0, 0 }
};
static const struct cs_section_def evergreen_cs_data[] = {
    { SECT_CONTEXT_defs, SECT_CONTEXT },
    { SECT_CLEAR_defs, SECT_CLEAR },
    { SECT_CTRLCONST_defs, SECT_CTRLCONST },
    { 0, SECT_NONE }
};
# 132 "drivers/gpu/drm/radeon/evergreen.c" 2

static const u32 sumo_rlc_save_restore_register_list[] =
{
 0x98fc,
 0x9830,
 0x9834,
 0x9838,
 0x9870,
 0x9874,
 0x8a14,
 0x8b24,
 0x8bcc,
 0x8b10,
 0x8d00,
 0x8d04,
 0x8c00,
 0x8c04,
 0x8c08,
 0x8c0c,
 0x8d8c,
 0x8c20,
 0x8c24,
 0x8c28,
 0x8c18,
 0x8c1c,
 0x8cf0,
 0x8e2c,
 0x8e38,
 0x8c30,
 0x9508,
 0x9688,
 0x9608,
 0x960c,
 0x9610,
 0x9614,
 0x88c4,
 0x88d4,
 0xa008,
 0x900c,
 0x9100,
 0x913c,
 0x98f8,
 0x98f4,
 0x9b7c,
 0x3f8c,
 0x8950,
 0x8954,
 0x8a18,
 0x8b28,
 0x9144,
 0x9148,
 0x914c,
 0x3f90,
 0x3f94,
 0x915c,
 0x9160,
 0x9178,
 0x917c,
 0x9180,
 0x918c,
 0x9190,
 0x9194,
 0x9198,
 0x919c,
 0x91a8,
 0x91ac,
 0x91b0,
 0x91b4,
 0x91b8,
 0x91c4,
 0x91c8,
 0x91cc,
 0x91d0,
 0x91d4,
 0x91e0,
 0x91e4,
 0x91ec,
 0x91f0,
 0x91f4,
 0x9200,
 0x9204,
 0x929c,
 0x9150,
 0x802c,
};

static void evergreen_gpu_init(struct radeon_device *rdev);
void evergreen_fini(struct radeon_device *rdev);
void evergreen_pcie_gen2_enable(struct radeon_device *rdev);
void evergreen_program_aspm(struct radeon_device *rdev);

static const u32 evergreen_golden_registers[] =
{
 0x3f90, 0xffff0000, 0xff000000,
 0x9148, 0xffff0000, 0xff000000,
 0x3f94, 0xffff0000, 0xff000000,
 0x914c, 0xffff0000, 0xff000000,
 0x9b7c, 0xffffffff, 0x00000000,
 0x8a14, 0xffffffff, 0x00000007,
 0x8b10, 0xffffffff, 0x00000000,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0xffffffff, 0x000000c2,
 0x88d4, 0xffffffff, 0x00000010,
 0x8974, 0xffffffff, 0x00000000,
 0xc78, 0x00000080, 0x00000080,
 0x5eb4, 0xffffffff, 0x00000002,
 0x5e78, 0xffffffff, 0x001000f0,
 0x6104, 0x01000300, 0x00000000,
 0x5bc0, 0x00300000, 0x00000000,
 0x7030, 0xffffffff, 0x00000011,
 0x7c30, 0xffffffff, 0x00000011,
 0x10830, 0xffffffff, 0x00000011,
 0x11430, 0xffffffff, 0x00000011,
 0x12030, 0xffffffff, 0x00000011,
 0x12c30, 0xffffffff, 0x00000011,
 0xd02c, 0xffffffff, 0x08421000,
 0x240c, 0xffffffff, 0x00000380,
 0x8b24, 0xffffffff, 0x00ff0fff,
 0x28a4c, 0x06000000, 0x06000000,
 0x10c, 0x00000001, 0x00000001,
 0x8d00, 0xffffffff, 0x100e4848,
 0x8d04, 0xffffffff, 0x00164745,
 0x8c00, 0xffffffff, 0xe4000003,
 0x8c04, 0xffffffff, 0x40600060,
 0x8c08, 0xffffffff, 0x001c001c,
 0x8cf0, 0xffffffff, 0x08e00620,
 0x8c20, 0xffffffff, 0x00800080,
 0x8c24, 0xffffffff, 0x00800080,
 0x8c18, 0xffffffff, 0x20202078,
 0x8c1c, 0xffffffff, 0x00001010,
 0x28350, 0xffffffff, 0x00000000,
 0xa008, 0xffffffff, 0x00010000,
 0x5c4, 0xffffffff, 0x00000001,
 0x9508, 0xffffffff, 0x00000002,
 0x913c, 0x0000000f, 0x0000000a
};

static const u32 evergreen_golden_registers2[] =
{
 0x2f4c, 0xffffffff, 0x00000000,
 0x54f4, 0xffffffff, 0x00000000,
 0x54f0, 0xffffffff, 0x00000000,
 0x5498, 0xffffffff, 0x00000000,
 0x549c, 0xffffffff, 0x00000000,
 0x5494, 0xffffffff, 0x00000000,
 0x53cc, 0xffffffff, 0x00000000,
 0x53c8, 0xffffffff, 0x00000000,
 0x53c4, 0xffffffff, 0x00000000,
 0x53c0, 0xffffffff, 0x00000000,
 0x53bc, 0xffffffff, 0x00000000,
 0x53b8, 0xffffffff, 0x00000000,
 0x53b4, 0xffffffff, 0x00000000,
 0x53b0, 0xffffffff, 0x00000000
};

static const u32 cypress_mgcg_init[] =
{
 0x802c, 0xffffffff, 0xc0000000,
 0x5448, 0xffffffff, 0x00000100,
 0x55e4, 0xffffffff, 0x00000100,
 0x160c, 0xffffffff, 0x00000100,
 0x5644, 0xffffffff, 0x00000100,
 0xc164, 0xffffffff, 0x00000100,
 0x8a18, 0xffffffff, 0x00000100,
 0x897c, 0xffffffff, 0x06000100,
 0x8b28, 0xffffffff, 0x00000100,
 0x9144, 0xffffffff, 0x00000100,
 0x9a60, 0xffffffff, 0x00000100,
 0x9868, 0xffffffff, 0x00000100,
 0x8d58, 0xffffffff, 0x00000100,
 0x9510, 0xffffffff, 0x00000100,
 0x949c, 0xffffffff, 0x00000100,
 0x9654, 0xffffffff, 0x00000100,
 0x9030, 0xffffffff, 0x00000100,
 0x9034, 0xffffffff, 0x00000100,
 0x9038, 0xffffffff, 0x00000100,
 0x903c, 0xffffffff, 0x00000100,
 0x9040, 0xffffffff, 0x00000100,
 0xa200, 0xffffffff, 0x00000100,
 0xa204, 0xffffffff, 0x00000100,
 0xa208, 0xffffffff, 0x00000100,
 0xa20c, 0xffffffff, 0x00000100,
 0x971c, 0xffffffff, 0x00000100,
 0x977c, 0xffffffff, 0x00000100,
 0x3f80, 0xffffffff, 0x00000100,
 0xa210, 0xffffffff, 0x00000100,
 0xa214, 0xffffffff, 0x00000100,
 0x4d8, 0xffffffff, 0x00000100,
 0x9784, 0xffffffff, 0x00000100,
 0x9698, 0xffffffff, 0x00000100,
 0x4d4, 0xffffffff, 0x00000200,
 0x30cc, 0xffffffff, 0x00000100,
 0xd0c0, 0xffffffff, 0xff000100,
 0x802c, 0xffffffff, 0x40000000,
 0x915c, 0xffffffff, 0x00010000,
 0x9160, 0xffffffff, 0x00030002,
 0x9178, 0xffffffff, 0x00070000,
 0x917c, 0xffffffff, 0x00030002,
 0x9180, 0xffffffff, 0x00050004,
 0x918c, 0xffffffff, 0x00010006,
 0x9190, 0xffffffff, 0x00090008,
 0x9194, 0xffffffff, 0x00070000,
 0x9198, 0xffffffff, 0x00030002,
 0x919c, 0xffffffff, 0x00050004,
 0x91a8, 0xffffffff, 0x00010006,
 0x91ac, 0xffffffff, 0x00090008,
 0x91b0, 0xffffffff, 0x00070000,
 0x91b4, 0xffffffff, 0x00030002,
 0x91b8, 0xffffffff, 0x00050004,
 0x91c4, 0xffffffff, 0x00010006,
 0x91c8, 0xffffffff, 0x00090008,
 0x91cc, 0xffffffff, 0x00070000,
 0x91d0, 0xffffffff, 0x00030002,
 0x91d4, 0xffffffff, 0x00050004,
 0x91e0, 0xffffffff, 0x00010006,
 0x91e4, 0xffffffff, 0x00090008,
 0x91e8, 0xffffffff, 0x00000000,
 0x91ec, 0xffffffff, 0x00070000,
 0x91f0, 0xffffffff, 0x00030002,
 0x91f4, 0xffffffff, 0x00050004,
 0x9200, 0xffffffff, 0x00010006,
 0x9204, 0xffffffff, 0x00090008,
 0x9208, 0xffffffff, 0x00070000,
 0x920c, 0xffffffff, 0x00030002,
 0x9210, 0xffffffff, 0x00050004,
 0x921c, 0xffffffff, 0x00010006,
 0x9220, 0xffffffff, 0x00090008,
 0x9224, 0xffffffff, 0x00070000,
 0x9228, 0xffffffff, 0x00030002,
 0x922c, 0xffffffff, 0x00050004,
 0x9238, 0xffffffff, 0x00010006,
 0x923c, 0xffffffff, 0x00090008,
 0x9240, 0xffffffff, 0x00070000,
 0x9244, 0xffffffff, 0x00030002,
 0x9248, 0xffffffff, 0x00050004,
 0x9254, 0xffffffff, 0x00010006,
 0x9258, 0xffffffff, 0x00090008,
 0x925c, 0xffffffff, 0x00070000,
 0x9260, 0xffffffff, 0x00030002,
 0x9264, 0xffffffff, 0x00050004,
 0x9270, 0xffffffff, 0x00010006,
 0x9274, 0xffffffff, 0x00090008,
 0x9278, 0xffffffff, 0x00070000,
 0x927c, 0xffffffff, 0x00030002,
 0x9280, 0xffffffff, 0x00050004,
 0x928c, 0xffffffff, 0x00010006,
 0x9290, 0xffffffff, 0x00090008,
 0x9294, 0xffffffff, 0x00000000,
 0x929c, 0xffffffff, 0x00000001,
 0x802c, 0xffffffff, 0x40010000,
 0x915c, 0xffffffff, 0x00010000,
 0x9160, 0xffffffff, 0x00030002,
 0x9178, 0xffffffff, 0x00070000,
 0x917c, 0xffffffff, 0x00030002,
 0x9180, 0xffffffff, 0x00050004,
 0x918c, 0xffffffff, 0x00010006,
 0x9190, 0xffffffff, 0x00090008,
 0x9194, 0xffffffff, 0x00070000,
 0x9198, 0xffffffff, 0x00030002,
 0x919c, 0xffffffff, 0x00050004,
 0x91a8, 0xffffffff, 0x00010006,
 0x91ac, 0xffffffff, 0x00090008,
 0x91b0, 0xffffffff, 0x00070000,
 0x91b4, 0xffffffff, 0x00030002,
 0x91b8, 0xffffffff, 0x00050004,
 0x91c4, 0xffffffff, 0x00010006,
 0x91c8, 0xffffffff, 0x00090008,
 0x91cc, 0xffffffff, 0x00070000,
 0x91d0, 0xffffffff, 0x00030002,
 0x91d4, 0xffffffff, 0x00050004,
 0x91e0, 0xffffffff, 0x00010006,
 0x91e4, 0xffffffff, 0x00090008,
 0x91e8, 0xffffffff, 0x00000000,
 0x91ec, 0xffffffff, 0x00070000,
 0x91f0, 0xffffffff, 0x00030002,
 0x91f4, 0xffffffff, 0x00050004,
 0x9200, 0xffffffff, 0x00010006,
 0x9204, 0xffffffff, 0x00090008,
 0x9208, 0xffffffff, 0x00070000,
 0x920c, 0xffffffff, 0x00030002,
 0x9210, 0xffffffff, 0x00050004,
 0x921c, 0xffffffff, 0x00010006,
 0x9220, 0xffffffff, 0x00090008,
 0x9224, 0xffffffff, 0x00070000,
 0x9228, 0xffffffff, 0x00030002,
 0x922c, 0xffffffff, 0x00050004,
 0x9238, 0xffffffff, 0x00010006,
 0x923c, 0xffffffff, 0x00090008,
 0x9240, 0xffffffff, 0x00070000,
 0x9244, 0xffffffff, 0x00030002,
 0x9248, 0xffffffff, 0x00050004,
 0x9254, 0xffffffff, 0x00010006,
 0x9258, 0xffffffff, 0x00090008,
 0x925c, 0xffffffff, 0x00070000,
 0x9260, 0xffffffff, 0x00030002,
 0x9264, 0xffffffff, 0x00050004,
 0x9270, 0xffffffff, 0x00010006,
 0x9274, 0xffffffff, 0x00090008,
 0x9278, 0xffffffff, 0x00070000,
 0x927c, 0xffffffff, 0x00030002,
 0x9280, 0xffffffff, 0x00050004,
 0x928c, 0xffffffff, 0x00010006,
 0x9290, 0xffffffff, 0x00090008,
 0x9294, 0xffffffff, 0x00000000,
 0x929c, 0xffffffff, 0x00000001,
 0x802c, 0xffffffff, 0xc0000000
};

static const u32 redwood_mgcg_init[] =
{
 0x802c, 0xffffffff, 0xc0000000,
 0x5448, 0xffffffff, 0x00000100,
 0x55e4, 0xffffffff, 0x00000100,
 0x160c, 0xffffffff, 0x00000100,
 0x5644, 0xffffffff, 0x00000100,
 0xc164, 0xffffffff, 0x00000100,
 0x8a18, 0xffffffff, 0x00000100,
 0x897c, 0xffffffff, 0x06000100,
 0x8b28, 0xffffffff, 0x00000100,
 0x9144, 0xffffffff, 0x00000100,
 0x9a60, 0xffffffff, 0x00000100,
 0x9868, 0xffffffff, 0x00000100,
 0x8d58, 0xffffffff, 0x00000100,
 0x9510, 0xffffffff, 0x00000100,
 0x949c, 0xffffffff, 0x00000100,
 0x9654, 0xffffffff, 0x00000100,
 0x9030, 0xffffffff, 0x00000100,
 0x9034, 0xffffffff, 0x00000100,
 0x9038, 0xffffffff, 0x00000100,
 0x903c, 0xffffffff, 0x00000100,
 0x9040, 0xffffffff, 0x00000100,
 0xa200, 0xffffffff, 0x00000100,
 0xa204, 0xffffffff, 0x00000100,
 0xa208, 0xffffffff, 0x00000100,
 0xa20c, 0xffffffff, 0x00000100,
 0x971c, 0xffffffff, 0x00000100,
 0x977c, 0xffffffff, 0x00000100,
 0x3f80, 0xffffffff, 0x00000100,
 0xa210, 0xffffffff, 0x00000100,
 0xa214, 0xffffffff, 0x00000100,
 0x4d8, 0xffffffff, 0x00000100,
 0x9784, 0xffffffff, 0x00000100,
 0x9698, 0xffffffff, 0x00000100,
 0x4d4, 0xffffffff, 0x00000200,
 0x30cc, 0xffffffff, 0x00000100,
 0xd0c0, 0xffffffff, 0xff000100,
 0x802c, 0xffffffff, 0x40000000,
 0x915c, 0xffffffff, 0x00010000,
 0x9160, 0xffffffff, 0x00030002,
 0x9178, 0xffffffff, 0x00070000,
 0x917c, 0xffffffff, 0x00030002,
 0x9180, 0xffffffff, 0x00050004,
 0x918c, 0xffffffff, 0x00010006,
 0x9190, 0xffffffff, 0x00090008,
 0x9194, 0xffffffff, 0x00070000,
 0x9198, 0xffffffff, 0x00030002,
 0x919c, 0xffffffff, 0x00050004,
 0x91a8, 0xffffffff, 0x00010006,
 0x91ac, 0xffffffff, 0x00090008,
 0x91b0, 0xffffffff, 0x00070000,
 0x91b4, 0xffffffff, 0x00030002,
 0x91b8, 0xffffffff, 0x00050004,
 0x91c4, 0xffffffff, 0x00010006,
 0x91c8, 0xffffffff, 0x00090008,
 0x91cc, 0xffffffff, 0x00070000,
 0x91d0, 0xffffffff, 0x00030002,
 0x91d4, 0xffffffff, 0x00050004,
 0x91e0, 0xffffffff, 0x00010006,
 0x91e4, 0xffffffff, 0x00090008,
 0x91e8, 0xffffffff, 0x00000000,
 0x91ec, 0xffffffff, 0x00070000,
 0x91f0, 0xffffffff, 0x00030002,
 0x91f4, 0xffffffff, 0x00050004,
 0x9200, 0xffffffff, 0x00010006,
 0x9204, 0xffffffff, 0x00090008,
 0x9294, 0xffffffff, 0x00000000,
 0x929c, 0xffffffff, 0x00000001,
 0x802c, 0xffffffff, 0xc0000000
};

static const u32 cedar_golden_registers[] =
{
 0x3f90, 0xffff0000, 0xff000000,
 0x9148, 0xffff0000, 0xff000000,
 0x3f94, 0xffff0000, 0xff000000,
 0x914c, 0xffff0000, 0xff000000,
 0x9b7c, 0xffffffff, 0x00000000,
 0x8a14, 0xffffffff, 0x00000007,
 0x8b10, 0xffffffff, 0x00000000,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0xffffffff, 0x000000c2,
 0x88d4, 0xffffffff, 0x00000000,
 0x8974, 0xffffffff, 0x00000000,
 0xc78, 0x00000080, 0x00000080,
 0x5eb4, 0xffffffff, 0x00000002,
 0x5e78, 0xffffffff, 0x001000f0,
 0x6104, 0x01000300, 0x00000000,
 0x5bc0, 0x00300000, 0x00000000,
 0x7030, 0xffffffff, 0x00000011,
 0x7c30, 0xffffffff, 0x00000011,
 0x10830, 0xffffffff, 0x00000011,
 0x11430, 0xffffffff, 0x00000011,
 0xd02c, 0xffffffff, 0x08421000,
 0x240c, 0xffffffff, 0x00000380,
 0x8b24, 0xffffffff, 0x00ff0fff,
 0x28a4c, 0x06000000, 0x06000000,
 0x10c, 0x00000001, 0x00000001,
 0x8d00, 0xffffffff, 0x100e4848,
 0x8d04, 0xffffffff, 0x00164745,
 0x8c00, 0xffffffff, 0xe4000003,
 0x8c04, 0xffffffff, 0x40600060,
 0x8c08, 0xffffffff, 0x001c001c,
 0x8cf0, 0xffffffff, 0x08e00410,
 0x8c20, 0xffffffff, 0x00800080,
 0x8c24, 0xffffffff, 0x00800080,
 0x8c18, 0xffffffff, 0x20202078,
 0x8c1c, 0xffffffff, 0x00001010,
 0x28350, 0xffffffff, 0x00000000,
 0xa008, 0xffffffff, 0x00010000,
 0x5c4, 0xffffffff, 0x00000001,
 0x9508, 0xffffffff, 0x00000002
};

static const u32 cedar_mgcg_init[] =
{
 0x802c, 0xffffffff, 0xc0000000,
 0x5448, 0xffffffff, 0x00000100,
 0x55e4, 0xffffffff, 0x00000100,
 0x160c, 0xffffffff, 0x00000100,
 0x5644, 0xffffffff, 0x00000100,
 0xc164, 0xffffffff, 0x00000100,
 0x8a18, 0xffffffff, 0x00000100,
 0x897c, 0xffffffff, 0x06000100,
 0x8b28, 0xffffffff, 0x00000100,
 0x9144, 0xffffffff, 0x00000100,
 0x9a60, 0xffffffff, 0x00000100,
 0x9868, 0xffffffff, 0x00000100,
 0x8d58, 0xffffffff, 0x00000100,
 0x9510, 0xffffffff, 0x00000100,
 0x949c, 0xffffffff, 0x00000100,
 0x9654, 0xffffffff, 0x00000100,
 0x9030, 0xffffffff, 0x00000100,
 0x9034, 0xffffffff, 0x00000100,
 0x9038, 0xffffffff, 0x00000100,
 0x903c, 0xffffffff, 0x00000100,
 0x9040, 0xffffffff, 0x00000100,
 0xa200, 0xffffffff, 0x00000100,
 0xa204, 0xffffffff, 0x00000100,
 0xa208, 0xffffffff, 0x00000100,
 0xa20c, 0xffffffff, 0x00000100,
 0x971c, 0xffffffff, 0x00000100,
 0x977c, 0xffffffff, 0x00000100,
 0x3f80, 0xffffffff, 0x00000100,
 0xa210, 0xffffffff, 0x00000100,
 0xa214, 0xffffffff, 0x00000100,
 0x4d8, 0xffffffff, 0x00000100,
 0x9784, 0xffffffff, 0x00000100,
 0x9698, 0xffffffff, 0x00000100,
 0x4d4, 0xffffffff, 0x00000200,
 0x30cc, 0xffffffff, 0x00000100,
 0xd0c0, 0xffffffff, 0xff000100,
 0x802c, 0xffffffff, 0x40000000,
 0x915c, 0xffffffff, 0x00010000,
 0x9178, 0xffffffff, 0x00050000,
 0x917c, 0xffffffff, 0x00030002,
 0x918c, 0xffffffff, 0x00010004,
 0x9190, 0xffffffff, 0x00070006,
 0x9194, 0xffffffff, 0x00050000,
 0x9198, 0xffffffff, 0x00030002,
 0x91a8, 0xffffffff, 0x00010004,
 0x91ac, 0xffffffff, 0x00070006,
 0x91e8, 0xffffffff, 0x00000000,
 0x9294, 0xffffffff, 0x00000000,
 0x929c, 0xffffffff, 0x00000001,
 0x802c, 0xffffffff, 0xc0000000
};

static const u32 juniper_mgcg_init[] =
{
 0x802c, 0xffffffff, 0xc0000000,
 0x5448, 0xffffffff, 0x00000100,
 0x55e4, 0xffffffff, 0x00000100,
 0x160c, 0xffffffff, 0x00000100,
 0x5644, 0xffffffff, 0x00000100,
 0xc164, 0xffffffff, 0x00000100,
 0x8a18, 0xffffffff, 0x00000100,
 0x897c, 0xffffffff, 0x06000100,
 0x8b28, 0xffffffff, 0x00000100,
 0x9144, 0xffffffff, 0x00000100,
 0x9a60, 0xffffffff, 0x00000100,
 0x9868, 0xffffffff, 0x00000100,
 0x8d58, 0xffffffff, 0x00000100,
 0x9510, 0xffffffff, 0x00000100,
 0x949c, 0xffffffff, 0x00000100,
 0x9654, 0xffffffff, 0x00000100,
 0x9030, 0xffffffff, 0x00000100,
 0x9034, 0xffffffff, 0x00000100,
 0x9038, 0xffffffff, 0x00000100,
 0x903c, 0xffffffff, 0x00000100,
 0x9040, 0xffffffff, 0x00000100,
 0xa200, 0xffffffff, 0x00000100,
 0xa204, 0xffffffff, 0x00000100,
 0xa208, 0xffffffff, 0x00000100,
 0xa20c, 0xffffffff, 0x00000100,
 0x971c, 0xffffffff, 0x00000100,
 0xd0c0, 0xffffffff, 0xff000100,
 0x802c, 0xffffffff, 0x40000000,
 0x915c, 0xffffffff, 0x00010000,
 0x9160, 0xffffffff, 0x00030002,
 0x9178, 0xffffffff, 0x00070000,
 0x917c, 0xffffffff, 0x00030002,
 0x9180, 0xffffffff, 0x00050004,
 0x918c, 0xffffffff, 0x00010006,
 0x9190, 0xffffffff, 0x00090008,
 0x9194, 0xffffffff, 0x00070000,
 0x9198, 0xffffffff, 0x00030002,
 0x919c, 0xffffffff, 0x00050004,
 0x91a8, 0xffffffff, 0x00010006,
 0x91ac, 0xffffffff, 0x00090008,
 0x91b0, 0xffffffff, 0x00070000,
 0x91b4, 0xffffffff, 0x00030002,
 0x91b8, 0xffffffff, 0x00050004,
 0x91c4, 0xffffffff, 0x00010006,
 0x91c8, 0xffffffff, 0x00090008,
 0x91cc, 0xffffffff, 0x00070000,
 0x91d0, 0xffffffff, 0x00030002,
 0x91d4, 0xffffffff, 0x00050004,
 0x91e0, 0xffffffff, 0x00010006,
 0x91e4, 0xffffffff, 0x00090008,
 0x91e8, 0xffffffff, 0x00000000,
 0x91ec, 0xffffffff, 0x00070000,
 0x91f0, 0xffffffff, 0x00030002,
 0x91f4, 0xffffffff, 0x00050004,
 0x9200, 0xffffffff, 0x00010006,
 0x9204, 0xffffffff, 0x00090008,
 0x9208, 0xffffffff, 0x00070000,
 0x920c, 0xffffffff, 0x00030002,
 0x9210, 0xffffffff, 0x00050004,
 0x921c, 0xffffffff, 0x00010006,
 0x9220, 0xffffffff, 0x00090008,
 0x9224, 0xffffffff, 0x00070000,
 0x9228, 0xffffffff, 0x00030002,
 0x922c, 0xffffffff, 0x00050004,
 0x9238, 0xffffffff, 0x00010006,
 0x923c, 0xffffffff, 0x00090008,
 0x9240, 0xffffffff, 0x00070000,
 0x9244, 0xffffffff, 0x00030002,
 0x9248, 0xffffffff, 0x00050004,
 0x9254, 0xffffffff, 0x00010006,
 0x9258, 0xffffffff, 0x00090008,
 0x925c, 0xffffffff, 0x00070000,
 0x9260, 0xffffffff, 0x00030002,
 0x9264, 0xffffffff, 0x00050004,
 0x9270, 0xffffffff, 0x00010006,
 0x9274, 0xffffffff, 0x00090008,
 0x9278, 0xffffffff, 0x00070000,
 0x927c, 0xffffffff, 0x00030002,
 0x9280, 0xffffffff, 0x00050004,
 0x928c, 0xffffffff, 0x00010006,
 0x9290, 0xffffffff, 0x00090008,
 0x9294, 0xffffffff, 0x00000000,
 0x929c, 0xffffffff, 0x00000001,
 0x802c, 0xffffffff, 0xc0000000,
 0x977c, 0xffffffff, 0x00000100,
 0x3f80, 0xffffffff, 0x00000100,
 0xa210, 0xffffffff, 0x00000100,
 0xa214, 0xffffffff, 0x00000100,
 0x4d8, 0xffffffff, 0x00000100,
 0x9784, 0xffffffff, 0x00000100,
 0x9698, 0xffffffff, 0x00000100,
 0x4d4, 0xffffffff, 0x00000200,
 0x30cc, 0xffffffff, 0x00000100,
 0x802c, 0xffffffff, 0xc0000000
};

static const u32 supersumo_golden_registers[] =
{
 0x5eb4, 0xffffffff, 0x00000002,
 0x5c4, 0xffffffff, 0x00000001,
 0x7030, 0xffffffff, 0x00000011,
 0x7c30, 0xffffffff, 0x00000011,
 0x6104, 0x01000300, 0x00000000,
 0x5bc0, 0x00300000, 0x00000000,
 0x8c04, 0xffffffff, 0x40600060,
 0x8c08, 0xffffffff, 0x001c001c,
 0x8c20, 0xffffffff, 0x00800080,
 0x8c24, 0xffffffff, 0x00800080,
 0x8c18, 0xffffffff, 0x20202078,
 0x8c1c, 0xffffffff, 0x00001010,
 0x918c, 0xffffffff, 0x00010006,
 0x91a8, 0xffffffff, 0x00010006,
 0x91c4, 0xffffffff, 0x00010006,
 0x91e0, 0xffffffff, 0x00010006,
 0x9200, 0xffffffff, 0x00010006,
 0x9150, 0xffffffff, 0x6e944040,
 0x917c, 0xffffffff, 0x00030002,
 0x9180, 0xffffffff, 0x00050004,
 0x9198, 0xffffffff, 0x00030002,
 0x919c, 0xffffffff, 0x00050004,
 0x91b4, 0xffffffff, 0x00030002,
 0x91b8, 0xffffffff, 0x00050004,
 0x91d0, 0xffffffff, 0x00030002,
 0x91d4, 0xffffffff, 0x00050004,
 0x91f0, 0xffffffff, 0x00030002,
 0x91f4, 0xffffffff, 0x00050004,
 0x915c, 0xffffffff, 0x00010000,
 0x9160, 0xffffffff, 0x00030002,
 0x3f90, 0xffff0000, 0xff000000,
 0x9178, 0xffffffff, 0x00070000,
 0x9194, 0xffffffff, 0x00070000,
 0x91b0, 0xffffffff, 0x00070000,
 0x91cc, 0xffffffff, 0x00070000,
 0x91ec, 0xffffffff, 0x00070000,
 0x9148, 0xffff0000, 0xff000000,
 0x9190, 0xffffffff, 0x00090008,
 0x91ac, 0xffffffff, 0x00090008,
 0x91c8, 0xffffffff, 0x00090008,
 0x91e4, 0xffffffff, 0x00090008,
 0x9204, 0xffffffff, 0x00090008,
 0x3f94, 0xffff0000, 0xff000000,
 0x914c, 0xffff0000, 0xff000000,
 0x929c, 0xffffffff, 0x00000001,
 0x8a18, 0xffffffff, 0x00000100,
 0x8b28, 0xffffffff, 0x00000100,
 0x9144, 0xffffffff, 0x00000100,
 0x5644, 0xffffffff, 0x00000100,
 0x9b7c, 0xffffffff, 0x00000000,
 0x8030, 0xffffffff, 0x0000100a,
 0x8a14, 0xffffffff, 0x00000007,
 0x8b24, 0xffffffff, 0x00ff0fff,
 0x8b10, 0xffffffff, 0x00000000,
 0x28a4c, 0x06000000, 0x06000000,
 0x4d8, 0xffffffff, 0x00000100,
 0x913c, 0xffff000f, 0x0100000a,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0xffffffff, 0x000000c2,
 0x88d4, 0xffffffff, 0x00000010,
 0x8974, 0xffffffff, 0x00000000,
 0xc78, 0x00000080, 0x00000080,
 0x5e78, 0xffffffff, 0x001000f0,
 0xd02c, 0xffffffff, 0x08421000,
 0xa008, 0xffffffff, 0x00010000,
 0x8d00, 0xffffffff, 0x100e4848,
 0x8d04, 0xffffffff, 0x00164745,
 0x8c00, 0xffffffff, 0xe4000003,
 0x8cf0, 0x1fffffff, 0x08e00620,
 0x28350, 0xffffffff, 0x00000000,
 0x9508, 0xffffffff, 0x00000002
};

static const u32 sumo_golden_registers[] =
{
 0x900c, 0x00ffffff, 0x0017071f,
 0x8c18, 0xffffffff, 0x10101060,
 0x8c1c, 0xffffffff, 0x00001010,
 0x8c30, 0x0000000f, 0x00000005,
 0x9688, 0x0000000f, 0x00000007
};

static const u32 wrestler_golden_registers[] =
{
 0x5eb4, 0xffffffff, 0x00000002,
 0x5c4, 0xffffffff, 0x00000001,
 0x7030, 0xffffffff, 0x00000011,
 0x7c30, 0xffffffff, 0x00000011,
 0x6104, 0x01000300, 0x00000000,
 0x5bc0, 0x00300000, 0x00000000,
 0x918c, 0xffffffff, 0x00010006,
 0x91a8, 0xffffffff, 0x00010006,
 0x9150, 0xffffffff, 0x6e944040,
 0x917c, 0xffffffff, 0x00030002,
 0x9198, 0xffffffff, 0x00030002,
 0x915c, 0xffffffff, 0x00010000,
 0x3f90, 0xffff0000, 0xff000000,
 0x9178, 0xffffffff, 0x00070000,
 0x9194, 0xffffffff, 0x00070000,
 0x9148, 0xffff0000, 0xff000000,
 0x9190, 0xffffffff, 0x00090008,
 0x91ac, 0xffffffff, 0x00090008,
 0x3f94, 0xffff0000, 0xff000000,
 0x914c, 0xffff0000, 0xff000000,
 0x929c, 0xffffffff, 0x00000001,
 0x8a18, 0xffffffff, 0x00000100,
 0x8b28, 0xffffffff, 0x00000100,
 0x9144, 0xffffffff, 0x00000100,
 0x9b7c, 0xffffffff, 0x00000000,
 0x8030, 0xffffffff, 0x0000100a,
 0x8a14, 0xffffffff, 0x00000001,
 0x8b24, 0xffffffff, 0x00ff0fff,
 0x8b10, 0xffffffff, 0x00000000,
 0x28a4c, 0x06000000, 0x06000000,
 0x4d8, 0xffffffff, 0x00000100,
 0x913c, 0xffff000f, 0x0100000a,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0xffffffff, 0x000000c2,
 0x88d4, 0xffffffff, 0x00000010,
 0x8974, 0xffffffff, 0x00000000,
 0xc78, 0x00000080, 0x00000080,
 0x5e78, 0xffffffff, 0x001000f0,
 0xd02c, 0xffffffff, 0x08421000,
 0xa008, 0xffffffff, 0x00010000,
 0x8d00, 0xffffffff, 0x100e4848,
 0x8d04, 0xffffffff, 0x00164745,
 0x8c00, 0xffffffff, 0xe4000003,
 0x8cf0, 0x1fffffff, 0x08e00410,
 0x28350, 0xffffffff, 0x00000000,
 0x9508, 0xffffffff, 0x00000002,
 0x900c, 0xffffffff, 0x0017071f,
 0x8c18, 0xffffffff, 0x10101060,
 0x8c1c, 0xffffffff, 0x00001010
};

static const u32 barts_golden_registers[] =
{
 0x5eb4, 0xffffffff, 0x00000002,
 0x5e78, 0x8f311ff1, 0x001000f0,
 0x3f90, 0xffff0000, 0xff000000,
 0x9148, 0xffff0000, 0xff000000,
 0x3f94, 0xffff0000, 0xff000000,
 0x914c, 0xffff0000, 0xff000000,
 0xc78, 0x00000080, 0x00000080,
 0xbd4, 0x70073777, 0x00010001,
 0xd02c, 0xbfffff1f, 0x08421000,
 0xd0b8, 0x03773777, 0x02011003,
 0x5bc0, 0x00200000, 0x50100000,
 0x98f8, 0x33773777, 0x02011003,
 0x98fc, 0xffffffff, 0x76543210,
 0x7030, 0x31000311, 0x00000011,
 0x2f48, 0x00000007, 0x02011003,
 0x6b28, 0x00000010, 0x00000012,
 0x7728, 0x00000010, 0x00000012,
 0x10328, 0x00000010, 0x00000012,
 0x10f28, 0x00000010, 0x00000012,
 0x11b28, 0x00000010, 0x00000012,
 0x12728, 0x00000010, 0x00000012,
 0x240c, 0x000007ff, 0x00000380,
 0x8a14, 0xf000001f, 0x00000007,
 0x8b24, 0x3fff3fff, 0x00ff0fff,
 0x8b10, 0x0000ff0f, 0x00000000,
 0x28a4c, 0x07ffffff, 0x06000000,
 0x10c, 0x00000001, 0x00010003,
 0xa02c, 0xffffffff, 0x0000009b,
 0x913c, 0x0000000f, 0x0100000a,
 0x8d00, 0xffff7f7f, 0x100e4848,
 0x8d04, 0x00ffffff, 0x00164745,
 0x8c00, 0xfffc0003, 0xe4000003,
 0x8c04, 0xf8ff00ff, 0x40600060,
 0x8c08, 0x00ff00ff, 0x001c001c,
 0x8cf0, 0x1fff1fff, 0x08e00620,
 0x8c20, 0x0fff0fff, 0x00800080,
 0x8c24, 0x0fff0fff, 0x00800080,
 0x8c18, 0xffffffff, 0x20202078,
 0x8c1c, 0x0000ffff, 0x00001010,
 0x28350, 0x00000f01, 0x00000000,
 0x9508, 0x3700001f, 0x00000002,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0x001f3ae3, 0x000000c2,
 0x88d4, 0x0000001f, 0x00000010,
 0x8974, 0xffffffff, 0x00000000
};

static const u32 turks_golden_registers[] =
{
 0x5eb4, 0xffffffff, 0x00000002,
 0x5e78, 0x8f311ff1, 0x001000f0,
 0x8c8, 0x00003000, 0x00001070,
 0x8cc, 0x000fffff, 0x00040035,
 0x3f90, 0xffff0000, 0xfff00000,
 0x9148, 0xffff0000, 0xfff00000,
 0x3f94, 0xffff0000, 0xfff00000,
 0x914c, 0xffff0000, 0xfff00000,
 0xc78, 0x00000080, 0x00000080,
 0xbd4, 0x00073007, 0x00010002,
 0xd02c, 0xbfffff1f, 0x08421000,
 0xd0b8, 0x03773777, 0x02010002,
 0x5bc0, 0x00200000, 0x50100000,
 0x98f8, 0x33773777, 0x00010002,
 0x98fc, 0xffffffff, 0x33221100,
 0x7030, 0x31000311, 0x00000011,
 0x2f48, 0x33773777, 0x00010002,
 0x6b28, 0x00000010, 0x00000012,
 0x7728, 0x00000010, 0x00000012,
 0x10328, 0x00000010, 0x00000012,
 0x10f28, 0x00000010, 0x00000012,
 0x11b28, 0x00000010, 0x00000012,
 0x12728, 0x00000010, 0x00000012,
 0x240c, 0x000007ff, 0x00000380,
 0x8a14, 0xf000001f, 0x00000007,
 0x8b24, 0x3fff3fff, 0x00ff0fff,
 0x8b10, 0x0000ff0f, 0x00000000,
 0x28a4c, 0x07ffffff, 0x06000000,
 0x10c, 0x00000001, 0x00010003,
 0xa02c, 0xffffffff, 0x0000009b,
 0x913c, 0x0000000f, 0x0100000a,
 0x8d00, 0xffff7f7f, 0x100e4848,
 0x8d04, 0x00ffffff, 0x00164745,
 0x8c00, 0xfffc0003, 0xe4000003,
 0x8c04, 0xf8ff00ff, 0x40600060,
 0x8c08, 0x00ff00ff, 0x001c001c,
 0x8cf0, 0x1fff1fff, 0x08e00410,
 0x8c20, 0x0fff0fff, 0x00800080,
 0x8c24, 0x0fff0fff, 0x00800080,
 0x8c18, 0xffffffff, 0x20202078,
 0x8c1c, 0x0000ffff, 0x00001010,
 0x28350, 0x00000f01, 0x00000000,
 0x9508, 0x3700001f, 0x00000002,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0x001f3ae3, 0x000000c2,
 0x88d4, 0x0000001f, 0x00000010,
 0x8974, 0xffffffff, 0x00000000
};

static const u32 caicos_golden_registers[] =
{
 0x5eb4, 0xffffffff, 0x00000002,
 0x5e78, 0x8f311ff1, 0x001000f0,
 0x8c8, 0x00003420, 0x00001450,
 0x8cc, 0x000fffff, 0x00040035,
 0x3f90, 0xffff0000, 0xfffc0000,
 0x9148, 0xffff0000, 0xfffc0000,
 0x3f94, 0xffff0000, 0xfffc0000,
 0x914c, 0xffff0000, 0xfffc0000,
 0xc78, 0x00000080, 0x00000080,
 0xbd4, 0x00073007, 0x00010001,
 0xd02c, 0xbfffff1f, 0x08421000,
 0xd0b8, 0x03773777, 0x02010001,
 0x5bc0, 0x00200000, 0x50100000,
 0x98f8, 0x33773777, 0x02010001,
 0x98fc, 0xffffffff, 0x33221100,
 0x7030, 0x31000311, 0x00000011,
 0x2f48, 0x33773777, 0x02010001,
 0x6b28, 0x00000010, 0x00000012,
 0x7728, 0x00000010, 0x00000012,
 0x10328, 0x00000010, 0x00000012,
 0x10f28, 0x00000010, 0x00000012,
 0x11b28, 0x00000010, 0x00000012,
 0x12728, 0x00000010, 0x00000012,
 0x240c, 0x000007ff, 0x00000380,
 0x8a14, 0xf000001f, 0x00000001,
 0x8b24, 0x3fff3fff, 0x00ff0fff,
 0x8b10, 0x0000ff0f, 0x00000000,
 0x28a4c, 0x07ffffff, 0x06000000,
 0x10c, 0x00000001, 0x00010003,
 0xa02c, 0xffffffff, 0x0000009b,
 0x913c, 0x0000000f, 0x0100000a,
 0x8d00, 0xffff7f7f, 0x100e4848,
 0x8d04, 0x00ffffff, 0x00164745,
 0x8c00, 0xfffc0003, 0xe4000003,
 0x8c04, 0xf8ff00ff, 0x40600060,
 0x8c08, 0x00ff00ff, 0x001c001c,
 0x8cf0, 0x1fff1fff, 0x08e00410,
 0x8c20, 0x0fff0fff, 0x00800080,
 0x8c24, 0x0fff0fff, 0x00800080,
 0x8c18, 0xffffffff, 0x20202078,
 0x8c1c, 0x0000ffff, 0x00001010,
 0x28350, 0x00000f01, 0x00000000,
 0x9508, 0x3700001f, 0x00000002,
 0x960c, 0xffffffff, 0x54763210,
 0x88c4, 0x001f3ae3, 0x000000c2,
 0x88d4, 0x0000001f, 0x00000010,
 0x8974, 0xffffffff, 0x00000000
};

static void evergreen_init_golden_registers(struct radeon_device *rdev)
{
 switch (rdev->family) {
 case CHIP_CYPRESS:
 case CHIP_HEMLOCK:
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers,
       (const u32)(sizeof(evergreen_golden_registers) / sizeof((evergreen_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers)), typeof(&(evergreen_golden_registers)[0])))); })))));
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers2,
       (const u32)(sizeof(evergreen_golden_registers2) / sizeof((evergreen_golden_registers2)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers2)), typeof(&(evergreen_golden_registers2)[0])))); })))));
  radeon_program_register_sequence(rdev,
       cypress_mgcg_init,
       (const u32)(sizeof(cypress_mgcg_init) / sizeof((cypress_mgcg_init)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((cypress_mgcg_init)), typeof(&(cypress_mgcg_init)[0])))); })))));
  break;
 case CHIP_JUNIPER:
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers,
       (const u32)(sizeof(evergreen_golden_registers) / sizeof((evergreen_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers)), typeof(&(evergreen_golden_registers)[0])))); })))));
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers2,
       (const u32)(sizeof(evergreen_golden_registers2) / sizeof((evergreen_golden_registers2)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers2)), typeof(&(evergreen_golden_registers2)[0])))); })))));
  radeon_program_register_sequence(rdev,
       juniper_mgcg_init,
       (const u32)(sizeof(juniper_mgcg_init) / sizeof((juniper_mgcg_init)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((juniper_mgcg_init)), typeof(&(juniper_mgcg_init)[0])))); })))));
  break;
 case CHIP_REDWOOD:
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers,
       (const u32)(sizeof(evergreen_golden_registers) / sizeof((evergreen_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers)), typeof(&(evergreen_golden_registers)[0])))); })))));
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers2,
       (const u32)(sizeof(evergreen_golden_registers2) / sizeof((evergreen_golden_registers2)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers2)), typeof(&(evergreen_golden_registers2)[0])))); })))));
  radeon_program_register_sequence(rdev,
       redwood_mgcg_init,
       (const u32)(sizeof(redwood_mgcg_init) / sizeof((redwood_mgcg_init)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((redwood_mgcg_init)), typeof(&(redwood_mgcg_init)[0])))); })))));
  break;
 case CHIP_CEDAR:
  radeon_program_register_sequence(rdev,
       cedar_golden_registers,
       (const u32)(sizeof(cedar_golden_registers) / sizeof((cedar_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((cedar_golden_registers)), typeof(&(cedar_golden_registers)[0])))); })))));
  radeon_program_register_sequence(rdev,
       evergreen_golden_registers2,
       (const u32)(sizeof(evergreen_golden_registers2) / sizeof((evergreen_golden_registers2)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_golden_registers2)), typeof(&(evergreen_golden_registers2)[0])))); })))));
  radeon_program_register_sequence(rdev,
       cedar_mgcg_init,
       (const u32)(sizeof(cedar_mgcg_init) / sizeof((cedar_mgcg_init)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((cedar_mgcg_init)), typeof(&(cedar_mgcg_init)[0])))); })))));
  break;
 case CHIP_PALM:
  radeon_program_register_sequence(rdev,
       wrestler_golden_registers,
       (const u32)(sizeof(wrestler_golden_registers) / sizeof((wrestler_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((wrestler_golden_registers)), typeof(&(wrestler_golden_registers)[0])))); })))));
  break;
 case CHIP_SUMO:
  radeon_program_register_sequence(rdev,
       supersumo_golden_registers,
       (const u32)(sizeof(supersumo_golden_registers) / sizeof((supersumo_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((supersumo_golden_registers)), typeof(&(supersumo_golden_registers)[0])))); })))));
  break;
 case CHIP_SUMO2:
  radeon_program_register_sequence(rdev,
       supersumo_golden_registers,
       (const u32)(sizeof(supersumo_golden_registers) / sizeof((supersumo_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((supersumo_golden_registers)), typeof(&(supersumo_golden_registers)[0])))); })))));
  radeon_program_register_sequence(rdev,
       sumo_golden_registers,
       (const u32)(sizeof(sumo_golden_registers) / sizeof((sumo_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sumo_golden_registers)), typeof(&(sumo_golden_registers)[0])))); })))));
  break;
 case CHIP_BARTS:
  radeon_program_register_sequence(rdev,
       barts_golden_registers,
       (const u32)(sizeof(barts_golden_registers) / sizeof((barts_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((barts_golden_registers)), typeof(&(barts_golden_registers)[0])))); })))));
  break;
 case CHIP_TURKS:
  radeon_program_register_sequence(rdev,
       turks_golden_registers,
       (const u32)(sizeof(turks_golden_registers) / sizeof((turks_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((turks_golden_registers)), typeof(&(turks_golden_registers)[0])))); })))));
  break;
 case CHIP_CAICOS:
  radeon_program_register_sequence(rdev,
       caicos_golden_registers,
       (const u32)(sizeof(caicos_golden_registers) / sizeof((caicos_golden_registers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((caicos_golden_registers)), typeof(&(caicos_golden_registers)[0])))); })))));
  break;
 default:
  break;
 }
}
# 1091 "drivers/gpu/drm/radeon/evergreen.c"
int evergreen_get_allowed_info_register(struct radeon_device *rdev,
     u32 reg, u32 *val)
{
 switch (reg) {
 case 0x8010:
 case 0x8014:
 case 0x8018:
 case 0x0E50:
 case 0x0EC4:
 case 0xd034:
 case 0xf6bc:
  *val = r100_mm_rreg(rdev, (reg), false);
  return 0;
 default:
  return -22;
 }
}

void evergreen_tiling_fields(unsigned tiling_flags, unsigned *bankw,
        unsigned *bankh, unsigned *mtaspect,
        unsigned *tile_split)
{
 *bankw = (tiling_flags >> 8) & 0xf;
 *bankh = (tiling_flags >> 12) & 0xf;
 *mtaspect = (tiling_flags >> 16) & 0xf;
 *tile_split = (tiling_flags >> 24) & 0xf;
 switch (*bankw) {
 default:
 case 1: *bankw = 0; break;
 case 2: *bankw = 1; break;
 case 4: *bankw = 2; break;
 case 8: *bankw = 3; break;
 }
 switch (*bankh) {
 default:
 case 1: *bankh = 0; break;
 case 2: *bankh = 1; break;
 case 4: *bankh = 2; break;
 case 8: *bankh = 3; break;
 }
 switch (*mtaspect) {
 default:
 case 1: *mtaspect = 0; break;
 case 2: *mtaspect = 1; break;
 case 4: *mtaspect = 2; break;
 case 8: *mtaspect = 3; break;
 }
}

static int sumo_set_uvd_clock(struct radeon_device *rdev, u32 clock,
         u32 cntl_reg, u32 status_reg)
{
 int r, i;
 struct atom_clock_dividers dividers;

 r = radeon_atom_get_clock_dividers(rdev, 2,
        clock, false, &dividers);
 if (r)
  return r;

 do { uint32_t tmp_ = r100_mm_rreg(rdev, (cntl_reg), false); tmp_ &= (~((1 << 8)|0x7f)); tmp_ |= ((dividers.post_div) & ~(~((1 << 8)|0x7f))); r100_mm_wreg(rdev, (cntl_reg), (tmp_), false); } while (0);

 for (i = 0; i < 100; i++) {
  if (r100_mm_rreg(rdev, (status_reg), false) & (1 << 0))
   break;
  ( (__builtin_constant_p(10) && (10)<=5) ? udelay((10)*1000) : ({unsigned long __ms=(10); while (__ms--) udelay(1000);}));
 }
 if (i == 100)
  return -110;

 return 0;
}

int sumo_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk)
{
 int r = 0;
 u32 cg_scratch = r100_mm_rreg(rdev, (0x820), false);

 r = sumo_set_uvd_clock(rdev, vclk, 0x618, 0x61c);
 if (r)
  goto done;
 cg_scratch &= 0xffff0000;
 cg_scratch |= vclk / 100;

 r = sumo_set_uvd_clock(rdev, dclk, 0x610, 0x614);
 if (r)
  goto done;
 cg_scratch &= 0x0000ffff;
 cg_scratch |= (dclk / 100) << 16;

done:
 r100_mm_wreg(rdev, (0x820), (cg_scratch), false);

 return r;
}

int evergreen_set_uvd_clocks(struct radeon_device *rdev, u32 vclk, u32 dclk)
{

 unsigned fb_div = 0, vclk_div = 0, dclk_div = 0;
 int r;


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x71c), false); tmp_ &= (~(0x01F00000 | 0x3E000000)); tmp_ |= ((((1) << 20) | ((1) << 25)) & ~(~(0x01F00000 | 0x3E000000))); r100_mm_wreg(rdev, (0x71c), (tmp_), false); } while (0);




 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000004); tmp_ |= ((0x00000004) & ~(~0x00000004)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);

 if (!vclk || !dclk) {

  do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000002); tmp_ |= ((0x00000002) & ~(~0x00000002)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);
  return 0;
 }

 r = radeon_uvd_calc_upll_dividers(rdev, vclk, dclk, 125000, 250000,
       16384, 0x03FFFFFF, 0, 128, 5,
       &fb_div, &vclk_div, &dclk_div);
 if (r)
  return r;


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000200); tmp_ |= ((0x00000200) & ~(~0x00000200)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000002); tmp_ |= ((0x00000002) & ~(~0x00000002)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);
 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000002); tmp_ |= ((0) & ~(~0x00000002)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000001); tmp_ |= ((0) & ~(~0x00000001)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);

 ( (__builtin_constant_p(1) && (1)<=5) ? udelay((1)*1000) : ({unsigned long __ms=(1); while (__ms--) udelay(1000);}));

 r = radeon_uvd_send_upll_ctlreq(rdev, 0x718);
 if (r)
  return r;


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000001); tmp_ |= ((0x00000001) & ~(~0x00000001)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x79c), false); tmp_ &= (~0x00000001); tmp_ |= ((0) & ~(~0x00000001)); r100_mm_wreg(rdev, (0x79c), (tmp_), false); } while (0);


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x720), false); tmp_ &= (~0x01FFFFFF); tmp_ |= ((((fb_div) << 0)) & ~(~0x01FFFFFF)); r100_mm_wreg(rdev, (0x720), (tmp_), false); } while (0);


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x003F0000); tmp_ |= ((0) & ~(~0x003F0000)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);

 if (fb_div < 307200)
  do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x854), false); tmp_ &= (~0x00020000); tmp_ |= ((0) & ~(~0x00020000)); r100_mm_wreg(rdev, (0x854), (tmp_), false); } while (0);
 else
  do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x854), false); tmp_ &= (~0x00020000); tmp_ |= ((0x00020000) & ~(~0x00020000)); r100_mm_wreg(rdev, (0x854), (tmp_), false); } while (0);


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x71c), false); tmp_ &= (~(0x0000007F | 0x00007F00)); tmp_ |= ((((vclk_div) << 0) | ((dclk_div) << 8)) & ~(~(0x0000007F | 0x00007F00))); r100_mm_wreg(rdev, (0x71c), (tmp_), false); } while (0);




 ( (__builtin_constant_p(15) && (15)<=5) ? udelay((15)*1000) : ({unsigned long __ms=(15); while (__ms--) udelay(1000);}));


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000001); tmp_ |= ((0) & ~(~0x00000001)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);

 ( (__builtin_constant_p(15) && (15)<=5) ? udelay((15)*1000) : ({unsigned long __ms=(15); while (__ms--) udelay(1000);}));


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x718), false); tmp_ &= (~0x00000004); tmp_ |= ((0) & ~(~0x00000004)); r100_mm_wreg(rdev, (0x718), (tmp_), false); } while (0);

 r = radeon_uvd_send_upll_ctlreq(rdev, 0x718);
 if (r)
  return r;


 do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x71c), false); tmp_ &= (~(0x01F00000 | 0x3E000000)); tmp_ |= ((((2) << 20) | ((2) << 25)) & ~(~(0x01F00000 | 0x3E000000))); r100_mm_wreg(rdev, (0x71c), (tmp_), false); } while (0);



 ( (__builtin_constant_p(100) && (100)<=5) ? udelay((100)*1000) : ({unsigned long __ms=(100); while (__ms--) udelay(1000);}));

 return 0;
}

void evergreen_fix_pci_max_read_req_size(struct radeon_device *rdev)
{
 int readrq;
 u16 v;

 readrq = pcie_get_readrq(rdev->pdev);
 v = ffs(readrq) - 8;



 if ((v == 0) || (v == 6) || (v == 7))
  pcie_set_readrq(rdev->pdev, 512);
}

void dce4_program_fmt(struct drm_encoder *encoder)
{
 struct drm_device *dev = encoder->dev;
 struct radeon_device *rdev = dev->dev_private;
 struct radeon_encoder *radeon_encoder = ({ void *__mptr = (void *)(encoder); do { extern void __compiletime_assert_358(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(encoder)), typeof(((struct radeon_encoder *)0)->base)) && !__builtin_types_compatible_p(typeof(*(encoder)), typeof(void))))) __compiletime_assert_358(); } while (0); ((struct radeon_encoder *)(__mptr - __builtin_offsetof(struct radeon_encoder, base))); });
 struct radeon_crtc *radeon_crtc = ({ void *__mptr = (void *)(encoder->crtc); do { extern void __compiletime_assert_359(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(encoder->crtc)), typeof(((struct radeon_crtc *)0)->base)) && !__builtin_types_compatible_p(typeof(*(encoder->crtc)), typeof(void))))) __compiletime_assert_359(); } while (0); ((struct radeon_crtc *)(__mptr - __builtin_offsetof(struct radeon_crtc, base))); });
 struct drm_connector *connector = radeon_get_connector_for_encoder(encoder);
 int bpc = 0;
 u32 tmp = 0;
 enum radeon_connector_dither dither = RADEON_FMT_DITHER_DISABLE;

 if (connector) {
  struct radeon_connector *radeon_connector = ({ void *__mptr = (void *)(connector); do { extern void __compiletime_assert_360(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(connector)), typeof(((struct radeon_connector *)0)->base)) && !__builtin_types_compatible_p(typeof(*(connector)), typeof(void))))) __compiletime_assert_360(); } while (0); ((struct radeon_connector *)(__mptr - __builtin_offsetof(struct radeon_connector, base))); });
  bpc = radeon_get_monitor_bpc(connector);
  dither = radeon_connector->dither;
 }


 if (radeon_encoder->devices & ((0x1L << 0x00000001 ) | (0x1L << 0x00000005 )))
  return;


 if ((radeon_encoder->encoder_id == 0x15) ||
     (radeon_encoder->encoder_id == 0x16))
  return;

 if (bpc == 0)
  return;

 switch (bpc) {
 case 6:
  if (dither == RADEON_FMT_DITHER_ENABLE)

   tmp |= ((1 << 13) | (1 << 15) |
    (1 << 8));
  else
   tmp |= (1 << 0);
  break;
 case 8:
  if (dither == RADEON_FMT_DITHER_ENABLE)

   tmp |= ((1 << 13) | (1 << 15) |
    (1 << 14) |
    (1 << 8) | (1 << 12));
  else
   tmp |= ((1 << 0) | (1 << 4));
  break;
 case 10:
 default:

  break;
 }

 r100_mm_wreg(rdev, (0x6fc8 + radeon_crtc->crtc_offset), (tmp), false);
}

static bool dce4_is_in_vblank(struct radeon_device *rdev, int crtc)
{
 if (r100_mm_rreg(rdev, (0x6e8c + crtc_offsets[crtc]), false) & (1 << 0))
  return true;
 else
  return false;
}

static bool dce4_is_counter_moving(struct radeon_device *rdev, int crtc)
{
 u32 pos1, pos2;

 pos1 = r100_mm_rreg(rdev, (0x6e90 + crtc_offsets[crtc]), false);
 pos2 = r100_mm_rreg(rdev, (0x6e90 + crtc_offsets[crtc]), false);

 if (pos1 != pos2)
  return true;
 else
  return false;
}
# 1375 "drivers/gpu/drm/radeon/evergreen.c"
void dce4_wait_for_vblank(struct radeon_device *rdev, int crtc)
{
 unsigned i = 0;

 if (crtc >= rdev->num_crtc)
  return;

 if (!(r100_mm_rreg(rdev, (0x6e70 + crtc_offsets[crtc]), false) & (1 << 0)))
  return;




 while (dce4_is_in_vblank(rdev, crtc)) {
  if (i++ % 100 == 0) {
   if (!dce4_is_counter_moving(rdev, crtc))
    break;
  }
 }

 while (!dce4_is_in_vblank(rdev, crtc)) {
  if (i++ % 100 == 0) {
   if (!dce4_is_counter_moving(rdev, crtc))
    break;
  }
 }
}
# 1414 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_page_flip(struct radeon_device *rdev, int crtc_id, u64 crtc_base,
    bool async)
{
 struct radeon_crtc *radeon_crtc = rdev->mode_info.crtcs[crtc_id];
 struct drm_framebuffer *fb = radeon_crtc->base.primary->fb;


 r100_mm_wreg(rdev, (0x6848 + radeon_crtc->crtc_offset), (async ? (1 << 0) : 0), false);


 r100_mm_wreg(rdev, (0x6818 + radeon_crtc->crtc_offset), (fb->pitches[0] / fb->format->cpp[0]), false);


 r100_mm_wreg(rdev, (0x681c + radeon_crtc->crtc_offset), (((u32)(((crtc_base) >> 16) >> 16))), false);

 r100_mm_wreg(rdev, (0x6810 + radeon_crtc->crtc_offset), ((u32)crtc_base), false);


 r100_mm_rreg(rdev, (0x6810 + radeon_crtc->crtc_offset), false);
}
# 1443 "drivers/gpu/drm/radeon/evergreen.c"
bool evergreen_page_flip_pending(struct radeon_device *rdev, int crtc_id)
{
 struct radeon_crtc *radeon_crtc = rdev->mode_info.crtcs[crtc_id];


 return !!(r100_mm_rreg(rdev, (0x6844 + radeon_crtc->crtc_offset), false) &
  (1 << 2));
}


int evergreen_get_temp(struct radeon_device *rdev)
{
 u32 temp, toffset;
 int actual_temp = 0;

 if (rdev->family == CHIP_JUNIPER) {
  toffset = (r100_mm_rreg(rdev, (0x72c), false) & 0x00003FE0) >>
   5;
  temp = (r100_mm_rreg(rdev, (0x760), false) & 0x000003FF) >>
   0;

  if (toffset & 0x100)
   actual_temp = temp / 2 - (0x200 - toffset);
  else
   actual_temp = temp / 2 + toffset;

  actual_temp = actual_temp * 1000;

 } else {
  temp = (r100_mm_rreg(rdev, (0x740), false) & 0x07FF0000) >>
   16;

  if (temp & 0x400)
   actual_temp = -256;
  else if (temp & 0x200)
   actual_temp = 255;
  else if (temp & 0x100) {
   actual_temp = temp & 0x1ff;
   actual_temp |= ~0x1ff;
  } else
   actual_temp = temp & 0xff;

  actual_temp = (actual_temp * 1000) / 2;
 }

 return actual_temp;
}

int sumo_get_temp(struct radeon_device *rdev)
{
 u32 temp = r100_mm_rreg(rdev, (0x678), false) & 0xff;
 int actual_temp = temp - 49;

 return actual_temp * 1000;
}
# 1508 "drivers/gpu/drm/radeon/evergreen.c"
void sumo_pm_init_profile(struct radeon_device *rdev)
{
 int idx;


 rdev->pm.profiles[0].dpms_off_ps_idx = rdev->pm.default_power_state_index;
 rdev->pm.profiles[0].dpms_on_ps_idx = rdev->pm.default_power_state_index;
 rdev->pm.profiles[0].dpms_off_cm_idx = 0;
 rdev->pm.profiles[0].dpms_on_cm_idx = 0;


 if (rdev->flags & RADEON_IS_MOBILITY)
  idx = radeon_pm_get_type_index(rdev, POWER_STATE_TYPE_BATTERY, 0);
 else
  idx = radeon_pm_get_type_index(rdev, POWER_STATE_TYPE_PERFORMANCE, 0);

 rdev->pm.profiles[1].dpms_off_ps_idx = idx;
 rdev->pm.profiles[1].dpms_on_ps_idx = idx;
 rdev->pm.profiles[1].dpms_off_cm_idx = 0;
 rdev->pm.profiles[1].dpms_on_cm_idx = 0;

 rdev->pm.profiles[4].dpms_off_ps_idx = idx;
 rdev->pm.profiles[4].dpms_on_ps_idx = idx;
 rdev->pm.profiles[4].dpms_off_cm_idx = 0;
 rdev->pm.profiles[4].dpms_on_cm_idx = 0;

 rdev->pm.profiles[2].dpms_off_ps_idx = idx;
 rdev->pm.profiles[2].dpms_on_ps_idx = idx;
 rdev->pm.profiles[2].dpms_off_cm_idx = 0;
 rdev->pm.profiles[2].dpms_on_cm_idx = 0;

 rdev->pm.profiles[5].dpms_off_ps_idx = idx;
 rdev->pm.profiles[5].dpms_on_ps_idx = idx;
 rdev->pm.profiles[5].dpms_off_cm_idx = 0;
 rdev->pm.profiles[5].dpms_on_cm_idx = 0;


 idx = radeon_pm_get_type_index(rdev, POWER_STATE_TYPE_PERFORMANCE, 0);
 rdev->pm.profiles[3].dpms_off_ps_idx = idx;
 rdev->pm.profiles[3].dpms_on_ps_idx = idx;
 rdev->pm.profiles[3].dpms_off_cm_idx = 0;
 rdev->pm.profiles[3].dpms_on_cm_idx =
  rdev->pm.power_state[idx].num_clock_modes - 1;

 rdev->pm.profiles[6].dpms_off_ps_idx = idx;
 rdev->pm.profiles[6].dpms_on_ps_idx = idx;
 rdev->pm.profiles[6].dpms_off_cm_idx = 0;
 rdev->pm.profiles[6].dpms_on_cm_idx =
  rdev->pm.power_state[idx].num_clock_modes - 1;
}
# 1568 "drivers/gpu/drm/radeon/evergreen.c"
void btc_pm_init_profile(struct radeon_device *rdev)
{
 int idx;


 rdev->pm.profiles[0].dpms_off_ps_idx = rdev->pm.default_power_state_index;
 rdev->pm.profiles[0].dpms_on_ps_idx = rdev->pm.default_power_state_index;
 rdev->pm.profiles[0].dpms_off_cm_idx = 0;
 rdev->pm.profiles[0].dpms_on_cm_idx = 2;




 if (rdev->flags & RADEON_IS_MOBILITY)
  idx = radeon_pm_get_type_index(rdev, POWER_STATE_TYPE_BATTERY, 0);
 else
  idx = radeon_pm_get_type_index(rdev, POWER_STATE_TYPE_PERFORMANCE, 0);

 rdev->pm.profiles[1].dpms_off_ps_idx = idx;
 rdev->pm.profiles[1].dpms_on_ps_idx = idx;
 rdev->pm.profiles[1].dpms_off_cm_idx = 0;
 rdev->pm.profiles[1].dpms_on_cm_idx = 0;

 rdev->pm.profiles[2].dpms_off_ps_idx = idx;
 rdev->pm.profiles[2].dpms_on_ps_idx = idx;
 rdev->pm.profiles[2].dpms_off_cm_idx = 0;
 rdev->pm.profiles[2].dpms_on_cm_idx = 1;

 rdev->pm.profiles[3].dpms_off_ps_idx = idx;
 rdev->pm.profiles[3].dpms_on_ps_idx = idx;
 rdev->pm.profiles[3].dpms_off_cm_idx = 0;
 rdev->pm.profiles[3].dpms_on_cm_idx = 2;

 rdev->pm.profiles[4].dpms_off_ps_idx = idx;
 rdev->pm.profiles[4].dpms_on_ps_idx = idx;
 rdev->pm.profiles[4].dpms_off_cm_idx = 0;
 rdev->pm.profiles[4].dpms_on_cm_idx = 0;

 rdev->pm.profiles[5].dpms_off_ps_idx = idx;
 rdev->pm.profiles[5].dpms_on_ps_idx = idx;
 rdev->pm.profiles[5].dpms_off_cm_idx = 0;
 rdev->pm.profiles[5].dpms_on_cm_idx = 1;

 rdev->pm.profiles[6].dpms_off_ps_idx = idx;
 rdev->pm.profiles[6].dpms_on_ps_idx = idx;
 rdev->pm.profiles[6].dpms_off_cm_idx = 0;
 rdev->pm.profiles[6].dpms_on_cm_idx = 2;
}
# 1625 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_pm_misc(struct radeon_device *rdev)
{
 int req_ps_idx = rdev->pm.requested_power_state_index;
 int req_cm_idx = rdev->pm.requested_clock_mode_index;
 struct radeon_power_state *ps = &rdev->pm.power_state[req_ps_idx];
 struct radeon_voltage *voltage = &ps->clock_info[req_cm_idx].voltage;

 if (voltage->type == VOLTAGE_SW) {

  if ((voltage->voltage & 0xff00) == 0xff00)
   return;
  if (voltage->voltage && (voltage->voltage != rdev->pm.current_vddc)) {
   radeon_atom_set_voltage(rdev, voltage->voltage, 1);
   rdev->pm.current_vddc = voltage->voltage;
   __drm_dbg(DRM_UT_CORE, "Setting: vddc: %d\n", voltage->voltage);
  }





  if ((rdev->pm.pm_method == PM_METHOD_PROFILE) &&
      (rdev->family >= CHIP_BARTS) &&
      rdev->pm.active_crtc_count &&
      ((rdev->pm.profile_index == 5) ||
       (rdev->pm.profile_index == 4)))
   voltage = &rdev->pm.power_state[req_ps_idx].
    clock_info[rdev->pm.profiles[6].dpms_on_cm_idx].voltage;


  if ((voltage->vddci & 0xff00) == 0xff00)
   return;
  if (voltage->vddci && (voltage->vddci != rdev->pm.current_vddci)) {
   radeon_atom_set_voltage(rdev, voltage->vddci, 4);
   rdev->pm.current_vddci = voltage->vddci;
   __drm_dbg(DRM_UT_CORE, "Setting: vddci: %d\n", voltage->vddci);
  }
 }
}
# 1672 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_pm_prepare(struct radeon_device *rdev)
{
 struct drm_device *ddev = rdev->ddev;
 struct drm_crtc *crtc;
 struct radeon_crtc *radeon_crtc;
 u32 tmp;


 for (crtc = ({ void *__mptr = (void *)((&ddev->mode_config.crtc_list)->next); do { extern void __compiletime_assert_361(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((&ddev->mode_config.crtc_list)->next)), typeof(((typeof(*crtc) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((&ddev->mode_config.crtc_list)->next)), typeof(void))))) __compiletime_assert_361(); } while (0); ((typeof(*crtc) *)(__mptr - __builtin_offsetof(typeof(*crtc), head))); }); !(&crtc->head == (&ddev->mode_config.crtc_list)); crtc = ({ void *__mptr = (void *)((crtc)->head.next); do { extern void __compiletime_assert_362(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((crtc)->head.next)), typeof(((typeof(*(crtc)) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((crtc)->head.next)), typeof(void))))) __compiletime_assert_362(); } while (0); ((typeof(*(crtc)) *)(__mptr - __builtin_offsetof(typeof(*(crtc)), head))); })) {
  radeon_crtc = ({ void *__mptr = (void *)(crtc); do { extern void __compiletime_assert_363(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(crtc)), typeof(((struct radeon_crtc *)0)->base)) && !__builtin_types_compatible_p(typeof(*(crtc)), typeof(void))))) __compiletime_assert_363(); } while (0); ((struct radeon_crtc *)(__mptr - __builtin_offsetof(struct radeon_crtc, base))); });
  if (radeon_crtc->enabled) {
   tmp = r100_mm_rreg(rdev, (0x6e70 + radeon_crtc->crtc_offset), false);
   tmp |= (1 << 24);
   r100_mm_wreg(rdev, (0x6e70 + radeon_crtc->crtc_offset), (tmp), false);
  }
 }
}
# 1697 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_pm_finish(struct radeon_device *rdev)
{
 struct drm_device *ddev = rdev->ddev;
 struct drm_crtc *crtc;
 struct radeon_crtc *radeon_crtc;
 u32 tmp;


 for (crtc = ({ void *__mptr = (void *)((&ddev->mode_config.crtc_list)->next); do { extern void __compiletime_assert_364(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((&ddev->mode_config.crtc_list)->next)), typeof(((typeof(*crtc) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((&ddev->mode_config.crtc_list)->next)), typeof(void))))) __compiletime_assert_364(); } while (0); ((typeof(*crtc) *)(__mptr - __builtin_offsetof(typeof(*crtc), head))); }); !(&crtc->head == (&ddev->mode_config.crtc_list)); crtc = ({ void *__mptr = (void *)((crtc)->head.next); do { extern void __compiletime_assert_365(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((crtc)->head.next)), typeof(((typeof(*(crtc)) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((crtc)->head.next)), typeof(void))))) __compiletime_assert_365(); } while (0); ((typeof(*(crtc)) *)(__mptr - __builtin_offsetof(typeof(*(crtc)), head))); })) {
  radeon_crtc = ({ void *__mptr = (void *)(crtc); do { extern void __compiletime_assert_366(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(crtc)), typeof(((struct radeon_crtc *)0)->base)) && !__builtin_types_compatible_p(typeof(*(crtc)), typeof(void))))) __compiletime_assert_366(); } while (0); ((struct radeon_crtc *)(__mptr - __builtin_offsetof(struct radeon_crtc, base))); });
  if (radeon_crtc->enabled) {
   tmp = r100_mm_rreg(rdev, (0x6e70 + radeon_crtc->crtc_offset), false);
   tmp &= ~(1 << 24);
   r100_mm_wreg(rdev, (0x6e70 + radeon_crtc->crtc_offset), (tmp), false);
  }
 }
}
# 1724 "drivers/gpu/drm/radeon/evergreen.c"
bool evergreen_hpd_sense(struct radeon_device *rdev, enum radeon_hpd_id hpd)
{
 if (hpd == RADEON_HPD_NONE)
  return false;

 return !!(r100_mm_rreg(rdev, ((0x601c + (hpd * 0xc))), false) & (1 << 1));
}
# 1740 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_hpd_set_polarity(struct radeon_device *rdev,
    enum radeon_hpd_id hpd)
{
 bool connected = evergreen_hpd_sense(rdev, hpd);

 if (hpd == RADEON_HPD_NONE)
  return;

 if (connected)
  do { uint32_t tmp_ = r100_mm_rreg(rdev, ((0x6020 + (hpd * 0xc))), false); tmp_ &= (~(1 << 8)); tmp_ |= ((0) & ~(~(1 << 8))); r100_mm_wreg(rdev, ((0x6020 + (hpd * 0xc))), (tmp_), false); } while (0);
 else
  do { uint32_t tmp_ = r100_mm_rreg(rdev, ((0x6020 + (hpd * 0xc))), false); tmp_ &= (~((1 << 8))); tmp_ |= (((1 << 8)) & ~(~((1 << 8)))); r100_mm_wreg(rdev, ((0x6020 + (hpd * 0xc))), (tmp_), false); } while (0);
}
# 1762 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_hpd_init(struct radeon_device *rdev)
{
 struct drm_device *dev = rdev->ddev;
 struct drm_connector *connector;
 unsigned enabled = 0;
 u32 tmp = ((0x9c4) << 0) |
  ((0xfa) << 16) | (1 << 28);

 for (connector = ({ void *__mptr = (void *)((&dev->mode_config.connector_list)->next); do { extern void __compiletime_assert_367(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((&dev->mode_config.connector_list)->next)), typeof(((typeof(*connector) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((&dev->mode_config.connector_list)->next)), typeof(void))))) __compiletime_assert_367(); } while (0); ((typeof(*connector) *)(__mptr - __builtin_offsetof(typeof(*connector), head))); }); !(&connector->head == (&dev->mode_config.connector_list)); connector = ({ void *__mptr = (void *)((connector)->head.next); do { extern void __compiletime_assert_368(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((connector)->head.next)), typeof(((typeof(*(connector)) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((connector)->head.next)), typeof(void))))) __compiletime_assert_368(); } while (0); ((typeof(*(connector)) *)(__mptr - __builtin_offsetof(typeof(*(connector)), head))); })) {
  enum radeon_hpd_id hpd =
   ({ void *__mptr = (void *)(connector); do { extern void __compiletime_assert_369(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(connector)), typeof(((struct radeon_connector *)0)->base)) && !__builtin_types_compatible_p(typeof(*(connector)), typeof(void))))) __compiletime_assert_369(); } while (0); ((struct radeon_connector *)(__mptr - __builtin_offsetof(struct radeon_connector, base))); })->hpd.hpd;

  if (connector->connector_type == 14 ||
      connector->connector_type == 7) {





   continue;
  }

  if (hpd == RADEON_HPD_NONE)
   continue;

  r100_mm_wreg(rdev, ((0x6024 + (hpd * 0xc))), (tmp), false);
  enabled |= 1 << hpd;

  (rdev)->asic->hpd.set_polarity((rdev), (hpd));
 }
 radeon_irq_kms_enable_hpd(rdev, enabled);
}
# 1803 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_hpd_fini(struct radeon_device *rdev)
{
 struct drm_device *dev = rdev->ddev;
 struct drm_connector *connector;
 unsigned disabled = 0;

 for (connector = ({ void *__mptr = (void *)((&dev->mode_config.connector_list)->next); do { extern void __compiletime_assert_370(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((&dev->mode_config.connector_list)->next)), typeof(((typeof(*connector) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((&dev->mode_config.connector_list)->next)), typeof(void))))) __compiletime_assert_370(); } while (0); ((typeof(*connector) *)(__mptr - __builtin_offsetof(typeof(*connector), head))); }); !(&connector->head == (&dev->mode_config.connector_list)); connector = ({ void *__mptr = (void *)((connector)->head.next); do { extern void __compiletime_assert_371(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((connector)->head.next)), typeof(((typeof(*(connector)) *)0)->head)) && !__builtin_types_compatible_p(typeof(*((connector)->head.next)), typeof(void))))) __compiletime_assert_371(); } while (0); ((typeof(*(connector)) *)(__mptr - __builtin_offsetof(typeof(*(connector)), head))); })) {
  enum radeon_hpd_id hpd =
   ({ void *__mptr = (void *)(connector); do { extern void __compiletime_assert_372(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(connector)), typeof(((struct radeon_connector *)0)->base)) && !__builtin_types_compatible_p(typeof(*(connector)), typeof(void))))) __compiletime_assert_372(); } while (0); ((struct radeon_connector *)(__mptr - __builtin_offsetof(struct radeon_connector, base))); })->hpd.hpd;

  if (hpd == RADEON_HPD_NONE)
   continue;

  r100_mm_wreg(rdev, ((0x6024 + (hpd * 0xc))), (0), false);
  disabled |= 1 << hpd;
 }
 radeon_irq_kms_disable_hpd(rdev, disabled);
}



static u32 evergreen_line_buffer_adjust(struct radeon_device *rdev,
     struct radeon_crtc *radeon_crtc,
     struct drm_display_mode *mode,
     struct drm_display_mode *other_mode)
{
 u32 tmp, buffer_alloc, i;
 u32 pipe_offset = radeon_crtc->crtc_id * 0x20;
# 1852 "drivers/gpu/drm/radeon/evergreen.c"
 if (radeon_crtc->base.enabled && mode) {
  if (other_mode) {
   tmp = 0;
   buffer_alloc = 1;
  } else {
   tmp = 2;
   buffer_alloc = 2;
  }
 } else {
  tmp = 0;
  buffer_alloc = 0;
 }


 if (radeon_crtc->crtc_id % 2)
  tmp += 4;
 r100_mm_wreg(rdev, (0x6b0c + radeon_crtc->crtc_offset), (tmp), false);

 if (((rdev->family >= CHIP_PALM) && (rdev->flags & RADEON_IS_IGP)) || ((rdev->family >= CHIP_BARTS))) {
  r100_mm_wreg(rdev, (0x0ca0 + pipe_offset), (((buffer_alloc) << 0)), false);

  for (i = 0; i < rdev->usec_timeout; i++) {
   if (r100_mm_rreg(rdev, (0x0ca0 + pipe_offset), false) &
       (1 << 4))
    break;
   udelay(1);
  }
 }

 if (radeon_crtc->base.enabled && mode) {
  switch (tmp) {
  case 0:
  case 4:
  default:
   if (((rdev->family >= CHIP_BARTS)))
    return 4096 * 2;
   else
    return 3840 * 2;
  case 1:
  case 5:
   if (((rdev->family >= CHIP_BARTS)))
    return 6144 * 2;
   else
    return 5760 * 2;
  case 2:
  case 6:
   if (((rdev->family >= CHIP_BARTS)))
    return 8192 * 2;
   else
    return 7680 * 2;
  case 3:
  case 7:
   if (((rdev->family >= CHIP_BARTS)))
    return 2048 * 2;
   else
    return 1920 * 2;
  }
 }


 return 0;
}

u32 evergreen_get_number_of_dram_channels(struct radeon_device *rdev)
{
 u32 tmp = r100_mm_rreg(rdev, (0x2004), false);

 switch ((tmp & 0x00003000) >> 12) {
 case 0:
 default:
  return 1;
 case 1:
  return 2;
 case 2:
  return 4;
 case 3:
  return 8;
 }
}

struct evergreen_wm_params {
 u32 dram_channels;
 u32 yclk;
 u32 sclk;
 u32 disp_clk;
 u32 src_width;
 u32 active_time;
 u32 blank_time;
 bool interlaced;
 fixed20_12 vsc;
 u32 num_heads;
 u32 bytes_per_pixel;
 u32 lb_size;
 u32 vtaps;
};

static u32 evergreen_dram_bandwidth(struct evergreen_wm_params *wm)
{

 fixed20_12 dram_efficiency;
 fixed20_12 yclk, dram_channels, bandwidth;
 fixed20_12 a;

 a.full = (u32)(((1000) << 12));
 yclk.full = (u32)(((wm->yclk) << 12));
 yclk.full = dfixed_div(yclk, a);
 dram_channels.full = (u32)(((wm->dram_channels * 4) << 12));
 a.full = (u32)(((10) << 12));
 dram_efficiency.full = (u32)(((7) << 12));
 dram_efficiency.full = dfixed_div(dram_efficiency, a);
 bandwidth.full = ((u64)((u64)(dram_channels).full * (yclk).full + 2048) >> 12);
 bandwidth.full = ((u64)((u64)(bandwidth).full * (dram_efficiency).full + 2048) >> 12);

 return ((bandwidth).full >> 12);
}

static u32 evergreen_dram_bandwidth_for_display(struct evergreen_wm_params *wm)
{

 fixed20_12 disp_dram_allocation;
 fixed20_12 yclk, dram_channels, bandwidth;
 fixed20_12 a;

 a.full = (u32)(((1000) << 12));
 yclk.full = (u32)(((wm->yclk) << 12));
 yclk.full = dfixed_div(yclk, a);
 dram_channels.full = (u32)(((wm->dram_channels * 4) << 12));
 a.full = (u32)(((10) << 12));
 disp_dram_allocation.full = (u32)(((3) << 12));
 disp_dram_allocation.full = dfixed_div(disp_dram_allocation, a);
 bandwidth.full = ((u64)((u64)(dram_channels).full * (yclk).full + 2048) >> 12);
 bandwidth.full = ((u64)((u64)(bandwidth).full * (disp_dram_allocation).full + 2048) >> 12);

 return ((bandwidth).full >> 12);
}

static u32 evergreen_data_return_bandwidth(struct evergreen_wm_params *wm)
{

 fixed20_12 return_efficiency;
 fixed20_12 sclk, bandwidth;
 fixed20_12 a;

 a.full = (u32)(((1000) << 12));
 sclk.full = (u32)(((wm->sclk) << 12));
 sclk.full = dfixed_div(sclk, a);
 a.full = (u32)(((10) << 12));
 return_efficiency.full = (u32)(((8) << 12));
 return_efficiency.full = dfixed_div(return_efficiency, a);
 a.full = (u32)(((32) << 12));
 bandwidth.full = ((u64)((u64)(a).full * (sclk).full + 2048) >> 12);
 bandwidth.full = ((u64)((u64)(bandwidth).full * (return_efficiency).full + 2048) >> 12);

 return ((bandwidth).full >> 12);
}

static u32 evergreen_dmif_request_bandwidth(struct evergreen_wm_params *wm)
{

 fixed20_12 disp_clk_request_efficiency;
 fixed20_12 disp_clk, bandwidth;
 fixed20_12 a;

 a.full = (u32)(((1000) << 12));
 disp_clk.full = (u32)(((wm->disp_clk) << 12));
 disp_clk.full = dfixed_div(disp_clk, a);
 a.full = (u32)(((10) << 12));
 disp_clk_request_efficiency.full = (u32)(((8) << 12));
 disp_clk_request_efficiency.full = dfixed_div(disp_clk_request_efficiency, a);
 a.full = (u32)(((32) << 12));
 bandwidth.full = ((u64)((u64)(a).full * (disp_clk).full + 2048) >> 12);
 bandwidth.full = ((u64)((u64)(bandwidth).full * (disp_clk_request_efficiency).full + 2048) >> 12);

 return ((bandwidth).full >> 12);
}

static u32 evergreen_available_bandwidth(struct evergreen_wm_params *wm)
{

 u32 dram_bandwidth = evergreen_dram_bandwidth(wm);
 u32 data_return_bandwidth = evergreen_data_return_bandwidth(wm);
 u32 dmif_req_bandwidth = evergreen_dmif_request_bandwidth(wm);

 return __builtin_choose_expr(((!!(sizeof((typeof(dram_bandwidth) *)1 == (typeof(__builtin_choose_expr(((!!(sizeof((typeof(data_return_bandwidth) *)1 == (typeof(dmif_req_bandwidth) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(data_return_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(dmif_req_bandwidth) * 0l)) : (int *)8))))), ((data_return_bandwidth) < (dmif_req_bandwidth) ? (data_return_bandwidth) : (dmif_req_bandwidth)), ({ typeof(data_return_bandwidth) __UNIQUE_ID___x373 = (data_return_bandwidth); typeof(dmif_req_bandwidth) __UNIQUE_ID___y374 = (dmif_req_bandwidth); ((__UNIQUE_ID___x373) < (__UNIQUE_ID___y374) ? (__UNIQUE_ID___x373) : (__UNIQUE_ID___y374)); }))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(dram_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(__builtin_choose_expr(((!!(sizeof((typeof(data_return_bandwidth) *)1 == (typeof(dmif_req_bandwidth) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(data_return_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(dmif_req_bandwidth) * 0l)) : (int *)8))))), ((data_return_bandwidth) < (dmif_req_bandwidth) ? (data_return_bandwidth) : (dmif_req_bandwidth)), ({ typeof(data_return_bandwidth) __UNIQUE_ID___x373 = (data_return_bandwidth); typeof(dmif_req_bandwidth) __UNIQUE_ID___y374 = (dmif_req_bandwidth); ((__UNIQUE_ID___x373) < (__UNIQUE_ID___y374) ? (__UNIQUE_ID___x373) : (__UNIQUE_ID___y374)); }))) * 0l)) : (int *)8))))), ((dram_bandwidth) < (__builtin_choose_expr(((!!(sizeof((typeof(data_return_bandwidth) *)1 == (typeof(dmif_req_bandwidth) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(data_return_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(dmif_req_bandwidth) * 0l)) : (int *)8))))), ((data_return_bandwidth) < (dmif_req_bandwidth) ? (data_return_bandwidth) : (dmif_req_bandwidth)), ({ typeof(data_return_bandwidth) __UNIQUE_ID___x373 = (data_return_bandwidth); typeof(dmif_req_bandwidth) __UNIQUE_ID___y374 = (dmif_req_bandwidth); ((__UNIQUE_ID___x373) < (__UNIQUE_ID___y374) ? (__UNIQUE_ID___x373) : (__UNIQUE_ID___y374)); }))) ? (dram_bandwidth) : (__builtin_choose_expr(((!!(sizeof((typeof(data_return_bandwidth) *)1 == (typeof(dmif_req_bandwidth) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(data_return_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(dmif_req_bandwidth) * 0l)) : (int *)8))))), ((data_return_bandwidth) < (dmif_req_bandwidth) ? (data_return_bandwidth) : (dmif_req_bandwidth)), ({ typeof(data_return_bandwidth) __UNIQUE_ID___x373 = (data_return_bandwidth); typeof(dmif_req_bandwidth) __UNIQUE_ID___y374 = (dmif_req_bandwidth); ((__UNIQUE_ID___x373) < (__UNIQUE_ID___y374) ? (__UNIQUE_ID___x373) : (__UNIQUE_ID___y374)); })))), ({ typeof(dram_bandwidth) __UNIQUE_ID___x375 = (dram_bandwidth); typeof(__builtin_choose_expr(((!!(sizeof((typeof(data_return_bandwidth) *)1 == (typeof(dmif_req_bandwidth) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(data_return_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(dmif_req_bandwidth) * 0l)) : (int *)8))))), ((data_return_bandwidth) < (dmif_req_bandwidth) ? (data_return_bandwidth) : (dmif_req_bandwidth)), ({ typeof(data_return_bandwidth) __UNIQUE_ID___x373 = (data_return_bandwidth); typeof(dmif_req_bandwidth) __UNIQUE_ID___y374 = (dmif_req_bandwidth); ((__UNIQUE_ID___x373) < (__UNIQUE_ID___y374) ? (__UNIQUE_ID___x373) : (__UNIQUE_ID___y374)); }))) __UNIQUE_ID___y376 = (__builtin_choose_expr(((!!(sizeof((typeof(data_return_bandwidth) *)1 == (typeof(dmif_req_bandwidth) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(data_return_bandwidth) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(dmif_req_bandwidth) * 0l)) : (int *)8))))), ((data_return_bandwidth) < (dmif_req_bandwidth) ? (data_return_bandwidth) : (dmif_req_bandwidth)), ({ typeof(data_return_bandwidth) __UNIQUE_ID___x373 = (data_return_bandwidth); typeof(dmif_req_bandwidth) __UNIQUE_ID___y374 = (dmif_req_bandwidth); ((__UNIQUE_ID___x373) < (__UNIQUE_ID___y374) ? (__UNIQUE_ID___x373) : (__UNIQUE_ID___y374)); }))); ((__UNIQUE_ID___x375) < (__UNIQUE_ID___y376) ? (__UNIQUE_ID___x375) : (__UNIQUE_ID___y376)); }));
}

static u32 evergreen_average_bandwidth(struct evergreen_wm_params *wm)
{




 fixed20_12 bpp;
 fixed20_12 line_time;
 fixed20_12 src_width;
 fixed20_12 bandwidth;
 fixed20_12 a;

 a.full = (u32)(((1000) << 12));
 line_time.full = (u32)(((wm->active_time + wm->blank_time) << 12));
 line_time.full = dfixed_div(line_time, a);
 bpp.full = (u32)(((wm->bytes_per_pixel) << 12));
 src_width.full = (u32)(((wm->src_width) << 12));
 bandwidth.full = ((u64)((u64)(src_width).full * (bpp).full + 2048) >> 12);
 bandwidth.full = ((u64)((u64)(bandwidth).full * (wm->vsc).full + 2048) >> 12);
 bandwidth.full = dfixed_div(bandwidth, line_time);

 return ((bandwidth).full >> 12);
}

static u32 evergreen_latency_watermark(struct evergreen_wm_params *wm)
{

 u32 mc_latency = 2000;
 u32 available_bandwidth = evergreen_available_bandwidth(wm);
 u32 worst_chunk_return_time = (512 * 8 * 1000) / available_bandwidth;
 u32 cursor_line_pair_return_time = (128 * 4 * 1000) / available_bandwidth;
 u32 dc_latency = 40000000 / wm->disp_clk;
 u32 other_heads_data_return_time = ((wm->num_heads + 1) * worst_chunk_return_time) +
  (wm->num_heads * cursor_line_pair_return_time);
 u32 latency = mc_latency + other_heads_data_return_time + dc_latency;
 u32 max_src_lines_per_dst_line, lb_fill_bw, line_fill_time;
 fixed20_12 a, b, c;

 if (wm->num_heads == 0)
  return 0;

 a.full = (u32)(((2) << 12));
 b.full = (u32)(((1) << 12));
 if ((wm->vsc.full > a.full) ||
     ((wm->vsc.full > b.full) && (wm->vtaps >= 3)) ||
     (wm->vtaps >= 5) ||
     ((wm->vsc.full >= a.full) && wm->interlaced))
  max_src_lines_per_dst_line = 4;
 else
  max_src_lines_per_dst_line = 2;

 a.full = (u32)(((available_bandwidth) << 12));
 b.full = (u32)(((wm->num_heads) << 12));
 a.full = dfixed_div(a, b);

 lb_fill_bw = __builtin_choose_expr(((!!(sizeof((typeof(((a).full >> 12)) *)1 == (typeof(wm->disp_clk * wm->bytes_per_pixel / 1000) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((a).full >> 12)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(wm->disp_clk * wm->bytes_per_pixel / 1000) * 0l)) : (int *)8))))), ((((a).full >> 12)) < (wm->disp_clk * wm->bytes_per_pixel / 1000) ? (((a).full >> 12)) : (wm->disp_clk * wm->bytes_per_pixel / 1000)), ({ typeof(((a).full >> 12)) __UNIQUE_ID___x377 = (((a).full >> 12)); typeof(wm->disp_clk * wm->bytes_per_pixel / 1000) __UNIQUE_ID___y378 = (wm->disp_clk * wm->bytes_per_pixel / 1000); ((__UNIQUE_ID___x377) < (__UNIQUE_ID___y378) ? (__UNIQUE_ID___x377) : (__UNIQUE_ID___y378)); }));

 a.full = (u32)(((max_src_lines_per_dst_line * wm->src_width * wm->bytes_per_pixel) << 12));
 b.full = (u32)(((1000) << 12));
 c.full = (u32)(((lb_fill_bw) << 12));
 b.full = dfixed_div(c, b);
 a.full = dfixed_div(a, b);
 line_fill_time = ((a).full >> 12);

 if (line_fill_time < wm->active_time)
  return latency;
 else
  return latency + (line_fill_time - wm->active_time);

}

static bool evergreen_average_bandwidth_vs_dram_bandwidth_for_display(struct evergreen_wm_params *wm)
{
 if (evergreen_average_bandwidth(wm) <=
     (evergreen_dram_bandwidth_for_display(wm) / wm->num_heads))
  return true;
 else
  return false;
};

static bool evergreen_average_bandwidth_vs_available_bandwidth(struct evergreen_wm_params *wm)
{
 if (evergreen_average_bandwidth(wm) <=
     (evergreen_available_bandwidth(wm) / wm->num_heads))
  return true;
 else
  return false;
};

static bool evergreen_check_latency_hiding(struct evergreen_wm_params *wm)
{
 u32 lb_partitions = wm->lb_size / wm->src_width;
 u32 line_time = wm->active_time + wm->blank_time;
 u32 latency_tolerant_lines;
 u32 latency_hiding;
 fixed20_12 a;

 a.full = (u32)(((1) << 12));
 if (wm->vsc.full > a.full)
  latency_tolerant_lines = 1;
 else {
  if (lb_partitions <= (wm->vtaps + 1))
   latency_tolerant_lines = 1;
  else
   latency_tolerant_lines = 2;
 }

 latency_hiding = (latency_tolerant_lines * line_time + wm->blank_time);

 if (evergreen_latency_watermark(wm) <= latency_hiding)
  return true;
 else
  return false;
}

static void evergreen_program_watermarks(struct radeon_device *rdev,
      struct radeon_crtc *radeon_crtc,
      u32 lb_size, u32 num_heads)
{
 struct drm_display_mode *mode = &radeon_crtc->base.mode;
 struct evergreen_wm_params wm_low, wm_high;
 u32 dram_channels;
 u32 active_time;
 u32 line_time = 0;
 u32 latency_watermark_a = 0, latency_watermark_b = 0;
 u32 priority_a_mark = 0, priority_b_mark = 0;
 u32 priority_a_cnt = (1 << 16);
 u32 priority_b_cnt = (1 << 16);
 u32 pipe_offset = radeon_crtc->crtc_id * 16;
 u32 tmp, arb_control3;
 fixed20_12 a, b, c;

 if (radeon_crtc->base.enabled && num_heads && mode) {
  active_time = (u32) div_u64((u64)mode->crtc_hdisplay * 1000000,
         (u32)mode->clock);
  line_time = (u32) div_u64((u64)mode->crtc_htotal * 1000000,
       (u32)mode->clock);
  line_time = __builtin_choose_expr(((!!(sizeof((typeof(line_time) *)1 == (typeof((u32)65535) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(line_time) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((u32)65535) * 0l)) : (int *)8))))), ((line_time) < ((u32)65535) ? (line_time) : ((u32)65535)), ({ typeof(line_time) __UNIQUE_ID___x379 = (line_time); typeof((u32)65535) __UNIQUE_ID___y380 = ((u32)65535); ((__UNIQUE_ID___x379) < (__UNIQUE_ID___y380) ? (__UNIQUE_ID___x379) : (__UNIQUE_ID___y380)); }));
  priority_a_cnt = 0;
  priority_b_cnt = 0;
  dram_channels = evergreen_get_number_of_dram_channels(rdev);


  if ((rdev->pm.pm_method == PM_METHOD_DPM) && rdev->pm.dpm_enabled) {
   wm_high.yclk =
    rdev->asic->dpm.get_mclk((rdev), (false)) * 10;
   wm_high.sclk =
    rdev->asic->dpm.get_sclk((rdev), (false)) * 10;
  } else {
   wm_high.yclk = rdev->pm.current_mclk * 10;
   wm_high.sclk = rdev->pm.current_sclk * 10;
  }

  wm_high.disp_clk = mode->clock;
  wm_high.src_width = mode->crtc_hdisplay;
  wm_high.active_time = active_time;
  wm_high.blank_time = line_time - wm_high.active_time;
  wm_high.interlaced = false;
  if (mode->flags & (1<<4))
   wm_high.interlaced = true;
  wm_high.vsc = radeon_crtc->vsc;
  wm_high.vtaps = 1;
  if (radeon_crtc->rmx_type != RMX_OFF)
   wm_high.vtaps = 2;
  wm_high.bytes_per_pixel = 4;
  wm_high.lb_size = lb_size;
  wm_high.dram_channels = dram_channels;
  wm_high.num_heads = num_heads;


  if ((rdev->pm.pm_method == PM_METHOD_DPM) && rdev->pm.dpm_enabled) {
   wm_low.yclk =
    rdev->asic->dpm.get_mclk((rdev), (true)) * 10;
   wm_low.sclk =
    rdev->asic->dpm.get_sclk((rdev), (true)) * 10;
  } else {
   wm_low.yclk = rdev->pm.current_mclk * 10;
   wm_low.sclk = rdev->pm.current_sclk * 10;
  }

  wm_low.disp_clk = mode->clock;
  wm_low.src_width = mode->crtc_hdisplay;
  wm_low.active_time = active_time;
  wm_low.blank_time = line_time - wm_low.active_time;
  wm_low.interlaced = false;
  if (mode->flags & (1<<4))
   wm_low.interlaced = true;
  wm_low.vsc = radeon_crtc->vsc;
  wm_low.vtaps = 1;
  if (radeon_crtc->rmx_type != RMX_OFF)
   wm_low.vtaps = 2;
  wm_low.bytes_per_pixel = 4;
  wm_low.lb_size = lb_size;
  wm_low.dram_channels = dram_channels;
  wm_low.num_heads = num_heads;


  latency_watermark_a = __builtin_choose_expr(((!!(sizeof((typeof(evergreen_latency_watermark(&wm_high)) *)1 == (typeof((u32)65535) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(evergreen_latency_watermark(&wm_high)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((u32)65535) * 0l)) : (int *)8))))), ((evergreen_latency_watermark(&wm_high)) < ((u32)65535) ? (evergreen_latency_watermark(&wm_high)) : ((u32)65535)), ({ typeof(evergreen_latency_watermark(&wm_high)) __UNIQUE_ID___x381 = (evergreen_latency_watermark(&wm_high)); typeof((u32)65535) __UNIQUE_ID___y382 = ((u32)65535); ((__UNIQUE_ID___x381) < (__UNIQUE_ID___y382) ? (__UNIQUE_ID___x381) : (__UNIQUE_ID___y382)); }));

  latency_watermark_b = __builtin_choose_expr(((!!(sizeof((typeof(evergreen_latency_watermark(&wm_low)) *)1 == (typeof((u32)65535) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(evergreen_latency_watermark(&wm_low)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((u32)65535) * 0l)) : (int *)8))))), ((evergreen_latency_watermark(&wm_low)) < ((u32)65535) ? (evergreen_latency_watermark(&wm_low)) : ((u32)65535)), ({ typeof(evergreen_latency_watermark(&wm_low)) __UNIQUE_ID___x383 = (evergreen_latency_watermark(&wm_low)); typeof((u32)65535) __UNIQUE_ID___y384 = ((u32)65535); ((__UNIQUE_ID___x383) < (__UNIQUE_ID___y384) ? (__UNIQUE_ID___x383) : (__UNIQUE_ID___y384)); }));



  if (!evergreen_average_bandwidth_vs_dram_bandwidth_for_display(&wm_high) ||
      !evergreen_average_bandwidth_vs_available_bandwidth(&wm_high) ||
      !evergreen_check_latency_hiding(&wm_high) ||
      (rdev->disp_priority == 2)) {
   __drm_dbg(DRM_UT_KMS, "force priority a to high\n");
   priority_a_cnt |= (1 << 20);
  }
  if (!evergreen_average_bandwidth_vs_dram_bandwidth_for_display(&wm_low) ||
      !evergreen_average_bandwidth_vs_available_bandwidth(&wm_low) ||
      !evergreen_check_latency_hiding(&wm_low) ||
      (rdev->disp_priority == 2)) {
   __drm_dbg(DRM_UT_KMS, "force priority b to high\n");
   priority_b_cnt |= (1 << 20);
  }

  a.full = (u32)(((1000) << 12));
  b.full = (u32)(((mode->clock) << 12));
  b.full = dfixed_div(b, a);
  c.full = (u32)(((latency_watermark_a) << 12));
  c.full = ((u64)((u64)(c).full * (b).full + 2048) >> 12);
  c.full = ((u64)((u64)(c).full * (radeon_crtc->hsc).full + 2048) >> 12);
  c.full = dfixed_div(c, a);
  a.full = (u32)(((16) << 12));
  c.full = dfixed_div(c, a);
  priority_a_mark = ((c).full >> 12);
  priority_a_cnt |= priority_a_mark & 0x7fff;

  a.full = (u32)(((1000) << 12));
  b.full = (u32)(((mode->clock) << 12));
  b.full = dfixed_div(b, a);
  c.full = (u32)(((latency_watermark_b) << 12));
  c.full = ((u64)((u64)(c).full * (b).full + 2048) >> 12);
  c.full = ((u64)((u64)(c).full * (radeon_crtc->hsc).full + 2048) >> 12);
  c.full = dfixed_div(c, a);
  a.full = (u32)(((16) << 12));
  c.full = dfixed_div(c, a);
  priority_b_mark = ((c).full >> 12);
  priority_b_cnt |= priority_b_mark & 0x7fff;


  radeon_crtc->lb_vblank_lead_lines = (((lb_size) + (mode->crtc_hdisplay) - 1) / (mode->crtc_hdisplay));
 }


 arb_control3 = r100_mm_rreg(rdev, (0x0bf0 + pipe_offset), false);
 tmp = arb_control3;
 tmp &= ~((3) << 16);
 tmp |= ((1) << 16);
 r100_mm_wreg(rdev, (0x0bf0 + pipe_offset), (tmp), false);
 r100_mm_wreg(rdev, (0x0bf4 + pipe_offset), ((((latency_watermark_a) << 0) | ((line_time) << 16))), false);



 tmp = r100_mm_rreg(rdev, (0x0bf0 + pipe_offset), false);
 tmp &= ~((3) << 16);
 tmp |= ((2) << 16);
 r100_mm_wreg(rdev, (0x0bf0 + pipe_offset), (tmp), false);
 r100_mm_wreg(rdev, (0x0bf4 + pipe_offset), ((((latency_watermark_b) << 0) | ((line_time) << 16))), false);



 r100_mm_wreg(rdev, (0x0bf0 + pipe_offset), (arb_control3), false);


 r100_mm_wreg(rdev, (0x6b18 + radeon_crtc->crtc_offset), (priority_a_cnt), false);
 r100_mm_wreg(rdev, (0x6b1c + radeon_crtc->crtc_offset), (priority_b_cnt), false);


 radeon_crtc->line_time = line_time;
 radeon_crtc->wm_high = latency_watermark_a;
 radeon_crtc->wm_low = latency_watermark_b;
}
# 2322 "drivers/gpu/drm/radeon/evergreen.c"
void evergreen_bandwidth_update(struct radeon_device *rdev)
{
 struct drm_display_mode *mode0 = ((void *)0);
 struct drm_display_mode *mode1 = ((void *)0);
 u32 num_heads = 0, lb_size;
 int i;

 if (!rdev->mode_info.mode_config_initialized)
  return;

 radeon_update_display_priority(rdev);

 for (i = 0; i < rdev->num_crtc; i++) {
  if (rdev->mode_info.crtcs[i]->base.enabled)
   num_heads++;
 }
 for (i = 0; i < rdev->num_crtc; i += 2) {
  mode0 = &rdev->mode_info.crtcs[i]->base.mode;
  mode1 = &rdev->mode_info.crtcs[i+1]->base.mode;
  lb_size = evergreen_line_buffer_adjust(rdev, rdev->mode_info.crtcs[i], mode0, mode1);
  evergreen_program_watermarks(rdev, rdev->mode_info.crtcs[i], lb_size, num_heads);
  lb_size = evergreen_line_buffer_adjust(rdev, rdev->mode_info.crtcs[i+1], mode1, mode0);
  evergreen_program_watermarks(rdev, rdev->mode_info.crtcs[i+1], lb_size, num_heads);
 }
}
# 2357 "drivers/gpu/drm/radeon/evergreen.c"
int evergreen_mc_wait_for_idle(struct radeon_device *rdev)
{
 unsigned i;
 u32 tmp;

 for (i = 0; i < rdev->usec_timeout; i++) {

  tmp = r100_mm_rreg(rdev, (0x0E50), false) & 0x1F00;
  if (!tmp)
   return 0;
  udelay(1);
 }
 return -1;
}




void evergreen_pcie_gart_tlb_flush(struct radeon_device *rdev)
{
 unsigned i;
 u32 tmp;

 r100_mm_wreg(rdev, (0x5480), (0x1), false);

 r100_mm_wreg(rdev, (0x1470), ((((1) & 0xf) << 0)), false);
 for (i = 0; i < rdev->usec_timeout; i++) {

  tmp = r100_mm_rreg(rdev, (0x1470), false);
  tmp = (tmp & 0x000000F0) >> 4;
  if (tmp == 2) {
   ({ do {} while (0); _printk("\001" "4" "[drm] r600 flush TLB failed\n"); });
   return;
  }
  if (tmp) {
   return;
  }
  udelay(1);
 }
}

static int evergreen_pcie_gart_enable(struct radeon_device *rdev)
{
 u32 tmp;
 int r;

 if (rdev->gart.robj == ((void *)0)) {
  ({ do {} while (0); _dev_err(rdev->dev, "No VRAM object for PCIE GART.\n"); });
  return -22;
 }
 r = radeon_gart_table_vram_pin(rdev);
 if (r)
  return r;

 r100_mm_wreg(rdev, (0x1400), ((1 << 0) | (1 << 1) | (1 << 9) | (((7) & 7) << 14)), false);


 r100_mm_wreg(rdev, (0x1404), (0), false);
 r100_mm_wreg(rdev, (0x1408), (((0) << 0) | ((2) << 6)), false);

 tmp = (1 << 0) | (1 << 1) |
  (3 << 3) |
  (0 << 5) |
  ((5)<<15) | ((5)<<18);
 if (rdev->flags & RADEON_IS_IGP) {
  r100_mm_wreg(rdev, (0x265C), (tmp), false);
  r100_mm_wreg(rdev, (0x2660), (tmp), false);
  r100_mm_wreg(rdev, (0x2664), (tmp), false);
 } else {
  r100_mm_wreg(rdev, (0x2654), (tmp), false);
  r100_mm_wreg(rdev, (0x2658), (tmp), false);
  r100_mm_wreg(rdev, (0x265C), (tmp), false);
  if ((rdev->family == CHIP_JUNIPER) ||
      (rdev->family == CHIP_CYPRESS) ||
      (rdev->family == CHIP_HEMLOCK) ||
      (rdev->family == CHIP_BARTS))
   r100_mm_wreg(rdev, (0x2698), (tmp), false);
 }
 r100_mm_wreg(rdev, (0x2234), (tmp), false);
 r100_mm_wreg(rdev, (0x2238), (tmp), false);
 r100_mm_wreg(rdev, (0x223C), (tmp), false);
 r100_mm_wreg(rdev, (0x2240), (tmp), false);
 r100_mm_wreg(rdev, (0x155C), (rdev->mc.gtt_start >> 12), false);
 r100_mm_wreg(rdev, (0x157C), (rdev->mc.gtt_end >> 12), false);
 r100_mm_wreg(rdev, (0x153C), (rdev->gart.table_addr >> 12), false);
 r100_mm_wreg(rdev, (0x1410), ((1 << 0) | (((0) & 3) << 1) | (1 << 4)), false);

 r100_mm_wreg(rdev, (0x1518), ((u32)(rdev->dummy_page.addr >> 12)), false);

 r100_mm_wreg(rdev, (0x1414), (0), false);

 evergreen_pcie_gart_tlb_flush(rdev);
 ({ do {} while (0); _printk("\001" "6" "[" "drm" "] " "PCIE GART of %uM enabled (table at 0x%016llX).\n", (unsigned)(rdev->mc.gtt_size >> 20), (unsigned long long)rdev->gart.table_addr); });


 rdev->gart.ready = true;
 return 0;
}

static void evergreen_pcie_gart_disable(struct radeon_device *rdev)
{
 u32 tmp;


 r100_mm_wreg(rdev, (0x1410), (0), false);
 r100_mm_wreg(rdev, (0x1414), (0), false);


 r100_mm_wreg(rdev, (0x1400), ((1 << 1) | (((7) & 7) << 14)), false);

 r100_mm_wreg(rdev, (0x1404), (0), false);
 r100_mm_wreg(rdev, (0x1408), (((0) << 0) | ((2) << 6)), false);

 tmp = ((5)<<15) | ((5)<<18);
 r100_mm_wreg(rdev, (0x2654), (tmp), false);
 r100_mm_wreg(rdev, (0x2658), (tmp), false);
 r100_mm_wreg(rdev, (0x265C), (tmp), false);
 r100_mm_wreg(rdev, (0x2234), (tmp), false);
 r100_mm_wreg(rdev, (0x2238), (tmp), false);
 r100_mm_wreg(rdev, (0x223C), (tmp), false);
 r100_mm_wreg(rdev, (0x2240), (tmp), false);
 radeon_gart_table_vram_unpin(rdev);
}

static void evergreen_pcie_gart_fini(struct radeon_device *rdev)
{
 evergreen_pcie_gart_disable(rdev);
 radeon_gart_table_vram_free(rdev);
 radeon_gart_fini(rdev);
}


static void evergreen_agp_enable(struct radeon_device *rdev)
{
 u32 tmp;


 r100_mm_wreg(rdev, (0x1400), ((1 << 0) | (1 << 1) | (1 << 9) | (((7) & 7) << 14)), false);


 r100_mm_wreg(rdev, (0x1404), (0), false);
 r100_mm_wreg(rdev, (0x1408), (((0) << 0) | ((2) << 6)), false);

 tmp = (1 << 0) | (1 << 1) |
  (3 << 3) |
  (0 << 5) |
  ((5)<<15) | ((5)<<18);
 r100_mm_wreg(rdev, (0x2654), (tmp), false);
 r100_mm_wreg(rdev, (0x2658), (tmp), false);
 r100_mm_wreg(rdev, (0x265C), (tmp), false);
 r100_mm_wreg(rdev, (0x2234), (tmp), false);
 r100_mm_wreg(rdev, (0x2238), (tmp), false);
 r100_mm_wreg(rdev, (0x223C), (tmp), false);
 r100_mm_wreg(rdev, (0x2240), (tmp), false);
 r100_mm_wreg(rdev, (0x1410), (0), false);
 r100_mm_wreg(rdev, (0x1414), (0), false);
}

static const unsigned ni_dig_offsets[] =
{
 (0x7000 - 0x7000),
 (0x7C00 - 0x7000),
 (0x10800 - 0x7000),
 (0x11400 - 0x7000),
 (0x12000 - 0x7000),
 (0x12C00 - 0x7000)
};

static const unsigned ni_tx_offsets[] =
{
 (0x6600 -0x6600),
 (0x6640 -0x6600),
 (0x6680 - 0x6600),
 (0x66C0 - 0x6600),
 (0x6700 - 0x6600),
 (0x6740 - 0x6600)
};

static const unsigned evergreen_dp_offsets[] =
{
 (0x730C - 0x730C),
 (0x7F0C - 0x730C),
 (0x10B0C - 0x730C),
 (0x1170C - 0x730C),
 (0x1230C - 0x730C),
 (0x12F0C - 0x730C)
};

static const unsigned evergreen_disp_int_status[] =
{
 0x60f4,
 0x60f8,
 0x60fc,
 0x6100,
 0x614c,
 0x6150
};
# 2565 "drivers/gpu/drm/radeon/evergreen.c"
static bool evergreen_is_dp_sst_stream_enabled(struct radeon_device *rdev,
            unsigned crtc_id, unsigned *ret_dig_fe)
{
 unsigned i;
 unsigned dig_fe;
 unsigned dig_be;
 unsigned dig_en_be;
 unsigned uniphy_pll;
 unsigned digs_fe_selected;
 unsigned dig_be_mode;
 unsigned dig_fe_mask;
 bool is_enabled = false;
 bool found_crtc = false;


 for (i = 0; i < (sizeof(ni_dig_offsets) / sizeof((ni_dig_offsets)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((ni_dig_offsets)), typeof(&(ni_dig_offsets)[0])))); })))); i++) {
  dig_fe = r100_mm_rreg(rdev, (0x7000 + ni_dig_offsets[i]), false);
  if (dig_fe & (1<<24) &&
      crtc_id == ((dig_fe) & 0x3)) {

   found_crtc = true;
   dig_fe_mask = 1 << i;
   dig_fe = i;
   break;
  }
 }

 if (found_crtc) {

  for (i = 0; i < (sizeof(ni_dig_offsets) / sizeof((ni_dig_offsets)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((ni_dig_offsets)), typeof(&(ni_dig_offsets)[0])))); })))); i++) {
   dig_be = r100_mm_rreg(rdev, (0x7140 + ni_dig_offsets[i]), false);

   digs_fe_selected = (((dig_be) >> 8 ) & 0x3F);
   dig_be_mode = (((dig_be) >> 16) & 0x7 );
   if (dig_fe_mask & digs_fe_selected &&

       dig_be_mode == 0) {
    dig_en_be = r100_mm_rreg(rdev, (0x7144 + ni_dig_offsets[i]), false);

    uniphy_pll = r100_mm_rreg(rdev, (0x6618 + ni_tx_offsets[i]), false);


    if (dig_en_be & (1 << 0) &&
        dig_en_be & (1 << 8) &&
        uniphy_pll & (1 << 0)) {
     is_enabled = true;
     *ret_dig_fe = dig_fe;
     break;
    }
   }
  }
 }

 return is_enabled;
}





static void evergreen_blank_dp_output(struct radeon_device *rdev,
          unsigned dig_fe)
{
 unsigned stream_ctrl;
 unsigned fifo_ctrl;
 unsigned counter = 0;

 if (dig_fe >= (sizeof(evergreen_dp_offsets) / sizeof((evergreen_dp_offsets)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((evergreen_dp_offsets)), typeof(&(evergreen_dp_offsets)[0])))); }))))) {
  __drm_err("invalid dig_fe %d\n", dig_fe);
  return;
 }

 stream_ctrl = r100_mm_rreg(rdev, (0x730C + evergreen_dp_offsets[dig_fe]), false);

 if (!(stream_ctrl & (1 << 0))) {
  __drm_err("dig %d , should be enable\n", dig_fe);
  return;
 }

 stream_ctrl &=~(1 << 0);
 r100_mm_wreg(rdev, (0x730C + evergreen_dp_offsets[dig_fe]), (stream_ctrl), false);


 stream_ctrl = r100_mm_rreg(rdev, (0x730C + evergreen_dp_offsets[dig_fe]), false);

 while (counter < 32 && stream_ctrl & (1 <<16)) {
  msleep(1);
  counter++;
  stream_ctrl = r100_mm_rreg(rdev, (0x730C + evergreen_dp_offsets[dig_fe]), false);

 }
 if (counter >= 32 )
  __drm_err("counter exceeds %d\n", counter);

 fifo_ctrl = r100_mm_rreg(rdev, (0x7310 + evergreen_dp_offsets[dig_fe]), false);
 fifo_ctrl |= (1 << 0);
 r100_mm_wreg(rdev, (0x7310 + evergreen_dp_offsets[dig_fe]), (fifo_ctrl), false);

}

void evergreen_mc_stop(struct radeon_device *rdev, struct evergreen_mc_save *save)
{
 u32 crtc_enabled, tmp, frame_count, blackout;
 int i, j;
 unsigned dig_fe;

 if (!((rdev->family == CHIP_HAINAN))) {
  save->vga_render_control = r100_mm_rreg(rdev, (0x0300), false);
  save->vga_hdp_control = r100_mm_rreg(rdev, (0x328), false);


  r100_mm_wreg(rdev, (0x0300), (0), false);
 }

 for (i = 0; i < rdev->num_crtc; i++) {
  crtc_enabled = r100_mm_rreg(rdev, (0x6e70 + crtc_offsets[i]), false) & (1 << 0);
  if (crtc_enabled) {
   save->crtc_enabled[i] = true;
   if (((rdev->family >= CHIP_ARUBA))) {
    tmp = r100_mm_rreg(rdev, (0x6e74 + crtc_offsets[i]), false);
    if (!(tmp & (1 << 8))) {
     (rdev)->asic->display.wait_for_vblank((rdev), (i));
     r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (1), false);
     tmp |= (1 << 8);
     r100_mm_wreg(rdev, (0x6e74 + crtc_offsets[i]), (tmp), false);
     r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (0), false);
    }
   } else {
    tmp = r100_mm_rreg(rdev, (0x6e70 + crtc_offsets[i]), false);
    if (!(tmp & (1 << 24))) {
     (rdev)->asic->display.wait_for_vblank((rdev), (i));
     r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (1), false);
     tmp |= (1 << 24);
     r100_mm_wreg(rdev, (0x6e70 + crtc_offsets[i]), (tmp), false);
     r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (0), false);
    }
   }

   frame_count = (rdev)->asic->display.get_vblank_counter((rdev), (i));
   for (j = 0; j < rdev->usec_timeout; j++) {
    if ((rdev)->asic->display.get_vblank_counter((rdev), (i)) != frame_count)
     break;
    udelay(1);
   }







   if (((rdev->family >= CHIP_BARTS)) &&
       evergreen_is_dp_sst_stream_enabled(rdev, i ,&dig_fe))
    evergreen_blank_dp_output(rdev, dig_fe);


   r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (1), false);
   tmp = r100_mm_rreg(rdev, (0x6e70 + crtc_offsets[i]), false);
   tmp &= ~(1 << 0);
   r100_mm_wreg(rdev, (0x6e70 + crtc_offsets[i]), (tmp), false);
   r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (0), false);
   save->crtc_enabled[i] = false;

  } else {
   save->crtc_enabled[i] = false;
  }
 }

 (rdev)->asic->mc_wait_for_idle((rdev));

 blackout = r100_mm_rreg(rdev, (0x20ac), false);
 if ((blackout & 0x00000007) != 1) {

  r100_mm_wreg(rdev, (0x5490), (0), false);

  blackout &= ~0x00000007;
  r100_mm_wreg(rdev, (0x20ac), (blackout | 1), false);
 }

 udelay(100);


 for (i = 0; i < rdev->num_crtc; i++) {
  if (save->crtc_enabled[i]) {
   tmp = r100_mm_rreg(rdev, (0x6844 + crtc_offsets[i]), false);
   if (!(tmp & (1 << 16))) {
    tmp |= (1 << 16);
    r100_mm_wreg(rdev, (0x6844 + crtc_offsets[i]), (tmp), false);
   }
   tmp = r100_mm_rreg(rdev, (0x6ef4 + crtc_offsets[i]), false);
   if (!(tmp & 1)) {
    tmp |= 1;
    r100_mm_wreg(rdev, (0x6ef4 + crtc_offsets[i]), (tmp), false);
   }
  }
 }
}

void evergreen_mc_resume(struct radeon_device *rdev, struct evergreen_mc_save *save)
{
 u32 tmp, frame_count;
 int i, j;


 for (i = 0; i < rdev->num_crtc; i++) {
  r100_mm_wreg(rdev, (0x681c + crtc_offsets[i]), (((u32)(((rdev->mc.vram_start) >> 16) >> 16))), false);

  r100_mm_wreg(rdev, (0x6820 + crtc_offsets[i]), (((u32)(((rdev->mc.vram_start) >> 16) >> 16))), false);

  r100_mm_wreg(rdev, (0x6810 + crtc_offsets[i]), ((u32)rdev->mc.vram_start), false);

  r100_mm_wreg(rdev, (0x6814 + crtc_offsets[i]), ((u32)rdev->mc.vram_start), false);

 }

 if (!((rdev->family == CHIP_HAINAN))) {
  r100_mm_wreg(rdev, (0x324), (((u32)(((rdev->mc.vram_start) >> 16) >> 16))), false);
  r100_mm_wreg(rdev, (0x310), ((u32)rdev->mc.vram_start), false);
 }


 for (i = 0; i < rdev->num_crtc; i++) {
  if (save->crtc_enabled[i]) {
   tmp = r100_mm_rreg(rdev, (0x6ef8 + crtc_offsets[i]), false);
   if ((tmp & 0x7) != 0) {
    tmp &= ~0x7;
    r100_mm_wreg(rdev, (0x6ef8 + crtc_offsets[i]), (tmp), false);
   }
   tmp = r100_mm_rreg(rdev, (0x6844 + crtc_offsets[i]), false);
   if (tmp & (1 << 16)) {
    tmp &= ~(1 << 16);
    r100_mm_wreg(rdev, (0x6844 + crtc_offsets[i]), (tmp), false);
   }
   tmp = r100_mm_rreg(rdev, (0x6ef4 + crtc_offsets[i]), false);
   if (tmp & 1) {
    tmp &= ~1;
    r100_mm_wreg(rdev, (0x6ef4 + crtc_offsets[i]), (tmp), false);
   }
   for (j = 0; j < rdev->usec_timeout; j++) {
    tmp = r100_mm_rreg(rdev, (0x6844 + crtc_offsets[i]), false);
    if ((tmp & (1 << 2)) == 0)
     break;
    udelay(1);
   }
  }
 }


 tmp = r100_mm_rreg(rdev, (0x20ac), false);
 tmp &= ~0x00000007;
 r100_mm_wreg(rdev, (0x20ac), (tmp), false);

 r100_mm_wreg(rdev, (0x5490), ((1 << 0) | (1 << 1)), false);

 for (i = 0; i < rdev->num_crtc; i++) {
  if (save->crtc_enabled[i]) {
   if (((rdev->family >= CHIP_ARUBA))) {
    tmp = r100_mm_rreg(rdev, (0x6e74 + crtc_offsets[i]), false);
    tmp &= ~(1 << 8);
    r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (1), false);
    r100_mm_wreg(rdev, (0x6e74 + crtc_offsets[i]), (tmp), false);
    r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (0), false);
   } else {
    tmp = r100_mm_rreg(rdev, (0x6e70 + crtc_offsets[i]), false);
    tmp &= ~(1 << 24);
    r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (1), false);
    r100_mm_wreg(rdev, (0x6e70 + crtc_offsets[i]), (tmp), false);
    r100_mm_wreg(rdev, (0x6ed4 + crtc_offsets[i]), (0), false);
   }

   frame_count = (rdev)->asic->display.get_vblank_counter((rdev), (i));
   for (j = 0; j < rdev->usec_timeout; j++) {
    if ((rdev)->asic->display.get_vblank_counter((rdev), (i)) != frame_count)
     break;
    udelay(1);
   }
  }
 }
 if (!((rdev->family == CHIP_HAINAN))) {

  r100_mm_wreg(rdev, (0x328), (save->vga_hdp_control), false);
  ( (__builtin_constant_p(1) && (1)<=5) ? udelay((1)*1000) : ({unsigned long __ms=(1); while (__ms--) udelay(1000);}));
  r100_mm_wreg(rdev, (0x0300), (save->vga_render_control), false);
 }
}

void evergreen_mc_program(struct radeon_device *rdev)
{
 struct evergreen_mc_save save;
 u32 tmp;
 int i, j;


 for (i = 0, j = 0; i < 32; i++, j += 0x18) {
  r100_mm_wreg(rdev, ((0x2c14 + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c18 + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c1c + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c20 + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c24 + j)), (0x00000000), false);
 }
 r100_mm_wreg(rdev, (0x54A0), (0), false);

 evergreen_mc_stop(rdev, &save);
 if (evergreen_mc_wait_for_idle(rdev)) {
  ({ do {} while (0); _dev_warn(rdev->dev, "Wait for MC idle timedout !\n"); });
 }

 r100_mm_wreg(rdev, (0x328), ((1 << 4)), false);

 if (rdev->flags & RADEON_IS_AGP) {
  if (rdev->mc.vram_start < rdev->mc.gtt_start) {

   r100_mm_wreg(rdev, (0x2034), (rdev->mc.vram_start >> 12), false);

   r100_mm_wreg(rdev, (0x2038), (rdev->mc.gtt_end >> 12), false);

  } else {

   r100_mm_wreg(rdev, (0x2034), (rdev->mc.gtt_start >> 12), false);

   r100_mm_wreg(rdev, (0x2038), (rdev->mc.vram_end >> 12), false);

  }
 } else {
  r100_mm_wreg(rdev, (0x2034), (rdev->mc.vram_start >> 12), false);

  r100_mm_wreg(rdev, (0x2038), (rdev->mc.vram_end >> 12), false);

 }
 r100_mm_wreg(rdev, (0x203C), (rdev->vram_scratch.gpu_addr >> 12), false);

 if ((rdev->family == CHIP_PALM) ||
     (rdev->family == CHIP_SUMO) ||
     (rdev->family == CHIP_SUMO2)) {
  tmp = r100_mm_rreg(rdev, (0x2898), false) & 0x000FFFFF;
  tmp |= ((rdev->mc.vram_end >> 20) & 0xF) << 24;
  tmp |= ((rdev->mc.vram_start >> 20) & 0xF) << 20;
  r100_mm_wreg(rdev, (0x2898), (tmp), false);
 }
 tmp = ((rdev->mc.vram_end >> 24) & 0xFFFF) << 16;
 tmp |= ((rdev->mc.vram_start >> 24) & 0xFFFF);
 r100_mm_wreg(rdev, (0x2024), (tmp), false);
 r100_mm_wreg(rdev, (0x2C04), ((rdev->mc.vram_start >> 8)), false);
 r100_mm_wreg(rdev, (0x2C08), ((2 << 7) | (1 << 30)), false);
 r100_mm_wreg(rdev, (0x2C0C), (0x3FFFFFFF), false);
 if (rdev->flags & RADEON_IS_AGP) {
  r100_mm_wreg(rdev, (0x2028), (rdev->mc.gtt_end >> 16), false);
  r100_mm_wreg(rdev, (0x202C), (rdev->mc.gtt_start >> 16), false);
  r100_mm_wreg(rdev, (0x2030), (rdev->mc.agp_base >> 22), false);
 } else {
  r100_mm_wreg(rdev, (0x2030), (0), false);
  r100_mm_wreg(rdev, (0x2028), (0x0FFFFFFF), false);
  r100_mm_wreg(rdev, (0x202C), (0x0FFFFFFF), false);
 }
 if (evergreen_mc_wait_for_idle(rdev)) {
  ({ do {} while (0); _dev_warn(rdev->dev, "Wait for MC idle timedout !\n"); });
 }
 evergreen_mc_resume(rdev, &save);


 rv515_vga_render_disable(rdev);
}




void evergreen_ring_ib_execute(struct radeon_device *rdev, struct radeon_ib *ib)
{
 struct radeon_ring *ring = &rdev->ring[ib->ring];
 u32 next_rptr;


 radeon_ring_write(ring, ((3 << 30) | (((0x18) & 0xFF) << 8) | ((0) & 0x3FFF) << 16));
 radeon_ring_write(ring, 1);

 if (ring->rptr_save_reg) {
  next_rptr = ring->wptr + 3 + 4;
  radeon_ring_write(ring, ((3 << 30) | (((0x68) & 0xFF) << 8) | ((1) & 0x3FFF) << 16));
  radeon_ring_write(ring, ((ring->rptr_save_reg -
       0x00008000) >> 2));
  radeon_ring_write(ring, next_rptr);
 } else if (rdev->wb.enabled) {
  next_rptr = ring->wptr + 5 + 4;
  radeon_ring_write(ring, ((3 << 30) | (((0x3D) & 0xFF) << 8) | ((3) & 0x3FFF) << 16));
  radeon_ring_write(ring, ring->next_rptr_gpu_addr & 0xfffffffc);
  radeon_ring_write(ring, (((u32)(((ring->next_rptr_gpu_addr) >> 16) >> 16)) & 0xff) | (1 << 18));
  radeon_ring_write(ring, next_rptr);
  radeon_ring_write(ring, 0);
 }

 radeon_ring_write(ring, ((3 << 30) | (((0x32) & 0xFF) << 8) | ((2) & 0x3FFF) << 16));
 radeon_ring_write(ring,



     (ib->gpu_addr & 0xFFFFFFFC));
 radeon_ring_write(ring, ((u32)(((ib->gpu_addr) >> 16) >> 16)) & 0xFF);
 radeon_ring_write(ring, ib->length_dw);
}


static int evergreen_cp_load_microcode(struct radeon_device *rdev)
{
 const __be32 *fw_data;
 int i;

 if (!rdev->me_fw || !rdev->pfp_fw)
  return -22;

 r700_cp_stop(rdev);
 r100_mm_wreg(rdev, (0xC104), ((1 << 27) | ((15) << 8) | ((3) << 0)), false);





 fw_data = (const __be32 *)rdev->pfp_fw->data;
 r100_mm_wreg(rdev, (0xC150), (0), false);
 for (i = 0; i < 1120; i++)
  r100_mm_wreg(rdev, (0xC154), (__be32_to_cpup(fw_data++)), false);
 r100_mm_wreg(rdev, (0xC150), (0), false);

 fw_data = (const __be32 *)rdev->me_fw->data;
 r100_mm_wreg(rdev, (0xC15C), (0), false);
 for (i = 0; i < 1376; i++)
  r100_mm_wreg(rdev, (0xC160), (__be32_to_cpup(fw_data++)), false);

 r100_mm_wreg(rdev, (0xC150), (0), false);
 r100_mm_wreg(rdev, (0xC15C), (0), false);
 r100_mm_wreg(rdev, (0xC158), (0), false);
 return 0;
}

static int evergreen_cp_start(struct radeon_device *rdev)
{
 struct radeon_ring *ring = &rdev->ring[0];
 int r, i;
 uint32_t cp_me;

 r = radeon_ring_lock(rdev, ring, 7);
 if (r) {
  __drm_err("radeon: cp failed to lock ring (%d).\n", r);
  return r;
 }
 radeon_ring_write(ring, ((3 << 30) | (((0x44) & 0xFF) << 8) | ((5) & 0x3FFF) << 16));
 radeon_ring_write(ring, 0x1);
 radeon_ring_write(ring, 0x0);
 radeon_ring_write(ring, rdev->config.evergreen.max_hw_contexts - 1);
 radeon_ring_write(ring, ((1) << 16));
 radeon_ring_write(ring, 0);
 radeon_ring_write(ring, 0);
 radeon_ring_unlock_commit(rdev, ring, false);

 cp_me = 0xff;
 r100_mm_wreg(rdev, (0x86D8), (cp_me), false);

 r = radeon_ring_lock(rdev, ring, evergreen_default_size + 19);
 if (r) {
  __drm_err("radeon: cp failed to lock ring (%d).\n", r);
  return r;
 }


 radeon_ring_write(ring, ((3 << 30) | (((0x4A) & 0xFF) << 8) | ((0) & 0x3FFF) << 16));
 radeon_ring_write(ring, (2 << 28));

 for (i = 0; i < evergreen_default_size; i++)
  radeon_ring_write(ring, evergreen_default_state[i]);

 radeon_ring_write(ring, ((3 << 30) | (((0x4A) & 0xFF) << 8) | ((0) & 0x3FFF) << 16));
 radeon_ring_write(ring, (3 << 28));


 radeon_ring_write(ring, ((3 << 30) | (((0x12) & 0xFF) << 8) | ((0) & 0x3FFF) << 16));
 radeon_ring_write(ring, 0);


 radeon_ring_write(ring, 0xc0026f00);
 radeon_ring_write(ring, 0x00000000);
 radeon_ring_write(ring, 0x00000000);
 radeon_ring_write(ring, 0x00000000);


 radeon_ring_write(ring, 0xc0036f00);
 radeon_ring_write(ring, 0x00000bc4);
 radeon_ring_write(ring, 0xffffffff);
 radeon_ring_write(ring, 0xffffffff);
 radeon_ring_write(ring, 0xffffffff);

 radeon_ring_write(ring, 0xc0026900);
 radeon_ring_write(ring, 0x00000316);
 radeon_ring_write(ring, 0x0000000e);
 radeon_ring_write(ring, 0x00000010);

 radeon_ring_unlock_commit(rdev, ring, false);

 return 0;
}

static int evergreen_cp_resume(struct radeon_device *rdev)
{
 struct radeon_ring *ring = &rdev->ring[0];
 u32 tmp;
 u32 rb_bufsz;
 int r;


 r100_mm_wreg(rdev, (0x8020), (((1 << 0) | (1 << 5) | (1 << 9) | (1 << 14) | (1 << 8) | (1 << 10))), false);





 r100_mm_rreg(rdev, (0x8020), false);
 ( (__builtin_constant_p(15) && (15)<=5) ? udelay((15)*1000) : ({unsigned long __ms=(15); while (__ms--) udelay(1000);}));
 r100_mm_wreg(rdev, (0x8020), (0), false);
 r100_mm_rreg(rdev, (0x8020), false);


 rb_bufsz = ( __builtin_constant_p(ring->ring_size / 8) ? ( ((ring->ring_size / 8) == 0 || (ring->ring_size / 8) == 1) ? 0 : ( __builtin_constant_p((ring->ring_size / 8) - 1) ? (((ring->ring_size / 8) - 1) < 2 ? 0 : 63 - __builtin_clzll((ring->ring_size / 8) - 1)) : (sizeof((ring->ring_size / 8) - 1) <= 4) ? __ilog2_u32((ring->ring_size / 8) - 1) : __ilog2_u64((ring->ring_size / 8) - 1) ) + 1) : __order_base_2(ring->ring_size / 8) );
 tmp = (( __builtin_constant_p(4096/8) ? ( ((4096/8) == 0 || (4096/8) == 1) ? 0 : ( __builtin_constant_p((4096/8) - 1) ? (((4096/8) - 1) < 2 ? 0 : 63 - __builtin_clzll((4096/8) - 1)) : (sizeof((4096/8) - 1) <= 4) ? __ilog2_u32((4096/8) - 1) : __ilog2_u64((4096/8) - 1) ) + 1) : __order_base_2(4096/8) ) << 8) | rb_bufsz;



 r100_mm_wreg(rdev, (0xC104), (tmp), false);
 r100_mm_wreg(rdev, (0x85BC), (0x0), false);
 r100_mm_wreg(rdev, (0x85C8), (0x0), false);


 r100_mm_wreg(rdev, (0x8704), (0), false);


 r100_mm_wreg(rdev, (0xC104), (tmp | (1 << 31)), false);
 r100_mm_wreg(rdev, (0xC108), (0), false);
 ring->wptr = 0;
 r100_mm_wreg(rdev, (0xC114), (ring->wptr), false);


 r100_mm_wreg(rdev, (0xC10C), (((rdev->wb.gpu_addr + 1024) & 0xFFFFFFFC)), false);

 r100_mm_wreg(rdev, (0xC110), (((u32)(((rdev->wb.gpu_addr + 1024) >> 16) >> 16)) & 0xFF), false);
 r100_mm_wreg(rdev, (0x8544), (((rdev->wb.gpu_addr + 0) >> 8) & 0xFFFFFFFF), false);

 if (rdev->wb.enabled)
  r100_mm_wreg(rdev, (0x8540), (0xff), false);
 else {
  tmp |= (1 << 27);
  r100_mm_wreg(rdev, (0x8540), (0), false);
 }

 ( (__builtin_constant_p(1) && (1)<=5) ? udelay((1)*1000) : ({unsigned long __ms=(1); while (__ms--) udelay(1000);}));
 r100_mm_wreg(rdev, (0xC104), (tmp), false);

 r100_mm_wreg(rdev, (0xC100), (ring->gpu_addr >> 8), false);
 r100_mm_wreg(rdev, (0xC1FC), ((1 << 27) | (1 << 28)), false);

 evergreen_cp_start(rdev);
 ring->ready = true;
 r = (rdev)->asic->ring[(0)]->ring_test((rdev), (ring));
 if (r) {
  ring->ready = false;
  return r;
 }
 return 0;
}




static void evergreen_gpu_init(struct radeon_device *rdev)
{
 u32 gb_addr_config;
 u32 mc_arb_ramcfg;
 u32 sx_debug_1;
 u32 smx_dc_ctl0;
 u32 sq_config;
 u32 sq_lds_resource_mgmt;
 u32 sq_gpr_resource_mgmt_1;
 u32 sq_gpr_resource_mgmt_2;
 u32 sq_gpr_resource_mgmt_3;
 u32 sq_thread_resource_mgmt;
 u32 sq_thread_resource_mgmt_2;
 u32 sq_stack_resource_mgmt_1;
 u32 sq_stack_resource_mgmt_2;
 u32 sq_stack_resource_mgmt_3;
 u32 vgt_cache_invalidation;
 u32 hdp_host_path_cntl, tmp;
 u32 disabled_rb_mask;
 int i, j, ps_thread_count;

 switch (rdev->family) {
 case CHIP_CYPRESS:
 case CHIP_HEMLOCK:
  rdev->config.evergreen.num_ses = 2;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 8;
  rdev->config.evergreen.max_simds = 10;
  rdev->config.evergreen.max_backends = 4 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 512;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 8;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x100;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02011003;
  break;
 case CHIP_JUNIPER:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 4;
  rdev->config.evergreen.max_simds = 10;
  rdev->config.evergreen.max_backends = 4 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 512;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 8;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x100;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010002;
  break;
 case CHIP_REDWOOD:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 4;
  rdev->config.evergreen.max_simds = 5;
  rdev->config.evergreen.max_backends = 2 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 256;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 8;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x100;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010002;
  break;
 case CHIP_CEDAR:
 default:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 2;
  rdev->config.evergreen.max_tile_pipes = 2;
  rdev->config.evergreen.max_simds = 2;
  rdev->config.evergreen.max_backends = 1 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 192;
  rdev->config.evergreen.max_gs_threads = 16;
  rdev->config.evergreen.max_stack_entries = 256;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 128;
  rdev->config.evergreen.sx_max_export_pos_size = 32;
  rdev->config.evergreen.sx_max_export_smx_size = 96;
  rdev->config.evergreen.max_hw_contexts = 4;
  rdev->config.evergreen.sq_num_cf_insts = 1;

  rdev->config.evergreen.sc_prim_fifo_size = 0x40;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010001;
  break;
 case CHIP_PALM:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 2;
  rdev->config.evergreen.max_tile_pipes = 2;
  rdev->config.evergreen.max_simds = 2;
  rdev->config.evergreen.max_backends = 1 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 192;
  rdev->config.evergreen.max_gs_threads = 16;
  rdev->config.evergreen.max_stack_entries = 256;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 128;
  rdev->config.evergreen.sx_max_export_pos_size = 32;
  rdev->config.evergreen.sx_max_export_smx_size = 96;
  rdev->config.evergreen.max_hw_contexts = 4;
  rdev->config.evergreen.sq_num_cf_insts = 1;

  rdev->config.evergreen.sc_prim_fifo_size = 0x40;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010001;
  break;
 case CHIP_SUMO:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 4;
  if (rdev->pdev->device == 0x9648)
   rdev->config.evergreen.max_simds = 3;
  else if ((rdev->pdev->device == 0x9647) ||
    (rdev->pdev->device == 0x964a))
   rdev->config.evergreen.max_simds = 4;
  else
   rdev->config.evergreen.max_simds = 5;
  rdev->config.evergreen.max_backends = 2 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 256;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 8;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x40;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010002;
  break;
 case CHIP_SUMO2:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 4;
  rdev->config.evergreen.max_simds = 2;
  rdev->config.evergreen.max_backends = 1 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 512;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 4;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x40;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010002;
  break;
 case CHIP_BARTS:
  rdev->config.evergreen.num_ses = 2;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 8;
  rdev->config.evergreen.max_simds = 7;
  rdev->config.evergreen.max_backends = 4 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 512;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 8;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x100;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02011003;
  break;
 case CHIP_TURKS:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 4;
  rdev->config.evergreen.max_tile_pipes = 4;
  rdev->config.evergreen.max_simds = 6;
  rdev->config.evergreen.max_backends = 2 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 248;
  rdev->config.evergreen.max_gs_threads = 32;
  rdev->config.evergreen.max_stack_entries = 256;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 256;
  rdev->config.evergreen.sx_max_export_pos_size = 64;
  rdev->config.evergreen.sx_max_export_smx_size = 192;
  rdev->config.evergreen.max_hw_contexts = 8;
  rdev->config.evergreen.sq_num_cf_insts = 2;

  rdev->config.evergreen.sc_prim_fifo_size = 0x100;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010002;
  break;
 case CHIP_CAICOS:
  rdev->config.evergreen.num_ses = 1;
  rdev->config.evergreen.max_pipes = 2;
  rdev->config.evergreen.max_tile_pipes = 2;
  rdev->config.evergreen.max_simds = 2;
  rdev->config.evergreen.max_backends = 1 * rdev->config.evergreen.num_ses;
  rdev->config.evergreen.max_gprs = 256;
  rdev->config.evergreen.max_threads = 192;
  rdev->config.evergreen.max_gs_threads = 16;
  rdev->config.evergreen.max_stack_entries = 256;
  rdev->config.evergreen.sx_num_of_sets = 4;
  rdev->config.evergreen.sx_max_export_size = 128;
  rdev->config.evergreen.sx_max_export_pos_size = 32;
  rdev->config.evergreen.sx_max_export_smx_size = 96;
  rdev->config.evergreen.max_hw_contexts = 4;
  rdev->config.evergreen.sq_num_cf_insts = 1;

  rdev->config.evergreen.sc_prim_fifo_size = 0x40;
  rdev->config.evergreen.sc_hiz_tile_fifo_size = 0x30;
  rdev->config.evergreen.sc_earlyz_tile_fifo_size = 0x130;
  gb_addr_config = 0x02010001;
  break;
 }


 for (i = 0, j = 0; i < 32; i++, j += 0x18) {
  r100_mm_wreg(rdev, ((0x2c14 + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c18 + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c1c + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c20 + j)), (0x00000000), false);
  r100_mm_wreg(rdev, ((0x2c24 + j)), (0x00000000), false);
 }

 r100_mm_wreg(rdev, (0x8000), (((0xff) << 0)), false);
 r100_mm_wreg(rdev, (0xEA0), (0x1), false);
 r100_mm_wreg(rdev, (0xEA8), (0x1), false);

 evergreen_fix_pci_max_read_req_size(rdev);

 r100_mm_rreg(rdev, (0x2004), false);
 if ((rdev->family == CHIP_PALM) ||
     (rdev->family == CHIP_SUMO) ||
     (rdev->family == CHIP_SUMO2))
  mc_arb_ramcfg = r100_mm_rreg(rdev, (0x2768), false);
 else
  mc_arb_ramcfg = r100_mm_rreg(rdev, (0x2760), false);
# 3416 "drivers/gpu/drm/radeon/evergreen.c"
 rdev->config.evergreen.tile_config = 0;
 switch (rdev->config.evergreen.max_tile_pipes) {
 case 1:
 default:
  rdev->config.evergreen.tile_config |= (0 << 0);
  break;
 case 2:
  rdev->config.evergreen.tile_config |= (1 << 0);
  break;
 case 4:
  rdev->config.evergreen.tile_config |= (2 << 0);
  break;
 case 8:
  rdev->config.evergreen.tile_config |= (3 << 0);
  break;
 }

 if (rdev->flags & RADEON_IS_IGP)
  rdev->config.evergreen.tile_config |= 1 << 4;
 else {
  switch ((mc_arb_ramcfg & 0x00000003) >> 0) {
  case 0:
   rdev->config.evergreen.tile_config |= 0 << 4;
   break;
  case 1:
   rdev->config.evergreen.tile_config |= 1 << 4;
   break;
  case 2:
  default:
   rdev->config.evergreen.tile_config |= 2 << 4;
   break;
  }
 }
 rdev->config.evergreen.tile_config |= 0 << 8;
 rdev->config.evergreen.tile_config |=
  ((gb_addr_config & 0x30000000) >> 28) << 12;

 if ((rdev->family >= CHIP_CEDAR) && (rdev->family <= CHIP_HEMLOCK)) {
  u32 efuse_straps_4;
  u32 efuse_straps_3;

  efuse_straps_4 = r600_rcu_rreg(rdev, (0x204));
  efuse_straps_3 = r600_rcu_rreg(rdev, (0x203));
  tmp = (((efuse_straps_4 & 0xf) << 4) |
        ((efuse_straps_3 & 0xf0000000) >> 28));
 } else {
  tmp = 0;
  for (i = (rdev->config.evergreen.num_ses - 1); i >= 0; i--) {
   u32 rb_disable_bitmap;

   r100_mm_wreg(rdev, (0x802C), ((1 << 30) | ((i) << 16)), false);
   r100_mm_wreg(rdev, (0x3fC4), ((1 << 30) | ((i) << 16)), false);
   rb_disable_bitmap = (r100_mm_rreg(rdev, (0x98F4), false) & 0x00ff0000) >> 16;
   tmp <<= 4;
   tmp |= rb_disable_bitmap;
  }
 }

 disabled_rb_mask = tmp;
 tmp = 0;
 for (i = 0; i < rdev->config.evergreen.max_backends; i++)
  tmp |= (1 << i);

 if ((disabled_rb_mask & tmp) == tmp) {
  for (i = 0; i < rdev->config.evergreen.max_backends; i++)
   disabled_rb_mask &= ~(1 << i);
 }

 for (i = 0; i < rdev->config.evergreen.num_ses; i++) {
  u32 simd_disable_bitmap;

  r100_mm_wreg(rdev, (0x802C), ((1 << 30) | ((i) << 16)), false);
  r100_mm_wreg(rdev, (0x3fC4), ((1 << 30) | ((i) << 16)), false);
  simd_disable_bitmap = (r100_mm_rreg(rdev, (0x8950), false) & 0xffff0000) >> 16;
  simd_disable_bitmap |= 0xffffffff << rdev->config.evergreen.max_simds;
  tmp <<= 16;
  tmp |= simd_disable_bitmap;
 }
 rdev->config.evergreen.active_simds = (__builtin_constant_p(~tmp) ? ((((unsigned int) ((!!((~tmp) & (1ULL << 0))) + (!!((~tmp) & (1ULL << 1))) + (!!((~tmp) & (1ULL << 2))) + (!!((~tmp) & (1ULL << 3))) + (!!((~tmp) & (1ULL << 4))) + (!!((~tmp) & (1ULL << 5))) + (!!((~tmp) & (1ULL << 6))) + (!!((~tmp) & (1ULL << 7))))) + ((unsigned int) ((!!(((~tmp) >> 8) & (1ULL << 0))) + (!!(((~tmp) >> 8) & (1ULL << 1))) + (!!(((~tmp) >> 8) & (1ULL << 2))) + (!!(((~tmp) >> 8) & (1ULL << 3))) + (!!(((~tmp) >> 8) & (1ULL << 4))) + (!!(((~tmp) >> 8) & (1ULL << 5))) + (!!(((~tmp) >> 8) & (1ULL << 6))) + (!!(((~tmp) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((~tmp) >> 16) & (1ULL << 0))) + (!!(((~tmp) >> 16) & (1ULL << 1))) + (!!(((~tmp) >> 16) & (1ULL << 2))) + (!!(((~tmp) >> 16) & (1ULL << 3))) + (!!(((~tmp) >> 16) & (1ULL << 4))) + (!!(((~tmp) >> 16) & (1ULL << 5))) + (!!(((~tmp) >> 16) & (1ULL << 6))) + (!!(((~tmp) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((~tmp) >> 16) >> 8) & (1ULL << 0))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 1))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 2))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 3))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 4))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 5))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 6))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(~tmp));

 r100_mm_wreg(rdev, (0x802C), ((1 << 30) | (1 << 31)), false);
 r100_mm_wreg(rdev, (0x3fC4), ((1 << 30) | (1 << 31)), false);

 r100_mm_wreg(rdev, (0x98F8), (gb_addr_config), false);
 r100_mm_wreg(rdev, (0xBD4), (gb_addr_config), false);
 r100_mm_wreg(rdev, (0x2F48), (gb_addr_config), false);
 r100_mm_wreg(rdev, (0xD0B8), (gb_addr_config), false);
 r100_mm_wreg(rdev, (0xef4c), (gb_addr_config), false);
 r100_mm_wreg(rdev, (0xef50), (gb_addr_config), false);
 r100_mm_wreg(rdev, (0xef54), (gb_addr_config), false);

 if ((rdev->config.evergreen.max_backends == 1) &&
     (rdev->flags & RADEON_IS_IGP)) {
  if ((disabled_rb_mask & 3) == 1) {

   tmp = 0x11111111;
  } else {

   tmp = 0x00000000;
  }
 } else {
  tmp = gb_addr_config & 0x0000000f;
  tmp = r6xx_remap_render_backend(rdev, tmp, rdev->config.evergreen.max_backends,
      8, disabled_rb_mask);
 }
 rdev->config.evergreen.backend_map = tmp;
 r100_mm_wreg(rdev, (0x98FC), (tmp), false);

 r100_mm_wreg(rdev, (0x3F90), (0), false);
 r100_mm_wreg(rdev, (0x9148), (0), false);
 r100_mm_wreg(rdev, (0x3F94), (0), false);
 r100_mm_wreg(rdev, (0x914C), (0), false);


 r100_mm_wreg(rdev, (0x8760), ((((0x16) << 0) | ((0x2b) << 8))), false);


 r100_mm_wreg(rdev, (0x8764), (((0x30) << 0)), false);

 r100_mm_wreg(rdev, (0x9508), (((1 << 1) | (1 << 24) | (1 << 25) | (1 << 26))), false);




 sx_debug_1 = r100_mm_rreg(rdev, (0x9058), false);
 sx_debug_1 |= (1 << 16);
 r100_mm_wreg(rdev, (0x9058), (sx_debug_1), false);


 smx_dc_ctl0 = r100_mm_rreg(rdev, (0xA020), false);
 smx_dc_ctl0 &= ~((0x1ff) << 1);
 smx_dc_ctl0 |= ((rdev->config.evergreen.sx_num_of_sets) << 1);
 r100_mm_wreg(rdev, (0xA020), (smx_dc_ctl0), false);

 if (rdev->family <= CHIP_SUMO2)
  r100_mm_wreg(rdev, (0xA008), (0x00010000), false);

 r100_mm_wreg(rdev, (0x900C), (((((rdev->config.evergreen.sx_max_export_size / 4) - 1) << 0) | (((rdev->config.evergreen.sx_max_export_pos_size / 4) - 1) << 8) | (((rdev->config.evergreen.sx_max_export_smx_size / 4) - 1) << 16))), false);



 r100_mm_wreg(rdev, (0x8BCC), ((((rdev->config.evergreen.sc_prim_fifo_size) << 0) | ((rdev->config.evergreen.sc_hiz_tile_fifo_size) << 12) | ((rdev->config.evergreen.sc_earlyz_tile_fifo_size) << 20))), false);



 r100_mm_wreg(rdev, (0x8974), (1), false);
 r100_mm_wreg(rdev, (0x9100), (0), false);
 r100_mm_wreg(rdev, (0x913C), (((4) << 0)), false);
 r100_mm_wreg(rdev, (0x87FC), (0), false);

 r100_mm_wreg(rdev, (0x8CF0), ((((16 * rdev->config.evergreen.sq_num_cf_insts) << 0) | ((0x4) << 8) | ((0xe0) << 16) | ((0x8) << 24))), false);




 sq_config = r100_mm_rreg(rdev, (0x8C00), false);
 sq_config &= ~(((3) << 24) |
         ((3) << 26) |
         ((3) << 28) |
         ((3) << 30));
 sq_config |= ((1 << 0) |
        (1 << 1) |
        ((0) << 24) |
        ((1) << 26) |
        ((2) << 28) |
        ((3) << 30));

 switch (rdev->family) {
 case CHIP_CEDAR:
 case CHIP_PALM:
 case CHIP_SUMO:
 case CHIP_SUMO2:
 case CHIP_CAICOS:

  sq_config &= ~(1 << 0);
  break;
 default:
  break;
 }

 sq_lds_resource_mgmt = r100_mm_rreg(rdev, (0x8E2C), false);

 sq_gpr_resource_mgmt_1 = (((rdev->config.evergreen.max_gprs - (4 * 2))* 12 / 32) << 0);
 sq_gpr_resource_mgmt_1 |= (((rdev->config.evergreen.max_gprs - (4 * 2)) * 6 / 32) << 16);
 sq_gpr_resource_mgmt_1 |= ((4) << 28);
 sq_gpr_resource_mgmt_2 = (((rdev->config.evergreen.max_gprs - (4 * 2)) * 4 / 32) << 0);
 sq_gpr_resource_mgmt_2 |= (((rdev->config.evergreen.max_gprs - (4 * 2)) * 4 / 32) << 16);
 sq_gpr_resource_mgmt_3 = (((rdev->config.evergreen.max_gprs - (4 * 2)) * 3 / 32) << 0);
 sq_gpr_resource_mgmt_3 |= (((rdev->config.evergreen.max_gprs - (4 * 2)) * 3 / 32) << 16);

 switch (rdev->family) {
 case CHIP_CEDAR:
 case CHIP_PALM:
 case CHIP_SUMO:
 case CHIP_SUMO2:
  ps_thread_count = 96;
  break;
 default:
  ps_thread_count = 128;
  break;
 }

 sq_thread_resource_mgmt = ((ps_thread_count) << 0);
 sq_thread_resource_mgmt |= (((((rdev->config.evergreen.max_threads - ps_thread_count) / 6) / 8) * 8) << 8);
 sq_thread_resource_mgmt |= (((((rdev->config.evergreen.max_threads - ps_thread_count) / 6) / 8) * 8) << 16);
 sq_thread_resource_mgmt |= (((((rdev->config.evergreen.max_threads - ps_thread_count) / 6) / 8) * 8) << 24);
 sq_thread_resource_mgmt_2 = (((((rdev->config.evergreen.max_threads - ps_thread_count) / 6) / 8) * 8) << 0);
 sq_thread_resource_mgmt_2 |= (((((rdev->config.evergreen.max_threads - ps_thread_count) / 6) / 8) * 8) << 8);

 sq_stack_resource_mgmt_1 = (((rdev->config.evergreen.max_stack_entries * 1) / 6) << 0);
 sq_stack_resource_mgmt_1 |= (((rdev->config.evergreen.max_stack_entries * 1) / 6) << 16);
 sq_stack_resource_mgmt_2 = (((rdev->config.evergreen.max_stack_entries * 1) / 6) << 0);
 sq_stack_resource_mgmt_2 |= (((rdev->config.evergreen.max_stack_entries * 1) / 6) << 16);
 sq_stack_resource_mgmt_3 = (((rdev->config.evergreen.max_stack_entries * 1) / 6) << 0);
 sq_stack_resource_mgmt_3 |= (((rdev->config.evergreen.max_stack_entries * 1) / 6) << 16);

 r100_mm_wreg(rdev, (0x8C00), (sq_config), false);
 r100_mm_wreg(rdev, (0x8C04), (sq_gpr_resource_mgmt_1), false);
 r100_mm_wreg(rdev, (0x8C08), (sq_gpr_resource_mgmt_2), false);
 r100_mm_wreg(rdev, (0x8C0C), (sq_gpr_resource_mgmt_3), false);
 r100_mm_wreg(rdev, (0x8C18), (sq_thread_resource_mgmt), false);
 r100_mm_wreg(rdev, (0x8C1C), (sq_thread_resource_mgmt_2), false);
 r100_mm_wreg(rdev, (0x8C20), (sq_stack_resource_mgmt_1), false);
 r100_mm_wreg(rdev, (0x8C24), (sq_stack_resource_mgmt_2), false);
 r100_mm_wreg(rdev, (0x8C28), (sq_stack_resource_mgmt_3), false);
 r100_mm_wreg(rdev, (0x8D8C), (0), false);
 r100_mm_wreg(rdev, (0x8E2C), (sq_lds_resource_mgmt), false);

 r100_mm_wreg(rdev, (0x8B24), ((((4095) << 0) | ((255) << 16))), false);


 switch (rdev->family) {
 case CHIP_CEDAR:
 case CHIP_PALM:
 case CHIP_SUMO:
 case CHIP_SUMO2:
 case CHIP_CAICOS:
  vgt_cache_invalidation = ((1) << 0);
  break;
 default:
  vgt_cache_invalidation = ((2) << 0);
  break;
 }
 vgt_cache_invalidation |= ((3) << 6);
 r100_mm_wreg(rdev, (0x88C4), (vgt_cache_invalidation), false);

 r100_mm_wreg(rdev, (0x88D4), (16), false);
 r100_mm_wreg(rdev, (0x8A60), (0), false);
 r100_mm_wreg(rdev, (0x8B10), (0), false);

 r100_mm_wreg(rdev, (0x28C58), (14), false);
 r100_mm_wreg(rdev, (0x28C5C), (16), false);

 r100_mm_wreg(rdev, (0x9A20), (0), false);
 r100_mm_wreg(rdev, (0x9A24), (0), false);
 r100_mm_wreg(rdev, (0x9A28), (0), false);
 r100_mm_wreg(rdev, (0x9A2C), (0), false);
 r100_mm_wreg(rdev, (0x9A30), (0), false);
 r100_mm_wreg(rdev, (0x9A34), (0), false);
 r100_mm_wreg(rdev, (0x9A38), (0), false);
 r100_mm_wreg(rdev, (0x9A3C), (0), false);


 r100_mm_wreg(rdev, (0x28c60), (0), false);
 r100_mm_wreg(rdev, (0x28c9c), (0), false);
 r100_mm_wreg(rdev, (0x28cd8), (0), false);
 r100_mm_wreg(rdev, (0x28d14), (0), false);
 r100_mm_wreg(rdev, (0x28d50), (0), false);
 r100_mm_wreg(rdev, (0x28d8c), (0), false);
 r100_mm_wreg(rdev, (0x28dc8), (0), false);
 r100_mm_wreg(rdev, (0x28e04), (0), false);
 r100_mm_wreg(rdev, (0x28e40), (0), false);
 r100_mm_wreg(rdev, (0x28e5c), (0), false);
 r100_mm_wreg(rdev, (0x28e78), (0), false);
 r100_mm_wreg(rdev, (0x28e94), (0), false);


 for (i = 0x28140; i < 0x28200; i += 4)
  r100_mm_wreg(rdev, (i), (0), false);
 for (i = 0x28f80; i < 0x29000; i += 4)
  r100_mm_wreg(rdev, (i), (0), false);

 tmp = r100_mm_rreg(rdev, (0x2F4C), false);
 tmp |= (1 << 0);
 r100_mm_wreg(rdev, (0x2F4C), (tmp), false);

 hdp_host_path_cntl = r100_mm_rreg(rdev, (0x2C00), false);
 r100_mm_wreg(rdev, (0x2C00), (hdp_host_path_cntl), false);

 r100_mm_wreg(rdev, (0x8A14), ((1 << 0) | ((3) << 1)), false);

 udelay(50);

}

int evergreen_mc_init(struct radeon_device *rdev)
{
 u32 tmp;
 int chansize, numchan;


 rdev->mc.vram_is_ddr = true;
 if ((rdev->family == CHIP_PALM) ||
     (rdev->family == CHIP_SUMO) ||
     (rdev->family == CHIP_SUMO2))
  tmp = r100_mm_rreg(rdev, (0x2768), false);
 else
  tmp = r100_mm_rreg(rdev, (0x2760), false);
 if (tmp & (1 << 11)) {
  chansize = 16;
 } else if (tmp & 0x00000100) {
  chansize = 64;
 } else {
  chansize = 32;
 }
 tmp = r100_mm_rreg(rdev, (0x2004), false);
 switch ((tmp & 0x00003000) >> 12) {
 case 0:
 default:
  numchan = 1;
  break;
 case 1:
  numchan = 2;
  break;
 case 2:
  numchan = 4;
  break;
 case 3:
  numchan = 8;
  break;
 }
 rdev->mc.vram_width = numchan * chansize;

 rdev->mc.aper_base = ((rdev->pdev)->resource[(0)].start);
 rdev->mc.aper_size = (((((rdev->pdev))->resource[((0))].end) == 0) ? 0 : ((((rdev->pdev))->resource[((0))].end) - (((rdev->pdev))->resource[((0))].start) + 1));

 if ((rdev->family == CHIP_PALM) ||
     (rdev->family == CHIP_SUMO) ||
     (rdev->family == CHIP_SUMO2)) {

  rdev->mc.mc_vram_size = r100_mm_rreg(rdev, (0x5428), false);
  rdev->mc.real_vram_size = r100_mm_rreg(rdev, (0x5428), false);
 } else {

  rdev->mc.mc_vram_size = r100_mm_rreg(rdev, (0x5428), false) * 1024ULL * 1024ULL;
  rdev->mc.real_vram_size = r100_mm_rreg(rdev, (0x5428), false) * 1024ULL * 1024ULL;
 }
 rdev->mc.visible_vram_size = rdev->mc.aper_size;
 r700_vram_gtt_location(rdev, &rdev->mc);
 radeon_update_bandwidth_info(rdev);

 return 0;
}

void evergreen_print_gpu_status_regs(struct radeon_device *rdev)
{
 ({ do {} while (0); _dev_info(rdev->dev, "  GRBM_STATUS               = 0x%08X\n", r100_mm_rreg(rdev, (0x8010), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  GRBM_STATUS_SE0           = 0x%08X\n", r100_mm_rreg(rdev, (0x8014), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  GRBM_STATUS_SE1           = 0x%08X\n", r100_mm_rreg(rdev, (0x8018), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  SRBM_STATUS               = 0x%08X\n", r100_mm_rreg(rdev, (0x0E50), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  SRBM_STATUS2              = 0x%08X\n", r100_mm_rreg(rdev, (0x0EC4), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  R_008674_CP_STALLED_STAT1 = 0x%08X\n", r100_mm_rreg(rdev, (0x8674), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  R_008678_CP_STALLED_STAT2 = 0x%08X\n", r100_mm_rreg(rdev, (0x8678), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  R_00867C_CP_BUSY_STAT     = 0x%08X\n", r100_mm_rreg(rdev, (0x867C), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  R_008680_CP_STAT          = 0x%08X\n", r100_mm_rreg(rdev, (0x8680), false)); });

 ({ do {} while (0); _dev_info(rdev->dev, "  R_00D034_DMA_STATUS_REG   = 0x%08X\n", r100_mm_rreg(rdev, (0xd034), false)); });

 if (rdev->family >= CHIP_CAYMAN) {
  ({ do {} while (0); _dev_info(rdev->dev, "  R_00D834_DMA_STATUS_REG   = 0x%08X\n", r100_mm_rreg(rdev, (0xd034 + 0x800), false)); });

 }
}

bool evergreen_is_display_hung(struct radeon_device *rdev)
{
 u32 crtc_hung = 0;
 u32 crtc_status[6];
 u32 i, j, tmp;

 for (i = 0; i < rdev->num_crtc; i++) {
  if (r100_mm_rreg(rdev, (0x6e70 + crtc_offsets[i]), false) & (1 << 0)) {
   crtc_status[i] = r100_mm_rreg(rdev, (0x6ea0 + crtc_offsets[i]), false);
   crtc_hung |= (1 << i);
  }
 }

 for (j = 0; j < 10; j++) {
  for (i = 0; i < rdev->num_crtc; i++) {
   if (crtc_hung & (1 << i)) {
    tmp = r100_mm_rreg(rdev, (0x6ea0 + crtc_offsets[i]), false);
    if (tmp != crtc_status[i])
     crtc_hung &= ~(1 << i);
   }
  }
  if (crtc_hung == 0)
   return false;
  udelay(100);
 }

 return true;
}

u32 evergreen_gpu_check_soft_reset(struct radeon_device *rdev)
{
 u32 reset_mask = 0;
 u32 tmp;


 tmp = r100_mm_rreg(rdev, (0x8010), false);
 if (tmp & ((1 << 25) | (1 << 24) |
     (1 << 21) | (1 << 20) |
     (1 << 14) | (1 << 17) |
     (1 << 26) | (1 << 30) |
     (1 << 22) | (1 << 16)))
  reset_mask |= (1 << 0);

 if (tmp & ((1 << 7) | (1 << 8) |
     (1 << 29) | (1 << 28)))
  reset_mask |= (1 << 3);

 if (tmp & (1 << 10))
  reset_mask |= (1 << 4) | (1 << 0) | (1 << 3);


 tmp = r100_mm_rreg(rdev, (0xd034), false);
 if (!(tmp & (1 << 0)))
  reset_mask |= (1 << 2);


 tmp = r100_mm_rreg(rdev, (0x0EC4), false);
 if (tmp & (1 << 5))
  reset_mask |= (1 << 2);


 tmp = r100_mm_rreg(rdev, (0x0E50), false);
 if (tmp & ((1 << 3) | (1 << 15)))
  reset_mask |= (1 << 6);

 if (tmp & (1 << 17))
  reset_mask |= (1 << 8);

 if (tmp & (1 << 14))
  reset_mask |= (1 << 7);

 if (tmp & (1 << 5))
  reset_mask |= (1 << 4);

 if (tmp & (1 << 8))
  reset_mask |= (1 << 9);

 if (tmp & ((1 << 9) | (1 << 10) |
     (1 << 11) | (1 << 12)))
  reset_mask |= (1 << 10);

 if (evergreen_is_display_hung(rdev))
  reset_mask |= (1 << 11);


 tmp = r100_mm_rreg(rdev, (0x140C), false);
 if (tmp & (1 << 0))
  reset_mask |= (1 << 9);


 if (reset_mask & (1 << 10)) {
  __drm_dbg(DRM_UT_CORE, "MC busy: 0x%08X, clearing.\n", reset_mask);
  reset_mask &= ~(1 << 10);
 }

 return reset_mask;
}

static void evergreen_gpu_soft_reset(struct radeon_device *rdev, u32 reset_mask)
{
 struct evergreen_mc_save save;
 u32 grbm_soft_reset = 0, srbm_soft_reset = 0;
 u32 tmp;

 if (reset_mask == 0)
  return;

 ({ do {} while (0); _dev_info(rdev->dev, "GPU softreset: 0x%08X\n", reset_mask); });

 evergreen_print_gpu_status_regs(rdev);


 r100_mm_wreg(rdev, (0x86D8), ((1 << 28) | (1 << 26)), false);

 if (reset_mask & (1 << 2)) {

  tmp = r100_mm_rreg(rdev, (0xd000), false);
  tmp &= ~(1 << 0);
  r100_mm_wreg(rdev, (0xd000), (tmp), false);
 }

 udelay(50);

 evergreen_mc_stop(rdev, &save);
 if (evergreen_mc_wait_for_idle(rdev)) {
  ({ do {} while (0); _dev_warn(rdev->dev, "Wait for MC idle timedout !\n"); });
 }

 if (reset_mask & ((1 << 0) | (1 << 1))) {
  grbm_soft_reset |= (1 << 3) |
   (1 << 1) |
   (1 << 5) |
   (1 << 6) |
   (1 << 8) |
   (1 << 10) |
   (1 << 9) |
   (1 << 11) |
   (1 << 12) |
   (1 << 13) |
   (1 << 14);
 }

 if (reset_mask & (1 << 3)) {
  grbm_soft_reset |= (1 << 0) |
   (1 << 14);

  srbm_soft_reset |= (1 << 8);
 }

 if (reset_mask & (1 << 2))
  srbm_soft_reset |= (1 << 20);

 if (reset_mask & (1 << 11))
  srbm_soft_reset |= (1 << 5);

 if (reset_mask & (1 << 6))
  srbm_soft_reset |= (1 << 13);

 if (reset_mask & (1 << 7))
  srbm_soft_reset |= (1 << 15);

 if (reset_mask & (1 << 8))
  srbm_soft_reset |= (1 << 10);

 if (reset_mask & (1 << 4))
  srbm_soft_reset |= (1 << 8);

 if (reset_mask & (1 << 9))
  srbm_soft_reset |= (1 << 17);

 if (!(rdev->flags & RADEON_IS_IGP)) {
  if (reset_mask & (1 << 10))
   srbm_soft_reset |= (1 << 11);
 }

 if (grbm_soft_reset) {
  tmp = r100_mm_rreg(rdev, (0x8020), false);
  tmp |= grbm_soft_reset;
  ({ do {} while (0); _dev_info(rdev->dev, "GRBM_SOFT_RESET=0x%08X\n", tmp); });
  r100_mm_wreg(rdev, (0x8020), (tmp), false);
  tmp = r100_mm_rreg(rdev, (0x8020), false);

  udelay(50);

  tmp &= ~grbm_soft_reset;
  r100_mm_wreg(rdev, (0x8020), (tmp), false);
  tmp = r100_mm_rreg(rdev, (0x8020), false);
 }

 if (srbm_soft_reset) {
  tmp = r100_mm_rreg(rdev, (0x0E60), false);
  tmp |= srbm_soft_reset;
  ({ do {} while (0); _dev_info(rdev->dev, "SRBM_SOFT_RESET=0x%08X\n", tmp); });
  r100_mm_wreg(rdev, (0x0E60), (tmp), false);
  tmp = r100_mm_rreg(rdev, (0x0E60), false);

  udelay(50);

  tmp &= ~srbm_soft_reset;
  r100_mm_wreg(rdev, (0x0E60), (tmp), false);
  tmp = r100_mm_rreg(rdev, (0x0E60), false);
 }


 udelay(50);

 evergreen_mc_resume(rdev, &save);
 udelay(50);

 evergreen_print_gpu_status_regs(rdev);
}

void evergreen_gpu_pci_config_reset(struct radeon_device *rdev)
{
 struct evergreen_mc_save save;
 u32 tmp, i;

 ({ do {} while (0); _dev_info(rdev->dev, "GPU pci config reset\n"); });




 r100_mm_wreg(rdev, (0x86D8), ((1 << 28) | (1 << 26)), false);
 udelay(50);

 tmp = r100_mm_rreg(rdev, (0xd000), false);
 tmp &= ~(1 << 0);
 r100_mm_wreg(rdev, (0xd000), (tmp), false);



 r600_rlc_stop(rdev);

 udelay(50);


 rv770_set_clk_bypass_mode(rdev);

 pci_clear_master(rdev->pdev);

 evergreen_mc_stop(rdev, &save);
 if (evergreen_mc_wait_for_idle(rdev)) {
  ({ do {} while (0); _dev_warn(rdev->dev, "Wait for MC idle timed out !\n"); });
 }

 radeon_pci_config_reset(rdev);

 for (i = 0; i < rdev->usec_timeout; i++) {
  if (r100_mm_rreg(rdev, (0x5428), false) != 0xffffffff)
   break;
  udelay(1);
 }
}

int evergreen_asic_reset(struct radeon_device *rdev, bool hard)
{
 u32 reset_mask;

 if (hard) {
  evergreen_gpu_pci_config_reset(rdev);
  return 0;
 }

 reset_mask = evergreen_gpu_check_soft_reset(rdev);

 if (reset_mask)
  r600_set_bios_scratch_engine_hung(rdev, true);


 evergreen_gpu_soft_reset(rdev, reset_mask);

 reset_mask = evergreen_gpu_check_soft_reset(rdev);


 if (reset_mask && radeon_hard_reset)
  evergreen_gpu_pci_config_reset(rdev);

 reset_mask = evergreen_gpu_check_soft_reset(rdev);

 if (!reset_mask)
  r600_set_bios_scratch_engine_hung(rdev, false);

 return 0;
}
# 4092 "drivers/gpu/drm/radeon/evergreen.c"
bool evergreen_gfx_is_lockup(struct radeon_device *rdev, struct radeon_ring *ring)
{
 u32 reset_mask = evergreen_gpu_check_soft_reset(rdev);

 if (!(reset_mask & ((1 << 0) |
       (1 << 1) |
       (1 << 3)))) {
  radeon_ring_lockup_update(rdev, ring);
  return false;
 }
 return radeon_ring_test_lockup(rdev, ring);
}







void sumo_rlc_fini(struct radeon_device *rdev)
{
 int r;


 if (rdev->rlc.save_restore_obj) {
  r = radeon_bo_reserve(rdev->rlc.save_restore_obj, false);
  if (__builtin_expect(!!(r != 0), 0))
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) reserve RLC sr bo failed\n", r); });
  radeon_bo_unpin(rdev->rlc.save_restore_obj);
  radeon_bo_unreserve(rdev->rlc.save_restore_obj);

  radeon_bo_unref(&rdev->rlc.save_restore_obj);
  rdev->rlc.save_restore_obj = ((void *)0);
 }


 if (rdev->rlc.clear_state_obj) {
  r = radeon_bo_reserve(rdev->rlc.clear_state_obj, false);
  if (__builtin_expect(!!(r != 0), 0))
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) reserve RLC c bo failed\n", r); });
  radeon_bo_unpin(rdev->rlc.clear_state_obj);
  radeon_bo_unreserve(rdev->rlc.clear_state_obj);

  radeon_bo_unref(&rdev->rlc.clear_state_obj);
  rdev->rlc.clear_state_obj = ((void *)0);
 }


 if (rdev->rlc.cp_table_obj) {
  r = radeon_bo_reserve(rdev->rlc.cp_table_obj, false);
  if (__builtin_expect(!!(r != 0), 0))
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) reserve RLC cp table bo failed\n", r); });
  radeon_bo_unpin(rdev->rlc.cp_table_obj);
  radeon_bo_unreserve(rdev->rlc.cp_table_obj);

  radeon_bo_unref(&rdev->rlc.cp_table_obj);
  rdev->rlc.cp_table_obj = ((void *)0);
 }
}



int sumo_rlc_init(struct radeon_device *rdev)
{
 const u32 *src_ptr;
 volatile u32 *dst_ptr;
 u32 dws, data, i, j, k, reg_num;
 u32 reg_list_num, reg_list_hdr_blk_index, reg_list_blk_index = 0;
 u64 reg_list_mc_addr;
 const struct cs_section_def *cs_data;
 int r;

 src_ptr = rdev->rlc.reg_list;
 dws = rdev->rlc.reg_list_size;
 if (rdev->family >= CHIP_BONAIRE) {
  dws += (5 * 16) + 48 + 48 + 64;
 }
 cs_data = rdev->rlc.cs_data;

 if (src_ptr) {

  if (rdev->rlc.save_restore_obj == ((void *)0)) {
   r = radeon_bo_create(rdev, dws * 4, ((1UL) << (12)), true,
          0x4, 0, ((void *)0),
          ((void *)0), &rdev->rlc.save_restore_obj);
   if (r) {
    ({ do {} while (0); _dev_warn(rdev->dev, "(%d) create RLC sr bo failed\n", r); });
    return r;
   }
  }

  r = radeon_bo_reserve(rdev->rlc.save_restore_obj, false);
  if (__builtin_expect(!!(r != 0), 0)) {
   sumo_rlc_fini(rdev);
   return r;
  }
  r = radeon_bo_pin(rdev->rlc.save_restore_obj, 0x4,
      &rdev->rlc.save_restore_gpu_addr);
  if (r) {
   radeon_bo_unreserve(rdev->rlc.save_restore_obj);
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) pin RLC sr bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }

  r = radeon_bo_kmap(rdev->rlc.save_restore_obj, (void **)&rdev->rlc.sr_ptr);
  if (r) {
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) map RLC sr bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }

  dst_ptr = rdev->rlc.sr_ptr;
  if (rdev->family >= CHIP_TAHITI) {

   for (i = 0; i < rdev->rlc.reg_list_size; i++)
    dst_ptr[i] = (( __le32)(__u32)(src_ptr[i]));
  } else {






   for (i = 0; i < dws; i++) {
    data = src_ptr[i] >> 2;
    i++;
    if (i < dws)
     data |= (src_ptr[i] >> 2) << 16;
    j = (((i - 1) * 3) / 2);
    dst_ptr[j] = (( __le32)(__u32)(data));
   }
   j = ((i * 3) / 2);
   dst_ptr[j] = (( __le32)(__u32)(0x00000000));
  }
  radeon_bo_kunmap(rdev->rlc.save_restore_obj);
  radeon_bo_unreserve(rdev->rlc.save_restore_obj);
 }

 if (cs_data) {

  if (rdev->family >= CHIP_BONAIRE) {
   rdev->rlc.clear_state_size = dws = cik_get_csb_size(rdev);
  } else if (rdev->family >= CHIP_TAHITI) {
   rdev->rlc.clear_state_size = si_get_csb_size(rdev);
   dws = rdev->rlc.clear_state_size + (256 / 4);
  } else {
   reg_list_num = 0;
   dws = 0;
   for (i = 0; cs_data[i].section != ((void *)0); i++) {
    for (j = 0; cs_data[i].section[j].extent != ((void *)0); j++) {
     reg_list_num++;
     dws += cs_data[i].section[j].reg_count;
    }
   }
   reg_list_blk_index = (3 * reg_list_num + 2);
   dws += reg_list_blk_index;
   rdev->rlc.clear_state_size = dws;
  }

  if (rdev->rlc.clear_state_obj == ((void *)0)) {
   r = radeon_bo_create(rdev, dws * 4, ((1UL) << (12)), true,
          0x4, 0, ((void *)0),
          ((void *)0), &rdev->rlc.clear_state_obj);
   if (r) {
    ({ do {} while (0); _dev_warn(rdev->dev, "(%d) create RLC c bo failed\n", r); });
    sumo_rlc_fini(rdev);
    return r;
   }
  }
  r = radeon_bo_reserve(rdev->rlc.clear_state_obj, false);
  if (__builtin_expect(!!(r != 0), 0)) {
   sumo_rlc_fini(rdev);
   return r;
  }
  r = radeon_bo_pin(rdev->rlc.clear_state_obj, 0x4,
      &rdev->rlc.clear_state_gpu_addr);
  if (r) {
   radeon_bo_unreserve(rdev->rlc.clear_state_obj);
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) pin RLC c bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }

  r = radeon_bo_kmap(rdev->rlc.clear_state_obj, (void **)&rdev->rlc.cs_ptr);
  if (r) {
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) map RLC c bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }

  dst_ptr = rdev->rlc.cs_ptr;
  if (rdev->family >= CHIP_BONAIRE) {
   cik_get_csb_buffer(rdev, dst_ptr);
  } else if (rdev->family >= CHIP_TAHITI) {
   reg_list_mc_addr = rdev->rlc.clear_state_gpu_addr + 256;
   dst_ptr[0] = (( __le32)(__u32)(((u32)(((reg_list_mc_addr) >> 16) >> 16))));
   dst_ptr[1] = (( __le32)(__u32)(((u32)((reg_list_mc_addr) & 0xffffffff))));
   dst_ptr[2] = (( __le32)(__u32)(rdev->rlc.clear_state_size));
   si_get_csb_buffer(rdev, &dst_ptr[(256/4)]);
  } else {
   reg_list_hdr_blk_index = 0;
   reg_list_mc_addr = rdev->rlc.clear_state_gpu_addr + (reg_list_blk_index * 4);
   data = ((u32)(((reg_list_mc_addr) >> 16) >> 16));
   dst_ptr[reg_list_hdr_blk_index] = (( __le32)(__u32)(data));
   reg_list_hdr_blk_index++;
   for (i = 0; cs_data[i].section != ((void *)0); i++) {
    for (j = 0; cs_data[i].section[j].extent != ((void *)0); j++) {
     reg_num = cs_data[i].section[j].reg_count;
     data = reg_list_mc_addr & 0xffffffff;
     dst_ptr[reg_list_hdr_blk_index] = (( __le32)(__u32)(data));
     reg_list_hdr_blk_index++;

     data = (cs_data[i].section[j].reg_index * 4) & 0xffffffff;
     dst_ptr[reg_list_hdr_blk_index] = (( __le32)(__u32)(data));
     reg_list_hdr_blk_index++;

     data = 0x08000000 | (reg_num * 4);
     dst_ptr[reg_list_hdr_blk_index] = (( __le32)(__u32)(data));
     reg_list_hdr_blk_index++;

     for (k = 0; k < reg_num; k++) {
      data = cs_data[i].section[j].extent[k];
      dst_ptr[reg_list_blk_index + k] = (( __le32)(__u32)(data));
     }
     reg_list_mc_addr += reg_num * 4;
     reg_list_blk_index += reg_num;
    }
   }
   dst_ptr[reg_list_hdr_blk_index] = (( __le32)(__u32)(0x00000001));
  }
  radeon_bo_kunmap(rdev->rlc.clear_state_obj);
  radeon_bo_unreserve(rdev->rlc.clear_state_obj);
 }

 if (rdev->rlc.cp_table_size) {
  if (rdev->rlc.cp_table_obj == ((void *)0)) {
   r = radeon_bo_create(rdev, rdev->rlc.cp_table_size,
          ((1UL) << (12)), true,
          0x4, 0, ((void *)0),
          ((void *)0), &rdev->rlc.cp_table_obj);
   if (r) {
    ({ do {} while (0); _dev_warn(rdev->dev, "(%d) create RLC cp table bo failed\n", r); });
    sumo_rlc_fini(rdev);
    return r;
   }
  }

  r = radeon_bo_reserve(rdev->rlc.cp_table_obj, false);
  if (__builtin_expect(!!(r != 0), 0)) {
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) reserve RLC cp table bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }
  r = radeon_bo_pin(rdev->rlc.cp_table_obj, 0x4,
      &rdev->rlc.cp_table_gpu_addr);
  if (r) {
   radeon_bo_unreserve(rdev->rlc.cp_table_obj);
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) pin RLC cp_table bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }
  r = radeon_bo_kmap(rdev->rlc.cp_table_obj, (void **)&rdev->rlc.cp_table_ptr);
  if (r) {
   ({ do {} while (0); _dev_warn(rdev->dev, "(%d) map RLC cp table bo failed\n", r); });
   sumo_rlc_fini(rdev);
   return r;
  }

  cik_init_cp_pg_table(rdev);

  radeon_bo_kunmap(rdev->rlc.cp_table_obj);
  radeon_bo_unreserve(rdev->rlc.cp_table_obj);

 }

 return 0;
}

static void evergreen_rlc_start(struct radeon_device *rdev)
{
 u32 mask = (1 << 0);

 if (rdev->flags & RADEON_IS_IGP) {
  mask |= (1 << 7) | (1 << 8);
 }

 r100_mm_wreg(rdev, (0x3f00), (mask), false);
}

int evergreen_rlc_resume(struct radeon_device *rdev)
{
 u32 i;
 const __be32 *fw_data;

 if (!rdev->rlc_fw)
  return -22;

 r600_rlc_stop(rdev);

 r100_mm_wreg(rdev, (0x3f0c), (0), false);

 if (rdev->flags & RADEON_IS_IGP) {
  if (rdev->family == CHIP_ARUBA) {
   u32 always_on_bitmap =
    3 | (3 << (16 * rdev->config.cayman.max_shader_engines));

   u32 tmp = (r100_mm_rreg(rdev, (0x8950), false) & 0xffff0000) >> 16;
   tmp |= 0xffffffff << rdev->config.cayman.max_simds_per_se;
   tmp = (__builtin_constant_p(~tmp) ? ((((unsigned int) ((!!((~tmp) & (1ULL << 0))) + (!!((~tmp) & (1ULL << 1))) + (!!((~tmp) & (1ULL << 2))) + (!!((~tmp) & (1ULL << 3))) + (!!((~tmp) & (1ULL << 4))) + (!!((~tmp) & (1ULL << 5))) + (!!((~tmp) & (1ULL << 6))) + (!!((~tmp) & (1ULL << 7))))) + ((unsigned int) ((!!(((~tmp) >> 8) & (1ULL << 0))) + (!!(((~tmp) >> 8) & (1ULL << 1))) + (!!(((~tmp) >> 8) & (1ULL << 2))) + (!!(((~tmp) >> 8) & (1ULL << 3))) + (!!(((~tmp) >> 8) & (1ULL << 4))) + (!!(((~tmp) >> 8) & (1ULL << 5))) + (!!(((~tmp) >> 8) & (1ULL << 6))) + (!!(((~tmp) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((~tmp) >> 16) & (1ULL << 0))) + (!!(((~tmp) >> 16) & (1ULL << 1))) + (!!(((~tmp) >> 16) & (1ULL << 2))) + (!!(((~tmp) >> 16) & (1ULL << 3))) + (!!(((~tmp) >> 16) & (1ULL << 4))) + (!!(((~tmp) >> 16) & (1ULL << 5))) + (!!(((~tmp) >> 16) & (1ULL << 6))) + (!!(((~tmp) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((~tmp) >> 16) >> 8) & (1ULL << 0))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 1))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 2))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 3))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 4))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 5))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 6))) + (!!((((~tmp) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(~tmp));
   if (tmp == rdev->config.cayman.max_simds_per_se) {
    r100_mm_wreg(rdev, (0x3fe8), (always_on_bitmap), false);
    r100_mm_wreg(rdev, (0x3fec), (0x00601004), false);
    r100_mm_wreg(rdev, (0x3fe4), (0xffffffff), false);
    r100_mm_wreg(rdev, (0x3f18), (0x00000000), false);
    r100_mm_wreg(rdev, (0x3f14), (0x00002000), false);
   }
  } else {
   r100_mm_wreg(rdev, (0x3f14), (0), false);
   r100_mm_wreg(rdev, (0x3f18), (0), false);
  }
  r100_mm_wreg(rdev, (0x3f10), (rdev->rlc.save_restore_gpu_addr >> 8), false);
  r100_mm_wreg(rdev, (0x3f20), (rdev->rlc.clear_state_gpu_addr >> 8), false);
 } else {
  r100_mm_wreg(rdev, (0x3f10), (0), false);
  r100_mm_wreg(rdev, (0x3f20), (0), false);
  r100_mm_wreg(rdev, (0x3f1c), (0), false);
  r100_mm_wreg(rdev, (0x3f14), (0), false);
  r100_mm_wreg(rdev, (0x3f18), (0), false);
 }
 r100_mm_wreg(rdev, (0x3f44), (0), false);
 r100_mm_wreg(rdev, (0x3f48), (0), false);

 fw_data = (const __be32 *)rdev->rlc_fw->data;
 if (rdev->family >= CHIP_ARUBA) {
  for (i = 0; i < 1536; i++) {
   r100_mm_wreg(rdev, (0x3f2c), (i), false);
   r100_mm_wreg(rdev, (0x3f30), (__be32_to_cpup(fw_data++)), false);
  }
 } else if (rdev->family >= CHIP_CAYMAN) {
  for (i = 0; i < 1024; i++) {
   r100_mm_wreg(rdev, (0x3f2c), (i), false);
   r100_mm_wreg(rdev, (0x3f30), (__be32_to_cpup(fw_data++)), false);
  }
 } else {
  for (i = 0; i < 768; i++) {
   r100_mm_wreg(rdev, (0x3f2c), (i), false);
   r100_mm_wreg(rdev, (0x3f30), (__be32_to_cpup(fw_data++)), false);
  }
 }
 r100_mm_wreg(rdev, (0x3f2c), (0), false);

 evergreen_rlc_start(rdev);

 return 0;
}



u32 evergreen_get_vblank_counter(struct radeon_device *rdev, int crtc)
{
 if (crtc >= rdev->num_crtc)
  return 0;
 else
  return r100_mm_rreg(rdev, (0x6e98 + crtc_offsets[crtc]), false);
}

void evergreen_disable_interrupt_state(struct radeon_device *rdev)
{
 int i;
 u32 tmp;

 if (rdev->family >= CHIP_CAYMAN) {
  cayman_cp_int_cntl_setup(rdev, 0,
      (1 << 19) | (1 << 20));
  cayman_cp_int_cntl_setup(rdev, 1, 0);
  cayman_cp_int_cntl_setup(rdev, 2, 0);
  tmp = r100_mm_rreg(rdev, (0xd82c), false) & ~(1 << 0);
  r100_mm_wreg(rdev, (0xd82c), (tmp), false);
 } else
  r100_mm_wreg(rdev, (0xc124), ((1 << 19) | (1 << 20)), false);
 tmp = r100_mm_rreg(rdev, (0xd02c), false) & ~(1 << 0);
 r100_mm_wreg(rdev, (0xd02c), (tmp), false);
 r100_mm_wreg(rdev, (0x8060), (0), false);
 r100_mm_wreg(rdev, (0xEA0), (0), false);
 for (i = 0; i < rdev->num_crtc; i++)
  r100_mm_wreg(rdev, (0x6b40 + crtc_offsets[i]), (0), false);
 for (i = 0; i < rdev->num_crtc; i++)
  r100_mm_wreg(rdev, (0x685c + crtc_offsets[i]), (0), false);


 if (!((rdev->family >= CHIP_BARTS)))
  r100_mm_wreg(rdev, (0x66c8), (0), false);
 r100_mm_wreg(rdev, (0x67c8), (0), false);

 for (i = 0; i < 6; i++)
  do { uint32_t tmp_ = r100_mm_rreg(rdev, ((0x6020 + (i * 0xc))), false); tmp_ &= ((1 << 8)); tmp_ |= ((0) & ~((1 << 8))); r100_mm_wreg(rdev, ((0x6020 + (i * 0xc))), (tmp_), false); } while (0);
}


int evergreen_irq_set(struct radeon_device *rdev)
{
 int i;
 u32 cp_int_cntl = (1 << 19) | (1 << 20);
 u32 cp_int_cntl1 = 0, cp_int_cntl2 = 0;
 u32 grbm_int_cntl = 0;
 u32 dma_cntl, dma_cntl1 = 0;
 u32 thermal_int = 0;

 if (!rdev->irq.installed) {
  ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Can't enable IRQ/MSI because no handler is installed\n"); do { __asm__ __volatile__ ( "1:\n\t" "ebreak\n" ".pushsection __bug_table,\"aw\"\n\t" "2:\n\t" ".word" " 1b - 2b" "\n\t" ".word" " %0 - 2b" "\n\t" ".half" " %1\n\t" ".half" " %2" "\n\t" ".org 2b + %3\n\t" ".popsection" : : "i" ("drivers/gpu/drm/radeon/evergreen.c"), "i" (4502), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
  return -22;
 }

 if (!rdev->ih.enabled) {
  r600_disable_interrupts(rdev);

  evergreen_disable_interrupt_state(rdev);
  return 0;
 }

 if (rdev->family == CHIP_ARUBA)
  thermal_int = r100_mm_rreg(rdev, (0x738), false) &
   ~((1 << 24) | (1 << 25));
 else
  thermal_int = r100_mm_rreg(rdev, (0x734), false) &
   ~((1 << 24) | (1 << 25));

 dma_cntl = r100_mm_rreg(rdev, (0xd02c), false) & ~(1 << 0);

 if (rdev->family >= CHIP_CAYMAN) {

  if (atomic_read(&rdev->irq.ring_int[0])) {
   __drm_dbg(DRM_UT_CORE, "evergreen_irq_set: sw int gfx\n");
   cp_int_cntl |= (1 << 26);
  }
  if (atomic_read(&rdev->irq.ring_int[1])) {
   __drm_dbg(DRM_UT_CORE, "evergreen_irq_set: sw int cp1\n");
   cp_int_cntl1 |= (1 << 26);
  }
  if (atomic_read(&rdev->irq.ring_int[2])) {
   __drm_dbg(DRM_UT_CORE, "evergreen_irq_set: sw int cp2\n");
   cp_int_cntl2 |= (1 << 26);
  }
 } else {
  if (atomic_read(&rdev->irq.ring_int[0])) {
   __drm_dbg(DRM_UT_CORE, "evergreen_irq_set: sw int gfx\n");
   cp_int_cntl |= (1 << 31);
   cp_int_cntl |= (1 << 26);
  }
 }

 if (atomic_read(&rdev->irq.ring_int[3])) {
  __drm_dbg(DRM_UT_CORE, "r600_irq_set: sw int dma\n");
  dma_cntl |= (1 << 0);
 }

 if (rdev->family >= CHIP_CAYMAN) {
  dma_cntl1 = r100_mm_rreg(rdev, (0xd82c), false) & ~(1 << 0);
  if (atomic_read(&rdev->irq.ring_int[4])) {
   __drm_dbg(DRM_UT_CORE, "r600_irq_set: sw int dma1\n");
   dma_cntl1 |= (1 << 0);
  }
 }

 if (rdev->irq.dpm_thermal) {
  __drm_dbg(DRM_UT_CORE, "dpm thermal\n");
  thermal_int |= (1 << 24) | (1 << 25);
 }

 if (rdev->family >= CHIP_CAYMAN) {
  cayman_cp_int_cntl_setup(rdev, 0, cp_int_cntl);
  cayman_cp_int_cntl_setup(rdev, 1, cp_int_cntl1);
  cayman_cp_int_cntl_setup(rdev, 2, cp_int_cntl2);
 } else
  r100_mm_wreg(rdev, (0xc124), (cp_int_cntl), false);

 r100_mm_wreg(rdev, (0xd02c), (dma_cntl), false);

 if (rdev->family >= CHIP_CAYMAN)
  r100_mm_wreg(rdev, (0xd82c), (dma_cntl1), false);

 r100_mm_wreg(rdev, (0x8060), (grbm_int_cntl), false);

 for (i = 0; i < rdev->num_crtc; i++) {
  radeon_irq_kms_set_irq_n_enabled(
      rdev, 0x6b40 + crtc_offsets[i],
      (1 << 0),
      rdev->irq.crtc_vblank_int[i] ||
      atomic_read(&rdev->irq.pflip[i]), "vblank", i);
 }

 for (i = 0; i < rdev->num_crtc; i++)
  r100_mm_wreg(rdev, (0x685c + crtc_offsets[i]), ((1 << 0)), false);

 for (i = 0; i < 6; i++) {
  radeon_irq_kms_set_irq_n_enabled(
      rdev, (0x6020 + (i * 0xc)),
      (1 << 16) | (1 << 24),
      rdev->irq.hpd[i], "HPD", i);
 }

 if (rdev->family == CHIP_ARUBA)
  r100_mm_wreg(rdev, (0x738), (thermal_int), false);
 else
  r100_mm_wreg(rdev, (0x734), (thermal_int), false);

 for (i = 0; i < 6; i++) {
  radeon_irq_kms_set_irq_n_enabled(
      rdev, 0x712c + crtc_offsets[i],
      (1 << 28),
      rdev->irq.afmt[i], "HDMI", i);
 }


 r100_mm_rreg(rdev, (0x0E50), false);

 return 0;
}


static void evergreen_irq_ack(struct radeon_device *rdev)
{
 int i, j;
 u32 *grph_int = rdev->irq.stat_regs.evergreen.grph_int;
 u32 *disp_int = rdev->irq.stat_regs.evergreen.disp_int;
 u32 *afmt_status = rdev->irq.stat_regs.evergreen.afmt_status;

 for (i = 0; i < 6; i++) {
  disp_int[i] = r100_mm_rreg(rdev, (evergreen_disp_int_status[i]), false);
  afmt_status[i] = r100_mm_rreg(rdev, (0x7128 + crtc_offsets[i]), false);
  if (i < rdev->num_crtc)
   grph_int[i] = r100_mm_rreg(rdev, (0x6858 + crtc_offsets[i]), false);
 }


 for (i = 0; i < rdev->num_crtc; i += 2) {
  for (j = i; j < (i + 2); j++) {
   if (grph_int[j] & (1 << 0))
    r100_mm_wreg(rdev, (0x6858 + crtc_offsets[j]), ((1 << 8)), false);

  }

  for (j = i; j < (i + 2); j++) {
   if (disp_int[j] & (1 << 3))
    r100_mm_wreg(rdev, (0x6bbc + crtc_offsets[j]), ((1 << 4)), false);

   if (disp_int[j] & (1 << 2))
    r100_mm_wreg(rdev, (0x6bb8 + crtc_offsets[j]), ((1 << 4)), false);

  }
 }

 for (i = 0; i < 6; i++) {
  if (disp_int[i] & (1 << 17))
   do { uint32_t tmp_ = r100_mm_rreg(rdev, ((0x6020 + (i * 0xc))), false); tmp_ &= (~((1 << 0))); tmp_ |= (((1 << 0)) & ~(~((1 << 0)))); r100_mm_wreg(rdev, ((0x6020 + (i * 0xc))), (tmp_), false); } while (0);
 }

 for (i = 0; i < 6; i++) {
  if (disp_int[i] & (1 << 18))
   do { uint32_t tmp_ = r100_mm_rreg(rdev, ((0x6020 + (i * 0xc))), false); tmp_ &= (~((1 << 20))); tmp_ |= (((1 << 20)) & ~(~((1 << 20)))); r100_mm_wreg(rdev, ((0x6020 + (i * 0xc))), (tmp_), false); } while (0);
 }

 for (i = 0; i < 6; i++) {
  if (afmt_status[i] & (1 << 28))
   do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x712c + crtc_offsets[i]), false); tmp_ &= (~((1 << 29))); tmp_ |= (((1 << 29)) & ~(~((1 << 29)))); r100_mm_wreg(rdev, (0x712c + crtc_offsets[i]), (tmp_), false); } while (0);

 }
}

static void evergreen_irq_disable(struct radeon_device *rdev)
{
 r600_disable_interrupts(rdev);

 ( (__builtin_constant_p(1) && (1)<=5) ? udelay((1)*1000) : ({unsigned long __ms=(1); while (__ms--) udelay(1000);}));
 evergreen_irq_ack(rdev);
 evergreen_disable_interrupt_state(rdev);
}

void evergreen_irq_suspend(struct radeon_device *rdev)
{
 evergreen_irq_disable(rdev);
 r600_rlc_stop(rdev);
}

static u32 evergreen_get_ih_wptr(struct radeon_device *rdev)
{
 u32 wptr, tmp;

 if (rdev->wb.enabled)
  wptr = (( __u32)(__le32)(rdev->wb.wb[2048/4]));
 else
  wptr = r100_mm_rreg(rdev, (0x3e0c), false);

 if (wptr & (1 << 0)) {
  wptr &= ~(1 << 0);




  ({ do {} while (0); _dev_warn(rdev->dev, "IH ring buffer overflow (0x%08X, 0x%08X, 0x%08X)\n", wptr, rdev->ih.rptr, (wptr + 16) & rdev->ih.ptr_mask); });

  rdev->ih.rptr = (wptr + 16) & rdev->ih.ptr_mask;
  tmp = r100_mm_rreg(rdev, (0x3e00), false);
  tmp |= (1 << 31);
  r100_mm_wreg(rdev, (0x3e00), (tmp), false);
 }
 return (wptr & rdev->ih.ptr_mask);
}

int evergreen_irq_process(struct radeon_device *rdev)
{
 u32 *disp_int = rdev->irq.stat_regs.evergreen.disp_int;
 u32 *afmt_status = rdev->irq.stat_regs.evergreen.afmt_status;
 u32 crtc_idx, hpd_idx, afmt_idx;
 u32 mask;
 u32 wptr;
 u32 rptr;
 u32 src_id, src_data;
 u32 ring_index;
 bool queue_hotplug = false;
 bool queue_hdmi = false;
 bool queue_dp = false;
 bool queue_thermal = false;
 u32 status, addr;
 const char *event_name;

 if (!rdev->ih.enabled || rdev->shutdown)
  return IRQ_NONE;

 wptr = evergreen_get_ih_wptr(rdev);

restart_ih:

 if (atomic_xchg(&rdev->ih.lock, 1))
  return IRQ_NONE;

 rptr = rdev->ih.rptr;
 __drm_dbg(DRM_UT_CORE, "evergreen_irq_process start: rptr %d, wptr %d\n", rptr, wptr);


 __asm__ __volatile__ ("fence " "ir" "," "ir" : : : "memory");


 evergreen_irq_ack(rdev);

 while (rptr != wptr) {

  ring_index = rptr / 4;
  src_id = (( __u32)(__le32)(rdev->ih.ring[ring_index])) & 0xff;
  src_data = (( __u32)(__le32)(rdev->ih.ring[ring_index + 1])) & 0xfffffff;

  switch (src_id) {
  case 1:
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
   crtc_idx = src_id - 1;

   if (src_data == 0) {
    mask = (1 << 3);
    event_name = "vblank";

    if (rdev->irq.crtc_vblank_int[crtc_idx]) {
     drm_handle_vblank(rdev->ddev, crtc_idx);
     rdev->pm.vblank_sync = true;
     __wake_up(&rdev->irq.vblank_queue, (0x0001 | 0x0002), 1, ((void *)0));
    }
    if (atomic_read(&rdev->irq.pflip[crtc_idx])) {
     radeon_crtc_handle_vblank(rdev,
          crtc_idx);
    }

   } else if (src_data == 1) {
    mask = (1 << 2);
    event_name = "vline";
   } else {
    __drm_dbg(DRM_UT_CORE, "Unhandled interrupt: %d %d\n", src_id, src_data);

    break;
   }

   if (!(disp_int[crtc_idx] & mask)) {
    __drm_dbg(DRM_UT_CORE, "IH: D%d %s - IH event w/o asserted irq bit?\n", crtc_idx + 1, event_name);

   }

   disp_int[crtc_idx] &= ~mask;
   __drm_dbg(DRM_UT_CORE, "IH: D%d %s\n", crtc_idx + 1, event_name);

   break;
  case 8:
  case 10:
  case 12:
  case 14:
  case 16:
  case 18:
   __drm_dbg(DRM_UT_CORE, "IH: D%d flip\n", ((src_id - 8) >> 1) + 1);
   if (radeon_use_pflipirq > 0)
    radeon_crtc_handle_flip(rdev, (src_id - 8) >> 1);
   break;
  case 42:
   if (src_data <= 5) {
    hpd_idx = src_data;
    mask = (1 << 17);
    queue_hotplug = true;
    event_name = "HPD";

   } else if (src_data <= 11) {
    hpd_idx = src_data - 6;
    mask = (1 << 18);
    queue_dp = true;
    event_name = "HPD_RX";

   } else {
    __drm_dbg(DRM_UT_CORE, "Unhandled interrupt: %d %d\n", src_id, src_data);

    break;
   }

   if (!(disp_int[hpd_idx] & mask))
    __drm_dbg(DRM_UT_CORE, "IH: IH event w/o asserted irq bit?\n");

   disp_int[hpd_idx] &= ~mask;
   __drm_dbg(DRM_UT_CORE, "IH: %s%d\n", event_name, hpd_idx + 1);

   break;
  case 44:
   afmt_idx = src_data;
   if (!(afmt_status[afmt_idx] & (1 << 28)))
    __drm_dbg(DRM_UT_CORE, "IH: IH event w/o asserted irq bit?\n");

   if (afmt_idx > 5) {
    __drm_err("Unhandled interrupt: %d %d\n", src_id, src_data);

    break;
   }
   afmt_status[afmt_idx] &= ~(1 << 28);
   queue_hdmi = true;
   __drm_dbg(DRM_UT_CORE, "IH: HDMI%d\n", afmt_idx + 1);
   break;
  case 96:
   __drm_err("SRBM_READ_ERROR: 0x%x\n", r100_mm_rreg(rdev, (0xE98), false));
   r100_mm_wreg(rdev, (0xEA8), (0x1), false);
   break;
  case 124:
   __drm_dbg(DRM_UT_CORE, "IH: UVD int: 0x%08x\n", src_data);
   radeon_fence_process(rdev, 5);
   break;
  case 146:
  case 147:
   addr = r100_mm_rreg(rdev, (0x14FC), false);
   status = r100_mm_rreg(rdev, (0x14DC), false);

   do { uint32_t tmp_ = r100_mm_rreg(rdev, (0x1434), false); tmp_ &= (~1); tmp_ |= ((1) & ~(~1)); r100_mm_wreg(rdev, (0x1434), (tmp_), false); } while (0);
   if (addr == 0x0 && status == 0x0)
    break;
   ({ do {} while (0); _dev_err(rdev->dev, "GPU fault detected: %d 0x%08x\n", src_id, src_data); });
   ({ do {} while (0); _dev_err(rdev->dev, "  VM_CONTEXT1_PROTECTION_FAULT_ADDR   0x%08X\n", addr); });

   ({ do {} while (0); _dev_err(rdev->dev, "  VM_CONTEXT1_PROTECTION_FAULT_STATUS 0x%08X\n", status); });

   cayman_vm_decode_fault(rdev, status, addr);
   break;
  case 176:
  case 177:
  case 178:
   __drm_dbg(DRM_UT_CORE, "IH: CP int: 0x%08x\n", src_data);
   radeon_fence_process(rdev, 0);
   break;
  case 181:
   __drm_dbg(DRM_UT_CORE, "IH: CP EOP\n");
   if (rdev->family >= CHIP_CAYMAN) {
    switch (src_data) {
    case 0:
     radeon_fence_process(rdev, 0);
     break;
    case 1:
     radeon_fence_process(rdev, 1);
     break;
    case 2:
     radeon_fence_process(rdev, 2);
     break;
    }
   } else
    radeon_fence_process(rdev, 0);
   break;
  case 224:
   __drm_dbg(DRM_UT_CORE, "IH: DMA trap\n");
   radeon_fence_process(rdev, 3);
   break;
  case 230:
   __drm_dbg(DRM_UT_CORE, "IH: thermal low to high\n");
   rdev->pm.dpm.thermal.high_to_low = false;
   queue_thermal = true;
   break;
  case 231:
   __drm_dbg(DRM_UT_CORE, "IH: thermal high to low\n");
   rdev->pm.dpm.thermal.high_to_low = true;
   queue_thermal = true;
   break;
  case 233:
   __drm_dbg(DRM_UT_CORE, "IH: GUI idle\n");
   break;
  case 244:
   if (rdev->family >= CHIP_CAYMAN) {
    __drm_dbg(DRM_UT_CORE, "IH: DMA1 trap\n");
    radeon_fence_process(rdev, 4);
   }
   break;
  default:
   __drm_dbg(DRM_UT_CORE, "Unhandled interrupt: %d %d\n", src_id, src_data);
   break;
  }


  rptr += 16;
  rptr &= rdev->ih.ptr_mask;
  r100_mm_wreg(rdev, (0x3e08), (rptr), false);
 }
 if (queue_dp)
  schedule_work(&rdev->dp_work);
 if (queue_hotplug)
  schedule_delayed_work(&rdev->hotplug_work, 0);
 if (queue_hdmi)
  schedule_work(&rdev->audio_work);
 if (queue_thermal && rdev->pm.dpm_enabled)
  schedule_work(&rdev->pm.dpm.thermal.work);
 rdev->ih.rptr = rptr;
 atomic_set(&rdev->ih.lock, 0);


 wptr = evergreen_get_ih_wptr(rdev);
 if (wptr != rptr)
  goto restart_ih;

 return IRQ_HANDLED;
}

static void evergreen_uvd_init(struct radeon_device *rdev)
{
 int r;

 if (!rdev->has_uvd)
  return;

 r = radeon_uvd_init(rdev);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed UVD (%d) init.\n", r); });






  rdev->has_uvd = false;
  return;
 }
 rdev->ring[5].ring_obj = ((void *)0);
 r600_ring_init(rdev, &rdev->ring[5], 4096);
}

static void evergreen_uvd_start(struct radeon_device *rdev)
{
 int r;

 if (!rdev->has_uvd)
  return;

 r = uvd_v2_2_resume(rdev);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed UVD resume (%d).\n", r); });
  goto error;
 }
 r = radeon_fence_driver_start_ring(rdev, 5);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed initializing UVD fences (%d).\n", r); });
  goto error;
 }
 return;

error:
 rdev->ring[5].ring_size = 0;
}

static void evergreen_uvd_resume(struct radeon_device *rdev)
{
 struct radeon_ring *ring;
 int r;

 if (!rdev->has_uvd || !rdev->ring[5].ring_size)
  return;

 ring = &rdev->ring[5];
 r = radeon_ring_init(rdev, ring, ring->ring_size, 0, ((0 << 30) | (((0xeffc) >> 2) & 0xFFFF) | ((0) & 0x3FFF) << 16));
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed initializing UVD ring (%d).\n", r); });
  return;
 }
 r = uvd_v1_0_init(rdev);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed initializing UVD (%d).\n", r); });
  return;
 }
}

static int evergreen_startup(struct radeon_device *rdev)
{
 struct radeon_ring *ring;
 int r;


 evergreen_pcie_gen2_enable(rdev);

 evergreen_program_aspm(rdev);


 r = r600_vram_scratch_init(rdev);
 if (r)
  return r;

 evergreen_mc_program(rdev);

 if (((rdev->family >= CHIP_BARTS)) && !rdev->pm.dpm_enabled) {
  r = ni_mc_load_microcode(rdev);
  if (r) {
   __drm_err("Failed to load MC firmware!\n");
   return r;
  }
 }

 if (rdev->flags & RADEON_IS_AGP) {
  evergreen_agp_enable(rdev);
 } else {
  r = evergreen_pcie_gart_enable(rdev);
  if (r)
   return r;
 }
 evergreen_gpu_init(rdev);


 if (rdev->flags & RADEON_IS_IGP) {
  rdev->rlc.reg_list = sumo_rlc_save_restore_register_list;
  rdev->rlc.reg_list_size =
   (u32)(sizeof(sumo_rlc_save_restore_register_list) / sizeof((sumo_rlc_save_restore_register_list)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((sumo_rlc_save_restore_register_list)), typeof(&(sumo_rlc_save_restore_register_list)[0])))); }))));
  rdev->rlc.cs_data = evergreen_cs_data;
  r = sumo_rlc_init(rdev);
  if (r) {
   __drm_err("Failed to init rlc BOs!\n");
   return r;
  }
 }


 r = radeon_wb_init(rdev);
 if (r)
  return r;

 r = radeon_fence_driver_start_ring(rdev, 0);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed initializing CP fences (%d).\n", r); });
  return r;
 }

 r = radeon_fence_driver_start_ring(rdev, 3);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "failed initializing DMA fences (%d).\n", r); });
  return r;
 }

 evergreen_uvd_start(rdev);


 if (!rdev->irq.installed) {
  r = radeon_irq_kms_init(rdev);
  if (r)
   return r;
 }

 r = r600_irq_init(rdev);
 if (r) {
  __drm_err("radeon: IH init failed (%d).\n", r);
  radeon_irq_kms_fini(rdev);
  return r;
 }
 evergreen_irq_set(rdev);

 ring = &rdev->ring[0];
 r = radeon_ring_init(rdev, ring, ring->ring_size, 1024,
        0x80000000);
 if (r)
  return r;

 ring = &rdev->ring[3];
 r = radeon_ring_init(rdev, ring, ring->ring_size, 1792,
        ((((0xf) & 0xF) << 28) | (((0) & 0xFF) << 20) | (((0) & 0xFFFFF) << 0)));
 if (r)
  return r;

 r = evergreen_cp_load_microcode(rdev);
 if (r)
  return r;
 r = evergreen_cp_resume(rdev);
 if (r)
  return r;
 r = r600_dma_resume(rdev);
 if (r)
  return r;

 evergreen_uvd_resume(rdev);

 r = radeon_ib_pool_init(rdev);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "IB initialization failed (%d).\n", r); });
  return r;
 }

 r = radeon_audio_init(rdev);
 if (r) {
  __drm_err("radeon: audio init failed\n");
  return r;
 }

 return 0;
}

int evergreen_resume(struct radeon_device *rdev)
{
 int r;




 if ((rdev)->asic->asic_reset((rdev), false))
  ({ do {} while (0); _dev_warn(rdev->dev, "GPU reset failed !\n"); });





 atom_asic_init(rdev->mode_info.atom_context);


 evergreen_init_golden_registers(rdev);

 if (rdev->pm.pm_method == PM_METHOD_DPM)
  radeon_pm_resume(rdev);

 rdev->accel_working = true;
 r = evergreen_startup(rdev);
 if (r) {
  __drm_err("evergreen startup failed on resume\n");
  rdev->accel_working = false;
  return r;
 }

 return r;

}

int evergreen_suspend(struct radeon_device *rdev)
{
 radeon_pm_suspend(rdev);
 radeon_audio_fini(rdev);
 if (rdev->has_uvd) {
  uvd_v1_0_fini(rdev);
  radeon_uvd_suspend(rdev);
 }
 r700_cp_stop(rdev);
 r600_dma_stop(rdev);
 evergreen_irq_suspend(rdev);
 radeon_wb_disable(rdev);
 evergreen_pcie_gart_disable(rdev);

 return 0;
}







int evergreen_init(struct radeon_device *rdev)
{
 int r;


 if (!radeon_get_bios(rdev)) {
  if (((rdev->family >= CHIP_RS600)))
   return -22;
 }

 if (!rdev->is_atom_bios) {
  ({ do {} while (0); _dev_err(rdev->dev, "Expecting atombios for evergreen GPU\n"); });
  return -22;
 }
 r = radeon_atombios_init(rdev);
 if (r)
  return r;



 if ((rdev)->asic->asic_reset((rdev), false))
  ({ do {} while (0); _dev_warn(rdev->dev, "GPU reset failed !\n"); });

 if (!radeon_card_posted(rdev)) {
  if (!rdev->bios) {
   ({ do {} while (0); _dev_err(rdev->dev, "Card not posted and no BIOS - ignoring\n"); });
   return -22;
  }
  ({ do {} while (0); _printk("\001" "6" "[" "drm" "] " "GPU not posted. posting now...\n"); });
  atom_asic_init(rdev->mode_info.atom_context);
 }

 evergreen_init_golden_registers(rdev);

 r600_scratch_init(rdev);

 radeon_surface_init(rdev);

 radeon_get_clock_info(rdev->ddev);

 radeon_fence_driver_init(rdev);

 if (rdev->flags & RADEON_IS_AGP) {
  r = radeon_agp_init(rdev);
  if (r)
   radeon_agp_disable(rdev);
 }

 r = evergreen_mc_init(rdev);
 if (r)
  return r;

 r = radeon_bo_init(rdev);
 if (r)
  return r;

 if (((rdev->family >= CHIP_BARTS))) {
  if (!rdev->me_fw || !rdev->pfp_fw || !rdev->rlc_fw || !rdev->mc_fw) {
   r = ni_init_microcode(rdev);
   if (r) {
    __drm_err("Failed to load firmware!\n");
    return r;
   }
  }
 } else {
  if (!rdev->me_fw || !rdev->pfp_fw || !rdev->rlc_fw) {
   r = r600_init_microcode(rdev);
   if (r) {
    __drm_err("Failed to load firmware!\n");
    return r;
   }
  }
 }


 radeon_pm_init(rdev);

 rdev->ring[0].ring_obj = ((void *)0);
 r600_ring_init(rdev, &rdev->ring[0], 1024 * 1024);

 rdev->ring[3].ring_obj = ((void *)0);
 r600_ring_init(rdev, &rdev->ring[3], 64 * 1024);

 evergreen_uvd_init(rdev);

 rdev->ih.ring_obj = ((void *)0);
 r600_ih_ring_init(rdev, 64 * 1024);

 r = r600_pcie_gart_init(rdev);
 if (r)
  return r;

 rdev->accel_working = true;
 r = evergreen_startup(rdev);
 if (r) {
  ({ do {} while (0); _dev_err(rdev->dev, "disabling GPU acceleration\n"); });
  r700_cp_fini(rdev);
  r600_dma_fini(rdev);
  r600_irq_fini(rdev);
  if (rdev->flags & RADEON_IS_IGP)
   sumo_rlc_fini(rdev);
  radeon_wb_fini(rdev);
  radeon_ib_pool_fini(rdev);
  radeon_irq_kms_fini(rdev);
  evergreen_pcie_gart_fini(rdev);
  rdev->accel_working = false;
 }





 if (((rdev->family >= CHIP_BARTS))) {
  if (!rdev->mc_fw && !(rdev->flags & RADEON_IS_IGP)) {
   __drm_err("radeon: MC ucode required for NI+.\n");
   return -22;
  }
 }

 return 0;
}

void evergreen_fini(struct radeon_device *rdev)
{
 radeon_pm_fini(rdev);
 radeon_audio_fini(rdev);
 r700_cp_fini(rdev);
 r600_dma_fini(rdev);
 r600_irq_fini(rdev);
 if (rdev->flags & RADEON_IS_IGP)
  sumo_rlc_fini(rdev);
 radeon_wb_fini(rdev);
 radeon_ib_pool_fini(rdev);
 radeon_irq_kms_fini(rdev);
 uvd_v1_0_fini(rdev);
 radeon_uvd_fini(rdev);
 evergreen_pcie_gart_fini(rdev);
 r600_vram_scratch_fini(rdev);
 radeon_gem_fini(rdev);
 radeon_fence_driver_fini(rdev);
 radeon_agp_fini(rdev);
 radeon_bo_fini(rdev);
 radeon_atombios_fini(rdev);
 kfree(rdev->bios);
 rdev->bios = ((void *)0);
}

void evergreen_pcie_gen2_enable(struct radeon_device *rdev)
{
 u32 link_width_cntl, speed_cntl;

 if (radeon_pcie_gen2 == 0)
  return;

 if (rdev->flags & RADEON_IS_IGP)
  return;

 if (!(rdev->flags & RADEON_IS_PCIE))
  return;


 if (((rdev->pdev->device == 0x9441) || (rdev->pdev->device == 0x9443) || (rdev->pdev->device == 0x944B) || (rdev->pdev->device == 0x9506) || (rdev->pdev->device == 0x9509) || (rdev->pdev->device == 0x950F) || (rdev->pdev->device == 0x689C) || (rdev->pdev->device == 0x689D)))
  return;

 if ((rdev->pdev->bus->max_bus_speed != PCIE_SPEED_5_0GT) &&
  (rdev->pdev->bus->max_bus_speed != PCIE_SPEED_8_0GT))
  return;

 speed_cntl = rdev->pciep_rreg(rdev, (0xa4));
 if (speed_cntl & (1 << 11)) {
  ({ do {} while (0); _printk("\001" "6" "[" "drm" "] " "PCIE gen 2 link speeds already enabled\n"); });
  return;
 }

 ({ do {} while (0); _printk("\001" "6" "[" "drm" "] " "enabling PCIE gen 2 link speeds, disable with radeon.pcie_gen2=0\n"); });

 if ((speed_cntl & (1 << 23)) ||
     (speed_cntl & (1 << 24))) {

  link_width_cntl = rdev->pciep_rreg(rdev, (0xa2));
  link_width_cntl &= ~(1 << 13);
  rdev->pciep_wreg(rdev, (0xa2), (link_width_cntl));

  speed_cntl = rdev->pciep_rreg(rdev, (0xa4));
  speed_cntl &= ~(1 << 1);
  rdev->pciep_wreg(rdev, (0xa4), (speed_cntl));

  speed_cntl = rdev->pciep_rreg(rdev, (0xa4));
  speed_cntl |= (1 << 21);
  rdev->pciep_wreg(rdev, (0xa4), (speed_cntl));

  speed_cntl = rdev->pciep_rreg(rdev, (0xa4));
  speed_cntl &= ~(1 << 21);
  rdev->pciep_wreg(rdev, (0xa4), (speed_cntl));

  speed_cntl = rdev->pciep_rreg(rdev, (0xa4));
  speed_cntl |= (1 << 0);
  rdev->pciep_wreg(rdev, (0xa4), (speed_cntl));

 } else {
  link_width_cntl = rdev->pciep_rreg(rdev, (0xa2));

  if (1)
   link_width_cntl |= (1 << 13);
  else
   link_width_cntl &= ~(1 << 13);
  rdev->pciep_wreg(rdev, (0xa2), (link_width_cntl));
 }
}

void evergreen_program_aspm(struct radeon_device *rdev)
{
 u32 data, orig;
 u32 pcie_lc_cntl, pcie_lc_cntl_old;
 bool disable_l0s, disable_l1 = false, disable_plloff_in_l1 = false;





 bool fusion_platform = false;

 if (radeon_aspm == 0)
  return;

 if (!(rdev->flags & RADEON_IS_PCIE))
  return;

 switch (rdev->family) {
 case CHIP_CYPRESS:
 case CHIP_HEMLOCK:
 case CHIP_JUNIPER:
 case CHIP_REDWOOD:
 case CHIP_CEDAR:
 case CHIP_SUMO:
 case CHIP_SUMO2:
 case CHIP_PALM:
 case CHIP_ARUBA:
  disable_l0s = true;
  break;
 default:
  disable_l0s = false;
  break;
 }

 if (rdev->flags & RADEON_IS_IGP)
  fusion_platform = true;

 data = orig = eg_pif_phy0_rreg(rdev, (0x11));
 if (fusion_platform)
  data &= ~(1 << 25);
 else
  data |= (1 << 25);
 if (data != orig)
  eg_pif_phy0_wreg(rdev, (0x11), (data));

 data = orig = eg_pif_phy1_rreg(rdev, (0x11));
 if (fusion_platform)
  data &= ~(1 << 25);
 else
  data |= (1 << 25);
 if (data != orig)
  eg_pif_phy1_wreg(rdev, (0x11), (data));

 pcie_lc_cntl = pcie_lc_cntl_old = rdev->pciep_rreg(rdev, (0xa0));
 pcie_lc_cntl &= ~((0xf << 8) | (0xf << 12));
 if (!disable_l0s) {
  if (rdev->family >= CHIP_BARTS)
   pcie_lc_cntl |= ((7) << 8);
  else
   pcie_lc_cntl |= ((3) << 8);
 }

 if (!disable_l1) {
  if (rdev->family >= CHIP_BARTS)
   pcie_lc_cntl |= ((7) << 12);
  else
   pcie_lc_cntl |= ((8) << 12);

  if (!disable_plloff_in_l1) {
   data = orig = eg_pif_phy0_rreg(rdev, (0x12));
   data &= ~((0x7 << 10) | (0x7 << 7));
   data |= ((7) << 10) | ((7) << 7);
   if (data != orig)
    eg_pif_phy0_wreg(rdev, (0x12), (data));

   data = orig = eg_pif_phy0_rreg(rdev, (0x13));
   data &= ~((0x7 << 10) | (0x7 << 7));
   data |= ((7) << 10) | ((7) << 7);
   if (data != orig)
    eg_pif_phy0_wreg(rdev, (0x13), (data));

   data = orig = eg_pif_phy1_rreg(rdev, (0x12));
   data &= ~((0x7 << 10) | (0x7 << 7));
   data |= ((7) << 10) | ((7) << 7);
   if (data != orig)
    eg_pif_phy1_wreg(rdev, (0x12), (data));

   data = orig = eg_pif_phy1_rreg(rdev, (0x13));
   data &= ~((0x7 << 10) | (0x7 << 7));
   data |= ((7) << 10) | ((7) << 7);
   if (data != orig)
    eg_pif_phy1_wreg(rdev, (0x13), (data));

   if (rdev->family >= CHIP_BARTS) {
    data = orig = eg_pif_phy0_rreg(rdev, (0x12));
    data &= ~(0x7 << 24);
    data |= ((4) << 24);
    if (data != orig)
     eg_pif_phy0_wreg(rdev, (0x12), (data));

    data = orig = eg_pif_phy0_rreg(rdev, (0x13));
    data &= ~(0x7 << 24);
    data |= ((4) << 24);
    if (data != orig)
     eg_pif_phy0_wreg(rdev, (0x13), (data));

    data = orig = eg_pif_phy1_rreg(rdev, (0x12));
    data &= ~(0x7 << 24);
    data |= ((4) << 24);
    if (data != orig)
     eg_pif_phy1_wreg(rdev, (0x12), (data));

    data = orig = eg_pif_phy1_rreg(rdev, (0x13));
    data &= ~(0x7 << 24);
    data |= ((4) << 24);
    if (data != orig)
     eg_pif_phy1_wreg(rdev, (0x13), (data));
   }

   data = orig = rdev->pciep_rreg(rdev, (0xa2));
   data &= ~(0x3 << 21);
   data |= ((3) << 21);
   if (data != orig)
    rdev->pciep_wreg(rdev, (0xa2), (data));

   if (rdev->family >= CHIP_BARTS) {
    data = orig = eg_pif_phy0_rreg(rdev, (0x10));
    data &= ~(0x7 << 17);
    data |= ((1) << 17);
    if (data != orig)
     eg_pif_phy0_wreg(rdev, (0x10), (data));

    data = orig = eg_pif_phy1_rreg(rdev, (0x10));
    data &= ~(0x7 << 17);
    data |= ((1) << 17);
    if (data != orig)
     eg_pif_phy1_wreg(rdev, (0x10), (data));
   }
  }
 }


 if (rdev->family < CHIP_BARTS)
  pcie_lc_cntl |= (1 << 16);

 if (pcie_lc_cntl != pcie_lc_cntl_old)
  rdev->pciep_wreg(rdev, (0xa0), (pcie_lc_cntl));
}
